#====================================================================
#
#               Winim - Nim's Windows API Module
#                 (c) Copyright 2016-2017 Ward
#
#                       Windows Headers
#
#====================================================================

{.deadCodeElim: on.}

import macros

macro winapi*(x: untyped): untyped =
  addPragma(x, newIdentNode("stdcall"))
  when not defined(win_no_discardable):
    addPragma(x, newIdentNode("discardable"))

  result = x

# def/basetsd.nim

type
  HANDLE* = int
  PHANDLE* = ptr HANDLE
  LPHANDLE* = ptr HANDLE

when defined(cpu64):
  const
    ADDRESS_TAG_BIT* = 0x40000000000.uint64

  type
    INT_PTR* = int64
    LONG_PTR* = int64
    PINT_PTR* = ptr int64
    PLONG_PTR* = ptr int64
    UINT_PTR* = uint64
    ULONG_PTR* = uint64
    HANDLE_PTR* = uint64
    PUINT_PTR* = ptr uint64
    PULONG_PTR* = ptr uint64
    HALF_PTR* = int32
    PHALF_PTR* = ptr int32
    UHALF_PTR* = uint32
    PUHALF_PTR* = ptr uint32
    SIZE_T* = int64

else:
  const
    ADDRESS_TAG_BIT* = 0x80000000'u32

  type
    INT_PTR* = int32
    LONG_PTR* = int32
    PINT_PTR* = ptr int32
    PLONG_PTR* = ptr int32
    UINT_PTR* = uint32
    ULONG_PTR* = uint32
    HANDLE_PTR* = uint32
    PUINT_PTR* = ptr uint32
    PULONG_PTR* = ptr uint32
    HALF_PTR* = int16
    PHALF_PTR* = ptr int16
    UHALF_PTR* = uint16
    PUHALF_PTR* = ptr uint16
    SIZE_T* = uint32

const
  MAXUINT_PTR* = (not 0.UINT_PTR)
  MAXINT_PTR* = INT_PTR.high.INT_PTR
  MININT_PTR* = INT_PTR.low.INT_PTR
  MAXULONG_PTR* = (not 0.ULONG_PTR)
  MAXLONG_PTR* = LONG_PTR.high.LONG_PTR
  MINLONG_PTR* = LONG_PTR.low.LONG_PTR
  MAXUHALF_PTR* = UHALF_PTR.high.UHALF_PTR
  MAXHALF_PTR* = HALF_PTR.high.HALF_PTR
  MINHALF_PTR* = HALF_PTR.low.HALF_PTR

type
  INT8* = int8
  PINT8* = ptr int8
  UINT8* = uint8
  PUINT8* = ptr uint8
  INT16* = int16
  PINT16* = ptr int16
  UINT16* = uint16
  PUINT16* = ptr uint16
  LONG32* = int32
  INT32* = int32
  PLONG32* = ptr int32
  PINT32* = ptr int32
  ULONG32* = uint32
  DWORD32* = uint32
  UINT32* = uint32
  PULONG32* = ptr uint32
  PDWORD32* = ptr uint32
  PUINT32* = ptr uint32
  DWORD_PTR* = ULONG_PTR
  PSIZE_T* = ptr ULONG_PTR
  PDWORD_PTR* = ptr ULONG_PTR
  SSIZE_T* = LONG_PTR
  PSSIZE_T* = ptr LONG_PTR
  LONG64* = int64
  INT64* = int64
  PLONG64* = ptr int64
  PINT64* = ptr int64
  ULONG64* = uint64
  DWORD64* = uint64
  UINT64* = uint64
  PULONG64* = ptr uint64
  PDWORD64* = ptr uint64
  PUINT64* = ptr uint64

# def/windef.nim

const
  MAX_PATH* = 260
  NULL* = nil

proc MAKEWORD*(a, b: auto): uint16 = (b.uint8.uint16 shl 8) or a.uint8.uint16
proc MAKELONG*(a, b: auto): uint32 = (b.uint16.uint32 shl 16) or a.uint16.uint32
proc LOWORD*(L: auto): uint16 = L.uint16
proc HIWORD*(L: auto): uint16 = (L shr 16).uint16
proc LOBYTE*(w: auto): uint8 = w.uint8
proc HIBYTE*(w: auto): uint8 = (w shr 8).uint8

type
  BYTE* = uint8
  PBYTE* = ptr uint8
  LPBYTE* = ptr uint8
  USHORT* = uint16
  SHORT* = int16
  WORD* = uint16
  ATOM* = uint16
  PUSHORT* = ptr uint16
  PWORD* = ptr uint16
  LPWORD* = ptr uint16
  ULONG* = uint32
  DWORD* = uint32
  UINT* = uint32
  COLORREF* = uint32
  PULONG* = ptr uint32
  PDWORD* = ptr uint32
  LPDWORD* = ptr uint32
  PUINT* = ptr uint32
  LPUINT* = ptr uint32
  WINBOOL* = int32
  BOOL* = int32
  INT* = int32
  LONG* = int32
  HFILE* = int32
  HRESULT* = int32
  PWINBOOL* = ptr int32
  LPWINBOOL* = ptr int32
  PBOOL* = ptr int32
  LPBOOL* = ptr int32
  PINT* = ptr int32
  LPINT* = ptr int32
  LPLONG* = ptr int32
  FLOAT* = float32
  PFLOAT* = ptr float32
  PCVOID* = pointer
  LPCVOID* = pointer
  WPARAM* = UINT_PTR
  LPARAM* = LONG_PTR
  LRESULT* = LONG_PTR
  HGLOBAL* = HANDLE
  HLOCAL* = HANDLE
  # GLOBALHANDLE* = HANDLE
  # LOCALHANDLE* = HANDLE
  HGDIOBJ* = HANDLE
  HACCEL* = HANDLE
  HBITMAP* = HANDLE
  HBRUSH* = HANDLE
  HCOLORSPACE* = HANDLE
  HDC* = HANDLE
  HGLRC* = HANDLE
  HDESK* = HANDLE
  HENHMETAFILE* = HANDLE
  HFONT* = HANDLE
  HICON* = HANDLE
  HINSTANCE* = HANDLE
  HKEY* = HANDLE
  HMENU* = HANDLE
  HMETAFILE* = HANDLE
  HMODULE* = HANDLE
  HMONITOR* = HANDLE
  HPALETTE* = HANDLE
  HPEN* = HANDLE
  HRGN* = HANDLE
  HRSRC* = HANDLE
  HSTR* = HANDLE
  HTASK* = HANDLE
  HWND* = HANDLE
  HWINSTA* = HANDLE
  HKL* = HANDLE
  HCURSOR* = HANDLE
  PHKEY* = ptr HANDLE
  HTERMINAL* = HANDLE
  HWINEVENTHOOK* = HANDLE
  FARPROC* = pointer
  NEARPROC* = pointer
  PROC* = pointer
  RECT* {.final, pure.} = object
    left*: LONG
    top*: LONG
    right*: LONG
    bottom*: LONG
  RECTL* = RECT
  PRECT* = ptr RECT
  LPRECT* = ptr RECT
  PRECTL* = ptr RECT
  LPRECTL* = ptr RECT
  LPCRECT* = ptr RECT
  LPCRECTL* = ptr RECT
  POINT* {.final, pure.} = object
    x*: LONG
    y*: LONG
  POINTL* = POINT
  PPOINT* = ptr POINT
  LPPOINT* = ptr POINT
  PPOINTL* = ptr POINT
  LPPOINTL* = ptr POINT
  SIZE* {.final, pure.} = object
    cx*: LONG
    cy*: LONG
  SIZEL* = SIZE
  PSIZE* = ptr SIZE
  LPSIZE* = ptr SIZE
  PSIZEL* = ptr SIZE
  LPSIZEL* = ptr SIZE
  POINTS* {.final, pure.} = object
    x*: SHORT
    y*: SHORT
  PPOINTS* = ptr POINTS
  LPPOINTS* = ptr POINTS

const
  FALSE* = 0
  TRUE* = 1

# def/basetyps.nim

type
  GUID* {.final, pure.} = object
    Data1*: DWORD
    Data2*: WORD
    Data3*: WORD
    Data4*: array[8, BYTE]
  UUID* = GUID
  IID* = GUID
  CLSID* = GUID
  FMTID* = GUID
  uuid_t* = GUID
  LPGUID* = ptr GUID
  LPCGUID* = ptr GUID
  LPCLSID* = ptr GUID
  LPIID* = ptr GUID
  REFGUID* = ptr GUID
  REFIID* = ptr GUID
  REFCLSID* = ptr GUID
  REFFMTID* = ptr GUID
  error_status_t* = uint32
  PROPID* = uint32

proc DEFINE_GUID*(Data1: DWORD, Data2: WORD, Data3: WORD, Data4: array[8, BYTE]): GUID =
  result = GUID(Data1: Data1, Data2: Data2, Data3: Data3, Data4: Data4)

# def/winnt.nim
const
  # TOKEN_TYPE* = enum
  TokenPrimary* = 1
  TokenImpersonation* = 2
  # SID_NAME_USE* = enum
  SidTypeUser* = 1
  SidTypeGroup* = 2
  SidTypeDomain* = 3
  SidTypeAlias* = 4
  SidTypeWellKnownGroup* = 5
  SidTypeDeletedAccount* = 6
  SidTypeInvalid* = 7
  SidTypeUnknown* = 8
  SidTypeComputer* = 9
  # SERVICE_NODE_TYPE* = enum
  DriverType* = 1
  FileSystemType* = 2
  AdapterType* = 4
  RecognizerType* = 8
  Win32ServiceOwnProcess* = 16
  Win32ServiceShareProcess* = 32
  # SERVICE_LOAD_TYPE* = enum
  BootLoad* = 0
  SystemLoad* = 1
  AutoLoad* = 2
  DemandLoad* = 3
  DisableLoad* = 4
  # SERVICE_ERROR_TYPE* = enum
  IgnoreError* = 0
  NormalError* = 1
  SevereError* = 2
  CriticalError* = 3
  # LATENCY_TIME* = enum
  LT_DONT_CARE* = 0
  LT_LOWEST_LATENCY* = 1
  # POWER_ACTION* = enum
  PowerActionNone* = 0
  PowerActionReserved* = 1
  PowerActionSleep* = 2
  PowerActionHibernate* = 3
  PowerActionShutdown* = 4
  PowerActionShutdownReset* = 5
  PowerActionShutdownOff* = 6
  PowerActionWarmEject* = 7
  # SYSTEM_POWER_CONDITION* = enum
  PoAc* = 0
  PoDc* = 1
  PoHot* = 2
  PoConditionMaximum* = 3
  # DEVICE_POWER_STATE* = enum
  PowerDeviceUnspecified* = 0
  PowerDeviceD0* = 1
  PowerDeviceD1* = 2
  PowerDeviceD2* = 3
  PowerDeviceD3* = 4
  PowerDeviceMaximum* = 5
  # HEAP_INFORMATION_CLASS* = enum
  HeapCompatibilityInformation* = 0

when not declared(SHORT):
  type
    SHORT* = int16

type
  VOID* = void
  CHAR* = char
  CCHAR* = char
  WCHAR* = uint16
  BOOLEAN* = bool
  FCHAR* = int8
  UCHAR* = uint8
  LANGID* = uint16
  FSHORT* = uint16
  LCID* = uint32
  FLONG* = uint32
  ACCESS_MASK* = uint32
  LONGLONG* = int64
  USN* = int64
  DWORDLONG* = uint64
  ULONGLONG* = uint64
  PVOID* = pointer
  LPVOID* = pointer
  PSZ* = cstring
  PCHAR* = cstring
  PCCHAR* = cstring
  LPCH* = cstring
  PCH* = cstring
  LPSTR* = cstring
  PSTR* = cstring
  PWCHAR* = ptr uint16
  LPWCH* = ptr uint16
  PWCH* = ptr uint16
  LPWSTR* = ptr uint16
  PWSTR* = ptr uint16
  PBOOLEAN* = ptr bool
  PUCHAR* = ptr uint8
  PSHORT* = ptr int16
  PLONG* = ptr int32
  PLCID* = ptr uint32
  PACCESS_MASK* = ptr uint32
  PLONGLONG* = ptr int64
  PDWORDLONG* = ptr uint64
  PULONGLONG* = ptr uint64
  PVOID64* = pointer
  LPCCH* = cstring
  PCSTR* = cstring
  LPCSTR* = cstring
  LPCWCH* = ptr uint16
  PCWCH* = ptr uint16
  LPCWSTR* = ptr uint16
  PCWSTR* = ptr uint16

when not defined(winansi):
  type
    TCHAR* = WCHAR
    TBYTE* = TCHAR
    PTCH* = ptr TCHAR
    PTBYTE* = ptr TCHAR
    LPTCH* = ptr TCHAR
    PTSTR* = ptr TCHAR
    LPTSTR* = ptr TCHAR
    LP* = ptr TCHAR
    PTCHAR* = ptr TCHAR
    LPCTSTR* = ptr TCHAR

else:
  type
    TCHAR* = CHAR
    TBYTE* = TCHAR
    PTCH* = cstring
    PTBYTE* = cstring
    LPTCH* = cstring
    PTSTR* = cstring
    LPTSTR* = cstring
    LP* = cstring
    PTCHAR* = cstring
    LPCTSTR* = cstring

const
  ANSI_NULL* = '\0'.char
  UNICODE_NULL* = '\0'.WCHAR
  APPLICATION_ERROR_MASK* = 0x20000000
  ERROR_SEVERITY_SUCCESS* = 0x00000000
  ERROR_SEVERITY_INFORMATIONAL* = 0x40000000
  ERROR_SEVERITY_WARNING* = 0x80000000'i32
  ERROR_SEVERITY_ERROR* = -1073741824
  COMPRESSION_FORMAT_NONE* = 0x0000
  COMPRESSION_FORMAT_DEFAULT* = 0x0001
  COMPRESSION_FORMAT_LZNT1* = 0x0002
  COMPRESSION_ENGINE_STANDARD* = 0x0000
  COMPRESSION_ENGINE_MAXIMUM* = 0x0100
  COMPRESSION_ENGINE_HIBER* = 0x0200
  ACE_OBJECT_TYPE_PRESENT* = 0x00000001
  ACE_INHERITED_OBJECT_TYPE_PRESENT* = 0x00000002
  ACCESS_ALLOWED_ACE_TYPE* = 0
  ACCESS_DENIED_ACE_TYPE* = 1
  SYSTEM_AUDIT_ACE_TYPE* = 2
  SYSTEM_ALARM_ACE_TYPE* = 3
  OBJECT_INHERIT_ACE* = 0x01
  CONTAINER_INHERIT_ACE* = 0x02
  NO_PROPAGATE_INHERIT_ACE* = 0x04
  INHERIT_ONLY_ACE* = 0x08
  INHERITED_ACE* = 0x10
  VALID_INHERIT_FLAGS* = 0x1F
  SUCCESSFUL_ACCESS_ACE_FLAG* = 0x40
  FAILED_ACCESS_ACE_FLAG* = 0x80
  # DELETE* = 0x00010000.ACCESS_MASK
  READ_CONTROL* = 0x00020000
  WRITE_DAC* = 0x00040000
  WRITE_OWNER* = 0x00080000
  SYNCHRONIZE* = 0x00100000
  ACCESS_SYSTEM_SECURITY* = 0x01000000
  MAXIMUM_ALLOWED* = 0x02000000
  GENERIC_READ* = 0x80000000'u32
  GENERIC_WRITE* = 0x40000000
  GENERIC_EXECUTE* = 0x20000000
  GENERIC_ALL* = 0x10000000
  STANDARD_RIGHTS_REQUIRED* = 0x000F0000
  STANDARD_RIGHTS_READ* = 0x00020000
  STANDARD_RIGHTS_WRITE* = 0x00020000
  STANDARD_RIGHTS_EXECUTE* = 0x00020000
  STANDARD_RIGHTS_ALL* = 0x001F0000
  SPECIFIC_RIGHTS_ALL* = 0x0000FFFF
  INVALID_FILE_ATTRIBUTES* = 0xFFFFFFFF'u32
  FILE_LIST_DIRECTORY* = 0x00000001
  FILE_READ_DATA* = 0x00000001
  FILE_ADD_FILE* = 0x00000002
  FILE_WRITE_DATA* = 0x00000002
  FILE_ADD_SUBDIRECTORY* = 0x00000004
  FILE_APPEND_DATA* = 0x00000004
  FILE_CREATE_PIPE_INSTANCE* = 0x00000004
  FILE_READ_EA* = 0x00000008
  FILE_READ_PROPERTIES* = 0x00000008
  FILE_WRITE_EA* = 0x00000010
  FILE_WRITE_PROPERTIES* = 0x00000010
  FILE_EXECUTE* = 0x00000020
  FILE_TRAVERSE* = 0x00000020
  FILE_DELETE_CHILD* = 0x00000040
  FILE_READ_ATTRIBUTES* = 0x00000080
  FILE_WRITE_ATTRIBUTES* = 0x00000100
  FILE_SHARE_READ* = 0x00000001
  FILE_SHARE_WRITE* = 0x00000002
  FILE_SHARE_DELETE* = 0x00000004
  FILE_SHARE_VALID_FLAGS* = 0x00000007
  FILE_ATTRIBUTE_READONLY* = 0x00000001
  FILE_ATTRIBUTE_HIDDEN* = 0x00000002
  FILE_ATTRIBUTE_SYSTEM* = 0x00000004
  FILE_ATTRIBUTE_DIRECTORY* = 0x00000010
  FILE_ATTRIBUTE_ARCHIVE* = 0x00000020
  FILE_ATTRIBUTE_DEVICE* = 0x00000040
  FILE_ATTRIBUTE_NORMAL* = 0x00000080
  FILE_ATTRIBUTE_TEMPORARY* = 0x00000100
  FILE_ATTRIBUTE_SPARSE_FILE* = 0x00000200
  FILE_ATTRIBUTE_REPARSE_POINT* = 0x00000400
  FILE_ATTRIBUTE_COMPRESSED* = 0x00000800
  FILE_ATTRIBUTE_OFFLINE* = 0x00001000
  FILE_ATTRIBUTE_NOT_CONTENT_INDEXED* = 0x00002000
  FILE_ATTRIBUTE_ENCRYPTED* = 0x00004000
  FILE_ATTRIBUTE_VALID_FLAGS* = 0x00007fb7
  FILE_ATTRIBUTE_VALID_SET_FLAGS* = 0x000031a7
  FILE_COPY_STRUCTURED_STORAGE* = 0x00000041
  FILE_STRUCTURED_STORAGE* = 0x00000441
  FILE_VALID_OPTION_FLAGS* = 0x00ffffff
  FILE_VALID_PIPE_OPTION_FLAGS* = 0x00000032
  FILE_VALID_MAILSLOT_OPTION_FLAGS* = 0x00000032
  FILE_VALID_SET_FLAGS* = 0x00000036
  FILE_SUPERSEDE* = 0x00000000
  FILE_OPEN* = 0x00000001
  FILE_CREATE* = 0x00000002
  FILE_OPEN_IF* = 0x00000003
  FILE_OVERWRITE* = 0x00000004
  FILE_OVERWRITE_IF* = 0x00000005
  FILE_MAXIMUM_DISPOSITION* = 0x00000005
  FILE_DIRECTORY_FILE* = 0x00000001
  FILE_WRITE_THROUGH* = 0x00000002
  FILE_SEQUENTIAL_ONLY* = 0x00000004
  FILE_NO_INTERMEDIATE_BUFFERING* = 0x00000008
  FILE_SYNCHRONOUS_IO_ALERT* = 0x00000010
  FILE_SYNCHRONOUS_IO_NONALERT* = 0x00000020
  FILE_NON_DIRECTORY_FILE* = 0x00000040
  FILE_CREATE_TREE_CONNECTION* = 0x00000080
  FILE_COMPLETE_IF_OPLOCKED* = 0x00000100
  FILE_NO_EA_KNOWLEDGE* = 0x00000200
  FILE_OPEN_FOR_RECOVERY* = 0x00000400
  FILE_RANDOM_ACCESS* = 0x00000800
  FILE_DELETE_ON_CLOSE* = 0x00001000
  FILE_OPEN_BY_FILE_ID* = 0x00002000
  FILE_OPEN_FOR_BACKUP_INTENT* = 0x00004000
  FILE_NO_COMPRESSION* = 0x00008000
  FILE_RESERVE_OPFILTER* = 0x00100000
  FILE_OPEN_REPARSE_POINT* = 0x00200000
  FILE_OPEN_NO_RECALL* = 0x00400000
  FILE_OPEN_FOR_FREE_SPACE_QUERY* = 0x00800000
  FILE_ALL_ACCESS* = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE or 0x01FF).ACCESS_MASK
  FILE_GENERIC_EXECUTE* = (STANDARD_RIGHTS_EXECUTE or FILE_READ_ATTRIBUTES or FILE_EXECUTE or SYNCHRONIZE).ACCESS_MASK
  FILE_GENERIC_READ* = (STANDARD_RIGHTS_READ or FILE_READ_DATA or FILE_READ_ATTRIBUTES or FILE_READ_EA or SYNCHRONIZE).ACCESS_MASK
  FILE_GENERIC_WRITE* = (STANDARD_RIGHTS_WRITE or FILE_WRITE_DATA or FILE_WRITE_ATTRIBUTES or FILE_WRITE_EA or FILE_APPEND_DATA or SYNCHRONIZE).ACCESS_MASK
  FILE_NOTIFY_CHANGE_FILE_NAME* = 0x00000001
  FILE_NOTIFY_CHANGE_DIR_NAME* = 0x00000002
  FILE_NOTIFY_CHANGE_NAME* = 0x00000003
  FILE_NOTIFY_CHANGE_ATTRIBUTES* = 0x00000004
  FILE_NOTIFY_CHANGE_SIZE* = 0x00000008
  FILE_NOTIFY_CHANGE_LAST_WRITE* = 0x00000010
  FILE_NOTIFY_CHANGE_LAST_ACCESS* = 0x00000020
  FILE_NOTIFY_CHANGE_CREATION* = 0x00000040
  FILE_NOTIFY_CHANGE_EA* = 0x00000080
  FILE_NOTIFY_CHANGE_SECURITY* = 0x00000100
  FILE_NOTIFY_CHANGE_STREAM_NAME* = 0x00000200
  FILE_NOTIFY_CHANGE_STREAM_SIZE* = 0x00000400
  FILE_NOTIFY_CHANGE_STREAM_WRITE* = 0x00000800
  FILE_NOTIFY_VALID_MASK* = 0x00000fff
  FILE_CASE_SENSITIVE_SEARCH* = 0x00000001
  FILE_CASE_PRESERVED_NAMES* = 0x00000002
  FILE_UNICODE_ON_DISK* = 0x00000004
  FILE_PERSISTENT_ACLS* = 0x00000008
  FILE_FILE_COMPRESSION* = 0x00000010
  FILE_VOLUME_QUOTAS* = 0x00000020
  FILE_SUPPORTS_SPARSE_FILES* = 0x00000040
  FILE_SUPPORTS_REPARSE_POINTS* = 0x00000080
  FILE_SUPPORTS_REMOTE_STORAGE* = 0x00000100
  FS_LFN_APIS* = 0x00004000
  FILE_VOLUME_IS_COMPRESSED* = 0x00008000
  FILE_SUPPORTS_OBJECT_IDS* = 0x00010000
  FILE_SUPPORTS_ENCRYPTION* = 0x00020000
  FILE_NAMED_STREAMS* = 0x00040000
  FILE_READ_ONLY_VOLUME* = 0x00080000
  FILE_SEQUENTIAL_WRITE_ONCE* = 0x00100000
  FILE_SUPPORTS_TRANSACTIONS* = 0x00200000
  IO_COMPLETION_QUERY_STATE* = 1
  IO_COMPLETION_MODIFY_STATE* = 2
  IO_COMPLETION_ALL_ACCESS* = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE or 3).ACCESS_MASK
  DUPLICATE_CLOSE_SOURCE* = 1
  DUPLICATE_SAME_ACCESS* = 2
  DUPLICATE_SAME_ATTRIBUTES* = 4
  MAILSLOT_NO_MESSAGE* = 0xFFFFFFFF'u32
  MAILSLOT_WAIT_FOREVER* = 0xFFFFFFFF'u32
  PROCESS_TERMINATE* = 0x0001
  PROCESS_CREATE_THREAD* = 0x0002
  PROCESS_SET_SESSIONID* = 0x0004
  PROCESS_VM_OPERATION* = 0x0008
  PROCESS_VM_READ* = 0x0010
  PROCESS_VM_WRITE* = 0x0020
  PROCESS_DUP_HANDLE* = 0x0040
  PROCESS_CREATE_PROCESS* = 0x0080
  PROCESS_SET_QUOTA* = 0x0100
  PROCESS_SET_INFORMATION* = 0x0200
  PROCESS_QUERY_INFORMATION* = 0x0400
  PROCESS_ALL_ACCESS* = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE or 0x0FFF).ACCESS_MASK
  THREAD_TERMINATE* = 0x0001
  THREAD_SUSPEND_RESUME* = 0x0002
  THREAD_GET_CONTEXT* = 0x0008
  THREAD_SET_CONTEXT* = 0x0010
  THREAD_SET_INFORMATION* = 0x0020
  THREAD_QUERY_INFORMATION* = 0x0040
  THREAD_SET_THREAD_TOKEN* = 0x0080
  THREAD_IMPERSONATE* = 0x0100
  THREAD_DIRECT_IMPERSONATION* = 0x0200
  THREAD_ALL_ACCESS* = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE or 0x3FF).ACCESS_MASK
  THREAD_BASE_PRIORITY_LOWRT* = 15
  THREAD_BASE_PRIORITY_MAX* = 2
  THREAD_BASE_PRIORITY_MIN* = -2
  THREAD_BASE_PRIORITY_IDLE* = -15
  EXCEPTION_NONCONTINUABLE* = 1
  EXCEPTION_MAXIMUM_PARAMETERS* = 15
  MUTANT_QUERY_STATE* = 1
  MUTANT_ALL_ACCESS* = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE or MUTANT_QUERY_STATE).ACCESS_MASK
  TIMER_QUERY_STATE* = 1
  TIMER_MODIFY_STATE* = 2
  TIMER_ALL_ACCESS* = (STANDARD_RIGHTS_REQUIRED or SYNCHRONIZE or TIMER_QUERY_STATE or TIMER_MODIFY_STATE).ACCESS_MASK
  SECURITY_NULL_SID_AUTHORITY* = [0.byte,0,0,0,0,0]
  SECURITY_WORLD_SID_AUTHORITY* = [0.byte,0,0,0,0,1]
  SECURITY_LOCAL_SID_AUTHORITY* = [0.byte,0,0,0,0,2]
  SECURITY_CREATOR_SID_AUTHORITY* = [0.byte,0,0,0,0,3]
  SECURITY_NON_UNIQUE_AUTHORITY* = [0.byte,0,0,0,0,4]
  SECURITY_NT_AUTHORITY* = [0.byte,0,0,0,0,5]
  SECURITY_MANDATORY_LABEL_AUTHORITY* = [0.byte,0,0,0,0,16]
  SECURITY_NULL_RID* = 0
  SECURITY_WORLD_RID* = 0
  SECURITY_LOCAL_RID* = 0
  SECURITY_CREATOR_OWNER_RID* = 0
  SECURITY_CREATOR_GROUP_RID* = 1
  SECURITY_DIALUP_RID* = 1
  SECURITY_NETWORK_RID* = 2
  SECURITY_BATCH_RID* = 3
  SECURITY_INTERACTIVE_RID* = 4
  SECURITY_LOGON_IDS_RID* = 5
  SECURITY_SERVICE_RID* = 6
  SECURITY_LOCAL_SYSTEM_RID* = 18
  SECURITY_BUILTIN_DOMAIN_RID* = 32
  SECURITY_PRINCIPAL_SELF_RID* = 10
  SECURITY_CREATOR_OWNER_SERVER_RID* = 2
  SECURITY_CREATOR_GROUP_SERVER_RID* = 3
  SECURITY_LOGON_IDS_RID_COUNT* = 3
  SECURITY_ANONYMOUS_LOGON_RID* = 7
  SECURITY_PROXY_RID* = 8
  SECURITY_ENTERPRISE_CONTROLLERS_RID* = 9
  SECURITY_SERVER_LOGON_RID* = SECURITY_ENTERPRISE_CONTROLLERS_RID.DWORD
  SECURITY_AUTHENTICATED_USER_RID* = 11
  SECURITY_RESTRICTED_CODE_RID* = 12
  SECURITY_NT_NON_UNIQUE_RID* = 21
  SID_REVISION* = 1
  DOMAIN_USER_RID_ADMIN* = 0x01F4
  DOMAIN_USER_RID_GUEST* = 0x01F5
  DOMAIN_GROUP_RID_ADMINS* = 0x0200
  DOMAIN_GROUP_RID_USERS* = 0x0201
  DOMAIN_ALIAS_RID_ADMINS* = 0x0220
  DOMAIN_ALIAS_RID_USERS* = 0x0221
  DOMAIN_ALIAS_RID_GUESTS* = 0x0222
  DOMAIN_ALIAS_RID_POWER_USERS* = 0x0223
  DOMAIN_ALIAS_RID_ACCOUNT_OPS* = 0x0224
  DOMAIN_ALIAS_RID_SYSTEM_OPS* = 0x0225
  DOMAIN_ALIAS_RID_PRINT_OPS* = 0x0226
  DOMAIN_ALIAS_RID_BACKUP_OPS* = 0x0227
  DOMAIN_ALIAS_RID_REPLICATOR* = 0x0228
  SECURITY_MANDATORY_UNTRUSTED_RID* = 0
  SECURITY_MANDATORY_LOW_RID* = 0x1000
  SECURITY_MANDATORY_MEDIUM_RID* = 0x2000
  SECURITY_MANDATORY_HIGH_RID* = 0x3000
  SECURITY_MANDATORY_SYSTEM_RID* = 0x4000
  SECURITY_MANDATORY_PROTECTED_PROCESS_RID* = 0x5000
  SECURITY_MANDATORY_MAXIMUM_USER_RID* = SECURITY_MANDATORY_SYSTEM_RID
  SE_CREATE_TOKEN_NAME* = "SeCreateTokenPrivilege"
  SE_ASSIGNPRIMARYTOKEN_NAME* = "SeAssignPrimaryTokenPrivilege"
  SE_LOCK_MEMORY_NAME* = "SeLockMemoryPrivilege"
  SE_INCREASE_QUOTA_NAME* = "SeIncreaseQuotaPrivilege"
  SE_UNSOLICITED_INPUT_NAME* = "SeUnsolicitedInputPrivilege"
  SE_MACHINE_ACCOUNT_NAME* = "SeMachineAccountPrivilege"
  SE_TCB_NAME* = "SeTcbPrivilege"
  SE_SECURITY_NAME* = "SeSecurityPrivilege"
  SE_TAKE_OWNERSHIP_NAME* = "SeTakeOwnershipPrivilege"
  SE_LOAD_DRIVER_NAME* = "SeLoadDriverPrivilege"
  SE_SYSTEM_PROFILE_NAME* = "SeSystemProfilePrivilege"
  SE_SYSTEMTIME_NAME* = "SeSystemtimePrivilege"
  SE_PROF_SINGLE_PROCESS_NAME* = "SeProfileSingleProcessPrivilege"
  SE_INC_BASE_PRIORITY_NAME* = "SeIncreaseBasePriorityPrivilege"
  SE_CREATE_PAGEFILE_NAME* = "SeCreatePagefilePrivilege"
  SE_CREATE_PERMANENT_NAME* = "SeCreatePermanentPrivilege"
  SE_BACKUP_NAME* = "SeBackupPrivilege"
  SE_RESTORE_NAME* = "SeRestorePrivilege"
  SE_SHUTDOWN_NAME* = "SeShutdownPrivilege"
  SE_DEBUG_NAME* = "SeDebugPrivilege"
  SE_AUDIT_NAME* = "SeAuditPrivilege"
  SE_SYSTEM_ENVIRONMENT_NAME* = "SeSystemEnvironmentPrivilege"
  SE_CHANGE_NOTIFY_NAME* = "SeChangeNotifyPrivilege"
  SE_REMOTE_SHUTDOWN_NAME* = "SeRemoteShutdownPrivilege"
  SE_CREATE_GLOBAL_NAME* = "SeCreateGlobalPrivilege"
  SE_UNDOCK_NAME* = "SeUndockPrivilege"
  SE_MANAGE_VOLUME_NAME* = "SeManageVolumePrivilege"
  SE_IMPERSONATE_NAME* = "SeImpersonatePrivilege"
  SE_ENABLE_DELEGATION_NAME* = "SeEnableDelegationPrivilege"
  SE_SYNC_AGENT_NAME* = "SeSyncAgentPrivilege"
  SE_TRUSTED_CREDMAN_ACCESS_NAME* = "SeTrustedCredManAccessPrivilege"
  SE_RELABEL_NAME* = "SeRelabelPrivilege"
  SE_INCREASE_WORKING_SET_NAME* = "SeIncreaseWorkingSetPrivilege"
  SE_TIME_ZONE_NAME* = "SeTimeZonePrivilege"
  SE_CREATE_SYMBOLIC_LINK_NAME* = "SeCreateSymbolicLinkPrivilege"
  SE_GROUP_MANDATORY* = 0x00000001
  SE_GROUP_ENABLED_BY_DEFAULT* = 0x00000002
  SE_GROUP_ENABLED* = 0x00000004
  SE_GROUP_OWNER* = 0x00000008
  SE_GROUP_USE_FOR_DENY_ONLY* = 0x00000010
  SE_GROUP_INTEGRITY* = 0x00000020
  SE_GROUP_INTEGRITY_ENABLED* = 0x00000040
  SE_GROUP_RESOURCE* = 0x20000000
  SE_GROUP_LOGON_ID* = 0xC0000000'u32
  LANG_NEUTRAL* = 0
  LANG_ARABIC* = 1
  LANG_BULGARIAN* = 2
  LANG_CATALAN* = 3
  LANG_CHINESE* = 4
  LANG_CZECH* = 5
  LANG_DANISH* = 6
  LANG_GERMAN* = 7
  LANG_GREEK* = 8
  LANG_ENGLISH* = 9
  LANG_SPANISH* = 10
  LANG_FINNISH* = 11
  LANG_FRENCH* = 12
  LANG_HEBREW* = 13
  LANG_HUNGARIAN* = 14
  LANG_ICELANDIC* = 15
  LANG_ITALIAN* = 16
  LANG_JAPANESE* = 17
  LANG_KOREAN* = 18
  LANG_DUTCH* = 19
  LANG_NORWEGIAN* = 20
  LANG_POLISH* = 21
  LANG_PORTUGUESE* = 22
  LANG_ROMANIAN* = 0x18
  LANG_RUSSIAN* = 0x19
  LANG_CROATIAN* = 0x1A
  LANG_SERBIAN* = 0x1A
  LANG_BOSNIAN* = 0x1A
  LANG_SLOVAK* = 0x1B
  LANG_ALBANIAN* = 0x1C
  LANG_SWEDISH* = 0x1D
  LANG_THAI* = 0x1E
  LANG_TURKISH* = 0x1F
  LANG_URDU* = 0x20
  LANG_INDONESIAN* = 0x21
  LANG_UKRAINIAN* = 0x22
  LANG_BELARUSIAN* = 0x23
  LANG_SLOVENIAN* = 0x24
  LANG_ESTONIAN* = 0x25
  LANG_LATVIAN* = 0x26
  LANG_LITHUANIAN* = 0x27
  LANG_FARSI* = 0x29
  LANG_PERSIAN* = 0x29
  LANG_VIETNAMESE* = 0x2A
  LANG_ARMENIAN* = 0x2B
  LANG_AZERI* = 0x2C
  LANG_BASQUE* = 0x2D
  LANG_LOWER_SORBIAN* = 0x2E
  LANG_UPPER_SORBIAN* = 0x2E
  LANG_MACEDONIAN* = 0x2F
  LANG_TSWANA* = 0x32
  LANG_XHOSA* = 0x34
  LANG_ZULU* = 0x35
  LANG_AFRIKAANS* = 0x36
  LANG_GEORGIAN* = 0x37
  LANG_FAEROESE* = 0x38
  LANG_HINDI* = 0x39
  LANG_MALTESE* = 0x3A
  LANG_SAMI* = 0x3B
  LANG_IRISH* = 0x3C
  LANG_MALAY* = 0x3E
  LANG_KAZAK* = 0x3F
  LANG_KYRGYZ* = 0x40
  LANG_SWAHILI* = 0x41
  LANG_UZBEK* = 0x43
  LANG_TATAR* = 0x44
  LANG_BENGALI* = 0x45
  LANG_PUNJABI* = 0x46
  LANG_GUJARATI* = 0x47
  LANG_ORIYA* = 0x48
  LANG_TAMIL* = 0x49
  LANG_TELUGU* = 0x4A
  LANG_KANNADA* = 0x4B
  LANG_MALAYALAM* = 0x4C
  LANG_ASSAMESE* = 0x4D
  LANG_MARATHI* = 0x4E
  LANG_SANSKRIT* = 0x4F
  LANG_MONGOLIAN* = 0x50
  LANG_TIBETAN* = 0x51
  LANG_WELSH* = 0x52
  LANG_KHMER* = 0x53
  LANG_LAO* = 0x54
  LANG_GALICIAN* = 0x56
  LANG_KONKANI* = 0x57
  LANG_MANIPURI* = 0x58
  LANG_SINDHI* = 0x59
  LANG_SYRIAC* = 0x5A
  LANG_SINHALESE* = 0x5B
  LANG_INUKTITUT* = 0x5D
  LANG_AMHARIC* = 0x5E
  LANG_TAMAZIGHT* = 0x5F
  LANG_KASHMIRI* = 0x60
  LANG_NEPALI* = 0x61
  LANG_FRISIAN* = 0x62
  LANG_PASHTO* = 0x63
  LANG_FILIPINO* = 0x64
  LANG_DIVEHI* = 0x65
  LANG_HAUSA* = 0x68
  LANG_YORUBA* = 0x6A
  LANG_QUECHUA* = 0x6B
  LANG_SOTHO* = 0x6C
  LANG_BASHKIR* = 0x6D
  LANG_LUXEMBOURGISH* = 0x6E
  LANG_GREENLANDIC* = 0x6F
  LANG_IGBO* = 0x70
  LANG_TIGRIGNA* = 0x73
  LANG_YI* = 0x78
  LANG_MAPUDUNGUN* = 0x7A
  LANG_MOHAWK* = 0x7C
  LANG_BRETON* = 0x7E
  LANG_UIGHUR* = 0x80
  LANG_MAORI* = 0x81
  LANG_OCCITAN* = 0x82
  LANG_CORSICAN* = 0x83
  LANG_ALSATIAN* = 0x84
  LANG_YAKUT* = 0x85
  LANG_KICHE* = 0x86
  LANG_KINYARWANDA* = 0x87
  LANG_WOLOF* = 0x88
  LANG_DARI* = 0x8C
  LANG_MALAGASY* = 0x8D
  LANG_SERBIAN_NEUTRAL* = 0x7C1A
  LANG_BOSNIAN_NEUTRAL* = 0x781A
  LANG_INVARIANT* = 0x7F
  SUBLANG_NEUTRAL* = 0
  SUBLANG_DEFAULT* = 1
  SUBLANG_SYS_DEFAULT* = 2
  SUBLANG_CUSTOM_DEFAULT* = 3
  SUBLANG_UI_CUSTOM_DEFAULT* = 3
  SUBLANG_CUSTOM_UNSPECIFIED* = 4
  SUBLANG_AFRIKAANS_SOUTH_AFRICA* = 1
  SUBLANG_ALBANIAN_ALBANIA* = 1
  SUBLANG_ALSATIAN_FRANCE* = 1
  SUBLANG_AMHARIC_ETHIOPIA* = 1
  SUBLANG_ARABIC_SAUDI_ARABIA* = 1
  SUBLANG_ARABIC_IRAQ* = 2
  SUBLANG_ARABIC_EGYPT* = 3
  SUBLANG_ARABIC_LIBYA* = 4
  SUBLANG_ARABIC_ALGERIA* = 5
  SUBLANG_ARABIC_MOROCCO* = 6
  SUBLANG_ARABIC_TUNISIA* = 7
  SUBLANG_ARABIC_OMAN* = 8
  SUBLANG_ARABIC_YEMEN* = 9
  SUBLANG_ARABIC_SYRIA* = 10
  SUBLANG_ARABIC_JORDAN* = 11
  SUBLANG_ARABIC_LEBANON* = 12
  SUBLANG_ARABIC_KUWAIT* = 13
  SUBLANG_ARABIC_UAE* = 14
  SUBLANG_ARABIC_BAHRAIN* = 15
  SUBLANG_ARABIC_QATAR* = 16
  SUBLANG_ARMENIAN_ARMENIA* = 1
  SUBLANG_ASSAMESE_INDIA* = 1
  SUBLANG_AZERI_LATIN* = 1
  SUBLANG_AZERI_CYRILLIC* = 2
  SUBLANG_BASHKIR_RUSSIA* = 1
  SUBLANG_BASQUE_BASQUE* = 1
  SUBLANG_BELARUSIAN_BELARUS* = 1
  SUBLANG_BENGALI_INDIA* = 1
  SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN* = 5
  SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC* = 8
  SUBLANG_BRETON_FRANCE* = 1
  SUBLANG_BULGARIAN_BULGARIA* = 1
  SUBLANG_CATALAN_CATALAN* = 1
  SUBLANG_CHINESE_TRADITIONAL* = 1
  SUBLANG_CHINESE_SIMPLIFIED* = 2
  SUBLANG_CHINESE_HONGKONG* = 3
  SUBLANG_CHINESE_SINGAPORE* = 4
  SUBLANG_CHINESE_MACAU* = 5
  SUBLANG_CORSICAN_FRANCE* = 1
  SUBLANG_CROATIAN_CROATIA* = 1
  SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN* = 4
  SUBLANG_CZECH_CZECH_REPUBLIC* = 1
  SUBLANG_DANISH_DENMARK* = 1
  SUBLANG_DIVEHI_MALDIVES* = 1
  SUBLANG_DUTCH* = 1
  SUBLANG_DUTCH_BELGIAN* = 2
  SUBLANG_ENGLISH_US* = 1
  SUBLANG_ENGLISH_UK* = 2
  SUBLANG_ENGLISH_AUS* = 3
  SUBLANG_ENGLISH_CAN* = 4
  SUBLANG_ENGLISH_NZ* = 5
  SUBLANG_ENGLISH_EIRE* = 6
  SUBLANG_ENGLISH_IRELAND* = 6
  SUBLANG_ENGLISH_SOUTH_AFRICA* = 7
  SUBLANG_ENGLISH_JAMAICA* = 8
  SUBLANG_ENGLISH_CARIBBEAN* = 9
  SUBLANG_ENGLISH_BELIZE* = 10
  SUBLANG_ENGLISH_TRINIDAD* = 11
  SUBLANG_ENGLISH_ZIMBABWE* = 12
  SUBLANG_ENGLISH_PHILIPPINES* = 13
  SUBLANG_ENGLISH_INDIA* = 16
  SUBLANG_ENGLISH_MALAYSIA* = 17
  SUBLANG_ENGLISH_SINGAPORE* = 18
  SUBLANG_ESTONIAN_ESTONIA* = 1
  SUBLANG_FAEROESE_FAROE_ISLANDS* = 1
  SUBLANG_FILIPINO_PHILIPPINES* = 1
  SUBLANG_FINNISH_FINLAND* = 1
  SUBLANG_FRENCH* = 1
  SUBLANG_FRENCH_BELGIAN* = 2
  SUBLANG_FRENCH_CANADIAN* = 3
  SUBLANG_FRENCH_SWISS* = 4
  SUBLANG_FRENCH_LUXEMBOURG* = 5
  SUBLANG_FRENCH_MONACO* = 6
  SUBLANG_FRISIAN_NETHERLANDS* = 1
  SUBLANG_GALICIAN_GALICIAN* = 1
  SUBLANG_GEORGIAN_GEORGIA* = 1
  SUBLANG_GERMAN* = 1
  SUBLANG_GERMAN_SWISS* = 2
  SUBLANG_GERMAN_AUSTRIAN* = 3
  SUBLANG_GERMAN_LUXEMBOURG* = 4
  SUBLANG_GERMAN_LIECHTENSTEIN* = 5
  SUBLANG_GREEK_GREECE* = 1
  SUBLANG_GREENLANDIC_GREENLAND* = 1
  SUBLANG_GUJARATI_INDIA* = 1
  SUBLANG_HAUSA_NIGERIA* = 1
  SUBLANG_HEBREW_ISRAEL* = 1
  SUBLANG_HINDI_INDIA* = 1
  SUBLANG_HUNGARIAN_HUNGARY* = 1
  SUBLANG_ICELANDIC_ICELAND* = 1
  SUBLANG_IGBO_NIGERIA* = 1
  SUBLANG_INDONESIAN_INDONESIA* = 1
  SUBLANG_INUKTITUT_CANADA* = 1
  SUBLANG_INUKTITUT_CANADA_LATIN* = 1
  SUBLANG_IRISH_IRELAND* = 1
  SUBLANG_ITALIAN* = 1
  SUBLANG_ITALIAN_SWISS* = 2
  SUBLANG_JAPANESE_JAPAN* = 1
  SUBLANG_KASHMIRI_INDIA* = 2
  SUBLANG_KASHMIRI_SASIA* = 2
  SUBLANG_KAZAK_KAZAKHSTAN* = 1
  SUBLANG_KHMER_CAMBODIA* = 1
  SUBLANG_KICHE_GUATEMALA* = 1
  SUBLANG_KINYARWANDA_RWANDA* = 1
  SUBLANG_KONKANI_INDIA* = 1
  SUBLANG_KOREAN* = 1
  SUBLANG_KYRGYZ_KYRGYZSTAN* = 1
  SUBLANG_LAO_LAO_PDR* = 1
  SUBLANG_LATVIAN_LATVIA* = 1
  SUBLANG_LITHUANIAN* = 1
  SUBLANG_LITHUANIAN_LITHUANIA* = 1
  SUBLANG_LOWER_SORBIAN_GERMANY* = 1
  SUBLANG_LUXEMBOURGISH_LUXEMBOURG* = 1
  SUBLANG_MACEDONIAN_MACEDONIA* = 1
  SUBLANG_MALAYALAM_INDIA* = 1
  SUBLANG_MALTESE_MALTA* = 1
  SUBLANG_MAORI_NEW_ZEALAND* = 1
  SUBLANG_MAPUDUNGUN_CHILE* = 1
  SUBLANG_MARATHI_INDIA* = 1
  SUBLANG_MOHAWK_MOHAWK* = 1
  SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA* = 1
  SUBLANG_MONGOLIAN_PRC* = 2
  SUBLANG_MALAY_MALAYSIA* = 1
  SUBLANG_MALAY_BRUNEI_DARUSSALAM* = 2
  SUBLANG_NEPALI_NEPAL* = 1
  SUBLANG_NEPALI_INDIA* = 2
  SUBLANG_NORWEGIAN_BOKMAL* = 1
  SUBLANG_NORWEGIAN_NYNORSK* = 2
  SUBLANG_OCCITAN_FRANCE* = 1
  SUBLANG_ORIYA_INDIA* = 1
  SUBLANG_PASHTO_AFGHANISTAN* = 1
  SUBLANG_PERSIAN_IRAN* = 1
  SUBLANG_POLISH_POLAND* = 1
  SUBLANG_PORTUGUESE_BRAZILIAN* = 1
  SUBLANG_PORTUGUESE* = 2
  SUBLANG_PORTUGUESE_PORTUGAL* = 3
  SUBLANG_PUNJABI_INDIA* = 1
  SUBLANG_QUECHUA_BOLIVIA* = 1
  SUBLANG_QUECHUA_ECUADOR* = 2
  SUBLANG_QUECHUA_PERU* = 3
  SUBLANG_ROMANIAN_ROMANIA* = 1
  SUBLANG_ROMANSH_SWITZERLAND* = 1
  SUBLANG_RUSSIAN_RUSSIA* = 1
  SUBLANG_SAMI_NORTHERN_NORWAY* = 1
  SUBLANG_SAMI_NORTHERN_SWEDEN* = 2
  SUBLANG_SAMI_NORTHERN_FINLAND* = 3
  SUBLANG_SAMI_SKOLT_FINLAND* = 3
  SUBLANG_SAMI_INARI_FINLAND* = 3
  SUBLANG_SAMI_LULE_NORWAY* = 4
  SUBLANG_SAMI_LULE_SWEDEN* = 5
  SUBLANG_SAMI_SOUTHERN_NORWAY* = 6
  SUBLANG_SAMI_SOUTHERN_SWEDEN* = 7
  SUBLANG_SANSKRIT_INDIA* = 1
  SUBLANG_SERBIAN_LATIN* = 2
  SUBLANG_SERBIAN_CYRILLIC* = 3
  SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN* = 6
  SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC* = 7
  SUBLANG_SINDHI_AFGHANISTAN* = 2
  SUBLANG_SINHALESE_SRI_LANKA* = 1
  SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA* = 1
  SUBLANG_SLOVAK_SLOVAKIA* = 1
  SUBLANG_SLOVENIAN_SLOVENIA* = 1
  SUBLANG_SPANISH* = 1
  SUBLANG_SPANISH_MEXICAN* = 2
  SUBLANG_SPANISH_MODERN* = 3
  SUBLANG_SPANISH_GUATEMALA* = 4
  SUBLANG_SPANISH_COSTA_RICA* = 5
  SUBLANG_SPANISH_PANAMA* = 6
  SUBLANG_SPANISH_DOMINICAN_REPUBLIC* = 7
  SUBLANG_SPANISH_VENEZUELA* = 8
  SUBLANG_SPANISH_COLOMBIA* = 9
  SUBLANG_SPANISH_PERU* = 10
  SUBLANG_SPANISH_ARGENTINA* = 11
  SUBLANG_SPANISH_ECUADOR* = 12
  SUBLANG_SPANISH_CHILE* = 13
  SUBLANG_SPANISH_URUGUAY* = 14
  SUBLANG_SPANISH_PARAGUAY* = 15
  SUBLANG_SPANISH_BOLIVIA* = 16
  SUBLANG_SPANISH_EL_SALVADOR* = 17
  SUBLANG_SPANISH_HONDURAS* = 18
  SUBLANG_SPANISH_NICARAGUA* = 19
  SUBLANG_SPANISH_PUERTO_RICO* = 20
  SUBLANG_SPANISH_US* = 21
  SUBLANG_SWEDISH* = 1
  SUBLANG_SWEDISH_SWEDEN* = 1
  SUBLANG_SWEDISH_FINLAND* = 2
  SUBLANG_SYRIAC* = 1
  SUBLANG_TAJIK_TAJIKISTAN* = 1
  SUBLANG_TAMAZIGHT_ALGERIA_LATIN* = 2
  SUBLANG_TAMIL_INDIA* = 1
  SUBLANG_TATAR_RUSSIA* = 1
  SUBLANG_TELUGU_INDIA* = 1
  SUBLANG_THAI_THAILAND* = 1
  SUBLANG_TIBETAN_PRC* = 1
  SUBLANG_TIBETAN_BHUTAN* = 2
  SUBLANG_TIGRIGNA_ERITREA* = 1
  SUBLANG_TSWANA_SOUTH_AFRICA* = 1
  SUBLANG_TURKISH_TURKEY* = 1
  SUBLANG_TURKMEN_TURKMENISTAN* = 1
  SUBLANG_UIGHUR_PRC* = 1
  SUBLANG_UKRAINIAN_UKRAINE* = 1
  SUBLANG_UPPER_SORBIAN_GERMANY* = 1
  SUBLANG_URDU_PAKISTAN* = 1
  SUBLANG_URDU_INDIA* = 2
  SUBLANG_UZBEK_LATIN* = 1
  SUBLANG_UZBEK_CYRILLIC* = 2
  SUBLANG_VIETNAMESE_VIETNAM* = 1
  SUBLANG_WELSH_UNITED_KINGDOM* = 1
  SUBLANG_WOLOF_SENEGAL* = 1
  SUBLANG_YORUBA_NIGERIA* = 1
  SUBLANG_XHOSA_SOUTH_AFRICA* = 1
  SUBLANG_YAKUT_RUSSIA* = 1
  SUBLANG_YI_PRC* = 1
  SUBLANG_ZULU_SOUTH_AFRICA* = 1
  NLS_VALID_LOCALE_MASK* = 1048575
  SORT_DEFAULT* = 0
  SORT_JAPANESE_XJIS* = 0
  SORT_JAPANESE_UNICODE* = 1
  SORT_CHINESE_BIG5* = 0
  SORT_CHINESE_PRCP* = 0
  SORT_CHINESE_UNICODE* = 1
  SORT_CHINESE_PRC* = 2
  SORT_CHINESE_BOPOMOFO* = 3
  SORT_KOREAN_KSC* = 0
  SORT_KOREAN_UNICODE* = 1
  SORT_GERMAN_PHONE_BOOK* = 1
  SORT_HUNGARIAN_DEFAULT* = 0
  SORT_HUNGARIAN_TECHNICAL* = 1
  SORT_GEORGIAN_TRADITIONAL* = 0
  SORT_GEORGIAN_MODERN* = 1

proc MAKELANGID*(p: auto, s: auto): WORD = (s shl 10 or p).WORD
proc PRIMARYLANGID*(lgid: auto): WORD = (lgid and 0x3FF).WORD
proc SUBLANGID*(lgid: auto): WORD = (lgid shr 10).WORD
proc MAKELCID*(lgid: auto, srtid: auto): DWORD = (srtid shl 16).DWORD or lgid.DWORD
proc LANGIDFROMLCID*(lcid: LCID): WORD = lcid.WORD
proc SORTIDFROMLCID*(lcid: LCID): WORD = ((lcid shr 16) and 0x0F).WORD
proc SORTVERSIONFROMLCID*(lcid: LCID): WORD = ((lcid shr 20) and 0x0F).WORD

const
  LANG_SYSTEM_DEFAULT* = (( SUBLANG_SYS_DEFAULT  shl  10 ) or LANG_NEUTRAL)
  LANG_USER_DEFAULT* = (( SUBLANG_DEFAULT  shl  10 ) or LANG_NEUTRAL)
  LOCALE_NEUTRAL* = (( SORT_DEFAULT  shl  16 ) or ( SUBLANG_NEUTRAL  shl  10 ) or LANG_NEUTRAL).DWORD
  ACL_REVISION* = 2
  ACL_REVISION_DS* = 4
  ACL_REVISION1* = 1
  ACL_REVISION2* = 2
  ACL_REVISION3* = 3
  ACL_REVISION4* = 4
  MIN_ACL_REVISION* = 2
  MAX_ACL_REVISION* = 4
  PROCESSOR_INTEL_386* = 386
  PROCESSOR_INTEL_486* = 486
  PROCESSOR_INTEL_PENTIUM* = 586
  PROCESSOR_MIPS_R4000* = 4000
  PROCESSOR_ALPHA_21064* = 21064
  PROCESSOR_INTEL_IA64* = 2200
  PROCESSOR_ARCHITECTURE_INTEL* = 0
  PROCESSOR_ARCHITECTURE_MIPS* = 1
  PROCESSOR_ARCHITECTURE_ALPHA* = 2
  PROCESSOR_ARCHITECTURE_PPC* = 3
  PROCESSOR_ARCHITECTURE_SHX* = 4
  PROCESSOR_ARCHITECTURE_ARM* = 5
  PROCESSOR_ARCHITECTURE_IA64* = 6
  PROCESSOR_ARCHITECTURE_ALPHA64* = 7
  PROCESSOR_ARCHITECTURE_MSIL* = 8
  PROCESSOR_ARCHITECTURE_AMD64* = 9
  PROCESSOR_ARCHITECTURE_IA32_ON_WIN64* = 10
  PROCESSOR_ARCHITECTURE_UNKNOWN* = 0xFFFF
  PF_FLOATING_POINT_PRECISION_ERRATA* = 0
  PF_FLOATING_POINT_EMULATED* = 1
  PF_COMPARE_EXCHANGE_DOUBLE* = 2
  PF_MMX_INSTRUCTIONS_AVAILABLE* = 3
  PF_PPC_MOVEMEM_64BIT_OK* = 4
  PF_ALPHA_BYTE_INSTRUCTIONS* = 5
  PF_XMMI_INSTRUCTIONS_AVAILABLE* = 6
  PF_3DNOW_INSTRUCTIONS_AVAILABLE* = 7
  PF_RDTSC_INSTRUCTION_AVAILABLE* = 8
  PF_PAE_ENABLED* = 9
  PF_XMMI64_INSTRUCTIONS_AVAILABLE* = 10
  FILE_ACTION_ADDED* = 1
  FILE_ACTION_REMOVED* = 2
  FILE_ACTION_MODIFIED* = 3
  FILE_ACTION_RENAMED_OLD_NAME* = 4
  FILE_ACTION_RENAMED_NEW_NAME* = 5
  FILE_ACTION_ADDED_STREAM* = 6
  FILE_ACTION_REMOVED_STREAM* = 7
  FILE_ACTION_MODIFIED_STREAM* = 8
  FILE_ACTION_REMOVED_BY_DELETE* = 9
  FILE_ACTION_ID_NOT_TUNNELLED* = 10
  FILE_ACTION_TUNNELLED_ID_COLLISION* = 11
  HEAP_NO_SERIALIZE* = 0x01
  HEAP_GROWABLE* = 0x02
  HEAP_GENERATE_EXCEPTIONS* = 0x04
  HEAP_ZERO_MEMORY* = 0x08
  HEAP_REALLOC_IN_PLACE_ONLY* = 0x10
  HEAP_TAIL_CHECKING_ENABLED* = 0x20
  HEAP_FREE_CHECKING_ENABLED* = 0x40
  HEAP_DISABLE_COALESCE_ON_FREE* = 0x80
  HEAP_CREATE_ALIGN_16* = 0
  HEAP_CREATE_ENABLE_TRACING* = 0x020000
  HEAP_MAXIMUM_TAG* = 0x000FFF
  HEAP_PSEUDO_TAG_FLAG* = 0x008000
  HEAP_TAG_SHIFT* = 16
  KEY_QUERY_VALUE* = 0x000001
  KEY_SET_VALUE* = 0x000002
  KEY_CREATE_SUB_KEY* = 0x000004
  KEY_ENUMERATE_SUB_KEYS* = 0x000008
  KEY_NOTIFY* = 0x000010
  KEY_CREATE_LINK* = 0x000020
  KEY_WRITE* = 0x020006
  KEY_EXECUTE* = 0x020019
  KEY_READ* = 0x020019
  KEY_ALL_ACCESS* = 0x0F003F
  KEY_WOW64_64KEY* = 0x000100
  KEY_WOW64_32KEY* = 0x000200
  REG_WHOLE_HIVE_VOLATILE* = 1
  REG_REFRESH_HIVE* = 2
  REG_NO_LAZY_FLUSH* = 4
  REG_OPTION_RESERVED* = 0
  REG_OPTION_NON_VOLATILE* = 0
  REG_OPTION_VOLATILE* = 1
  REG_OPTION_CREATE_LINK* = 2
  REG_OPTION_BACKUP_RESTORE* = 4
  REG_OPTION_OPEN_LINK* = 8
  REG_LEGAL_OPTION* = 15
  MAXIMUM_PROCESSORS* = 32
  PAGE_NOACCESS* = 0x0001
  PAGE_READONLY* = 0x0002
  PAGE_READWRITE* = 0x0004
  PAGE_WRITECOPY* = 0x0008
  PAGE_EXECUTE* = 0x0010
  PAGE_EXECUTE_READ* = 0x0020
  PAGE_EXECUTE_READWRITE* = 0x0040
  PAGE_EXECUTE_WRITECOPY* = 0x0080
  PAGE_GUARD* = 0x0100
  PAGE_NOCACHE* = 0x0200
  MEM_COMMIT* = 0x00001000
  MEM_RESERVE* = 0x00002000
  MEM_DECOMMIT* = 0x00004000
  MEM_RELEASE* = 0x00008000
  MEM_FREE* = 0x00010000
  MEM_PRIVATE* = 0x00020000
  MEM_MAPPED* = 0x00040000
  MEM_RESET* = 0x00080000
  MEM_TOP_DOWN* = 0x00100000
  MEM_WRITE_WATCH* = 0x00200000
  MEM_PHYSICAL* = 0x00400000
  MEM_4MB_PAGES* = 0x80000000'u32
  SEC_BASED* = 0x00200000
  SEC_NO_CHANGE* = 0x00400000
  SEC_FILE* = 0x00800000
  SEC_IMAGE* = 0x01000000
  SEC_VLM* = 0x02000000
  SEC_RESERVE* = 0x04000000
  SEC_COMMIT* = 0x08000000
  SEC_NOCACHE* = 0x10000000
  MEM_IMAGE* = SEC_IMAGE.DWORD
  SECTION_QUERY* = 0x000001
  SECTION_MAP_WRITE* = 0x000002
  SECTION_MAP_READ* = 0x000004
  SECTION_MAP_EXECUTE* = 0x000008
  SECTION_EXTEND_SIZE* = 0x000010
  SECTION_ALL_ACCESS* = 0x0F001F
  MESSAGE_RESOURCE_UNICODE* = 1
  RTL_CRITSECT_TYPE* = 0
  RTL_RESOURCE_TYPE* = 1
  IMAGE_FILE_RELOCS_STRIPPED* = 0x0001
  IMAGE_FILE_EXECUTABLE_IMAGE* = 0x0002
  IMAGE_FILE_LINE_NUMS_STRIPPED* = 0x0004
  IMAGE_FILE_LOCAL_SYMS_STRIPPED* = 0x0008
  IMAGE_FILE_AGGRESIVE_WS_TRIM* = 0x0010
  IMAGE_FILE_LARGE_ADDRESS_AWARE* = 0x0020
  IMAGE_FILE_BYTES_REVERSED_LO* = 0x0080
  IMAGE_FILE_32BIT_MACHINE* = 0x0100
  IMAGE_FILE_DEBUG_STRIPPED* = 0x0200
  IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP* = 0x0400
  IMAGE_FILE_NET_RUN_FROM_SWAP* = 0x0800
  IMAGE_FILE_SYSTEM* = 0x1000
  IMAGE_FILE_DLL* = 0x2000
  IMAGE_FILE_UP_SYSTEM_ONLY* = 0x4000
  IMAGE_FILE_BYTES_REVERSED_HI* = 0x8000
  IMAGE_FILE_MACHINE_UNKNOWN* = 0x0000
  IMAGE_FILE_MACHINE_I386* = 0x014C
  IMAGE_FILE_MACHINE_R3000* = 0x0162
  IMAGE_FILE_MACHINE_R4000* = 0x0166
  IMAGE_FILE_MACHINE_R10000* = 0x0168
  IMAGE_FILE_MACHINE_WCEMIPSV2* = 0x0169
  IMAGE_FILE_MACHINE_ALPHA* = 0x0184
  IMAGE_FILE_MACHINE_SH3* = 0x01A2
  IMAGE_FILE_MACHINE_SH3DSP* = 0x01A3
  IMAGE_FILE_MACHINE_SH4* = 0x01A6
  IMAGE_FILE_MACHINE_SH5* = 0x01A8
  IMAGE_FILE_MACHINE_ARM* = 0x01C0
  IMAGE_FILE_MACHINE_THUMB* = 0x01C2
  IMAGE_FILE_MACHINE_AM33* = 0x01D3
  IMAGE_FILE_MACHINE_POWERPC* = 0x01F0
  IMAGE_FILE_MACHINE_POWERPCFP* = 0x01F1
  IMAGE_FILE_MACHINE_IA64* = 0x0200
  IMAGE_FILE_MACHINE_MIPS16* = 0x0266
  IMAGE_FILE_MACHINE_MIPSFPU* = 0x0366
  IMAGE_FILE_MACHINE_MIPSFPU16* = 0x0466
  IMAGE_FILE_MACHINE_EBC* = 0x0EBC
  IMAGE_FILE_MACHINE_AMD64* = 0x8664
  IMAGE_FILE_MACHINE_M32R* = 0x9041
  IMAGE_DOS_SIGNATURE* = 0x5A4D
  IMAGE_OS2_SIGNATURE* = 0x454E
  IMAGE_OS2_SIGNATURE_LE* = 0x454C
  IMAGE_VXD_SIGNATURE* = 0x454C
  IMAGE_NT_SIGNATURE* = 0x4550
  IMAGE_NT_OPTIONAL_HDR32_MAGIC* = 0x010B
  IMAGE_ROM_OPTIONAL_HDR_MAGIC* = 0x0107
  IMAGE_NT_OPTIONAL_HDR64_MAGIC* = 0x020B
  IMAGE_SUBSYSTEM_UNKNOWN* = 0
  IMAGE_SUBSYSTEM_NATIVE* = 1
  IMAGE_SUBSYSTEM_WINDOWS_GUI* = 2
  IMAGE_SUBSYSTEM_WINDOWS_CUI* = 3
  IMAGE_SUBSYSTEM_OS2_CUI* = 5
  IMAGE_SUBSYSTEM_POSIX_CUI* = 7
  IMAGE_SUBSYSTEM_NATIVE_WINDOWS* = 8
  IMAGE_SUBSYSTEM_WINDOWS_CE_GUI* = 9
  IMAGE_SUBSYSTEM_EFI_APPLICATION* = 10
  IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER* = 11
  IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER* = 12
  IMAGE_SUBSYSTEM_EFI_ROM* = 13
  IMAGE_SUBSYSTEM_XBOX* = 14
  IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION* = 16
  IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE* = 0x0040
  IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY* = 0x0080
  IMAGE_DLL_CHARACTERISTICS_NX_COMPAT* = 0x0100
  IMAGE_DLLCHARACTERISTICS_NO_ISOLATION* = 0x0200
  IMAGE_DLLCHARACTERISTICS_NO_SEH* = 0x0400
  IMAGE_DLLCHARACTERISTICS_NO_BIND* = 0x0800
  IMAGE_DLLCHARACTERISTICS_WDM_DRIVER* = 0x2000
  IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE* = 0x8000
  IMAGE_SEPARATE_DEBUG_SIGNATURE* = 0x4944
  IMAGE_NUMBEROF_DIRECTORY_ENTRIES* = 16
  IMAGE_SIZEOF_ROM_OPTIONAL_HEADER* = 56
  IMAGE_SIZEOF_STD_OPTIONAL_HEADER* = 28
  IMAGE_SIZEOF_NT_OPTIONAL_HEADER* = 224
  IMAGE_SIZEOF_SHORT_NAME* = 8
  IMAGE_SIZEOF_SECTION_HEADER* = 40
  IMAGE_SIZEOF_SYMBOL* = 18
  IMAGE_SIZEOF_AUX_SYMBOL* = 18
  IMAGE_SIZEOF_RELOCATION* = 10
  IMAGE_SIZEOF_BASE_RELOCATION* = 8
  IMAGE_SIZEOF_LINENUMBER* = 6
  IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR* = 60
  SIZEOF_RFPO_DATA* = 16
  IMAGE_DIRECTORY_ENTRY_EXPORT* = 0
  IMAGE_DIRECTORY_ENTRY_IMPORT* = 1
  IMAGE_DIRECTORY_ENTRY_RESOURCE* = 2
  IMAGE_DIRECTORY_ENTRY_EXCEPTION* = 3
  IMAGE_DIRECTORY_ENTRY_SECURITY* = 4
  IMAGE_DIRECTORY_ENTRY_BASERELOC* = 5
  IMAGE_DIRECTORY_ENTRY_DEBUG* = 6
  IMAGE_DIRECTORY_ENTRY_COPYRIGHT* = 7
  IMAGE_DIRECTORY_ENTRY_ARCHITECTURE* = 7
  IMAGE_DIRECTORY_ENTRY_GLOBALPTR* = 8
  IMAGE_DIRECTORY_ENTRY_TLS* = 9
  IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG* = 10
  IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT* = 11
  IMAGE_DIRECTORY_ENTRY_IAT* = 12
  IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT* = 13
  IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR* = 14
  IMAGE_SCN_TYPE_REG* = 0x00000000
  IMAGE_SCN_TYPE_DSECT* = 0x00000001
  IMAGE_SCN_TYPE_NOLOAD* = 0x00000002
  IMAGE_SCN_TYPE_GROUP* = 0x00000004
  IMAGE_SCN_TYPE_NO_PAD* = 0x00000008
  IMAGE_SCN_TYPE_COPY* = 0x00000010
  IMAGE_SCN_CNT_CODE* = 0x00000020
  IMAGE_SCN_CNT_INITIALIZED_DATA* = 0x00000040
  IMAGE_SCN_CNT_UNINITIALIZED_DATA* = 0x00000080
  IMAGE_SCN_LNK_OTHER* = 0x00000100
  IMAGE_SCN_LNK_INFO* = 0x00000200
  IMAGE_SCN_TYPE_OVER* = 0x00000400
  IMAGE_SCN_LNK_REMOVE* = 0x00000800
  IMAGE_SCN_LNK_COMDAT* = 0x00001000
  IMAGE_SCN_MEM_FARDATA* = 0x00008000
  IMAGE_SCN_GPREL* = 0x00008000
  IMAGE_SCN_MEM_PURGEABLE* = 0x00020000
  IMAGE_SCN_MEM_16BIT* = 0x00020000
  IMAGE_SCN_MEM_LOCKED* = 0x00040000
  IMAGE_SCN_MEM_PRELOAD* = 0x00080000
  IMAGE_SCN_ALIGN_1BYTES* = 0x00100000
  IMAGE_SCN_ALIGN_2BYTES* = 0x00200000
  IMAGE_SCN_ALIGN_4BYTES* = 0x00300000
  IMAGE_SCN_ALIGN_8BYTES* = 0x00400000
  IMAGE_SCN_ALIGN_16BYTES* = 0x00500000
  IMAGE_SCN_ALIGN_32BYTES* = 0x00600000
  IMAGE_SCN_ALIGN_64BYTES* = 0x00700000
  IMAGE_SCN_ALIGN_128BYTES* = 0x00800000
  IMAGE_SCN_ALIGN_256BYTES* = 0x00900000
  IMAGE_SCN_ALIGN_512BYTES* = 0x00A00000
  IMAGE_SCN_ALIGN_1024BYTES* = 0x00B00000
  IMAGE_SCN_ALIGN_2048BYTES* = 0x00C00000
  IMAGE_SCN_ALIGN_4096BYTES* = 0x00D00000
  IMAGE_SCN_ALIGN_8192BYTES* = 0x00E00000
  IMAGE_SCN_LNK_NRELOC_OVFL* = 0x01000000
  IMAGE_SCN_MEM_DISCARDABLE* = 0x02000000
  IMAGE_SCN_MEM_NOT_CACHED* = 0x04000000
  IMAGE_SCN_MEM_NOT_PAGED* = 0x08000000
  IMAGE_SCN_MEM_SHARED* = 0x10000000
  IMAGE_SCN_MEM_EXECUTE* = 0x20000000
  IMAGE_SCN_MEM_READ* = 0x40000000
  IMAGE_SCN_MEM_WRITE* = 0x80000000'u32
  IMAGE_SYM_UNDEFINED* = 0
  IMAGE_SYM_ABSOLUTE* = -1
  IMAGE_SYM_DEBUG* = -2
  IMAGE_SYM_TYPE_NULL* = 0
  IMAGE_SYM_TYPE_VOID* = 1
  IMAGE_SYM_TYPE_CHAR* = 2
  IMAGE_SYM_TYPE_SHORT* = 3
  IMAGE_SYM_TYPE_INT* = 4
  IMAGE_SYM_TYPE_LONG* = 5
  IMAGE_SYM_TYPE_FLOAT* = 6
  IMAGE_SYM_TYPE_DOUBLE* = 7
  IMAGE_SYM_TYPE_STRUCT* = 8
  IMAGE_SYM_TYPE_UNION* = 9
  IMAGE_SYM_TYPE_ENUM* = 10
  IMAGE_SYM_TYPE_MOE* = 11
  IMAGE_SYM_TYPE_BYTE* = 12
  IMAGE_SYM_TYPE_WORD* = 13
  IMAGE_SYM_TYPE_UINT* = 14
  IMAGE_SYM_TYPE_DWORD* = 15
  IMAGE_SYM_TYPE_PCODE* = 32768
  IMAGE_SYM_DTYPE_NULL* = 0
  IMAGE_SYM_DTYPE_POINTER* = 1
  IMAGE_SYM_DTYPE_FUNCTION* = 2
  IMAGE_SYM_DTYPE_ARRAY* = 3
  IMAGE_SYM_CLASS_END_OF_FUNCTION* = 0xFF
  IMAGE_SYM_CLASS_NULL* = 0
  IMAGE_SYM_CLASS_AUTOMATIC* = 1
  IMAGE_SYM_CLASS_EXTERNAL* = 2
  IMAGE_SYM_CLASS_STATIC* = 3
  IMAGE_SYM_CLASS_REGISTER* = 4
  IMAGE_SYM_CLASS_EXTERNAL_DEF* = 5
  IMAGE_SYM_CLASS_LABEL* = 6
  IMAGE_SYM_CLASS_UNDEFINED_LABEL* = 7
  IMAGE_SYM_CLASS_MEMBER_OF_STRUCT* = 8
  IMAGE_SYM_CLASS_ARGUMENT* = 9
  IMAGE_SYM_CLASS_STRUCT_TAG* = 10
  IMAGE_SYM_CLASS_MEMBER_OF_UNION* = 11
  IMAGE_SYM_CLASS_UNION_TAG* = 12
  IMAGE_SYM_CLASS_TYPE_DEFINITION* = 13
  IMAGE_SYM_CLASS_UNDEFINED_STATIC* = 14
  IMAGE_SYM_CLASS_ENUM_TAG* = 15
  IMAGE_SYM_CLASS_MEMBER_OF_ENUM* = 16
  IMAGE_SYM_CLASS_REGISTER_PARAM* = 17
  IMAGE_SYM_CLASS_BIT_FIELD* = 18
  IMAGE_SYM_CLASS_FAR_EXTERNAL* = 68
  IMAGE_SYM_CLASS_BLOCK* = 100
  IMAGE_SYM_CLASS_FUNCTION* = 101
  IMAGE_SYM_CLASS_END_OF_STRUCT* = 102
  IMAGE_SYM_CLASS_FILE* = 103
  IMAGE_SYM_CLASS_SECTION* = 104
  IMAGE_SYM_CLASS_WEAK_EXTERNAL* = 105
  IMAGE_SYM_CLASS_CLR_TOKEN* = 107
  IMAGE_COMDAT_SELECT_NODUPLICATES* = 1
  IMAGE_COMDAT_SELECT_ANY* = 2
  IMAGE_COMDAT_SELECT_SAME_SIZE* = 3
  IMAGE_COMDAT_SELECT_EXACT_MATCH* = 4
  IMAGE_COMDAT_SELECT_ASSOCIATIVE* = 5
  IMAGE_COMDAT_SELECT_LARGEST* = 6
  IMAGE_COMDAT_SELECT_NEWEST* = 7
  IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY* = 1
  IMAGE_WEAK_EXTERN_SEARCH_LIBRARY* = 2
  IMAGE_WEAK_EXTERN_SEARCH_ALIAS* = 3
  IMAGE_REL_I386_ABSOLUTE* = 0x0000
  IMAGE_REL_I386_DIR16* = 0x0001
  IMAGE_REL_I386_REL16* = 0x0002
  IMAGE_REL_I386_DIR32* = 0x0006
  IMAGE_REL_I386_DIR32NB* = 0x0007
  IMAGE_REL_I386_SEG12* = 0x0009
  IMAGE_REL_I386_SECTION* = 0x000A
  IMAGE_REL_I386_SECREL* = 0x000B
  IMAGE_REL_I386_TOKEN* = 0x000C
  IMAGE_REL_I386_SECREL7* = 0x000D
  IMAGE_REL_I386_REL32* = 0x0014
  IMAGE_REL_AMD64_ABSOLUTE* = 0x0000
  IMAGE_REL_AMD64_ADDR64* = 0x0001
  IMAGE_REL_AMD64_ADDR32* = 0x0002
  IMAGE_REL_AMD64_ADDR32NB* = 0x0003
  IMAGE_REL_AMD64_REL32* = 0x0004
  IMAGE_REL_AMD64_REL32_1* = 0x0005
  IMAGE_REL_AMD64_REL32_2* = 0x0006
  IMAGE_REL_AMD64_REL32_3* = 0x0007
  IMAGE_REL_AMD64_REL32_4* = 0x0008
  IMAGE_REL_AMD64_REL32_5* = 0x0009
  IMAGE_REL_AMD64_SECTION* = 0x000A
  IMAGE_REL_AMD64_SECREL* = 0x000B
  IMAGE_REL_AMD64_SECREL7* = 0x000C
  IMAGE_REL_AMD64_TOKEN* = 0x000D
  IMAGE_REL_AMD64_SREL32* = 0x000E
  IMAGE_REL_AMD64_PAIR* = 0x000F
  IMAGE_REL_AMD64_SSPAN32* = 0x0010
  IMAGE_REL_IA64_ABSOLUTE* = 0x0000
  IMAGE_REL_IA64_IMM14* = 0x0001
  IMAGE_REL_IA64_IMM22* = 0x0002
  IMAGE_REL_IA64_IMM64* = 0x0003
  IMAGE_REL_IA64_DIR32* = 0x0004
  IMAGE_REL_IA64_DIR64* = 0x0005
  IMAGE_REL_IA64_PCREL21B* = 0x0006
  IMAGE_REL_IA64_PCREL21M* = 0x0007
  IMAGE_REL_IA64_PCREL21F* = 0x0008
  IMAGE_REL_IA64_GPREL22* = 0x0009
  IMAGE_REL_IA64_LTOFF22* = 0x000A
  IMAGE_REL_IA64_SECTION* = 0x000B
  IMAGE_REL_IA64_SECREL22* = 0x000C
  IMAGE_REL_IA64_SECREL64I* = 0x000D
  IMAGE_REL_IA64_SECREL32* = 0x000E
  IMAGE_REL_IA64_DIR32NB* = 0x0010
  IMAGE_REL_IA64_SREL14* = 0x0011
  IMAGE_REL_IA64_SREL22* = 0x0012
  IMAGE_REL_IA64_SREL32* = 0x0013
  IMAGE_REL_IA64_UREL32* = 0x0014
  IMAGE_REL_IA64_PCREL60X* = 0x0015
  IMAGE_REL_IA64_PCREL60B* = 0x0016
  IMAGE_REL_IA64_PCREL60F* = 0x0017
  IMAGE_REL_IA64_PCREL60I* = 0x0018
  IMAGE_REL_IA64_PCREL60M* = 0x0019
  IMAGE_REL_IA64_IMMGPREL64* = 0x001A
  IMAGE_REL_IA64_TOKEN* = 0x001B
  IMAGE_REL_IA64_GPREL32* = 0x001C
  IMAGE_REL_IA64_ADDEND* = 0x001F
  IMAGE_REL_SH3_ABSOLUTE* = 0x0000
  IMAGE_REL_SH3_DIRECT16* = 0x0001
  IMAGE_REL_SH3_DIRECT32* = 0x0002
  IMAGE_REL_SH3_DIRECT8* = 0x0003
  IMAGE_REL_SH3_DIRECT8_WORD* = 0x0004
  IMAGE_REL_SH3_DIRECT8_LONG* = 0x0005
  IMAGE_REL_SH3_DIRECT4* = 0x0006
  IMAGE_REL_SH3_DIRECT4_WORD* = 0x0007
  IMAGE_REL_SH3_DIRECT4_LONG* = 0x0008
  IMAGE_REL_SH3_PCREL8_WORD* = 0x0009
  IMAGE_REL_SH3_PCREL8_LONG* = 0x000A
  IMAGE_REL_SH3_PCREL12_WORD* = 0x000B
  IMAGE_REL_SH3_STARTOF_SECTION* = 0x000C
  IMAGE_REL_SH3_SIZEOF_SECTION* = 0x000D
  IMAGE_REL_SH3_SECTION* = 0x000E
  IMAGE_REL_SH3_SECREL* = 0x000F
  IMAGE_REL_SH3_DIRECT32_NB* = 0x0010
  IMAGE_REL_SH3_GPREL4_LONG* = 0x0011
  IMAGE_REL_SH3_TOKEN* = 0x0012
  IMAGE_REL_SHM_PCRELPT* = 0x0013
  IMAGE_REL_SHM_REFLO* = 0x0014
  IMAGE_REL_SHM_REFHALF* = 0x0015
  IMAGE_REL_SHM_RELLO* = 0x0016
  IMAGE_REL_SHM_RELHALF* = 0x0017
  IMAGE_REL_SHM_PAIR* = 0x0018
  IMAGE_REL_SHM_NOMODE* = 0x8000
  IMAGE_REL_M32R_ABSOLUTE* = 0x0000
  IMAGE_REL_M32R_ADDR32* = 0x0001
  IMAGE_REL_M32R_ADDR32NB* = 0x0002
  IMAGE_REL_M32R_ADDR24* = 0x0003
  IMAGE_REL_M32R_GPREL16* = 0x0004
  IMAGE_REL_M32R_PCREL24* = 0x0005
  IMAGE_REL_M32R_PCREL16* = 0x0006
  IMAGE_REL_M32R_PCREL8* = 0x0007
  IMAGE_REL_M32R_REFHALF* = 0x0008
  IMAGE_REL_M32R_REFHI* = 0x0009
  IMAGE_REL_M32R_REFLO* = 0x000A
  IMAGE_REL_M32R_PAIR* = 0x000B
  IMAGE_REL_M32R_SECTION* = 0x000C
  IMAGE_REL_M32R_SECREL* = 0x000D
  IMAGE_REL_M32R_TOKEN* = 0x000E
  IMAGE_REL_MIPS_ABSOLUTE* = 0x0000
  IMAGE_REL_MIPS_REFHALF* = 0x0001
  IMAGE_REL_MIPS_REFWORD* = 0x0002
  IMAGE_REL_MIPS_JMPADDR* = 0x0003
  IMAGE_REL_MIPS_REFHI* = 0x0004
  IMAGE_REL_MIPS_REFLO* = 0x0005
  IMAGE_REL_MIPS_GPREL* = 0x0006
  IMAGE_REL_MIPS_LITERAL* = 0x0007
  IMAGE_REL_MIPS_SECTION* = 0x000A
  IMAGE_REL_MIPS_SECREL* = 0x000B
  IMAGE_REL_MIPS_SECRELLO* = 0x000C
  IMAGE_REL_MIPS_SECRELHI* = 0x000D
  IMAGE_REL_MIPS_JMPADDR16* = 0x0010
  IMAGE_REL_MIPS_REFWORDNB* = 0x0022
  IMAGE_REL_MIPS_PAIR* = 0x0025
  IMAGE_REL_ALPHA_ABSOLUTE* = 0
  IMAGE_REL_ALPHA_REFLONG* = 1
  IMAGE_REL_ALPHA_REFQUAD* = 2
  IMAGE_REL_ALPHA_GPREL32* = 3
  IMAGE_REL_ALPHA_LITERAL* = 4
  IMAGE_REL_ALPHA_LITUSE* = 5
  IMAGE_REL_ALPHA_GPDISP* = 6
  IMAGE_REL_ALPHA_BRADDR* = 7
  IMAGE_REL_ALPHA_HINT* = 8
  IMAGE_REL_ALPHA_INLINE_REFLONG* = 9
  IMAGE_REL_ALPHA_REFHI* = 10
  IMAGE_REL_ALPHA_REFLO* = 11
  IMAGE_REL_ALPHA_PAIR* = 12
  IMAGE_REL_ALPHA_MATCH* = 13
  IMAGE_REL_ALPHA_SECTION* = 14
  IMAGE_REL_ALPHA_SECREL* = 15
  IMAGE_REL_ALPHA_REFLONGNB* = 16
  IMAGE_REL_ALPHA_SECRELLO* = 17
  IMAGE_REL_ALPHA_SECRELHI* = 18
  IMAGE_REL_PPC_ABSOLUTE* = 0
  IMAGE_REL_PPC_ADDR64* = 1
  IMAGE_REL_PPC_ADDR32* = 2
  IMAGE_REL_PPC_ADDR24* = 3
  IMAGE_REL_PPC_ADDR16* = 4
  IMAGE_REL_PPC_ADDR14* = 5
  IMAGE_REL_PPC_REL24* = 6
  IMAGE_REL_PPC_REL14* = 7
  IMAGE_REL_PPC_TOCREL16* = 8
  IMAGE_REL_PPC_TOCREL14* = 9
  IMAGE_REL_PPC_ADDR32NB* = 10
  IMAGE_REL_PPC_SECREL* = 11
  IMAGE_REL_PPC_SECTION* = 12
  IMAGE_REL_PPC_IFGLUE* = 13
  IMAGE_REL_PPC_IMGLUE* = 14
  IMAGE_REL_PPC_SECREL16* = 15
  IMAGE_REL_PPC_REFHI* = 16
  IMAGE_REL_PPC_REFLO* = 17
  IMAGE_REL_PPC_PAIR* = 18
  IMAGE_REL_PPC_TYPEMASK* = 0x00FF
  IMAGE_REL_PPC_NEG* = 0x0100
  IMAGE_REL_PPC_BRTAKEN* = 0x0200
  IMAGE_REL_PPC_BRNTAKEN* = 0x0400
  IMAGE_REL_PPC_TOCDEFN* = 0x0800
  IMAGE_REL_BASED_ABSOLUTE* = 0
  IMAGE_REL_BASED_HIGH* = 1
  IMAGE_REL_BASED_LOW* = 2
  IMAGE_REL_BASED_HIGHLOW* = 3
  IMAGE_REL_BASED_HIGHADJ* = 4
  IMAGE_REL_BASED_MIPS_JMPADDR* = 5
  IMAGE_ARCHIVE_START_SIZE* = 8
  IMAGE_ARCHIVE_START* = "!<arch>\n"
  IMAGE_ARCHIVE_END* = "`\n"
  IMAGE_ARCHIVE_PAD* = "\n"
  IMAGE_ARCHIVE_LINKER_MEMBER* = "/               "
  IMAGE_ARCHIVE_LONGNAMES_MEMBER* = "//              "
  IMAGE_ORDINAL_FLAG32* = 0x80000000'u32
  IMAGE_ORDINAL_FLAG64* = 0x8000000000000000.uint64

proc IMAGE_ORDINAL64*(Ordinal: uint64): uint64 = Ordinal and 0xFFFF
proc IMAGE_ORDINAL32*(Ordinal: uint32): uint32 = Ordinal and 0xFFFF
proc IMAGE_SNAP_BY_ORDINAL32*(Ordinal: uint32): bool = (Ordinal and IMAGE_ORDINAL_FLAG32) != 0
proc IMAGE_SNAP_BY_ORDINAL64*(Ordinal: uint64): bool =  (Ordinal and IMAGE_ORDINAL_FLAG64) != 0

const
  IMAGE_RESOURCE_NAME_IS_STRING* = 0x80000000'i32
  IMAGE_RESOURCE_DATA_IS_DIRECTORY* = 0x80000000'i32
  IMAGE_DEBUG_TYPE_UNKNOWN* = 0
  IMAGE_DEBUG_TYPE_COFF* = 1
  IMAGE_DEBUG_TYPE_CODEVIEW* = 2
  IMAGE_DEBUG_TYPE_FPO* = 3
  IMAGE_DEBUG_TYPE_MISC* = 4
  IMAGE_DEBUG_TYPE_EXCEPTION* = 5
  IMAGE_DEBUG_TYPE_FIXUP* = 6
  IMAGE_DEBUG_TYPE_OMAP_TO_SRC* = 7
  IMAGE_DEBUG_TYPE_OMAP_FROM_SRC* = 8
  IMAGE_DEBUG_TYPE_BORLAND* = 9
  FRAME_FPO* = 0
  FRAME_TRAP* = 1
  FRAME_TSS* = 2
  FRAME_NONFPO* = 3
  IMAGE_DEBUG_MISC_EXENAME* = 1
  N_BTMASK* = 0x000F
  N_TMASK* = 0x0030
  N_TMASK1* = 0x00C0
  N_TMASK2* = 0x00F0
  N_BTSHFT* = 4
  N_TSHIFT* = 2
  IS_TEXT_UNICODE_ASCII16* = 0x0001
  IS_TEXT_UNICODE_STATISTICS* = 0x0002
  IS_TEXT_UNICODE_CONTROLS* = 0x0004
  IS_TEXT_UNICODE_SIGNATURE* = 0x0008
  IS_TEXT_UNICODE_REVERSE_ASCII16* = 0x0010
  IS_TEXT_UNICODE_REVERSE_STATISTICS* = 0x0020
  IS_TEXT_UNICODE_REVERSE_CONTROLS* = 0x0040
  IS_TEXT_UNICODE_REVERSE_SIGNATURE* = 0x0080
  IS_TEXT_UNICODE_ILLEGAL_CHARS* = 0x0100
  IS_TEXT_UNICODE_ODD_LENGTH* = 0x0200
  IS_TEXT_UNICODE_NULL_BYTES* = 0x1000
  IS_TEXT_UNICODE_UNICODE_MASK* = 0x000F
  IS_TEXT_UNICODE_REVERSE_MASK* = 0x00F0
  IS_TEXT_UNICODE_NOT_UNICODE_MASK* = 0x0F00
  IS_TEXT_UNICODE_NOT_ASCII_MASK* = 0xF000
  SERVICE_KERNEL_DRIVER* = 0x0001
  SERVICE_FILE_SYSTEM_DRIVER* = 0x0002
  SERVICE_ADAPTER* = 0x0004
  SERVICE_RECOGNIZER_DRIVER* = 0x0008
  SERVICE_WIN32_OWN_PROCESS* = 0x0010
  SERVICE_WIN32_SHARE_PROCESS* = 0x0020
  SERVICE_INTERACTIVE_PROCESS* = 0x0100
  SERVICE_DRIVER* = 0x000B
  SERVICE_WIN32* = 0x0030
  SERVICE_TYPE_ALL* = 0x013F
  SERVICE_BOOT_START* = 0
  SERVICE_SYSTEM_START* = 1
  SERVICE_AUTO_START* = 2
  SERVICE_DEMAND_START* = 3
  SERVICE_DISABLED* = 4
  SERVICE_ERROR_IGNORE* = 0
  SERVICE_ERROR_NORMAL* = 1
  SERVICE_ERROR_SEVERE* = 2
  SERVICE_ERROR_CRITICAL* = 3
  SE_OWNER_DEFAULTED* = 0x0001
  SE_GROUP_DEFAULTED* = 0x0002
  SE_DACL_PRESENT* = 0x0004
  SE_DACL_DEFAULTED* = 0x0008
  SE_SACL_PRESENT* = 0x0010
  SE_SACL_DEFAULTED* = 0x0020
  SE_DACL_AUTO_INHERIT_REQ* = 0x0100
  SE_SACL_AUTO_INHERIT_REQ* = 0x0200
  SE_DACL_AUTO_INHERITED* = 0x0400
  SE_SACL_AUTO_INHERITED* = 0x0800
  SE_DACL_PROTECTED* = 0x1000
  SE_SACL_PROTECTED* = 0x2000
  SE_SELF_RELATIVE* = 0x8000

type
  SECURITY_IMPERSONATION_LEVEL* {.pure.} = enum
    SecurityAnonymous
    SecurityIdentification
    SecurityImpersonation
    SecurityDelegation
  PSECURITY_IMPERSONATION_LEVEL* = ptr SECURITY_IMPERSONATION_LEVEL
  SECURITY_CONTEXT_TRACKING_MODE* = BOOLEAN
  PSECURITY_CONTEXT_TRACKING_MODE* = ptr BOOLEAN

const
  SECURITY_DESCRIPTOR_MIN_LENGTH* = 20
  SECURITY_DESCRIPTOR_REVISION* = 1
  SECURITY_DESCRIPTOR_REVISION1* = 1
  SE_PRIVILEGE_ENABLED_BY_DEFAULT* = 0x00000001
  SE_PRIVILEGE_ENABLED* = 0x00000002
  SE_PRIVILEGE_USED_FOR_ACCESS* = 0x80000000'u32
  PRIVILEGE_SET_ALL_NECESSARY* = 1
  SECURITY_MAX_IMPERSONATION_LEVEL* = SECURITY_IMPERSONATION_LEVEL.SecurityDelegation.SECURITY_IMPERSONATION_LEVEL
  DEFAULT_IMPERSONATION_LEVEL* = SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation.SECURITY_IMPERSONATION_LEVEL
  SECURITY_DYNAMIC_TRACKING* = 1
  SECURITY_STATIC_TRACKING* = 0
  TOKEN_ASSIGN_PRIMARY* = 0x0001
  TOKEN_DUPLICATE* = 0x0002
  TOKEN_IMPERSONATE* = 0x0004
  TOKEN_QUERY* = 0x0008
  TOKEN_QUERY_SOURCE* = 0x0010
  TOKEN_ADJUST_PRIVILEGES* = 0x0020
  TOKEN_ADJUST_GROUPS* = 0x0040
  TOKEN_ADJUST_DEFAULT* = 0x0080
  TOKEN_ALL_ACCESS* = (STANDARD_RIGHTS_REQUIRED or TOKEN_ASSIGN_PRIMARY or TOKEN_DUPLICATE or TOKEN_IMPERSONATE or TOKEN_QUERY or TOKEN_QUERY_SOURCE or TOKEN_ADJUST_PRIVILEGES or TOKEN_ADJUST_GROUPS or TOKEN_ADJUST_DEFAULT)
  TOKEN_READ* = (STANDARD_RIGHTS_READ or TOKEN_QUERY)
  TOKEN_WRITE* = (STANDARD_RIGHTS_WRITE or TOKEN_ADJUST_PRIVILEGES or TOKEN_ADJUST_GROUPS or TOKEN_ADJUST_DEFAULT)
  TOKEN_EXECUTE* = STANDARD_RIGHTS_EXECUTE
  TOKEN_SOURCE_LENGTH* = 8
  DLL_PROCESS_DETACH* = 0
  DLL_PROCESS_ATTACH* = 1
  DLL_THREAD_ATTACH* = 2
  DLL_THREAD_DETACH* = 3
  DBG_CONTINUE* = 0x00010002
  DBG_TERMINATE_THREAD* = 0x40010003
  DBG_TERMINATE_PROCESS* = 0x40010004
  DBG_CONTROL_C* = 0x40010005
  DBG_CONTROL_BREAK* = 0x40010008
  DBG_EXCEPTION_NOT_HANDLED* = 0x80010001'u32
  TAPE_ABSOLUTE_POSITION* = 0
  TAPE_LOGICAL_POSITION* = 1
  TAPE_PSEUDO_LOGICAL_POSITION* = 2
  TAPE_REWIND* = 0
  TAPE_ABSOLUTE_BLOCK* = 1
  TAPE_LOGICAL_BLOCK* = 2
  TAPE_PSEUDO_LOGICAL_BLOCK* = 3
  TAPE_SPACE_END_OF_DATA* = 4
  TAPE_SPACE_RELATIVE_BLOCKS* = 5
  TAPE_SPACE_FILEMARKS* = 6
  TAPE_SPACE_SEQUENTIAL_FMKS* = 7
  TAPE_SPACE_SETMARKS* = 8
  TAPE_SPACE_SEQUENTIAL_SMKS* = 9
  TAPE_DRIVE_FIXED* = 0x00000001
  TAPE_DRIVE_SELECT* = 0x00000002
  TAPE_DRIVE_INITIATOR* = 0x00000004
  TAPE_DRIVE_ERASE_SHORT* = 0x00000010
  TAPE_DRIVE_ERASE_LONG* = 0x00000020
  TAPE_DRIVE_ERASE_BOP_ONLY* = 0x00000040
  TAPE_DRIVE_ERASE_IMMEDIATE* = 0x00000080
  TAPE_DRIVE_TAPE_CAPACITY* = 0x00000100
  TAPE_DRIVE_TAPE_REMAINING* = 0x00000200
  TAPE_DRIVE_FIXED_BLOCK* = 0x00000400
  TAPE_DRIVE_VARIABLE_BLOCK* = 0x00000800
  TAPE_DRIVE_WRITE_PROTECT* = 0x00001000
  TAPE_DRIVE_EOT_WZ_SIZE* = 0x00002000
  TAPE_DRIVE_ECC* = 0x00010000
  TAPE_DRIVE_COMPRESSION* = 0x00020000
  TAPE_DRIVE_PADDING* = 0x00040000
  TAPE_DRIVE_REPORT_SMKS* = 0x00080000
  TAPE_DRIVE_GET_ABSOLUTE_BLK* = 0x00100000
  TAPE_DRIVE_GET_LOGICAL_BLK* = 0x00200000
  TAPE_DRIVE_SET_EOT_WZ_SIZE* = 0x00400000
  TAPE_DRIVE_EJECT_MEDIA* = 0x01000000
  TAPE_DRIVE_CLEAN_REQUESTS* = 0x02000000
  TAPE_DRIVE_SET_CMP_BOP_ONLY* = 0x04000000
  TAPE_DRIVE_RESERVED_BIT* = 0x80000000'u32
  TAPE_DRIVE_LOAD_UNLOAD* = 0x80000001'u32
  TAPE_DRIVE_TENSION* = 0x80000002'u32
  TAPE_DRIVE_LOCK_UNLOCK* = 0x80000004'u32
  TAPE_DRIVE_REWIND_IMMEDIATE* = 0x80000008'u32
  TAPE_DRIVE_SET_BLOCK_SIZE* = 0x80000010'u32
  TAPE_DRIVE_LOAD_UNLD_IMMED* = 0x80000020'u32
  TAPE_DRIVE_TENSION_IMMED* = 0x80000040'u32
  TAPE_DRIVE_LOCK_UNLK_IMMED* = 0x80000080'u32
  TAPE_DRIVE_SET_ECC* = 0x80000100'u32
  TAPE_DRIVE_SET_COMPRESSION* = 0x80000200'u32
  TAPE_DRIVE_SET_PADDING* = 0x80000400'u32
  TAPE_DRIVE_SET_REPORT_SMKS* = 0x80000800'u32
  TAPE_DRIVE_ABSOLUTE_BLK* = 0x80001000'u32
  TAPE_DRIVE_ABS_BLK_IMMED* = 0x80002000'u32
  TAPE_DRIVE_LOGICAL_BLK* = 0x80004000'u32
  TAPE_DRIVE_LOG_BLK_IMMED* = 0x80008000'u32
  TAPE_DRIVE_END_OF_DATA* = 0x80010000'u32
  TAPE_DRIVE_RELATIVE_BLKS* = 0x80020000'u32
  TAPE_DRIVE_FILEMARKS* = 0x80040000'u32
  TAPE_DRIVE_SEQUENTIAL_FMKS* = 0x80080000'u32
  TAPE_DRIVE_SETMARKS* = 0x80100000'u32
  TAPE_DRIVE_SEQUENTIAL_SMKS* = 0x80200000'u32
  TAPE_DRIVE_REVERSE_POSITION* = 0x80400000'u32
  TAPE_DRIVE_SPACE_IMMEDIATE* = 0x80800000'u32
  TAPE_DRIVE_WRITE_SETMARKS* = 0x81000000'u32
  TAPE_DRIVE_WRITE_FILEMARKS* = 0x82000000'u32
  TAPE_DRIVE_WRITE_SHORT_FMKS* = 0x84000000'u32
  TAPE_DRIVE_WRITE_LONG_FMKS* = 0x88000000'u32
  TAPE_DRIVE_WRITE_MARK_IMMED* = 0x90000000'u32
  TAPE_DRIVE_FORMAT* = 0xA0000000'u32
  TAPE_DRIVE_FORMAT_IMMEDIATE* = 0xC0000000'u32
  TAPE_DRIVE_HIGH_FEATURES* = 0x80000000'u32
  TAPE_FIXED_PARTITIONS* = 0
  TAPE_SELECT_PARTITIONS* = 1
  TAPE_INITIATOR_PARTITIONS* = 2
  TAPE_SETMARKS* = 0
  TAPE_FILEMARKS* = 1
  TAPE_SHORT_FILEMARKS* = 2
  TAPE_LONG_FILEMARKS* = 3
  TAPE_ERASE_SHORT* = 0
  TAPE_ERASE_LONG* = 1
  TAPE_LOAD* = 0
  TAPE_UNLOAD* = 1
  TAPE_TENSION* = 2
  TAPE_LOCK* = 3
  TAPE_UNLOCK* = 4
  TAPE_FORMAT* = 5
  VER_PLATFORM_WIN32s* = 0
  VER_PLATFORM_WIN32_WINDOWS* = 1
  VER_PLATFORM_WIN32_NT* = 2
  VER_NT_WORKSTATION* = 1
  VER_NT_DOMAIN_CONTROLLER* = 2
  VER_NT_SERVER* = 3
  VER_SUITE_SMALLBUSINESS* = 0x0001
  VER_SUITE_ENTERPRISE* = 0x0002
  VER_SUITE_BACKOFFICE* = 0x0004
  VER_SUITE_TERMINAL* = 0x0010
  VER_SUITE_SMALLBUSINESS_RESTRICTED* = 0x0020
  VER_SUITE_EMBEDDEDNT* = 0x0040
  VER_SUITE_DATACENTER* = 0x0080
  VER_SUITE_SINGLEUSERTS* = 0x0100
  VER_SUITE_PERSONAL* = 0x0200
  VER_SUITE_BLADE* = 0x0400
  VER_SUITE_STORAGE_SERVER* = 0x2000
  VER_SUITE_COMPUTE_SERVER* = 0x4000
  WT_EXECUTEDEFAULT* = 0x00000000
  WT_EXECUTEINIOTHREAD* = 0x00000001
  WT_EXECUTEINWAITTHREAD* = 0x00000004
  WT_EXECUTEONLYONCE* = 0x00000008
  WT_EXECUTELONGFUNCTION* = 0x00000010
  WT_EXECUTEINTIMERTHREAD* = 0x00000020
  WT_EXECUTEINPERSISTENTTHREAD* = 0x00000080
  WT_TRANSFER_IMPERSONATION* = 0x00000100

const
  VER_MINORVERSION* = 0x01
  VER_MAJORVERSION* = 0x02
  VER_BUILDNUMBER* = 0x04
  VER_PLATFORMID* = 0x08
  VER_SERVICEPACKMINOR* = 0x10
  VER_SERVICEPACKMAJOR* = 0x20
  VER_SUITENAME* = 0x40
  VER_PRODUCT_TYPE* = 0x80
  VER_EQUAL* = 1
  VER_GREATER* = 2
  VER_GREATER_EQUAL* = 3
  VER_LESS* = 4
  VER_LESS_EQUAL* = 5
  VER_AND* = 6
  VER_OR* = 7

const
  ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION* = 1
  ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION* = 2
  ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION* = 3
  ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION* = 4
  ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION* = 5
  ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION* = 6
  ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION* = 7
  ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES* = 9

proc BTYPE*(x: BYTE): BYTE = x and N_BTMASK
proc ISPTR*(x: uint32): bool = (x and N_TMASK) == (IMAGE_SYM_DTYPE_POINTER shl N_BTSHFT)
proc ISFCN*(x: uint32): bool = (x and N_TMASK) == (IMAGE_SYM_DTYPE_FUNCTION shl N_BTSHFT)
proc ISARY*(x: uint32): bool = (x and N_TMASK) == (IMAGE_SYM_DTYPE_ARRAY shl N_BTSHFT)
proc ISTAG*(x: uint32): bool = (x == IMAGE_SYM_CLASS_STRUCT_TAG) or (x == IMAGE_SYM_CLASS_UNION_TAG) or (x == IMAGE_SYM_CLASS_ENUM_TAG)
proc INCREF*(x: uint32): uint32 = ((x and cast[uint32](not N_BTMASK)) shl N_TSHIFT) or (IMAGE_SYM_DTYPE_POINTER shl N_BTSHFT) or (x and N_BTMASK)
proc DECREF*(x: uint32): uint32 = ((x shr N_TSHIFT) and cast[uint32](not N_BTMASK)) or (x and N_BTMASK)

const
  TLS_MINIMUM_AVAILABLE* = 64
  IO_REPARSE_TAG_RESERVED_ZERO* = 0
  IO_REPARSE_TAG_RESERVED_ONE* = 1
  IO_REPARSE_TAG_RESERVED_RANGE* = IO_REPARSE_TAG_RESERVED_ONE.ULONG
  IO_REPARSE_TAG_SYMBOLIC_LINK* = IO_REPARSE_TAG_RESERVED_ZERO.ULONG
  IO_REPARSE_TAG_MOUNT_POINT* = 0xA0000003'u32
  IO_REPARSE_TAG_SYMLINK* = 0xA000000C'u32
  IO_REPARSE_TAG_VALID_VALUES* = 0xE000FFFF'u32

proc IsReparseTagMicrosoft*(x: ULONG): ULONG = x and 0x80000000'u32
proc IsReparseTagHighLatency*(x: ULONG): ULONG = x and 0x40000000'u32
proc IsReparseTagNameSurrogate*(x: ULONG): ULONG = x and 0x20000000'u32
proc IsReparseTagValid*(x: ULONG): bool = not ((x and ULONG(not cast[uint](IO_REPARSE_TAG_VALID_VALUES))) != 0 and x > IO_REPARSE_TAG_RESERVED_RANGE)

type
  GENERIC_MAPPING* {.final, pure.} = object
    GenericRead*: ACCESS_MASK
    GenericWrite*: ACCESS_MASK
    GenericExecute*: ACCESS_MASK
    GenericAll*: ACCESS_MASK
  PGENERIC_MAPPING* = ptr GENERIC_MAPPING
  ACE_HEADER* {.final, pure.} = object
    AceType*: BYTE
    AceFlags*: BYTE
    AceSize*: WORD
  PACE_HEADER* = ptr ACE_HEADER
  ACCESS_ALLOWED_ACE* {.final, pure.} = object
    Header*: ACE_HEADER
    Mask*: ACCESS_MASK
    SidStart*: DWORD
  PACCESS_ALLOWED_ACE* = ptr ACCESS_ALLOWED_ACE
  ACCESS_DENIED_ACE* {.final, pure.} = object
    Header*: ACE_HEADER
    Mask*: ACCESS_MASK
    SidStart*: DWORD
  PACCESS_DENIED_ACE* = ptr ACCESS_DENIED_ACE
  SYSTEM_AUDIT_ACE* {.final, pure.} = object
    Header*: ACE_HEADER
    Mask*: ACCESS_MASK
    SidStart*: DWORD
  PSYSTEM_AUDIT_ACE* = ptr SYSTEM_AUDIT_ACE
  SYSTEM_ALARM_ACE* {.final, pure.} = object
    Header*: ACE_HEADER
    Mask*: ACCESS_MASK
    SidStart*: DWORD
  PSYSTEM_ALARM_ACE* = ptr SYSTEM_ALARM_ACE
  ACCESS_ALLOWED_OBJECT_ACE* {.final, pure.} = object
    Header*: ACE_HEADER
    Mask*: ACCESS_MASK
    Flags*: DWORD
    ObjectType*: GUID
    InheritedObjectType*: GUID
    SidStart*: DWORD
  PACCESS_ALLOWED_OBJECT_ACE* = ptr ACCESS_ALLOWED_OBJECT_ACE
  ACCESS_DENIED_OBJECT_ACE* {.final, pure.} = object
    Header*: ACE_HEADER
    Mask*: ACCESS_MASK
    Flags*: DWORD
    ObjectType*: GUID
    InheritedObjectType*: GUID
    SidStart*: DWORD
  PACCESS_DENIED_OBJECT_ACE* = ptr ACCESS_DENIED_OBJECT_ACE
  SYSTEM_AUDIT_OBJECT_ACE* {.final, pure.} = object
    Header*: ACE_HEADER
    Mask*: ACCESS_MASK
    Flags*: DWORD
    ObjectType*: GUID
    InheritedObjectType*: GUID
    SidStart*: DWORD
  PSYSTEM_AUDIT_OBJECT_ACE* = ptr SYSTEM_AUDIT_OBJECT_ACE
  SYSTEM_ALARM_OBJECT_ACE* {.final, pure.} = object
    Header*: ACE_HEADER
    Mask*: ACCESS_MASK
    Flags*: DWORD
    ObjectType*: GUID
    InheritedObjectType*: GUID
    SidStart*: DWORD
  PSYSTEM_ALARM_OBJECT_ACE* = ptr SYSTEM_ALARM_OBJECT_ACE
  ACL* {.final, pure.} = object
    AclRevision*: BYTE
    Sbz1*: BYTE
    AclSize*: WORD
    AceCount*: WORD
    Sbz2*: WORD
  PACL* = ptr ACL
  ACL_REVISION_INFORMATION* {.final, pure.} = object
    AclRevision*: DWORD
  ACL_SIZE_INFORMATION* {.final, pure.} = object
    AceCount*: DWORD
    AclBytesInUse*: DWORD
    AclBytesFree*: DWORD

when defined(cpu64):
  const
    CONTEXT_AMD64* = 0x00100000
    CONTEXT_CONTROL* = (CONTEXT_AMD64 or 0x00000001)
    CONTEXT_INTEGER* = (CONTEXT_AMD64 or 0x00000002)
    CONTEXT_SEGMENTS* = (CONTEXT_AMD64 or 0x00000004)
    CONTEXT_FLOATING_POINT* = (CONTEXT_AMD64 or 0x00000008)
    CONTEXT_DEBUG_REGISTERS* = (CONTEXT_AMD64 or 0x00000010)
    CONTEXT_FULL* = (CONTEXT_CONTROL or CONTEXT_INTEGER or CONTEXT_FLOATING_POINT)
    CONTEXT_ALL* = (CONTEXT_CONTROL or CONTEXT_INTEGER or CONTEXT_SEGMENTS or CONTEXT_FLOATING_POINT or CONTEXT_DEBUG_REGISTERS)
    CONTEXT_EXCEPTION_ACTIVE* = 0x08000000
    CONTEXT_SERVICE_ACTIVE* = 0x10000000
    CONTEXT_EXCEPTION_REQUEST* = 0x40000000
    CONTEXT_EXCEPTION_REPORTING* = -2147483648

  type
    M128A* {.final, pure.} = object
      Low*: ULONGLONG
      High*: LONGLONG
    XMM_SAVE_AREA32* {.final, pure.} = object
      ControlWord*: WORD
      StatusWord*: WORD
      TagWord*: BYTE
      Reserved1*: BYTE
      ErrorOpcode*: WORD
      ErrorOffset*: DWORD
      ErrorSelector*: WORD
      Reserved2*: WORD
      DataOffset*: DWORD
      DataSelector*: WORD
      Reserved3*: WORD
      MxCsr*: DWORD
      MxCsr_Mask*: DWORD
      FloatRegisters*: array[8, M128A]
      XmmRegisters*: array[16, M128A]
      Reserved4*: array[96, BYTE]
    CONTEXT_UNION1_STRUCT1* = object
      Header*: array[2, M128A]
      Legacy*: array[8, M128A]
      Xmm0*: M128A
      Xmm1*: M128A
      Xmm2*: M128A
      Xmm3*: M128A
      Xmm4*: M128A
      Xmm5*: M128A
      Xmm6*: M128A
      Xmm7*: M128A
      Xmm8*: M128A
      Xmm9*: M128A
      Xmm10*: M128A
      Xmm11*: M128A
      Xmm12*: M128A
      Xmm13*: M128A
      Xmm14*: M128A
      Xmm15*: M128A
    CONTEXT_UNION1* = object {.union.}
      FloatSave*: XMM_SAVE_AREA32
      s1*: CONTEXT_UNION1_STRUCT1
    CONTEXT* = object
      P1Home*: DWORD64
      P2Home*: DWORD64
      P3Home*: DWORD64
      P4Home*: DWORD64
      P5Home*: DWORD64
      P6Home*: DWORD64
      ContextFlags*: DWORD
      MxCsr*: DWORD
      SegCs*: WORD
      SegDs*: WORD
      SegEs*: WORD
      SegFs*: WORD
      SegGs*: WORD
      SegSs*: WORD
      EFlags*: DWORD
      Dr0*: DWORD64
      Dr1*: DWORD64
      Dr2*: DWORD64
      Dr3*: DWORD64
      Dr6*: DWORD64
      Dr7*: DWORD64
      Rax*: DWORD64
      Rcx*: DWORD64
      Rdx*: DWORD64
      Rbx*: DWORD64
      Rsp*: DWORD64
      Rbp*: DWORD64
      Rsi*: DWORD64
      Rdi*: DWORD64
      R8*: DWORD64
      R9*: DWORD64
      R10*: DWORD64
      R11*: DWORD64
      R12*: DWORD64
      R13*: DWORD64
      R14*: DWORD64
      R15*: DWORD64
      Rip*: DWORD64
      u1*: CONTEXT_UNION1
      VectorRegister*: array[26, M128A]
      VectorControl*: DWORD64
      DebugControl*: DWORD64
      LastBranchToRip*: DWORD64
      LastBranchFromRip*: DWORD64
      LastExceptionToRip*: DWORD64
      LastExceptionFromRip*: DWORD64

else:
  const
    SIZE_OF_80387_REGISTERS* = 80
    CONTEXT_i386* = 0x010000
    CONTEXT_i486* = 0x010000
    CONTEXT_CONTROL* = CONTEXT_i386 or 0x01
    CONTEXT_INTEGER* = CONTEXT_i386 or 0x02
    CONTEXT_SEGMENTS* = CONTEXT_i386 or 0x04
    CONTEXT_FLOATING_POINT* = CONTEXT_i386 or 0x08
    CONTEXT_DEBUG_REGISTERS* = CONTEXT_i386 or 0x10
    CONTEXT_EXTENDED_REGISTERS* = CONTEXT_i386 or 0x20
    CONTEXT_FULL* = CONTEXT_CONTROL or CONTEXT_INTEGER or CONTEXT_SEGMENTS
    MAXIMUM_SUPPORTED_EXTENSION* = 512

  type
    FLOATING_SAVE_AREA* {.final, pure.} = object
      ControlWord*: DWORD
      StatusWord*: DWORD
      TagWord*: DWORD
      ErrorOffset*: DWORD
      ErrorSelector*: DWORD
      DataOffset*: DWORD
      DataSelector*: DWORD
      RegisterArea*: array[SIZE_OF_80387_REGISTERS, BYTE]
      Cr0NpxState*: DWORD
    CONTEXT* {.final, pure.} = object
      ContextFlags*: DWORD
      Dr0*: DWORD
      Dr1*: DWORD
      Dr2*: DWORD
      Dr3*: DWORD
      Dr6*: DWORD
      Dr7*: DWORD
      FloatSave*: FLOATING_SAVE_AREA
      SegGs*: DWORD
      SegFs*: DWORD
      SegEs*: DWORD
      SegDs*: DWORD
      Edi*: DWORD
      Esi*: DWORD
      Ebx*: DWORD
      Edx*: DWORD
      Ecx*: DWORD
      Eax*: DWORD
      Ebp*: DWORD
      Eip*: DWORD
      SegCs*: DWORD
      EFlags*: DWORD
      Esp*: DWORD
      SegSs*: DWORD
      ExtendedRegisters*: array[MAXIMUM_SUPPORTED_EXTENSION, BYTE]

type
  PCONTEXT* = ptr CONTEXT
  LPCONTEXT* = ptr CONTEXT
  EXCEPTION_RECORD* {.final, pure.} = object
    ExceptionCode*: DWORD
    ExceptionFlags*: DWORD
    ExceptionRecord*: ptr EXCEPTION_RECORD
    ExceptionAddress*: PVOID
    NumberParameters*: DWORD
    ExceptionInformation*: array[EXCEPTION_MAXIMUM_PARAMETERS, DWORD]
  PEXCEPTION_RECORD* = ptr EXCEPTION_RECORD
  LPEXCEPTION_RECORD* = ptr EXCEPTION_RECORD
  EXCEPTION_POINTERS* {.final, pure.} = object
    ExceptionRecord*: PEXCEPTION_RECORD
    ContextRecord*: PCONTEXT
  PEXCEPTION_POINTERS* = ptr EXCEPTION_POINTERS
  LPEXCEPTION_POINTERS* = ptr EXCEPTION_POINTERS
  LARGE_INTEGER_STRUCT1* {.final, pure.} = object
    LowPart*: uint32
    HighPart*: int32
  LARGE_INTEGER* {.final, union, pure.} = object
    s1*: LARGE_INTEGER_STRUCT1
    QuadPart*: int64
  PLARGE_INTEGER* = ptr LARGE_INTEGER
  ULARGE_INTEGER_STRUCT1* {.final, pure.} = object
    LowPart*: uint32
    HighPart*: uint32
  ULARGE_INTEGER* {.final, union, pure.} = object
    s1*: ULARGE_INTEGER_STRUCT1
    QuadPart*: uint64
  PULARGE_INTEGER* = ptr ULARGE_INTEGER
  LUID* = LARGE_INTEGER
  PLUID* = ptr LUID

const
  SYSTEM_LUID* = LUID(QuadPart: 0x3e7)
  ANONYMOUS_LOGON_LUID* = LUID(QuadPart: 0x3e6)
  LOCALSERVICE_LUID* = LUID(QuadPart: 0x3e5)
  NETWORKSERVICE_LUID* = LUID(QuadPart: 0x3e4)
  IUSER_LUID* = LUID(QuadPart: 0x3e3)

type
  IMAGE_RESOURCE_DIRECTORY_ENTRY_UNION1* {.final, union, pure.} = object
    NameOffset* {.bitsize: 31.}: DWORD
    NameIsString* {.bitsize: 1.}: DWORD
    Id*: WORD
  IMAGE_RESOURCE_DIRECTORY_ENTRY* {.final, pure.} = object
    u1*: IMAGE_RESOURCE_DIRECTORY_ENTRY_UNION1
    OffsetToDirectory* {.bitsize: 31.}: DWORD
    DataIsDirector* {.bitsize: 1.}: DWORD
  PIMAGE_RESOURCE_DIRECTORY_ENTRY* = ptr IMAGE_RESOURCE_DIRECTORY_ENTRY
  IMAGE_CE_RUNTIME_FUNCTION_ENTRY* {.final, pure.} = object
    FuncStart*: uint32
    PrologLen* {.bitsize: 8.}: DWORD
    FuncLen* {.bitsize: 22.}: DWORD
    ThirtyTwoBit* {.bitsize: 1.}: DWORD
    ExceptionFlag* {.bitsize: 1.}: DWORD
  PIMAGE_CE_RUNTIME_FUNCTION_ENTRY* = ptr IMAGE_CE_RUNTIME_FUNCTION_ENTRY
  FPO_DATA* {.final, pure.} = object
    ulOffStart*: DWORD
    cbProcSize*: DWORD
    cdwLocals*: DWORD
    cdwParams*: WORD
    cbProlog*: uint8
    cbRegs* {.bitsize: 3.}: BYTE
    fHasSEH* {.bitsize: 1.}: BYTE
    fUseBP* {.bitsize: 1.}: BYTE
    reserved* {.bitsize: 1.}: BYTE
    cbFrame* {.bitsize: 2.}: BYTE
  PFPO_DATA* = ptr FPO_DATA

type
  LUID_AND_ATTRIBUTES* {.final, pure.} = object
    Luid*: LUID
    Attributes*: DWORD
  PLUID_AND_ATTRIBUTES* = ptr LUID_AND_ATTRIBUTES
  PRIVILEGE_SET* {.final, pure.} = object
    PrivilegeCount*: DWORD
    Control*: DWORD
    Privilege*: array[1, LUID_AND_ATTRIBUTES]
  PPRIVILEGE_SET* = ptr PRIVILEGE_SET
  SECURITY_ATTRIBUTES* {.final, pure.} = object
    nLength*: DWORD
    lpSecurityDescriptor*: LPVOID
    bInheritHandle*: BOOL
  PSECURITY_ATTRIBUTES* = ptr SECURITY_ATTRIBUTES
  LPSECURITY_ATTRIBUTES* = ptr SECURITY_ATTRIBUTES
  SECURITY_QUALITY_OF_SERVICE* {.final, pure.} = object
    Length*: DWORD
    ImpersonationLevel*: SECURITY_IMPERSONATION_LEVEL
    ContextTrackingMode*: SECURITY_CONTEXT_TRACKING_MODE
    EffectiveOnly*: BOOLEAN
  PSECURITY_QUALITY_OF_SERVICE* = ptr SECURITY_QUALITY_OF_SERVICE
  PACCESS_TOKEN* = PVOID
  SE_IMPERSONATION_STATE* {.final, pure.} = object
    Token*: PACCESS_TOKEN
    CopyOnOpen*: BOOLEAN
    EffectiveOnly*: BOOLEAN
    Level*: SECURITY_IMPERSONATION_LEVEL
  PSE_IMPERSONATION_STATE* = ptr SE_IMPERSONATION_STATE
  SID_IDENTIFIER_AUTHORITY* {.final, pure.} = object
    Value*: array[6, BYTE]
  PSID_IDENTIFIER_AUTHORITY* = ptr SID_IDENTIFIER_AUTHORITY
  LPSID_IDENTIFIER_AUTHORITY* = ptr SID_IDENTIFIER_AUTHORITY
  PSID* = PVOID
  SID* {.final, pure.} = object
    Revision*: BYTE
    SubAuthorityCount*: BYTE
    IdentifierAuthority*: SID_IDENTIFIER_AUTHORITY
    SubAuthority*: array[1, DWORD]
  PISID* = ptr SID
  SID_AND_ATTRIBUTES* {.final, pure.} = object
    Sid*: PSID
    Attributes*: DWORD
  PSID_AND_ATTRIBUTES* = ptr SID_AND_ATTRIBUTES
  TOKEN_SOURCE* {.final, pure.} = object
    SourceName*: array[TOKEN_SOURCE_LENGTH, CHAR]
    SourceIdentifier*: LUID
  PTOKEN_SOURCE* = ptr TOKEN_SOURCE
  TOKEN_CONTROL* {.final, pure.} = object
    TokenId*: LUID
    AuthenticationId*: LUID
    ModifiedId*: LUID
    TokenSource*: TOKEN_SOURCE
  PTOKEN_CONTROL* = ptr TOKEN_CONTROL
  TOKEN_DEFAULT_DACL* {.final, pure.} = object
    DefaultDacl*: PACL
  PTOKEN_DEFAULT_DACL* = ptr TOKEN_DEFAULT_DACL
  TOKEN_GROUPS* {.final, pure.} = object
    GroupCount*: DWORD
    Groups*: array[1, SID_AND_ATTRIBUTES]
  PTOKEN_GROUPS* = ptr TOKEN_GROUPS
  LPTOKEN_GROUPS* = ptr TOKEN_GROUPS
  TOKEN_OWNER* {.final, pure.} = object
    Owner*: PSID
  PTOKEN_OWNER* = ptr TOKEN_OWNER
  TOKEN_PRIMARY_GROUP* {.final, pure.} = object
    PrimaryGroup*: PSID
  PTOKEN_PRIMARY_GROUP* = ptr TOKEN_PRIMARY_GROUP
  TOKEN_PRIVILEGES* {.final, pure.} = object
    PrivilegeCount*: DWORD
    Privileges*: array[1, LUID_AND_ATTRIBUTES]
  PTOKEN_PRIVILEGES* = ptr TOKEN_PRIVILEGES
  LPTOKEN_PRIVILEGES* = ptr TOKEN_PRIVILEGES
  TOKEN_TYPE* = int32
  PTOKEN_TYPE* = ptr TOKEN_TYPE
  TOKEN_STATISTICS* {.final, pure.} = object
    TokenId*: LUID
    AuthenticationId*: LUID
    ExpirationTime*: LARGE_INTEGER
    TokenType*: TOKEN_TYPE
    ImpersonationLevel*: SECURITY_IMPERSONATION_LEVEL
    DynamicCharged*: DWORD
    DynamicAvailable*: DWORD
    GroupCount*: DWORD
    PrivilegeCount*: DWORD
    ModifiedId*: LUID
  PTOKEN_STATISTICS* = ptr TOKEN_STATISTICS
  TOKEN_USER* {.final, pure.} = object
    User*: SID_AND_ATTRIBUTES
  PTOKEN_USER* = ptr TOKEN_USER
  SECURITY_INFORMATION* = DWORD
  PSECURITY_INFORMATION* = ptr SECURITY_INFORMATION
  SECURITY_DESCRIPTOR_CONTROL* = WORD
  PSECURITY_DESCRIPTOR_CONTROL* = ptr SECURITY_DESCRIPTOR_CONTROL
  SECURITY_DESCRIPTOR* {.final, pure.} = object
    Revision*: BYTE
    Sbz1*: BYTE
    Control*: SECURITY_DESCRIPTOR_CONTROL
    Owner*: PSID
    Group*: PSID
    Sacl*: PACL
    Dacl*: PACL
  PSECURITY_DESCRIPTOR* = ptr SECURITY_DESCRIPTOR
  PISECURITY_DESCRIPTOR* = ptr SECURITY_DESCRIPTOR
  TOKEN_INFORMATION_CLASS* {.pure.} = enum
    TokenUser = 1
    TokenGroups
    TokenPrivileges
    TokenOwner
    TokenPrimaryGroup
    TokenDefaultDacl
    TokenSource
    TokenType
    TokenImpersonationLevel
    TokenStatistics
    TokenRestrictedSids
    TokenSessionId
    TokenGroupsAndPrivileges
    TokenSessionReference
    TokenSandBoxInert
    TokenAuditPolicy
    TokenOrigin
  SID_NAME_USE* = int32
  PSID_NAME_USE* = ptr SID_NAME_USE
  QUOTA_LIMITS* {.final, pure.} = object
    PagedPoolLimit*: SIZE_T
    NonPagedPoolLimit*: SIZE_T
    MinimumWorkingSetSize*: SIZE_T
    MaximumWorkingSetSize*: SIZE_T
    PagefileLimit*: SIZE_T
    TimeLimit*: LARGE_INTEGER
  PQUOTA_LIMITS* = ptr QUOTA_LIMITS
  IO_COUNTERS* {.final, pure.} = object
    ReadOperationCount*: ULONGLONG
    WriteOperationCount*: ULONGLONG
    OtherOperationCount*: ULONGLONG
    ReadTransferCount*: ULONGLONG
    WriteTransferCount*: ULONGLONG
    OtherTransferCount*: ULONGLONG
  PIO_COUNTERS* = ptr IO_COUNTERS
  FILE_NOTIFY_INFORMATION* {.final, pure.} = object
    NextEntryOffset*: DWORD
    Action*: DWORD
    FileNameLength*: DWORD
    FileName*: array[1, WCHAR]
  PFILE_NOTIFY_INFORMATION* = ptr FILE_NOTIFY_INFORMATION
  TAPE_ERASE* {.final, pure.} = object
    Type*: DWORD
    Immediate*: BOOLEAN
  PTAPE_ERASE* = ptr TAPE_ERASE
  TAPE_GET_DRIVE_PARAMETERS* {.final, pure.} = object
    ECC*: BOOLEAN
    Compression*: BOOLEAN
    DataPadding*: BOOLEAN
    ReportSetmarks*: BOOLEAN
    DefaultBlockSize*: DWORD
    MaximumBlockSize*: DWORD
    MinimumBlockSize*: DWORD
    MaximumPartitionCount*: DWORD
    FeaturesLow*: DWORD
    FeaturesHigh*: DWORD
    EOTWarningZoneSize*: DWORD
  PTAPE_GET_DRIVE_PARAMETERS* = ptr TAPE_GET_DRIVE_PARAMETERS
  TAPE_GET_MEDIA_PARAMETERS* {.final, pure.} = object
    Capacity*: LARGE_INTEGER
    Remaining*: LARGE_INTEGER
    BlockSize*: DWORD
    PartitionCount*: DWORD
    WriteProtected*: BOOLEAN
  PTAPE_GET_MEDIA_PARAMETERS* = ptr TAPE_GET_MEDIA_PARAMETERS
  TAPE_GET_POSITION* {.final, pure.} = object
    Type*: ULONG
    Partition*: ULONG
    OffsetLow*: ULONG
    OffsetHigh*: ULONG
  PTAPE_GET_POSITION* = ptr TAPE_GET_POSITION
  TAPE_PREPARE* {.final, pure.} = object
    Operation*: DWORD
    Immediate*: BOOLEAN
  PTAPE_PREPARE* = ptr TAPE_PREPARE
  TAPE_SET_DRIVE_PARAMETERS* {.final, pure.} = object
    ECC*: BOOLEAN
    Compression*: BOOLEAN
    DataPadding*: BOOLEAN
    ReportSetmarks*: BOOLEAN
    EOTWarningZoneSize*: ULONG
  PTAPE_SET_DRIVE_PARAMETERS* = ptr TAPE_SET_DRIVE_PARAMETERS
  TAPE_SET_MEDIA_PARAMETERS* {.final, pure.} = object
    BlockSize*: ULONG
  PTAPE_SET_MEDIA_PARAMETERS* = ptr TAPE_SET_MEDIA_PARAMETERS
  TAPE_SET_POSITION* {.final, pure.} = object
    Method*: DWORD
    Partition*: DWORD
    Offset*: LARGE_INTEGER
    Immediate*: BOOLEAN
  PTAPE_SET_POSITION* = ptr TAPE_SET_POSITION
  TAPE_WRITE_MARKS* {.final, pure.} = object
    Type*: DWORD
    Count*: DWORD
    Immediate*: BOOLEAN
  PTAPE_WRITE_MARKS* = ptr TAPE_WRITE_MARKS
  TAPE_CREATE_PARTITION* {.final, pure.} = object
    Method*: DWORD
    Count*: DWORD
    Size*: DWORD
  PTAPE_CREATE_PARTITION* = ptr TAPE_CREATE_PARTITION
  MEMORY_BASIC_INFORMATION* {.final, pure.} = object
    BaseAddress*: PVOID
    AllocationBase*: PVOID
    AllocationProtect*: DWORD
    RegionSize*: DWORD
    State*: DWORD
    Protect*: DWORD
    Type*: DWORD
  PMEMORY_BASIC_INFORMATION* = ptr MEMORY_BASIC_INFORMATION
  MESSAGE_RESOURCE_ENTRY* {.final, pure.} = object
    Length*: WORD
    Flags*: WORD
    Text*: array[1, BYTE]
  PMESSAGE_RESOURCE_ENTRY* = ptr MESSAGE_RESOURCE_ENTRY
  MESSAGE_RESOURCE_BLOCK* {.final, pure.} = object
    LowId*: DWORD
    HighId*: DWORD
    OffsetToEntries*: DWORD
  PMESSAGE_RESOURCE_BLOCK* = ptr MESSAGE_RESOURCE_BLOCK
  MESSAGE_RESOURCE_DATA* {.final, pure.} = object
    NumberOfBlocks*: DWORD
    Blocks*: array[1, MESSAGE_RESOURCE_BLOCK]
  PMESSAGE_RESOURCE_DATA* = ptr MESSAGE_RESOURCE_DATA
  LIST_ENTRY* {.final, pure.} = object
    Flink*: ptr LIST_ENTRY
    Blink*: ptr LIST_ENTRY
  PLIST_ENTRY* = ptr LIST_ENTRY
  SINGLE_LIST_ENTRY* {.final, pure.} = object
    Next*: ptr SINGLE_LIST_ENTRY
  SLIST_ENTRY* = SINGLE_LIST_ENTRY
  PSINGLE_LIST_ENTRY* = ptr SINGLE_LIST_ENTRY
  PSLIST_ENTRY* = ptr SINGLE_LIST_ENTRY
  SLIST_HEADER_STRUCT1* {.final, pure.} = object
    Next*: SLIST_ENTRY
    Depth*: WORD
    Sequence*: WORD
  SLIST_HEADER* {.final, union, pure.} = object
    Alignment*: ULONGLONG
    s1*: SLIST_HEADER_STRUCT1
  PSLIST_HEADER* = ptr SLIST_HEADER
  RTL_CRITICAL_SECTION_DEBUG* {.final, pure.} = object
    Type*: WORD
    CreatorBackTraceIndex*: WORD
    CriticalSection*: ptr RTL_CRITICAL_SECTION
    ProcessLocksList*: LIST_ENTRY
    EntryCount*: DWORD
    ContentionCount*: DWORD
    Spare*: array[2, DWORD]
  PRTL_CRITICAL_SECTION_DEBUG* = ptr RTL_CRITICAL_SECTION_DEBUG
  RTL_CRITICAL_SECTION* {.final, pure.} = object
    DebugInfo*: PRTL_CRITICAL_SECTION_DEBUG
    LockCount*: LONG
    RecursionCount*: LONG
    OwningThread*: HANDLE
    LockSemaphore*: HANDLE
    Reserved*: DWORD
  PRTL_CRITICAL_SECTION* = ptr RTL_CRITICAL_SECTION
  EVENTLOGRECORD* {.final, pure.} = object
    Length*: DWORD
    Reserved*: DWORD
    RecordNumber*: DWORD
    TimeGenerated*: DWORD
    TimeWritten*: DWORD
    EventID*: DWORD
    EventType*: WORD
    NumStrings*: WORD
    EventCategory*: WORD
    ReservedFlags*: WORD
    ClosingRecordNumber*: DWORD
    StringOffset*: DWORD
    UserSidLength*: DWORD
    UserSidOffset*: DWORD
    DataLength*: DWORD
    DataOffset*: DWORD
  PEVENTLOGRECORD* = ptr EVENTLOGRECORD
  OSVERSIONINFOA* {.final, pure.} = object
    dwOSVersionInfoSize*: DWORD
    dwMajorVersion*: DWORD
    dwMinorVersion*: DWORD
    dwBuildNumber*: DWORD
    dwPlatformId*: DWORD
    szCSDVersion*: array[128, CHAR]
  POSVERSIONINFOA* = ptr OSVERSIONINFOA
  LPOSVERSIONINFOA* = ptr OSVERSIONINFOA
  OSVERSIONINFOW* {.final, pure.} = object
    dwOSVersionInfoSize*: DWORD
    dwMajorVersion*: DWORD
    dwMinorVersion*: DWORD
    dwBuildNumber*: DWORD
    dwPlatformId*: DWORD
    szCSDVersion*: array[128, WCHAR]
  POSVERSIONINFOW* = ptr OSVERSIONINFOW
  LPOSVERSIONINFOW* = ptr OSVERSIONINFOW
  OSVERSIONINFOEXA* {.final, pure.} = object
    dwOSVersionInfoSize*: DWORD
    dwMajorVersion*: DWORD
    dwMinorVersion*: DWORD
    dwBuildNumber*: DWORD
    dwPlatformId*: DWORD
    szCSDVersion*: array[128, CHAR]
    wServicePackMajor*: WORD
    wServicePackMinor*: WORD
    wSuiteMask*: WORD
    wProductType*: BYTE
    wReserved*: BYTE
  POSVERSIONINFOEXA* = ptr OSVERSIONINFOEXA
  LPOSVERSIONINFOEXA* = ptr OSVERSIONINFOEXA
  OSVERSIONINFOEXW* {.final, pure.} = object
    dwOSVersionInfoSize*: DWORD
    dwMajorVersion*: DWORD
    dwMinorVersion*: DWORD
    dwBuildNumber*: DWORD
    dwPlatformId*: DWORD
    szCSDVersion*: array[128, WCHAR]
    wServicePackMajor*: WORD
    wServicePackMinor*: WORD
    wSuiteMask*: WORD
    wProductType*: BYTE
    wReserved*: BYTE
  POSVERSIONINFOEXW* = ptr OSVERSIONINFOEXW
  LPOSVERSIONINFOEXW* = ptr OSVERSIONINFOEXW
  IMAGE_VXD_HEADER* {.final, pure.} = object
    e32_magic*: WORD
    e32_border*: BYTE
    e32_worder*: BYTE
    e32_level*: DWORD
    e32_cpu*: WORD
    e32_os*: WORD
    e32_ver*: DWORD
    e32_mflags*: DWORD
    e32_mpages*: DWORD
    e32_startobj*: DWORD
    e32_eip*: DWORD
    e32_stackobj*: DWORD
    e32_esp*: DWORD
    e32_pagesize*: DWORD
    e32_lastpagesize*: DWORD
    e32_fixupsize*: DWORD
    e32_fixupsum*: DWORD
    e32_ldrsize*: DWORD
    e32_ldrsum*: DWORD
    e32_objtab*: DWORD
    e32_objcnt*: DWORD
    e32_objmap*: DWORD
    e32_itermap*: DWORD
    e32_rsrctab*: DWORD
    e32_rsrccnt*: DWORD
    e32_restab*: DWORD
    e32_enttab*: DWORD
    e32_dirtab*: DWORD
    e32_dircnt*: DWORD
    e32_fpagetab*: DWORD
    e32_frectab*: DWORD
    e32_impmod*: DWORD
    e32_impmodcnt*: DWORD
    e32_impproc*: DWORD
    e32_pagesum*: DWORD
    e32_datapage*: DWORD
    e32_preload*: DWORD
    e32_nrestab*: DWORD
    e32_cbnrestab*: DWORD
    e32_nressum*: DWORD
    e32_autodata*: DWORD
    e32_debuginfo*: DWORD
    e32_debuglen*: DWORD
    e32_instpreload*: DWORD
    e32_instdemand*: DWORD
    e32_heapsize*: DWORD
    e32_res3*: array[12, BYTE]
    e32_winresoff*: DWORD
    e32_winreslen*: DWORD
    e32_devid*: WORD
    e32_ddkver*: WORD
  PIMAGE_VXD_HEADER* = ptr IMAGE_VXD_HEADER
  IMAGE_FILE_HEADER* {.final, pure.} = object
    Machine*: WORD
    NumberOfSections*: WORD
    TimeDateStamp*: DWORD
    PointerToSymbolTable*: DWORD
    NumberOfSymbols*: DWORD
    SizeOfOptionalHeader*: WORD
    Characteristics*: WORD
  PIMAGE_FILE_HEADER* = ptr IMAGE_FILE_HEADER
  IMAGE_DATA_DIRECTORY* {.final, pure.} = object
    VirtualAddress*: DWORD
    Size*: DWORD
  PIMAGE_DATA_DIRECTORY* = ptr IMAGE_DATA_DIRECTORY
  IMAGE_OPTIONAL_HEADER32* {.final, pure.} = object
    Magic*: WORD
    MajorLinkerVersion*: BYTE
    MinorLinkerVersion*: BYTE
    SizeOfCode*: DWORD
    SizeOfInitializedData*: DWORD
    SizeOfUninitializedData*: DWORD
    AddressOfEntryPoint*: DWORD
    BaseOfCode*: DWORD
    BaseOfData*: DWORD
    ImageBase*: DWORD
    SectionAlignment*: DWORD
    FileAlignment*: DWORD
    MajorOperatingSystemVersion*: WORD
    MinorOperatingSystemVersion*: WORD
    MajorImageVersion*: WORD
    MinorImageVersion*: WORD
    MajorSubsystemVersion*: WORD
    MinorSubsystemVersion*: WORD
    Win32VersionValue*: DWORD
    SizeOfImage*: DWORD
    SizeOfHeaders*: DWORD
    CheckSum*: DWORD
    Subsystem*: WORD
    DllCharacteristics*: WORD
    SizeOfStackReserve*: DWORD
    SizeOfStackCommit*: DWORD
    SizeOfHeapReserve*: DWORD
    SizeOfHeapCommit*: DWORD
    LoaderFlags*: DWORD
    NumberOfRvaAndSizes*: DWORD
    DataDirectory*: array[IMAGE_NUMBEROF_DIRECTORY_ENTRIES, IMAGE_DATA_DIRECTORY]
  PIMAGE_OPTIONAL_HEADER32* = ptr IMAGE_OPTIONAL_HEADER32
  IMAGE_OPTIONAL_HEADER64* {.final, pure.} = object
    Magic*: WORD
    MajorLinkerVersion*: BYTE
    MinorLinkerVersion*: BYTE
    SizeOfCode*: DWORD
    SizeOfInitializedData*: DWORD
    SizeOfUninitializedData*: DWORD
    AddressOfEntryPoint*: DWORD
    BaseOfCode*: DWORD
    ImageBase*: ULONGLONG
    SectionAlignment*: DWORD
    FileAlignment*: DWORD
    MajorOperatingSystemVersion*: WORD
    MinorOperatingSystemVersion*: WORD
    MajorImageVersion*: WORD
    MinorImageVersion*: WORD
    MajorSubsystemVersion*: WORD
    MinorSubsystemVersion*: WORD
    Win32VersionValue*: DWORD
    SizeOfImage*: DWORD
    SizeOfHeaders*: DWORD
    CheckSum*: DWORD
    Subsystem*: WORD
    DllCharacteristics*: WORD
    SizeOfStackReserve*: ULONGLONG
    SizeOfStackCommit*: ULONGLONG
    SizeOfHeapReserve*: ULONGLONG
    SizeOfHeapCommit*: ULONGLONG
    LoaderFlags*: DWORD
    NumberOfRvaAndSizes*: DWORD
    DataDirectory*: array[IMAGE_NUMBEROF_DIRECTORY_ENTRIES, IMAGE_DATA_DIRECTORY]
  PIMAGE_OPTIONAL_HEADER64* = ptr IMAGE_OPTIONAL_HEADER64
  IMAGE_ROM_OPTIONAL_HEADER* {.final, pure.} = object
    Magic*: WORD
    MajorLinkerVersion*: BYTE
    MinorLinkerVersion*: BYTE
    SizeOfCode*: DWORD
    SizeOfInitializedData*: DWORD
    SizeOfUninitializedData*: DWORD
    AddressOfEntryPoint*: DWORD
    BaseOfCode*: DWORD
    BaseOfData*: DWORD
    BaseOfBss*: DWORD
    GprMask*: DWORD
    CprMask*: array[4, DWORD]
    GpValue*: DWORD
  PIMAGE_ROM_OPTIONAL_HEADER* = ptr IMAGE_ROM_OPTIONAL_HEADER
  IMAGE_DOS_HEADER* {.final, pure.} = object
    e_magic*: WORD
    e_cblp*: WORD
    e_cp*: WORD
    e_crlc*: WORD
    e_cparhdr*: WORD
    e_minalloc*: WORD
    e_maxalloc*: WORD
    e_ss*: WORD
    e_sp*: WORD
    e_csum*: WORD
    e_ip*: WORD
    e_cs*: WORD
    e_lfarlc*: WORD
    e_ovno*: WORD
    e_res*: array[4, WORD]
    e_oemid*: WORD
    e_oeminfo*: WORD
    e_res2*: array[10, WORD]
    e_lfanew*: LONG
  PIMAGE_DOS_HEADER* = ptr IMAGE_DOS_HEADER
  IMAGE_OS2_HEADER* {.final, pure.} = object
    ne_magic*: WORD
    ne_ver*: CHAR
    ne_rev*: CHAR
    ne_enttab*: WORD
    ne_cbenttab*: WORD
    ne_crc*: LONG
    ne_flags*: WORD
    ne_autodata*: WORD
    ne_heap*: WORD
    ne_stack*: WORD
    ne_csip*: LONG
    ne_sssp*: LONG
    ne_cseg*: WORD
    ne_cmod*: WORD
    ne_cbnrestab*: WORD
    ne_segtab*: WORD
    ne_rsrctab*: WORD
    ne_restab*: WORD
    ne_modtab*: WORD
    ne_imptab*: WORD
    ne_nrestab*: LONG
    ne_cmovent*: WORD
    ne_align*: WORD
    ne_cres*: WORD
    ne_exetyp*: BYTE
    ne_flagsothers*: BYTE
    ne_pretthunks*: WORD
    ne_psegrefbytes*: WORD
    ne_swaparea*: WORD
    ne_expver*: WORD
  PIMAGE_OS2_HEADER* = ptr IMAGE_OS2_HEADER
  IMAGE_NT_HEADERS32* {.final, pure.} = object
    Signature*: DWORD
    FileHeader*: IMAGE_FILE_HEADER
    OptionalHeader*: IMAGE_OPTIONAL_HEADER32
  PIMAGE_NT_HEADERS32* = ptr IMAGE_NT_HEADERS32
  IMAGE_NT_HEADERS64* {.final, pure.} = object
    Signature*: DWORD
    FileHeader*: IMAGE_FILE_HEADER
    OptionalHeader*: IMAGE_OPTIONAL_HEADER64
  PIMAGE_NT_HEADERS64* = ptr IMAGE_NT_HEADERS64
  IMAGE_ROM_HEADERS* {.final, pure.} = object
    FileHeader*: IMAGE_FILE_HEADER
    OptionalHeader*: IMAGE_ROM_OPTIONAL_HEADER
  PIMAGE_ROM_HEADERS* = ptr IMAGE_ROM_HEADERS
  IMAGE_SECTION_HEADER_Misc* {.final, union, pure.} = object
    PhysicalAddress*: DWORD
    VirtualSize*: DWORD
  IMAGE_SECTION_HEADER* {.final, pure.} = object
    Name*: array[IMAGE_SIZEOF_SHORT_NAME, BYTE]
    Misc*: IMAGE_SECTION_HEADER_Misc
    VirtualAddress*: DWORD
    SizeOfRawData*: DWORD
    PointerToRawData*: DWORD
    PointerToRelocations*: DWORD
    PointerToLinenumbers*: DWORD
    NumberOfRelocations*: WORD
    NumberOfLinenumbers*: WORD
    Characteristics*: DWORD
  PIMAGE_SECTION_HEADER* = ptr IMAGE_SECTION_HEADER
  IMAGE_SYMBOL_N_Name* {.final, pure.} = object
    Short*: DWORD
    Long*: DWORD
  IMAGE_SYMBOL_N* {.final, union, pure.} = object
    ShortName*: array[8, BYTE]
    _*: IMAGE_SYMBOL_N_Name
    LongName*: array[2, PBYTE]
  IMAGE_SYMBOL* {.final, pure.} = object
    N*: IMAGE_SYMBOL_N
    Value*: DWORD
    SectionNumber*: SHORT
    Type*: WORD
    StorageClass*: BYTE
    NumberOfAuxSymbols*: BYTE
  PIMAGE_SYMBOL* = ptr IMAGE_SYMBOL
  IMAGE_AUX_SYMBOL_Section* {.final, pure.} = object
    Length*: DWORD
    NumberOfRelocations*: WORD
    NumberOfLinenumbers*: WORD
    CheckSum*: DWORD
    Number*: SHORT
    Selection*: BYTE
  IMAGE_AUX_SYMBOL_File* {.final, pure.} = object
    Name*: array[IMAGE_SIZEOF_SYMBOL, BYTE]
  IMAGE_AUX_SYMBOL_Sym_FcnAry_Array* {.final, pure.} = object
    Dimension*: array[4, WORD]
  IMAGE_AUX_SYMBOL_Sym_FcnAry_Function* {.final, pure.} = object
    PointerToLinenumber*: DWORD
    PointerToNextFunction*: DWORD
  IMAGE_AUX_SYMBOL_Sym_FcnAry* {.final, union, pure.} = object
    Function*: IMAGE_AUX_SYMBOL_Sym_FcnAry_Function
    Array*: IMAGE_AUX_SYMBOL_Sym_FcnAry_Array
  IMAGE_AUX_SYMBOL_Sym_Misc_LnSz* {.final, pure.} = object
    Linenumber*: WORD
    Size*: WORD
  IMAGE_AUX_SYMBOL_Sym_Misc* {.final, union, pure.} = object
    LnSz*: IMAGE_AUX_SYMBOL_Sym_Misc_LnSz
    TotalSize*: DWORD
  IMAGE_AUX_SYMBOL_Sym* {.final, pure.} = object
    TagIndex*: DWORD
    Misc*: IMAGE_AUX_SYMBOL_Sym_Misc
    FcnAry*: IMAGE_AUX_SYMBOL_Sym_FcnAry
    TvIndex*: WORD
  IMAGE_AUX_SYMBOL* {.final, union, pure.} = object
    Sym*: IMAGE_AUX_SYMBOL_Sym
    File*: IMAGE_AUX_SYMBOL_File
    Section*: IMAGE_AUX_SYMBOL_Section
  PIMAGE_AUX_SYMBOL* = ptr IMAGE_AUX_SYMBOL
  IMAGE_COFF_SYMBOLS_HEADER* {.final, pure.} = object
    NumberOfSymbols*: DWORD
    LvaToFirstSymbol*: DWORD
    NumberOfLinenumbers*: DWORD
    LvaToFirstLinenumber*: DWORD
    RvaToFirstByteOfCode*: DWORD
    RvaToLastByteOfCode*: DWORD
    RvaToFirstByteOfData*: DWORD
    RvaToLastByteOfData*: DWORD
  PIMAGE_COFF_SYMBOLS_HEADER* = ptr IMAGE_COFF_SYMBOLS_HEADER
  IMAGE_RELOCATION_UNION1* {.final, union, pure.} = object
    VirtualAddress*: DWORD
    RelocCount*: DWORD
  IMAGE_RELOCATION* {.final, pure.} = object
    u1*: IMAGE_RELOCATION_UNION1
    SymbolTableIndex*: DWORD
    Type*: WORD
  PIMAGE_RELOCATION* = ptr IMAGE_RELOCATION
  IMAGE_BASE_RELOCATION* {.final, pure.} = object
    VirtualAddress*: DWORD
    SizeOfBlock*: DWORD
  PIMAGE_BASE_RELOCATION* = ptr IMAGE_BASE_RELOCATION
  IMAGE_LINENUMBER_Type* {.final, union, pure.} = object
    SymbolTableIndex*: DWORD
    VirtualAddress*: DWORD
  IMAGE_LINENUMBER* {.final, pure.} = object
    Type*: IMAGE_LINENUMBER_Type
    Linenumber*: WORD
  PIMAGE_LINENUMBER* = ptr IMAGE_LINENUMBER
  IMAGE_ARCHIVE_MEMBER_HEADER* {.final, pure.} = object
    Name*: array[16, BYTE]
    Date*: array[12, BYTE]
    UserID*: array[6, BYTE]
    GroupID*: array[6, BYTE]
    Mode*: array[8, BYTE]
    Size*: array[10, BYTE]
    EndHeader*: array[2, BYTE]
  PIMAGE_ARCHIVE_MEMBER_HEADER* = ptr IMAGE_ARCHIVE_MEMBER_HEADER
  IMAGE_EXPORT_DIRECTORY* {.final, pure.} = object
    Characteristics*: DWORD
    TimeDateStamp*: DWORD
    MajorVersion*: WORD
    MinorVersion*: WORD
    Name*: DWORD
    Base*: DWORD
    NumberOfFunctions*: DWORD
    NumberOfNames*: DWORD
    AddressOfFunctions*: DWORD
    AddressOfNames*: DWORD
    AddressOfNameOrdinals*: DWORD
  PIMAGE_EXPORT_DIRECTORY* = ptr IMAGE_EXPORT_DIRECTORY
  IMAGE_IMPORT_BY_NAME* {.final, pure.} = object
    Hint*: WORD
    Name*: array[1, BYTE]
  PIMAGE_IMPORT_BY_NAME* = ptr IMAGE_IMPORT_BY_NAME
  IMAGE_THUNK_DATA32_u1* {.final, union, pure.} = object
    ForwarderString*: DWORD
    Function*: DWORD
    Ordinal*: DWORD
    AddressOfData*: DWORD
  IMAGE_THUNK_DATA32* {.final, pure.} = object
    u1*: IMAGE_THUNK_DATA32_u1
  PIMAGE_THUNK_DATA32* = ptr IMAGE_THUNK_DATA32
  IMAGE_THUNK_DATA64_u1* {.final, union, pure.} = object
    ForwarderString*: ULONGLONG
    Function*: ULONGLONG
    Ordinal*: ULONGLONG
    AddressOfData*: ULONGLONG
  IMAGE_THUNK_DATA64* {.final, pure.} = object
    u1*: IMAGE_THUNK_DATA64_u1
  PIMAGE_THUNK_DATA64* = ptr IMAGE_THUNK_DATA64
  IMAGE_IMPORT_DESCRIPTOR_UNION1* {.final, union, pure.} = object
    Characteristics*: DWORD
    OriginalFirstThunk*: DWORD
  IMAGE_IMPORT_DESCRIPTOR* {.final, pure.} = object
    u1*: IMAGE_IMPORT_DESCRIPTOR_UNION1
    TimeDateStamp*: DWORD
    ForwarderChain*: DWORD
    Name*: DWORD
    FirstThunk*: DWORD
  PIMAGE_IMPORT_DESCRIPTOR* = ptr IMAGE_IMPORT_DESCRIPTOR
  IMAGE_BOUND_IMPORT_DESCRIPTOR* {.final, pure.} = object
    TimeDateStamp*: DWORD
    OffsetModuleName*: WORD
    NumberOfModuleForwarderRefs*: WORD
  PIMAGE_BOUND_IMPORT_DESCRIPTOR* = ptr IMAGE_BOUND_IMPORT_DESCRIPTOR
  IMAGE_BOUND_FORWARDER_REF* {.final, pure.} = object
    TimeDateStamp*: DWORD
    OffsetModuleName*: WORD
    Reserved*: WORD
  PIMAGE_BOUND_FORWARDER_REF* = ptr IMAGE_BOUND_FORWARDER_REF
  IMAGE_TLS_DIRECTORY32* {.final, pure.} = object
    StartAddressOfRawData*: DWORD
    EndAddressOfRawData*: DWORD
    AddressOfIndex*: DWORD
    AddressOfCallBacks*: DWORD
    SizeOfZeroFill*: DWORD
    Characteristics*: DWORD
  PIMAGE_TLS_DIRECTORY32* = ptr IMAGE_TLS_DIRECTORY32
  IMAGE_TLS_DIRECTORY64* {.final, pure.} = object
    StartAddressOfRawData*: ULONGLONG
    EndAddressOfRawData*: ULONGLONG
    AddressOfIndex*: ULONGLONG
    AddressOfCallBacks*: ULONGLONG
    SizeOfZeroFill*: DWORD
    Characteristics*: DWORD
  PIMAGE_TLS_DIRECTORY64* = ptr IMAGE_TLS_DIRECTORY64
  IMAGE_RESOURCE_DIRECTORY* {.final, pure.} = object
    Characteristics*: DWORD
    TimeDateStamp*: DWORD
    MajorVersion*: WORD
    MinorVersion*: WORD
    NumberOfNamedEntries*: WORD
    NumberOfIdEntries*: WORD
  PIMAGE_RESOURCE_DIRECTORY* = ptr IMAGE_RESOURCE_DIRECTORY
  IMAGE_RESOURCE_DIRECTORY_STRING* {.final, pure.} = object
    Length*: WORD
    NameString*: array[1, CHAR]
  PIMAGE_RESOURCE_DIRECTORY_STRING* = ptr IMAGE_RESOURCE_DIRECTORY_STRING
  IMAGE_RESOURCE_DIR_STRING_U* {.final, pure.} = object
    Length*: WORD
    NameString*: array[1, WCHAR]
  PIMAGE_RESOURCE_DIR_STRING_U* = ptr IMAGE_RESOURCE_DIR_STRING_U
  IMAGE_RESOURCE_DATA_ENTRY* {.final, pure.} = object
    OffsetToData*: DWORD
    Size*: DWORD
    CodePage*: DWORD
    Reserved*: DWORD
  PIMAGE_RESOURCE_DATA_ENTRY* = ptr IMAGE_RESOURCE_DATA_ENTRY
  IMAGE_LOAD_CONFIG_DIRECTORY* {.final, pure.} = object
    Characteristics*: DWORD
    TimeDateStamp*: DWORD
    MajorVersion*: WORD
    MinorVersion*: WORD
    GlobalFlagsClear*: DWORD
    GlobalFlagsSet*: DWORD
    CriticalSectionDefaultTimeout*: DWORD
    DeCommitFreeBlockThreshold*: DWORD
    DeCommitTotalFreeThreshold*: DWORD
    LockPrefixTable*: PVOID
    MaximumAllocationSize*: DWORD
    VirtualMemoryThreshold*: DWORD
    ProcessHeapFlags*: DWORD
    Reserved*: array[4, DWORD]
  PIMAGE_LOAD_CONFIG_DIRECTORY* = ptr IMAGE_LOAD_CONFIG_DIRECTORY
  IMAGE_LOAD_CONFIG_DIRECTORY64* {.final, pure.} = object
    Characteristics*: DWORD
    TimeDateStamp*: DWORD
    MajorVersion*: WORD
    MinorVersion*: WORD
    GlobalFlagsClear*: DWORD
    GlobalFlagsSet*: DWORD
    CriticalSectionDefaultTimeout*: DWORD
    DeCommitFreeBlockThreshold*: ULONGLONG
    DeCommitTotalFreeThreshold*: ULONGLONG
    LockPrefixTable*: ULONGLONG
    MaximumAllocationSize*: ULONGLONG
    VirtualMemoryThreshold*: ULONGLONG
    ProcessAffinityMask*: ULONGLONG
    ProcessHeapFlags*: DWORD
    CSDFlags*: WORD
    Reserved1*: WORD
    EditList*: ULONGLONG
    Reserved*: array[2, DWORD]
  PIMAGE_LOAD_CONFIG_DIRECTORY64* = ptr IMAGE_LOAD_CONFIG_DIRECTORY64
  IMAGE_RUNTIME_FUNCTION_ENTRY* {.final, pure.} = object
    BeginAddress*: DWORD
    EndAddress*: DWORD
    ExceptionHandler*: PVOID
    HandlerData*: PVOID
    PrologEndAddress*: DWORD
  PIMAGE_RUNTIME_FUNCTION_ENTRY* = ptr IMAGE_RUNTIME_FUNCTION_ENTRY
  IMAGE_DEBUG_DIRECTORY* {.final, pure.} = object
    Characteristics*: DWORD
    TimeDateStamp*: DWORD
    MajorVersion*: WORD
    MinorVersion*: WORD
    Type*: DWORD
    SizeOfData*: DWORD
    AddressOfRawData*: DWORD
    PointerToRawData*: DWORD
  PIMAGE_DEBUG_DIRECTORY* = ptr IMAGE_DEBUG_DIRECTORY
  IMAGE_DEBUG_MISC* {.final, pure.} = object
    DataType*: DWORD
    Length*: DWORD
    Unicode*: BOOLEAN
    Reserved*: array[3, BYTE]
    Data*: array[1, BYTE]
  PIMAGE_DEBUG_MISC* = ptr IMAGE_DEBUG_MISC
  IMAGE_FUNCTION_ENTRY* {.final, pure.} = object
    StartingAddress*: DWORD
    EndingAddress*: DWORD
    EndOfPrologue*: DWORD
  PIMAGE_FUNCTION_ENTRY* = ptr IMAGE_FUNCTION_ENTRY
  IMAGE_FUNCTION_ENTRY64_UNION1* {.final, union, pure.} = object
    EndOfPrologue*: ULONGLONG
    UnwindInfoAddress*: ULONGLONG
  IMAGE_FUNCTION_ENTRY64* {.final, pure.} = object
    StartingAddress*: ULONGLONG
    EndingAddress*: ULONGLONG
    u1*: IMAGE_FUNCTION_ENTRY64_UNION1
  PIMAGE_FUNCTION_ENTRY64* = ptr IMAGE_FUNCTION_ENTRY64
  IMAGE_SEPARATE_DEBUG_HEADER* {.final, pure.} = object
    Signature*: WORD
    Flags*: WORD
    Machine*: WORD
    Characteristics*: WORD
    TimeDateStamp*: DWORD
    CheckSum*: DWORD
    ImageBase*: DWORD
    SizeOfImage*: DWORD
    NumberOfSections*: DWORD
    ExportedNamesSize*: DWORD
    DebugDirectorySize*: DWORD
    SectionAlignment*: DWORD
    Reserved*: array[2, DWORD]
  PIMAGE_SEPARATE_DEBUG_HEADER* = ptr IMAGE_SEPARATE_DEBUG_HEADER
  SERVICE_NODE_TYPE* = int32
  SERVICE_LOAD_TYPE* = int32
  SERVICE_ERROR_TYPE* = int32
  CM_ERROR_CONTROL_TYPE* = SERVICE_ERROR_TYPE
  EXCEPTION_REGISTRATION_RECORD* = void
  NT_TIB_UNION1* {.final, union, pure.} = object
    FiberData*: PVOID
    Version*: DWORD
  NT_TIB* {.final, pure.} = object
    ExceptionList*: ptr EXCEPTION_REGISTRATION_RECORD
    StackBase*: PVOID
    StackLimit*: PVOID
    SubSystemTib*: PVOID
    u1*: NT_TIB_UNION1
    ArbitraryUserPointer*: PVOID
    Self*: ptr NT_TIB
  PNT_TIB* = ptr NT_TIB
  REPARSE_DATA_BUFFER_UNION1_MountPointReparseBuffer* {.final, pure.} = object
    SubstituteNameOffset*: WORD
    SubstituteNameLength*: WORD
    PrintNameOffset*: WORD
    PrintNameLength*: WORD
    PathBuffer*: array[1, WCHAR]
  REPARSE_DATA_BUFFER_UNION1_SymbolicLinkReparseBuffer* {.final, pure.} = object
    SubstituteNameOffset*: WORD
    SubstituteNameLength*: WORD
    PrintNameOffset*: WORD
    PrintNameLength*: WORD
    Flags*: ULONG
    PathBuffer*: array[1, WCHAR]
  REPARSE_DATA_BUFFER_UNION1_GenericReparseBuffer* {.final, pure.} = object
    DataBuffer*: array[1, BYTE]
  REPARSE_DATA_BUFFER_UNION1* {.final, union, pure.} = object
    GenericReparseBuffer*: REPARSE_DATA_BUFFER_UNION1_GenericReparseBuffer
    SymbolicLinkReparseBuffer*: REPARSE_DATA_BUFFER_UNION1_SymbolicLinkReparseBuffer
    MountPointReparseBuffer*: REPARSE_DATA_BUFFER_UNION1_MountPointReparseBuffer
  REPARSE_DATA_BUFFER* {.final, pure.} = object
    ReparseTag*: DWORD
    ReparseDataLength*: WORD
    Reserved*: WORD
    u1*: REPARSE_DATA_BUFFER_UNION1
  PREPARSE_DATA_BUFFER* = ptr REPARSE_DATA_BUFFER
  REPARSE_GUID_DATA_BUFFER_GenericReparseBuffer* {.final, pure.} = object
    DataBuffer*: array[1, BYTE]
  REPARSE_GUID_DATA_BUFFER* {.final, pure.} = object
    ReparseTag*: DWORD
    ReparseDataLength*: WORD
    Reserved*: WORD
    ReparseGuid*: GUID
    GenericReparseBuffer*: REPARSE_GUID_DATA_BUFFER_GenericReparseBuffer
  PREPARSE_GUID_DATA_BUFFER* = ptr REPARSE_GUID_DATA_BUFFER

const
  # REPARSE_DATA_BUFFER_HEADER_SIZE* = REPARSE_DATA_BUFFER.GenericReparseBuffer.offsetof
  # REPARSE_GUID_DATA_BUFFER_HEADER_SIZE* = REPARSE_GUID_DATA_BUFFER.GenericReparseBuffer.offsetof
  MAXIMUM_REPARSE_DATA_BUFFER_SIZE* = 16384

type
  REPARSE_POINT_INFORMATION* {.final, pure.} = object
    ReparseDataLength*: WORD
    UnparsedNameLength*: WORD
  PREPARSE_POINT_INFORMATION* = ptr REPARSE_POINT_INFORMATION
  FILE_SEGMENT_ELEMENT* {.final, union, pure.} = object
    Buffer*: PVOID64
    Alignment*: ULONGLONG
  PFILE_SEGMENT_ELEMENT* = ptr FILE_SEGMENT_ELEMENT

const
  OWNER_SECURITY_INFORMATION* = 0x00000001
  GROUP_SECURITY_INFORMATION* = 0x00000002
  DACL_SECURITY_INFORMATION* = 0x00000004
  SACL_SECURITY_INFORMATION* = 0x00000008
  LABEL_SECURITY_INFORMATION* = 0x00000010
  UNPROTECTED_SACL_SECURITY_INFORMATION* = 0x10000000
  UNPROTECTED_DACL_SECURITY_INFORMATION* = 0x20000000
  PROTECTED_SACL_SECURITY_INFORMATION* = 0x40000000
  PROTECTED_DACL_SECURITY_INFORMATION* = 0x80000000'u32
  JOB_OBJECT_LIMIT_WORKINGSET* = 0x0001
  JOB_OBJECT_LIMIT_PROCESS_TIME* = 0x0002
  JOB_OBJECT_LIMIT_JOB_TIME* = 0x0004
  JOB_OBJECT_LIMIT_ACTIVE_PROCESS* = 0x0008
  JOB_OBJECT_LIMIT_AFFINITY* = 0x0010
  JOB_OBJECT_LIMIT_PRIORITY_CLASS* = 0x0020
  JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME* = 0x0040
  JOB_OBJECT_LIMIT_SCHEDULING_CLASS* = 0x0080
  JOB_OBJECT_LIMIT_PROCESS_MEMORY* = 0x0100
  JOB_OBJECT_LIMIT_JOB_MEMORY* = 0x0200
  JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION* = 0x0400
  JOB_OBJECT_BREAKAWAY_OK* = 0x0800
  JOB_OBJECT_SILENT_BREAKAWAY* = 0x1000
  JOB_OBJECT_UILIMIT_HANDLES* = 0x0001
  JOB_OBJECT_UILIMIT_READCLIPBOARD* = 0x0002
  JOB_OBJECT_UILIMIT_WRITECLIPBOARD* = 0x0004
  JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS* = 0x0008
  JOB_OBJECT_UILIMIT_DISPLAYSETTINGS* = 0x0010
  JOB_OBJECT_UILIMIT_GLOBALATOMS* = 0x0020
  JOB_OBJECT_UILIMIT_DESKTOP* = 0x0040
  JOB_OBJECT_UILIMIT_EXITWINDOWS* = 0x0080
  JOB_OBJECT_SECURITY_NO_ADMIN* = 0x0001
  JOB_OBJECT_SECURITY_RESTRICTED_TOKEN* = 0x0002
  JOB_OBJECT_SECURITY_ONLY_TOKEN* = 0x0004
  JOB_OBJECT_SECURITY_FILTER_TOKENS* = 0x0008
  JOB_OBJECT_TERMINATE_AT_END_OF_JOB* = 0
  JOB_OBJECT_POST_AT_END_OF_JOB* = 1
  JOB_OBJECT_MSG_END_OF_JOB_TIME* = 1
  JOB_OBJECT_MSG_END_OF_PROCESS_TIME* = 2
  JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT* = 3
  JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO* = 4
  JOB_OBJECT_MSG_NEW_PROCESS* = 5
  JOB_OBJECT_MSG_EXIT_PROCESS* = 6
  JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS* = 7
  JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT* = 8
  JOB_OBJECT_MSG_JOB_MEMORY_LIMIT* = 9

type
  JOBOBJECTINFOCLASS* {.pure.} = enum
    JobObjectBasicAccountingInformation = 1
    JobObjectBasicLimitInformation
    JobObjectBasicProcessIdList
    JobObjectBasicUIRestrictions
    JobObjectSecurityLimitInformation
    JobObjectEndOfJobTimeInformation
    JobObjectAssociateCompletionPortInformation
    JobObjectBasicAndIoAccountingInformation
    JobObjectExtendedLimitInformation
    JobObjectJobSetInformation
    MaxJobObjectInfoClass
  JOBOBJECT_BASIC_ACCOUNTING_INFORMATION* {.final, pure.} = object
    TotalUserTime*: LARGE_INTEGER
    TotalKernelTime*: LARGE_INTEGER
    ThisPeriodTotalUserTime*: LARGE_INTEGER
    ThisPeriodTotalKernelTime*: LARGE_INTEGER
    TotalPageFaultCount*: DWORD
    TotalProcesses*: DWORD
    ActiveProcesses*: DWORD
    TotalTerminatedProcesses*: DWORD
  PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION* = ptr JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
  JOBOBJECT_BASIC_LIMIT_INFORMATION* {.final, pure.} = object
    PerProcessUserTimeLimit*: LARGE_INTEGER
    PerJobUserTimeLimit*: LARGE_INTEGER
    LimitFlags*: DWORD
    MinimumWorkingSetSize*: SIZE_T
    MaximumWorkingSetSize*: SIZE_T
    ActiveProcessLimit*: DWORD
    Affinity*: ULONG_PTR
    PriorityClass*: DWORD
    SchedulingClass*: DWORD
  PJOBOBJECT_BASIC_LIMIT_INFORMATION* = ptr JOBOBJECT_BASIC_LIMIT_INFORMATION
  JOBOBJECT_BASIC_PROCESS_ID_LIST* {.final, pure.} = object
    NumberOfAssignedProcesses*: DWORD
    NumberOfProcessIdsInList*: DWORD
    ProcessIdList*: array[1, ULONG_PTR]
  PJOBOBJECT_BASIC_PROCESS_ID_LIST* = ptr JOBOBJECT_BASIC_PROCESS_ID_LIST
  JOBOBJECT_BASIC_UI_RESTRICTIONS* {.final, pure.} = object
    UIRestrictionsClass*: DWORD
  PJOBOBJECT_BASIC_UI_RESTRICTIONS* = ptr JOBOBJECT_BASIC_UI_RESTRICTIONS
  JOBOBJECT_SECURITY_LIMIT_INFORMATION* {.final, pure.} = object
    SecurityLimitFlags*: DWORD
    JobToken*: HANDLE
    SidsToDisable*: PTOKEN_GROUPS
    PrivilegesToDelete*: PTOKEN_PRIVILEGES
    RestrictedSids*: PTOKEN_GROUPS
  PJOBOBJECT_SECURITY_LIMIT_INFORMATION* = ptr JOBOBJECT_SECURITY_LIMIT_INFORMATION
  JOBOBJECT_END_OF_JOB_TIME_INFORMATION* {.final, pure.} = object
    EndOfJobTimeAction*: DWORD
  PJOBOBJECT_END_OF_JOB_TIME_INFORMATION* = ptr JOBOBJECT_END_OF_JOB_TIME_INFORMATION
  JOBOBJECT_ASSOCIATE_COMPLETION_PORT* {.final, pure.} = object
    CompletionKey*: PVOID
    CompletionPort*: HANDLE
  PJOBOBJECT_ASSOCIATE_COMPLETION_PORT* = ptr JOBOBJECT_ASSOCIATE_COMPLETION_PORT
  JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION* {.final, pure.} = object
    BasicInfo*: JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
    IoInfo*: IO_COUNTERS
  PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION* = ptr JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
  JOBOBJECT_EXTENDED_LIMIT_INFORMATION* {.final, pure.} = object
    BasicLimitInformation*: JOBOBJECT_BASIC_LIMIT_INFORMATION
    IoInfo*: IO_COUNTERS
    ProcessMemoryLimit*: SIZE_T
    JobMemoryLimit*: SIZE_T
    PeakProcessMemoryUsed*: SIZE_T
    PeakJobMemoryUsed*: SIZE_T
  PJOBOBJECT_EXTENDED_LIMIT_INFORMATION* = ptr JOBOBJECT_EXTENDED_LIMIT_INFORMATION
  JOBOBJECT_JOBSET_INFORMATION* {.final, pure.} = object
    MemberLevel*: DWORD
  PJOBOBJECT_JOBSET_INFORMATION* = ptr JOBOBJECT_JOBSET_INFORMATION

const
  ES_SYSTEM_REQUIRED* = 0x00000001
  ES_DISPLAY_REQUIRED* = 0x00000002
  ES_USER_PRESENT* = 0x00000004
  ES_CONTINUOUS* = 0x80000000'u32

type
  LATENCY_TIME* = int32
  PLATENCY_TIME* = ptr LATENCY_TIME
  SYSTEM_POWER_STATE* {.pure.} = enum
    PowerSystemUnspecified
    PowerSystemWorking
    PowerSystemSleeping1
    PowerSystemSleeping2
    PowerSystemSleeping3
    PowerSystemHibernate
    PowerSystemShutdown
    PowerSystemMaximum
  PSYSTEM_POWER_STATE* = ptr SYSTEM_POWER_STATE

const
  POWER_SYSTEM_MAXIMUM* = SYSTEM_POWER_STATE.PowerSystemMaximum

type
  POWER_ACTION* = int32
  PPOWER_ACTION* = ptr POWER_ACTION
  SYSTEM_POWER_CONDITION* = int32
  PSYSTEM_POWER_CONDITION* = ptr SYSTEM_POWER_CONDITION
  DEVICE_POWER_STATE* = int32
  PDEVICE_POWER_STATE* = ptr DEVICE_POWER_STATE
  BATTERY_REPORTING_SCALE* {.final, pure.} = object
    Granularity*: DWORD
    Capacity*: DWORD
  PBATTERY_REPORTING_SCALE* = ptr BATTERY_REPORTING_SCALE
  POWER_ACTION_POLICY* {.final, pure.} = object
    Action*: POWER_ACTION
    Flags*: ULONG
    EventCode*: ULONG
  PPOWER_ACTION_POLICY* = ptr POWER_ACTION_POLICY

const
  POWER_ACTION_QUERY_ALLOWED* = 0x00000001
  POWER_ACTION_UI_ALLOWED* = 0x00000002
  POWER_ACTION_OVERRIDE_APPS* = 0x00000004
  POWER_ACTION_LIGHTEST_FIRST* = 0x10000000
  POWER_ACTION_LOCK_CONSOLE* = 0x20000000
  POWER_ACTION_DISABLE_WAKES* = 0x40000000
  POWER_ACTION_CRITICAL* = 0x80000000'u32
  POWER_LEVEL_USER_NOTIFY_TEXT* = 0x00000001
  POWER_LEVEL_USER_NOTIFY_SOUND* = 0x00000002
  POWER_LEVEL_USER_NOTIFY_EXEC* = 0x00000004
  POWER_USER_NOTIFY_BUTTON* = 0x00000008
  POWER_USER_NOTIFY_SHUTDOWN* = 0x00000010
  POWER_FORCE_TRIGGER_RESET* = 0x80000000'u32
  DISCHARGE_POLICY_CRITICAL* = 0
  DISCHARGE_POLICY_LOW* = 1
  NUM_DISCHARGE_POLICIES* = 4
  PO_THROTTLE_NONE* = 0
  PO_THROTTLE_CONSTANT* = 1
  PO_THROTTLE_DEGRADE* = 2
  PO_THROTTLE_ADAPTIVE* = 3
  PO_THROTTLE_MAXIMUM* = 4

type
  SYSTEM_POWER_LEVEL* {.final, pure.} = object
    Enable*: BOOLEAN
    Spare*: array[3, UCHAR]
    BatteryLevel*: ULONG
    PowerPolicy*: POWER_ACTION_POLICY
    MinSystemState*: SYSTEM_POWER_STATE
  PSYSTEM_POWER_LEVEL* = ptr SYSTEM_POWER_LEVEL
  SYSTEM_POWER_POLICY* {.final, pure.} = object
    Revision*: ULONG
    PowerButton*: POWER_ACTION_POLICY
    SleepButton*: POWER_ACTION_POLICY
    LidClose*: POWER_ACTION_POLICY
    LidOpenWake*: SYSTEM_POWER_STATE
    Reserved*: ULONG
    Idle*: POWER_ACTION_POLICY
    IdleTimeout*: ULONG
    IdleSensitivity*: UCHAR
    DynamicThrottle*: UCHAR
    Spare2*: array[2, UCHAR]
    MinSleep*: SYSTEM_POWER_STATE
    MaxSleep*: SYSTEM_POWER_STATE
    ReducedLatencySleep*: SYSTEM_POWER_STATE
    WinLogonFlags*: ULONG
    Spare3*: ULONG
    DozeS4Timeout*: ULONG
    BroadcastCapacityResolution*: ULONG
    DischargePolicy*: array[NUM_DISCHARGE_POLICIES, SYSTEM_POWER_LEVEL]
    VideoTimeout*: ULONG
    VideoDimDisplay*: BOOLEAN
    VideoReserved*: array[3, ULONG]
    SpindownTimeout*: ULONG
    OptimizeForPower*: BOOLEAN
    FanThrottleTolerance*: UCHAR
    ForcedThrottle*: UCHAR
    MinThrottle*: UCHAR
    OverThrottled*: POWER_ACTION_POLICY
  PSYSTEM_POWER_POLICY* = ptr SYSTEM_POWER_POLICY
  SYSTEM_POWER_CAPABILITIES* {.final, pure.} = object
    PowerButtonPresent*: BOOLEAN
    SleepButtonPresent*: BOOLEAN
    LidPresent*: BOOLEAN
    SystemS1*: BOOLEAN
    SystemS2*: BOOLEAN
    SystemS3*: BOOLEAN
    SystemS4*: BOOLEAN
    SystemS5*: BOOLEAN
    HiberFilePresent*: BOOLEAN
    FullWake*: BOOLEAN
    VideoDimPresent*: BOOLEAN
    ApmPresent*: BOOLEAN
    UpsPresent*: BOOLEAN
    ThermalControl*: BOOLEAN
    ProcessorThrottle*: BOOLEAN
    ProcessorMinThrottle*: UCHAR
    ProcessorMaxThrottle*: UCHAR
    spare2*: array[4, UCHAR]
    DiskSpinDown*: BOOLEAN
    spare3*: array[8, UCHAR]
    SystemBatteriesPresent*: BOOLEAN
    BatteriesAreShortTerm*: BOOLEAN
    BatteryScale*: array[3, BATTERY_REPORTING_SCALE]
    AcOnLineWake*: SYSTEM_POWER_STATE
    SoftLidWake*: SYSTEM_POWER_STATE
    RtcWake*: SYSTEM_POWER_STATE
    MinDeviceWakeState*: SYSTEM_POWER_STATE
    DefaultLowLatencyWake*: SYSTEM_POWER_STATE
  PSYSTEM_POWER_CAPABILITIES* = ptr SYSTEM_POWER_CAPABILITIES
  SYSTEM_BATTERY_STATE* {.final, pure.} = object
    AcOnLine*: BOOLEAN
    BatteryPresent*: BOOLEAN
    Charging*: BOOLEAN
    Discharging*: BOOLEAN
    Spare1*: array[4, BOOLEAN]
    MaxCapacity*: ULONG
    RemainingCapacity*: ULONG
    Rate*: ULONG
    EstimatedTime*: ULONG
    DefaultAlert1*: ULONG
    DefaultAlert2*: ULONG
  PSYSTEM_BATTERY_STATE* = ptr SYSTEM_BATTERY_STATE
  POWER_INFORMATION_LEVEL* {.pure.} = enum
    SystemPowerPolicyAc
    SystemPowerPolicyDc
    VerifySystemPolicyAc
    VerifySystemPolicyDc
    SystemPowerCapabilities
    SystemBatteryState
    SystemPowerStateHandler
    ProcessorStateHandler
    SystemPowerPolicyCurrent
    AdministratorPowerPolicy
    SystemReserveHiberFile
    ProcessorInformation
    SystemPowerInformation
    ProcessorStateHandler2
    LastWakeTime
    LastSleepTime
    SystemExecutionState
    SystemPowerStateNotifyHandler
    ProcessorPowerPolicyAc
    ProcessorPowerPolicyDc
    VerifyProcessorPowerPolicyAc
    VerifyProcessorPowerPolicyDc
    ProcessorPowerPolicyCurrent
  SYSTEM_POWER_INFORMATION* {.final, pure.} = object
    MaxIdlenessAllowed*: ULONG
    Idleness*: ULONG
    TimeRemaining*: ULONG
    CoolingMode*: UCHAR
  PSYSTEM_POWER_INFORMATION* = ptr SYSTEM_POWER_INFORMATION
  PROCESSOR_POWER_POLICY_INFO* {.final, pure.} = object
    TimeCheck*: ULONG
    DemoteLimit*: ULONG
    PromoteLimit*: ULONG
    DemotePercent*: UCHAR
    PromotePercent*: UCHAR
    Spare*: array[2, UCHAR]
    bf*: uint32

proc AllowDemotion*(self: PROCESSOR_POWER_POLICY_INFO): bool = (self.bf and 1) != 0
proc AllowPromotion*(self: PROCESSOR_POWER_POLICY_INFO): bool = (self.bf and 2) != 0
proc `AllowDemotion=`*(self: var PROCESSOR_POWER_POLICY_INFO, a: bool) = self.bf = (self.bf and cast[uint32](not 1)) or (a.uint32)
proc `AllowPromotion=`*(self: var PROCESSOR_POWER_POLICY_INFO, a: bool) = self.bf = (self.bf and cast[uint32](not 2)) or (a.uint32 shl 1)

type
  PPROCESSOR_POWER_POLICY_INFO* = ptr PROCESSOR_POWER_POLICY_INFO
  PROCESSOR_POWER_POLICY* {.final, pure.} = object
    Revision*: ULONG
    DynamicThrottle*: UCHAR
    Spare*: array[3, UCHAR]
    Reserved*: ULONG
    PolicyCount*: ULONG
    Policy*: array[3, PROCESSOR_POWER_POLICY_INFO]
  PPROCESSOR_POWER_POLICY* = ptr PROCESSOR_POWER_POLICY
  ADMINISTRATOR_POWER_POLICY* {.final, pure.} = object
    MinSleep*: SYSTEM_POWER_STATE
    MaxSleep*: SYSTEM_POWER_STATE
    MinVideoTimeout*: ULONG
    MaxVideoTimeout*: ULONG
    MinSpindownTimeout*: ULONG
    MaxSpindownTimeout*: ULONG
  PADMINISTRATOR_POWER_POLICY* = ptr ADMINISTRATOR_POWER_POLICY
  PIMAGE_TLS_CALLBACK* = proc (P1: PVOID, P2: DWORD, P3: PVOID): void {.stdcall.}
  PVECTORED_EXCEPTION_HANDLER* = proc (P1: PEXCEPTION_POINTERS): LONG {.stdcall.}
  WAITORTIMERCALLBACKFUNC* = proc (P1: PVOID, P2: BOOLEAN): void {.stdcall.}
  HEAP_INFORMATION_CLASS* = int32
  ACTIVATION_CONTEXT_INFO_CLASS* {.pure.} = enum
    ActivationContextBasicInformation = 1
    ActivationContextDetailedInformation
    AssemblyDetailedInformationInActivationContext
    FileInformationInAssemblyOfAssemblyInActivationContext
  ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION* {.final, pure.} = object
    ulFlags*: DWORD
    ulEncodedAssemblyIdentityLength*: DWORD
    ulManifestPathType*: DWORD
    ulManifestPathLength*: DWORD
    liManifestLastWriteTime*: LARGE_INTEGER
    ulPolicyPathType*: DWORD
    ulPolicyPathLength*: DWORD
    liPolicyLastWriteTime*: LARGE_INTEGER
    ulMetadataSatelliteRosterIndex*: DWORD
    ulManifestVersionMajor*: DWORD
    ulManifestVersionMinor*: DWORD
    ulPolicyVersionMajor*: DWORD
    ulPolicyVersionMinor*: DWORD
    ulAssemblyDirectoryNameLength*: DWORD
    lpAssemblyEncodedAssemblyIdentity*: PCWSTR
    lpAssemblyManifestPath*: PCWSTR
    lpAssemblyPolicyPath*: PCWSTR
    lpAssemblyDirectoryName*: PCWSTR
  PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION* = ptr ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
  PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION* = ptr ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
  ACTIVATION_CONTEXT_DETAILED_INFORMATION* {.final, pure.} = object
    dwFlags*: DWORD
    ulFormatVersion*: DWORD
    ulAssemblyCount*: DWORD
    ulRootManifestPathType*: DWORD
    ulRootManifestPathChars*: DWORD
    ulRootConfigurationPathType*: DWORD
    ulRootConfigurationPathChars*: DWORD
    ulAppDirPathType*: DWORD
    ulAppDirPathChars*: DWORD
    lpRootManifestPath*: PCWSTR
    lpRootConfigurationPath*: PCWSTR
    lpAppDirPath*: PCWSTR
  PACTIVATION_CONTEXT_DETAILED_INFORMATION* = ptr ACTIVATION_CONTEXT_DETAILED_INFORMATION
  PCACTIVATION_CONTEXT_DETAILED_INFORMATION* = ptr ACTIVATION_CONTEXT_DETAILED_INFORMATION
  ACTIVATION_CONTEXT_QUERY_INDEX* {.final, pure.} = object
    ulAssemblyIndex*: ULONG
    ulFileIndexInAssembly*: ULONG
  PACTIVATION_CONTEXT_QUERY_INDEX* = ptr ACTIVATION_CONTEXT_QUERY_INDEX
  PCACTIVATION_CONTEXT_QUERY_INDEX* = ptr ACTIVATION_CONTEXT_QUERY_INDEX
  ASSEMBLY_FILE_DETAILED_INFORMATION* {.final, pure.} = object
    ulFlags*: DWORD
    ulFilenameLength*: DWORD
    ulPathLength*: DWORD
    lpFileName*: PCWSTR
    lpFilePath*: PCWSTR
  PASSEMBLY_FILE_DETAILED_INFORMATION* = ptr ASSEMBLY_FILE_DETAILED_INFORMATION
  PCASSEMBLY_FILE_DETAILED_INFORMATION* = ptr ASSEMBLY_FILE_DETAILED_INFORMATION

when not defined(winansi):
  type
    OSVERSIONINFO* = OSVERSIONINFOW
    OSVERSIONINFOEX* = OSVERSIONINFOEXW

else:
  type
    OSVERSIONINFO* = OSVERSIONINFOA
    OSVERSIONINFOEX* = OSVERSIONINFOEXA

type
  POSVERSIONINFO* = ptr OSVERSIONINFO
  LPOSVERSIONINFO* = ptr OSVERSIONINFO
  POSVERSIONINFOEX* = ptr OSVERSIONINFOEX
  LPOSVERSIONINFOEX* = ptr OSVERSIONINFOEX

proc VerSetConditionMask*(P1: ULONGLONG, P2: DWORD, P3: BYTE): ULONGLONG {.winapi, dynlib: "kernel32", importc.}

when defined(cpu64):
  const
    IMAGE_NT_OPTIONAL_HDR_MAGIC* = IMAGE_NT_OPTIONAL_HDR64_MAGIC
    IMAGE_ORDINAL_FLAG* = IMAGE_ORDINAL_FLAG64
    IMAGE_ORDINAL* = IMAGE_ORDINAL64
    IMAGE_SNAP_BY_ORDINAL* = IMAGE_SNAP_BY_ORDINAL64

  type
    IMAGE_OPTIONAL_HEADER* = IMAGE_OPTIONAL_HEADER64
    IMAGE_NT_HEADERS* = IMAGE_NT_HEADERS64
    IMAGE_THUNK_DATA* = IMAGE_THUNK_DATA64
    IMAGE_TLS_DIRECTORY* = IMAGE_TLS_DIRECTORY64

else:
  const
    IMAGE_NT_OPTIONAL_HDR_MAGIC* = IMAGE_NT_OPTIONAL_HDR32_MAGIC
    IMAGE_ORDINAL_FLAG* = IMAGE_ORDINAL_FLAG32
    IMAGE_ORDINAL* = IMAGE_ORDINAL32
    IMAGE_SNAP_BY_ORDINAL* = IMAGE_SNAP_BY_ORDINAL32

  type
    IMAGE_OPTIONAL_HEADER* = IMAGE_OPTIONAL_HEADER32
    IMAGE_NT_HEADERS* = IMAGE_NT_HEADERS32
    IMAGE_THUNK_DATA* = IMAGE_THUNK_DATA32
    IMAGE_TLS_DIRECTORY* = IMAGE_TLS_DIRECTORY32

type
  PIMAGE_OPTIONAL_HEADER* = ptr IMAGE_OPTIONAL_HEADER
  PIMAGE_NT_HEADERS* = ptr IMAGE_NT_HEADERS
  PIMAGE_THUNK_DATA* = ptr IMAGE_THUNK_DATA
  PIMAGE_TLS_DIRECTORY* = ptr IMAGE_TLS_DIRECTORY

# proc GetCurrentFiber*(): PVOID {.winapi, dynlib: "kernel32", importc.}
# proc GetFiberData*(): PVOID {.winapi, dynlib: "kernel32", importc.}

proc IMAGE_FIRST_SECTION*(h: PIMAGE_NT_HEADERS): PIMAGE_SECTION_HEADER = cast[PIMAGE_SECTION_HEADER](cast[UINT_PTR](addr h.OptionalHeader) + h.FileHeader.SizeOfOptionalHeader)

proc `LowPart=`*(self: var LARGE_INTEGER, x: uint32) = self.s1.LowPart = x
proc LowPart*(self: LARGE_INTEGER): uint32 = self.s1.LowPart
proc `HighPart=`*(self: var LARGE_INTEGER, x: int32) = self.s1.HighPart = x
proc HighPart*(self: LARGE_INTEGER): int32 = self.s1.HighPart
proc `LowPart=`*(self: var ULARGE_INTEGER, x: uint32) = self.s1.LowPart = x
proc LowPart*(self: ULARGE_INTEGER): uint32 = self.s1.LowPart
proc `HighPart=`*(self: var ULARGE_INTEGER, x: uint32) = self.s1.HighPart = x
proc HighPart*(self: ULARGE_INTEGER): uint32 = self.s1.HighPart
proc `Next=`*(self: var SLIST_HEADER, x: SLIST_ENTRY) = self.s1.Next = x
proc Next*(self: SLIST_HEADER): SLIST_ENTRY = self.s1.Next
proc `Depth=`*(self: var SLIST_HEADER, x: WORD) = self.s1.Depth = x
proc Depth*(self: SLIST_HEADER): WORD = self.s1.Depth
proc `Sequence=`*(self: var SLIST_HEADER, x: WORD) = self.s1.Sequence = x
proc Sequence*(self: SLIST_HEADER): WORD = self.s1.Sequence
proc `VirtualAddress=`*(self: var IMAGE_RELOCATION, x: DWORD) = self.u1.VirtualAddress = x
proc VirtualAddress*(self: IMAGE_RELOCATION): DWORD = self.u1.VirtualAddress
proc `RelocCount=`*(self: var IMAGE_RELOCATION, x: DWORD) = self.u1.RelocCount = x
proc RelocCount*(self: IMAGE_RELOCATION): DWORD = self.u1.RelocCount
proc `Characteristics=`*(self: var IMAGE_IMPORT_DESCRIPTOR, x: DWORD) = self.u1.Characteristics = x
proc Characteristics*(self: IMAGE_IMPORT_DESCRIPTOR): DWORD = self.u1.Characteristics
proc `OriginalFirstThunk=`*(self: var IMAGE_IMPORT_DESCRIPTOR, x: DWORD) = self.u1.OriginalFirstThunk = x
proc OriginalFirstThunk*(self: IMAGE_IMPORT_DESCRIPTOR): DWORD = self.u1.OriginalFirstThunk
proc `NameOffset=`*(self: var IMAGE_RESOURCE_DIRECTORY_ENTRY, x: DWORD) = self.u1.NameOffset = x
proc NameOffset*(self: IMAGE_RESOURCE_DIRECTORY_ENTRY): DWORD = self.u1.NameOffset
proc `NameIsString=`*(self: var IMAGE_RESOURCE_DIRECTORY_ENTRY, x: DWORD) = self.u1.NameIsString = x
proc NameIsString*(self: IMAGE_RESOURCE_DIRECTORY_ENTRY): DWORD = self.u1.NameIsString
proc `Id=`*(self: var IMAGE_RESOURCE_DIRECTORY_ENTRY, x: WORD) = self.u1.Id = x
proc Id*(self: IMAGE_RESOURCE_DIRECTORY_ENTRY): WORD = self.u1.Id
proc `EndOfPrologue=`*(self: var IMAGE_FUNCTION_ENTRY64, x: ULONGLONG) = self.u1.EndOfPrologue = x
proc EndOfPrologue*(self: IMAGE_FUNCTION_ENTRY64): ULONGLONG = self.u1.EndOfPrologue
proc `UnwindInfoAddress=`*(self: var IMAGE_FUNCTION_ENTRY64, x: ULONGLONG) = self.u1.UnwindInfoAddress = x
proc UnwindInfoAddress*(self: IMAGE_FUNCTION_ENTRY64): ULONGLONG = self.u1.UnwindInfoAddress
proc `FiberData=`*(self: var NT_TIB, x: PVOID) = self.u1.FiberData = x
proc FiberData*(self: NT_TIB): PVOID = self.u1.FiberData
proc `Version=`*(self: var NT_TIB, x: DWORD) = self.u1.Version = x
proc Version*(self: NT_TIB): DWORD = self.u1.Version
proc `GenericReparseBuffer=`*(self: var REPARSE_DATA_BUFFER, x: REPARSE_DATA_BUFFER_UNION1_GenericReparseBuffer) = self.u1.GenericReparseBuffer = x
proc GenericReparseBuffer*(self: REPARSE_DATA_BUFFER): REPARSE_DATA_BUFFER_UNION1_GenericReparseBuffer = self.u1.GenericReparseBuffer
proc `SymbolicLinkReparseBuffer=`*(self: var REPARSE_DATA_BUFFER, x: REPARSE_DATA_BUFFER_UNION1_SymbolicLinkReparseBuffer) = self.u1.SymbolicLinkReparseBuffer = x
proc SymbolicLinkReparseBuffer*(self: REPARSE_DATA_BUFFER): REPARSE_DATA_BUFFER_UNION1_SymbolicLinkReparseBuffer = self.u1.SymbolicLinkReparseBuffer
proc `MountPointReparseBuffer=`*(self: var REPARSE_DATA_BUFFER, x: REPARSE_DATA_BUFFER_UNION1_MountPointReparseBuffer) = self.u1.MountPointReparseBuffer = x
proc MountPointReparseBuffer*(self: REPARSE_DATA_BUFFER): REPARSE_DATA_BUFFER_UNION1_MountPointReparseBuffer = self.u1.MountPointReparseBuffer


# core/winbase.nim
const
  # FINDEX_INFO_LEVELS* = enum* =
  FindExInfoStandard* = 0
  FindExInfoMaxInfoLevel* = 1
  # FINDEX_SEARCH_OPS* = enum
  FindExSearchNameMatch* = 0
  FindExSearchLimitToDirectories* = 1
  FindExSearchLimitToDevices* = 2
  FindExSearchMaxSearchOp* = 3
  # GET_FILEEX_INFO_LEVELS* = enum
  GetFileExInfoStandard* = 0
  GetFileExMaxInfoLevel* = 1
  # COMPUTER_NAME_FORMAT* = enum
  ComputerNameNetBIOS* = 0
  ComputerNameDnsHostname* = 1
  ComputerNameDnsDomain* = 2
  ComputerNameDnsFullyQualified* = 3
  ComputerNamePhysicalNetBIOS* = 4
  ComputerNamePhysicalDnsHostname* = 5
  ComputerNamePhysicalDnsDomain* = 6
  ComputerNamePhysicalDnsFullyQualified* = 7
  ComputerNameMax* = 8
  # MEMORY_RESOURCE_NOTIFICATION_TYPE* = enum
  LowMemoryResourceNotification* = 0
  HighMemoryResourceNotification* = 1

type
  va_list* = cstring

const
  PST_UNSPECIFIED* = 0
  PST_RS232* = 1
  PST_PARALLELPORT* = 2
  PST_RS422* = 3
  PST_RS423* = 4
  PST_RS449* = 5
  PST_MODEM* = 6
  PST_FAX* = 0x0021
  PST_SCANNER* = 0x0022
  PST_NETWORK_BRIDGE* = 0x0100
  PST_LAT* = 0x0101
  PST_TCPIP_TELNET* = 0x0102
  PST_X25* = 0x0103
  BAUD_075* = 0x00000001
  BAUD_110* = 0x00000002
  BAUD_134_5* = 0x00000004
  BAUD_150* = 0x00000008
  BAUD_300* = 0x00000010
  BAUD_600* = 0x00000020
  BAUD_1200* = 0x00000040
  BAUD_1800* = 0x00000080
  BAUD_2400* = 0x00000100
  BAUD_4800* = 0x00000200
  BAUD_7200* = 0x00000400
  BAUD_9600* = 0x00000800
  BAUD_14400* = 0x00001000
  BAUD_19200* = 0x00002000
  BAUD_38400* = 0x00004000
  BAUD_56K* = 0x00008000
  BAUD_128K* = 0x00010000
  BAUD_115200* = 0x00020000
  BAUD_57600* = 0x00040000
  BAUD_USER* = 0x10000000
  PCF_DTRDSR* = 0x0001
  PCF_RTSCTS* = 0x0002
  PCF_RLSD* = 0x0004
  PCF_PARITY_CHECK* = 0x0008
  PCF_XONXOFF* = 0x0010
  PCF_SETXCHAR* = 0x0020
  PCF_TOTALTIMEOUTS* = 0x0040
  PCF_INTTIMEOUTS* = 0x0080
  PCF_SPECIALCHARS* = 0x0100
  PCF_16BITMODE* = 0x0200
  SP_PARITY* = 1
  SP_BAUD* = 2
  SP_DATABITS* = 4
  SP_STOPBITS* = 8
  SP_HANDSHAKING* = 16
  SP_PARITY_CHECK* = 32
  SP_RLSD* = 64
  DATABITS_5* = 1
  DATABITS_6* = 2
  DATABITS_7* = 4
  DATABITS_8* = 8
  DATABITS_16* = 16
  DATABITS_16X* = 32
  STOPBITS_10* = 0x0001
  STOPBITS_15* = 0x0002
  STOPBITS_20* = 0x0004
  PARITY_NONE* = 0x0100
  PARITY_ODD* = 0x0200
  PARITY_EVEN* = 0x0400
  PARITY_MARK* = 0x0800
  PARITY_SPACE* = 0x1000
  SP_SERIALCOMM* = 1

type
  COMMPROP* {.final, pure.} = object
    wPacketLength*: WORD
    wPacketVersion*: WORD
    dwServiceMask*: DWORD
    dwReserved1*: DWORD
    dwMaxTxQueue*: DWORD
    dwMaxRxQueue*: DWORD
    dwMaxBaud*: DWORD
    dwProvSubType*: DWORD
    dwProvCapabilities*: DWORD
    dwSettableParams*: DWORD
    dwSettableBaud*: DWORD
    wSettableData*: WORD
    wSettableStopParity*: WORD
    dwCurrentTxQueue*: DWORD
    dwCurrentRxQueue*: DWORD
    dwProvSpec1*: DWORD
    dwProvSpec2*: DWORD
    wcProvChar*: array[1, WCHAR]
  LPCOMMPROP* = ptr COMMPROP

const
  EXCEPTION_DEBUG_EVENT* = 1
  CREATE_THREAD_DEBUG_EVENT* = 2
  CREATE_PROCESS_DEBUG_EVENT* = 3
  EXIT_THREAD_DEBUG_EVENT* = 4
  EXIT_PROCESS_DEBUG_EVENT* = 5
  LOAD_DLL_DEBUG_EVENT* = 6
  UNLOAD_DLL_DEBUG_EVENT* = 7
  OUTPUT_DEBUG_STRING_EVENT* = 8
  RIP_EVENT* = 9
  HFILE_ERROR* = -1
  FILE_BEGIN* = 0
  FILE_CURRENT* = 1
  FILE_END* = 2
  INVALID_SET_FILE_POINTER* = 0xFFFFFFFF'u32
  OF_READ* = 0
  OF_WRITE* = 0x0001
  OF_READWRITE* = 0x0002
  OF_SHARE_COMPAT* = 0
  OF_SHARE_EXCLUSIVE* = 0x0010
  OF_SHARE_DENY_WRITE* = 0x0020
  OF_SHARE_DENY_READ* = 0x0030
  OF_SHARE_DENY_NONE* = 0x0040
  OF_PARSE* = 0x0100
  OF_DELETE* = 0x0200
  OF_VERIFY* = 0x0400
  OF_CANCEL* = 0x0800
  OF_CREATE* = 0x1000
  OF_PROMPT* = 0x2000
  OF_EXIST* = 0x4000
  OF_REOPEN* = 0x8000
  NMPWAIT_NOWAIT* = 1
  NMPWAIT_WAIT_FOREVER* = 0xFFFFFFFF'u32
  NMPWAIT_USE_DEFAULT_WAIT* = 0
  CE_RXOVER* = 0x0001
  CE_OVERRUN* = 0x0002
  CE_RXPARITY* = 0x0004
  CE_FRAME* = 0x0008
  CE_BREAK* = 0x0010
  CE_TXFULL* = 0x0100
  CE_PTO* = 0x0200
  CE_IOE* = 0x0400
  CE_DNS* = 0x0800
  CE_OOP* = 0x1000
  CE_MODE* = 0x8000
  PROGRESS_CONTINUE* = 0
  PROGRESS_CANCEL* = 1
  PROGRESS_STOP* = 2
  PROGRESS_QUIET* = 3
  CALLBACK_CHUNK_FINISHED* = 0
  CALLBACK_STREAM_SWITCH* = 1
  COPY_FILE_FAIL_IF_EXISTS* = 1
  COPY_FILE_RESTARTABLE* = 2
  FILE_MAP_COPY* = 1
  FILE_MAP_WRITE* = 2
  FILE_MAP_READ* = 4
  FILE_MAP_ALL_ACCESS* = 0x000F001F
  MUTEX_ALL_ACCESS* = 0x001f0001
  MUTEX_MODIFY_STATE* = 0x00000001
  SEMAPHORE_ALL_ACCESS* = 0x001f0003
  SEMAPHORE_MODIFY_STATE* = 0x00000002
  EVENT_ALL_ACCESS* = 0x001f0003
  EVENT_MODIFY_STATE* = 0x00000002
  PIPE_ACCESS_INBOUND* = 1
  PIPE_ACCESS_OUTBOUND* = 2
  PIPE_ACCESS_DUPLEX* = 3
  PIPE_TYPE_BYTE* = 0
  PIPE_TYPE_MESSAGE* = 4
  PIPE_READMODE_BYTE* = 0
  PIPE_READMODE_MESSAGE* = 2
  PIPE_WAIT* = 0
  PIPE_NOWAIT* = 1
  PIPE_CLIENT_END* = 0
  PIPE_SERVER_END* = 1
  PIPE_UNLIMITED_INSTANCES* = 255
  DEBUG_PROCESS* = 0x00000001
  DEBUG_ONLY_THIS_PROCESS* = 0x00000002
  CREATE_SUSPENDED* = 0x00000004
  DETACHED_PROCESS* = 0x00000008
  CREATE_NEW_CONSOLE* = 0x00000010
  NORMAL_PRIORITY_CLASS* = 0x00000020
  IDLE_PRIORITY_CLASS* = 0x00000040
  HIGH_PRIORITY_CLASS* = 0x00000080
  REALTIME_PRIORITY_CLASS* = 0x00000100
  CREATE_NEW_PROCESS_GROUP* = 0x00000200
  CREATE_UNICODE_ENVIRONMENT* = 0x00000400
  CREATE_SEPARATE_WOW_VDM* = 0x00000800
  CREATE_SHARED_WOW_VDM* = 0x00001000
  CREATE_FORCEDOS* = 0x00002000
  BELOW_NORMAL_PRIORITY_CLASS* = 0x00004000
  ABOVE_NORMAL_PRIORITY_CLASS* = 0x00008000
  CREATE_BREAKAWAY_FROM_JOB* = 0x01000000
  CREATE_WITH_USERPROFILE* = 0x02000000
  CREATE_DEFAULT_ERROR_MODE* = 0x04000000
  CREATE_NO_WINDOW* = 0x08000000
  PROFILE_USER* = 0x10000000
  PROFILE_KERNEL* = 0x20000000
  PROFILE_SERVER* = 0x40000000
  CONSOLE_TEXTMODE_BUFFER* = 1
  CREATE_NEW* = 1
  CREATE_ALWAYS* = 2
  OPEN_EXISTING* = 3
  OPEN_ALWAYS* = 4
  TRUNCATE_EXISTING* = 5
  FILE_FLAG_WRITE_THROUGH* = 0x80000000'u32
  FILE_FLAG_OVERLAPPED* = 0x40000000
  FILE_FLAG_NO_BUFFERING* = 0x20000000
  FILE_FLAG_RANDOM_ACCESS* = 0x10000000
  FILE_FLAG_SEQUENTIAL_SCAN* = 0x08000000
  FILE_FLAG_DELETE_ON_CLOSE* = 0x04000000
  FILE_FLAG_BACKUP_SEMANTICS* = 0x02000000
  FILE_FLAG_POSIX_SEMANTICS* = 0x01000000
  FILE_FLAG_OPEN_REPARSE_POINT* = 0x00200000
  FILE_FLAG_OPEN_NO_RECALL* = 0x00100000
  FILE_FLAG_FIRST_PIPE_INSTANCE* = 0x00080000
  SECURITY_ANONYMOUS* = (SECURITY_IMPERSONATION_LEVEL.SecurityAnonymous.ord shl 16).DWORD
  SECURITY_IDENTIFICATION* = (SECURITY_IMPERSONATION_LEVEL.SecurityIdentification.ord shl 16).DWORD
  SECURITY_IMPERSONATION* = (SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation.ord shl 16).DWORD
  SECURITY_DELEGATION* = (SECURITY_IMPERSONATION_LEVEL.SecurityDelegation.ord shl 16).DWORD
  SECURITY_CONTEXT_TRACKING* = 0x00040000
  SECURITY_EFFECTIVE_ONLY* = 0x00080000
  SECURITY_SQOS_PRESENT* = 0x00100000
  SECURITY_VALID_SQOS_FLAGS* = 0x001F0000
  STILL_ACTIVE* = 0x103
  FIND_FIRST_EX_CASE_SENSITIVE* = 1
  SCS_32BIT_BINARY* = 0
  SCS_DOS_BINARY* = 1
  SCS_WOW_BINARY* = 2
  SCS_PIF_BINARY* = 3
  SCS_POSIX_BINARY* = 4
  SCS_OS216_BINARY* = 5
  MAX_COMPUTERNAME_LENGTH* = 15
  HW_PROFILE_GUIDLEN* = 39
  MAX_PROFILE_LEN* = 80
  DOCKINFO_UNDOCKED* = 1
  DOCKINFO_DOCKED* = 2
  DOCKINFO_USER_SUPPLIED* = 4
  DOCKINFO_USER_UNDOCKED* = (DOCKINFO_USER_SUPPLIED or DOCKINFO_UNDOCKED)
  DOCKINFO_USER_DOCKED* = (DOCKINFO_USER_SUPPLIED or DOCKINFO_DOCKED)
  DRIVE_UNKNOWN* = 0
  DRIVE_NO_ROOT_DIR* = 1
  DRIVE_REMOVABLE* = 2
  DRIVE_FIXED* = 3
  DRIVE_REMOTE* = 4
  DRIVE_CDROM* = 5
  DRIVE_RAMDISK* = 6
  FILE_TYPE_UNKNOWN* = 0
  FILE_TYPE_DISK* = 1
  FILE_TYPE_CHAR* = 2
  FILE_TYPE_PIPE* = 3
  FILE_TYPE_REMOTE* = 0x8000
  HANDLE_FLAG_INHERIT* = 0x01
  HANDLE_FLAG_PROTECT_FROM_CLOSE* = 0x02
  STD_INPUT_HANDLE* = 0xFFFFFFF6'u32
  STD_OUTPUT_HANDLE* = 0xFFFFFFF5'u32
  STD_ERROR_HANDLE* = 0xFFFFFFF4'u32
  INVALID_HANDLE_VALUE* = -1
  GET_TAPE_MEDIA_INFORMATION* = 0
  GET_TAPE_DRIVE_INFORMATION* = 1
  SET_TAPE_MEDIA_INFORMATION* = 0
  SET_TAPE_DRIVE_INFORMATION* = 1
  THREAD_PRIORITY_IDLE* = -15
  THREAD_PRIORITY_LOWEST* = -2
  THREAD_PRIORITY_BELOW_NORMAL* = -1
  THREAD_PRIORITY_NORMAL* = 0
  THREAD_PRIORITY_ABOVE_NORMAL* = 1
  THREAD_PRIORITY_HIGHEST* = 2
  THREAD_PRIORITY_TIME_CRITICAL* = 15
  THREAD_PRIORITY_ERROR_RETURN* = 2147483647
  TIME_ZONE_ID_UNKNOWN* = 0
  TIME_ZONE_ID_STANDARD* = 1
  TIME_ZONE_ID_DAYLIGHT* = 2
  TIME_ZONE_ID_INVALID* = 0xFFFFFFFF'u32
  FS_CASE_SENSITIVE* = 1
  FS_CASE_IS_PRESERVED* = 2
  FS_UNICODE_STORED_ON_DISK* = 4
  FS_PERSISTENT_ACLS* = 8
  FS_FILE_COMPRESSION* = 16
  FS_VOL_IS_COMPRESSED* = 32768
  GMEM_FIXED* = 0
  GMEM_MOVEABLE* = 0x0002
  GMEM_ZEROINIT* = 0x0040
  GPTR* = 0x0040
  GHND* = 0x0042
  GMEM_MODIFY* = 0x0080
  GMEM_VALID_FLAGS* = 0x7F72
  LMEM_FIXED* = 0
  LMEM_MOVEABLE* = 0x0002
  LMEM_NONZEROLPTR* = 0
  NONZEROLPTR* = 0
  LMEM_NONZEROLHND* = 0x0002
  NONZEROLHND* = 0x0002
  LMEM_DISCARDABLE* = 0x0F00
  LMEM_NOCOMPACT* = 0x0010
  LMEM_NODISCARD* = 0x0020
  LMEM_ZEROINIT* = 0x0040
  LPTR* = 0x0040
  LHND* = 0x0042
  LMEM_MODIFY* = 0x0080
  LMEM_LOCKCOUNT* = 0x00FF
  LMEM_DISCARDED* = 0x4000
  LMEM_INVALID_HANDLE* = 0x8000
  STATUS_WAIT_0* = 0
  STATUS_ABANDONED_WAIT_0* = 0x00000080
  STATUS_USER_APC* = 0x000000C0
  STATUS_TIMEOUT* = 0x00000102
  STATUS_PENDING* = 0x00000103
  STATUS_SEGMENT_NOTIFICATION* = 0x40000005
  STATUS_GUARD_PAGE_VIOLATION* = 0x80000001'u32
  STATUS_DATATYPE_MISALIGNMENT* = 0x80000002'u32
  STATUS_BREAKPOINT* = 0x80000003'u32
  STATUS_SINGLE_STEP* = 0x80000004'u32
  STATUS_ACCESS_VIOLATION* = 0xC0000005'u32
  STATUS_IN_PAGE_ERROR* = 0xC0000006'u32
  STATUS_INVALID_HANDLE* = 0xC0000008'u32
  STATUS_NO_MEMORY* = 0xC0000017'u32
  STATUS_ILLEGAL_INSTRUCTION* = 0xC000001D'u32
  STATUS_NONCONTINUABLE_EXCEPTION* = 0xC0000025'u32
  STATUS_INVALID_DISPOSITION* = 0xC0000026'u32
  STATUS_ARRAY_BOUNDS_EXCEEDED* = 0xC000008C'u32
  STATUS_FLOAT_DENORMAL_OPERAND* = 0xC000008D'u32
  STATUS_FLOAT_DIVIDE_BY_ZERO* = 0xC000008E'u32
  STATUS_FLOAT_INEXACT_RESULT* = 0xC000008F'u32
  STATUS_FLOAT_INVALID_OPERATION* = 0xC0000090'u32
  STATUS_FLOAT_OVERFLOW* = 0xC0000091'u32
  STATUS_FLOAT_STACK_CHECK* = 0xC0000092'u32
  STATUS_FLOAT_UNDERFLOW* = 0xC0000093'u32
  STATUS_INTEGER_DIVIDE_BY_ZERO* = 0xC0000094'u32
  STATUS_INTEGER_OVERFLOW* = 0xC0000095'u32
  STATUS_PRIVILEGED_INSTRUCTION* = 0xC0000096'u32
  STATUS_STACK_OVERFLOW* = 0xC00000FD'u32
  STATUS_CONTROL_C_EXIT* = 0xC000013A'u32
  STATUS_DLL_INIT_FAILED* = 0xC0000142'u32
  STATUS_DLL_INIT_FAILED_LOGOFF* = 0xC000026B'u32
  CONTROL_C_EXIT* = STATUS_CONTROL_C_EXIT.DWORD
  EXCEPTION_ACCESS_VIOLATION* = STATUS_ACCESS_VIOLATION.DWORD
  EXCEPTION_DATATYPE_MISALIGNMENT* = STATUS_DATATYPE_MISALIGNMENT.DWORD
  EXCEPTION_BREAKPOINT* = STATUS_BREAKPOINT.DWORD
  EXCEPTION_SINGLE_STEP* = STATUS_SINGLE_STEP.DWORD
  EXCEPTION_ARRAY_BOUNDS_EXCEEDED* = STATUS_ARRAY_BOUNDS_EXCEEDED.DWORD
  EXCEPTION_FLT_DENORMAL_OPERAND* = STATUS_FLOAT_DENORMAL_OPERAND.DWORD
  EXCEPTION_FLT_DIVIDE_BY_ZERO* = STATUS_FLOAT_DIVIDE_BY_ZERO.DWORD
  EXCEPTION_FLT_INEXACT_RESULT* = STATUS_FLOAT_INEXACT_RESULT.DWORD
  EXCEPTION_FLT_INVALID_OPERATION* = STATUS_FLOAT_INVALID_OPERATION.DWORD
  EXCEPTION_FLT_OVERFLOW* = STATUS_FLOAT_OVERFLOW.DWORD
  EXCEPTION_FLT_STACK_CHECK* = STATUS_FLOAT_STACK_CHECK.DWORD
  EXCEPTION_FLT_UNDERFLOW* = STATUS_FLOAT_UNDERFLOW.DWORD
  EXCEPTION_INT_DIVIDE_BY_ZERO* = STATUS_INTEGER_DIVIDE_BY_ZERO.DWORD
  EXCEPTION_INT_OVERFLOW* = STATUS_INTEGER_OVERFLOW.DWORD
  EXCEPTION_PRIV_INSTRUCTION* = STATUS_PRIVILEGED_INSTRUCTION.DWORD
  EXCEPTION_IN_PAGE_ERROR* = STATUS_IN_PAGE_ERROR.DWORD
  EXCEPTION_ILLEGAL_INSTRUCTION* = STATUS_ILLEGAL_INSTRUCTION.DWORD
  EXCEPTION_NONCONTINUABLE_EXCEPTION* = STATUS_NONCONTINUABLE_EXCEPTION.DWORD
  EXCEPTION_STACK_OVERFLOW* = STATUS_STACK_OVERFLOW.DWORD
  EXCEPTION_INVALID_DISPOSITION* = STATUS_INVALID_DISPOSITION.DWORD
  EXCEPTION_GUARD_PAGE* = STATUS_GUARD_PAGE_VIOLATION.DWORD
  EXCEPTION_INVALID_HANDLE* = STATUS_INVALID_HANDLE.DWORD
  PROCESS_HEAP_REGION* = 1
  PROCESS_HEAP_UNCOMMITTED_RANGE* = 2
  PROCESS_HEAP_ENTRY_BUSY* = 4
  PROCESS_HEAP_ENTRY_MOVEABLE* = 16
  PROCESS_HEAP_ENTRY_DDESHARE* = 32
  DONT_RESOLVE_DLL_REFERENCES* = 0x01
  LOAD_LIBRARY_AS_DATAFILE* = 0x02
  LOAD_WITH_ALTERED_SEARCH_PATH* = 0x08
  LOAD_IGNORE_CODE_AUTHZ_LEVEL* = 0x10
  LOCKFILE_FAIL_IMMEDIATELY* = 1
  LOCKFILE_EXCLUSIVE_LOCK* = 2
  MAXIMUM_WAIT_OBJECTS* = 64
  MAXIMUM_SUSPEND_COUNT* = 0x7F
  WAIT_OBJECT_0* = 0
  WAIT_ABANDONED_0* = 128
  WAIT_IO_COMPLETION* = 0x000000C0
  WAIT_ABANDONED* = 0x00000080
  WAIT_FAILED* = 0xFFFFFFFF'u32
  PURGE_TXABORT* = 1
  PURGE_RXABORT* = 2
  PURGE_TXCLEAR* = 4
  PURGE_RXCLEAR* = 8
  EVENTLOG_SEQUENTIAL_READ* = 1
  EVENTLOG_SEEK_READ* = 2
  EVENTLOG_FORWARDS_READ* = 4
  EVENTLOG_BACKWARDS_READ* = 8
  EVENTLOG_SUCCESS* = 0
  EVENTLOG_ERROR_TYPE* = 1
  EVENTLOG_WARNING_TYPE* = 2
  EVENTLOG_INFORMATION_TYPE* = 4
  EVENTLOG_AUDIT_SUCCESS* = 8
  EVENTLOG_AUDIT_FAILURE* = 16
  FORMAT_MESSAGE_ALLOCATE_BUFFER* = 0x0100
  FORMAT_MESSAGE_IGNORE_INSERTS* = 0x0200
  FORMAT_MESSAGE_FROM_STRING* = 0x0400
  FORMAT_MESSAGE_FROM_HMODULE* = 0x0800
  FORMAT_MESSAGE_FROM_SYSTEM* = 0x1000
  FORMAT_MESSAGE_ARGUMENT_ARRAY* = 0x2000
  FORMAT_MESSAGE_MAX_WIDTH_MASK* = 255
  SEM_FAILCRITICALERRORS* = 0x0001
  SEM_NOGPFAULTERRORBOX* = 0x0002
  SEM_NOALIGNMENTFAULTEXCEPT* = 0x0004
  SEM_NOOPENFILEERRORBOX* = 0x8000
  SLE_ERROR* = 1
  SLE_MINORERROR* = 2
  SLE_WARNING* = 3
  SHUTDOWN_NORETRY* = 1
  EXCEPTION_EXECUTE_HANDLER* = 1
  EXCEPTION_CONTINUE_EXECUTION* = -1
  EXCEPTION_CONTINUE_SEARCH* = 0
  MAXINTATOM* = 0xC000
  INVALID_ATOM* = 0
  IGNORE* = 0
  INFINITE* = -1
  SETXOFF* = 1
  SETXON* = 2
  SETRTS* = 3
  CLRRTS* = 4
  SETDTR* = 5
  CLRDTR* = 6
  SETBREAK* = 8
  CLRBREAK* = 9
  EV_RXCHAR* = 0x0001
  EV_RXFLAG* = 0x0002
  EV_TXEMPTY* = 0x0004
  EV_CTS* = 0x0008
  EV_DSR* = 0x0010
  EV_RLSD* = 0x0020
  EV_BREAK* = 0x0040
  EV_ERR* = 0x0080
  EV_RING* = 0x0100
  EV_PERR* = 0x0200
  EV_RX80FULL* = 0x0400
  EV_EVENT1* = 0x0800
  EV_EVENT2* = 0x1000
  MS_CTS_ON* = 0x0010
  MS_DSR_ON* = 0x0020
  MS_RING_ON* = 0x0040
  MS_RLSD_ON* = 0x0080
  NOPARITY* = 0
  ODDPARITY* = 1
  EVENPARITY* = 2
  MARKPARITY* = 3
  SPACEPARITY* = 4
  ONESTOPBIT* = 0
  ONE5STOPBITS* = 1
  TWOSTOPBITS* = 2
  CBR_110* = 110
  CBR_300* = 300
  CBR_600* = 600
  CBR_1200* = 1200
  CBR_2400* = 2400
  CBR_4800* = 4800
  CBR_9600* = 9600
  CBR_14400* = 14400
  CBR_19200* = 19200
  CBR_38400* = 38400
  CBR_56000* = 56000
  CBR_57600* = 57600
  CBR_115200* = 115200
  CBR_128000* = 128000
  CBR_256000* = 256000
  DTR_CONTROL_DISABLE* = 0
  DTR_CONTROL_ENABLE* = 1
  DTR_CONTROL_HANDSHAKE* = 2
  RTS_CONTROL_DISABLE* = 0
  RTS_CONTROL_ENABLE* = 1
  RTS_CONTROL_HANDSHAKE* = 2
  RTS_CONTROL_TOGGLE* = 3
  BACKUP_INVALID* = 0
  BACKUP_DATA* = 1
  BACKUP_EA_DATA* = 2
  BACKUP_SECURITY_DATA* = 3
  BACKUP_ALTERNATE_DATA* = 4
  BACKUP_LINK* = 5
  BACKUP_PROPERTY_DATA* = 6
  BACKUP_OBJECT_ID* = 7
  BACKUP_REPARSE_DATA* = 8
  BACKUP_SPARSE_BLOCK* = 9
  STREAM_NORMAL_ATTRIBUTE* = 0
  STREAM_MODIFIED_WHEN_READ* = 1
  STREAM_CONTAINS_SECURITY* = 2
  STREAM_CONTAINS_PROPERTIES* = 4
  STARTF_USESHOWWINDOW* = 0x0001
  STARTF_USESIZE* = 0x0002
  STARTF_USEPOSITION* = 0x0004
  STARTF_USECOUNTCHARS* = 0x0008
  STARTF_USEFILLATTRIBUTE* = 0x0010
  STARTF_RUNFULLSCREEN* = 0x0020
  STARTF_FORCEONFEEDBACK* = 0x0040
  STARTF_FORCEOFFFEEDBACK* = 0x0080
  STARTF_USESTDHANDLES* = 0x0100
  STARTF_USEHOTKEY* = 0x0200
  TC_NORMAL* = 0
  TC_HARDERR* = 1
  TC_GP_TRAP* = 2
  TC_SIGNAL* = 3
  HINSTANCE_ERROR* = 32
  INVALID_FILE_SIZE* = 0xFFFFFFFF'u32
  TLS_OUT_OF_INDEXES* = 0xFFFFFFFF'u32
  WRITE_WATCH_FLAG_RESET* = 1
  LOGON32_LOGON_INTERACTIVE* = 2
  LOGON32_LOGON_NETWORK* = 3
  LOGON32_LOGON_BATCH* = 4
  LOGON32_LOGON_SERVICE* = 5
  LOGON32_LOGON_UNLOCK* = 7
  LOGON32_PROVIDER_DEFAULT* = 0
  LOGON32_PROVIDER_WINNT35* = 1
  LOGON32_PROVIDER_WINNT40* = 2
  LOGON32_PROVIDER_WINNT50* = 3
  MOVEFILE_REPLACE_EXISTING* = 1
  MOVEFILE_COPY_ALLOWED* = 2
  MOVEFILE_DELAY_UNTIL_REBOOT* = 4
  MOVEFILE_WRITE_THROUGH* = 8
  DDD_RAW_TARGET_PATH* = 1
  DDD_REMOVE_DEFINITION* = 2
  DDD_EXACT_MATCH_ON_REMOVE* = 4
  LOGON32_LOGON_NETWORK_CLEARTEXT* = 8
  LOGON32_LOGON_NEW_CREDENTIALS* = 9
  REPLACEFILE_WRITE_THROUGH* = 1
  REPLACEFILE_IGNORE_MERGE_ERRORS* = 2
  GET_MODULE_HANDLE_EX_FLAG_PIN* = 1
  GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT* = 2
  GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS* = 4
  ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID* = 0x01
  ACTCTX_FLAG_LANGID_VALID* = 0x02
  ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID* = 0x04
  ACTCTX_FLAG_RESOURCE_NAME_VALID* = 0x08
  ACTCTX_FLAG_SET_PROCESS_DEFAULT* = 0x10
  ACTCTX_FLAG_APPLICATION_NAME_VALID* = 0x20
  ACTCTX_FLAG_HMODULE_VALID* = 0x80
  DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION* = 1
  FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX* = 1
  QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX* = 0x04
  QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE* = 0x08
  QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS* = 0x10
  LOGON_WITH_PROFILE* = 1
  LOGON_NETCREDENTIALS_ONLY* = 2

type
  DCB* {.final, pure.} = object
    DCBlength*: DWORD
    BaudRate*: DWORD
    fBinary* {.bitsize: 1.}: DWORD
    fParity* {.bitsize: 1.}: DWORD
    fOutxCtsFlow* {.bitsize: 1.}: DWORD
    fOutxDsrFlow* {.bitsize: 1.}: DWORD
    fDtrControl* {.bitsize: 2.}: DWORD
    fDsrSensitivity* {.bitsize: 1.}: DWORD
    fTXContinueOnXoff* {.bitsize: 1.}: DWORD
    fOutX* {.bitsize: 1.}: DWORD
    fInX* {.bitsize: 1.}: DWORD
    fErrorChar* {.bitsize: 1.}: DWORD
    fNull* {.bitsize: 1.}: DWORD
    fRtsControl* {.bitsize: 2.}: DWORD
    fAbortOnError* {.bitsize: 1.}: DWORD
    fDummy2* {.bitsize: 17.}: DWORD
    wReserved*: WORD
    XonLim*: WORD
    XoffLim*: WORD
    ByteSize*: BYTE
    Parity*: BYTE
    StopBits*: BYTE
    XonChar*: char
    XoffChar*: char
    ErrorChar*: char
    EofChar*: char
    EvtChar*: char
    wReserved1*: WORD
  LPDCB* = ptr DCB
  COMSTAT* {.final, pure.} = object
    fCtsHold* {.bitsize: 1.}: DWORD
    fDsrHold* {.bitsize: 1.}: DWORD
    fRlsdHold* {.bitsize: 1.}: DWORD
    fXoffHold* {.bitsize: 1.}: DWORD
    fXoffSent* {.bitsize: 1.}: DWORD
    fEof* {.bitsize: 1.}: DWORD
    fTxim* {.bitsize: 1.}: DWORD
    fReserved* {.bitsize: 25.}: DWORD
    cbInQue*: DWORD
    cbOutQue*: DWORD
  LPCOMSTAT* = ptr COMSTAT
  LDT_ENTRY_UNION1_STRUCT1* = object
    BaseMid*: BYTE
    Flags1*: BYTE
    Flags2*: BYTE
    BaseHi*: BYTE
  LDT_ENTRY_UNION1_STRUCT2* = object
    BaseMid* {.bitsize: 8.}: DWORD
    Type* {.bitsize: 5.}: DWORD
    Dpl* {.bitsize: 2.}: DWORD
    Pres* {.bitsize: 1.}: DWORD
    LimitHi* {.bitsize: 4.}: DWORD
    Sys* {.bitsize: 1.}: DWORD
    Reserved_0* {.bitsize: 1.}: DWORD
    Default_Big* {.bitsize: 1.}: DWORD
    Granularity* {.bitsize: 1.}: DWORD
    BaseHi* {.bitsize: 8.}: DWORD
  LDT_ENTRY_UNION1* = object {.union.}
    Bytes*: LDT_ENTRY_UNION1_STRUCT1
    Bits*: LDT_ENTRY_UNION1_STRUCT2
  LDT_ENTRY* = object
    LimitLow*: WORD
    BaseLow*: WORD
    HighWord*: LDT_ENTRY_UNION1
  PLDT_ENTRY* = ptr LDT_ENTRY
  LPLDT_ENTRY* = ptr LDT_ENTRY
  FILETIME* {.final, pure.} = object
    dwLowDateTime*: DWORD
    dwHighDateTime*: DWORD
  PFILETIME* = ptr FILETIME
  LPFILETIME* = ptr FILETIME
  BY_HANDLE_FILE_INFORMATION* {.final, pure.} = object
    dwFileAttributes*: DWORD
    ftCreationTime*: FILETIME
    ftLastAccessTime*: FILETIME
    ftLastWriteTime*: FILETIME
    dwVolumeSerialNumber*: DWORD
    nFileSizeHigh*: DWORD
    nFileSizeLow*: DWORD
    nNumberOfLinks*: DWORD
    nFileIndexHigh*: DWORD
    nFileIndexLow*: DWORD
  LPBY_HANDLE_FILE_INFORMATION* = ptr BY_HANDLE_FILE_INFORMATION
type
  COMMCONFIG* {.final, pure.} = object
    dwSize*: DWORD
    wVersion*: WORD
    wReserved*: WORD
    dcb*: DCB
    dwProviderSubType*: DWORD
    dwProviderOffset*: DWORD
    dwProviderSize*: DWORD
    wcProviderData*: array[1, WCHAR]
  LPCOMMCONFIG* = ptr COMMCONFIG
  COMMTIMEOUTS* {.final, pure.} = object
    ReadIntervalTimeout*: DWORD
    ReadTotalTimeoutMultiplier*: DWORD
    ReadTotalTimeoutConstant*: DWORD
    WriteTotalTimeoutMultiplier*: DWORD
    WriteTotalTimeoutConstant*: DWORD
  LPCOMMTIMEOUTS* = ptr COMMTIMEOUTS
  CREATE_PROCESS_DEBUG_INFO* {.final, pure.} = object
    hFile*: HANDLE
    hProcess*: HANDLE
    hThread*: HANDLE
    lpBaseOfImage*: LPVOID
    dwDebugInfoFileOffset*: DWORD
    nDebugInfoSize*: DWORD
    lpThreadLocalBase*: LPVOID
    lpStartAddress*: LPTHREAD_START_ROUTINE
    lpImageName*: LPVOID
    fUnicode*: WORD
  LPCREATE_PROCESS_DEBUG_INFO* = ptr CREATE_PROCESS_DEBUG_INFO
  CREATE_THREAD_DEBUG_INFO* {.final, pure.} = object
    hThread*: HANDLE
    lpThreadLocalBase*: LPVOID
    lpStartAddress*: LPTHREAD_START_ROUTINE
  LPCREATE_THREAD_DEBUG_INFO* = ptr CREATE_THREAD_DEBUG_INFO
  EXCEPTION_DEBUG_INFO* {.final, pure.} = object
    ExceptionRecord*: EXCEPTION_RECORD
    dwFirstChance*: DWORD
  LPEXCEPTION_DEBUG_INFO* = ptr EXCEPTION_DEBUG_INFO
  EXIT_THREAD_DEBUG_INFO* {.final, pure.} = object
    dwExitCode*: DWORD
  LPEXIT_THREAD_DEBUG_INFO* = ptr EXIT_THREAD_DEBUG_INFO
  EXIT_PROCESS_DEBUG_INFO* {.final, pure.} = object
    dwExitCode*: DWORD
  LPEXIT_PROCESS_DEBUG_INFO* = ptr EXIT_PROCESS_DEBUG_INFO
  LOAD_DLL_DEBUG_INFO* {.final, pure.} = object
    hFile*: HANDLE
    lpBaseOfDll*: LPVOID
    dwDebugInfoFileOffset*: DWORD
    nDebugInfoSize*: DWORD
    lpImageName*: LPVOID
    fUnicode*: WORD
  LPLOAD_DLL_DEBUG_INFO* = ptr LOAD_DLL_DEBUG_INFO
  UNLOAD_DLL_DEBUG_INFO* {.final, pure.} = object
    lpBaseOfDll*: LPVOID
  LPUNLOAD_DLL_DEBUG_INFO* = ptr UNLOAD_DLL_DEBUG_INFO
  OUTPUT_DEBUG_STRING_INFO* {.final, pure.} = object
    lpDebugStringData*: LPSTR
    fUnicode*: WORD
    nDebugStringLength*: WORD
  LPOUTPUT_DEBUG_STRING_INFO* = ptr OUTPUT_DEBUG_STRING_INFO
  RIP_INFO* {.final, pure.} = object
    dwError*: DWORD
    dwType*: DWORD
  LPRIP_INFO* = ptr RIP_INFO
  DEBUG_EVENT_UNION1* {.final, union, pure.} = object
    Exception*: EXCEPTION_DEBUG_INFO
    CreateThread*: CREATE_THREAD_DEBUG_INFO
    CreateProcessInfo*: CREATE_PROCESS_DEBUG_INFO
    ExitThread*: EXIT_THREAD_DEBUG_INFO
    ExitProcess*: EXIT_PROCESS_DEBUG_INFO
    LoadDll*: LOAD_DLL_DEBUG_INFO
    UnloadDll*: UNLOAD_DLL_DEBUG_INFO
    DebugString*: OUTPUT_DEBUG_STRING_INFO
    RipInfo*: RIP_INFO
  DEBUG_EVENT* {.final, pure.} = object
    dwDebugEventCode*: DWORD
    dwProcessId*: DWORD
    dwThreadId*: DWORD
    u1*: DEBUG_EVENT_UNION1
  LPDEBUG_EVENT* = ptr DEBUG_EVENT
  OVERLAPPED_UNION1_STRUCT1* {.final, pure.} = object
    Offset*: DWORD
    OffsetHigh*: DWORD
  OVERLAPPED_UNION1* {.final, union, pure.} = object
    s1*: OVERLAPPED_UNION1_STRUCT1
    Pointer*: PVOID
  OVERLAPPED* {.final, pure.} = object
    Internal*: ULONG_PTR
    InternalHigh*: ULONG_PTR
    u1*: OVERLAPPED_UNION1
    hEvent*: HANDLE
  POVERLAPPED* = ptr OVERLAPPED
  LPOVERLAPPED* = ptr OVERLAPPED
  STARTUPINFOA* {.final, pure.} = object
    cb*: DWORD
    lpReserved*: LPSTR
    lpDesktop*: LPSTR
    lpTitle*: LPSTR
    dwX*: DWORD
    dwY*: DWORD
    dwXSize*: DWORD
    dwYSize*: DWORD
    dwXCountChars*: DWORD
    dwYCountChars*: DWORD
    dwFillAttribute*: DWORD
    dwFlags*: DWORD
    wShowWindow*: WORD
    cbReserved2*: WORD
    lpReserved2*: PBYTE
    hStdInput*: HANDLE
    hStdOutput*: HANDLE
    hStdError*: HANDLE
  LPSTARTUPINFOA* = ptr STARTUPINFOA
  STARTUPINFOW* {.final, pure.} = object
    cb*: DWORD
    lpReserved*: LPWSTR
    lpDesktop*: LPWSTR
    lpTitle*: LPWSTR
    dwX*: DWORD
    dwY*: DWORD
    dwXSize*: DWORD
    dwYSize*: DWORD
    dwXCountChars*: DWORD
    dwYCountChars*: DWORD
    dwFillAttribute*: DWORD
    dwFlags*: DWORD
    wShowWindow*: WORD
    cbReserved2*: WORD
    lpReserved2*: PBYTE
    hStdInput*: HANDLE
    hStdOutput*: HANDLE
    hStdError*: HANDLE
  LPSTARTUPINFOW* = ptr STARTUPINFOW
  PROCESS_INFORMATION* {.final, pure.} = object
    hProcess*: HANDLE
    hThread*: HANDLE
    dwProcessId*: DWORD
    dwThreadId*: DWORD
  PPROCESS_INFORMATION* = ptr PROCESS_INFORMATION
  LPPROCESS_INFORMATION* = ptr PROCESS_INFORMATION
  CRITICAL_SECTION_DEBUG* {.final, pure.} = object
    Type*: WORD
    CreatorBackTraceIndex*: WORD
    CriticalSection*: ptr CRITICAL_SECTION
    ProcessLocksList*: LIST_ENTRY
    EntryCount*: DWORD
    ContentionCount*: DWORD
    Spare*: array[2, DWORD]
  PCRITICAL_SECTION_DEBUG* = ptr CRITICAL_SECTION_DEBUG
  CRITICAL_SECTION* {.final, pure.} = object
    DebugInfo*: PCRITICAL_SECTION_DEBUG
    LockCount*: LONG
    RecursionCount*: LONG
    OwningThread*: HANDLE
    LockSemaphore*: HANDLE
    SpinCount*: DWORD
  PCRITICAL_SECTION* = ptr CRITICAL_SECTION
  LPCRITICAL_SECTION* = ptr CRITICAL_SECTION
  SYSTEMTIME* {.final, pure.} = object
    wYear*: WORD
    wMonth*: WORD
    wDayOfWeek*: WORD
    wDay*: WORD
    wHour*: WORD
    wMinute*: WORD
    wSecond*: WORD
    wMilliseconds*: WORD
  LPSYSTEMTIME* = ptr SYSTEMTIME
  WIN32_FILE_ATTRIBUTE_DATA* {.final, pure.} = object
    dwFileAttributes*: DWORD
    ftCreationTime*: FILETIME
    ftLastAccessTime*: FILETIME
    ftLastWriteTime*: FILETIME
    nFileSizeHigh*: DWORD
    nFileSizeLow*: DWORD
  LPWIN32_FILE_ATTRIBUTE_DATA* = ptr WIN32_FILE_ATTRIBUTE_DATA
  WIN32_FIND_DATAA* {.final, pure.} = object
    dwFileAttributes*: DWORD
    ftCreationTime*: FILETIME
    ftLastAccessTime*: FILETIME
    ftLastWriteTime*: FILETIME
    nFileSizeHigh*: DWORD
    nFileSizeLow*: DWORD
    dwReserved0*: DWORD
    dwReserved1*: DWORD
    cFileName*: array[MAX_PATH, CHAR]
    cAlternateFileName*: array[14, CHAR]
  PWIN32_FIND_DATAA* = ptr WIN32_FIND_DATAA
  LPWIN32_FIND_DATAA* = ptr WIN32_FIND_DATAA
  WIN32_FIND_DATAW* {.final, pure.} = object
    dwFileAttributes*: DWORD
    ftCreationTime*: FILETIME
    ftLastAccessTime*: FILETIME
    ftLastWriteTime*: FILETIME
    nFileSizeHigh*: DWORD
    nFileSizeLow*: DWORD
    dwReserved0*: DWORD
    dwReserved1*: DWORD
    cFileName*: array[MAX_PATH, WCHAR]
    cAlternateFileName*: array[14, WCHAR]
  PWIN32_FIND_DATAW* = ptr WIN32_FIND_DATAW
  LPWIN32_FIND_DATAW* = ptr WIN32_FIND_DATAW
  WIN32_STREAM_ID* {.final, pure.} = object
    dwStreamId*: DWORD
    dwStreamAttributes*: DWORD
    Size*: LARGE_INTEGER
    dwStreamNameSize*: DWORD
    cStreamName*: array[1, WCHAR]
  LPWIN32_STREAM_ID* = ptr WIN32_STREAM_ID
  FINDEX_INFO_LEVELS* = int32
  FINDEX_SEARCH_OPS* = int32
  ACL_INFORMATION_CLASS* {.pure.} = enum
    AclRevisionInformation = 1
    AclSizeInformation
  HW_PROFILE_INFOA* {.final, pure.} = object
    dwDockInfo*: DWORD
    szHwProfileGuid*: array[HW_PROFILE_GUIDLEN, CHAR]
    szHwProfileName*: array[MAX_PROFILE_LEN, CHAR]
  LPHW_PROFILE_INFOA* = ptr HW_PROFILE_INFOA
  HW_PROFILE_INFOW* {.final, pure.} = object
    dwDockInfo*: DWORD
    szHwProfileGuid*: array[HW_PROFILE_GUIDLEN, WCHAR]
    szHwProfileName*: array[MAX_PROFILE_LEN, WCHAR]
  LPHW_PROFILE_INFOW* = ptr HW_PROFILE_INFOW
  GET_FILEEX_INFO_LEVELS* = int32
  SYSTEM_INFO_UNION1_STRUCT1* {.final, pure.} = object
    wProcessorArchitecture*: WORD
    wReserved*: WORD
  SYSTEM_INFO_UNION1* {.final, union, pure.} = object
    dwOemId*: DWORD
    s1*: SYSTEM_INFO_UNION1_STRUCT1
  SYSTEM_INFO* {.final, pure.} = object
    u1*: SYSTEM_INFO_UNION1
    dwPageSize*: DWORD
    lpMinimumApplicationAddress*: PVOID
    lpMaximumApplicationAddress*: PVOID
    dwActiveProcessorMask*: DWORD
    dwNumberOfProcessors*: DWORD
    dwProcessorType*: DWORD
    dwAllocationGranularity*: DWORD
    wProcessorLevel*: WORD
    wProcessorRevision*: WORD
  LPSYSTEM_INFO* = ptr SYSTEM_INFO
  SYSTEM_POWER_STATUS* {.final, pure.} = object
    ACLineStatus*: BYTE
    BatteryFlag*: BYTE
    BatteryLifePercent*: BYTE
    Reserved1*: BYTE
    BatteryLifeTime*: DWORD
    BatteryFullLifeTime*: DWORD
  LPSYSTEM_POWER_STATUS* = ptr SYSTEM_POWER_STATUS
  TIME_ZONE_INFORMATION* {.final, pure.} = object
    Bias*: LONG
    StandardName*: array[32, WCHAR]
    StandardDate*: SYSTEMTIME
    StandardBias*: LONG
    DaylightName*: array[32, WCHAR]
    DaylightDate*: SYSTEMTIME
    DaylightBias*: LONG
  LPTIME_ZONE_INFORMATION* = ptr TIME_ZONE_INFORMATION
  MEMORYSTATUS* {.final, pure.} = object
    dwLength*: DWORD
    dwMemoryLoad*: DWORD
    dwTotalPhys*: DWORD
    dwAvailPhys*: DWORD
    dwTotalPageFile*: DWORD
    dwAvailPageFile*: DWORD
    dwTotalVirtual*: DWORD
    dwAvailVirtual*: DWORD
  LPMEMORYSTATUS* = ptr MEMORYSTATUS
  MEMORYSTATUSEX* {.final, pure.} = object
    dwLength*: DWORD
    dwMemoryLoad*: DWORD
    ullTotalPhys*: DWORDLONG
    ullAvailPhys*: DWORDLONG
    ullTotalPageFile*: DWORDLONG
    ullAvailPageFile*: DWORDLONG
    ullTotalVirtual*: DWORDLONG
    ullAvailVirtual*: DWORDLONG
    ullAvailExtendedVirtual*: DWORDLONG
  LPMEMORYSTATUSEX* = ptr MEMORYSTATUSEX
  PROCESS_HEAP_ENTRY_UNION1_Region* {.final, pure.} = object
    dwCommittedSize*: DWORD
    dwUnCommittedSize*: DWORD
    lpFirstBlock*: LPVOID
    lpLastBlock*: LPVOID
  PROCESS_HEAP_ENTRY_UNION1_Block* {.final, pure.} = object
    hMem*: HANDLE
    dwReserved*: array[3, DWORD]
  PROCESS_HEAP_ENTRY_UNION1* {.final, union, pure.} = object
    b*: PROCESS_HEAP_ENTRY_UNION1_Block
    r*: PROCESS_HEAP_ENTRY_UNION1_Region
  PROCESS_HEAP_ENTRY* {.final, pure.} = object
    lpData*: PVOID
    cbData*: DWORD
    cbOverhead*: BYTE
    iRegionIndex*: BYTE
    wFlags*: WORD
    _*: PROCESS_HEAP_ENTRY_UNION1
  LPPROCESS_HEAP_ENTRY* = ptr PROCESS_HEAP_ENTRY
  OFSTRUCT* {.final, pure.} = object
    cBytes*: BYTE
    fFixedDisk*: BYTE
    nErrCode*: WORD
    Reserved1*: WORD
    Reserved2*: WORD
    szPathName*: array[128, CHAR]
  LPOFSTRUCT* = ptr OFSTRUCT
  POFSTRUCT* = ptr OFSTRUCT
  WIN_CERTIFICATE* {.final, pure.} = object
    dwLength*: DWORD
    wRevision*: WORD
    wCertificateType*: WORD
    bCertificate*: array[1, BYTE]
  LPWIN_CERTIFICATE* = ptr WIN_CERTIFICATE
  COMPUTER_NAME_FORMAT* = int32
  ACTCTXA* {.final, pure.} = object
    cbSize*: ULONG
    dwFlags*: DWORD
    lpSource*: LPCSTR
    wProcessorArchitecture*: USHORT
    wLangId*: LANGID
    lpAssemblyDirectory*: LPCSTR
    lpResourceName*: LPCSTR
    lpApplicationName*: LPCSTR
    hModule*: HMODULE
  PACTCTXA* = ptr ACTCTXA
  PCACTCTXA* = ptr ACTCTXA
  ACTCTXW* {.final, pure.} = object
    cbSize*: ULONG
    dwFlags*: DWORD
    lpSource*: LPCWSTR
    wProcessorArchitecture*: USHORT
    wLangId*: LANGID
    lpAssemblyDirectory*: LPCWSTR
    lpResourceName*: LPCWSTR
    lpApplicationName*: LPCWSTR
    hModule*: HMODULE
  PACTCTXW* = ptr ACTCTXW
  PCACTCTXW* = ptr ACTCTXW
  ACTCTX_SECTION_KEYED_DATA* {.final, pure.} = object
    cbSize*: ULONG
    ulDataFormatVersion*: ULONG
    lpData*: PVOID
    ulLength*: ULONG
    lpSectionGlobalData*: PVOID
    ulSectionGlobalDataLength*: ULONG
    lpSectionBase*: PVOID
    ulSectionTotalLength*: ULONG
    hActCtx*: HANDLE
    ulAssemblyRosterIndex*: HANDLE
  PACTCTX_SECTION_KEYED_DATA* = ptr ACTCTX_SECTION_KEYED_DATA
  PCACTCTX_SECTION_KEYED_DATA* = ptr ACTCTX_SECTION_KEYED_DATA
  MEMORY_RESOURCE_NOTIFICATION_TYPE* = int32
  EXECUTION_STATE* = DWORD
  LPTHREAD_START_ROUTINE* = proc (P1: LPVOID): DWORD {.stdcall.}
  LPPROGRESS_ROUTINE* = proc (P1: LARGE_INTEGER, P2: LARGE_INTEGER, P3: LARGE_INTEGER, P4: LARGE_INTEGER, P5: DWORD, P6: DWORD, P7: HANDLE, P8: HANDLE, P9: LPVOID): DWORD {.stdcall.}
  LPFIBER_START_ROUTINE* = proc (P1: PVOID): void {.stdcall.}
  ENUMRESLANGPROCA* = proc (P1: HMODULE, P2: LPCSTR, P3: LPCSTR, P4: WORD, P5: LONG): BOOL {.stdcall.}
  ENUMRESLANGPROCW* = proc (P1: HMODULE, P2: LPCWSTR, P3: LPCWSTR, P4: WORD, P5: LONG): BOOL {.stdcall.}
  ENUMRESNAMEPROCA* = proc (P1: HMODULE, P2: LPCSTR, P3: LPSTR, P4: LONG): BOOL {.stdcall.}
  ENUMRESNAMEPROCW* = proc (P1: HMODULE, P2: LPCWSTR, P3: LPWSTR, P4: LONG): BOOL {.stdcall.}
  ENUMRESTYPEPROCA* = proc (P1: HMODULE, P2: LPSTR, P3: LONG): BOOL {.stdcall.}
  ENUMRESTYPEPROCW* = proc (P1: HMODULE, P2: LPWSTR, P3: LONG): BOOL {.stdcall.}
  LPOVERLAPPED_COMPLETION_ROUTINE* = proc (P1: DWORD, P2: DWORD, P3: LPOVERLAPPED): void {.stdcall.}
  PTOP_LEVEL_EXCEPTION_FILTER* = proc (P1: LPEXCEPTION_POINTERS): LONG {.stdcall.}
  LPTOP_LEVEL_EXCEPTION_FILTER* = PTOP_LEVEL_EXCEPTION_FILTER
  PAPCFUNC* = proc (P1: ULONG_PTR): void {.stdcall.}
  PTIMERAPCROUTINE* = proc (P1: PVOID, P2: DWORD, P3: DWORD): void {.stdcall.}
  WAITORTIMERCALLBACK* = proc (P1: PVOID, P2: BOOLEAN): void {.stdcall.}

proc MAKEINTATOM*(i: int16): LPTSTR = cast[LPTSTR](i)
proc AddAtomA*(P1: LPCSTR): ATOM {.winapi, dynlib: "kernel32", importc.}
proc AddAtomW*(P1: LPCWSTR): ATOM {.winapi, dynlib: "kernel32", importc.}
proc AreFileApisANSI*(): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Beep*(P1: DWORD, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc BeginUpdateResourceA*(P1: LPCSTR, P2: BOOL): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc BeginUpdateResourceW*(P1: LPCWSTR, P2: BOOL): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc BuildCommDCBA*(P1: LPCSTR, P2: LPDCB): BOOL {.winapi, dynlib: "kernel32", importc.}
proc BuildCommDCBW*(P1: LPCWSTR, P2: LPDCB): BOOL {.winapi, dynlib: "kernel32", importc.}
proc BuildCommDCBAndTimeoutsA*(P1: LPCSTR, P2: LPDCB, P3: LPCOMMTIMEOUTS): BOOL {.winapi, dynlib: "kernel32", importc.}
proc BuildCommDCBAndTimeoutsW*(P1: LPCWSTR, P2: LPDCB, P3: LPCOMMTIMEOUTS): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CallNamedPipeA*(P1: LPCSTR, P2: PVOID, P3: DWORD, P4: PVOID, P5: DWORD, P6: PDWORD, P7: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CallNamedPipeW*(P1: LPCWSTR, P2: PVOID, P3: DWORD, P4: PVOID, P5: DWORD, P6: PDWORD, P7: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CancelDeviceWakeupRequest*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CheckTokenMembership*(P1: HANDLE, P2: PSID, P3: PBOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ClearCommBreak*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ClearCommError*(P1: HANDLE, P2: PDWORD, P3: LPCOMSTAT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CloseHandle*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CommConfigDialogA*(P1: LPCSTR, P2: HWND, P3: LPCOMMCONFIG): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CommConfigDialogW*(P1: LPCWSTR, P2: HWND, P3: LPCOMMCONFIG): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CompareFileTime*(P1: ptr FILETIME, P2: ptr FILETIME): LONG {.winapi, dynlib: "kernel32", importc.}
proc ContinueDebugEvent*(P1: DWORD, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CopyFileA*(P1: LPCSTR, P2: LPCSTR, P3: BOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CopyFileW*(P1: LPCWSTR, P2: LPCWSTR, P3: BOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CopyFileExA*(P1: LPCSTR, P2: LPCSTR, P3: LPPROGRESS_ROUTINE, P4: LPVOID, P5: LPBOOL, P6: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CopyFileExW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPPROGRESS_ROUTINE, P4: LPVOID, P5: LPBOOL, P6: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CreateDirectoryA*(P1: LPCSTR, P2: LPSECURITY_ATTRIBUTES): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CreateDirectoryW*(P1: LPCWSTR, P2: LPSECURITY_ATTRIBUTES): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CreateDirectoryExA*(P1: LPCSTR, P2: LPCSTR, P3: LPSECURITY_ATTRIBUTES): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CreateDirectoryExW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPSECURITY_ATTRIBUTES): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CreateEventA*(P1: LPSECURITY_ATTRIBUTES, P2: BOOL, P3: BOOL, P4: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateEventW*(P1: LPSECURITY_ATTRIBUTES, P2: BOOL, P3: BOOL, P4: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateFileA*(P1: LPCSTR, P2: DWORD, P3: DWORD, P4: LPSECURITY_ATTRIBUTES, P5: DWORD, P6: DWORD, P7: HANDLE): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateFileW*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: LPSECURITY_ATTRIBUTES, P5: DWORD, P6: DWORD, P7: HANDLE): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateIoCompletionPort*(P1: HANDLE, P2: HANDLE, P3: ULONG_PTR, P4: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateMailslotA*(P1: LPCSTR, P2: DWORD, P3: DWORD, P4: LPSECURITY_ATTRIBUTES): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateMailslotW*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: LPSECURITY_ATTRIBUTES): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateMutexA*(P1: LPSECURITY_ATTRIBUTES, P2: BOOL, P3: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateMutexW*(P1: LPSECURITY_ATTRIBUTES, P2: BOOL, P3: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreatePipe*(P1: PHANDLE, P2: PHANDLE, P3: LPSECURITY_ATTRIBUTES, P4: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CreateProcessA*(P1: LPCSTR, P2: LPSTR, P3: LPSECURITY_ATTRIBUTES, P4: LPSECURITY_ATTRIBUTES, P5: BOOL, P6: DWORD, P7: PVOID, P8: LPCSTR, P9: LPSTARTUPINFOA, P10: LPPROCESS_INFORMATION): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CreateProcessW*(P1: LPCWSTR, P2: LPWSTR, P3: LPSECURITY_ATTRIBUTES, P4: LPSECURITY_ATTRIBUTES, P5: BOOL, P6: DWORD, P7: PVOID, P8: LPCWSTR, P9: LPSTARTUPINFOW, P10: LPPROCESS_INFORMATION): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CreateSemaphoreA*(P1: LPSECURITY_ATTRIBUTES, P2: LONG, P3: LONG, P4: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateSemaphoreW*(P1: LPSECURITY_ATTRIBUTES, P2: LONG, P3: LONG, P4: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateThread*(P1: LPSECURITY_ATTRIBUTES, P2: DWORD, P3: LPTHREAD_START_ROUTINE, P4: PVOID, P5: DWORD, P6: PDWORD): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc DebugActiveProcess*(P1: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DebugBreak*(): void {.winapi, dynlib: "kernel32", importc.}
proc DeleteAtom*(P1: ATOM): ATOM {.winapi, dynlib: "kernel32", importc.}
proc DeleteCriticalSection*(P1: PCRITICAL_SECTION): void {.winapi, dynlib: "kernel32", importc.}
proc DeleteFileA*(P1: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DeleteFileW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DisableThreadLibraryCalls*(P1: HMODULE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DosDateTimeToFileTime*(P1: WORD, P2: WORD, P3: LPFILETIME): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DuplicateHandle*(P1: HANDLE, P2: HANDLE, P3: HANDLE, P4: PHANDLE, P5: DWORD, P6: BOOL, P7: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EndUpdateResourceA*(P1: HANDLE, P2: BOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EndUpdateResourceW*(P1: HANDLE, P2: BOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnterCriticalSection*(P1: LPCRITICAL_SECTION): void {.winapi, dynlib: "kernel32", importc.}
proc EnumResourceLanguagesA*(P1: HMODULE, P2: LPCSTR, P3: LPCSTR, P4: ENUMRESLANGPROCA, P5: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumResourceLanguagesW*(P1: HMODULE, P2: LPCWSTR, P3: LPCWSTR, P4: ENUMRESLANGPROCW, P5: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumResourceNamesA*(P1: HMODULE, P2: LPCSTR, P3: ENUMRESNAMEPROCA, P4: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumResourceNamesW*(P1: HMODULE, P2: LPCWSTR, P3: ENUMRESNAMEPROCW, P4: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumResourceTypesA*(P1: HMODULE, P2: ENUMRESTYPEPROCA, P3: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumResourceTypesW*(P1: HMODULE, P2: ENUMRESTYPEPROCW, P3: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EscapeCommFunction*(P1: HANDLE, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ExitProcess*(P1: UINT): void {.winapi, dynlib: "kernel32", importc.}
proc ExitThread*(P1: DWORD): void {.winapi, dynlib: "kernel32", importc.}
proc ExpandEnvironmentStringsA*(P1: LPCSTR, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc ExpandEnvironmentStringsW*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc FatalAppExitA*(P1: UINT, P2: LPCSTR): void {.winapi, dynlib: "kernel32", importc.}
proc FatalAppExitW*(P1: UINT, P2: LPCWSTR): void {.winapi, dynlib: "kernel32", importc.}
proc FatalExit*(P1: int32): void {.winapi, dynlib: "kernel32", importc.}
proc FileTimeToDosDateTime*(P1: ptr FILETIME, P2: LPWORD, P3: LPWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FileTimeToLocalFileTime*(P1: ptr FILETIME, P2: LPFILETIME): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FileTimeToSystemTime*(P1: ptr FILETIME, P2: LPSYSTEMTIME): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FindAtomA*(P1: LPCSTR): ATOM {.winapi, dynlib: "kernel32", importc.}
proc FindAtomW*(P1: LPCWSTR): ATOM {.winapi, dynlib: "kernel32", importc.}
proc FindClose*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FindCloseChangeNotification*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FindFirstChangeNotificationA*(P1: LPCSTR, P2: BOOL, P3: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc FindFirstChangeNotificationW*(P1: LPCWSTR, P2: BOOL, P3: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc FindFirstFileA*(P1: LPCSTR, P2: LPWIN32_FIND_DATAA): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc FindFirstFileW*(P1: LPCWSTR, P2: LPWIN32_FIND_DATAW): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc FindNextChangeNotification*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FindNextFileA*(P1: HANDLE, P2: LPWIN32_FIND_DATAA): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FindNextFileW*(P1: HANDLE, P2: LPWIN32_FIND_DATAW): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FindResourceA*(P1: HMODULE, P2: LPCSTR, P3: LPCSTR): HRSRC {.winapi, dynlib: "kernel32", importc.}
proc FindResourceW*(P1: HINSTANCE, P2: LPCWSTR, P3: LPCWSTR): HRSRC {.winapi, dynlib: "kernel32", importc.}
proc FindResourceExA*(P1: HINSTANCE, P2: LPCSTR, P3: LPCSTR, P4: WORD): HRSRC {.winapi, dynlib: "kernel32", importc.}
proc FindResourceExW*(P1: HINSTANCE, P2: LPCWSTR, P3: LPCWSTR, P4: WORD): HRSRC {.winapi, dynlib: "kernel32", importc.}
proc FlushFileBuffers*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FlushInstructionCache*(P1: HANDLE, P2: PCVOID, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FormatMessageA*(P1: DWORD, P2: PCVOID, P3: DWORD, P4: DWORD, P5: LPSTR, P6: DWORD, P7: ptr va_list): DWORD {.winapi, dynlib: "kernel32", importc.}
proc FormatMessageW*(P1: DWORD, P2: PCVOID, P3: DWORD, P4: DWORD, P5: LPWSTR, P6: DWORD, P7: ptr va_list): DWORD {.winapi, dynlib: "kernel32", importc.}
proc FreeEnvironmentStringsA*(P1: LPSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FreeEnvironmentStringsW*(P1: LPWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FreeLibrary*(P1: HMODULE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FreeLibraryAndExitThread*(P1: HMODULE, P2: DWORD): void {.winapi, dynlib: "kernel32", importc.}
proc FreeResource*(P1: HGLOBAL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetAtomNameA*(P1: ATOM, P2: LPSTR, P3: int32): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetAtomNameW*(P1: ATOM, P2: LPWSTR, P3: int32): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetCommandLineA*(): LPSTR {.winapi, dynlib: "kernel32", importc.}
proc GetCommandLineW*(): LPWSTR {.winapi, dynlib: "kernel32", importc.}
proc GetCommConfig*(P1: HANDLE, P2: LPCOMMCONFIG, P3: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetCommMask*(P1: HANDLE, P2: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetCommModemStatus*(P1: HANDLE, P2: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetCommProperties*(P1: HANDLE, P2: LPCOMMPROP): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetCommState*(P1: HANDLE, P2: LPDCB): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetCommTimeouts*(P1: HANDLE, P2: LPCOMMTIMEOUTS): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetComputerNameA*(P1: LPSTR, P2: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetComputerNameW*(P1: LPWSTR, P2: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetCurrentDirectoryA*(P1: DWORD, P2: LPSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetCurrentDirectoryW*(P1: DWORD, P2: LPWSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetCurrentProcess*(): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc GetCurrentProcessId*(): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetCurrentThread*(): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc GetCurrentThreadId*(): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetCurrentTime*(): DWORD {.winapi, dynlib: "kernel32", importc: "GetTickCount".}
proc GetDefaultCommConfigA*(P1: LPCSTR, P2: LPCOMMCONFIG, P3: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetDefaultCommConfigW*(P1: LPCWSTR, P2: LPCOMMCONFIG, P3: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetDiskFreeSpaceA*(P1: LPCSTR, P2: PDWORD, P3: PDWORD, P4: PDWORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetDiskFreeSpaceW*(P1: LPCWSTR, P2: PDWORD, P3: PDWORD, P4: PDWORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetDiskFreeSpaceExA*(P1: LPCSTR, P2: PULARGE_INTEGER, P3: PULARGE_INTEGER, P4: PULARGE_INTEGER): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetDiskFreeSpaceExW*(P1: LPCWSTR, P2: PULARGE_INTEGER, P3: PULARGE_INTEGER, P4: PULARGE_INTEGER): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetDriveTypeA*(P1: LPCSTR): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetDriveTypeW*(P1: LPCWSTR): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetEnvironmentStrings*(): LPSTR {.winapi, dynlib: "kernel32", importc.}
proc GetEnvironmentStringsA*(): LPSTR {.winapi, dynlib: "kernel32", importc.}
proc GetEnvironmentStringsW*(): LPWSTR {.winapi, dynlib: "kernel32", importc.}
proc GetEnvironmentVariableA*(P1: LPCSTR, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetEnvironmentVariableW*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetExitCodeProcess*(P1: HANDLE, P2: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetExitCodeThread*(P1: HANDLE, P2: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetFileAttributesA*(P1: LPCSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetFileAttributesW*(P1: LPCWSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetFileInformationByHandle*(P1: HANDLE, P2: LPBY_HANDLE_FILE_INFORMATION): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetFileSize*(P1: HANDLE, P2: PDWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetFileTime*(P1: HANDLE, P2: LPFILETIME, P3: LPFILETIME, P4: LPFILETIME): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetFileType*(P1: HANDLE): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetFullPathNameA*(P1: LPCSTR, P2: DWORD, P3: LPSTR, P4: ptr LPSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetFullPathNameW*(P1: LPCWSTR, P2: DWORD, P3: LPWSTR, P4: ptr LPWSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetLastError*(): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetLocalTime*(P1: LPSYSTEMTIME): void {.winapi, dynlib: "kernel32", importc.}
proc GetLogicalDrives*(): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetLogicalDriveStringsA*(P1: DWORD, P2: LPSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetLogicalDriveStringsW*(P1: DWORD, P2: LPWSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetMailslotInfo*(P1: HANDLE, P2: PDWORD, P3: PDWORD, P4: PDWORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetModuleFileNameA*(P1: HINSTANCE, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetModuleFileNameW*(P1: HINSTANCE, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetModuleHandleA*(P1: LPCSTR): HMODULE {.winapi, dynlib: "kernel32", importc.}
proc GetModuleHandleW*(P1: LPCWSTR): HMODULE {.winapi, dynlib: "kernel32", importc.}
proc GetNamedPipeHandleStateA*(P1: HANDLE, P2: PDWORD, P3: PDWORD, P4: PDWORD, P5: PDWORD, P6: LPSTR, P7: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetNamedPipeHandleStateW*(P1: HANDLE, P2: PDWORD, P3: PDWORD, P4: PDWORD, P5: PDWORD, P6: LPWSTR, P7: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetNamedPipeInfo*(P1: HANDLE, P2: PDWORD, P3: PDWORD, P4: PDWORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetOverlappedResult*(P1: HANDLE, P2: LPOVERLAPPED, P3: PDWORD, P4: BOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetPriorityClass*(P1: HANDLE): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetPrivateProfileIntA*(P1: LPCSTR, P2: LPCSTR, P3: INT, P4: LPCSTR): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetPrivateProfileIntW*(P1: LPCWSTR, P2: LPCWSTR, P3: INT, P4: LPCWSTR): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetPrivateProfileSectionA*(P1: LPCSTR, P2: LPSTR, P3: DWORD, P4: LPCSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetPrivateProfileSectionW*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD, P4: LPCWSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetPrivateProfileSectionNamesA*(P1: LPSTR, P2: DWORD, P3: LPCSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetPrivateProfileSectionNamesW*(P1: LPWSTR, P2: DWORD, P3: LPCWSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetPrivateProfileStringA*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: LPSTR, P5: DWORD, P6: LPCSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetPrivateProfileStringW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: DWORD, P6: LPCWSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetPrivateProfileStructA*(P1: LPCSTR, P2: LPCSTR, P3: LPVOID, P4: UINT, P5: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetPrivateProfileStructW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPVOID, P4: UINT, P5: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetProcAddress*(P1: HINSTANCE, P2: LPCSTR): FARPROC {.winapi, dynlib: "kernel32", importc.}
proc GetProcessAffinityMask*(P1: HANDLE, P2: PDWORD, P3: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetProcessVersion*(P1: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetProfileIntA*(P1: LPCSTR, P2: LPCSTR, P3: INT): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetProfileIntW*(P1: LPCWSTR, P2: LPCWSTR, P3: INT): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetProfileSectionA*(P1: LPCSTR, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetProfileSectionW*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetProfileStringA*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: LPSTR, P5: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetProfileStringW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetShortPathNameA*(P1: LPCSTR, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetShortPathNameW*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetStartupInfoA*(P1: LPSTARTUPINFOA): VOID {.winapi, dynlib: "kernel32", importc.}
proc GetStartupInfoW*(P1: LPSTARTUPINFOW): VOID {.winapi, dynlib: "kernel32", importc.}
proc GetStdHandle*(P1: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc GetSystemDirectoryA*(P1: LPSTR, P2: UINT): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetSystemDirectoryW*(P1: LPWSTR, P2: UINT): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetSystemInfo*(P1: LPSYSTEM_INFO): VOID {.winapi, dynlib: "kernel32", importc.}
proc GetSystemTime*(P1: LPSYSTEMTIME): VOID {.winapi, dynlib: "kernel32", importc.}
proc GetSystemTimeAdjustment*(P1: PDWORD, P2: PDWORD, P3: PBOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetSystemTimeAsFileTime*(P1: LPFILETIME): void {.winapi, dynlib: "kernel32", importc.}
proc GetTempFileNameA*(P1: LPCSTR, P2: LPCSTR, P3: UINT, P4: LPSTR): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetTempFileNameW*(P1: LPCWSTR, P2: LPCWSTR, P3: UINT, P4: LPWSTR): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetTempPathA*(P1: DWORD, P2: LPSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetTempPathW*(P1: DWORD, P2: LPWSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetThreadContext*(P1: HANDLE, P2: LPCONTEXT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetThreadPriority*(P1: HANDLE): int32 {.winapi, dynlib: "kernel32", importc.}
proc GetThreadSelectorEntry*(P1: HANDLE, P2: DWORD, P3: LPLDT_ENTRY): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetTickCount*(): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetTimeZoneInformation*(P1: LPTIME_ZONE_INFORMATION): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetUserNameA*(P1: LPSTR, P2: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetUserNameW*(P1: LPWSTR, P2: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetVersion*(): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetVersionExA*(P1: LPOSVERSIONINFOA): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetVersionExW*(P1: LPOSVERSIONINFOW): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetVolumeInformationA*(P1: LPCSTR, P2: LPSTR, P3: DWORD, P4: PDWORD, P5: PDWORD, P6: PDWORD, P7: LPSTR, P8: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetVolumeInformationW*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD, P4: PDWORD, P5: PDWORD, P6: PDWORD, P7: LPWSTR, P8: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetWindowsDirectoryA*(P1: LPSTR, P2: UINT): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetWindowsDirectoryW*(P1: LPWSTR, P2: UINT): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetWindowThreadProcessId*(P1: HWND, P2: PDWORD): DWORD {.winapi, dynlib: "user32", importc.}
proc GlobalAddAtomA*(P1: LPCSTR): ATOM {.winapi, dynlib: "kernel32", importc.}
proc GlobalAddAtomW*(P1: LPCWSTR): ATOM {.winapi, dynlib: "kernel32", importc.}
proc GlobalDeleteAtom*(P1: ATOM): ATOM {.winapi, dynlib: "kernel32", importc.}
proc GlobalFindAtomA*(P1: LPCSTR): ATOM {.winapi, dynlib: "kernel32", importc.}
proc GlobalFindAtomW*(P1: LPCWSTR): ATOM {.winapi, dynlib: "kernel32", importc.}
proc GlobalGetAtomNameA*(P1: ATOM, P2: LPSTR, P3: int32): UINT {.winapi, dynlib: "kernel32", importc.}
proc GlobalGetAtomNameW*(P1: ATOM, P2: LPWSTR, P3: int32): UINT {.winapi, dynlib: "kernel32", importc.}
proc HasOverlappedIoCompleted*(lpOverlapped: LPOVERLAPPED): bool = lpOverlapped.Internal != STATUS_PENDING
proc InitAtomTable*(P1: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc InitializeCriticalSection*(P1: LPCRITICAL_SECTION): VOID {.winapi, dynlib: "kernel32", importc.}
proc IsBadHugeReadPtr*(P1: PCVOID, P2: UINT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc IsBadHugeWritePtr*(P1: PVOID, P2: UINT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc IsBadReadPtr*(P1: PCVOID, P2: UINT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc IsBadStringPtrA*(P1: LPCSTR, P2: UINT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc IsBadStringPtrW*(P1: LPCWSTR, P2: UINT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc IsBadWritePtr*(P1: PVOID, P2: UINT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc LeaveCriticalSection*(P1: LPCRITICAL_SECTION): void {.winapi, dynlib: "kernel32", importc.}
proc LoadLibraryA*(P1: LPCSTR): HINSTANCE {.winapi, dynlib: "kernel32", importc.}
proc LoadLibraryW*(P1: LPCWSTR): HINSTANCE {.winapi, dynlib: "kernel32", importc.}
proc LoadLibraryExA*(P1: LPCSTR, P2: HANDLE, P3: DWORD): HINSTANCE {.winapi, dynlib: "kernel32", importc.}
proc LoadLibraryExW*(P1: LPCWSTR, P2: HANDLE, P3: DWORD): HINSTANCE {.winapi, dynlib: "kernel32", importc.}
proc LoadModule*(P1: LPCSTR, P2: PVOID): DWORD {.winapi, dynlib: "kernel32", importc.}
proc LoadResource*(P1: HINSTANCE, P2: HRSRC): HGLOBAL {.winapi, dynlib: "kernel32", importc.}
proc LocalFileTimeToFileTime*(P1: ptr FILETIME, P2: LPFILETIME): BOOL {.winapi, dynlib: "kernel32", importc.}
proc LockFile*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc LockResource*(P1: HGLOBAL): PVOID {.winapi, dynlib: "kernel32", importc.}
proc lstrcatA*(P1: LPSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "kernel32", importc.}
proc lstrcatW*(P1: LPWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "kernel32", importc.}
proc lstrcmpA*(P1: LPCSTR, P2: LPCSTR): int32 {.winapi, dynlib: "kernel32", importc.}
proc lstrcmpiA*(P1: LPCSTR, P2: LPCSTR): int32 {.winapi, dynlib: "kernel32", importc.}
proc lstrcmpiW*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "kernel32", importc.}
proc lstrcmpW*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "kernel32", importc.}
proc lstrcpyA*(P1: LPSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "kernel32", importc.}
proc lstrcpynA*(P1: LPSTR, P2: LPCSTR, P3: int32): LPSTR {.winapi, dynlib: "kernel32", importc.}
proc lstrcpynW*(P1: LPWSTR, P2: LPCWSTR, P3: int32): LPWSTR {.winapi, dynlib: "kernel32", importc.}
proc lstrcpyW*(P1: LPWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "kernel32", importc.}
proc lstrlenA*(P1: LPCSTR): int32 {.winapi, dynlib: "kernel32", importc.}
proc lstrlenW*(P1: LPCWSTR): int32 {.winapi, dynlib: "kernel32", importc.}
proc MoveFileA*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc MoveFileW*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc MulDiv*(P1: int32, P2: int32, P3: int32): int32 {.winapi, dynlib: "kernel32", importc.}
proc OpenEventA*(P1: DWORD, P2: BOOL, P3: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc OpenEventW*(P1: DWORD, P2: BOOL, P3: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc OpenFile*(P1: LPCSTR, P2: LPOFSTRUCT, P3: UINT): HFILE {.winapi, dynlib: "kernel32", importc.}
proc OpenMutexA*(P1: DWORD, P2: BOOL, P3: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc OpenMutexW*(P1: DWORD, P2: BOOL, P3: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc OpenProcess*(P1: DWORD, P2: BOOL, P3: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc OpenSemaphoreA*(P1: DWORD, P2: BOOL, P3: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc OpenSemaphoreW*(P1: DWORD, P2: BOOL, P3: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc OutputDebugStringA*(P1: LPCSTR): void {.winapi, dynlib: "kernel32", importc.}
proc OutputDebugStringW*(P1: LPCWSTR): void {.winapi, dynlib: "kernel32", importc.}
proc PeekNamedPipe*(P1: HANDLE, P2: PVOID, P3: DWORD, P4: PDWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc PulseEvent*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc PurgeComm*(P1: HANDLE, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc QueryPerformanceCounter*(P1: PLARGE_INTEGER): BOOL {.winapi, dynlib: "kernel32", importc.}
proc QueryPerformanceFrequency*(P1: PLARGE_INTEGER): BOOL {.winapi, dynlib: "kernel32", importc.}
proc QueueUserAPC*(P1: PAPCFUNC, P2: HANDLE, P3: ULONG_PTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc RaiseException*(P1: DWORD, P2: DWORD, P3: DWORD, P4: ptr DWORD): void {.winapi, dynlib: "kernel32", importc.}
proc ReadFile*(P1: HANDLE, P2: PVOID, P3: DWORD, P4: PDWORD, P5: LPOVERLAPPED): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ReadFileEx*(P1: HANDLE, P2: PVOID, P3: DWORD, P4: LPOVERLAPPED, P5: LPOVERLAPPED_COMPLETION_ROUTINE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ReadProcessMemory*(P1: HANDLE, P2: PCVOID, P3: PVOID, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ReleaseMutex*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ReleaseSemaphore*(P1: HANDLE, P2: LONG, P3: LPLONG): BOOL {.winapi, dynlib: "kernel32", importc.}
proc RemoveDirectoryA*(P1: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc RemoveDirectoryW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ResetEvent*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ResumeThread*(P1: HANDLE): DWORD {.winapi, dynlib: "kernel32", importc.}
proc SearchPathA*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: LPSTR, P6: ptr LPSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc SearchPathW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: LPWSTR, P6: ptr LPWSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc SetCommBreak*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetCommConfig*(P1: HANDLE, P2: LPCOMMCONFIG, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetCommMask*(P1: HANDLE, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetCommState*(P1: HANDLE, P2: LPDCB): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetCommTimeouts*(P1: HANDLE, P2: LPCOMMTIMEOUTS): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetComputerNameA*(P1: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetComputerNameW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetCurrentDirectoryA*(P1: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetCurrentDirectoryW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetDefaultCommConfigA*(P1: LPCSTR, P2: LPCOMMCONFIG, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetDefaultCommConfigW*(P1: LPCWSTR, P2: LPCOMMCONFIG, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetEndOfFile*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetEnvironmentVariableA*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetEnvironmentVariableW*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetErrorMode*(P1: UINT): UINT {.winapi, dynlib: "kernel32", importc.}
proc SetEvent*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetFileApisToANSI*(): VOID {.winapi, dynlib: "kernel32", importc.}
proc SetFileApisToOEM*(): VOID {.winapi, dynlib: "kernel32", importc.}
proc SetFileAttributesA*(P1: LPCSTR, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetFileAttributesW*(P1: LPCWSTR, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetFilePointer*(P1: HANDLE, P2: LONG, P3: PLONG, P4: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc SetFileTime*(P1: HANDLE, P2: ptr FILETIME, P3: ptr FILETIME, P4: ptr FILETIME): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetHandleCount*(P1: UINT): UINT {.winapi, dynlib: "kernel32", importc.}
proc SetLastError*(P1: DWORD): void {.winapi, dynlib: "kernel32", importc.}
proc SetLastErrorEx*(P1: DWORD, P2: DWORD): void {.winapi, dynlib: "user32", importc.}
proc SetLocalTime*(P1: ptr SYSTEMTIME): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetMailslotInfo*(P1: HANDLE, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetNamedPipeHandleState*(P1: HANDLE, P2: PDWORD, P3: PDWORD, P4: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetPriorityClass*(P1: HANDLE, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetStdHandle*(P1: DWORD, P2: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetSystemTime*(P1: ptr SYSTEMTIME): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetThreadAffinityMask*(P1: HANDLE, P2: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc SetThreadContext*(P1: HANDLE, P2: ptr CONTEXT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetThreadPriority*(P1: HANDLE, P2: int32): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetTimeZoneInformation*(P1: ptr TIME_ZONE_INFORMATION): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetUnhandledExceptionFilter*(P1: LPTOP_LEVEL_EXCEPTION_FILTER): LPTOP_LEVEL_EXCEPTION_FILTER {.winapi, dynlib: "kernel32", importc.}
proc SetupComm*(P1: HANDLE, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetVolumeLabelA*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetVolumeLabelW*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SizeofResource*(P1: HINSTANCE, P2: HRSRC): DWORD {.winapi, dynlib: "kernel32", importc.}
proc Sleep*(P1: DWORD): void {.winapi, dynlib: "kernel32", importc.}
proc SleepEx*(P1: DWORD, P2: BOOL): DWORD {.winapi, dynlib: "kernel32", importc.}
proc SuspendThread*(P1: HANDLE): DWORD {.winapi, dynlib: "kernel32", importc.}
proc SystemTimeToFileTime*(P1: ptr SYSTEMTIME, P2: LPFILETIME): BOOL {.winapi, dynlib: "kernel32", importc.}
proc TerminateProcess*(P1: HANDLE, P2: UINT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc TerminateThread*(P1: HANDLE, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc TlsAlloc*(): DWORD {.winapi, dynlib: "kernel32", importc.}
proc TlsFree*(P1: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc TlsGetValue*(P1: DWORD): PVOID {.winapi, dynlib: "kernel32", importc.}
proc TlsSetValue*(P1: DWORD, P2: PVOID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc TransactNamedPipe*(P1: HANDLE, P2: PVOID, P3: DWORD, P4: PVOID, P5: DWORD, P6: PDWORD, P7: LPOVERLAPPED): BOOL {.winapi, dynlib: "kernel32", importc.}
proc TransmitCommChar*(P1: HANDLE, P2: char): BOOL {.winapi, dynlib: "kernel32", importc.}
proc UnhandledExceptionFilter*(P1: LPEXCEPTION_POINTERS): LONG {.winapi, dynlib: "kernel32", importc.}
proc UnlockFile*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WaitCommEvent*(P1: HANDLE, P2: PDWORD, P3: LPOVERLAPPED): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WaitForDebugEvent*(P1: LPDEBUG_EVENT, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WaitForMultipleObjects*(P1: DWORD, P2: ptr HANDLE, P3: BOOL, P4: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc WaitForMultipleObjectsEx*(P1: DWORD, P2: ptr HANDLE, P3: BOOL, P4: DWORD, P5: BOOL): DWORD {.winapi, dynlib: "kernel32", importc.}
proc WaitForSingleObject*(P1: HANDLE, P2: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc WaitForSingleObjectEx*(P1: HANDLE, P2: DWORD, P3: BOOL): DWORD {.winapi, dynlib: "kernel32", importc.}
proc WaitNamedPipeA*(P1: LPCSTR, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WaitNamedPipeW*(P1: LPCWSTR, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WinLoadTrustProvider*(P1: ptr GUID): BOOL {.winapi, dynlib: "advapi32", importc.}
proc WriteFile*(P1: HANDLE, P2: PCVOID, P3: DWORD, P4: PDWORD, P5: LPOVERLAPPED): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WriteFileEx*(P1: HANDLE, P2: PCVOID, P3: DWORD, P4: LPOVERLAPPED, P5: LPOVERLAPPED_COMPLETION_ROUTINE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WritePrivateProfileSectionA*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WritePrivateProfileSectionW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WritePrivateProfileStringA*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WritePrivateProfileStringW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WritePrivateProfileStructA*(P1: LPCSTR, P2: LPCSTR, P3: LPVOID, P4: UINT, P5: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WritePrivateProfileStructW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPVOID, P4: UINT, P5: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WriteProcessMemory*(P1: HANDLE, P2: LPVOID, P3: LPCVOID, P4: SIZE_T, P5: ptr SIZE_T): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WriteProfileSectionA*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WriteProfileSectionW*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WriteProfileStringA*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WriteProfileStringW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GlobalAlloc*(P1: UINT, P2: DWORD): HGLOBAL {.winapi, dynlib: "kernel32", importc.}
proc GlobalFree*(P1: HGLOBAL): HGLOBAL {.winapi, dynlib: "kernel32", importc.}
proc GlobalHandle*(P1: PCVOID): HGLOBAL {.winapi, dynlib: "kernel32", importc.}
proc GlobalLock*(P1: HGLOBAL): LPVOID {.winapi, dynlib: "kernel32", importc.}
proc GlobalMemoryStatus*(P1: LPMEMORYSTATUS): VOID {.winapi, dynlib: "kernel32", importc.}
proc GlobalReAlloc*(P1: HGLOBAL, P2: DWORD, P3: UINT): HGLOBAL {.winapi, dynlib: "kernel32", importc.}
proc GlobalSize*(P1: HGLOBAL): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GlobalUnlock*(P1: HGLOBAL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc HeapAlloc*(P1: HANDLE, P2: DWORD, P3: DWORD): PVOID {.winapi, dynlib: "kernel32", importc.}
proc HeapCompact*(P1: HANDLE, P2: DWORD): SIZE_T {.winapi, dynlib: "kernel32", importc.}
proc HeapCreate*(P1: DWORD, P2: DWORD, P3: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc HeapDestroy*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc HeapFree*(P1: HANDLE, P2: DWORD, P3: PVOID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc HeapLock*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc HeapReAlloc*(P1: HANDLE, P2: DWORD, P3: PVOID, P4: DWORD): PVOID {.winapi, dynlib: "kernel32", importc.}
proc HeapSize*(P1: HANDLE, P2: DWORD, P3: PCVOID): DWORD {.winapi, dynlib: "kernel32", importc.}
proc HeapUnlock*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc HeapValidate*(P1: HANDLE, P2: DWORD, P3: PCVOID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc HeapWalk*(P1: HANDLE, P2: LPPROCESS_HEAP_ENTRY): BOOL {.winapi, dynlib: "kernel32", importc.}
proc LocalAlloc*(P1: UINT, P2: SIZE_T): HLOCAL {.winapi, dynlib: "kernel32", importc.}
proc LocalFree*(P1: HLOCAL): HLOCAL {.winapi, dynlib: "kernel32", importc.}
proc LocalHandle*(P1: LPCVOID): HLOCAL {.winapi, dynlib: "kernel32", importc.}
proc LocalLock*(P1: HLOCAL): PVOID {.winapi, dynlib: "kernel32", importc.}
proc LocalReAlloc*(P1: HLOCAL, P2: SIZE_T, P3: UINT): HLOCAL {.winapi, dynlib: "kernel32", importc.}
proc LocalSize*(P1: HLOCAL): UINT {.winapi, dynlib: "kernel32", importc.}
proc LocalUnlock*(P1: HLOCAL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc VirtualAlloc*(P1: PVOID, P2: DWORD, P3: DWORD, P4: DWORD): PVOID {.winapi, dynlib: "kernel32", importc.}
proc VirtualAllocEx*(P1: HANDLE, P2: PVOID, P3: DWORD, P4: DWORD, P5: DWORD): PVOID {.winapi, dynlib: "kernel32", importc.}
proc VirtualFree*(P1: PVOID, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc VirtualFreeEx*(P1: HANDLE, P2: PVOID, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc VirtualLock*(P1: PVOID, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc VirtualProtect*(P1: PVOID, P2: DWORD, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc VirtualProtectEx*(P1: HANDLE, P2: PVOID, P3: DWORD, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc VirtualQuery*(P1: LPCVOID, P2: PMEMORY_BASIC_INFORMATION, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc VirtualQueryEx*(P1: HANDLE, P2: LPCVOID, P3: PMEMORY_BASIC_INFORMATION, P4: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc VirtualUnlock*(P1: PVOID, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CancelIoEx*(P1: HANDLE, P2: LPOVERLAPPED): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CancelIo*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CancelWaitableTimer*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ConvertThreadToFiber*(P1: PVOID): PVOID {.winapi, dynlib: "kernel32", importc.}
proc CreateFiber*(P1: SIZE_T, P2: LPFIBER_START_ROUTINE, P3: LPVOID): LPVOID {.winapi, dynlib: "kernel32", importc.}
proc CreateWaitableTimerA*(P1: LPSECURITY_ATTRIBUTES, P2: BOOL, P3: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateWaitableTimerW*(P1: LPSECURITY_ATTRIBUTES, P2: BOOL, P3: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc DeleteFiber*(P1: PVOID): void {.winapi, dynlib: "kernel32", importc.}
proc GetFileAttributesExA*(P1: LPCSTR, P2: GET_FILEEX_INFO_LEVELS, P3: PVOID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetFileAttributesExW*(P1: LPCWSTR, P2: GET_FILEEX_INFO_LEVELS, P3: PVOID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetLongPathNameA*(P1: LPCSTR, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetLongPathNameW*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc InitializeCriticalSectionAndSpinCount*(P1: LPCRITICAL_SECTION, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc IsDebuggerPresent*(): BOOL {.winapi, dynlib: "kernel32", importc.}
proc OpenWaitableTimerA*(P1: DWORD, P2: BOOL, P3: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc OpenWaitableTimerW*(P1: DWORD, P2: BOOL, P3: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc QueryDosDeviceA*(P1: LPCSTR, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc QueryDosDeviceW*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc SetWaitableTimer*(P1: HANDLE, P2: ptr LARGE_INTEGER, P3: LONG, P4: PTIMERAPCROUTINE, P5: PVOID, P6: BOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SwitchToFiber*(P1: PVOID): void {.winapi, dynlib: "kernel32", importc.}
proc OpenThread*(P1: DWORD, P2: BOOL, P3: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc AccessCheck*(P1: PSECURITY_DESCRIPTOR, P2: HANDLE, P3: DWORD, P4: PGENERIC_MAPPING, P5: PPRIVILEGE_SET, P6: PDWORD, P7: PDWORD, P8: PBOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc AccessCheckAndAuditAlarmA*(P1: LPCSTR, P2: LPVOID, P3: LPSTR, P4: LPSTR, P5: PSECURITY_DESCRIPTOR, P6: DWORD, P7: PGENERIC_MAPPING, P8: BOOL, P9: PDWORD, P10: PBOOL, P11: PBOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc AccessCheckAndAuditAlarmW*(P1: LPCWSTR, P2: LPVOID, P3: LPWSTR, P4: LPWSTR, P5: PSECURITY_DESCRIPTOR, P6: DWORD, P7: PGENERIC_MAPPING, P8: BOOL, P9: PDWORD, P10: PBOOL, P11: PBOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc AddAccessAllowedAce*(P1: PACL, P2: DWORD, P3: DWORD, P4: PSID): BOOL {.winapi, dynlib: "advapi32", importc.}
proc AddAccessDeniedAce*(P1: PACL, P2: DWORD, P3: DWORD, P4: PSID): BOOL {.winapi, dynlib: "advapi32", importc.}
proc AddAce*(P1: PACL, P2: DWORD, P3: DWORD, P4: PVOID, P5: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc AddAuditAccessAce*(P1: PACL, P2: DWORD, P3: DWORD, P4: PSID, P5: BOOL, P6: BOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc AdjustTokenGroups*(P1: HANDLE, P2: BOOL, P3: PTOKEN_GROUPS, P4: DWORD, P5: PTOKEN_GROUPS, P6: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc AdjustTokenPrivileges*(P1: HANDLE, P2: BOOL, P3: PTOKEN_PRIVILEGES, P4: DWORD, P5: PTOKEN_PRIVILEGES, P6: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc AllocateAndInitializeSid*(P1: PSID_IDENTIFIER_AUTHORITY, P2: BYTE, P3: DWORD, P4: DWORD, P5: DWORD, P6: DWORD, P7: DWORD, P8: DWORD, P9: DWORD, P10: DWORD, P11: ptr PSID): BOOL {.winapi, dynlib: "advapi32", importc.}
proc AllocateLocallyUniqueId*(P1: PLUID): BOOL {.winapi, dynlib: "advapi32", importc.}
proc AreAllAccessesGranted*(P1: DWORD, P2: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc AreAnyAccessesGranted*(P1: DWORD, P2: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc BackupEventLogA*(P1: HANDLE, P2: LPCSTR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc BackupEventLogW*(P1: HANDLE, P2: LPCWSTR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc BackupRead*(P1: HANDLE, P2: LPBYTE, P3: DWORD, P4: LPDWORD, P5: BOOL, P6: BOOL, P7: ptr LPVOID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc BackupSeek*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: LPDWORD, P5: LPDWORD, P6: ptr LPVOID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc BackupWrite*(P1: HANDLE, P2: LPBYTE, P3: DWORD, P4: LPDWORD, P5: BOOL, P6: BOOL, P7: ptr LPVOID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ClearEventLogA*(P1: HANDLE, P2: LPCSTR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ClearEventLogW*(P1: HANDLE, P2: LPCWSTR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CloseEventLog*(P1: HANDLE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ConnectNamedPipe*(P1: HANDLE, P2: LPOVERLAPPED): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CopySid*(P1: DWORD, P2: PSID, P3: PSID): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CreateNamedPipeA*(P1: LPCSTR, P2: DWORD, P3: DWORD, P4: DWORD, P5: DWORD, P6: DWORD, P7: DWORD, P8: LPSECURITY_ATTRIBUTES): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateNamedPipeW*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: DWORD, P5: DWORD, P6: DWORD, P7: DWORD, P8: LPSECURITY_ATTRIBUTES): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreatePrivateObjectSecurity*(P1: PSECURITY_DESCRIPTOR, P2: PSECURITY_DESCRIPTOR, P3: ptr PSECURITY_DESCRIPTOR, P4: BOOL, P5: HANDLE, P6: PGENERIC_MAPPING): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CreateProcessAsUserA*(P1: HANDLE, P2: LPCSTR, P3: LPSTR, P4: LPSECURITY_ATTRIBUTES, P5: LPSECURITY_ATTRIBUTES, P6: BOOL, P7: DWORD, P8: PVOID, P9: LPCSTR, P10: LPSTARTUPINFOA, P11: LPPROCESS_INFORMATION): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CreateProcessAsUserW*(P1: HANDLE, P2: LPCWSTR, P3: LPWSTR, P4: LPSECURITY_ATTRIBUTES, P5: LPSECURITY_ATTRIBUTES, P6: BOOL, P7: DWORD, P8: PVOID, P9: LPCWSTR, P10: LPSTARTUPINFOW, P11: LPPROCESS_INFORMATION): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CreateRemoteThread*(P1: HANDLE, P2: LPSECURITY_ATTRIBUTES, P3: DWORD, P4: LPTHREAD_START_ROUTINE, P5: LPVOID, P6: DWORD, P7: LPDWORD): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateTapePartition*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc DefineDosDeviceA*(P1: DWORD, P2: LPCSTR, P3: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DefineDosDeviceW*(P1: DWORD, P2: LPCWSTR, P3: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DeleteAce*(P1: PACL, P2: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc DeregisterEventSource*(P1: HANDLE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc DestroyPrivateObjectSecurity*(P1: ptr PSECURITY_DESCRIPTOR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc DeviceIoControl*(P1: HANDLE, P2: DWORD, P3: PVOID, P4: DWORD, P5: PVOID, P6: DWORD, P7: PDWORD, P8: POVERLAPPED): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DisconnectNamedPipe*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DuplicateToken*(P1: HANDLE, P2: SECURITY_IMPERSONATION_LEVEL, P3: PHANDLE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc DuplicateTokenEx*(P1: HANDLE, P2: DWORD, P3: LPSECURITY_ATTRIBUTES, P4: SECURITY_IMPERSONATION_LEVEL, P5: TOKEN_TYPE, P6: PHANDLE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc EqualPrefixSid*(P1: PSID, P2: PSID): BOOL {.winapi, dynlib: "advapi32", importc.}
proc EqualSid*(P1: PSID, P2: PSID): BOOL {.winapi, dynlib: "advapi32", importc.}
proc EraseTape*(P1: HANDLE, P2: DWORD, P3: BOOL): DWORD {.winapi, dynlib: "kernel32", importc.}
proc FindFirstFileExA*(P1: LPCSTR, P2: FINDEX_INFO_LEVELS, P3: PVOID, P4: FINDEX_SEARCH_OPS, P5: PVOID, P6: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc FindFirstFileExW*(P1: LPCWSTR, P2: FINDEX_INFO_LEVELS, P3: PVOID, P4: FINDEX_SEARCH_OPS, P5: PVOID, P6: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc FindFirstFreeAce*(P1: PACL, P2: ptr PVOID): BOOL {.winapi, dynlib: "advapi32", importc.}
proc FreeSid*(P1: PSID): PVOID {.winapi, dynlib: "advapi32", importc.}
proc GetAce*(P1: PACL, P2: DWORD, P3: ptr LPVOID): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetAclInformation*(P1: PACL, P2: PVOID, P3: DWORD, P4: ACL_INFORMATION_CLASS): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetBinaryTypeA*(P1: LPCSTR, P2: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetBinaryTypeW*(P1: LPCWSTR, P2: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetCompressedFileSizeA*(P1: LPCSTR, P2: PDWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetCompressedFileSizeW*(P1: LPCWSTR, P2: PDWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetCurrentHwProfileA*(P1: LPHW_PROFILE_INFOA): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetCurrentHwProfileW*(P1: LPHW_PROFILE_INFOW): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetFileSecurityA*(P1: LPCSTR, P2: SECURITY_INFORMATION, P3: PSECURITY_DESCRIPTOR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetFileSecurityW*(P1: LPCWSTR, P2: SECURITY_INFORMATION, P3: PSECURITY_DESCRIPTOR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetHandleInformation*(P1: HANDLE, P2: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetKernelObjectSecurity*(P1: HANDLE, P2: SECURITY_INFORMATION, P3: PSECURITY_DESCRIPTOR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetLengthSid*(P1: PSID): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetNumberOfEventLogRecords*(P1: HANDLE, P2: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetOldestEventLogRecord*(P1: HANDLE, P2: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetPrivateObjectSecurity*(P1: PSECURITY_DESCRIPTOR, P2: SECURITY_INFORMATION, P3: PSECURITY_DESCRIPTOR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetProcessPriorityBoost*(P1: HANDLE, P2: PBOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetProcessShutdownParameters*(P1: PDWORD, P2: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetProcessTimes*(P1: HANDLE, P2: LPFILETIME, P3: LPFILETIME, P4: LPFILETIME, P5: LPFILETIME): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetProcessWindowStation*(): HWINSTA {.winapi, dynlib: "user32", importc.}
proc GetProcessWorkingSetSize*(P1: HANDLE, P2: PSIZE_T, P3: PSIZE_T): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetQueuedCompletionStatus*(P1: HANDLE, P2: PDWORD, P3: PULONG_PTR, P4: ptr LPOVERLAPPED, P5: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetSecurityDescriptorControl*(P1: PSECURITY_DESCRIPTOR, P2: PSECURITY_DESCRIPTOR_CONTROL, P3: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetSecurityDescriptorDacl*(P1: PSECURITY_DESCRIPTOR, P2: LPBOOL, P3: ptr PACL, P4: LPBOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetSecurityDescriptorGroup*(P1: PSECURITY_DESCRIPTOR, P2: ptr PSID, P3: LPBOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetSecurityDescriptorLength*(P1: PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetSecurityDescriptorOwner*(P1: PSECURITY_DESCRIPTOR, P2: ptr PSID, P3: LPBOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetSecurityDescriptorSacl*(P1: PSECURITY_DESCRIPTOR, P2: LPBOOL, P3: ptr PACL, P4: LPBOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetSidIdentifierAuthority*(P1: PSID): PSID_IDENTIFIER_AUTHORITY {.winapi, dynlib: "advapi32", importc.}
proc GetSidLengthRequired*(P1: UCHAR): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetSidSubAuthority*(P1: PSID, P2: DWORD): PDWORD {.winapi, dynlib: "advapi32", importc.}
proc GetSidSubAuthorityCount*(P1: PSID): PUCHAR {.winapi, dynlib: "advapi32", importc.}
proc GetTapeParameters*(P1: HANDLE, P2: DWORD, P3: PDWORD, P4: PVOID): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetTapePosition*(P1: HANDLE, P2: DWORD, P3: PDWORD, P4: PDWORD, P5: PDWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetTapeStatus*(P1: HANDLE): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetThreadPriorityBoost*(P1: HANDLE, P2: PBOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetThreadTimes*(P1: HANDLE, P2: LPFILETIME, P3: LPFILETIME, P4: LPFILETIME, P5: LPFILETIME): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetTokenInformation*(P1: HANDLE, P2: TOKEN_INFORMATION_CLASS, P3: PVOID, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ImpersonateLoggedOnUser*(P1: HANDLE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ImpersonateNamedPipeClient*(P1: HANDLE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ImpersonateSelf*(P1: SECURITY_IMPERSONATION_LEVEL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc InitializeAcl*(P1: PACL, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc SetCriticalSectionSpinCount*(P1: LPCRITICAL_SECTION, P2: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc InitializeSecurityDescriptor*(P1: PSECURITY_DESCRIPTOR, P2: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc InitializeSid*(P1: PSID, P2: PSID_IDENTIFIER_AUTHORITY, P3: BYTE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc IsProcessorFeaturePresent*(P1: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc IsTextUnicode*(P1: PCVOID, P2: int32, P3: LPINT): BOOL {.winapi, dynlib: "advapi32", importc.}
proc IsValidAcl*(P1: PACL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc IsValidSecurityDescriptor*(P1: PSECURITY_DESCRIPTOR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc IsValidSid*(P1: PSID): BOOL {.winapi, dynlib: "advapi32", importc.}
proc LockFileEx*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: DWORD, P6: LPOVERLAPPED): BOOL {.winapi, dynlib: "kernel32", importc.}
proc LogonUserA*(P1: LPSTR, P2: LPSTR, P3: LPSTR, P4: DWORD, P5: DWORD, P6: PHANDLE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc LogonUserW*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR, P4: DWORD, P5: DWORD, P6: PHANDLE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc LookupAccountNameA*(P1: LPCSTR, P2: LPCSTR, P3: PSID, P4: PDWORD, P5: LPSTR, P6: PDWORD, P7: PSID_NAME_USE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc LookupAccountNameW*(P1: LPCWSTR, P2: LPCWSTR, P3: PSID, P4: PDWORD, P5: LPWSTR, P6: PDWORD, P7: PSID_NAME_USE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc LookupAccountSidA*(P1: LPCSTR, P2: PSID, P3: LPSTR, P4: PDWORD, P5: LPSTR, P6: PDWORD, P7: PSID_NAME_USE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc LookupAccountSidW*(P1: LPCWSTR, P2: PSID, P3: LPWSTR, P4: PDWORD, P5: LPWSTR, P6: PDWORD, P7: PSID_NAME_USE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc LookupPrivilegeDisplayNameA*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: PDWORD, P5: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc LookupPrivilegeDisplayNameW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: PDWORD, P5: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc LookupPrivilegeNameA*(P1: LPCSTR, P2: PLUID, P3: LPSTR, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc LookupPrivilegeNameW*(P1: LPCWSTR, P2: PLUID, P3: LPWSTR, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc LookupPrivilegeValueA*(P1: LPCSTR, P2: LPCSTR, P3: PLUID): BOOL {.winapi, dynlib: "advapi32", importc.}
proc LookupPrivilegeValueW*(P1: LPCWSTR, P2: LPCWSTR, P3: PLUID): BOOL {.winapi, dynlib: "advapi32", importc.}
proc MakeAbsoluteSD*(P1: PSECURITY_DESCRIPTOR, P2: PSECURITY_DESCRIPTOR, P3: PDWORD, P4: PACL, P5: PDWORD, P6: PACL, P7: PDWORD, P8: PSID, P9: PDWORD, P10: PSID, P11: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc MakeSelfRelativeSD*(P1: PSECURITY_DESCRIPTOR, P2: PSECURITY_DESCRIPTOR, P3: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc MapGenericMask*(P1: PDWORD, P2: PGENERIC_MAPPING): VOID {.winapi, dynlib: "advapi32", importc.}
proc MoveFileExA*(P1: LPCSTR, P2: LPCSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc MoveFileExW*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc NotifyChangeEventLog*(P1: HANDLE, P2: HANDLE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ObjectCloseAuditAlarmA*(P1: LPCSTR, P2: PVOID, P3: BOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ObjectCloseAuditAlarmW*(P1: LPCWSTR, P2: PVOID, P3: BOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ObjectDeleteAuditAlarmA*(P1: LPCSTR, P2: PVOID, P3: BOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ObjectDeleteAuditAlarmW*(P1: LPCWSTR, P2: PVOID, P3: BOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ObjectOpenAuditAlarmA*(P1: LPCSTR, P2: PVOID, P3: LPSTR, P4: LPSTR, P5: PSECURITY_DESCRIPTOR, P6: HANDLE, P7: DWORD, P8: DWORD, P9: PPRIVILEGE_SET, P10: BOOL, P11: BOOL, P12: PBOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ObjectOpenAuditAlarmW*(P1: LPCWSTR, P2: PVOID, P3: LPWSTR, P4: LPWSTR, P5: PSECURITY_DESCRIPTOR, P6: HANDLE, P7: DWORD, P8: DWORD, P9: PPRIVILEGE_SET, P10: BOOL, P11: BOOL, P12: PBOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ObjectPrivilegeAuditAlarmA*(P1: LPCSTR, P2: PVOID, P3: HANDLE, P4: DWORD, P5: PPRIVILEGE_SET, P6: BOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ObjectPrivilegeAuditAlarmW*(P1: LPCWSTR, P2: PVOID, P3: HANDLE, P4: DWORD, P5: PPRIVILEGE_SET, P6: BOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc OpenBackupEventLogA*(P1: LPCSTR, P2: LPCSTR): HANDLE {.winapi, dynlib: "advapi32", importc.}
proc OpenBackupEventLogW*(P1: LPCWSTR, P2: LPCWSTR): HANDLE {.winapi, dynlib: "advapi32", importc.}
proc OpenEventLogA*(P1: LPCSTR, P2: LPCSTR): HANDLE {.winapi, dynlib: "advapi32", importc.}
proc OpenEventLogW*(P1: LPCWSTR, P2: LPCWSTR): HANDLE {.winapi, dynlib: "advapi32", importc.}
proc OpenProcessToken*(P1: HANDLE, P2: DWORD, P3: PHANDLE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc OpenThreadToken*(P1: HANDLE, P2: DWORD, P3: BOOL, P4: PHANDLE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc PostQueuedCompletionStatus*(P1: HANDLE, P2: DWORD, P3: ULONG_PTR, P4: LPOVERLAPPED): BOOL {.winapi, dynlib: "kernel32", importc.}
proc PrepareTape*(P1: HANDLE, P2: DWORD, P3: BOOL): DWORD {.winapi, dynlib: "kernel32", importc.}
proc PrivilegeCheck*(P1: HANDLE, P2: PPRIVILEGE_SET, P3: PBOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc PrivilegedServiceAuditAlarmA*(P1: LPCSTR, P2: LPCSTR, P3: HANDLE, P4: PPRIVILEGE_SET, P5: BOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc PrivilegedServiceAuditAlarmW*(P1: LPCWSTR, P2: LPCWSTR, P3: HANDLE, P4: PPRIVILEGE_SET, P5: BOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ReadDirectoryChangesW*(P1: HANDLE, P2: PVOID, P3: DWORD, P4: BOOL, P5: DWORD, P6: PDWORD, P7: LPOVERLAPPED, P8: LPOVERLAPPED_COMPLETION_ROUTINE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ReadEventLogA*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PVOID, P5: DWORD, P6: ptr DWORD, P7: ptr DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ReadEventLogW*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PVOID, P5: DWORD, P6: ptr DWORD, P7: ptr DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ReadFileScatter*(P1: HANDLE, P2: ptr FILE_SEGMENT_ELEMENT, P3: DWORD, P4: LPDWORD, P5: LPOVERLAPPED): BOOL {.winapi, dynlib: "kernel32", importc.}
proc RegisterEventSourceA*(P1: LPCSTR, P2: LPCSTR): HANDLE {.winapi, dynlib: "advapi32", importc.}
proc RegisterEventSourceW*(P1: LPCWSTR, P2: LPCWSTR): HANDLE {.winapi, dynlib: "advapi32", importc.}
proc ReportEventA*(P1: HANDLE, P2: WORD, P3: WORD, P4: DWORD, P5: PSID, P6: WORD, P7: DWORD, P8: ptr LPCSTR, P9: PVOID): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ReportEventW*(P1: HANDLE, P2: WORD, P3: WORD, P4: DWORD, P5: PSID, P6: WORD, P7: DWORD, P8: ptr LPCWSTR, P9: PVOID): BOOL {.winapi, dynlib: "advapi32", importc.}
proc RevertToSelf*(): BOOL {.winapi, dynlib: "advapi32", importc.}
proc SetAclInformation*(P1: PACL, P2: PVOID, P3: DWORD, P4: ACL_INFORMATION_CLASS): BOOL {.winapi, dynlib: "advapi32", importc.}
proc SetFileSecurityA*(P1: LPCSTR, P2: SECURITY_INFORMATION, P3: PSECURITY_DESCRIPTOR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc SetFileSecurityW*(P1: LPCWSTR, P2: SECURITY_INFORMATION, P3: PSECURITY_DESCRIPTOR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc SetHandleInformation*(P1: HANDLE, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetKernelObjectSecurity*(P1: HANDLE, P2: SECURITY_INFORMATION, P3: PSECURITY_DESCRIPTOR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc SetPrivateObjectSecurity*(P1: SECURITY_INFORMATION, P2: PSECURITY_DESCRIPTOR, P3: ptr PSECURITY_DESCRIPTOR, P4: PGENERIC_MAPPING, P5: HANDLE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc SetProcessAffinityMask*(P1: HANDLE, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetProcessPriorityBoost*(P1: HANDLE, P2: BOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetProcessShutdownParameters*(P1: DWORD, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetProcessWorkingSetSize*(P1: HANDLE, P2: SIZE_T, P3: SIZE_T): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetSecurityDescriptorDacl*(P1: PSECURITY_DESCRIPTOR, P2: BOOL, P3: PACL, P4: BOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc SetSecurityDescriptorGroup*(P1: PSECURITY_DESCRIPTOR, P2: PSID, P3: BOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc SetSecurityDescriptorOwner*(P1: PSECURITY_DESCRIPTOR, P2: PSID, P3: BOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc SetSecurityDescriptorSacl*(P1: PSECURITY_DESCRIPTOR, P2: BOOL, P3: PACL, P4: BOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc SetSystemTimeAdjustment*(P1: DWORD, P2: BOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetTapeParameters*(P1: HANDLE, P2: DWORD, P3: PVOID): DWORD {.winapi, dynlib: "kernel32", importc.}
proc SetTapePosition*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: DWORD, P6: BOOL): DWORD {.winapi, dynlib: "kernel32", importc.}
proc SetThreadPriorityBoost*(P1: HANDLE, P2: BOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetThreadToken*(P1: PHANDLE, P2: HANDLE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc SetTokenInformation*(P1: HANDLE, P2: TOKEN_INFORMATION_CLASS, P3: PVOID, P4: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc SignalObjectAndWait*(P1: HANDLE, P2: HANDLE, P3: DWORD, P4: BOOL): DWORD {.winapi, dynlib: "kernel32", importc.}
proc SwitchToThread*(): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SystemTimeToTzSpecificLocalTime*(P1: LPTIME_ZONE_INFORMATION, P2: LPSYSTEMTIME, P3: LPSYSTEMTIME): BOOL {.winapi, dynlib: "kernel32", importc.}
proc TryEnterCriticalSection*(P1: LPCRITICAL_SECTION): BOOL {.winapi, dynlib: "kernel32", importc.}
proc UnlockFileEx*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: LPOVERLAPPED): BOOL {.winapi, dynlib: "kernel32", importc.}
proc UpdateResourceA*(P1: HANDLE, P2: LPCSTR, P3: LPCSTR, P4: WORD, P5: PVOID, P6: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc UpdateResourceW*(P1: HANDLE, P2: LPCWSTR, P3: LPCWSTR, P4: WORD, P5: PVOID, P6: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WriteFileGather*(P1: HANDLE, P2: ptr FILE_SEGMENT_ELEMENT, P3: DWORD, P4: LPDWORD, P5: LPOVERLAPPED): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WriteTapemark*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: BOOL): DWORD {.winapi, dynlib: "kernel32", importc.}
proc AddAccessAllowedAceEx*(P1: PACL, P2: DWORD, P3: DWORD, P4: DWORD, P5: PSID): BOOL {.winapi, dynlib: "advapi32", importc.}
proc AddAccessDeniedAceEx*(P1: PACL, P2: DWORD, P3: DWORD, P4: DWORD, P5: PSID): BOOL {.winapi, dynlib: "advapi32", importc.}
proc AddVectoredExceptionHandler*(P1: ULONG, P2: PVECTORED_EXCEPTION_HANDLER): PVOID {.winapi, dynlib: "kernel32", importc.}
proc AllocateUserPhysicalPages*(P1: HANDLE, P2: PULONG_PTR, P3: PULONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc AssignProcessToJobObject*(P1: HANDLE, P2: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ChangeTimerQueueTimer*(P1: HANDLE, P2: HANDLE, P3: ULONG, P4: ULONG): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CreateFiberEx*(P1: SIZE_T, P2: SIZE_T, P3: DWORD, P4: LPFIBER_START_ROUTINE, P5: LPVOID): LPVOID {.winapi, dynlib: "kernel32", importc.}
proc CreateFileMappingA*(P1: HANDLE, P2: LPSECURITY_ATTRIBUTES, P3: DWORD, P4: DWORD, P5: DWORD, P6: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateFileMappingW*(P1: HANDLE, P2: LPSECURITY_ATTRIBUTES, P3: DWORD, P4: DWORD, P5: DWORD, P6: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateHardLinkA*(P1: LPCSTR, P2: LPCSTR, P3: LPSECURITY_ATTRIBUTES): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CreateHardLinkW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPSECURITY_ATTRIBUTES): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CreateJobObjectA*(P1: LPSECURITY_ATTRIBUTES, P2: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateJobObjectW*(P1: LPSECURITY_ATTRIBUTES, P2: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateProcessWithLogonW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: LPCWSTR, P6: LPWSTR, P7: DWORD, P8: LPVOID, P9: LPCWSTR, P10: LPSTARTUPINFOW, P11: LPPROCESS_INFORMATION): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CreateTimerQueue*(): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateTimerQueueTimer*(P1: PHANDLE, P2: HANDLE, P3: WAITORTIMERCALLBACK, P4: PVOID, P5: DWORD, P6: DWORD, P7: ULONG): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DeleteTimerQueue*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DeleteTimerQueueEx*(P1: HANDLE, P2: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DeleteTimerQueueTimer*(P1: HANDLE, P2: HANDLE, P3: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DeleteVolumeMountPointA*(P1: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DeleteVolumeMountPointW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DnsHostnameToComputerNameA*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DnsHostnameToComputerNameW*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EncryptFileA*(P1: LPCSTR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc EncryptFileW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc FileEncryptionStatusA*(P1: LPCSTR, P2: LPDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc FileEncryptionStatusW*(P1: LPCWSTR, P2: LPDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc FindFirstVolumeA*(P1: LPCSTR, P2: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc FindFirstVolumeMountPointA*(P1: LPSTR, P2: LPSTR, P3: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc FindFirstVolumeMountPointW*(P1: LPWSTR, P2: LPWSTR, P3: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc FindFirstVolumeW*(P1: LPCWSTR, P2: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc FindNextVolumeA*(P1: HANDLE, P2: LPCSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FindNextVolumeW*(P1: HANDLE, P2: LPWSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FindNextVolumeMountPointA*(P1: HANDLE, P2: LPSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FindNextVolumeMountPointW*(P1: HANDLE, P2: LPWSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FindVolumeClose*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FindVolumeMountPointClose*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FlushViewOfFile*(P1: PCVOID, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FreeUserPhysicalPages*(P1: HANDLE, P2: PULONG_PTR, P3: PULONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetComputerNameExA*(P1: COMPUTER_NAME_FORMAT, P2: LPSTR, P3: LPDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetComputerNameExW*(P1: COMPUTER_NAME_FORMAT, P2: LPWSTR, P3: LPDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetFileSizeEx*(P1: HANDLE, P2: PLARGE_INTEGER): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetModuleHandleExA*(P1: DWORD, P2: LPCSTR, P3: ptr HMODULE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetModuleHandleExW*(P1: DWORD, P2: LPCWSTR, P3: ptr HMODULE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetProcessHeap*(): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc GetProcessHeaps*(P1: DWORD, P2: PHANDLE): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetProcessIoCounters*(P1: HANDLE, P2: PIO_COUNTERS): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetSystemPowerStatus*(P1: LPSYSTEM_POWER_STATUS): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetSystemWindowsDirectoryA*(P1: LPSTR, P2: UINT): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetSystemWindowsDirectoryW*(P1: LPWSTR, P2: UINT): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetVolumeNameForVolumeMountPointA*(P1: LPCSTR, P2: LPSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetVolumeNameForVolumeMountPointW*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetVolumePathNameA*(P1: LPCSTR, P2: LPSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetVolumePathNameW*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GlobalMemoryStatusEx*(P1: LPMEMORYSTATUSEX): BOOL {.winapi, dynlib: "kernel32", importc.}
proc IsBadCodePtr*(P1: FARPROC): BOOL {.winapi, dynlib: "kernel32", importc.}
proc IsSystemResumeAutomatic*(): BOOL {.winapi, dynlib: "kernel32", importc.}
proc MapUserPhysicalPages*(P1: PVOID, P2: ULONG_PTR, P3: PULONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc MapUserPhysicalPagesScatter*(P1: ptr PVOID, P2: ULONG_PTR, P3: PULONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc MapViewOfFile*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: DWORD): PVOID {.winapi, dynlib: "kernel32", importc.}
proc MapViewOfFileEx*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: DWORD, P6: PVOID): PVOID {.winapi, dynlib: "kernel32", importc.}
proc OpenFileMappingA*(P1: DWORD, P2: BOOL, P3: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc OpenFileMappingW*(P1: DWORD, P2: BOOL, P3: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc ProcessIdToSessionId*(P1: DWORD, P2: ptr DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc QueryInformationJobObject*(P1: HANDLE, P2: JOBOBJECTINFOCLASS, P3: LPVOID, P4: DWORD, P5: LPDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc RemoveVectoredExceptionHandler*(P1: PVOID): ULONG {.winapi, dynlib: "kernel32", importc.}
proc ReplaceFileA*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: LPVOID, P6: LPVOID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ReplaceFileW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: LPVOID, P6: LPVOID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetComputerNameExA*(P1: COMPUTER_NAME_FORMAT, P2: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetComputerNameExW*(P1: COMPUTER_NAME_FORMAT, P2: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetFilePointerEx*(P1: HANDLE, P2: LARGE_INTEGER, P3: PLARGE_INTEGER, P4: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetInformationJobObject*(P1: HANDLE, P2: JOBOBJECTINFOCLASS, P3: LPVOID, P4: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetSecurityDescriptorControl*(P1: PSECURITY_DESCRIPTOR, P2: SECURITY_DESCRIPTOR_CONTROL, P3: SECURITY_DESCRIPTOR_CONTROL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc SetSystemPowerState*(P1: BOOL, P2: BOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetThreadExecutionState*(P1: EXECUTION_STATE): EXECUTION_STATE {.winapi, dynlib: "kernel32", importc.}
proc SetThreadIdealProcessor*(P1: HANDLE, P2: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc SetVolumeMountPointA*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetVolumeMountPointW*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc TerminateJobObject*(P1: HANDLE, P2: UINT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc UnmapViewOfFile*(P1: PVOID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc UnregisterWait*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc UnregisterWaitEx*(P1: HANDLE, P2: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc VerifyVersionInfoA*(P1: LPOSVERSIONINFOEXA, P2: DWORD, P3: DWORDLONG): BOOL {.winapi, dynlib: "kernel32", importc.}
proc VerifyVersionInfoW*(P1: LPOSVERSIONINFOEXW, P2: DWORD, P3: DWORDLONG): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ActivateActCtx*(P1: HANDLE, P2: ptr ULONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc AddRefActCtx*(P1: HANDLE): void {.winapi, dynlib: "kernel32", importc.}
proc CheckNameLegalDOS8Dot3A*(P1: LPCSTR, P2: LPSTR, P3: DWORD, P4: PBOOL, P5: PBOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CheckNameLegalDOS8Dot3W*(P1: LPCWSTR, P2: LPSTR, P3: DWORD, P4: PBOOL, P5: PBOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CheckRemoteDebuggerPresent*(P1: HANDLE, P2: PBOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ConvertFiberToThread*(): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CreateActCtxA*(P1: PCACTCTXA): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateActCtxW*(P1: PCACTCTXW): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc CreateMemoryResourceNotification*(P1: MEMORY_RESOURCE_NOTIFICATION_TYPE): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc DeactivateActCtx*(P1: DWORD, P2: ULONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DebugActiveProcessStop*(P1: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DebugBreakProcess*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc DebugSetProcessKillOnExit*(P1: BOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FindActCtxSectionGuid*(P1: DWORD, P2: ptr GUID, P3: ULONG, P4: ptr GUID, P5: PACTCTX_SECTION_KEYED_DATA): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FindActCtxSectionStringA*(P1: DWORD, P2: ptr GUID, P3: ULONG, P4: LPCSTR, P5: PACTCTX_SECTION_KEYED_DATA): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FindActCtxSectionStringW*(P1: DWORD, P2: ptr GUID, P3: ULONG, P4: LPCWSTR, P5: PACTCTX_SECTION_KEYED_DATA): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetCurrentActCtx*(P1: ptr HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetNativeSystemInfo*(P1: LPSYSTEM_INFO): VOID {.winapi, dynlib: "kernel32", importc.}
proc GetProcessHandleCount*(P1: HANDLE, P2: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetSystemRegistryQuota*(P1: PDWORD, P2: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetSystemTimes*(P1: LPFILETIME, P2: LPFILETIME, P3: LPFILETIME): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetSystemWow64DirectoryA*(P1: LPSTR, P2: UINT): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetSystemWow64DirectoryW*(P1: LPWSTR, P2: UINT): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetThreadIOPendingFlag*(P1: HANDLE, P2: PBOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetVolumePathNamesForVolumeNameA*(P1: LPCSTR, P2: LPSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetVolumePathNamesForVolumeNameW*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetWriteWatch*(P1: DWORD, P2: PVOID, P3: SIZE_T, P4: ptr PVOID, P5: PULONG_PTR, P6: PULONG): UINT {.winapi, dynlib: "kernel32", importc.}
proc HeapQueryInformation*(P1: HANDLE, P2: HEAP_INFORMATION_CLASS, P3: PVOID, P4: SIZE_T, P5: PSIZE_T): BOOL {.winapi, dynlib: "kernel32", importc.}
proc HeapSetInformation*(P1: HANDLE, P2: HEAP_INFORMATION_CLASS, P3: PVOID, P4: SIZE_T): BOOL {.winapi, dynlib: "kernel32", importc.}
proc IsProcessInJob*(P1: HANDLE, P2: HANDLE, P3: PBOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc IsWow64Process*(P1: HANDLE, P2: PBOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc QueryActCtxW*(P1: DWORD, P2: HANDLE, P3: PVOID, P4: ULONG, P5: PVOID, P6: SIZE_T, P7: ptr SIZE_T): BOOL {.winapi, dynlib: "kernel32", importc.}
proc QueryMemoryResourceNotification*(P1: HANDLE, P2: PBOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ReleaseActCtx*(P1: HANDLE): void {.winapi, dynlib: "kernel32", importc.}
proc ResetWriteWatch*(P1: LPVOID, P2: SIZE_T): UINT {.winapi, dynlib: "kernel32", importc.}
proc SetFileShortNameA*(P1: HANDLE, P2: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetFileShortNameW*(P1: HANDLE, P2: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetFileValidData*(P1: HANDLE, P2: LONGLONG): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ZombifyActCtx*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetFirmwareEnvironmentVariableA*(P1: LPCSTR, P2: LPCSTR, P3: PVOID, P4: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetFirmwareEnvironmentVariableW*(P1: LPCWSTR, P2: LPCWSTR, P3: PVOID, P4: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetDllDirectoryA*(P1: DWORD, P2: LPSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetDllDirectoryW*(P1: DWORD, P2: LPWSTR): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetProcessId*(P1: HANDLE): DWORD {.winapi, dynlib: "kernel32", importc.}
proc ReOpenFile*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc SetDllDirectoryA*(P1: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetDllDirectoryW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetFirmwareEnvironmentVariableA*(P1: LPCSTR, P2: LPCSTR, P3: PVOID, P4: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetFirmwareEnvironmentVariableW*(P1: LPCWSTR, P2: LPCWSTR, P3: PVOID, P4: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc RestoreLastError*(P1: DWORD): VOID {.winapi, dynlib: "kernel32", importc.}
proc GlobalDiscard*(P1: HGLOBAL): HGLOBAL = GlobalReAlloc(P1, 0, GMEM_MOVEABLE)
proc LocalDiscard*(P1: HLOCAL): HLOCAL = LocalReAlloc(P1, 0, LMEM_MOVEABLE)

when not defined(winansi):
  type
    STARTUPINFO* = STARTUPINFOW
    WIN32_FIND_DATA* = WIN32_FIND_DATAW
    ENUMRESLANGPROC* = ENUMRESLANGPROCW
    ENUMRESNAMEPROC* = ENUMRESNAMEPROCW
    ENUMRESTYPEPROC* = ENUMRESTYPEPROCW

  proc AddAtom*(P1: LPCWSTR): ATOM {.winapi, dynlib: "kernel32", importc: "AddAtomW".}
  proc BeginUpdateResource*(P1: LPCWSTR, P2: BOOL): HANDLE {.winapi, dynlib: "kernel32", importc: "BeginUpdateResourceW".}
  proc BuildCommDCB*(P1: LPCWSTR, P2: LPDCB): BOOL {.winapi, dynlib: "kernel32", importc: "BuildCommDCBW".}
  proc BuildCommDCBAndTimeouts*(P1: LPCWSTR, P2: LPDCB, P3: LPCOMMTIMEOUTS): BOOL {.winapi, dynlib: "kernel32", importc: "BuildCommDCBAndTimeoutsW".}
  proc CallNamedPipe*(P1: LPCWSTR, P2: PVOID, P3: DWORD, P4: PVOID, P5: DWORD, P6: PDWORD, P7: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "CallNamedPipeW".}
  proc CommConfigDialog*(P1: LPCWSTR, P2: HWND, P3: LPCOMMCONFIG): BOOL {.winapi, dynlib: "kernel32", importc: "CommConfigDialogW".}
  proc CopyFile*(P1: LPCWSTR, P2: LPCWSTR, P3: BOOL): BOOL {.winapi, dynlib: "kernel32", importc: "CopyFileW".}
  proc CopyFileEx*(P1: LPCWSTR, P2: LPCWSTR, P3: LPPROGRESS_ROUTINE, P4: LPVOID, P5: LPBOOL, P6: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "CopyFileExW".}
  proc CreateDirectory*(P1: LPCWSTR, P2: LPSECURITY_ATTRIBUTES): BOOL {.winapi, dynlib: "kernel32", importc: "CreateDirectoryW".}
  proc CreateDirectoryEx*(P1: LPCWSTR, P2: LPCWSTR, P3: LPSECURITY_ATTRIBUTES): BOOL {.winapi, dynlib: "kernel32", importc: "CreateDirectoryExW".}
  proc CreateEvent*(P1: LPSECURITY_ATTRIBUTES, P2: BOOL, P3: BOOL, P4: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateEventW".}
  proc CreateFile*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: LPSECURITY_ATTRIBUTES, P5: DWORD, P6: DWORD, P7: HANDLE): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateFileW".}
  proc CreateMailslot*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: LPSECURITY_ATTRIBUTES): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateMailslotW".}
  proc CreateMutex*(P1: LPSECURITY_ATTRIBUTES, P2: BOOL, P3: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateMutexW".}
  proc CreateProcess*(P1: LPCWSTR, P2: LPWSTR, P3: LPSECURITY_ATTRIBUTES, P4: LPSECURITY_ATTRIBUTES, P5: BOOL, P6: DWORD, P7: PVOID, P8: LPCWSTR, P9: LPSTARTUPINFOW, P10: LPPROCESS_INFORMATION): BOOL {.winapi, dynlib: "kernel32", importc: "CreateProcessW".}
  proc CreateSemaphore*(P1: LPSECURITY_ATTRIBUTES, P2: LONG, P3: LONG, P4: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateSemaphoreW".}
  proc DeleteFile*(P1: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "DeleteFileW".}
  proc EndUpdateResource*(P1: HANDLE, P2: BOOL): BOOL {.winapi, dynlib: "kernel32", importc: "EndUpdateResourceW".}
  proc EnumResourceLanguages*(P1: HMODULE, P2: LPCWSTR, P3: LPCWSTR, P4: ENUMRESLANGPROC, P5: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc: "EnumResourceLanguagesW".}
  proc EnumResourceNames*(P1: HMODULE, P2: LPCWSTR, P3: ENUMRESNAMEPROC, P4: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc: "EnumResourceNamesW".}
  proc EnumResourceTypes*(P1: HMODULE, P2: ENUMRESTYPEPROC, P3: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc: "EnumResourceTypesW".}
  proc ExpandEnvironmentStrings*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "ExpandEnvironmentStringsW".}
  proc FatalAppExit*(P1: UINT, P2: LPCWSTR): void {.winapi, dynlib: "kernel32", importc: "FatalAppExitW".}
  proc FindAtom*(P1: LPCWSTR): ATOM {.winapi, dynlib: "kernel32", importc: "FindAtomW".}
  proc FindFirstChangeNotification*(P1: LPCWSTR, P2: BOOL, P3: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc: "FindFirstChangeNotificationW".}
  proc FindFirstFile*(P1: LPCWSTR, P2: LPWIN32_FIND_DATAW): HANDLE {.winapi, dynlib: "kernel32", importc: "FindFirstFileW".}
  proc FindNextFile*(P1: HANDLE, P2: LPWIN32_FIND_DATAW): BOOL {.winapi, dynlib: "kernel32", importc: "FindNextFileW".}
  proc FindResource*(P1: HINSTANCE, P2: LPCWSTR, P3: LPCWSTR): HRSRC {.winapi, dynlib: "kernel32", importc: "FindResourceW".}
  proc FindResourceEx*(P1: HINSTANCE, P2: LPCWSTR, P3: LPCWSTR, P4: WORD): HRSRC {.winapi, dynlib: "kernel32", importc: "FindResourceExW".}
  proc FormatMessage*(P1: DWORD, P2: PCVOID, P3: DWORD, P4: DWORD, P5: LPWSTR, P6: DWORD, P7: ptr va_list): DWORD {.winapi, dynlib: "kernel32", importc: "FormatMessageW".}
  proc FreeEnvironmentStrings*(P1: LPWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "FreeEnvironmentStringsW".}
  proc GetAtomName*(P1: ATOM, P2: LPWSTR, P3: int32): UINT {.winapi, dynlib: "kernel32", importc: "GetAtomNameW".}
  proc GetCommandLine*(): LPWSTR {.winapi, dynlib: "kernel32", importc: "GetCommandLineW".}
  proc GetComputerName*(P1: LPWSTR, P2: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetComputerNameW".}
  proc GetCurrentDirectory*(P1: DWORD, P2: LPWSTR): DWORD {.winapi, dynlib: "kernel32", importc: "GetCurrentDirectoryW".}
  proc GetDefaultCommConfig*(P1: LPCWSTR, P2: LPCOMMCONFIG, P3: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetDefaultCommConfigW".}
  proc GetDiskFreeSpace*(P1: LPCWSTR, P2: PDWORD, P3: PDWORD, P4: PDWORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetDiskFreeSpaceW".}
  proc GetDiskFreeSpaceEx*(P1: LPCWSTR, P2: PULARGE_INTEGER, P3: PULARGE_INTEGER, P4: PULARGE_INTEGER): BOOL {.winapi, dynlib: "kernel32", importc: "GetDiskFreeSpaceExW".}
  proc GetDriveType*(P1: LPCWSTR): UINT {.winapi, dynlib: "kernel32", importc: "GetDriveTypeW".}
  proc GetEnvironmentStrings*(): LPWSTR {.winapi, dynlib: "kernel32", importc: "GetEnvironmentStringsW".}
  proc GetEnvironmentVariable*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "GetEnvironmentVariableW".}
  proc GetFileAttributes*(P1: LPCWSTR): DWORD {.winapi, dynlib: "kernel32", importc: "GetFileAttributesW".}
  proc GetFullPathName*(P1: LPCWSTR, P2: DWORD, P3: LPWSTR, P4: ptr LPWSTR): DWORD {.winapi, dynlib: "kernel32", importc: "GetFullPathNameW".}
  proc GetLogicalDriveStrings*(P1: DWORD, P2: LPWSTR): DWORD {.winapi, dynlib: "kernel32", importc: "GetLogicalDriveStringsW".}
  proc GetModuleFileName*(P1: HINSTANCE, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "GetModuleFileNameW".}
  proc GetModuleHandle*(P1: LPCWSTR): HMODULE {.winapi, dynlib: "kernel32", importc: "GetModuleHandleW".}
  proc GetNamedPipeHandleState*(P1: HANDLE, P2: PDWORD, P3: PDWORD, P4: PDWORD, P5: PDWORD, P6: LPWSTR, P7: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetNamedPipeHandleStateW".}
  proc GetPrivateProfileInt*(P1: LPCWSTR, P2: LPCWSTR, P3: INT, P4: LPCWSTR): UINT {.winapi, dynlib: "kernel32", importc: "GetPrivateProfileIntW".}
  proc GetPrivateProfileSection*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD, P4: LPCWSTR): DWORD {.winapi, dynlib: "kernel32", importc: "GetPrivateProfileSectionW".}
  proc GetPrivateProfileSectionNames*(P1: LPWSTR, P2: DWORD, P3: LPCWSTR): DWORD {.winapi, dynlib: "kernel32", importc: "GetPrivateProfileSectionNamesW".}
  proc GetPrivateProfileString*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: DWORD, P6: LPCWSTR): DWORD {.winapi, dynlib: "kernel32", importc: "GetPrivateProfileStringW".}
  proc GetPrivateProfileStruct*(P1: LPCWSTR, P2: LPCWSTR, P3: LPVOID, P4: UINT, P5: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "GetPrivateProfileStructW".}
  proc GetProfileInt*(P1: LPCWSTR, P2: LPCWSTR, P3: INT): UINT {.winapi, dynlib: "kernel32", importc: "GetProfileIntW".}
  proc GetProfileSection*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "GetProfileSectionW".}
  proc GetProfileString*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "GetProfileStringW".}
  proc GetShortPathName*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "GetShortPathNameW".}
  proc GetStartupInfo*(P1: LPSTARTUPINFOW): VOID {.winapi, dynlib: "kernel32", importc: "GetStartupInfoW".}
  proc GetSystemDirectory*(P1: LPWSTR, P2: UINT): UINT {.winapi, dynlib: "kernel32", importc: "GetSystemDirectoryW".}
  proc GetTempFileName*(P1: LPCWSTR, P2: LPCWSTR, P3: UINT, P4: LPWSTR): UINT {.winapi, dynlib: "kernel32", importc: "GetTempFileNameW".}
  proc GetTempPath*(P1: DWORD, P2: LPWSTR): DWORD {.winapi, dynlib: "kernel32", importc: "GetTempPathW".}
  proc GetUserName*(P1: LPWSTR, P2: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "GetUserNameW".}
  proc GetVersionEx*(P1: LPOSVERSIONINFOW): BOOL {.winapi, dynlib: "kernel32", importc: "GetVersionExW".}
  proc GetVolumeInformation*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD, P4: PDWORD, P5: PDWORD, P6: PDWORD, P7: LPWSTR, P8: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetVolumeInformationW".}
  proc GetWindowsDirectory*(P1: LPWSTR, P2: UINT): UINT {.winapi, dynlib: "kernel32", importc: "GetWindowsDirectoryW".}
  proc GlobalAddAtom*(P1: LPCWSTR): ATOM {.winapi, dynlib: "kernel32", importc: "GlobalAddAtomW".}
  proc GlobalFindAtom*(P1: LPCWSTR): ATOM {.winapi, dynlib: "kernel32", importc: "GlobalFindAtomW".}
  proc GlobalGetAtomName*(P1: ATOM, P2: LPWSTR, P3: int32): UINT {.winapi, dynlib: "kernel32", importc: "GlobalGetAtomNameW".}
  proc IsBadStringPtr*(P1: LPCWSTR, P2: UINT): BOOL {.winapi, dynlib: "kernel32", importc: "IsBadStringPtrW".}
  proc LoadLibrary*(P1: LPCWSTR): HINSTANCE {.winapi, dynlib: "kernel32", importc: "LoadLibraryW".}
  proc LoadLibraryEx*(P1: LPCWSTR, P2: HANDLE, P3: DWORD): HINSTANCE {.winapi, dynlib: "kernel32", importc: "LoadLibraryExW".}
  proc lstrcat*(P1: LPWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "kernel32", importc: "lstrcatW".}
  proc lstrcmp*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "kernel32", importc: "lstrcmpW".}
  proc lstrcmpi*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "kernel32", importc: "lstrcmpiW".}
  proc lstrcpy*(P1: LPWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "kernel32", importc: "lstrcpyW".}
  proc lstrcpyn*(P1: LPWSTR, P2: LPCWSTR, P3: int32): LPWSTR {.winapi, dynlib: "kernel32", importc: "lstrcpynW".}
  proc lstrlen*(P1: LPCWSTR): int32 {.winapi, dynlib: "kernel32", importc: "lstrlenW".}
  proc MoveFile*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "MoveFileW".}
  proc OpenEvent*(P1: DWORD, P2: BOOL, P3: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "OpenEventW".}
  proc OpenMutex*(P1: DWORD, P2: BOOL, P3: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "OpenMutexW".}
  proc OpenSemaphore*(P1: DWORD, P2: BOOL, P3: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "OpenSemaphoreW".}
  proc OutputDebugString*(P1: LPCWSTR): void {.winapi, dynlib: "kernel32", importc: "OutputDebugStringW".}
  proc RemoveDirectory*(P1: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "RemoveDirectoryW".}
  proc SearchPath*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: LPWSTR, P6: ptr LPWSTR): DWORD {.winapi, dynlib: "kernel32", importc: "SearchPathW".}
  proc SetComputerName*(P1: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "SetComputerNameW".}
  proc SetCurrentDirectory*(P1: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "SetCurrentDirectoryW".}
  proc SetDefaultCommConfig*(P1: LPCWSTR, P2: LPCOMMCONFIG, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "SetDefaultCommConfigW".}
  proc SetEnvironmentVariable*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "SetEnvironmentVariableW".}
  proc SetFileAttributes*(P1: LPCWSTR, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "SetFileAttributesW".}
  proc SetVolumeLabel*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "SetVolumeLabelW".}
  proc WaitNamedPipe*(P1: LPCWSTR, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "WaitNamedPipeW".}
  proc WritePrivateProfileSection*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "WritePrivateProfileSectionW".}
  proc WritePrivateProfileString*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "WritePrivateProfileStringW".}
  proc WritePrivateProfileStruct*(P1: LPCWSTR, P2: LPCWSTR, P3: LPVOID, P4: UINT, P5: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "WritePrivateProfileStructW".}
  proc WriteProfileSection*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "WriteProfileSectionW".}
  proc WriteProfileString*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "WriteProfileStringW".}
  proc CreateWaitableTimer*(P1: LPSECURITY_ATTRIBUTES, P2: BOOL, P3: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateWaitableTimerW".}
  proc GetFileAttributesEx*(P1: LPCWSTR, P2: GET_FILEEX_INFO_LEVELS, P3: PVOID): BOOL {.winapi, dynlib: "kernel32", importc: "GetFileAttributesExW".}
  proc GetLongPathName*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "GetLongPathNameW".}
  proc QueryDosDevice*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "QueryDosDeviceW".}

  type
    HW_PROFILE_INFO* = HW_PROFILE_INFOW

  proc AccessCheckAndAuditAlarm*(P1: LPCWSTR, P2: LPVOID, P3: LPWSTR, P4: LPWSTR, P5: PSECURITY_DESCRIPTOR, P6: DWORD, P7: PGENERIC_MAPPING, P8: BOOL, P9: PDWORD, P10: PBOOL, P11: PBOOL): BOOL {.winapi, dynlib: "advapi32", importc: "AccessCheckAndAuditAlarmW".}
  proc BackupEventLog*(P1: HANDLE, P2: LPCWSTR): BOOL {.winapi, dynlib: "advapi32", importc: "BackupEventLogW".}
  proc ClearEventLog*(P1: HANDLE, P2: LPCWSTR): BOOL {.winapi, dynlib: "advapi32", importc: "ClearEventLogW".}
  proc CreateNamedPipe*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: DWORD, P5: DWORD, P6: DWORD, P7: DWORD, P8: LPSECURITY_ATTRIBUTES): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateNamedPipeW".}
  proc CreateProcessAsUser*(P1: HANDLE, P2: LPCWSTR, P3: LPWSTR, P4: LPSECURITY_ATTRIBUTES, P5: LPSECURITY_ATTRIBUTES, P6: BOOL, P7: DWORD, P8: PVOID, P9: LPCWSTR, P10: LPSTARTUPINFOW, P11: LPPROCESS_INFORMATION): BOOL {.winapi, dynlib: "advapi32", importc: "CreateProcessAsUserW".}
  proc DefineDosDevice*(P1: DWORD, P2: LPCWSTR, P3: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "DefineDosDeviceW".}
  proc FindFirstFileEx*(P1: LPCWSTR, P2: FINDEX_INFO_LEVELS, P3: PVOID, P4: FINDEX_SEARCH_OPS, P5: PVOID, P6: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc: "FindFirstFileExW".}
  proc GetBinaryType*(P1: LPCWSTR, P2: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetBinaryTypeW".}
  proc GetCompressedFileSize*(P1: LPCWSTR, P2: PDWORD): DWORD {.winapi, dynlib: "kernel32", importc: "GetCompressedFileSizeW".}
  proc GetFileSecurity*(P1: LPCWSTR, P2: SECURITY_INFORMATION, P3: PSECURITY_DESCRIPTOR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "GetFileSecurityW".}
  proc LogonUser*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR, P4: DWORD, P5: DWORD, P6: PHANDLE): BOOL {.winapi, dynlib: "advapi32", importc: "LogonUserW".}
  proc LookupAccountName*(P1: LPCWSTR, P2: LPCWSTR, P3: PSID, P4: PDWORD, P5: LPWSTR, P6: PDWORD, P7: PSID_NAME_USE): BOOL {.winapi, dynlib: "advapi32", importc: "LookupAccountNameW".}
  proc LookupAccountSid*(P1: LPCWSTR, P2: PSID, P3: LPWSTR, P4: PDWORD, P5: LPWSTR, P6: PDWORD, P7: PSID_NAME_USE): BOOL {.winapi, dynlib: "advapi32", importc: "LookupAccountSidW".}
  proc LookupPrivilegeDisplayName*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: PDWORD, P5: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "LookupPrivilegeDisplayNameW".}
  proc LookupPrivilegeName*(P1: LPCWSTR, P2: PLUID, P3: LPWSTR, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "LookupPrivilegeNameW".}
  proc LookupPrivilegeValue*(P1: LPCWSTR, P2: LPCWSTR, P3: PLUID): BOOL {.winapi, dynlib: "advapi32", importc: "LookupPrivilegeValueW".}
  proc MoveFileEx*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "MoveFileExW".}
  proc ObjectCloseAuditAlarm*(P1: LPCWSTR, P2: PVOID, P3: BOOL): BOOL {.winapi, dynlib: "advapi32", importc: "ObjectCloseAuditAlarmW".}
  proc ObjectDeleteAuditAlarm*(P1: LPCWSTR, P2: PVOID, P3: BOOL): BOOL {.winapi, dynlib: "advapi32", importc: "ObjectDeleteAuditAlarmW".}
  proc ObjectOpenAuditAlarm*(P1: LPCWSTR, P2: PVOID, P3: LPWSTR, P4: LPWSTR, P5: PSECURITY_DESCRIPTOR, P6: HANDLE, P7: DWORD, P8: DWORD, P9: PPRIVILEGE_SET, P10: BOOL, P11: BOOL, P12: PBOOL): BOOL {.winapi, dynlib: "advapi32", importc: "ObjectOpenAuditAlarmW".}
  proc ObjectPrivilegeAuditAlarm*(P1: LPCWSTR, P2: PVOID, P3: HANDLE, P4: DWORD, P5: PPRIVILEGE_SET, P6: BOOL): BOOL {.winapi, dynlib: "advapi32", importc: "ObjectPrivilegeAuditAlarmW".}
  proc OpenBackupEventLog*(P1: LPCWSTR, P2: LPCWSTR): HANDLE {.winapi, dynlib: "advapi32", importc: "OpenBackupEventLogW".}
  proc OpenEventLog*(P1: LPCWSTR, P2: LPCWSTR): HANDLE {.winapi, dynlib: "advapi32", importc: "OpenEventLogW".}
  proc PrivilegedServiceAuditAlarm*(P1: LPCWSTR, P2: LPCWSTR, P3: HANDLE, P4: PPRIVILEGE_SET, P5: BOOL): BOOL {.winapi, dynlib: "advapi32", importc: "PrivilegedServiceAuditAlarmW".}
  proc ReadEventLog*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PVOID, P5: DWORD, P6: ptr DWORD, P7: ptr DWORD): BOOL {.winapi, dynlib: "advapi32", importc: "ReadEventLogW".}
  proc RegisterEventSource*(P1: LPCWSTR, P2: LPCWSTR): HANDLE {.winapi, dynlib: "advapi32", importc: "RegisterEventSourceW".}
  proc ReportEvent*(P1: HANDLE, P2: WORD, P3: WORD, P4: DWORD, P5: PSID, P6: WORD, P7: DWORD, P8: ptr LPCWSTR, P9: PVOID): BOOL {.winapi, dynlib: "advapi32", importc: "ReportEventW".}
  proc SetFileSecurity*(P1: LPCWSTR, P2: SECURITY_INFORMATION, P3: PSECURITY_DESCRIPTOR): BOOL {.winapi, dynlib: "advapi32", importc: "SetFileSecurityW".}
  proc UpdateResource*(P1: HANDLE, P2: LPCWSTR, P3: LPCWSTR, P4: WORD, P5: PVOID, P6: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "UpdateResourceW".}
  proc CreateFileMapping*(P1: HANDLE, P2: LPSECURITY_ATTRIBUTES, P3: DWORD, P4: DWORD, P5: DWORD, P6: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateFileMappingW".}
  proc CreateHardLink*(P1: LPCWSTR, P2: LPCWSTR, P3: LPSECURITY_ATTRIBUTES): BOOL {.winapi, dynlib: "kernel32", importc: "CreateHardLinkW".}
  proc CreateJobObject*(P1: LPSECURITY_ATTRIBUTES, P2: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateJobObjectW".}
  proc DeleteVolumeMountPoint*(P1: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "DeleteVolumeMountPointW".}
  proc DnsHostnameToComputerName*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "DnsHostnameToComputerNameW".}
  proc EncryptFile*(P1: LPCWSTR): BOOL {.winapi, dynlib: "advapi32", importc: "EncryptFileW".}
  proc FileEncryptionStatus*(P1: LPCWSTR, P2: LPDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "FileEncryptionStatusW".}
  proc FindFirstVolume*(P1: LPCWSTR, P2: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc: "FindFirstVolumeW".}
  proc FindFirstVolumeMountPoint*(P1: LPWSTR, P2: LPWSTR, P3: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc: "FindFirstVolumeMountPointW".}
  proc FindNextVolume*(P1: HANDLE, P2: LPWSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "FindNextVolumeW".}
  proc FindNextVolumeMountPoint*(P1: HANDLE, P2: LPWSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "FindNextVolumeMountPointW".}
  proc GetModuleHandleEx*(P1: DWORD, P2: LPCWSTR, P3: ptr HMODULE): BOOL {.winapi, dynlib: "kernel32", importc: "GetModuleHandleExW".}
  proc GetSystemWindowsDirectory*(P1: LPWSTR, P2: UINT): UINT {.winapi, dynlib: "kernel32", importc: "GetSystemWindowsDirectoryW".}
  proc GetVolumeNameForVolumeMountPoint*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetVolumeNameForVolumeMountPointW".}
  proc GetVolumePathName*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetVolumePathNameW".}
  proc OpenFileMapping*(P1: DWORD, P2: BOOL, P3: LPCWSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "OpenFileMappingW".}
  proc ReplaceFile*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: LPVOID, P6: LPVOID): BOOL {.winapi, dynlib: "kernel32", importc: "ReplaceFileW".}
  proc SetVolumeMountPoint*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "SetVolumeMountPointW".}
  proc VerifyVersionInfo*(P1: LPOSVERSIONINFOEXW, P2: DWORD, P3: DWORDLONG): BOOL {.winapi, dynlib: "kernel32", importc: "VerifyVersionInfoW".}

  type
    ACTCTX* = ACTCTXW

  proc CheckNameLegalDOS8Dot3*(P1: LPCWSTR, P2: LPSTR, P3: DWORD, P4: PBOOL, P5: PBOOL): BOOL {.winapi, dynlib: "kernel32", importc: "CheckNameLegalDOS8Dot3W".}
  proc CreateActCtx*(P1: PCACTCTXW): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateActCtxW".}
  proc FindActCtxSectionString*(P1: DWORD, P2: ptr GUID, P3: ULONG, P4: LPCWSTR, P5: PACTCTX_SECTION_KEYED_DATA): BOOL {.winapi, dynlib: "kernel32", importc: "FindActCtxSectionStringW".}
  proc GetSystemWow64Directory*(P1: LPWSTR, P2: UINT): UINT {.winapi, dynlib: "kernel32", importc: "GetSystemWow64DirectoryW".}
  proc GetVolumePathNamesForVolumeName*(P1: LPCWSTR, P2: LPWSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetVolumePathNamesForVolumeNameW".}
  proc SetFileShortName*(P1: HANDLE, P2: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "SetFileShortNameW".}
  proc SetFirmwareEnvironmentVariable*(P1: LPCWSTR, P2: LPCWSTR, P3: PVOID, P4: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "SetFirmwareEnvironmentVariableW".}
  proc SetDllDirectory*(P1: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "SetDllDirectoryW".}
  proc GetDllDirectory*(P1: DWORD, P2: LPWSTR): DWORD {.winapi, dynlib: "kernel32", importc: "GetDllDirectoryW".}

else:
  type
    STARTUPINFO* = STARTUPINFOA
    WIN32_FIND_DATA* = WIN32_FIND_DATAA
    ENUMRESLANGPROC* = ENUMRESLANGPROCW
    ENUMRESNAMEPROC* = ENUMRESNAMEPROCW
    ENUMRESTYPEPROC* = ENUMRESTYPEPROCW

  proc AddAtom*(P1: LPCSTR): ATOM {.winapi, dynlib: "kernel32", importc: "AddAtomA".}
  proc BeginUpdateResource*(P1: LPCSTR, P2: BOOL): HANDLE {.winapi, dynlib: "kernel32", importc: "BeginUpdateResourceA".}
  proc BuildCommDCB*(P1: LPCSTR, P2: LPDCB): BOOL {.winapi, dynlib: "kernel32", importc: "BuildCommDCBA".}
  proc BuildCommDCBAndTimeouts*(P1: LPCSTR, P2: LPDCB, P3: LPCOMMTIMEOUTS): BOOL {.winapi, dynlib: "kernel32", importc: "BuildCommDCBAndTimeoutsA".}
  proc CallNamedPipe*(P1: LPCSTR, P2: PVOID, P3: DWORD, P4: PVOID, P5: DWORD, P6: PDWORD, P7: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "CallNamedPipeA".}
  proc CommConfigDialog*(P1: LPCSTR, P2: HWND, P3: LPCOMMCONFIG): BOOL {.winapi, dynlib: "kernel32", importc: "CommConfigDialogA".}
  proc CopyFile*(P1: LPCSTR, P2: LPCSTR, P3: BOOL): BOOL {.winapi, dynlib: "kernel32", importc: "CopyFileA".}
  proc CopyFileEx*(P1: LPCSTR, P2: LPCSTR, P3: LPPROGRESS_ROUTINE, P4: LPVOID, P5: LPBOOL, P6: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "CopyFileExA".}
  proc CreateDirectory*(P1: LPCSTR, P2: LPSECURITY_ATTRIBUTES): BOOL {.winapi, dynlib: "kernel32", importc: "CreateDirectoryA".}
  proc CreateDirectoryEx*(P1: LPCSTR, P2: LPCSTR, P3: LPSECURITY_ATTRIBUTES): BOOL {.winapi, dynlib: "kernel32", importc: "CreateDirectoryExA".}
  proc CreateEvent*(P1: LPSECURITY_ATTRIBUTES, P2: BOOL, P3: BOOL, P4: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateEventA".}
  proc CreateFile*(P1: LPCSTR, P2: DWORD, P3: DWORD, P4: LPSECURITY_ATTRIBUTES, P5: DWORD, P6: DWORD, P7: HANDLE): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateFileA".}
  proc CreateMailslot*(P1: LPCSTR, P2: DWORD, P3: DWORD, P4: LPSECURITY_ATTRIBUTES): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateMailslotA".}
  proc CreateMutex*(P1: LPSECURITY_ATTRIBUTES, P2: BOOL, P3: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateMutexA".}
  proc CreateProcess*(P1: LPCSTR, P2: LPSTR, P3: LPSECURITY_ATTRIBUTES, P4: LPSECURITY_ATTRIBUTES, P5: BOOL, P6: DWORD, P7: PVOID, P8: LPCSTR, P9: LPSTARTUPINFOA, P10: LPPROCESS_INFORMATION): BOOL {.winapi, dynlib: "kernel32", importc: "CreateProcessA".}
  proc CreateSemaphore*(P1: LPSECURITY_ATTRIBUTES, P2: LONG, P3: LONG, P4: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateSemaphoreA".}
  proc DeleteFile*(P1: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "DeleteFileA".}
  proc EndUpdateResource*(P1: HANDLE, P2: BOOL): BOOL {.winapi, dynlib: "kernel32", importc: "EndUpdateResourceA".}
  proc EnumResourceLanguages*(P1: HMODULE, P2: LPCSTR, P3: LPCSTR, P4: ENUMRESLANGPROC, P5: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc: "EnumResourceLanguagesA".}
  proc EnumResourceNames*(P1: HMODULE, P2: LPCSTR, P3: ENUMRESNAMEPROC, P4: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc: "EnumResourceNamesA".}
  proc EnumResourceTypes*(P1: HMODULE, P2: ENUMRESTYPEPROC, P3: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc: "EnumResourceTypesA".}
  proc ExpandEnvironmentStrings*(P1: LPCSTR, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "ExpandEnvironmentStringsA".}
  proc FatalAppExit*(P1: UINT, P2: LPCSTR): void {.winapi, dynlib: "kernel32", importc: "FatalAppExitA".}
  proc FindAtom*(P1: LPCSTR): ATOM {.winapi, dynlib: "kernel32", importc: "FindAtomA".}
  proc FindFirstChangeNotification*(P1: LPCSTR, P2: BOOL, P3: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc: "FindFirstChangeNotificationA".}
  proc FindFirstFile*(P1: LPCSTR, P2: LPWIN32_FIND_DATAA): HANDLE {.winapi, dynlib: "kernel32", importc: "FindFirstFileA".}
  proc FindNextFile*(P1: HANDLE, P2: LPWIN32_FIND_DATAA): BOOL {.winapi, dynlib: "kernel32", importc: "FindNextFileA".}
  proc FindResource*(P1: HMODULE, P2: LPCSTR, P3: LPCSTR): HRSRC {.winapi, dynlib: "kernel32", importc: "FindResourceA".}
  proc FindResourceEx*(P1: HINSTANCE, P2: LPCSTR, P3: LPCSTR, P4: WORD): HRSRC {.winapi, dynlib: "kernel32", importc: "FindResourceExA".}
  proc FormatMessage*(P1: DWORD, P2: PCVOID, P3: DWORD, P4: DWORD, P5: LPSTR, P6: DWORD, P7: ptr va_list): DWORD {.winapi, dynlib: "kernel32", importc: "FormatMessageA".}
  proc FreeEnvironmentStrings*(P1: LPSTR): BOOL {.winapi, dynlib: "kernel32", importc: "FreeEnvironmentStringsA".}
  proc GetAtomName*(P1: ATOM, P2: LPSTR, P3: int32): UINT {.winapi, dynlib: "kernel32", importc: "GetAtomNameA".}
  proc GetCommandLine*(): LPSTR {.winapi, dynlib: "kernel32", importc: "GetCommandLineA".}
  proc GetComputerName*(P1: LPSTR, P2: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetComputerNameA".}
  proc GetCurrentDirectory*(P1: DWORD, P2: LPSTR): DWORD {.winapi, dynlib: "kernel32", importc: "GetCurrentDirectoryA".}
  proc GetDefaultCommConfig*(P1: LPCSTR, P2: LPCOMMCONFIG, P3: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetDefaultCommConfigA".}
  proc GetDiskFreeSpace*(P1: LPCSTR, P2: PDWORD, P3: PDWORD, P4: PDWORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetDiskFreeSpaceA".}
  proc GetDiskFreeSpaceEx*(P1: LPCSTR, P2: PULARGE_INTEGER, P3: PULARGE_INTEGER, P4: PULARGE_INTEGER): BOOL {.winapi, dynlib: "kernel32", importc: "GetDiskFreeSpaceExA".}
  proc GetDriveType*(P1: LPCSTR): UINT {.winapi, dynlib: "kernel32", importc: "GetDriveTypeA".}
  proc GetEnvironmentVariable*(P1: LPCSTR, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "GetEnvironmentVariableA".}
  proc GetFileAttributes*(P1: LPCSTR): DWORD {.winapi, dynlib: "kernel32", importc: "GetFileAttributesA".}
  proc GetFullPathName*(P1: LPCSTR, P2: DWORD, P3: LPSTR, P4: ptr LPSTR): DWORD {.winapi, dynlib: "kernel32", importc: "GetFullPathNameA".}
  proc GetLogicalDriveStrings*(P1: DWORD, P2: LPSTR): DWORD {.winapi, dynlib: "kernel32", importc: "GetLogicalDriveStringsA".}
  proc GetNamedPipeHandleState*(P1: HANDLE, P2: PDWORD, P3: PDWORD, P4: PDWORD, P5: PDWORD, P6: LPSTR, P7: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetNamedPipeHandleStateA".}
  proc GetModuleHandle*(P1: LPCSTR): HMODULE {.winapi, dynlib: "kernel32", importc: "GetModuleHandleA".}
  proc GetModuleFileName*(P1: HINSTANCE, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "GetModuleFileNameA".}
  proc GetPrivateProfileInt*(P1: LPCSTR, P2: LPCSTR, P3: INT, P4: LPCSTR): UINT {.winapi, dynlib: "kernel32", importc: "GetPrivateProfileIntA".}
  proc GetPrivateProfileSection*(P1: LPCSTR, P2: LPSTR, P3: DWORD, P4: LPCSTR): DWORD {.winapi, dynlib: "kernel32", importc: "GetPrivateProfileSectionA".}
  proc GetPrivateProfileSectionNames*(P1: LPSTR, P2: DWORD, P3: LPCSTR): DWORD {.winapi, dynlib: "kernel32", importc: "GetPrivateProfileSectionNamesA".}
  proc GetPrivateProfileString*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: LPSTR, P5: DWORD, P6: LPCSTR): DWORD {.winapi, dynlib: "kernel32", importc: "GetPrivateProfileStringA".}
  proc GetPrivateProfileStruct*(P1: LPCSTR, P2: LPCSTR, P3: LPVOID, P4: UINT, P5: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "GetPrivateProfileStructA".}
  proc GetProfileInt*(P1: LPCSTR, P2: LPCSTR, P3: INT): UINT {.winapi, dynlib: "kernel32", importc: "GetProfileIntA".}
  proc GetProfileSection*(P1: LPCSTR, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "GetProfileSectionA".}
  proc GetProfileString*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: LPSTR, P5: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "GetProfileStringA".}
  proc GetShortPathName*(P1: LPCSTR, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "GetShortPathNameA".}
  proc GetStartupInfo*(P1: LPSTARTUPINFOA): VOID {.winapi, dynlib: "kernel32", importc: "GetStartupInfoA".}
  proc GetSystemDirectory*(P1: LPSTR, P2: UINT): UINT {.winapi, dynlib: "kernel32", importc: "GetSystemDirectoryA".}
  proc GetTempFileName*(P1: LPCSTR, P2: LPCSTR, P3: UINT, P4: LPSTR): UINT {.winapi, dynlib: "kernel32", importc: "GetTempFileNameA".}
  proc GetTempPath*(P1: DWORD, P2: LPSTR): DWORD {.winapi, dynlib: "kernel32", importc: "GetTempPathA".}
  proc GetUserName*(P1: LPSTR, P2: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "GetUserNameA".}
  proc GetVersionEx*(P1: LPOSVERSIONINFOA): BOOL {.winapi, dynlib: "kernel32", importc: "GetVersionExA".}
  proc GetVolumeInformation*(P1: LPCSTR, P2: LPSTR, P3: DWORD, P4: PDWORD, P5: PDWORD, P6: PDWORD, P7: LPSTR, P8: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetVolumeInformationA".}
  proc GetWindowsDirectory*(P1: LPSTR, P2: UINT): UINT {.winapi, dynlib: "kernel32", importc: "GetWindowsDirectoryA".}
  proc GlobalAddAtom*(P1: LPCSTR): ATOM {.winapi, dynlib: "kernel32", importc: "GlobalAddAtomA".}
  proc GlobalFindAtom*(P1: LPCSTR): ATOM {.winapi, dynlib: "kernel32", importc: "GlobalFindAtomA".}
  proc GlobalGetAtomName*(P1: ATOM, P2: LPSTR, P3: int32): UINT {.winapi, dynlib: "kernel32", importc: "GlobalGetAtomNameA".}
  proc IsBadStringPtr*(P1: LPCSTR, P2: UINT): BOOL {.winapi, dynlib: "kernel32", importc: "IsBadStringPtrA".}
  proc LoadLibrary*(P1: LPCSTR): HINSTANCE {.winapi, dynlib: "kernel32", importc: "LoadLibraryA".}
  proc LoadLibraryEx*(P1: LPCSTR, P2: HANDLE, P3: DWORD): HINSTANCE {.winapi, dynlib: "kernel32", importc: "LoadLibraryExA".}
  proc lstrcat*(P1: LPSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "kernel32", importc: "lstrcatA".}
  proc lstrcmp*(P1: LPCSTR, P2: LPCSTR): int32 {.winapi, dynlib: "kernel32", importc: "lstrcmpA".}
  proc lstrcmpi*(P1: LPCSTR, P2: LPCSTR): int32 {.winapi, dynlib: "kernel32", importc: "lstrcmpiA".}
  proc lstrcpy*(P1: LPSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "kernel32", importc: "lstrcpyA".}
  proc lstrcpyn*(P1: LPSTR, P2: LPCSTR, P3: int32): LPSTR {.winapi, dynlib: "kernel32", importc: "lstrcpynA".}
  proc lstrlen*(P1: LPCSTR): int32 {.winapi, dynlib: "kernel32", importc: "lstrlenA".}
  proc MoveFile*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "MoveFileA".}
  proc OpenEvent*(P1: DWORD, P2: BOOL, P3: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "OpenEventA".}
  proc OpenMutex*(P1: DWORD, P2: BOOL, P3: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "OpenMutexA".}
  proc OpenSemaphore*(P1: DWORD, P2: BOOL, P3: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "OpenSemaphoreA".}
  proc OutputDebugString*(P1: LPCSTR): void {.winapi, dynlib: "kernel32", importc: "OutputDebugStringA".}
  proc RemoveDirectory*(P1: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "RemoveDirectoryA".}
  proc SearchPath*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: LPSTR, P6: ptr LPSTR): DWORD {.winapi, dynlib: "kernel32", importc: "SearchPathA".}
  proc SetComputerName*(P1: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "SetComputerNameA".}
  proc SetCurrentDirectory*(P1: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "SetCurrentDirectoryA".}
  proc SetDefaultCommConfig*(P1: LPCSTR, P2: LPCOMMCONFIG, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "SetDefaultCommConfigA".}
  proc SetEnvironmentVariable*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "SetEnvironmentVariableA".}
  proc SetFileAttributes*(P1: LPCSTR, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "SetFileAttributesA".}
  proc SetVolumeLabel*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "SetVolumeLabelA".}
  proc WaitNamedPipe*(P1: LPCSTR, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "WaitNamedPipeA".}
  proc WritePrivateProfileSection*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "WritePrivateProfileSectionA".}
  proc WritePrivateProfileString*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "WritePrivateProfileStringA".}
  proc WritePrivateProfileStruct*(P1: LPCSTR, P2: LPCSTR, P3: LPVOID, P4: UINT, P5: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "WritePrivateProfileStructA".}
  proc WriteProfileSection*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "WriteProfileSectionA".}
  proc WriteProfileString*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "WriteProfileStringA".}
  proc CreateWaitableTimer*(P1: LPSECURITY_ATTRIBUTES, P2: BOOL, P3: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateWaitableTimerA".}
  proc GetFileAttributesEx*(P1: LPCSTR, P2: GET_FILEEX_INFO_LEVELS, P3: PVOID): BOOL {.winapi, dynlib: "kernel32", importc: "GetFileAttributesExA".}
  proc GetLongPathName*(P1: LPCSTR, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "GetLongPathNameA".}
  proc QueryDosDevice*(P1: LPCSTR, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "QueryDosDeviceA".}

  type
    HW_PROFILE_INFO* = HW_PROFILE_INFOA

  proc AccessCheckAndAuditAlarm*(P1: LPCSTR, P2: LPVOID, P3: LPSTR, P4: LPSTR, P5: PSECURITY_DESCRIPTOR, P6: DWORD, P7: PGENERIC_MAPPING, P8: BOOL, P9: PDWORD, P10: PBOOL, P11: PBOOL): BOOL {.winapi, dynlib: "advapi32", importc: "AccessCheckAndAuditAlarmA".}
  proc BackupEventLog*(P1: HANDLE, P2: LPCSTR): BOOL {.winapi, dynlib: "advapi32", importc: "BackupEventLogA".}
  proc ClearEventLog*(P1: HANDLE, P2: LPCSTR): BOOL {.winapi, dynlib: "advapi32", importc: "ClearEventLogA".}
  proc CreateNamedPipe*(P1: LPCSTR, P2: DWORD, P3: DWORD, P4: DWORD, P5: DWORD, P6: DWORD, P7: DWORD, P8: LPSECURITY_ATTRIBUTES): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateNamedPipeA".}
  proc CreateProcessAsUser*(P1: HANDLE, P2: LPCSTR, P3: LPSTR, P4: LPSECURITY_ATTRIBUTES, P5: LPSECURITY_ATTRIBUTES, P6: BOOL, P7: DWORD, P8: PVOID, P9: LPCSTR, P10: LPSTARTUPINFOA, P11: LPPROCESS_INFORMATION): BOOL {.winapi, dynlib: "advapi32", importc: "CreateProcessAsUserA".}
  proc DefineDosDevice*(P1: DWORD, P2: LPCSTR, P3: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "DefineDosDeviceA".}
  proc FindFirstFileEx*(P1: LPCSTR, P2: FINDEX_INFO_LEVELS, P3: PVOID, P4: FINDEX_SEARCH_OPS, P5: PVOID, P6: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc: "FindFirstFileExA".}
  proc GetBinaryType*(P1: LPCSTR, P2: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetBinaryTypeA".}
  proc GetCompressedFileSize*(P1: LPCSTR, P2: PDWORD): DWORD {.winapi, dynlib: "kernel32", importc: "GetCompressedFileSizeA".}
  proc GetFileSecurity*(P1: LPCSTR, P2: SECURITY_INFORMATION, P3: PSECURITY_DESCRIPTOR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "GetFileSecurityA".}
  proc LogonUser*(P1: LPSTR, P2: LPSTR, P3: LPSTR, P4: DWORD, P5: DWORD, P6: PHANDLE): BOOL {.winapi, dynlib: "advapi32", importc: "LogonUserA".}
  proc LookupAccountName*(P1: LPCSTR, P2: LPCSTR, P3: PSID, P4: PDWORD, P5: LPSTR, P6: PDWORD, P7: PSID_NAME_USE): BOOL {.winapi, dynlib: "advapi32", importc: "LookupAccountNameA".}
  proc LookupAccountSid*(P1: LPCSTR, P2: PSID, P3: LPSTR, P4: PDWORD, P5: LPSTR, P6: PDWORD, P7: PSID_NAME_USE): BOOL {.winapi, dynlib: "advapi32", importc: "LookupAccountSidA".}
  proc LookupPrivilegeDisplayName*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: PDWORD, P5: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "LookupPrivilegeDisplayNameA".}
  proc LookupPrivilegeName*(P1: LPCSTR, P2: PLUID, P3: LPSTR, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "LookupPrivilegeNameA".}
  proc LookupPrivilegeValue*(P1: LPCSTR, P2: LPCSTR, P3: PLUID): BOOL {.winapi, dynlib: "advapi32", importc: "LookupPrivilegeValueA".}
  proc MoveFileEx*(P1: LPCSTR, P2: LPCSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "MoveFileExA".}
  proc ObjectCloseAuditAlarm*(P1: LPCSTR, P2: PVOID, P3: BOOL): BOOL {.winapi, dynlib: "advapi32", importc: "ObjectCloseAuditAlarmA".}
  proc ObjectDeleteAuditAlarm*(P1: LPCSTR, P2: PVOID, P3: BOOL): BOOL {.winapi, dynlib: "advapi32", importc: "ObjectDeleteAuditAlarmA".}
  proc ObjectOpenAuditAlarm*(P1: LPCSTR, P2: PVOID, P3: LPSTR, P4: LPSTR, P5: PSECURITY_DESCRIPTOR, P6: HANDLE, P7: DWORD, P8: DWORD, P9: PPRIVILEGE_SET, P10: BOOL, P11: BOOL, P12: PBOOL): BOOL {.winapi, dynlib: "advapi32", importc: "ObjectOpenAuditAlarmA".}
  proc ObjectPrivilegeAuditAlarm*(P1: LPCSTR, P2: PVOID, P3: HANDLE, P4: DWORD, P5: PPRIVILEGE_SET, P6: BOOL): BOOL {.winapi, dynlib: "advapi32", importc: "ObjectPrivilegeAuditAlarmA".}
  proc OpenBackupEventLog*(P1: LPCSTR, P2: LPCSTR): HANDLE {.winapi, dynlib: "advapi32", importc: "OpenBackupEventLogA".}
  proc OpenEventLog*(P1: LPCSTR, P2: LPCSTR): HANDLE {.winapi, dynlib: "advapi32", importc: "OpenEventLogA".}
  proc PrivilegedServiceAuditAlarm*(P1: LPCSTR, P2: LPCSTR, P3: HANDLE, P4: PPRIVILEGE_SET, P5: BOOL): BOOL {.winapi, dynlib: "advapi32", importc: "PrivilegedServiceAuditAlarmA".}
  proc ReadEventLog*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PVOID, P5: DWORD, P6: ptr DWORD, P7: ptr DWORD): BOOL {.winapi, dynlib: "advapi32", importc: "ReadEventLogA".}
  proc RegisterEventSource*(P1: LPCSTR, P2: LPCSTR): HANDLE {.winapi, dynlib: "advapi32", importc: "RegisterEventSourceA".}
  proc ReportEvent*(P1: HANDLE, P2: WORD, P3: WORD, P4: DWORD, P5: PSID, P6: WORD, P7: DWORD, P8: ptr LPCSTR, P9: PVOID): BOOL {.winapi, dynlib: "advapi32", importc: "ReportEventA".}
  proc SetFileSecurity*(P1: LPCSTR, P2: SECURITY_INFORMATION, P3: PSECURITY_DESCRIPTOR): BOOL {.winapi, dynlib: "advapi32", importc: "SetFileSecurityA".}
  proc UpdateResource*(P1: HANDLE, P2: LPCSTR, P3: LPCSTR, P4: WORD, P5: PVOID, P6: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "UpdateResourceA".}
  proc CreateFileMapping*(P1: HANDLE, P2: LPSECURITY_ATTRIBUTES, P3: DWORD, P4: DWORD, P5: DWORD, P6: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateFileMappingA".}
  proc CreateHardLink*(P1: LPCSTR, P2: LPCSTR, P3: LPSECURITY_ATTRIBUTES): BOOL {.winapi, dynlib: "kernel32", importc: "CreateHardLinkA".}
  proc CreateJobObject*(P1: LPSECURITY_ATTRIBUTES, P2: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateJobObjectA".}
  proc DeleteVolumeMountPoint*(P1: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "DeleteVolumeMountPointA".}
  proc DnsHostnameToComputerName*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "DnsHostnameToComputerNameA".}
  proc EncryptFile*(P1: LPCSTR): BOOL {.winapi, dynlib: "advapi32", importc: "EncryptFileA".}
  proc FileEncryptionStatus*(P1: LPCSTR, P2: LPDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "FileEncryptionStatusA".}
  proc FindFirstVolume*(P1: LPCSTR, P2: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc: "FindFirstVolumeA".}
  proc FindFirstVolumeMountPoint*(P1: LPSTR, P2: LPSTR, P3: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc: "FindFirstVolumeMountPointA".}
  proc FindNextVolume*(P1: HANDLE, P2: LPCSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "FindNextVolumeA".}
  proc FindNextVolumeMountPoint*(P1: HANDLE, P2: LPSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "FindNextVolumeMountPointA".}
  proc GetModuleHandleEx*(P1: DWORD, P2: LPCSTR, P3: ptr HMODULE): BOOL {.winapi, dynlib: "kernel32", importc: "GetModuleHandleExA".}
  proc GetSystemWindowsDirectory*(P1: LPSTR, P2: UINT): UINT {.winapi, dynlib: "kernel32", importc: "GetSystemWindowsDirectoryA".}
  proc GetVolumeNameForVolumeMountPoint*(P1: LPCSTR, P2: LPSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetVolumeNameForVolumeMountPointA".}
  proc GetVolumePathName*(P1: LPCSTR, P2: LPSTR, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetVolumePathNameA".}
  proc OpenFileMapping*(P1: DWORD, P2: BOOL, P3: LPCSTR): HANDLE {.winapi, dynlib: "kernel32", importc: "OpenFileMappingA".}
  proc ReplaceFile*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: LPVOID, P6: LPVOID): BOOL {.winapi, dynlib: "kernel32", importc: "ReplaceFileA".}
  proc SetVolumeMountPoint*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "SetVolumeMountPointA".}
  proc VerifyVersionInfo*(P1: LPOSVERSIONINFOEXA, P2: DWORD, P3: DWORDLONG): BOOL {.winapi, dynlib: "kernel32", importc: "VerifyVersionInfoA".}

  type
    ACTCTX* = ACTCTXA

  proc CheckNameLegalDOS8Dot3*(P1: LPCSTR, P2: LPSTR, P3: DWORD, P4: PBOOL, P5: PBOOL): BOOL {.winapi, dynlib: "kernel32", importc: "CheckNameLegalDOS8Dot3A".}
  proc CreateActCtx*(P1: PCACTCTXA): HANDLE {.winapi, dynlib: "kernel32", importc: "CreateActCtxA".}
  proc FindActCtxSectionString*(P1: DWORD, P2: ptr GUID, P3: ULONG, P4: LPCSTR, P5: PACTCTX_SECTION_KEYED_DATA): BOOL {.winapi, dynlib: "kernel32", importc: "FindActCtxSectionStringA".}
  proc GetSystemWow64Directory*(P1: LPSTR, P2: UINT): UINT {.winapi, dynlib: "kernel32", importc: "GetSystemWow64DirectoryA".}
  proc GetVolumePathNamesForVolumeName*(P1: LPCSTR, P2: LPSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetVolumePathNamesForVolumeNameA".}
  proc SetFileShortName*(P1: HANDLE, P2: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "SetFileShortNameA".}
  proc GetDllDirectory*(P1: DWORD, P2: LPSTR): DWORD {.winapi, dynlib: "kernel32", importc: "GetDllDirectoryA".}
  proc SetDllDirectory*(P1: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "SetDllDirectoryA".}
  proc SetFirmwareEnvironmentVariable*(P1: LPCSTR, P2: LPCSTR, P3: PVOID, P4: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "SetFirmwareEnvironmentVariableA".}

type
  LPSTARTUPINFO* = ptr STARTUPINFO
  LPWIN32_FIND_DATA* = ptr WIN32_FIND_DATA
  LPHW_PROFILE_INFO* = ptr HW_PROFILE_INFO
  PACTCTX* = ptr ACTCTX
  PCACTCTX* = ptr ACTCTX

proc `Exception=`*(self: var DEBUG_EVENT, x: EXCEPTION_DEBUG_INFO) = self.u1.Exception = x
proc Exception*(self: DEBUG_EVENT): EXCEPTION_DEBUG_INFO = self.u1.Exception
proc `CreateThread=`*(self: var DEBUG_EVENT, x: CREATE_THREAD_DEBUG_INFO) = self.u1.CreateThread = x
proc CreateThread*(self: DEBUG_EVENT): CREATE_THREAD_DEBUG_INFO = self.u1.CreateThread
proc `CreateProcessInfo=`*(self: var DEBUG_EVENT, x: CREATE_PROCESS_DEBUG_INFO) = self.u1.CreateProcessInfo = x
proc CreateProcessInfo*(self: DEBUG_EVENT): CREATE_PROCESS_DEBUG_INFO = self.u1.CreateProcessInfo
proc `ExitThread=`*(self: var DEBUG_EVENT, x: EXIT_THREAD_DEBUG_INFO) = self.u1.ExitThread = x
proc ExitThread*(self: DEBUG_EVENT): EXIT_THREAD_DEBUG_INFO = self.u1.ExitThread
proc `ExitProcess=`*(self: var DEBUG_EVENT, x: EXIT_PROCESS_DEBUG_INFO) = self.u1.ExitProcess = x
proc ExitProcess*(self: DEBUG_EVENT): EXIT_PROCESS_DEBUG_INFO = self.u1.ExitProcess
proc `LoadDll=`*(self: var DEBUG_EVENT, x: LOAD_DLL_DEBUG_INFO) = self.u1.LoadDll = x
proc LoadDll*(self: DEBUG_EVENT): LOAD_DLL_DEBUG_INFO = self.u1.LoadDll
proc `UnloadDll=`*(self: var DEBUG_EVENT, x: UNLOAD_DLL_DEBUG_INFO) = self.u1.UnloadDll = x
proc UnloadDll*(self: DEBUG_EVENT): UNLOAD_DLL_DEBUG_INFO = self.u1.UnloadDll
proc `DebugString=`*(self: var DEBUG_EVENT, x: OUTPUT_DEBUG_STRING_INFO) = self.u1.DebugString = x
proc DebugString*(self: DEBUG_EVENT): OUTPUT_DEBUG_STRING_INFO = self.u1.DebugString
proc `RipInfo=`*(self: var DEBUG_EVENT, x: RIP_INFO) = self.u1.RipInfo = x
# proc RipInfo*(self: DEBUG_EVENT): RIP_INFO = self.u1.RipInfo
proc `Offset=`*(self: var OVERLAPPED, x: DWORD) = self.u1.s1.Offset = x
proc Offset*(self: OVERLAPPED): DWORD = self.u1.s1.Offset
proc `OffsetHigh=`*(self: var OVERLAPPED, x: DWORD) = self.u1.s1.OffsetHigh = x
proc OffsetHigh*(self: OVERLAPPED): DWORD = self.u1.s1.OffsetHigh
proc `Pointer=`*(self: var OVERLAPPED, x: PVOID) = self.u1.Pointer = x
proc Pointer*(self: OVERLAPPED): PVOID = self.u1.Pointer
proc `dwOemId=`*(self: var SYSTEM_INFO, x: DWORD) = self.u1.dwOemId = x
proc dwOemId*(self: SYSTEM_INFO): DWORD = self.u1.dwOemId
proc `wProcessorArchitecture=`*(self: var SYSTEM_INFO, x: WORD) = self.u1.s1.wProcessorArchitecture = x
proc wProcessorArchitecture*(self: SYSTEM_INFO): WORD = self.u1.s1.wProcessorArchitecture
proc `wReserved=`*(self: var SYSTEM_INFO, x: WORD) = self.u1.s1.wReserved = x
proc wReserved*(self: SYSTEM_INFO): WORD = self.u1.s1.wReserved
proc `BaseMid=`*(self: var LDT_ENTRY, x: BYTE) = self.HighWord.Bytes.BaseMid = x
proc BaseMid*(self: LDT_ENTRY): BYTE = self.HighWord.Bytes.BaseMid
proc `Flags1=`*(self: var LDT_ENTRY, x: BYTE) = self.HighWord.Bytes.Flags1 = x
proc Flags1*(self: LDT_ENTRY): BYTE = self.HighWord.Bytes.Flags1
proc `Flags2=`*(self: var LDT_ENTRY, x: BYTE) = self.HighWord.Bytes.Flags2 = x
proc Flags2*(self: LDT_ENTRY): BYTE = self.HighWord.Bytes.Flags2
proc `BaseHi=`*(self: var LDT_ENTRY, x: BYTE) = self.HighWord.Bytes.BaseHi = x
proc BaseHi*(self: LDT_ENTRY): BYTE = self.HighWord.Bytes.BaseHi

# core/wingdi.nim

type
  LCSCSTYPE* = LONG
  LCSGAMUTMATCH* = LONG

const
  BI_RGB* = 0
  BI_RLE8* = 1
  BI_RLE4* = 2
  BI_BITFIELDS* = 3
  BI_JPEG* = 4
  BI_PNG* = 5
  CA_NEGATIVE* = 1
  CA_LOG_FILTER* = 2
  ILLUMINANT_DEVICE_DEFAULT* = 0
  ILLUMINANT_A* = 1
  ILLUMINANT_B* = 2
  ILLUMINANT_C* = 3
  ILLUMINANT_D50* = 4
  ILLUMINANT_D55* = 5
  ILLUMINANT_D65* = 6
  ILLUMINANT_D75* = 7
  ILLUMINANT_F2* = 8
  ILLUMINANT_MAX_INDEX* = ILLUMINANT_F2
  ILLUMINANT_TUNGSTEN* = ILLUMINANT_A
  ILLUMINANT_DAYLIGHT* = ILLUMINANT_C
  ILLUMINANT_FLUORESCENT* = ILLUMINANT_F2
  ILLUMINANT_NTSC* = ILLUMINANT_C
  RGB_GAMMA_MIN* = 2500
  RGB_GAMMA_MAX* = 65000
  REFERENCE_WHITE_MIN* = 6000
  REFERENCE_WHITE_MAX* = 10000
  REFERENCE_BLACK_MIN* = 0
  REFERENCE_BLACK_MAX* = 4000
  COLOR_ADJ_MIN* = -100
  COLOR_ADJ_MAX* = 100
  DI_MASK* = 1
  DI_IMAGE* = 2
  DI_NORMAL* = 3
  DI_COMPAT* = 4
  DI_DEFAULTSIZE* = 8
  DI_APPBANDING* = 1
  DI_ROPS_READ_DESTINATION* = 2
  EMR_HEADER* = 1
  # EMR_POLYBEZIER* = 2.DWORD
  # EMR_POLYGON* = 3.DWORD
  # EMR_POLYLINE* = 4.DWORD
  # EMR_POLYBEZIERTO* = 5.DWORD
  # EMR_POLYLINETO* = 6.DWORD
  # EMR_POLYPOLYLINE* = 7.DWORD
  # EMR_POLYPOLYGON* = 8.DWORD
  # EMR_SETWINDOWEXTEX* = 9.DWORD
  # EMR_SETWINDOWORGEX* = 10.DWORD
  # EMR_SETVIEWPORTEXTEX* = 11.DWORD
  # EMR_SETVIEWPORTORGEX* = 12.DWORD
  # EMR_SETBRUSHORGEX* = 13.DWORD
  # EMR_EOF* = 14.DWORD
  # EMR_SETPIXELV* = 15.DWORD
  # EMR_SETMAPPERFLAGS* = 16.DWORD
  # EMR_SETMAPMODE* = 17.DWORD
  # EMR_SETBKMODE* = 18.DWORD
  # EMR_SETPOLYFILLMODE* = 19.DWORD
  # EMR_SETROP2* = 20.DWORD
  # EMR_SETSTRETCHBLTMODE* = 21.DWORD
  # EMR_SETTEXTALIGN* = 22.DWORD
  # EMR_SETCOLORADJUSTMENT* = 23.DWORD
  # EMR_SETTEXTCOLOR* = 24.DWORD
  # EMR_SETBKCOLOR* = 25.DWORD
  # EMR_OFFSETCLIPRGN* = 26.DWORD
  # EMR_MOVETOEX* = 27.DWORD
  # EMR_SETMETARGN* = 28.DWORD
  # EMR_EXCLUDECLIPRECT* = 29.DWORD
  # EMR_INTERSECTCLIPRECT* = 30.DWORD
  # EMR_SCALEVIEWPORTEXTEX* = 31.DWORD
  # EMR_SCALEWINDOWEXTEX* = 32.DWORD
  # EMR_SAVEDC* = 33.DWORD
  # EMR_RESTOREDC* = 34.DWORD
  # EMR_SETWORLDTRANSFORM* = 35.DWORD
  # EMR_MODIFYWORLDTRANSFORM* = 36.DWORD
  # EMR_SELECTOBJECT* = 37.DWORD
  # EMR_CREATEPEN* = 38.DWORD
  # EMR_CREATEBRUSHINDIRECT* = 39.DWORD
  # EMR_DELETEOBJECT* = 40.DWORD
  # EMR_ANGLEARC* = 41.DWORD
  # EMR_ELLIPSE* = 42.DWORD
  # EMR_RECTANGLE* = 43.DWORD
  # EMR_ROUNDRECT* = 44.DWORD
  # EMR_ARC* = 45.DWORD
  # EMR_CHORD* = 46.DWORD
  # EMR_PIE* = 47.DWORD
  # EMR_SELECTPALETTE* = 48.DWORD
  # EMR_CREATEPALETTE* = 49.DWORD
  # EMR_SETPALETTEENTRIES* = 50.DWORD
  # EMR_RESIZEPALETTE* = 51.DWORD
  # EMR_REALIZEPALETTE* = 52.DWORD
  # EMR_EXTFLOODFILL* = 53.DWORD
  # EMR_LINETO* = 54.DWORD
  # EMR_ARCTO* = 55.DWORD
  # EMR_POLYDRAW* = 56.DWORD
  # EMR_SETARCDIRECTION* = 57.DWORD
  # EMR_SETMITERLIMIT* = 58.DWORD
  # EMR_BEGINPATH* = 59.DWORD
  # EMR_ENDPATH* = 60.DWORD
  # EMR_CLOSEFIGURE* = 61.DWORD
  # EMR_FILLPATH* = 62.DWORD
  # EMR_STROKEANDFILLPATH* = 63.DWORD
  # EMR_STROKEPATH* = 64.DWORD
  # EMR_FLATTENPATH* = 65.DWORD
  # EMR_WIDENPATH* = 66.DWORD
  # EMR_SELECTCLIPPATH* = 67.DWORD
  # EMR_ABORTPATH* = 68.DWORD
  # EMR_GDICOMMENT* = 70.DWORD
  # EMR_FILLRGN* = 71.DWORD
  # EMR_FRAMERGN* = 72.DWORD
  # EMR_INVERTRGN* = 73.DWORD
  # EMR_PAINTRGN* = 74.DWORD
  # EMR_EXTSELECTCLIPRGN* = 75.DWORD
  # EMR_BITBLT* = 76.DWORD
  # EMR_STRETCHBLT* = 77.DWORD
  # EMR_MASKBLT* = 78.DWORD
  # EMR_PLGBLT* = 79.DWORD
  # EMR_SETDIBITSTODEVICE* = 80.DWORD
  # EMR_STRETCHDIBITS* = 81.DWORD
  # EMR_EXTCREATEFONTINDIRECTW* = 82.DWORD
  # EMR_EXTTEXTOUTA* = 83.DWORD
  # EMR_EXTTEXTOUTW* = 84.DWORD
  # EMR_POLYBEZIER16* = 85.DWORD
  # EMR_POLYGON16* = 86.DWORD
  # EMR_POLYLINE16* = 87.DWORD
  # EMR_POLYBEZIERTO16* = 88.DWORD
  # EMR_POLYLINETO16* = 89.DWORD
  # EMR_POLYPOLYLINE16* = 90.DWORD
  # EMR_POLYPOLYGON16* = 91.DWORD
  # EMR_POLYDRAW16* = 92.DWORD
  # EMR_CREATEMONOBRUSH* = 93.DWORD
  # EMR_CREATEDIBPATTERNBRUSHPT* = 94.DWORD
  # EMR_EXTCREATEPEN* = 95.DWORD
  # EMR_POLYTEXTOUTA* = 96.DWORD
  # EMR_POLYTEXTOUTW* = 97.DWORD
  # EMR_SETICMMODE* = 98.DWORD
  # EMR_CREATECOLORSPACE* = 99.DWORD
  # EMR_SETCOLORSPACE* = 100.DWORD
  # EMR_DELETECOLORSPACE* = 101.DWORD
  # EMR_GLSRECORD* = 102.DWORD
  # EMR_GLSBOUNDEDRECORD* = 103.DWORD
  # EMR_PIXELFORMAT* = 104.DWORD
  # EMR_COLORCORRECTPALETTE* = 111.DWORD
  # EMR_SETICMPROFILEA* = 112.DWORD
  # EMR_SETICMPROFILEW* = 113.DWORD
  # EMR_ALPHABLEND* = 114.DWORD
  # EMR_SETLAYOUT* = 115.DWORD
  # EMR_TRANSPARENTBLT* = 116.DWORD
  # EMR_GRADIENTFILL* = 118.DWORD
  # EMR_COLORMATCHTOTARGETW* = 121.DWORD
  # EMR_CREATECOLORSPACEW* = 122.DWORD
  EMR_MIN* = EMR_HEADER
  ENHMETA_SIGNATURE* = 1179469088
  EPS_SIGNATURE* = 0x46535045
  FR_PRIVATE* = 0x10
  FR_NOT_ENUM* = 0x20
  META_SAVEDC* = 0x1E
  META_REALIZEPALETTE* = 0x35
  META_SETPALENTRIES* = 0x37
  META_CREATEPALETTE* = 0xf7
  META_SETBKMODE* = 0x102
  META_SETMAPMODE* = 0x103
  META_SETROP2* = 0x104
  META_SETRELABS* = 0x105
  META_SETPOLYFILLMODE* = 0x106
  META_SETSTRETCHBLTMODE* = 0x107
  META_SETTEXTCHAREXTRA* = 0x108
  META_RESTOREDC* = 0x127
  META_INVERTREGION* = 0x12A
  META_PAINTREGION* = 0x12B
  META_SELECTCLIPREGION* = 0x12C
  META_SELECTOBJECT* = 0x12D
  META_SETTEXTALIGN* = 0x12E
  META_RESIZEPALETTE* = 0x139
  META_DIBCREATEPATTERNBRUSH* = 0x142
  META_SETLAYOUT* = 0x149
  META_DELETEOBJECT* = 0x1F0
  META_CREATEPATTERNBRUSH* = 0x1F9
  META_SETBKCOLOR* = 0x201
  META_SETTEXTCOLOR* = 0x209
  META_SETTEXTJUSTIFICATION* = 0x20A
  META_SETWINDOWORG* = 0x20B
  META_SETWINDOWEXT* = 0x20C
  META_SETVIEWPORTORG* = 0x20D
  META_SETVIEWPORTEXT* = 0x20E
  META_OFFSETWINDOWORG* = 0x20F
  META_OFFSETVIEWPORTORG* = 0x211
  META_LINETO* = 0x213
  META_MOVETO* = 0x214
  META_OFFSETCLIPRGN* = 0x220
  META_FILLREGION* = 0x228
  META_SETMAPPERFLAGS* = 0x231
  META_SELECTPALETTE* = 0x234
  META_CREATEPENINDIRECT* = 0x2FA
  META_CREATEFONTINDIRECT* = 0x2FB
  META_CREATEBRUSHINDIRECT* = 0x2FC
  META_POLYGON* = 0x324
  META_POLYLINE* = 0x325
  META_SCALEWINDOWEXT* = 0x410
  META_SCALEVIEWPORTEXT* = 0x412
  META_EXCLUDECLIPRECT* = 0x415
  META_INTERSECTCLIPRECT* = 0x416
  META_ELLIPSE* = 0x418
  META_FLOODFILL* = 0x419
  META_RECTANGLE* = 0x41B
  META_SETPIXEL* = 0x41F
  META_FRAMEREGION* = 0x429
  META_ANIMATEPALETTE* = 0x436
  META_TEXTOUT* = 0x521
  META_POLYPOLYGON* = 0x538
  META_EXTFLOODFILL* = 0x548
  META_ROUNDRECT* = 0x61C
  META_PATBLT* = 0x61D
  META_ESCAPE* = 0x626
  META_CREATEREGION* = 0x6FF
  META_ARC* = 0x817
  META_PIE* = 0x81A
  META_CHORD* = 0x830
  META_BITBLT* = 0x922
  META_DIBBITBLT* = 0x940
  META_EXTTEXTOUT* = 0xA32
  META_STRETCHBLT* = 0xB23
  META_DIBSTRETCHBLT* = 0xB41
  META_SETDIBTODEV* = 0xD33
  META_STRETCHDIB* = 0xF43
  PT_CLOSEFIGURE* = 1
  PT_LINETO* = 2
  PT_BEZIERTO* = 4
  PT_MOVETO* = 6
  PFD_TYPE_RGBA* = 0
  PFD_TYPE_COLORINDEX* = 1
  PFD_DOUBLEBUFFER* = 0x00000001
  PFD_STEREO* = 0x00000002
  PFD_DRAW_TO_WINDOW* = 0x00000004
  PFD_DRAW_TO_BITMAP* = 0x00000008
  PFD_SUPPORT_GDI* = 0x00000010
  PFD_SUPPORT_OPENGL* = 0x00000020
  PFD_GENERIC_FORMAT* = 0x00000040
  PFD_NEED_PALETTE* = 0x00000080
  PFD_NEED_SYSTEM_PALETTE* = 0x00000100
  PFD_SWAP_EXCHANGE* = 0x00000200
  PFD_SWAP_COPY* = 0x00000400
  PFD_SWAP_LAYER_BUFFERS* = 0x00000800
  PFD_GENERIC_ACCELERATED* = 0x00001000
  PFD_SUPPORT_DIRECTDRAW* = 0x00002000
  PFD_DEPTH_DONTCARE* = 0x20000000
  PFD_DOUBLEBUFFER_DONTCARE* = 0x40000000
  PFD_STEREO_DONTCARE* = 0x80000000'u32
  BLACKNESS* = 0x000042
  NOTSRCERASE* = 0x1100A6
  NOTSRCCOPY* = 0x330008
  SRCERASE* = 0x440328
  DSTINVERT* = 0x550009
  PATINVERT* = 0x5A0049
  SRCINVERT* = 0x660046
  SRCAND* = 0x8800C6
  MERGEPAINT* = 0xBB0226
  MERGECOPY* = 0xC000CA
  SRCCOPY* = 0xCC0020
  SRCPAINT* = 0xEE0086
  PATCOPY* = 0xF00021
  PATPAINT* = 0xFB0A09
  WHITENESS* = 0xFF0062
  NOMIRRORBITMAP* = 0x80000000'u32
  CAPTUREBLT* = 0x40000000
  R2_BLACK* = 1
  R2_NOTMERGEPEN* = 2
  R2_MASKNOTPEN* = 3
  R2_NOTCOPYPEN* = 4
  R2_MASKPENNOT* = 5
  R2_NOT* = 6
  R2_XORPEN* = 7
  R2_NOTMASKPEN* = 8
  R2_MASKPEN* = 9
  R2_NOTXORPEN* = 10
  R2_NOP* = 11
  R2_MERGENOTPEN* = 12
  R2_COPYPEN* = 13
  R2_MERGEPENNOT* = 14
  R2_MERGEPEN* = 15
  R2_WHITE* = 16
  R2_LAST* = R2_WHITE
  CM_IN_GAMUT* = 0
  CM_OUT_OF_GAMUT* = 255
  ICM_ADDPROFILE* = 1
  ICM_DELETEPROFILE* = 2
  ICM_QUERYPROFILE* = 3
  ICM_SETDEFAULTPROFILE* = 4
  ICM_REGISTERICMATCHER* = 5
  ICM_UNREGISTERICMATCHER* = 6
  ICM_QUERYMATCH* = 7
  RGN_AND* = 1
  RGN_OR* = 2
  RGN_XOR* = 3
  RGN_DIFF* = 4
  RGN_COPY* = 5
  RGN_MIN* = RGN_AND
  RGN_MAX* = RGN_COPY
  NULLREGION* = 1
  SIMPLEREGION* = 2
  COMPLEXREGION* = 3
  ERROR* = 0
  RGN_ERROR* = ERROR
  CBM_INIT* = 4
  DIB_RGB_COLORS* = 0
  DIB_PAL_COLORS* = 1
  LF_FACESIZE* = 32
  LF_FULLFACESIZE* = 64
  ELF_VENDOR_SIZE* = 4
  ELF_VERSION* = 0
  ELF_CULTURE_LATIN* = 0
  FW_DONTCARE* = 0
  FW_THIN* = 100
  FW_EXTRALIGHT* = 200
  FW_ULTRALIGHT* = FW_EXTRALIGHT.LONG
  FW_LIGHT* = 300
  FW_NORMAL* = 400
  FW_REGULAR* = FW_NORMAL.LONG
  FW_MEDIUM* = 500
  FW_SEMIBOLD* = 600
  FW_DEMIBOLD* = FW_SEMIBOLD.LONG
  FW_BOLD* = 700
  FW_EXTRABOLD* = 800
  FW_ULTRABOLD* = FW_EXTRABOLD.LONG
  FW_HEAVY* = 900
  FW_BLACK* = FW_HEAVY.LONG
  ANSI_CHARSET* = 0
  DEFAULT_CHARSET* = 1
  SYMBOL_CHARSET* = 2
  MAC_CHARSET* = 77
  SHIFTJIS_CHARSET* = 128
  HANGEUL_CHARSET* = 129
  HANGUL_CHARSET* = 129
  JOHAB_CHARSET* = 130
  GB2312_CHARSET* = 134
  CHINESEBIG5_CHARSET* = 136
  GREEK_CHARSET* = 161
  TURKISH_CHARSET* = 162
  VIETNAMESE_CHARSET* = 163
  HEBREW_CHARSET* = 177
  ARABIC_CHARSET* = 178
  BALTIC_CHARSET* = 186
  RUSSIAN_CHARSET* = 204
  THAI_CHARSET* = 222
  EASTEUROPE_CHARSET* = 238
  OEM_CHARSET* = 255
  OUT_DEFAULT_PRECIS* = 0
  OUT_STRING_PRECIS* = 1
  OUT_CHARACTER_PRECIS* = 2
  OUT_STROKE_PRECIS* = 3
  OUT_TT_PRECIS* = 4
  OUT_DEVICE_PRECIS* = 5
  OUT_RASTER_PRECIS* = 6
  OUT_TT_ONLY_PRECIS* = 7
  OUT_OUTLINE_PRECIS* = 8
  OUT_SCREEN_OUTLINE_PRECIS* = 9
  OUT_PS_ONLY_PRECIS* = 10
  CLIP_DEFAULT_PRECIS* = 0
  CLIP_CHARACTER_PRECIS* = 1
  CLIP_STROKE_PRECIS* = 2
  CLIP_MASK* = 15
  CLIP_LH_ANGLES* = 16
  CLIP_TT_ALWAYS* = 32
  CLIP_DFA_DISABLE* = 64
  CLIP_EMBEDDED* = 128
  DEFAULT_QUALITY* = 0
  DRAFT_QUALITY* = 1
  PROOF_QUALITY* = 2
  NONANTIALIASED_QUALITY* = 3
  ANTIALIASED_QUALITY* = 4
  DEFAULT_PITCH* = 0
  FIXED_PITCH* = 1
  VARIABLE_PITCH* = 2
  MONO_FONT* = 8
  FF_DONTCARE* = 0
  FF_ROMAN* = 16
  FF_SWISS* = 32
  FF_SCRIPT* = 64
  FF_MODERN* = 48
  FF_DECORATIVE* = 80
  PANOSE_COUNT* = 10
  PAN_FAMILYTYPE_INDEX* = 0
  PAN_SERIFSTYLE_INDEX* = 1
  PAN_WEIGHT_INDEX* = 2
  PAN_PROPORTION_INDEX* = 3
  PAN_CONTRAST_INDEX* = 4
  PAN_STROKEVARIATION_INDEX* = 5
  PAN_ARMSTYLE_INDEX* = 6
  PAN_LETTERFORM_INDEX* = 7
  PAN_MIDLINE_INDEX* = 8
  PAN_XHEIGHT_INDEX* = 9
  PAN_CULTURE_LATIN* = 0
  PAN_ANY* = 0
  PAN_NO_FIT* = 1
  PAN_FAMILY_TEXT_DISPLAY* = 2
  PAN_FAMILY_SCRIPT* = 3
  PAN_FAMILY_DECORATIVE* = 4
  PAN_FAMILY_PICTORIAL* = 5
  PAN_SERIF_COVE* = 2
  PAN_SERIF_OBTUSE_COVE* = 3
  PAN_SERIF_SQUARE_COVE* = 4
  PAN_SERIF_OBTUSE_SQUARE_COVE* = 5
  PAN_SERIF_SQUARE* = 6
  PAN_SERIF_THIN* = 7
  PAN_SERIF_BONE* = 8
  PAN_SERIF_EXAGGERATED* = 9
  PAN_SERIF_TRIANGLE* = 10
  PAN_SERIF_NORMAL_SANS* = 11
  PAN_SERIF_OBTUSE_SANS* = 12
  PAN_SERIF_PERP_SANS* = 13
  PAN_SERIF_FLARED* = 14
  PAN_SERIF_ROUNDED* = 15
  PAN_WEIGHT_VERY_LIGHT* = 2
  PAN_WEIGHT_LIGHT* = 3
  PAN_WEIGHT_THIN* = 4
  PAN_WEIGHT_BOOK* = 5
  PAN_WEIGHT_MEDIUM* = 6
  PAN_WEIGHT_DEMI* = 7
  PAN_WEIGHT_BOLD* = 8
  PAN_WEIGHT_HEAVY* = 9
  PAN_WEIGHT_BLACK* = 10
  PAN_WEIGHT_NORD* = 11
  PAN_PROP_OLD_STYLE* = 2
  PAN_PROP_MODERN* = 3
  PAN_PROP_EVEN_WIDTH* = 4
  PAN_PROP_EXPANDED* = 5
  PAN_PROP_CONDENSED* = 6
  PAN_PROP_VERY_EXPANDED* = 7
  PAN_PROP_VERY_CONDENSED* = 8
  PAN_PROP_MONOSPACED* = 9
  PAN_CONTRAST_NONE* = 2
  PAN_CONTRAST_VERY_LOW* = 3
  PAN_CONTRAST_LOW* = 4
  PAN_CONTRAST_MEDIUM_LOW* = 5
  PAN_CONTRAST_MEDIUM* = 6
  PAN_CONTRAST_MEDIUM_HIGH* = 7
  PAN_CONTRAST_HIGH* = 8
  PAN_CONTRAST_VERY_HIGH* = 9
  PAN_STROKE_GRADUAL_DIAG* = 2
  PAN_STROKE_GRADUAL_TRAN* = 3
  PAN_STROKE_GRADUAL_VERT* = 4
  PAN_STROKE_GRADUAL_HORZ* = 5
  PAN_STROKE_RAPID_VERT* = 6
  PAN_STROKE_RAPID_HORZ* = 7
  PAN_STROKE_INSTANT_VERT* = 8
  PAN_STRAIGHT_ARMS_HORZ* = 2
  PAN_STRAIGHT_ARMS_WEDGE* = 3
  PAN_STRAIGHT_ARMS_VERT* = 4
  PAN_STRAIGHT_ARMS_SINGLE_SERIF* = 5
  PAN_STRAIGHT_ARMS_DOUBLE_SERIF* = 6
  PAN_BENT_ARMS_HORZ* = 7
  PAN_BENT_ARMS_WEDGE* = 8
  PAN_BENT_ARMS_VERT* = 9
  PAN_BENT_ARMS_SINGLE_SERIF* = 10
  PAN_BENT_ARMS_DOUBLE_SERIF* = 11
  PAN_LETT_NORMAL_CONTACT* = 2
  PAN_LETT_NORMAL_WEIGHTED* = 3
  PAN_LETT_NORMAL_BOXED* = 4
  PAN_LETT_NORMAL_FLATTENED* = 5
  PAN_LETT_NORMAL_ROUNDED* = 6
  PAN_LETT_NORMAL_OFF_CENTER* = 7
  PAN_LETT_NORMAL_SQUARE* = 8
  PAN_LETT_OBLIQUE_CONTACT* = 9
  PAN_LETT_OBLIQUE_WEIGHTED* = 10
  PAN_LETT_OBLIQUE_BOXED* = 11
  PAN_LETT_OBLIQUE_FLATTENED* = 12
  PAN_LETT_OBLIQUE_ROUNDED* = 13
  PAN_LETT_OBLIQUE_OFF_CENTER* = 14
  PAN_LETT_OBLIQUE_SQUARE* = 15
  PAN_MIDLINE_STANDARD_TRIMMED* = 2
  PAN_MIDLINE_STANDARD_POINTED* = 3
  PAN_MIDLINE_STANDARD_SERIFED* = 4
  PAN_MIDLINE_HIGH_TRIMMED* = 5
  PAN_MIDLINE_HIGH_POINTED* = 6
  PAN_MIDLINE_HIGH_SERIFED* = 7
  PAN_MIDLINE_CONSTANT_TRIMMED* = 8
  PAN_MIDLINE_CONSTANT_POINTED* = 9
  PAN_MIDLINE_CONSTANT_SERIFED* = 10
  PAN_MIDLINE_LOW_TRIMMED* = 11
  PAN_MIDLINE_LOW_POINTED* = 12
  PAN_MIDLINE_LOW_SERIFED* = 13
  PAN_XHEIGHT_CONSTANT_SMALL* = 2
  PAN_XHEIGHT_CONSTANT_STD* = 3
  PAN_XHEIGHT_CONSTANT_LARGE* = 4
  PAN_XHEIGHT_DUCKING_SMALL* = 5
  PAN_XHEIGHT_DUCKING_STD* = 6
  PAN_XHEIGHT_DUCKING_LARGE* = 7
  FS_LATIN1* = 0x00000001
  FS_LATIN2* = 0x00000002
  FS_CYRILLIC* = 0x00000004
  FS_GREEK* = 0x00000008
  FS_TURKISH* = 0x00000010
  FS_HEBREW* = 0x00000020
  FS_ARABIC* = 0x00000040
  FS_BALTIC* = 0x00000080
  FS_VIETNAMESE* = 0x00000100
  FS_THAI* = 0x00010000
  FS_JISJAPAN* = 0x00020000
  FS_CHINESESIMP* = 0x00040000
  FS_WANSUNG* = 0x00080000
  FS_CHINESETRAD* = 0x00100000
  FS_JOHAB* = 0x00200000
  FS_SYMBOL* = 0x80000000'i32
  ALTERNATE* = 1
  WINDING* = 2
  POLYFILL_LAST* = WINDING
  HS_HORIZONTAL* = 0
  HS_VERTICAL* = 1
  HS_FDIAGONAL* = 2
  HS_BDIAGONAL* = 3
  HS_CROSS* = 4
  HS_DIAGCROSS* = 5
  BS_SOLID* = 0
  BS_NULL* = 1
  BS_HOLLOW* = BS_NULL
  BS_HATCHED* = (BS_NULL + 1)
  BS_PATTERN* = (BS_NULL + 2)
  BS_INDEXED* = (BS_NULL + 3)
  BS_DIBPATTERN* = (BS_NULL + 4)
  BS_DIBPATTERNPT* = (BS_NULL + 5)
  BS_PATTERN8X8* = (BS_NULL + 6)
  BS_DIBPATTERN8X8* = (BS_NULL + 7)
  BS_MONOPATTERN* = (BS_NULL + 8)
  PS_SOLID* = 0
  PS_DASH* = 1
  PS_DOT* = 2
  PS_DASHDOT* = 3
  PS_DASHDOTDOT* = 4
  PS_NULL* = 5
  PS_INSIDEFRAME* = 6
  PS_USERSTYLE* = 7
  PS_ALTERNATE* = 8
  PS_STYLE_MASK* = 15
  PS_COSMETIC* = 0x00000000
  PS_GEOMETRIC* = 0x00010000
  PS_TYPE_MASK* = 0x000F0000
  PS_ENDCAP_ROUND* = 0x00000000
  PS_ENDCAP_SQUARE* = 0x00000100
  PS_ENDCAP_FLAT* = 0x00000200
  PS_ENDCAP_MASK* = 0x00000F00
  PS_JOIN_ROUND* = 0x00000000
  PS_JOIN_BEVEL* = 0x00001000
  PS_JOIN_MITER* = 0x00002000
  PS_JOIN_MASK* = 0x0000F000
  DC_FIELDS* = 1
  DC_PAPERS* = 2
  DC_PAPERSIZE* = 3
  DC_MINEXTENT* = 4
  DC_MAXEXTENT* = 5
  DC_BINS* = 6
  DC_DUPLEX* = 7
  DC_SIZE* = 8
  DC_EXTRA* = 9
  DC_VERSION* = 10
  DC_DRIVER* = 11
  DC_BINNAMES* = 12
  DC_ENUMRESOLUTIONS* = 13
  DC_FILEDEPENDENCIES* = 14
  DC_TRUETYPE* = 15
  DC_PAPERNAMES* = 16
  DC_ORIENTATION* = 17
  DC_COPIES* = 18
  DC_BINADJUST* = 19
  DC_EMF_COMPLIANT* = 20
  DC_DATATYPE_PRODUCED* = 21
  DC_COLLATE* = 22
  DC_MANUFACTURER* = 23
  DC_MODEL* = 24
  DC_PERSONALITY* = 25
  DC_PRINTRATE* = 26
  DC_PRINTRATEUNIT* = 27
  DC_PRINTERMEM* = 28
  DC_MEDIAREADY* = 29
  DC_STAPLE* = 30
  DC_PRINTRATEPPM* = 31
  DC_COLORDEVICE* = 32
  DC_NUP* = 33
  DC_MEDIATYPENAMES* = 34
  DC_MEDIATYPES* = 35
  PRINTRATEUNIT_PPM* = 1
  PRINTRATEUNIT_CPS* = 2
  PRINTRATEUNIT_LPM* = 3
  PRINTRATEUNIT_IPM* = 4
  DCTT_BITMAP* = 1
  DCTT_DOWNLOAD* = 2
  DCTT_SUBDEV* = 4
  DCTT_DOWNLOAD_OUTLINE* = 8
  DCBA_FACEUPNONE* = 0x0000
  DCBA_FACEUPCENTER* = 0x0001
  DCBA_FACEUPLEFT* = 0x0002
  DCBA_FACEUPRIGHT* = 0x0003
  DCBA_FACEDOWNNONE* = 0x0100
  DCBA_FACEDOWNCENTER* = 0x0101
  DCBA_FACEDOWNLEFT* = 0x0102
  DCBA_FACEDOWNRIGHT* = 0x0103
  FLOODFILLBORDER* = 0
  FLOODFILLSURFACE* = 1
  ETO_OPAQUE* = 0x0002
  ETO_CLIPPED* = 0x0004
  ETO_GLYPH_INDEX* = 0x0010
  ETO_RTLREADING* = 0x0080
  ETO_NUMERICSLOCAL* = 0x0400
  ETO_NUMERICSLATIN* = 0x0800
  ETO_IGNORELANGUAGE* = 0x1000
  ETO_PDY* = 0x2000
  GDICOMMENT_BEGINGROUP* = 0x00000002
  GDICOMMENT_ENDGROUP* = 0x00000003
  GDICOMMENT_UNICODE_STRING* = 0x00000040
  GDICOMMENT_UNICODE_END* = 0x00000080
  GDICOMMENT_MULTIFORMATS* = 0x40000004
  GDICOMMENT_IDENTIFIER* = 0x43494447
  GDICOMMENT_WINDOWS_METAFILE* = -2147483647
  AD_COUNTERCLOCKWISE* = 1
  AD_CLOCKWISE* = 2
  RDH_RECTANGLES* = 1
  GCPCLASS_LATIN* = 1
  GCPCLASS_HEBREW* = 2
  GCPCLASS_ARABIC* = 2
  GCPCLASS_NEUTRAL* = 3
  GCPCLASS_LOCALNUMBER* = 4
  GCPCLASS_LATINNUMBER* = 5
  GCPCLASS_LATINNUMERICTERMINATOR* = 6
  GCPCLASS_LATINNUMERICSEPARATOR* = 7
  GCPCLASS_NUMERICSEPARATOR* = 8
  GCPCLASS_POSTBOUNDRTL* = 16
  GCPCLASS_POSTBOUNDLTR* = 32
  GCPCLASS_PREBOUNDRTL* = 64
  GCPCLASS_PREBOUNDLTR* = 128
  GCPGLYPH_LINKAFTER* = 0x4000
  GCPGLYPH_LINKBEFORE* = 0x8000
  DCB_RESET* = 1
  DCB_ACCUMULATE* = 2
  DCB_SET* = (DCB_RESET or DCB_ACCUMULATE)
  DCB_ENABLE* = 4
  DCB_DISABLE* = 8
  DCB_DIRTY* = DCB_ACCUMULATE
  OBJ_PEN* = 1
  OBJ_BRUSH* = 2
  OBJ_DC* = 3
  OBJ_METADC* = 4
  OBJ_PAL* = 5
  OBJ_FONT* = 6
  OBJ_BITMAP* = 7
  OBJ_REGION* = 8
  OBJ_METAFILE* = 9
  OBJ_MEMDC* = 10
  OBJ_EXTPEN* = 11
  OBJ_ENHMETADC* = 12
  OBJ_ENHMETAFILE* = 13
  OBJ_COLORSPACE* = 14
  DRIVERVERSION* = 0
  TECHNOLOGY* = 2
  HORZSIZE* = 4
  VERTSIZE* = 6
  HORZRES* = 8
  VERTRES* = 10
  BITSPIXEL* = 12
  PLANES* = 14
  NUMBRUSHES* = 16
  NUMPENS* = 18
  NUMMARKERS* = 20
  NUMFONTS* = 22
  NUMCOLORS* = 24
  PDEVICESIZE* = 26
  CURVECAPS* = 28
  LINECAPS* = 30
  POLYGONALCAPS* = 32
  TEXTCAPS* = 34
  CLIPCAPS* = 36
  RASTERCAPS* = 38
  ASPECTX* = 40
  ASPECTY* = 42
  ASPECTXY* = 44
  LOGPIXELSX* = 88
  LOGPIXELSY* = 90
  SIZEPALETTE* = 104
  NUMRESERVED* = 106
  COLORRES* = 108
  PHYSICALWIDTH* = 110
  PHYSICALHEIGHT* = 111
  PHYSICALOFFSETX* = 112
  PHYSICALOFFSETY* = 113
  SCALINGFACTORX* = 114
  SCALINGFACTORY* = 115
  VREFRESH* = 116
  DESKTOPVERTRES* = 117
  DESKTOPHORZRES* = 118
  BLTALIGNMENT* = 119
  SHADEBLENDCAPS* = 120
  COLORMGMTCAPS*  = 121
  DT_PLOTTER* = 0
  DT_RASDISPLAY* = 1
  DT_RASPRINTER* = 2
  DT_RASCAMERA* = 3
  DT_CHARSTREAM* = 4
  DT_METAFILE* = 5
  DT_DISPFILE* = 6
  RC_NONE* = 0
  RC_BITBLT* = 1
  RC_BANDING* = 2
  RC_SCALING* = 4
  RC_BITMAP64* = 8
  RC_GDI20_OUTPUT* = 16
  RC_GDI20_STATE* = 32
  RC_SAVEBITMAP* = 64
  RC_DI_BITMAP* = 128
  RC_PALETTE* = 256
  RC_DIBTODEV* = 512
  RC_BIGFONT* = 1024
  RC_STRETCHBLT* = 2048
  RC_FLOODFILL* = 4096
  RC_STRETCHDIB* = 8192
  RC_OP_DX_OUTPUT* = 0x4000
  RC_DEVBITS* = 0x8000
  SB_NONE* = 0x00000000
  SB_CONST_ALPHA* = 0x00000001
  SB_PIXEL_ALPHA* = 0x00000002
  SB_PREMULT_ALPHA* = 0x00000004
  SB_GRAD_RECT* = 0x00000010
  SB_GRAD_TRI* = 0x00000020
  CM_NONE* = 0x00000000
  CM_DEVICE_ICM* = 0x00000001
  CM_GAMMA_RAMP* = 0x00000002
  CM_CMYK_COLOR* = 0x00000004
  CC_NONE* = 0
  CC_CIRCLES* = 1
  CC_PIE* = 2
  CC_CHORD* = 4
  CC_ELLIPSES* = 8
  CC_WIDE* = 16
  CC_STYLED* = 32
  CC_WIDESTYLED* = 64
  CC_INTERIORS* = 128
  CC_ROUNDRECT* = 256
  LC_NONE* = 0
  LC_POLYLINE* = 2
  LC_MARKER* = 4
  LC_POLYMARKER* = 8
  LC_WIDE* = 16
  LC_STYLED* = 32
  LC_WIDESTYLED* = 64
  LC_INTERIORS* = 128
  PC_NONE* = 0
  PC_POLYGON* = 1
  PC_RECTANGLE* = 2
  PC_WINDPOLYGON* = 4
  PC_TRAPEZOID* = 4
  PC_SCANLINE* = 8
  PC_WIDE* = 16
  PC_STYLED* = 32
  PC_WIDESTYLED* = 64
  PC_INTERIORS* = 128
  PC_POLYPOLYGON* = 256
  PC_PATHS* = 512
  CP_NONE* = 0
  CP_RECTANGLE* = 1
  CP_REGION* = 2
  TC_OP_CHARACTER* = 1
  TC_OP_STROKE* = 2
  TC_CP_STROKE* = 4
  TC_CR_90* = 8
  TC_CR_ANY* = 16
  TC_SF_X_YINDEP* = 32
  TC_SA_DOUBLE* = 64
  TC_SA_INTEGER* = 128
  TC_SA_CONTIN* = 256
  TC_EA_DOUBLE* = 512
  TC_IA_ABLE* = 1024
  TC_UA_ABLE* = 2048
  TC_SO_ABLE* = 4096
  TC_RA_ABLE* = 8192
  TC_VA_ABLE* = 16384
  TC_RESERVED* = 32768
  TC_SCROLLBLT* = 65536
  GCP_DBCS* = 1
  GCP_REORDER* = 2
  GCP_USEKERNING* = 8
  GCP_GLYPHSHAPE* = 16
  GCP_LIGATE* = 32
  GCP_DIACRITIC* = 256
  GCP_KASHIDA* = 1024
  GCP_ERROR* = 0x8000
  GCP_JUSTIFY* = 0x10000
  GCP_CLASSIN* = 0x80000
  GCP_MAXEXTENT* = 0x100000
  GCP_JUSTIFYIN* = 0x200000
  GCP_DISPLAYZWG* = 0x400000
  GCP_SYMSWAPOFF* = 0x800000
  GCP_NUMERICOVERRIDE* = 0x1000000
  GCP_NEUTRALOVERRIDE* = 0x2000000
  GCP_NUMERICSLATIN* = 0x4000000
  GCP_NUMERICSLOCAL* = 0x8000000
  FLI_GLYPHS* = 0x40000
  FLI_MASK* = 0x103b
  GGO_METRICS* = 0
  GGO_BITMAP* = 1
  GGO_NATIVE* = 2
  GGO_BEZIER* = 3
  GGO_GRAY2_BITMAP* = 4
  GGO_GRAY4_BITMAP* = 5
  GGO_GRAY8_BITMAP* = 6
  GGO_GLYPH_INDEX* = 128
  GGO_UNHINTED* = 256
  GM_COMPATIBLE* = 1
  GM_ADVANCED* = 2
  GM_LAST* = GM_ADVANCED
  MM_TEXT* = 1
  MM_LOMETRIC* = 2
  MM_HIMETRIC* = 3
  MM_LOENGLISH* = 4
  MM_HIENGLISH* = 5
  MM_TWIPS* = 6
  MM_ISOTROPIC* = 7
  MM_ANISOTROPIC* = 8
  MM_MIN* = MM_TEXT
  MM_MAX* = MM_ANISOTROPIC
  MM_MAX_FIXEDSCALE* = MM_TWIPS
  ABSOLUTE* = 1
  RELATIVE* = 2
  PC_RESERVED* = 1
  PC_EXPLICIT* = 2
  PC_NOCOLLAPSE* = 4
  CLR_NONE* = 0xffffffff'u32
  CLR_INVALID* = CLR_NONE.COLORREF
  CLR_DEFAULT* = 0xff000000'u32
  TT_AVAILABLE* = 1
  TT_ENABLED* = 2
  WHITE_BRUSH* = 0
  LTGRAY_BRUSH* = 1
  GRAY_BRUSH* = 2
  DKGRAY_BRUSH* = 3
  BLACK_BRUSH* = 4
  HOLLOW_BRUSH* = 5
  NULL_BRUSH* = HOLLOW_BRUSH
  WHITE_PEN* = 6
  BLACK_PEN* = 7
  NULL_PEN* = 8
  OEM_FIXED_FONT* = 10
  ANSI_FIXED_FONT* = 11
  ANSI_VAR_FONT* = 12
  SYSTEM_FONT* = 13
  DEVICE_DEFAULT_FONT* = 14
  DEFAULT_PALETTE* = 15
  SYSTEM_FIXED_FONT* = 16
  DEFAULT_GUI_FONT* = SYSTEM_FIXED_FONT + 1
  DC_BRUSH* = DEFAULT_GUI_FONT + 1
  DC_PEN* = DEFAULT_GUI_FONT + 2
  STOCK_LAST* = DC_PEN
  SYSPAL_ERROR* = 0
  SYSPAL_STATIC* = 1
  SYSPAL_NOSTATIC* = 2
  SYSPAL_NOSTATIC256* = 3
  TA_TOP* = 0
  TA_CENTER* = 6
  TA_BOTTOM* = 8
  TA_BASELINE* = 24
  TA_LEFT* = 0
  TA_RIGHT* = 2
  TA_RTLREADING* = 256
  TA_NOUPDATECP* = 0
  TA_UPDATECP* = 1
  TA_MASK* = (TA_BASELINE + TA_CENTER + TA_UPDATECP + TA_RTLREADING)
  VTA_BASELINE* = TA_BASELINE
  VTA_CENTER* = TA_CENTER
  VTA_LEFT* = TA_BOTTOM
  VTA_RIGHT* = TA_TOP
  VTA_BOTTOM* = TA_RIGHT
  VTA_TOP* = TA_LEFT
  MWT_IDENTITY* = 1
  MWT_LEFTMULTIPLY* = 2
  MWT_RIGHTMULTIPLY* = 3
  MWT_MIN* = MWT_IDENTITY
  MWT_MAX* = MWT_RIGHTMULTIPLY
  TRANSPARENT* = 1
  OPAQUE* = 2
  BLACKONWHITE* = 1
  WHITEONBLACK* = 2
  COLORONCOLOR* = 3
  HALFTONE* = 4
  STRETCH_ANDSCANS* = 1
  STRETCH_ORSCANS* = 2
  STRETCH_DELETESCANS* = 3
  STRETCH_HALFTONE* = 4
  MAXSTRETCHBLTMODE* = 4
  TCI_SRCCHARSET* = 1
  TCI_SRCCODEPAGE* = 2
  TCI_SRCFONTSIG* = 3
  TCI_SRCLOCALE* = 0x1000
  ICM_OFF* = 1
  ICM_ON* = 2
  ICM_QUERY* = 3
  ICM_DONE_OUTSIDEDC* = 4
  SP_NOTREPORTED* = 0x4000
  SP_ERROR* = -1
  SP_APPABORT* = -2
  SP_USERABORT* = -3
  SP_OUTOFDISK* = -4
  SP_OUTOFMEMORY* = -5
  NEWFRAME* = 1
  # ABORTDOC* = 2.int32
  NEXTBAND* = 3
  SETCOLORTABLE* = 4
  GETCOLORTABLE* = 5
  FLUSHOUTPUT* = 6
  DRAFTMODE* = 7
  QUERYESCSUPPORT* = 8
  # SETABORTPROC* = 9.int32
  # STARTDOC* = 10.int32
  # ENDDOC* = 11.int32
  GETPHYSPAGESIZE* = 12
  GETPRINTINGOFFSET* = 13
  GETSCALINGFACTOR* = 14
  MFCOMMENT* = 15
  GETPENWIDTH* = 16
  SETCOPYCOUNT* = 17
  SELECTPAPERSOURCE* = 18
  DEVICEDATA* = 19
  PASSTHROUGH* = 19
  GETTECHNOLOGY* = 20
  SETLINECAP* = 21
  SETLINEJOIN* = 22
  # SETMITERLIMIT* = 23.int32
  BANDINFO* = 24
  DRAWPATTERNRECT* = 25
  GETVECTORPENSIZE* = 26
  GETVECTORBRUSHSIZE* = 27
  ENABLEDUPLEX* = 28
  GETSETPAPERBINS* = 29
  GETSETPRINTORIENT* = 30
  ENUMPAPERBINS* = 31
  SETDIBSCALING* = 32
  EPSPRINTING* = 33
  ENUMPAPERMETRICS* = 34
  GETSETPAPERMETRICS* = 35
  POSTSCRIPT_DATA* = 37
  POSTSCRIPT_IGNORE* = 38
  MOUSETRAILS* = 39
  GETDEVICEUNITS* = 42
  GETEXTENDEDTEXTMETRICS* = 256
  GETEXTENTTABLE* = 257
  GETPAIRKERNTABLE* = 258
  GETTRACKKERNTABLE* = 259
  # EXTTEXTOUT* = 512.int32
  GETFACENAME* = 513
  DOWNLOADFACE* = 514
  ENABLERELATIVEWIDTHS* = 768
  ENABLEPAIRKERNING* = 769
  SETKERNTRACK* = 770
  SETALLJUSTVALUES* = 771
  SETCHARSET* = 772
  # STRETCHBLT* = 2048.int32
  METAFILE_DRIVER* = 2049
  GETSETSCREENPARAMS* = 3072
  QUERYDIBSUPPORT* = 3073
  # BEGIN_PATH* = 4096.int32
  CLIP_TO_PATH* = 4097
  # END_PATH* = 4098.int32
  EXT_DEVICE_CAPS* = 4099
  RESTORE_CTM* = 4100
  SAVE_CTM* = 4101
  # SET_ARC_DIRECTION* = 4102.int32
  # SET_BACKGROUND_COLOR* = 4103.int32
  SET_POLY_MODE* = 4104
  SET_SCREEN_ANGLE* = 4105
  SET_SPREAD* = 4106
  TRANSFORM_CTM* = 4107
  SET_CLIP_BOX* = 4108
  SET_BOUNDS* = 4109
  SET_MIRROR_MODE* = 4110
  OPENCHANNEL* = 4110
  DOWNLOADHEADER* = 4111
  CLOSECHANNEL* = 4112
  POSTSCRIPT_PASSTHROUGH* = 4115
  ENCAPSULATED_POSTSCRIPT* = 4116
  POSTSCRIPT_IDENTIFY* = 4117
  POSTSCRIPT_INJECTION* = 4118
  CHECKJPEGFORMAT* = 4119
  CHECKPNGFORMAT* = 4120
  GET_PS_FEATURESETTING* = 4121
  SPCLPASSTHROUGH2* = 4568
  PSIDENT_GDICENTRIC* = 0
  PSIDENT_PSCENTRIC* = 1

type
  PSINJECTDATA* {.final, pure.} = object
    DataBytes*: DWORD
    InjectionPoint*: WORD
    PageNumber*: WORD
  PPSINJECTDATA* = ptr PSINJECTDATA

const
  PSINJECT_BEGINSTREAM* = 1
  PSINJECT_PSADOBE* = 2
  PSINJECT_PAGESATEND* = 3
  PSINJECT_PAGES* = 4
  PSINJECT_DOCNEEDEDRES* = 5
  PSINJECT_DOCSUPPLIEDRES* = 6
  PSINJECT_PAGEORDER* = 7
  PSINJECT_ORIENTATION* = 8
  PSINJECT_BOUNDINGBOX* = 9
  PSINJECT_DOCUMENTPROCESSCOLORS* = 10
  PSINJECT_COMMENTS* = 11
  PSINJECT_BEGINDEFAULTS* = 12
  PSINJECT_ENDDEFAULTS* = 13
  PSINJECT_BEGINPROLOG* = 14
  PSINJECT_ENDPROLOG* = 15
  PSINJECT_BEGINSETUP* = 16
  PSINJECT_ENDSETUP* = 17
  PSINJECT_TRAILER* = 18
  PSINJECT_EOF* = 19
  PSINJECT_ENDSTREAM* = 20
  PSINJECT_DOCUMENTPROCESSCOLORSATEND* = 21
  PSINJECT_PAGENUMBER* = 100
  PSINJECT_BEGINPAGESETUP* = 101
  PSINJECT_ENDPAGESETUP* = 102
  PSINJECT_PAGETRAILER* = 103
  PSINJECT_PLATECOLOR* = 104
  PSINJECT_SHOWPAGE* = 105
  PSINJECT_PAGEBBOX* = 106
  PSINJECT_ENDPAGECOMMENTS* = 107
  PSINJECT_VMSAVE* = 200
  PSINJECT_VMRESTORE* = 201
  FEATURESETTING_NUP* = 0
  FEATURESETTING_OUTPUT* = 1
  FEATURESETTING_PSLEVEL* = 2
  FEATURESETTING_CUSTPAPER* = 3
  FEATURESETTING_MIRROR* = 4
  FEATURESETTING_NEGATIVE* = 5
  FEATURESETTING_PROTOCOL* = 6
  FEATURESETTING_PRIVATE_BEGIN* = 0x1000
  FEATURESETTING_PRIVATE_END* = 0x1FFF
  PSPROTOCOL_ASCII* = 0
  PSPROTOCOL_BCP* = 1
  PSPROTOCOL_TBCP* = 2
  PSPROTOCOL_BINARY* = 3
  PR_JOBSTATUS* = 0
  QDI_SETDIBITS* = 1
  QDI_GETDIBITS* = 2
  QDI_DIBTOSCREEN* = 4
  QDI_STRETCHDIB* = 8
  ASPECT_FILTERING* = 1
  LCS_CALIBRATED_RGB* = 0
  LCS_DEVICE_RGB* = 1
  LCS_DEVICE_CMYK* = 2
  LCS_GM_BUSINESS* = 1
  LCS_GM_GRAPHICS* = 2
  LCS_GM_IMAGES* = 4
  LCS_GM_ABS_COLORIMETRIC* = 8
  RASTER_FONTTYPE* = 1
  DEVICE_FONTTYPE* = 2
  TRUETYPE_FONTTYPE* = 4
  CCHDEVICENAME* = 32
  CCHFORMNAME* = 32
  DM_SPECVERSION* = 0x0401
  DMORIENT_PORTRAIT* = 1
  DMORIENT_LANDSCAPE* = 2
  DMPAPER_LETTER* = 1
  DMPAPER_LETTERSMALL* = 2
  DMPAPER_TABLOID* = 3
  DMPAPER_LEDGER* = 4
  DMPAPER_LEGAL* = 5
  DMPAPER_STATEMENT* = 6
  DMPAPER_EXECUTIVE* = 7
  DMPAPER_A3* = 8
  DMPAPER_A4* = 9
  DMPAPER_A4SMALL* = 10
  DMPAPER_A5* = 11
  DMPAPER_B4* = 12
  DMPAPER_B5* = 13
  DMPAPER_FOLIO* = 14
  DMPAPER_QUARTO* = 15
  DMPAPER_10X14* = 16
  DMPAPER_11X17* = 17
  DMPAPER_NOTE* = 18
  DMPAPER_ENV_9* = 19
  DMPAPER_ENV_10* = 20
  DMPAPER_ENV_11* = 21
  DMPAPER_ENV_12* = 22
  DMPAPER_ENV_14* = 23
  DMPAPER_CSHEET* = 24
  DMPAPER_DSHEET* = 25
  DMPAPER_ESHEET* = 26
  DMPAPER_ENV_DL* = 27
  DMPAPER_ENV_C5* = 28
  DMPAPER_ENV_C3* = 29
  DMPAPER_ENV_C4* = 30
  DMPAPER_ENV_C6* = 31
  DMPAPER_ENV_C65* = 32
  DMPAPER_ENV_B4* = 33
  DMPAPER_ENV_B5* = 34
  DMPAPER_ENV_B6* = 35
  DMPAPER_ENV_ITALY* = 36
  DMPAPER_ENV_MONARCH* = 37
  DMPAPER_ENV_PERSONAL* = 38
  DMPAPER_FANFOLD_US* = 39
  DMPAPER_FANFOLD_STD_GERMAN* = 40
  DMPAPER_FANFOLD_LGL_GERMAN* = 41
  DMPAPER_ISO_B4* = 42
  DMPAPER_JAPANESE_POSTCARD* = 43
  DMPAPER_9X11* = 44
  DMPAPER_10X11* = 45
  DMPAPER_15X11* = 46
  DMPAPER_ENV_INVITE* = 47
  DMPAPER_RESERVED_48* = 48
  DMPAPER_RESERVED_49* = 49
  DMPAPER_LETTER_EXTRA* = 50
  DMPAPER_LEGAL_EXTRA* = 51
  DMPAPER_TABLOID_EXTRA* = 52
  DMPAPER_A4_EXTRA* = 53
  DMPAPER_LETTER_TRANSVERSE* = 54
  DMPAPER_A4_TRANSVERSE* = 55
  DMPAPER_LETTER_EXTRA_TRANSVERSE* = 56
  DMPAPER_A_PLUS* = 57
  DMPAPER_B_PLUS* = 58
  DMPAPER_LETTER_PLUS* = 59
  DMPAPER_A4_PLUS* = 60
  DMPAPER_A5_TRANSVERSE* = 61
  DMPAPER_B5_TRANSVERSE* = 62
  DMPAPER_A3_EXTRA* = 63
  DMPAPER_A5_EXTRA* = 64
  DMPAPER_B5_EXTRA* = 65
  DMPAPER_A2* = 66
  DMPAPER_A3_TRANSVERSE* = 67
  DMPAPER_A3_EXTRA_TRANSVERSE* = 68
  DMPAPER_DBL_JAPANESE_POSTCARD* = 69
  DMPAPER_A6* = 70
  DMPAPER_JENV_KAKU2* = 71
  DMPAPER_JENV_KAKU3* = 72
  DMPAPER_JENV_CHOU3* = 73
  DMPAPER_JENV_CHOU4* = 74
  DMPAPER_LETTER_ROTATED* = 75
  DMPAPER_A3_ROTATED* = 76
  DMPAPER_A4_ROTATED* = 77
  DMPAPER_A5_ROTATED* = 78
  DMPAPER_B4_JIS_ROTATED* = 79
  DMPAPER_B5_JIS_ROTATED* = 80
  DMPAPER_JAPANESE_POSTCARD_ROTATED* = 81
  DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED* = 82
  DMPAPER_A6_ROTATED* = 83
  DMPAPER_JENV_KAKU2_ROTATED* = 84
  DMPAPER_JENV_KAKU3_ROTATED* = 85
  DMPAPER_JENV_CHOU3_ROTATED* = 86
  DMPAPER_JENV_CHOU4_ROTATED* = 87
  DMPAPER_B6_JIS* = 88
  DMPAPER_B6_JIS_ROTATED* = 89
  DMPAPER_12X11* = 90
  DMPAPER_JENV_YOU4* = 91
  DMPAPER_JENV_YOU4_ROTATED* = 92
  DMPAPER_P16K* = 93
  DMPAPER_P32K* = 94
  DMPAPER_P32KBIG* = 95
  DMPAPER_PENV_1* = 96
  DMPAPER_PENV_2* = 97
  DMPAPER_PENV_3* = 98
  DMPAPER_PENV_4* = 99
  DMPAPER_PENV_5* = 100
  DMPAPER_PENV_6* = 101
  DMPAPER_PENV_7* = 102
  DMPAPER_PENV_8* = 103
  DMPAPER_PENV_9* = 104
  DMPAPER_PENV_10* = 105
  DMPAPER_P16K_ROTATED* = 106
  DMPAPER_P32K_ROTATED* = 107
  DMPAPER_P32KBIG_ROTATED* = 108
  DMPAPER_PENV_1_ROTATED* = 109
  DMPAPER_PENV_2_ROTATED* = 110
  DMPAPER_PENV_3_ROTATED* = 111
  DMPAPER_PENV_4_ROTATED* = 112
  DMPAPER_PENV_5_ROTATED* = 113
  DMPAPER_PENV_6_ROTATED* = 114
  DMPAPER_PENV_7_ROTATED* = 115
  DMPAPER_PENV_8_ROTATED* = 116
  DMPAPER_PENV_9_ROTATED* = 117
  DMPAPER_PENV_10_ROTATED* = 118
  DMPAPER_LAST* = DMPAPER_PENV_10_ROTATED
  DMPAPER_FIRST* = DMPAPER_LETTER
  DMPAPER_USER* = 256
  DMBIN_ONLYONE* = 1
  DMBIN_UPPER* = 1
  DMBIN_LOWER* = 2
  DMBIN_MIDDLE* = 3
  DMBIN_MANUAL* = 4
  DMBIN_ENVELOPE* = 5
  DMBIN_ENVMANUAL* = 6
  DMBIN_AUTO* = 7
  DMBIN_TRACTOR* = 8
  DMBIN_SMALLFMT* = 9
  DMBIN_LARGEFMT* = 10
  DMBIN_LARGECAPACITY* = 11
  DMBIN_CASSETTE* = 14
  DMBIN_FORMSOURCE* = 15
  DMRES_DRAFT* = -1
  DMRES_LOW* = -2
  DMRES_MEDIUM* = -3
  DMRES_HIGH* = -4
  DMCOLOR_MONOCHROME* = 1
  DMCOLOR_COLOR* = 2
  DMDUP_SIMPLEX* = 1
  DMDUP_VERTICAL* = 2
  DMDUP_HORIZONTAL* = 3
  DMTT_BITMAP* = 1
  DMTT_DOWNLOAD* = 2
  DMTT_SUBDEV* = 3
  DMTT_DOWNLOAD_OUTLINE* = 4
  DMCOLLATE_FALSE* = 0
  DMCOLLATE_TRUE* = 1
  DMDO_DEFAULT* = 0
  DMDO_90* = 1
  DMDO_180* = 2
  DMDO_270* = 3
  DMDFO_DEFAULT* = 0
  DMDFO_STRETCH* = 1
  DMDFO_CENTER* = 2
  DM_GRAYSCALE* = 1
  DM_INTERLACED* = 2
  DMDISPLAYFLAGS_TEXTMODE* = 0x00000004
  DMNUP_SYSTEM* = 1
  DMNUP_ONEUP* = 2
  DM_ORIENTATION* = 0x00000001
  DM_PAPERSIZE* = 0x00000002
  DM_PAPERLENGTH* = 0x00000004
  DM_PAPERWIDTH* = 0x00000008
  DM_SCALE* = 0x00000010
  DM_POSITION* = 0x00000020
  DM_NUP* = 0x00000040
  DM_DISPLAYORIENTATION* = 0x00000080
  DM_COPIES* = 0x00000100
  DM_DEFAULTSOURCE* = 0x00000200
  DM_PRINTQUALITY* = 0x00000400
  DM_COLOR* = 0x00000800
  DM_DUPLEX* = 0x00001000
  DM_YRESOLUTION* = 0x00002000
  DM_TTOPTION* = 0x00004000
  DM_COLLATE* = 0x00008000
  DM_FORMNAME* = 0x00010000
  DM_LOGPIXELS* = 0x00020000
  DM_BITSPERPEL* = 0x00040000
  DM_PELSWIDTH* = 0x00080000
  DM_PELSHEIGHT* = 0x00100000
  DM_DISPLAYFLAGS* = 0x00200000
  DM_DISPLAYFREQUENCY* = 0x00400000
  DM_ICMMETHOD* = 0x00800000
  DM_ICMINTENT* = 0x01000000
  DM_MEDIATYPE* = 0x02000000
  DM_DITHERTYPE* = 0x04000000
  DM_PANNINGWIDTH* = 0x08000000
  DM_PANNINGHEIGHT* = 0x10000000
  DM_DISPLAYFIXEDOUTPUT* = 0x20000000
  DMICMMETHOD_NONE* = 1
  DMICMMETHOD_SYSTEM* = 2
  DMICMMETHOD_DRIVER* = 3
  DMICMMETHOD_DEVICE* = 4
  DMICMMETHOD_USER* = 256
  DMICM_SATURATE* = 1
  DMICM_CONTRAST* = 2
  DMICM_COLORIMETRIC* = 3
  DMICM_ABS_COLORIMETRIC* = 4
  DMICM_USER* = 256
  DMMEDIA_STANDARD* = 1
  DMMEDIA_TRANSPARENCY* = 2
  DMMEDIA_GLOSSY* = 3
  DMMEDIA_USER* = 256
  DMDITHER_NONE* = 1
  DMDITHER_COARSE* = 2
  DMDITHER_FINE* = 3
  DMDITHER_LINEART* = 4
  DMDITHER_ERRORDIFFUSION* = 5
  DMDITHER_RESERVED6* = 6
  DMDITHER_RESERVED7* = 7
  DMDITHER_RESERVED8* = 8
  DMDITHER_RESERVED9* = 9
  DMDITHER_GRAYSCALE* = 10
  DMDITHER_USER* = 256
  DM_UPDATE* = 1
  DM_COPY* = 2
  DM_PROMPT* = 4
  DM_MODIFY* = 8
  DM_IN_BUFFER* = DM_MODIFY
  DM_IN_PROMPT* = DM_PROMPT
  DM_OUT_BUFFER* = DM_COPY
  DM_OUT_DEFAULT* = DM_UPDATE
  GDI_ERROR* = 0xFFFFFFFF'u32
  HGDI_ERROR* = GDI_ERROR.HANDLE
  TMPF_FIXED_PITCH* = 1
  TMPF_VECTOR* = 2
  TMPF_TRUETYPE* = 4
  TMPF_DEVICE* = 8
  NTM_ITALIC* = 0x00000001
  NTM_BOLD* = 0x00000020
  NTM_REGULAR* = 0x00000040
  NTM_NONNEGATIVE_AC* = 0x00010000
  NTM_PS_OPENTYPE* = 0x00020000
  NTM_TT_OPENTYPE* = 0x00040000
  NTM_MULTIPLEMASTER* = 0x00080000
  NTM_TYPE1* = 0x00100000
  NTM_DSIG* = 0x00200000
  TT_POLYGON_TYPE* = 24
  TT_PRIM_LINE* = 1
  TT_PRIM_QSPLINE* = 2
  TT_PRIM_CSPLINE* = 3
  FONTMAPPER_MAX* = 10
  ENHMETA_STOCK_OBJECT* = 0x80000000'i32
  WGL_FONT_LINES* = 0
  WGL_FONT_POLYGONS* = 1
  LPD_DOUBLEBUFFER* = 1
  LPD_STEREO* = 2
  LPD_SUPPORT_GDI* = 16
  LPD_SUPPORT_OPENGL* = 32
  LPD_SHARE_DEPTH* = 64
  LPD_SHARE_STENCIL* = 128
  LPD_SHARE_ACCUM* = 256
  LPD_SWAP_EXCHANGE* = 512
  LPD_SWAP_COPY* = 1024
  LPD_TRANSPARENT* = 4096
  LPD_TYPE_RGBA* = 0
  LPD_TYPE_COLORINDEX* = 1
  WGL_SWAP_MAIN_PLANE* = 1
  WGL_SWAP_OVERLAY1* = 2
  WGL_SWAP_OVERLAY2* = 4
  WGL_SWAP_OVERLAY3* = 8
  WGL_SWAP_OVERLAY4* = 16
  WGL_SWAP_OVERLAY5* = 32
  WGL_SWAP_OVERLAY6* = 64
  WGL_SWAP_OVERLAY7* = 128
  WGL_SWAP_OVERLAY8* = 256
  WGL_SWAP_OVERLAY9* = 512
  WGL_SWAP_OVERLAY10* = 1024
  WGL_SWAP_OVERLAY11* = 2048
  WGL_SWAP_OVERLAY12* = 4096
  WGL_SWAP_OVERLAY13* = 8192
  WGL_SWAP_OVERLAY14* = 16384
  WGL_SWAP_OVERLAY15* = 32768
  WGL_SWAP_UNDERLAY1* = 65536
  WGL_SWAP_UNDERLAY2* = 0x20000
  WGL_SWAP_UNDERLAY3* = 0x40000
  WGL_SWAP_UNDERLAY4* = 0x80000
  WGL_SWAP_UNDERLAY5* = 0x100000
  WGL_SWAP_UNDERLAY6* = 0x200000
  WGL_SWAP_UNDERLAY7* = 0x400000
  WGL_SWAP_UNDERLAY8* = 0x800000
  WGL_SWAP_UNDERLAY9* = 0x1000000
  WGL_SWAP_UNDERLAY10* = 0x2000000
  WGL_SWAP_UNDERLAY11* = 0x4000000
  WGL_SWAP_UNDERLAY12* = 0x8000000
  WGL_SWAP_UNDERLAY13* = 0x10000000
  WGL_SWAP_UNDERLAY14* = 0x20000000
  WGL_SWAP_UNDERLAY15* = 0x40000000
  AC_SRC_OVER* = 0x00
  AC_SRC_ALPHA* = 0x01
  AC_SRC_NO_PREMULT_ALPHA* = 0x01
  AC_SRC_NO_ALPHA* = 0x02
  AC_DST_NO_PREMULT_ALPHA* = 0x10
  AC_DST_NO_ALPHA* = 0x20
  LAYOUT_RTL* = 1
  LAYOUT_BTT* = 2
  LAYOUT_VBH* = 4
  LAYOUT_BITMAPORIENTATIONPRESERVED* = 8
  CS_ENABLE* = 0x00000001
  CS_DISABLE* = 0x00000002
  CS_DELETE_TRANSFORM* = 0x00000003
  GRADIENT_FILL_RECT_H* = 0x00
  GRADIENT_FILL_RECT_V* = 0x01
  GRADIENT_FILL_TRIANGLE* = 0x02
  GRADIENT_FILL_OP_FLAG* = 0xff
  COLORMATCHTOTARGET_EMBEDED* = 0x00000001
  CREATECOLORSPACE_EMBEDED* = 0x00000001
  SETICMPROFILE_EMBEDED* = 0x00000001
  DISPLAY_DEVICE_ATTACHED_TO_DESKTOP* = 0x00000001
  DISPLAY_DEVICE_MULTI_DRIVER* = 0x00000002
  DISPLAY_DEVICE_PRIMARY_DEVICE* = 0x00000004
  DISPLAY_DEVICE_MIRRORING_DRIVER* = 0x00000008
  DISPLAY_DEVICE_VGA_COMPATIBLE* = 0x00000010
  DISPLAY_DEVICE_REMOVABLE* = 0x00000020
  DISPLAY_DEVICE_DISCONNECT* = 0x02000000
  DISPLAY_DEVICE_REMOTE* = 0x04000000
  DISPLAY_DEVICE_MODESPRUNED* = 0x08000000
  DISPLAY_DEVICE_ACTIVE* = 0x00000001
  DISPLAY_DEVICE_ATTACHED* = 0x00000002
  GGI_MARK_NONEXISTING_GLYPHS* = 1

type
  ABC* {.final, pure.} = object
    abcA*: int32
    abcB*: UINT
    abcC*: int32
  PABC* = ptr ABC
  NPABC* = ptr ABC
  LPABC* = ptr ABC
  ABCFLOAT* {.final, pure.} = object
    abcfA*: FLOAT
    abcfB*: FLOAT
    abcfC*: FLOAT
  PABCFLOAT* = ptr ABCFLOAT
  NPABCFLOAT* = ptr ABCFLOAT
  LPABCFLOAT* = ptr ABCFLOAT
  BITMAP* {.final, pure.} = object
    bmType*: LONG
    bmWidth*: LONG
    bmHeight*: LONG
    bmWidthBytes*: LONG
    bmPlanes*: WORD
    bmBitsPixel*: WORD
    bmBits*: LPVOID
  PBITMAP* = ptr BITMAP
  NPBITMAP* = ptr BITMAP
  LPBITMAP* = ptr BITMAP
  BITMAPCOREHEADER* {.final, pure.} = object
    bcSize*: DWORD
    bcWidth*: WORD
    bcHeight*: WORD
    bcPlanes*: WORD
    bcBitCount*: WORD
  PBITMAPCOREHEADER* = ptr BITMAPCOREHEADER
  LPBITMAPCOREHEADER* = ptr BITMAPCOREHEADER
  RGBTRIPLE* {.final, pure.} = object
    rgbtBlue*: BYTE
    rgbtGreen*: BYTE
    rgbtRed*: BYTE
  LPRGBTRIPLE* = ptr RGBTRIPLE
  BITMAPFILEHEADER* {.final, pure.} = object
    bfType*: WORD
    bfSize*: DWORD
    bfReserved1*: WORD
    bfReserved2*: WORD
    bfOffBits*: DWORD
  LPBITMAPFILEHEADER* = ptr BITMAPFILEHEADER
  PBITMAPFILEHEADER* = ptr BITMAPFILEHEADER
  BITMAPCOREINFO* {.final, pure.} = object
    bmciHeader*: BITMAPCOREHEADER
    bmciColors*: array[1, RGBTRIPLE]
  LPBITMAPCOREINFO* = ptr BITMAPCOREINFO
  PBITMAPCOREINFO* = ptr BITMAPCOREINFO
  BITMAPINFOHEADER* {.final, pure.} = object
    biSize*: DWORD
    biWidth*: LONG
    biHeight*: LONG
    biPlanes*: WORD
    biBitCount*: WORD
    biCompression*: DWORD
    biSizeImage*: DWORD
    biXPelsPerMeter*: LONG
    biYPelsPerMeter*: LONG
    biClrUsed*: DWORD
    biClrImportant*: DWORD
  LPBITMAPINFOHEADER* = ptr BITMAPINFOHEADER
  PBITMAPINFOHEADER* = ptr BITMAPINFOHEADER
  RGBQUAD* {.final, pure.} = object
    rgbBlue*: BYTE
    rgbGreen*: BYTE
    rgbRed*: BYTE
    rgbReserved*: BYTE
  LPRGBQUAD* = ptr RGBQUAD
  BITMAPINFO* {.final, pure.} = object
    bmiHeader*: BITMAPINFOHEADER
    bmiColors*: array[1, RGBQUAD]
  PBITMAPINFO* = ptr BITMAPINFO
  LPBITMAPINFO* = ptr BITMAPINFO
  FXPT16DOT16* = int32
  LPFXPT16DOT16* = ptr int32
  FXPT2DOT30* = int32
  LPFXPT2DOT30* = ptr int32
  CIEXYZ* {.final, pure.} = object
    ciexyzX*: FXPT2DOT30
    ciexyzY*: FXPT2DOT30
    ciexyzZ*: FXPT2DOT30
  LPCIEXYZ* = ptr CIEXYZ
  CIEXYZTRIPLE* {.final, pure.} = object
    ciexyzRed*: CIEXYZ
    ciexyzGreen*: CIEXYZ
    ciexyzBlue*: CIEXYZ
  LPCIEXYZTRIPLE* = ptr CIEXYZTRIPLE
  BITMAPV4HEADER* {.final, pure.} = object
    bV4Size*: DWORD
    bV4Width*: LONG
    bV4Height*: LONG
    bV4Planes*: WORD
    bV4BitCount*: WORD
    bV4V4Compression*: DWORD
    bV4SizeImage*: DWORD
    bV4XPelsPerMeter*: LONG
    bV4YPelsPerMeter*: LONG
    bV4ClrUsed*: DWORD
    bV4ClrImportant*: DWORD
    bV4RedMask*: DWORD
    bV4GreenMask*: DWORD
    bV4BlueMask*: DWORD
    bV4AlphaMask*: DWORD
    bV4CSType*: DWORD
    bV4Endpoints*: CIEXYZTRIPLE
    bV4GammaRed*: DWORD
    bV4GammaGreen*: DWORD
    bV4GammaBlue*: DWORD
  LPBITMAPV4HEADER* = ptr BITMAPV4HEADER
  PBITMAPV4HEADER* = ptr BITMAPV4HEADER
  BITMAPV5HEADER* {.final, pure.} = object
    bV5Size*: DWORD
    bV5Width*: LONG
    bV5Height*: LONG
    bV5Planes*: WORD
    bV5BitCount*: WORD
    bV5Compression*: DWORD
    bV5SizeImage*: DWORD
    bV5XPelsPerMeter*: LONG
    bV5YPelsPerMeter*: LONG
    bV5ClrUsed*: DWORD
    bV5ClrImportant*: DWORD
    bV5RedMask*: DWORD
    bV5GreenMask*: DWORD
    bV5BlueMask*: DWORD
    bV5AlphaMask*: DWORD
    bV5CSType*: DWORD
    bV5Endpoints*: CIEXYZTRIPLE
    bV5GammaRed*: DWORD
    bV5GammaGreen*: DWORD
    bV5GammaBlue*: DWORD
    bV5Intent*: DWORD
    bV5ProfileData*: DWORD
    bV5ProfileSize*: DWORD
    bV5Reserved*: DWORD
  LPBITMAPV5HEADER* = ptr BITMAPV5HEADER
  PBITMAPV5HEADER* = ptr BITMAPV5HEADER
  FONTSIGNATURE* {.final, pure.} = object
    fsUsb*: array[4, DWORD]
    fsCsb*: array[2, DWORD]
  PFONTSIGNATURE* = ptr FONTSIGNATURE
  LPFONTSIGNATURE* = ptr FONTSIGNATURE
  CHARSETINFO* {.final, pure.} = object
    ciCharset*: UINT
    ciACP*: UINT
    fs*: FONTSIGNATURE
  PCHARSETINFO* = ptr CHARSETINFO
  NPCHARSETINFO* = ptr CHARSETINFO
  LPCHARSETINFO* = ptr CHARSETINFO
  COLORADJUSTMENT* {.final, pure.} = object
    caSize*: WORD
    caFlags*: WORD
    caIlluminantIndex*: WORD
    caRedGamma*: WORD
    caGreenGamma*: WORD
    caBlueGamma*: WORD
    caReferenceBlack*: WORD
    caReferenceWhite*: WORD
    caContrast*: SHORT
    caBrightness*: SHORT
    caColorfulness*: SHORT
    caRedGreenTint*: SHORT
  PCOLORADJUSTMENT* = ptr COLORADJUSTMENT
  LPCOLORADJUSTMENT* = ptr COLORADJUSTMENT
  DEVMODEA_UNION2* {.final, union, pure.} = object
    dmDisplayFlags*: DWORD
    dmNup*: DWORD
  DEVMODEA_UNION1_STRUCT1* {.final, pure.} = object
    dmOrientation*: int16
    dmPaperSize*: int16
    dmPaperLength*: int16
    dmPaperWidth*: int16
    dmScale*: int16
    dmCopies*: int16
    dmDefaultSource*: int16
    dmPrintQuality*: int16
  DEVMODEA_UNION1* {.final, union, pure.} = object
    s1*: DEVMODEA_UNION1_STRUCT1
    dmPosition*: POINTL
    dmDisplayOrientation*: DWORD
    dmDisplayFixedOutput*: DWORD
  DEVMODEA* {.final, pure.} = object
    dmDeviceName*: array[CCHDEVICENAME, BYTE]
    dmSpecVersion*: WORD
    dmDriverVersion*: WORD
    dmSize*: WORD
    dmDriverExtra*: WORD
    dmFields*: DWORD
    u1*: DEVMODEA_UNION1
    dmColor*: int16
    dmDuplex*: int16
    dmYResolution*: int16
    dmTTOption*: int16
    dmCollate*: int16
    dmFormName*: array[CCHFORMNAME, BYTE]
    dmLogPixels*: WORD
    dmBitsPerPel*: DWORD
    dmPelsWidth*: DWORD
    dmPelsHeight*: DWORD
    u2*: DEVMODEA_UNION2
    dmDisplayFrequency*: DWORD
    dmICMMethod*: DWORD
    dmICMIntent*: DWORD
    dmMediaType*: DWORD
    dmDitherType*: DWORD
    dmReserved1*: DWORD
    dmReserved2*: DWORD
    dmPanningWidth*: DWORD
    dmPanningHeight*: DWORD
  PDEVMODEA* = ptr DEVMODEA
  NPDEVMODEA* = ptr DEVMODEA
  LPDEVMODEA* = ptr DEVMODEA
  DEVMODEW_UNION2* {.final, union, pure.} = object
    dmDisplayFlags*: DWORD
    dmNup*: DWORD
  DEVMODEW_UNION1_STRUCT1* {.final, pure.} = object
    dmOrientation*: int16
    dmPaperSize*: int16
    dmPaperLength*: int16
    dmPaperWidth*: int16
    dmScale*: int16
    dmCopies*: int16
    dmDefaultSource*: int16
    dmPrintQuality*: int16
  DEVMODEW_UNION1* {.final, union, pure.} = object
    s1*: DEVMODEW_UNION1_STRUCT1
    dmPosition*: POINTL
    dmDisplayOrientation*: DWORD
    dmDisplayFixedOutput*: DWORD
  DEVMODEW* {.final, pure.} = object
    dmDeviceName*: array[CCHDEVICENAME, WCHAR]
    dmSpecVersion*: WORD
    dmDriverVersion*: WORD
    dmSize*: WORD
    dmDriverExtra*: WORD
    dmFields*: DWORD
    u1*: DEVMODEW_UNION1
    dmColor*: int16
    dmDuplex*: int16
    dmYResolution*: int16
    dmTTOption*: int16
    dmCollate*: int16
    dmFormName*: array[CCHFORMNAME, WCHAR]
    dmLogPixels*: WORD
    dmBitsPerPel*: DWORD
    dmPelsWidth*: DWORD
    dmPelsHeight*: DWORD
    u2*: DEVMODEW_UNION2
    dmDisplayFrequency*: DWORD
    dmICMMethod*: DWORD
    dmICMIntent*: DWORD
    dmMediaType*: DWORD
    dmDitherType*: DWORD
    dmReserved1*: DWORD
    dmReserved2*: DWORD
    dmPanningWidth*: DWORD
    dmPanningHeight*: DWORD
  PDEVMODEW* = ptr DEVMODEW
  NPDEVMODEW* = ptr DEVMODEW
  LPDEVMODEW* = ptr DEVMODEW
  PSFEATURE_OUTPUT* {.final, pure.} = object
    bPageIndependent*: BOOL
    bSetPageDevice*: BOOL
  PPSFEATURE_OUTPUT* = ptr PSFEATURE_OUTPUT
  PSFEATURE_CUSTPAPER* {.final, pure.} = object
    lOrientation*: LONG
    lWidth*: LONG
    lHeight*: LONG
    lWidthOffset*: LONG
    lHeightOffset*: LONG
  PPSFEATURE_CUSTPAPER* = ptr PSFEATURE_CUSTPAPER
  DIBSECTION* {.final, pure.} = object
    dsBm*: BITMAP
    dsBmih*: BITMAPINFOHEADER
    dsBitfields*: array[3, DWORD]
    dshSection*: HANDLE
    dsOffset*: DWORD
  PDIBSECTION* = ptr DIBSECTION
  DOCINFOA* {.final, pure.} = object
    cbSize*: int32
    lpszDocName*: LPCSTR
    lpszOutput*: LPCSTR
    lpszDatatype*: LPCSTR
    fwType*: DWORD
  LPDOCINFOA* = ptr DOCINFOA
  DOCINFOW* {.final, pure.} = object
    cbSize*: int32
    lpszDocName*: LPCWSTR
    lpszOutput*: LPCWSTR
    lpszDatatype*: LPCWSTR
    fwType*: DWORD
  LPDOCINFOW* = ptr DOCINFOW
  PANOSE* {.final, pure.} = object
    bFamilyType*: BYTE
    bSerifStyle*: BYTE
    bWeight*: BYTE
    bProportion*: BYTE
    bContrast*: BYTE
    bStrokeVariation*: BYTE
    bArmStyle*: BYTE
    bLetterform*: BYTE
    bMidline*: BYTE
    bXHeight*: BYTE
  LPPANOSE* = ptr PANOSE
  LOGFONTA* {.final, pure.} = object
    lfHeight*: LONG
    lfWidth*: LONG
    lfEscapement*: LONG
    lfOrientation*: LONG
    lfWeight*: LONG
    lfItalic*: BYTE
    lfUnderline*: BYTE
    lfStrikeOut*: BYTE
    lfCharSet*: BYTE
    lfOutPrecision*: BYTE
    lfClipPrecision*: BYTE
    lfQuality*: BYTE
    lfPitchAndFamily*: BYTE
    lfFaceName*: array[LF_FACESIZE, CHAR]
  PLOGFONTA* = ptr LOGFONTA
  NPLOGFONTA* = ptr LOGFONTA
  LPLOGFONTA* = ptr LOGFONTA
  LOGFONTW* {.final, pure.} = object
    lfHeight*: LONG
    lfWidth*: LONG
    lfEscapement*: LONG
    lfOrientation*: LONG
    lfWeight*: LONG
    lfItalic*: BYTE
    lfUnderline*: BYTE
    lfStrikeOut*: BYTE
    lfCharSet*: BYTE
    lfOutPrecision*: BYTE
    lfClipPrecision*: BYTE
    lfQuality*: BYTE
    lfPitchAndFamily*: BYTE
    lfFaceName*: array[LF_FACESIZE, WCHAR]
  PLOGFONTW* = ptr LOGFONTW
  NPLOGFONTW* = ptr LOGFONTW
  LPLOGFONTW* = ptr LOGFONTW
  EXTLOGFONTA* {.final, pure.} = object
    elfLogFont*: LOGFONTA
    elfFullName*: array[LF_FULLFACESIZE, BYTE]
    elfStyle*: array[LF_FACESIZE, BYTE]
    elfVersion*: DWORD
    elfStyleSize*: DWORD
    elfMatch*: DWORD
    elfReserved*: DWORD
    elfVendorId*: array[ELF_VENDOR_SIZE, BYTE]
    elfCulture*: DWORD
    elfPanose*: PANOSE
  PEXTLOGFONTA* = ptr EXTLOGFONTA
  NPEXTLOGFONTA* = ptr EXTLOGFONTA
  LPEXTLOGFONTA* = ptr EXTLOGFONTA
  EXTLOGFONTW* {.final, pure.} = object
    elfLogFont*: LOGFONTW
    elfFullName*: array[LF_FULLFACESIZE, WCHAR]
    elfStyle*: array[LF_FACESIZE, WCHAR]
    elfVersion*: DWORD
    elfStyleSize*: DWORD
    elfMatch*: DWORD
    elfReserved*: DWORD
    elfVendorId*: array[ELF_VENDOR_SIZE, BYTE]
    elfCulture*: DWORD
    elfPanose*: PANOSE
  PEXTLOGFONTW* = ptr EXTLOGFONTW
  NPEXTLOGFONTW* = ptr EXTLOGFONTW
  LPEXTLOGFONTW* = ptr EXTLOGFONTW
  LOGPEN* {.final, pure.} = object
    lopnStyle*: UINT
    lopnWidth*: POINT
    lopnColor*: COLORREF
  PLOGPEN* = ptr LOGPEN
  NPLOGPEN* = ptr LOGPEN
  LPLOGPEN* = ptr LOGPEN
  EMR* {.final, pure.} = object
    iType*: DWORD
    nSize*: DWORD
  PEMR* = ptr EMR
  EMRANGLEARC* {.final, pure.} = object
    emr*: EMR
    ptlCenter*: POINTL
    nRadius*: DWORD
    eStartAngle*: FLOAT
    eSweepAngle*: FLOAT
  PEMRANGLEARC* = ptr EMRANGLEARC
  EMRARC* {.final, pure.} = object
    emr*: EMR
    rclBox*: RECTL
    ptlStart*: POINTL
    ptlEnd*: POINTL
  PEMRARC* = ptr EMRARC
  EMRARCTO* = EMRARC
  PEMRARCTO* = ptr EMRARCTO
  EMRCHORD* = EMRARC
  PEMRCHORD* = ptr EMRCHORD
  EMRPIE* = EMRARC
  PEMRPIE* = ptr EMRPIE
  XFORM* {.final, pure.} = object
    eM11*: FLOAT
    eM12*: FLOAT
    eM21*: FLOAT
    eM22*: FLOAT
    eDx*: FLOAT
    eDy*: FLOAT
  PXFORM* = ptr XFORM
  LPXFORM* = ptr XFORM
  EMRBITBLT* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    xDest*: LONG
    yDest*: LONG
    cxDest*: LONG
    cyDest*: LONG
    dwRop*: DWORD
    xSrc*: LONG
    ySrc*: LONG
    xformSrc*: XFORM
    crBkColorSrc*: COLORREF
    iUsageSrc*: DWORD
    offBmiSrc*: DWORD
    cbBmiSrc*: DWORD
    offBitsSrc*: DWORD
    cbBitsSrc*: DWORD
  PEMRBITBLT* = ptr EMRBITBLT
  LOGBRUSH* {.final, pure.} = object
    lbStyle*: UINT
    lbColor*: COLORREF
    lbHatch*: LONG
  PATTERN* = LOGBRUSH
  PLOGBRUSH* = ptr LOGBRUSH
  NPLOGBRUSH* = ptr LOGBRUSH
  LPLOGBRUSH* = ptr LOGBRUSH
  PPATTERN* = ptr PATTERN
  NPPATTERN* = ptr PATTERN
  LPPATTERN* = ptr PATTERN
  LOGBRUSH32* {.final, pure.} = object
    lbStyle*: UINT
    lbColor*: COLORREF
    lbHatch*: ULONG
  PLOGBRUSH32* = ptr LOGBRUSH32
  NPLOGBRUSH32* = ptr LOGBRUSH32
  LPLOGBRUSH32* = ptr LOGBRUSH32
  EMRCREATEBRUSHINDIRECT* {.final, pure.} = object
    emr*: EMR
    ihBrush*: DWORD
    lb*: LOGBRUSH32
  PEMRCREATEBRUSHINDIRECT* = ptr EMRCREATEBRUSHINDIRECT
  LOGCOLORSPACEA* {.final, pure.} = object
    lcsSignature*: DWORD
    lcsVersion*: DWORD
    lcsSize*: DWORD
    lcsCSType*: LCSCSTYPE
    lcsIntent*: LCSGAMUTMATCH
    lcsEndpoints*: CIEXYZTRIPLE
    lcsGammaRed*: DWORD
    lcsGammaGreen*: DWORD
    lcsGammaBlue*: DWORD
    lcsFilename*: array[MAX_PATH, CHAR]
  LPLOGCOLORSPACEA* = ptr LOGCOLORSPACEA
  LOGCOLORSPACEW* {.final, pure.} = object
    lcsSignature*: DWORD
    lcsVersion*: DWORD
    lcsSize*: DWORD
    lcsCSType*: LCSCSTYPE
    lcsIntent*: LCSGAMUTMATCH
    lcsEndpoints*: CIEXYZTRIPLE
    lcsGammaRed*: DWORD
    lcsGammaGreen*: DWORD
    lcsGammaBlue*: DWORD
    lcsFilename*: array[MAX_PATH, WCHAR]
  LPLOGCOLORSPACEW* = ptr LOGCOLORSPACEW
  COLOR16* = USHORT
  TRIVERTEX* {.final, pure.} = object
    x*: LONG
    y*: LONG
    Red*: COLOR16
    Green*: COLOR16
    Blue*: COLOR16
    Alpha*: COLOR16
  PTRIVERTEX* = ptr TRIVERTEX
  LPTRIVERTEX* = ptr TRIVERTEX
  EMRGLSRECORD* {.final, pure.} = object
    emr*: EMR
    cbData*: DWORD
    Data*: array[1, BYTE]
  PEMRGLSRECORD* = ptr EMRGLSRECORD
  EMRGLSBOUNDEDRECORD* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    cbData*: DWORD
    Data*: array[1, BYTE]
  PEMRGLSBOUNDEDRECORD* = ptr EMRGLSBOUNDEDRECORD

when not defined(winansi):
  type
    LOGCOLORSPACE* = LOGCOLORSPACEW
else:
  type
    LOGCOLORSPACE* = LOGCOLORSPACEA

type
  EMRPIXELFORMAT* {.final, pure.} = object
    emr*: EMR
    pfd*: PIXELFORMATDESCRIPTOR
  PEMRPIXELFORMAT* = ptr EMRPIXELFORMAT
  EMRCREATECOLORSPACE* {.final, pure.} = object
    emr*: EMR
    ihCS*: DWORD
    lcs*: LOGCOLORSPACE
  PEMRCREATECOLORSPACE* = ptr EMRCREATECOLORSPACE
  EMRSETCOLORSPACE* {.final, pure.} = object
    emr*: EMR
    ihCS*: DWORD
  PEMRSETCOLORSPACE* = ptr EMRSETCOLORSPACE
  EMRSELECTCOLORSPACE* = EMRSETCOLORSPACE
  PEMRSELECTCOLORSPACE* = ptr EMRSELECTCOLORSPACE
  EMRDELETECOLORSPACE* = EMRSETCOLORSPACE
  PEMRDELETECOLORSPACE* = ptr EMRDELETECOLORSPACE
  EMREXTESCAPE* {.final, pure.} = object
    emr*: EMR
    iEscape*: INT
    cbEscData*: INT
    EscData*: array[1, BYTE]
  PEMREXTESCAPE* = ptr EMREXTESCAPE
  EMRDRAWESCAPE* = EMREXTESCAPE
  PEMRDRAWESCAPE* = ptr EMRDRAWESCAPE
  EMRNAMEDESCAPE* {.final, pure.} = object
    emr*: EMR
    iEscape*: INT
    cbDriver*: INT
    cbEscData*: INT
    EscData*: array[1, BYTE]
  PEMRNAMEDESCAPE* = ptr EMRNAMEDESCAPE
  EMRSETICMPROFILE* {.final, pure.} = object
    emr*: EMR
    dwFlags*: DWORD
    cbName*: DWORD
    cbData*: DWORD
    Data*: array[1, BYTE]
  PEMRSETICMPROFILE* = ptr EMRSETICMPROFILE
  EMRSETICMPROFILEA* = EMRSETICMPROFILE
  PEMRSETICMPROFILEA* = ptr EMRSETICMPROFILEA
  EMRSETICMPROFILEW* = EMRSETICMPROFILE
  PEMRSETICMPROFILEW* = ptr EMRSETICMPROFILEW
  EMRCREATECOLORSPACEW* {.final, pure.} = object
    emr*: EMR
    ihCS*: DWORD
    lcs*: LOGCOLORSPACEW
    dwFlags*: DWORD
    cbData*: DWORD
    Data*: array[1, BYTE]
  PEMRCREATECOLORSPACEW* = ptr EMRCREATECOLORSPACEW
  EMRCOLORMATCHTOTARGET* {.final, pure.} = object
    emr*: EMR
    dwAction*: DWORD
    dwFlags*: DWORD
    cbName*: DWORD
    cbData*: DWORD
    Data*: array[1, BYTE]
  PEMRCOLORMATCHTOTARGET* = ptr EMRCOLORMATCHTOTARGET
  EMRCOLORCORRECTPALETTE* {.final, pure.} = object
    emr*: EMR
    ihPalette*: DWORD
    nFirstEntry*: DWORD
    nPalEntries*: DWORD
    nReserved*: DWORD
  PEMRCOLORCORRECTPALETTE* = ptr EMRCOLORCORRECTPALETTE
  EMRALPHABLEND* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    xDest*: LONG
    yDest*: LONG
    cxDest*: LONG
    cyDest*: LONG
    dwRop*: DWORD
    xSrc*: LONG
    ySrc*: LONG
    xformSrc*: XFORM
    crBkColorSrc*: COLORREF
    iUsageSrc*: DWORD
    offBmiSrc*: DWORD
    cbBmiSrc*: DWORD
    offBitsSrc*: DWORD
    cbBitsSrc*: DWORD
    cxSrc*: LONG
    cySrc*: LONG
  PEMRALPHABLEND* = ptr EMRALPHABLEND
  EMRGRADIENTFILL* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    nVer*: DWORD
    nTri*: DWORD
    ulMode*: ULONG
    Ver*: array[1, TRIVERTEX]
  PEMRGRADIENTFILL* = ptr EMRGRADIENTFILL
  EMRTRANSPARENTBLT* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    xDest*: LONG
    yDest*: LONG
    cxDest*: LONG
    cyDest*: LONG
    dwRop*: DWORD
    xSrc*: LONG
    ySrc*: LONG
    xformSrc*: XFORM
    crBkColorSrc*: COLORREF
    iUsageSrc*: DWORD
    offBmiSrc*: DWORD
    cbBmiSrc*: DWORD
    offBitsSrc*: DWORD
    cbBitsSrc*: DWORD
    cxSrc*: LONG
    cySrc*: LONG
  PEMRTRANSPARENTBLT* = ptr EMRTRANSPARENTBLT
  EMRCREATEDIBPATTERNBRUSHPT* {.final, pure.} = object
    emr*: EMR
    ihBrush*: DWORD
    iUsage*: DWORD
    offBmi*: DWORD
    cbBmi*: DWORD
    offBits*: DWORD
    cbBits*: DWORD
  PEMRCREATEDIBPATTERNBRUSHPT* = ptr EMRCREATEDIBPATTERNBRUSHPT
  EMRCREATEMONOBRUSH* {.final, pure.} = object
    emr*: EMR
    ihBrush*: DWORD
    iUsage*: DWORD
    offBmi*: DWORD
    cbBmi*: DWORD
    offBits*: DWORD
    cbBits*: DWORD
  PEMRCREATEMONOBRUSH* = ptr EMRCREATEMONOBRUSH
  PALETTEENTRY* {.final, pure.} = object
    peRed*: BYTE
    peGreen*: BYTE
    peBlue*: BYTE
    peFlags*: BYTE
  PPALETTEENTRY* = ptr PALETTEENTRY
  LPPALETTEENTRY* = ptr PALETTEENTRY
  LOGPALETTE* {.final, pure.} = object
    palVersion*: WORD
    palNumEntries*: WORD
    palPalEntry*: array[1, PALETTEENTRY]
  PLOGPALETTE* = ptr LOGPALETTE
  NPLOGPALETTE* = ptr LOGPALETTE
  LPLOGPALETTE* = ptr LOGPALETTE
  EMRCREATEPALETTE* {.final, pure.} = object
    emr*: EMR
    ihPal*: DWORD
    lgpl*: LOGPALETTE
  PEMRCREATEPALETTE* = ptr EMRCREATEPALETTE
  EMRCREATEPEN* {.final, pure.} = object
    emr*: EMR
    ihPen*: DWORD
    lopn*: LOGPEN
  PEMRCREATEPEN* = ptr EMRCREATEPEN
  EMRELLIPSE* {.final, pure.} = object
    emr*: EMR
    rclBox*: RECTL
  PEMRELLIPSE* = ptr EMRELLIPSE
  EMRRECTANGLE* = EMRELLIPSE
  PEMRRECTANGLE* = ptr EMRRECTANGLE
  EMREOF* {.final, pure.} = object
    emr*: EMR
    nPalEntries*: DWORD
    offPalEntries*: DWORD
    nSizeLast*: DWORD
  PEMREOF* = ptr EMREOF
  EMREXCLUDECLIPRECT* {.final, pure.} = object
    emr*: EMR
    rclClip*: RECTL
  PEMREXCLUDECLIPRECT* = ptr EMREXCLUDECLIPRECT
  EMRINTERSECTCLIPRECT* = EMREXCLUDECLIPRECT
  PEMRINTERSECTCLIPRECT* = ptr EMRINTERSECTCLIPRECT
  EMREXTCREATEFONTINDIRECTW* {.final, pure.} = object
    emr*: EMR
    ihFont*: DWORD
    elfw*: EXTLOGFONTW
  PEMREXTCREATEFONTINDIRECTW* = ptr EMREXTCREATEFONTINDIRECTW
  EXTLOGPEN* {.final, pure.} = object
    elpPenStyle*: UINT
    elpWidth*: UINT
    elpBrushStyle*: UINT
    elpColor*: COLORREF
    elpHatch*: LONG
    elpNumEntries*: DWORD
    elpStyleEntry*: array[1, DWORD]
  PEXTLOGPEN* = ptr EXTLOGPEN
  NPEXTLOGPEN* = ptr EXTLOGPEN
  LPEXTLOGPEN* = ptr EXTLOGPEN
  EMREXTCREATEPEN* {.final, pure.} = object
    emr*: EMR
    ihPen*: DWORD
    offBmi*: DWORD
    cbBmi*: DWORD
    offBits*: DWORD
    cbBits*: DWORD
    elp*: EXTLOGPEN
  PEMREXTCREATEPEN* = ptr EMREXTCREATEPEN
  EMREXTFLOODFILL* {.final, pure.} = object
    emr*: EMR
    ptlStart*: POINTL
    crColor*: COLORREF
    iMode*: DWORD
  PEMREXTFLOODFILL* = ptr EMREXTFLOODFILL
  EMREXTSELECTCLIPRGN* {.final, pure.} = object
    emr*: EMR
    cbRgnData*: DWORD
    iMode*: DWORD
    RgnData*: array[1, BYTE]
  PEMREXTSELECTCLIPRGN* = ptr EMREXTSELECTCLIPRGN
  EMRTEXT* {.final, pure.} = object
    ptlReference*: POINTL
    nChars*: DWORD
    offString*: DWORD
    fOptions*: DWORD
    rcl*: RECTL
    offDx*: DWORD
  PEMRTEXT* = ptr EMRTEXT
  EMREXTTEXTOUTA* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    iGraphicsMode*: DWORD
    exScale*: FLOAT
    eyScale*: FLOAT
    emrtext*: EMRTEXT
  PEMREXTTEXTOUTA* = ptr EMREXTTEXTOUTA
  EMREXTTEXTOUTW* = EMREXTTEXTOUTA
  PEMREXTTEXTOUTW* = ptr EMREXTTEXTOUTW
  EMRFILLPATH* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
  PEMRFILLPATH* = ptr EMRFILLPATH
  EMRSTROKEANDFILLPATH* = EMRFILLPATH
  PEMRSTROKEANDFILLPATH* = ptr EMRSTROKEANDFILLPATH
  EMRSTROKEPATH* = EMRFILLPATH
  PEMRSTROKEPATH* = ptr EMRSTROKEPATH
  EMRFILLRGN* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    cbRgnData*: DWORD
    ihBrush*: DWORD
    RgnData*: array[1, BYTE]
  PEMRFILLRGN* = ptr EMRFILLRGN
  EMRFORMAT* {.final, pure.} = object
    dSignature*: DWORD
    nVersion*: DWORD
    cbData*: DWORD
    offData*: DWORD
  PEMRFORMAT* = ptr EMRFORMAT
  EMRFRAMERGN* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    cbRgnData*: DWORD
    ihBrush*: DWORD
    szlStroke*: SIZEL
    RgnData*: array[1, BYTE]
  PEMRFRAMERGN* = ptr EMRFRAMERGN
  EMRGDICOMMENT* {.final, pure.} = object
    emr*: EMR
    cbData*: DWORD
    Data*: array[1, BYTE]
  PEMRGDICOMMENT* = ptr EMRGDICOMMENT
  EMRINVERTRGN* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    cbRgnData*: DWORD
    RgnData*: array[1, BYTE]
  PEMRINVERTRGN* = ptr EMRINVERTRGN
  EMRPAINTRGN* = EMRINVERTRGN
  PEMRPAINTRGN* = ptr EMRPAINTRGN
  EMRLINETO* {.final, pure.} = object
    emr*: EMR
    ptl*: POINTL
  PEMRLINETO* = ptr EMRLINETO
  EMRMOVETOEX* = EMRLINETO
  PEMRMOVETOEX* = ptr EMRMOVETOEX
  EMRMASKBLT* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    xDest*: LONG
    yDest*: LONG
    cxDest*: LONG
    cyDest*: LONG
    dwRop*: DWORD
    xSrc*: LONG
    ySrc*: LONG
    xformSrc*: XFORM
    crBkColorSrc*: COLORREF
    iUsageSrc*: DWORD
    offBmiSrc*: DWORD
    cbBmiSrc*: DWORD
    offBitsSrc*: DWORD
    cbBitsSrc*: DWORD
    xMask*: LONG
    yMask*: LONG
    iUsageMask*: DWORD
    offBmiMask*: DWORD
    cbBmiMask*: DWORD
    offBitsMask*: DWORD
    cbBitsMask*: DWORD
  PEMRMASKBLT* = ptr EMRMASKBLT
  EMRMODIFYWORLDTRANSFORM* {.final, pure.} = object
    emr*: EMR
    xform*: XFORM
    iMode*: DWORD
  PEMRMODIFYWORLDTRANSFORM* = ptr EMRMODIFYWORLDTRANSFORM
  EMROFFSETCLIPRGN* {.final, pure.} = object
    emr*: EMR
    ptlOffset*: POINTL
  PEMROFFSETCLIPRGN* = ptr EMROFFSETCLIPRGN
  EMRPLGBLT* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    aptlDest*: array[3, POINTL]
    xSrc*: LONG
    ySrc*: LONG
    cxSrc*: LONG
    cySrc*: LONG
    xformSrc*: XFORM
    crBkColorSrc*: COLORREF
    iUsageSrc*: DWORD
    offBmiSrc*: DWORD
    cbBmiSrc*: DWORD
    offBitsSrc*: DWORD
    cbBitsSrc*: DWORD
    xMask*: LONG
    yMask*: LONG
    iUsageMask*: DWORD
    offBmiMask*: DWORD
    cbBmiMask*: DWORD
    offBitsMask*: DWORD
    cbBitsMask*: DWORD
  PEMRPLGBLT* = ptr EMRPLGBLT
  EMRPOLYDRAW* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    cptl*: DWORD
    aptl*: array[1, POINTL]
    abTypes*: array[1, BYTE]
  PEMRPOLYDRAW* = ptr EMRPOLYDRAW
  EMRPOLYDRAW16* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    cpts*: DWORD
    apts*: array[1, POINTS]
    abTypes*: array[1, BYTE]
  PEMRPOLYDRAW16* = ptr EMRPOLYDRAW16
  EMRPOLYLINE* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    cptl*: DWORD
    aptl*: array[1, POINTL]
  PEMRPOLYLINE* = ptr EMRPOLYLINE
  EMRPOLYBEZIER* = EMRPOLYLINE
  PEMRPOLYBEZIER* = ptr EMRPOLYBEZIER
  EMRPOLYGON* = EMRPOLYLINE
  PEMRPOLYGON* = ptr EMRPOLYGON
  EMRPOLYBEZIERTO* = EMRPOLYLINE
  PEMRPOLYBEZIERTO* = ptr EMRPOLYBEZIERTO
  EMRPOLYLINETO* = EMRPOLYLINE
  PEMRPOLYLINETO* = ptr EMRPOLYLINETO
  EMRPOLYLINE16* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    cpts*: DWORD
    apts*: array[1, POINTS]
  PEMRPOLYLINE16* = ptr EMRPOLYLINE16
  EMRPOLYBEZIER16* = EMRPOLYLINE16
  PEMRPOLYBEZIER16* = ptr EMRPOLYBEZIER16
  EMRPOLYGON16* = EMRPOLYLINE16
  PEMRPOLYGON16* = ptr EMRPOLYGON16
  EMRPOLYBEZIERTO16* = EMRPOLYLINE16
  PEMRPOLYBEZIERTO16* = ptr EMRPOLYBEZIERTO16
  EMRPOLYLINETO16* = EMRPOLYLINE16
  PEMRPOLYLINETO16* = ptr EMRPOLYLINETO16
  EMRPOLYPOLYLINE* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    nPolys*: DWORD
    cptl*: DWORD
    aPolyCounts*: array[1, DWORD]
    aptl*: array[1, POINTL]
  PEMRPOLYPOLYLINE* = ptr EMRPOLYPOLYLINE
  EMRPOLYPOLYGON* = EMRPOLYPOLYLINE
  PEMRPOLYPOLYGON* = ptr EMRPOLYPOLYGON
  EMRPOLYPOLYLINE16* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    nPolys*: DWORD
    cpts*: DWORD
    aPolyCounts*: array[1, DWORD]
    apts*: array[1, POINTS]
  PEMRPOLYPOLYLINE16* = ptr EMRPOLYPOLYLINE16
  EMRPOLYPOLYGON16* = EMRPOLYPOLYLINE16
  PEMRPOLYPOLYGON16* = ptr EMRPOLYPOLYGON16
  EMRPOLYTEXTOUTA* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    iGraphicsMode*: DWORD
    exScale*: FLOAT
    eyScale*: FLOAT
    cStrings*: LONG
    aemrtext*: array[1, EMRTEXT]
  PEMRPOLYTEXTOUTA* = ptr EMRPOLYTEXTOUTA
  EMRPOLYTEXTOUTW* = EMRPOLYTEXTOUTA
  PEMRPOLYTEXTOUTW* = ptr EMRPOLYTEXTOUTW
  EMRRESIZEPALETTE* {.final, pure.} = object
    emr*: EMR
    ihPal*: DWORD
    cEntries*: DWORD
  PEMRRESIZEPALETTE* = ptr EMRRESIZEPALETTE
  EMRRESTOREDC* {.final, pure.} = object
    emr*: EMR
    iRelative*: LONG
  PEMRRESTOREDC* = ptr EMRRESTOREDC
  EMRROUNDRECT* {.final, pure.} = object
    emr*: EMR
    rclBox*: RECTL
    szlCorner*: SIZEL
  PEMRROUNDRECT* = ptr EMRROUNDRECT
  EMRSCALEVIEWPORTEXTEX* {.final, pure.} = object
    emr*: EMR
    xNum*: LONG
    xDenom*: LONG
    yNum*: LONG
    yDenom*: LONG
  PEMRSCALEVIEWPORTEXTEX* = ptr EMRSCALEVIEWPORTEXTEX
  EMRSCALEWINDOWEXTEX* = EMRSCALEVIEWPORTEXTEX
  PEMRSCALEWINDOWEXTEX* = ptr EMRSCALEWINDOWEXTEX
  EMRSELECTOBJECT* {.final, pure.} = object
    emr*: EMR
    ihObject*: DWORD
  PEMRSELECTOBJECT* = ptr EMRSELECTOBJECT
  EMRDELETEOBJECT* = EMRSELECTOBJECT
  PEMRDELETEOBJECT* = ptr EMRDELETEOBJECT
  EMRSELECTPALETTE* {.final, pure.} = object
    emr*: EMR
    ihPal*: DWORD
  PEMRSELECTPALETTE* = ptr EMRSELECTPALETTE
  EMRSETARCDIRECTION* {.final, pure.} = object
    emr*: EMR
    iArcDirection*: DWORD
  PEMRSETARCDIRECTION* = ptr EMRSETARCDIRECTION
  EMRSETTEXTCOLOR* {.final, pure.} = object
    emr*: EMR
    crColor*: COLORREF
  PEMRSETTEXTCOLOR* = ptr EMRSETTEXTCOLOR
  EMRSETBKCOLOR* = EMRSETTEXTCOLOR
  PEMRSETBKCOLOR* = ptr EMRSETBKCOLOR
  EMRSETCOLORADJUSTMENT* {.final, pure.} = object
    emr*: EMR
    ColorAdjustment*: COLORADJUSTMENT
  PEMRSETCOLORADJUSTMENT* = ptr EMRSETCOLORADJUSTMENT
  EMRSETDIBITSTODEVICE* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    xDest*: LONG
    yDest*: LONG
    xSrc*: LONG
    ySrc*: LONG
    cxSrc*: LONG
    cySrc*: LONG
    offBmiSrc*: DWORD
    cbBmiSrc*: DWORD
    offBitsSrc*: DWORD
    cbBitsSrc*: DWORD
    iUsageSrc*: DWORD
    iStartScan*: DWORD
    cScans*: DWORD
  PEMRSETDIBITSTODEVICE* = ptr EMRSETDIBITSTODEVICE
  EMRSETMAPPERFLAGS* {.final, pure.} = object
    emr*: EMR
    dwFlags*: DWORD
  PEMRSETMAPPERFLAGS* = ptr EMRSETMAPPERFLAGS
  EMRSETMITERLIMIT* {.final, pure.} = object
    emr*: EMR
    eMiterLimit*: FLOAT
  PEMRSETMITERLIMIT* = ptr EMRSETMITERLIMIT
  EMRSETPALETTEENTRIES* {.final, pure.} = object
    emr*: EMR
    ihPal*: DWORD
    iStart*: DWORD
    cEntries*: DWORD
    aPalEntries*: array[1, PALETTEENTRY]
  PEMRSETPALETTEENTRIES* = ptr EMRSETPALETTEENTRIES
  EMRSETPIXELV* {.final, pure.} = object
    emr*: EMR
    ptlPixel*: POINTL
    crColor*: COLORREF
  PEMRSETPIXELV* = ptr EMRSETPIXELV
  EMRSETVIEWPORTEXTEX* {.final, pure.} = object
    emr*: EMR
    szlExtent*: SIZEL
  PEMRSETVIEWPORTEXTEX* = ptr EMRSETVIEWPORTEXTEX
  EMRSETWINDOWEXTEX* = EMRSETVIEWPORTEXTEX
  PEMRSETWINDOWEXTEX* = ptr EMRSETWINDOWEXTEX
  EMRSETVIEWPORTORGEX* {.final, pure.} = object
    emr*: EMR
    ptlOrigin*: POINTL
  PEMRSETVIEWPORTORGEX* = ptr EMRSETVIEWPORTORGEX
  EMRSETWINDOWORGEX* = EMRSETVIEWPORTORGEX
  PEMRSETWINDOWORGEX* = ptr EMRSETWINDOWORGEX
  EMRSETBRUSHORGEX* = EMRSETVIEWPORTORGEX
  PEMRSETBRUSHORGEX* = ptr EMRSETBRUSHORGEX
  EMRSETWORLDTRANSFORM* {.final, pure.} = object
    emr*: EMR
    xform*: XFORM
  PEMRSETWORLDTRANSFORM* = ptr EMRSETWORLDTRANSFORM
  EMRSTRETCHBLT* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    xDest*: LONG
    yDest*: LONG
    cxDest*: LONG
    cyDest*: LONG
    dwRop*: DWORD
    xSrc*: LONG
    ySrc*: LONG
    xformSrc*: XFORM
    crBkColorSrc*: COLORREF
    iUsageSrc*: DWORD
    offBmiSrc*: DWORD
    cbBmiSrc*: DWORD
    offBitsSrc*: DWORD
    cbBitsSrc*: DWORD
    cxSrc*: LONG
    cySrc*: LONG
  PEMRSTRETCHBLT* = ptr EMRSTRETCHBLT
  EMRSTRETCHDIBITS* {.final, pure.} = object
    emr*: EMR
    rclBounds*: RECTL
    xDest*: LONG
    yDest*: LONG
    xSrc*: LONG
    ySrc*: LONG
    cxSrc*: LONG
    cySrc*: LONG
    offBmiSrc*: DWORD
    cbBmiSrc*: DWORD
    offBitsSrc*: DWORD
    cbBitsSrc*: DWORD
    iUsageSrc*: DWORD
    dwRop*: DWORD
    cxDest*: LONG
    cyDest*: LONG
  PEMRSTRETCHDIBITS* = ptr EMRSTRETCHDIBITS
  EMRABORTPATH* {.final, pure.} = object
    emr*: EMR
  PEMRABORTPATH* = ptr EMRABORTPATH
  EMRBEGINPATH* = EMRABORTPATH
  PEMRBEGINPATH* = ptr EMRBEGINPATH
  EMRENDPATH* = EMRABORTPATH
  PEMRENDPATH* = ptr EMRENDPATH
  EMRCLOSEFIGURE* = EMRABORTPATH
  PEMRCLOSEFIGURE* = ptr EMRCLOSEFIGURE
  EMRFLATTENPATH* = EMRABORTPATH
  PEMRFLATTENPATH* = ptr EMRFLATTENPATH
  EMRWIDENPATH* = EMRABORTPATH
  PEMRWIDENPATH* = ptr EMRWIDENPATH
  EMRSETMETARGN* = EMRABORTPATH
  PEMRSETMETARGN* = ptr EMRSETMETARGN
  EMRSAVEDC* = EMRABORTPATH
  PEMRSAVEDC* = ptr EMRSAVEDC
  EMRREALIZEPALETTE* = EMRABORTPATH
  PEMRREALIZEPALETTE* = ptr EMRREALIZEPALETTE
  EMRSELECTCLIPPATH* {.final, pure.} = object
    emr*: EMR
    iMode*: DWORD
  PEMRSELECTCLIPPATH* = ptr EMRSELECTCLIPPATH
  EMRSETBKMODE* = EMRSELECTCLIPPATH
  PEMRSETBKMODE* = ptr EMRSETBKMODE
  EMRSETMAPMODE* = EMRSELECTCLIPPATH
  PEMRSETMAPMODE* = ptr EMRSETMAPMODE
  EMRSETPOLYFILLMODE* = EMRSELECTCLIPPATH
  PEMRSETPOLYFILLMODE* = ptr EMRSETPOLYFILLMODE
  EMRSETROP2* = EMRSELECTCLIPPATH
  PEMRSETROP2* = ptr EMRSETROP2
  EMRSETSTRETCHBLTMODE* = EMRSELECTCLIPPATH
  PEMRSETSTRETCHBLTMODE* = ptr EMRSETSTRETCHBLTMODE
  EMRSETICMMODE* = EMRSELECTCLIPPATH
  PEMRSETICMMODE* = ptr EMRSETICMMODE
  EMRSETTEXTALIGN* = EMRSELECTCLIPPATH
  PEMRSETTEXTALIGN* = ptr EMRSETTEXTALIGN
  EMRENABLEICM* = EMRSELECTCLIPPATH
  PEMRENABLEICM* = ptr EMRENABLEICM
  EMRSETLAYOUT* = EMRSELECTCLIPPATH
  PEMRSETLAYOUT* = ptr EMRSETLAYOUT
  METAHEADER* {.final, pure.} = object
    mtType*: WORD
    mtHeaderSize*: WORD
    mtVersion*: WORD
    mtSize*: DWORD
    mtNoObjects*: WORD
    mtMaxRecord*: DWORD
    mtNoParameters*: WORD
  PMETAHEADER* = ptr METAHEADER
  LPMETAHEADER* = ptr METAHEADER
  ENHMETAHEADER* {.final, pure.} = object
    iType*: DWORD
    nSize*: DWORD
    rclBounds*: RECTL
    rclFrame*: RECTL
    dSignature*: DWORD
    nVersion*: DWORD
    nBytes*: DWORD
    nRecords*: DWORD
    nHandles*: WORD
    sReserved*: WORD
    nDescription*: DWORD
    offDescription*: DWORD
    nPalEntries*: DWORD
    szlDevice*: SIZEL
    szlMillimeters*: SIZEL
    cbPixelFormat*: DWORD
    offPixelFormat*: DWORD
    bOpenGL*: DWORD
    szlMicrometers*: SIZEL
  PENHMETAHEADER* = ptr ENHMETAHEADER
  LPENHMETAHEADER* = ptr ENHMETAHEADER
  METARECORD* {.final, pure.} = object
    rdSize*: DWORD
    rdFunction*: WORD
    rdParm*: array[1, WORD]
  PMETARECORD* = ptr METARECORD
  LPMETARECORD* = ptr METARECORD
  ENHMETARECORD* {.final, pure.} = object
    iType*: DWORD
    nSize*: DWORD
    dParm*: array[1, DWORD]
  PENHMETARECORD* = ptr ENHMETARECORD
  LPENHMETARECORD* = ptr ENHMETARECORD
  HANDLETABLE* {.final, pure.} = object
    objectHandle*: array[1, HGDIOBJ]
  PHANDLETABLE* = ptr HANDLETABLE
  LPHANDLETABLE* = ptr HANDLETABLE
  TEXTMETRICA* {.final, pure.} = object
    tmHeight*: LONG
    tmAscent*: LONG
    tmDescent*: LONG
    tmInternalLeading*: LONG
    tmExternalLeading*: LONG
    tmAveCharWidth*: LONG
    tmMaxCharWidth*: LONG
    tmWeight*: LONG
    tmOverhang*: LONG
    tmDigitizedAspectX*: LONG
    tmDigitizedAspectY*: LONG
    tmFirstChar*: BYTE
    tmLastChar*: BYTE
    tmDefaultChar*: BYTE
    tmBreakChar*: BYTE
    tmItalic*: BYTE
    tmUnderlined*: BYTE
    tmStruckOut*: BYTE
    tmPitchAndFamily*: BYTE
    tmCharSet*: BYTE
  PTEXTMETRICA* = ptr TEXTMETRICA
  NPTEXTMETRICA* = ptr TEXTMETRICA
  LPTEXTMETRICA* = ptr TEXTMETRICA
  TEXTMETRICW* {.final, pure.} = object
    tmHeight*: LONG
    tmAscent*: LONG
    tmDescent*: LONG
    tmInternalLeading*: LONG
    tmExternalLeading*: LONG
    tmAveCharWidth*: LONG
    tmMaxCharWidth*: LONG
    tmWeight*: LONG
    tmOverhang*: LONG
    tmDigitizedAspectX*: LONG
    tmDigitizedAspectY*: LONG
    tmFirstChar*: WCHAR
    tmLastChar*: WCHAR
    tmDefaultChar*: WCHAR
    tmBreakChar*: WCHAR
    tmItalic*: BYTE
    tmUnderlined*: BYTE
    tmStruckOut*: BYTE
    tmPitchAndFamily*: BYTE
    tmCharSet*: BYTE
  PTEXTMETRICW* = ptr TEXTMETRICW
  NPTEXTMETRICW* = ptr TEXTMETRICW
  LPTEXTMETRICW* = ptr TEXTMETRICW
  RGNDATAHEADER* {.final, pure.} = object
    dwSize*: DWORD
    iType*: DWORD
    nCount*: DWORD
    nRgnSize*: DWORD
    rcBound*: RECT
  PRGNDATAHEADER* = ptr RGNDATAHEADER
  RGNDATA* {.final, pure.} = object
    rdh*: RGNDATAHEADER
    Buffer*: array[1, char]
  PRGNDATA* = ptr RGNDATA
  NPRGNDATA* = ptr RGNDATA
  LPRGNDATA* = ptr RGNDATA
  PIXELFORMATDESCRIPTOR* {.final, pure.} = object
    nSize*: WORD
    nVersion*: WORD
    dwFlags*: DWORD
    iPixelType*: BYTE
    cColorBits*: BYTE
    cRedBits*: BYTE
    cRedShift*: BYTE
    cGreenBits*: BYTE
    cGreenShift*: BYTE
    cBlueBits*: BYTE
    cBlueShift*: BYTE
    cAlphaBits*: BYTE
    cAlphaShift*: BYTE
    cAccumBits*: BYTE
    cAccumRedBits*: BYTE
    cAccumGreenBits*: BYTE
    cAccumBlueBits*: BYTE
    cAccumAlphaBits*: BYTE
    cDepthBits*: BYTE
    cStencilBits*: BYTE
    cAuxBuffers*: BYTE
    iLayerType*: BYTE
    bReserved*: BYTE
    dwLayerMask*: DWORD
    dwVisibleMask*: DWORD
    dwDamageMask*: DWORD
  PPIXELFORMATDESCRIPTOR* = ptr PIXELFORMATDESCRIPTOR
  LPPIXELFORMATDESCRIPTOR* = ptr PIXELFORMATDESCRIPTOR

const
  SYSRGN* = 4

type
  GCP_RESULTSA* {.final, pure.} = object
    lStructSize*: DWORD
    lpOutString*: LPSTR
    lpOrder*: ptr UINT
    lpDx*: ptr INT
    lpCaretPos*: ptr INT
    lpClass*: LPSTR
    lpGlyphs*: LPWSTR
    nGlyphs*: UINT
    nMaxFit*: UINT
  LPGCP_RESULTSA* = ptr GCP_RESULTSA
  GCP_RESULTSW* {.final, pure.} = object
    lStructSize*: DWORD
    lpOutString*: LPWSTR
    lpOrder*: ptr UINT
    lpDx*: ptr INT
    lpCaretPos*: ptr INT
    lpClass*: LPWSTR
    lpGlyphs*: LPWSTR
    nGlyphs*: UINT
    nMaxFit*: UINT
  LPGCP_RESULTSW* = ptr GCP_RESULTSW
  GLYPHMETRICS* {.final, pure.} = object
    gmBlackBoxX*: UINT
    gmBlackBoxY*: UINT
    gmptGlyphOrigin*: POINT
    gmCellIncX*: int16
    gmCellIncY*: int16
  LPGLYPHMETRICS* = ptr GLYPHMETRICS

type
  WCRANGE* {.final, pure.} = object
    wcLow*: WCHAR
    cGlyphs*: USHORT
  PWCRANGE* = ptr WCRANGE
  LPWCRANGE* = ptr WCRANGE
  GLYPHSET* {.final, pure.} = object
    cbThis*: DWORD
    flAccel*: DWORD
    cGlyphsSupported*: DWORD
    cRanges*: DWORD
    ranges*: array[1, WCRANGE]
  PGLYPHSET* = ptr GLYPHSET
  LPGLYPHSET* = ptr GLYPHSET

const
  GS_8BIT_INDICES* = 0x00000001

type
  KERNINGPAIR* {.final, pure.} = object
    wFirst*: WORD
    wSecond*: WORD
    iKernAmount*: int32
  LPKERNINGPAIR* = ptr KERNINGPAIR
  FIXED* {.final, pure.} = object
    fract*: WORD
    value*: int16
  MAT2* {.final, pure.} = object
    eM11*: FIXED
    eM12*: FIXED
    eM21*: FIXED
    eM22*: FIXED
  LPMAT2* = ptr MAT2
  OUTLINETEXTMETRICA* {.final, pure.} = object
    otmSize*: UINT
    otmTextMetrics*: TEXTMETRICA
    otmFiller*: BYTE
    otmPanoseNumber*: PANOSE
    otmfsSelection*: UINT
    otmfsType*: UINT
    otmsCharSlopeRise*: int32
    otmsCharSlopeRun*: int32
    otmItalicAngle*: int32
    otmEMSquare*: UINT
    otmAscent*: int32
    otmDescent*: int32
    otmLineGap*: UINT
    otmsCapEmHeight*: UINT
    otmsXHeight*: UINT
    otmrcFontBox*: RECT
    otmMacAscent*: int32
    otmMacDescent*: int32
    otmMacLineGap*: UINT
    otmusMinimumPPEM*: UINT
    otmptSubscriptSize*: POINT
    otmptSubscriptOffset*: POINT
    otmptSuperscriptSize*: POINT
    otmptSuperscriptOffset*: POINT
    otmsStrikeoutSize*: UINT
    otmsStrikeoutPosition*: int32
    otmsUnderscoreSize*: int32
    otmsUnderscorePosition*: int32
    otmpFamilyName*: PSTR
    otmpFaceName*: PSTR
    otmpStyleName*: PSTR
    otmpFullName*: PSTR
  POUTLINETEXTMETRICA* = ptr OUTLINETEXTMETRICA
  NPOUTLINETEXTMETRICA* = ptr OUTLINETEXTMETRICA
  LPOUTLINETEXTMETRICA* = ptr OUTLINETEXTMETRICA
  OUTLINETEXTMETRICW* {.final, pure.} = object
    otmSize*: UINT
    otmTextMetrics*: TEXTMETRICW
    otmFiller*: BYTE
    otmPanoseNumber*: PANOSE
    otmfsSelection*: UINT
    otmfsType*: UINT
    otmsCharSlopeRise*: int32
    otmsCharSlopeRun*: int32
    otmItalicAngle*: int32
    otmEMSquare*: UINT
    otmAscent*: int32
    otmDescent*: int32
    otmLineGap*: UINT
    otmsCapEmHeight*: UINT
    otmsXHeight*: UINT
    otmrcFontBox*: RECT
    otmMacAscent*: int32
    otmMacDescent*: int32
    otmMacLineGap*: UINT
    otmusMinimumPPEM*: UINT
    otmptSubscriptSize*: POINT
    otmptSubscriptOffset*: POINT
    otmptSuperscriptSize*: POINT
    otmptSuperscriptOffset*: POINT
    otmsStrikeoutSize*: UINT
    otmsStrikeoutPosition*: int32
    otmsUnderscoreSize*: int32
    otmsUnderscorePosition*: int32
    otmpFamilyName*: PSTR
    otmpFaceName*: PSTR
    otmpStyleName*: PSTR
    otmpFullName*: PSTR
  POUTLINETEXTMETRICW* = ptr OUTLINETEXTMETRICW
  NPOUTLINETEXTMETRICW* = ptr OUTLINETEXTMETRICW
  LPOUTLINETEXTMETRICW* = ptr OUTLINETEXTMETRICW
  RASTERIZER_STATUS* {.final, pure.} = object
    nSize*: int16
    wFlags*: int16
    nLanguageID*: int16
  LPRASTERIZER_STATUS* = ptr RASTERIZER_STATUS
  POLYTEXTA* {.final, pure.} = object
    x*: int32
    y*: int32
    n*: UINT
    lpstr*: LPCSTR
    uiFlags*: UINT
    rcl*: RECT
    pdx*: ptr int32
  PPOLYTEXTA* = ptr POLYTEXTA
  NPPOLYTEXTA* = ptr POLYTEXTA
  LPPOLYTEXTA* = ptr POLYTEXTA
  POLYTEXTW* {.final, pure.} = object
    x*: int32
    y*: int32
    n*: UINT
    lpstr*: LPCWSTR
    uiFlags*: UINT
    rcl*: RECT
    pdx*: ptr int32
  PPOLYTEXTW* = ptr POLYTEXTW
  NPPOLYTEXTW* = ptr POLYTEXTW
  LPPOLYTEXTW* = ptr POLYTEXTW
  METAFILEPICT* {.final, pure.} = object
    mm*: LONG
    xExt*: LONG
    yExt*: LONG
    hMF*: HMETAFILE
  LPMETAFILEPICT* = ptr METAFILEPICT
  LOCALESIGNATURE* {.final, pure.} = object
    lsUsb*: array[4, DWORD]
    lsCsbDefault*: array[2, DWORD]
    lsCsbSupported*: array[2, DWORD]
  PLOCALESIGNATURE* = ptr LOCALESIGNATURE
  LPLOCALESIGNATURE* = ptr LOCALESIGNATURE
  LCSTYPE* = LONG
  NEWTEXTMETRICA* {.final, pure.} = object
    tmHeight*: LONG
    tmAscent*: LONG
    tmDescent*: LONG
    tmInternalLeading*: LONG
    tmExternalLeading*: LONG
    tmAveCharWidth*: LONG
    tmMaxCharWidth*: LONG
    tmWeight*: LONG
    tmOverhang*: LONG
    tmDigitizedAspectX*: LONG
    tmDigitizedAspectY*: LONG
    tmFirstChar*: BYTE
    tmLastChar*: BYTE
    tmDefaultChar*: BYTE
    tmBreakChar*: BYTE
    tmItalic*: BYTE
    tmUnderlined*: BYTE
    tmStruckOut*: BYTE
    tmPitchAndFamily*: BYTE
    tmCharSet*: BYTE
    ntmFlags*: DWORD
    ntmSizeEM*: UINT
    ntmCellHeight*: UINT
    ntmAvgWidth*: UINT
  PNEWTEXTMETRICA* = ptr NEWTEXTMETRICA
  NPNEWTEXTMETRICA* = ptr NEWTEXTMETRICA
  LPNEWTEXTMETRICA* = ptr NEWTEXTMETRICA
  NEWTEXTMETRICW* {.final, pure.} = object
    tmHeight*: LONG
    tmAscent*: LONG
    tmDescent*: LONG
    tmInternalLeading*: LONG
    tmExternalLeading*: LONG
    tmAveCharWidth*: LONG
    tmMaxCharWidth*: LONG
    tmWeight*: LONG
    tmOverhang*: LONG
    tmDigitizedAspectX*: LONG
    tmDigitizedAspectY*: LONG
    tmFirstChar*: WCHAR
    tmLastChar*: WCHAR
    tmDefaultChar*: WCHAR
    tmBreakChar*: WCHAR
    tmItalic*: BYTE
    tmUnderlined*: BYTE
    tmStruckOut*: BYTE
    tmPitchAndFamily*: BYTE
    tmCharSet*: BYTE
    ntmFlags*: DWORD
    ntmSizeEM*: UINT
    ntmCellHeight*: UINT
    ntmAvgWidth*: UINT
  PNEWTEXTMETRICW* = ptr NEWTEXTMETRICW
  NPNEWTEXTMETRICW* = ptr NEWTEXTMETRICW
  LPNEWTEXTMETRICW* = ptr NEWTEXTMETRICW
  NEWTEXTMETRICEXA* {.final, pure.} = object
    ntmTm*: NEWTEXTMETRICA
    ntmFontSig*: FONTSIGNATURE
  NEWTEXTMETRICEXW* {.final, pure.} = object
    ntmTm*: NEWTEXTMETRICW
    ntmFontSig*: FONTSIGNATURE
  PELARRAY* {.final, pure.} = object
    paXCount*: LONG
    paYCount*: LONG
    paXExt*: LONG
    paYExt*: LONG
    paRGBs*: BYTE
  PPELARRAY* = ptr PELARRAY
  NPPELARRAY* = ptr PELARRAY
  LPPELARRAY* = ptr PELARRAY
  ENUMLOGFONTA* {.final, pure.} = object
    elfLogFont*: LOGFONTA
    elfFullName*: array[LF_FULLFACESIZE, BYTE]
    elfStyle*: array[LF_FACESIZE, BYTE]
  LPENUMLOGFONTA* = ptr ENUMLOGFONTA
  ENUMLOGFONTW* {.final, pure.} = object
    elfLogFont*: LOGFONTW
    elfFullName*: array[LF_FULLFACESIZE, WCHAR]
    elfStyle*: array[LF_FACESIZE, WCHAR]
  LPENUMLOGFONTW* = ptr ENUMLOGFONTW
  ENUMLOGFONTEXA* {.final, pure.} = object
    elfLogFont*: LOGFONTA
    elfFullName*: array[LF_FULLFACESIZE, BYTE]
    elfStyle*: array[LF_FACESIZE, BYTE]
    elfScript*: array[LF_FACESIZE, BYTE]
  LPENUMLOGFONTEXA* = ptr ENUMLOGFONTEXA
  ENUMLOGFONTEXW* {.final, pure.} = object
    elfLogFont*: LOGFONTW
    elfFullName*: array[LF_FULLFACESIZE, WCHAR]
    elfStyle*: array[LF_FACESIZE, WCHAR]
    elfScript*: array[LF_FACESIZE, WCHAR]
  LPENUMLOGFONTEXW* = ptr ENUMLOGFONTEXW
  POINTFX* {.final, pure.} = object
    x*: FIXED
    y*: FIXED
  LPPOINTFX* = ptr POINTFX
  TTPOLYCURVE* {.final, pure.} = object
    wType*: WORD
    cpfx*: WORD
    apfx*: array[1, POINTFX]
  LPTTPOLYCURVE* = ptr TTPOLYCURVE
  TTPOLYGONHEADER* {.final, pure.} = object
    cb*: DWORD
    dwType*: DWORD
    pfxStart*: POINTFX
  LPTTPOLYGONHEADER* = ptr TTPOLYGONHEADER
  POINTFLOAT* {.final, pure.} = object
    x*: FLOAT
    y*: FLOAT
  PPOINTFLOAT* = ptr POINTFLOAT
  GLYPHMETRICSFLOAT* {.final, pure.} = object
    gmfBlackBoxX*: FLOAT
    gmfBlackBoxY*: FLOAT
    gmfptGlyphOrigin*: POINTFLOAT
    gmfCellIncX*: FLOAT
    gmfCellIncY*: FLOAT
  PGLYPHMETRICSFLOAT* = ptr GLYPHMETRICSFLOAT
  LPGLYPHMETRICSFLOAT* = ptr GLYPHMETRICSFLOAT
  LAYERPLANEDESCRIPTOR* {.final, pure.} = object
    nSize*: WORD
    nVersion*: WORD
    dwFlags*: DWORD
    iPixelType*: BYTE
    cColorBits*: BYTE
    cRedBits*: BYTE
    cRedShift*: BYTE
    cGreenBits*: BYTE
    cGreenShift*: BYTE
    cBlueBits*: BYTE
    cBlueShift*: BYTE
    cAlphaBits*: BYTE
    cAlphaShift*: BYTE
    cAccumBits*: BYTE
    cAccumRedBits*: BYTE
    cAccumGreenBits*: BYTE
    cAccumBlueBits*: BYTE
    cAccumAlphaBits*: BYTE
    cDepthBits*: BYTE
    cStencilBits*: BYTE
    cAuxBuffers*: BYTE
    iLayerPlane*: BYTE
    bReserved*: BYTE
    crTransparent*: COLORREF
  PLAYERPLANEDESCRIPTOR* = ptr LAYERPLANEDESCRIPTOR
  LPLAYERPLANEDESCRIPTOR* = ptr LAYERPLANEDESCRIPTOR
  BLENDFUNCTION* {.final, pure.} = object
    BlendOp*: BYTE
    BlendFlags*: BYTE
    SourceConstantAlpha*: BYTE
    AlphaFormat*: BYTE
  PBLENDFUNCTION* = ptr BLENDFUNCTION
  LPBLENDFUNCTION* = ptr BLENDFUNCTION

const
  MM_MAX_NUMAXES* = 16

type
  DESIGNVECTOR* {.final, pure.} = object
    dvReserved*: DWORD
    dvNumAxes*: DWORD
    dvValues*: array[MM_MAX_NUMAXES, LONG]
  PDESIGNVECTOR* = ptr DESIGNVECTOR
  LPDESIGNVECTOR* = ptr DESIGNVECTOR

const
  STAMP_DESIGNVECTOR* = 0x8000000.uint32 + 'd'.uint32 + ( 'v'.uint32  shl  8 )
  STAMP_AXESLIST* = 0x8000000.uint32 + 'a'.uint32 + ( 'l'.uint32  shl  8 )

const
  MM_MAX_AXES_NAMELEN* = 16

type
  AXISINFOA* {.final, pure.} = object
    axMinValue*: LONG
    axMaxValue*: LONG
    axAxisName*: array[MM_MAX_AXES_NAMELEN, BYTE]
  PAXISINFOA* = ptr AXISINFOA
  LPAXISINFOA* = ptr AXISINFOA
  AXISINFOW* {.final, pure.} = object
    axMinValue*: LONG
    axMaxValue*: LONG
    axAxisName*: array[MM_MAX_AXES_NAMELEN, WCHAR]
  PAXISINFOW* = ptr AXISINFOW
  LPAXISINFOW* = ptr AXISINFOW

when not defined(winansi):
  type
    AXISINFO* = AXISINFOW
    PAXISINFO* = PAXISINFOW
    LPAXISINFO* = LPAXISINFOW

else:
  type
    AXISINFO* = AXISINFOA
    PAXISINFO* = PAXISINFOA
    LPAXISINFO* = LPAXISINFOA

type
  AXESLISTA* {.final, pure.} = object
    axlReserved*: DWORD
    axlNumAxes*: DWORD
    axlAxisInfo*: array[MM_MAX_NUMAXES, AXISINFOA]
  PAXESLISTA* = ptr AXESLISTA
  LPAXESLISTA* = ptr AXESLISTA
  AXESLISTW* {.final, pure.} = object
    axlReserved*: DWORD
    axlNumAxes*: DWORD
    axlAxisInfo*: array[MM_MAX_NUMAXES, AXISINFOW]
  PAXESLISTW* = ptr AXESLISTW
  LPAXESLISTW* = ptr AXESLISTW

when not defined(winansi):
  type
    AXESLIST* = AXESLISTW
    PAXESLIST* = PAXESLISTW
    LPAXESLIST* = LPAXESLISTW

else:
  type
    AXESLIST* = AXESLISTA
    PAXESLIST* = PAXESLISTA
    LPAXESLIST* = LPAXESLISTA

type
  ENUMLOGFONTEXDVA* {.final, pure.} = object
    elfEnumLogfontEx*: ENUMLOGFONTEXA
    elfDesignVector*: DESIGNVECTOR
  PENUMLOGFONTEXDVA* = ptr ENUMLOGFONTEXDVA
  LPENUMLOGFONTEXDVA* = ptr ENUMLOGFONTEXDVA
  ENUMLOGFONTEXDVW* {.final, pure.} = object
    elfEnumLogfontEx*: ENUMLOGFONTEXW
    elfDesignVector*: DESIGNVECTOR
  PENUMLOGFONTEXDVW* = ptr ENUMLOGFONTEXDVW
  LPENUMLOGFONTEXDVW* = ptr ENUMLOGFONTEXDVW

proc CreateFontIndirectExA*(P1: ptr ENUMLOGFONTEXDVA): HFONT {.winapi, dynlib: "gdi32", importc.}
proc CreateFontIndirectExW*(P1: ptr ENUMLOGFONTEXDVW): HFONT {.winapi, dynlib: "gdi32", importc.}

type
  ENUMTEXTMETRICA* {.final, pure.} = object
    etmNewTextMetricEx*: NEWTEXTMETRICEXA
    etmAxesList*: AXESLISTA
  PENUMTEXTMETRICA* = ptr ENUMTEXTMETRICA
  LPENUMTEXTMETRICA* = ptr ENUMTEXTMETRICA
  ENUMTEXTMETRICW* {.final, pure.} = object
    etmNewTextMetricEx*: NEWTEXTMETRICEXW
    etmAxesList*: AXESLISTW
  PENUMTEXTMETRICW* = ptr ENUMTEXTMETRICW
  LPENUMTEXTMETRICW* = ptr ENUMTEXTMETRICW

when not defined(winansi):
  type
    ENUMTEXTMETRIC* = ENUMTEXTMETRICW
    PENUMTEXTMETRIC* = PENUMTEXTMETRICW
    LPENUMTEXTMETRIC* = LPENUMTEXTMETRICW

else:
  type
    ENUMTEXTMETRIC* = ENUMTEXTMETRICA
    PENUMTEXTMETRIC* = PENUMTEXTMETRICA
    LPENUMTEXTMETRIC* = LPENUMTEXTMETRICA

type
  GRADIENT_TRIANGLE* {.final, pure.} = object
    Vertex1*: ULONG
    Vertex2*: ULONG
    Vertex3*: ULONG
  PGRADIENT_TRIANGLE* = ptr GRADIENT_TRIANGLE
  LPGRADIENT_TRIANGLE* = ptr GRADIENT_TRIANGLE
  GRADIENT_RECT* {.final, pure.} = object
    UpperLeft*: ULONG
    LowerRight*: ULONG
  PGRADIENT_RECT* = ptr GRADIENT_RECT
  LPGRADIENT_RECT* = ptr GRADIENT_RECT
  DISPLAY_DEVICEA* {.final, pure.} = object
    cb*: DWORD
    DeviceName*: array[32, CHAR]
    DeviceString*: array[128, CHAR]
    StateFlags*: DWORD
    DeviceID*: array[128, CHAR]
    DeviceKey*: array[128, CHAR]
  PDISPLAY_DEVICEA* = ptr DISPLAY_DEVICEA
  LPDISPLAY_DEVICEA* = ptr DISPLAY_DEVICEA
  DISPLAY_DEVICEW* {.final, pure.} = object
    cb*: DWORD
    DeviceName*: array[32, WCHAR]
    DeviceString*: array[128, WCHAR]
    StateFlags*: DWORD
    DeviceID*: array[128, WCHAR]
    DeviceKey*: array[128, WCHAR]
  PDISPLAY_DEVICEW* = ptr DISPLAY_DEVICEW
  LPDISPLAY_DEVICEW* = ptr DISPLAY_DEVICEW

type
  DRAWPATRECT* {.final, pure.} = object
    ptPosition*: POINT
    ptSize*: POINT
    wStyle*: WORD
    wPattern*: WORD
  PDRAWPATRECT* = ptr DRAWPATRECT

type
  ABORTPROC* = proc (P1: HDC, P2: int32): BOOL {.stdcall.}
  MFENUMPROC* = proc (P1: HDC, P2: ptr HANDLETABLE, P3: ptr METARECORD, P4: int32, P5: LPARAM): int32 {.stdcall.}
  ENHMFENUMPROC* = proc (P1: HDC, P2: ptr HANDLETABLE, P3: ptr ENHMETARECORD, P4: int32, P5: LPARAM): int32 {.stdcall.}
  OLDFONTENUMPROCA* = proc (P1: ptr LOGFONTA, P2: ptr TEXTMETRICA, P3: DWORD, P4: LPARAM): int32 {.stdcall.}
  OLDFONTENUMPROCW* = proc (P1: ptr LOGFONTW, P2: ptr TEXTMETRICW, P3: DWORD, P4: LPARAM): int32 {.stdcall.}
  FONTENUMPROCA* = OLDFONTENUMPROCA
  FONTENUMPROCW* = OLDFONTENUMPROCW
  ICMENUMPROCA* = proc (P1: LPSTR, P2: LPARAM): int32 {.stdcall.}
  ICMENUMPROCW* = proc (P1: LPWSTR, P2: LPARAM): int32 {.stdcall.}
  GOBJENUMPROC* = proc (P1: LPVOID, P2: LPARAM): void {.stdcall.}
  LINEDDAPROC* = proc (P1: int32, P2: int32, P3: LPARAM): void {.stdcall.}
  LPFNDEVMODE* = proc (P1: HWND, P2: HMODULE, P3: LPDEVMODEA, P4: LPSTR, P5: LPSTR, P6: LPDEVMODEA, P7: LPSTR, P8: UINT): UINT {.stdcall.}
  LPFNDEVCAPS* = proc (P1: LPSTR, P2: LPSTR, P3: UINT, P4: LPSTR, P5: LPDEVMODEA): DWORD {.stdcall.}

proc MAKEROP4*(fore: DWORD, back: DWORD): DWORD =
  return ((back shl 8) and 0xFF000000'u32) or fore

proc CMYK*(c: BYTE, m: BYTE, y: BYTE, k: BYTE): COLORREF =
  return cast[COLORREF](k or (y shl 8) or (m shl 16) or (c shl 24 ))

proc GetCValue*(cmyk: COLORREF): BYTE =
  return cast[BYTE](cmyk shr 24)

proc GetMValue*(cmyk: COLORREF): BYTE =
  return cast[BYTE](cmyk shr 16)

proc GetYValue*(cmyk: COLORREF): BYTE =
  return cast[BYTE](cmyk shr 8)

proc GetKValue*(cmyk: COLORREF): BYTE =
  return cast[BYTE](cmyk)

proc RGB*(r: BYTE, g: BYTE, b: BYTE): COLORREF =
  return r.COLORREF or (g.COLORREF shl 8 ) or (b.COLORREF shl 16)

proc GetRValue*(c: COLORREF): BYTE =
  return cast[BYTE](c)

proc GetGValue*(c: COLORREF): BYTE =
  return cast[BYTE](c shr 8)

proc GetBValue*(c: COLORREF): BYTE =
  return cast[BYTE](c shr 16)

proc PALETTEINDEX*(i: WORD): COLORREF =
  return 0x01000000'u32 or cast[COLORREF](i)

proc PALETTERGB*(r: BYTE, g: BYTE, b: BYTE): COLORREF =
  return 0x02000000'u32 or RGB(r, g, b)

proc AbortDoc*(P1: HDC): int32 {.winapi, dynlib: "gdi32", importc.}
proc AbortPath*(P1: HDC): BOOL {.winapi, dynlib: "gdi32", importc.}
proc AddFontResourceA*(P1: LPCSTR): int32 {.winapi, dynlib: "gdi32", importc.}
proc AddFontResourceW*(P1: LPCWSTR): int32 {.winapi, dynlib: "gdi32", importc.}
proc AngleArc*(P1: HDC, P2: int32, P3: int32, P4: DWORD, P5: FLOAT, P6: FLOAT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc AnimatePalette*(P1: HPALETTE, P2: UINT, P3: UINT, P4: ptr PALETTEENTRY): BOOL {.winapi, dynlib: "gdi32", importc.}
proc Arc*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32, P6: int32, P7: int32, P8: int32, P9: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc ArcTo*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32, P6: int32, P7: int32, P8: int32, P9: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc BeginPath*(P1: HDC): BOOL {.winapi, dynlib: "gdi32", importc.}
proc BitBlt*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32, P6: HDC, P7: int32, P8: int32, P9: DWORD): BOOL {.winapi, dynlib: "gdi32", importc.}
proc CancelDC*(P1: HDC): BOOL {.winapi, dynlib: "gdi32", importc.}
proc CheckColorsInGamut*(P1: HDC, P2: PVOID, P3: PVOID, P4: DWORD): BOOL {.winapi, dynlib: "gdi32", importc.}
proc Chord*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32, P6: int32, P7: int32, P8: int32, P9: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc ChoosePixelFormat*(P1: HDC, P2: ptr PIXELFORMATDESCRIPTOR): int32 {.winapi, dynlib: "gdi32", importc.}
proc CloseEnhMetaFile*(P1: HDC): HENHMETAFILE {.winapi, dynlib: "gdi32", importc.}
proc CloseFigure*(P1: HDC): BOOL {.winapi, dynlib: "gdi32", importc.}
proc CloseMetaFile*(P1: HDC): HMETAFILE {.winapi, dynlib: "gdi32", importc.}
proc ColorMatchToTarget*(P1: HDC, P2: HDC, P3: DWORD): BOOL {.winapi, dynlib: "gdi32", importc.}
proc ColorCorrectPalette*(P1: HDC, P2: HPALETTE, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "gdi32", importc.}
proc CombineRgn*(P1: HRGN, P2: HRGN, P3: HRGN, P4: int32): int32 {.winapi, dynlib: "gdi32", importc.}
proc CombineTransform*(P1: LPXFORM, P2: ptr XFORM, P3: ptr XFORM): BOOL {.winapi, dynlib: "gdi32", importc.}
proc CopyEnhMetaFileA*(P1: HENHMETAFILE, P2: LPCSTR): HENHMETAFILE {.winapi, dynlib: "gdi32", importc.}
proc CopyEnhMetaFileW*(P1: HENHMETAFILE, P2: LPCWSTR): HENHMETAFILE {.winapi, dynlib: "gdi32", importc.}
proc CopyMetaFileA*(P1: HMETAFILE, P2: LPCSTR): HMETAFILE {.winapi, dynlib: "gdi32", importc.}
proc CopyMetaFileW*(P1: HMETAFILE, P2: LPCWSTR): HMETAFILE {.winapi, dynlib: "gdi32", importc.}
proc CreateBitmap*(P1: int32, P2: int32, P3: UINT, P4: UINT, P5: PCVOID): HBITMAP {.winapi, dynlib: "gdi32", importc.}
proc CreateBitmapIndirect*(P1: ptr BITMAP): HBITMAP {.winapi, dynlib: "gdi32", importc.}
proc CreateBrushIndirect*(P1: ptr LOGBRUSH): HBRUSH {.winapi, dynlib: "gdi32", importc.}
proc CreateColorSpaceA*(P1: LPLOGCOLORSPACEA): HCOLORSPACE {.winapi, dynlib: "gdi32", importc.}
proc CreateColorSpaceW*(P1: LPLOGCOLORSPACEW): HCOLORSPACE {.winapi, dynlib: "gdi32", importc.}
proc CreateCompatibleBitmap*(P1: HDC, P2: int32, P3: int32): HBITMAP {.winapi, dynlib: "gdi32", importc.}
proc CreateCompatibleDC*(P1: HDC): HDC {.winapi, dynlib: "gdi32", importc.}
proc CreateDCA*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: ptr DEVMODEA): HDC {.winapi, dynlib: "gdi32", importc.}
proc CreateDCW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: ptr DEVMODEW): HDC {.winapi, dynlib: "gdi32", importc.}
proc CreateDIBitmap*(P1: HDC, P2: ptr BITMAPINFOHEADER, P3: DWORD, P4: PCVOID, P5: ptr BITMAPINFO, P6: UINT): HBITMAP {.winapi, dynlib: "gdi32", importc.}
proc CreateDIBPatternBrush*(P1: HGLOBAL, P2: UINT): HBRUSH {.winapi, dynlib: "gdi32", importc.}
proc CreateDIBPatternBrushPt*(P1: PCVOID, P2: UINT): HBRUSH {.winapi, dynlib: "gdi32", importc.}
proc CreateDIBSection*(P1: HDC, P2: ptr BITMAPINFO, P3: UINT, P4: pointer, P5: HANDLE, P6: DWORD): HBITMAP {.winapi, dynlib: "gdi32", importc.}
proc CreateDiscardableBitmap*(P1: HDC, P2: int32, P3: int32): HBITMAP {.winapi, dynlib: "gdi32", importc.}
proc CreateEllipticRgn*(P1: int32, P2: int32, P3: int32, P4: int32): HRGN {.winapi, dynlib: "gdi32", importc.}
proc CreateEllipticRgnIndirect*(P1: LPCRECT): HRGN {.winapi, dynlib: "gdi32", importc.}
proc CreateEnhMetaFileA*(P1: HDC, P2: LPCSTR, P3: LPCRECT, P4: LPCSTR): HDC {.winapi, dynlib: "gdi32", importc.}
proc CreateEnhMetaFileW*(P1: HDC, P2: LPCWSTR, P3: LPCRECT, P4: LPCWSTR): HDC {.winapi, dynlib: "gdi32", importc.}
proc CreateFontA*(P1: int32, P2: int32, P3: int32, P4: int32, P5: int32, P6: DWORD, P7: DWORD, P8: DWORD, P9: DWORD, P10: DWORD, P11: DWORD, P12: DWORD, P13: DWORD, P14: LPCSTR): HFONT {.winapi, dynlib: "gdi32", importc.}
proc CreateFontW*(P1: int32, P2: int32, P3: int32, P4: int32, P5: int32, P6: DWORD, P7: DWORD, P8: DWORD, P9: DWORD, P10: DWORD, P11: DWORD, P12: DWORD, P13: DWORD, P14: LPCWSTR): HFONT {.winapi, dynlib: "gdi32", importc.}
proc CreateFontIndirectA*(P1: ptr LOGFONTA): HFONT {.winapi, dynlib: "gdi32", importc.}
proc CreateFontIndirectW*(P1: ptr LOGFONTW): HFONT {.winapi, dynlib: "gdi32", importc.}
proc CreateHalftonePalette*(P1: HDC): HPALETTE {.winapi, dynlib: "gdi32", importc.}
proc CreateHatchBrush*(P1: int32, P2: COLORREF): HBRUSH {.winapi, dynlib: "gdi32", importc.}
proc CreateICA*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: ptr DEVMODEA): HDC {.winapi, dynlib: "gdi32", importc.}
proc CreateICW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: ptr DEVMODEW): HDC {.winapi, dynlib: "gdi32", importc.}
proc CreateMetaFileA*(P1: LPCSTR): HDC {.winapi, dynlib: "gdi32", importc.}
proc CreateMetaFileW*(P1: LPCWSTR): HDC {.winapi, dynlib: "gdi32", importc.}
proc CreatePalette*(P1: ptr LOGPALETTE): HPALETTE {.winapi, dynlib: "gdi32", importc.}
proc CreatePatternBrush*(P1: HBITMAP): HBRUSH {.winapi, dynlib: "gdi32", importc.}
proc CreatePen*(P1: int32, P2: int32, P3: COLORREF): HPEN {.winapi, dynlib: "gdi32", importc.}
proc CreatePenIndirect*(P1: ptr LOGPEN): HPEN {.winapi, dynlib: "gdi32", importc.}
proc CreatePolygonRgn*(P1: ptr POINT, P2: int32, P3: int32): HRGN {.winapi, dynlib: "gdi32", importc.}
proc CreatePolyPolygonRgn*(P1: ptr POINT, P2: ptr INT, P3: int32, P4: int32): HRGN {.winapi, dynlib: "gdi32", importc.}
proc CreateRectRgn*(P1: int32, P2: int32, P3: int32, P4: int32): HRGN {.winapi, dynlib: "gdi32", importc.}
proc CreateRectRgnIndirect*(P1: LPCRECT): HRGN {.winapi, dynlib: "gdi32", importc.}
proc CreateRoundRectRgn*(P1: int32, P2: int32, P3: int32, P4: int32, P5: int32, P6: int32): HRGN {.winapi, dynlib: "gdi32", importc.}
proc CreateScalableFontResourceA*(P1: DWORD, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR): BOOL {.winapi, dynlib: "gdi32", importc.}
proc CreateScalableFontResourceW*(P1: DWORD, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "gdi32", importc.}
proc CreateSolidBrush*(P1: COLORREF): HBRUSH {.winapi, dynlib: "gdi32", importc.}
proc DeleteColorSpace*(P1: HCOLORSPACE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc DeleteDC*(P1: HDC): BOOL {.winapi, dynlib: "gdi32", importc.}
proc DeleteEnhMetaFile*(P1: HENHMETAFILE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc DeleteMetaFile*(P1: HMETAFILE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc DeleteObject*(P1: HGDIOBJ): BOOL {.winapi, dynlib: "gdi32", importc.}
proc DescribePixelFormat*(P1: HDC, P2: int32, P3: UINT, P4: LPPIXELFORMATDESCRIPTOR): int32 {.winapi, dynlib: "gdi32", importc.}
proc DeviceCapabilitiesA*(P1: LPCSTR, P2: LPCSTR, P3: WORD, P4: LPSTR, P5: ptr DEVMODEA): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc DeviceCapabilitiesW*(P1: LPCWSTR, P2: LPCWSTR, P3: WORD, P4: LPWSTR, P5: ptr DEVMODEW): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc DPtoLP*(P1: HDC, P2: LPPOINT, P3: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc DrawEscape*(P1: HDC, P2: int32, P3: int32, P4: LPCSTR): int32 {.winapi, dynlib: "gdi32", importc.}
proc Ellipse*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc EndDoc*(P1: HDC): int32 {.winapi, dynlib: "gdi32", importc.}
proc EndPage*(P1: HDC): int32 {.winapi, dynlib: "gdi32", importc.}
proc EndPath*(P1: HDC): BOOL {.winapi, dynlib: "gdi32", importc.}
proc EnumEnhMetaFile*(P1: HDC, P2: HENHMETAFILE, P3: ENHMFENUMPROC, P4: PVOID, P5: LPCRECT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc EnumFontFamiliesA*(P1: HDC, P2: LPCSTR, P3: FONTENUMPROCA, P4: LPARAM): int32 {.winapi, dynlib: "gdi32", importc.}
proc EnumFontFamiliesW*(P1: HDC, P2: LPCWSTR, P3: FONTENUMPROCW, P4: LPARAM): int32 {.winapi, dynlib: "gdi32", importc.}
proc EnumFontFamiliesExA*(P1: HDC, P2: PLOGFONTA, P3: FONTENUMPROCA, P4: LPARAM, P5: DWORD): int32 {.winapi, dynlib: "gdi32", importc.}
proc EnumFontFamiliesExW*(P1: HDC, P2: PLOGFONTW, P3: FONTENUMPROCW, P4: LPARAM, P5: DWORD): int32 {.winapi, dynlib: "gdi32", importc.}
proc EnumFontsA*(P1: HDC, P2: LPCSTR, P3: FONTENUMPROCA, P4: LPARAM): int32 {.winapi, dynlib: "gdi32", importc.}
proc EnumFontsW*(P1: HDC, P2: LPCWSTR, P3: FONTENUMPROCW, P4: LPARAM): int32 {.winapi, dynlib: "gdi32", importc.}
proc EnumICMProfilesA*(P1: HDC, P2: ICMENUMPROCA, P3: LPARAM): int32 {.winapi, dynlib: "gdi32", importc.}
proc EnumICMProfilesW*(P1: HDC, P2: ICMENUMPROCW, P3: LPARAM): int32 {.winapi, dynlib: "gdi32", importc.}
proc EnumMetaFile*(P1: HDC, P2: HMETAFILE, P3: MFENUMPROC, P4: LPARAM): BOOL {.winapi, dynlib: "gdi32", importc.}
proc EnumObjects*(P1: HDC, P2: int32, P3: GOBJENUMPROC, P4: LPARAM): int32 {.winapi, dynlib: "gdi32", importc.}
proc EqualRgn*(P1: HRGN, P2: HRGN): BOOL {.winapi, dynlib: "gdi32", importc.}
proc Escape*(P1: HDC, P2: int32, P3: int32, P4: LPCSTR, P5: PVOID): int32 {.winapi, dynlib: "gdi32", importc.}
proc ExcludeClipRect*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32): int32 {.winapi, dynlib: "gdi32", importc.}
proc ExcludeUpdateRgn*(P1: HDC, P2: HWND): int32 {.winapi, dynlib: "user32", importc.}
proc ExtCreatePen*(P1: DWORD, P2: DWORD, P3: ptr LOGBRUSH, P4: DWORD, P5: ptr DWORD): HPEN {.winapi, dynlib: "gdi32", importc.}
proc ExtCreateRegion*(P1: ptr XFORM, P2: DWORD, P3: ptr RGNDATA): HRGN {.winapi, dynlib: "gdi32", importc.}
proc ExtEscape*(P1: HDC, P2: int32, P3: int32, P4: LPCSTR, P5: int32, P6: LPSTR): int32 {.winapi, dynlib: "gdi32", importc.}
proc ExtFloodFill*(P1: HDC, P2: int32, P3: int32, P4: COLORREF, P5: UINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc ExtSelectClipRgn*(P1: HDC, P2: HRGN, P3: int32): int32 {.winapi, dynlib: "gdi32", importc.}
proc ExtTextOutA*(P1: HDC, P2: int32, P3: int32, P4: UINT, P5: LPCRECT, P6: LPCSTR, P7: UINT, P8: ptr INT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc ExtTextOutW*(P1: HDC, P2: int32, P3: int32, P4: UINT, P5: LPCRECT, P6: LPCWSTR, P7: UINT, P8: ptr INT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc FillPath*(P1: HDC): BOOL {.winapi, dynlib: "gdi32", importc.}
proc FillRect*(P1: HDC, P2: LPCRECT, P3: HBRUSH): int32 {.winapi, dynlib: "user32", importc.}
proc FillRgn*(P1: HDC, P2: HRGN, P3: HBRUSH): int32 {.winapi, dynlib: "gdi32", importc.}
proc FixBrushOrgEx*(P1: HDC, P2: int32, P3: int32, P4: LPPOINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc FlattenPath*(P1: HDC): BOOL {.winapi, dynlib: "gdi32", importc.}
proc FloodFill*(P1: HDC, P2: int32, P3: int32, P4: COLORREF): BOOL {.winapi, dynlib: "gdi32", importc.}
proc FrameRgn*(P1: HDC, P2: HRGN, P3: HBRUSH, P4: int32, P5: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GdiComment*(P1: HDC, P2: UINT, P3: ptr BYTE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GdiFlush*(): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GdiGetBatchLimit*(): DWORD {.winapi, dynlib: "gdi32", importc.}
proc GdiSetBatchLimit*(P1: DWORD): DWORD {.winapi, dynlib: "gdi32", importc.}
proc GetArcDirection*(P1: HDC): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetAspectRatioFilterEx*(P1: HDC, P2: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetBitmapBits*(P1: HBITMAP, P2: LONG, P3: PVOID): LONG {.winapi, dynlib: "gdi32", importc.}
proc GetBitmapDimensionEx*(P1: HBITMAP, P2: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetBkColor*(P1: HDC): COLORREF {.winapi, dynlib: "gdi32", importc.}
proc GetBkMode*(P1: HDC): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetBoundsRect*(P1: HDC, P2: LPRECT, P3: UINT): UINT {.winapi, dynlib: "gdi32", importc.}
proc GetBrushOrgEx*(P1: HDC, P2: LPPOINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetCharABCWidthsA*(P1: HDC, P2: UINT, P3: UINT, P4: LPABC): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetCharABCWidthsW*(P1: HDC, P2: UINT, P3: UINT, P4: LPABC): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetCharABCWidthsFloatA*(P1: HDC, P2: UINT, P3: UINT, P4: LPABCFLOAT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetCharABCWidthsFloatW*(P1: HDC, P2: UINT, P3: UINT, P4: LPABCFLOAT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetCharacterPlacementA*(P1: HDC, P2: LPCSTR, P3: int32, P4: int32, P5: LPGCP_RESULTSA, P6: DWORD): DWORD {.winapi, dynlib: "gdi32", importc.}
proc GetCharacterPlacementW*(P1: HDC, P2: LPCWSTR, P3: int32, P4: int32, P5: LPGCP_RESULTSW, P6: DWORD): DWORD {.winapi, dynlib: "gdi32", importc.}
proc GetCharWidth32A*(P1: HDC, P2: UINT, P3: UINT, P4: LPINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetCharWidth32W*(P1: HDC, P2: UINT, P3: UINT, P4: LPINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetCharWidthA*(P1: HDC, P2: UINT, P3: UINT, P4: LPINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetCharWidthW*(P1: HDC, P2: UINT, P3: UINT, P4: LPINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetCharWidthFloatA*(P1: HDC, P2: UINT, P3: UINT, P4: PFLOAT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetCharWidthFloatW*(P1: HDC, P2: UINT, P3: UINT, P4: PFLOAT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetClipBox*(P1: HDC, P2: LPRECT): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetClipRgn*(P1: HDC, P2: HRGN): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetColorAdjustment*(P1: HDC, P2: LPCOLORADJUSTMENT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetColorSpace*(P1: HDC): HANDLE {.winapi, dynlib: "gdi32", importc.}
proc GetCurrentObject*(P1: HDC, P2: UINT): HGDIOBJ {.winapi, dynlib: "gdi32", importc.}
proc GetCurrentPositionEx*(P1: HDC, P2: LPPOINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetCursor*(): HCURSOR {.winapi, dynlib: "user32", importc.}
proc GetDCOrgEx*(P1: HDC, P2: LPPOINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetDeviceCaps*(P1: HDC, P2: int32): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetDeviceGammaRamp*(P1: HDC, P2: PVOID): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetDIBColorTable*(P1: HDC, P2: UINT, P3: UINT, P4: ptr RGBQUAD): UINT {.winapi, dynlib: "gdi32", importc.}
proc GetDIBits*(P1: HDC, P2: HBITMAP, P3: UINT, P4: UINT, P5: PVOID, P6: LPBITMAPINFO, P7: UINT): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetEnhMetaFileA*(P1: LPCSTR): HENHMETAFILE {.winapi, dynlib: "gdi32", importc.}
proc GetEnhMetaFileW*(P1: LPCWSTR): HENHMETAFILE {.winapi, dynlib: "gdi32", importc.}
proc GetEnhMetaFileBits*(P1: HENHMETAFILE, P2: UINT, P3: LPBYTE): UINT {.winapi, dynlib: "gdi32", importc.}
proc GetEnhMetaFileDescriptionA*(P1: HENHMETAFILE, P2: UINT, P3: LPSTR): UINT {.winapi, dynlib: "gdi32", importc.}
proc GetEnhMetaFileDescriptionW*(P1: HENHMETAFILE, P2: UINT, P3: LPWSTR): UINT {.winapi, dynlib: "gdi32", importc.}
proc GetEnhMetaFileHeader*(P1: HENHMETAFILE, P2: UINT, P3: LPENHMETAHEADER): UINT {.winapi, dynlib: "gdi32", importc.}
proc GetEnhMetaFilePaletteEntries*(P1: HENHMETAFILE, P2: UINT, P3: LPPALETTEENTRY): UINT {.winapi, dynlib: "gdi32", importc.}
proc GetEnhMetaFilePixelFormat*(P1: HENHMETAFILE, P2: DWORD, P3: ptr PIXELFORMATDESCRIPTOR): UINT {.winapi, dynlib: "gdi32", importc.}
proc GetFontData*(P1: HDC, P2: DWORD, P3: DWORD, P4: PVOID, P5: DWORD): DWORD {.winapi, dynlib: "gdi32", importc.}
proc GetFontLanguageInfo*(P1: HDC): DWORD {.winapi, dynlib: "gdi32", importc.}
proc GetGlyphOutlineA*(P1: HDC, P2: UINT, P3: UINT, P4: LPGLYPHMETRICS, P5: DWORD, P6: PVOID, P7: ptr MAT2): DWORD {.winapi, dynlib: "gdi32", importc.}
proc GetGlyphOutlineW*(P1: HDC, P2: UINT, P3: UINT, P4: LPGLYPHMETRICS, P5: DWORD, P6: PVOID, P7: ptr MAT2): DWORD {.winapi, dynlib: "gdi32", importc.}
proc GetGraphicsMode*(P1: HDC): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetICMProfileA*(P1: HDC, P2: DWORD, P3: LPSTR): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetICMProfileW*(P1: HDC, P2: DWORD, P3: LPWSTR): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetKerningPairsA*(P1: HDC, P2: DWORD, P3: LPKERNINGPAIR): DWORD {.winapi, dynlib: "gdi32", importc.}
proc GetKerningPairsW*(P1: HDC, P2: DWORD, P3: LPKERNINGPAIR): DWORD {.winapi, dynlib: "gdi32", importc.}
proc GetLogColorSpaceA*(P1: HCOLORSPACE, P2: LPLOGCOLORSPACEA, P3: DWORD): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetLogColorSpaceW*(P1: HCOLORSPACE, P2: LPLOGCOLORSPACEW, P3: DWORD): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetMapMode*(P1: HDC): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetMetaFileA*(P1: LPCSTR): HMETAFILE {.winapi, dynlib: "gdi32", importc.}
proc GetMetaFileW*(P1: LPCWSTR): HMETAFILE {.winapi, dynlib: "gdi32", importc.}
proc GetMetaFileBitsEx*(P1: HMETAFILE, P2: UINT, P3: PVOID): UINT {.winapi, dynlib: "gdi32", importc.}
proc GetMetaRgn*(P1: HDC, P2: HRGN): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetMiterLimit*(P1: HDC, P2: PFLOAT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetNearestColor*(P1: HDC, P2: COLORREF): COLORREF {.winapi, dynlib: "gdi32", importc.}
proc GetNearestPaletteIndex*(P1: HPALETTE, P2: COLORREF): UINT {.winapi, dynlib: "gdi32", importc.}
proc GetObjectA*(P1: HGDIOBJ, P2: int32, P3: PVOID): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetObjectW*(P1: HGDIOBJ, P2: int32, P3: PVOID): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetObjectType*(P1: HGDIOBJ): DWORD {.winapi, dynlib: "gdi32", importc.}
proc GetOutlineTextMetricsA*(P1: HDC, P2: UINT, P3: LPOUTLINETEXTMETRICA): UINT {.winapi, dynlib: "gdi32", importc.}
proc GetOutlineTextMetricsW*(P1: HDC, P2: UINT, P3: LPOUTLINETEXTMETRICW): UINT {.winapi, dynlib: "gdi32", importc.}
proc GetPaletteEntries*(P1: HPALETTE, P2: UINT, P3: UINT, P4: LPPALETTEENTRY): UINT {.winapi, dynlib: "gdi32", importc.}
proc GetPath*(P1: HDC, P2: LPPOINT, P3: PBYTE, P4: int32): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetPixel*(P1: HDC, P2: int32, P3: int32): COLORREF {.winapi, dynlib: "gdi32", importc.}
proc GetPixelFormat*(P1: HDC): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetPolyFillMode*(P1: HDC): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetRasterizerCaps*(P1: LPRASTERIZER_STATUS, P2: UINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetRandomRgn*(P1: HDC, P2: HRGN, P3: INT): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetRegionData*(P1: HRGN, P2: DWORD, P3: LPRGNDATA): DWORD {.winapi, dynlib: "gdi32", importc.}
proc GetRgnBox*(P1: HRGN, P2: LPRECT): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetROP2*(P1: HDC): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetStockObject*(P1: int32): HGDIOBJ {.winapi, dynlib: "gdi32", importc.}
proc GetStretchBltMode*(P1: HDC): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetSystemPaletteEntries*(P1: HDC, P2: UINT, P3: UINT, P4: LPPALETTEENTRY): UINT {.winapi, dynlib: "gdi32", importc.}
proc GetSystemPaletteUse*(P1: HDC): UINT {.winapi, dynlib: "gdi32", importc.}
proc GetTextAlign*(P1: HDC): UINT {.winapi, dynlib: "gdi32", importc.}
proc GetTextCharacterExtra*(P1: HDC): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetTextCharset*(P1: HDC): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetTextCharsetInfo*(P1: HDC, P2: LPFONTSIGNATURE, P3: DWORD): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetTextColor*(P1: HDC): COLORREF {.winapi, dynlib: "gdi32", importc.}
proc GetTextExtentExPointA*(P1: HDC, P2: LPCSTR, P3: int32, P4: int32, P5: LPINT, P6: LPINT, P7: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetTextExtentExPointW*(P1: HDC, P2: LPCWSTR, P3: int32, P4: int32, P5: LPINT, P6: LPINT, P7: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetTextExtentPointA*(P1: HDC, P2: LPCSTR, P3: int32, P4: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetTextExtentPointW*(P1: HDC, P2: LPCWSTR, P3: int32, P4: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetTextExtentPoint32A*(P1: HDC, P2: LPCSTR, P3: int32, P4: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetTextExtentPoint32W*(P1: HDC, P2: LPCWSTR, P3: int32, P4: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetTextFaceA*(P1: HDC, P2: int32, P3: LPSTR): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetTextFaceW*(P1: HDC, P2: int32, P3: LPWSTR): int32 {.winapi, dynlib: "gdi32", importc.}
proc GetTextMetricsA*(P1: HDC, P2: LPTEXTMETRICA): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetTextMetricsW*(P1: HDC, P2: LPTEXTMETRICW): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetViewportExtEx*(P1: HDC, P2: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetViewportOrgEx*(P1: HDC, P2: LPPOINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetWindowExtEx*(P1: HDC, P2: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetWindowOrgEx*(P1: HDC, P2: LPPOINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetWinMetaFileBits*(P1: HENHMETAFILE, P2: UINT, P3: LPBYTE, P4: INT, P5: HDC): UINT {.winapi, dynlib: "gdi32", importc.}
proc GetWorldTransform*(P1: HDC, P2: LPXFORM): BOOL {.winapi, dynlib: "gdi32", importc.}
proc IntersectClipRect*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32): int32 {.winapi, dynlib: "gdi32", importc.}
proc InvertRgn*(P1: HDC, P2: HRGN): BOOL {.winapi, dynlib: "gdi32", importc.}
proc LineDDA*(P1: int32, P2: int32, P3: int32, P4: int32, P5: LINEDDAPROC, P6: LPARAM): BOOL {.winapi, dynlib: "gdi32", importc.}
proc LineTo*(P1: HDC, P2: int32, P3: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc LPtoDP*(P1: HDC, P2: LPPOINT, P3: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc MaskBlt*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32, P6: HDC, P7: int32, P8: int32, P9: HBITMAP, P10: int32, P11: int32, P12: DWORD): BOOL {.winapi, dynlib: "gdi32", importc.}
proc ModifyWorldTransform*(P1: HDC, P2: ptr XFORM, P3: DWORD): BOOL {.winapi, dynlib: "gdi32", importc.}
proc MoveToEx*(P1: HDC, P2: int32, P3: int32, P4: LPPOINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc OffsetClipRgn*(P1: HDC, P2: int32, P3: int32): int32 {.winapi, dynlib: "gdi32", importc.}
proc OffsetRgn*(P1: HRGN, P2: int32, P3: int32): int32 {.winapi, dynlib: "gdi32", importc.}
proc OffsetViewportOrgEx*(P1: HDC, P2: int32, P3: int32, P4: LPPOINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc OffsetWindowOrgEx*(P1: HDC, P2: int32, P3: int32, P4: LPPOINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc PaintRgn*(P1: HDC, P2: HRGN): BOOL {.winapi, dynlib: "gdi32", importc.}
proc PatBlt*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32, P6: DWORD): BOOL {.winapi, dynlib: "gdi32", importc.}
proc PathToRegion*(P1: HDC): HRGN {.winapi, dynlib: "gdi32", importc.}
proc Pie*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32, P6: int32, P7: int32, P8: int32, P9: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc PlayEnhMetaFile*(P1: HDC, P2: HENHMETAFILE, P3: LPCRECT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc PlayEnhMetaFileRecord*(P1: HDC, P2: LPHANDLETABLE, P3: ptr ENHMETARECORD, P4: UINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc PlayMetaFile*(P1: HDC, P2: HMETAFILE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc PlayMetaFileRecord*(P1: HDC, P2: LPHANDLETABLE, P3: LPMETARECORD, P4: UINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc PlgBlt*(P1: HDC, P2: ptr POINT, P3: HDC, P4: int32, P5: int32, P6: int32, P7: int32, P8: HBITMAP, P9: int32, P10: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc PolyBezier*(P1: HDC, P2: ptr POINT, P3: DWORD): BOOL {.winapi, dynlib: "gdi32", importc.}
proc PolyBezierTo*(P1: HDC, P2: ptr POINT, P3: DWORD): BOOL {.winapi, dynlib: "gdi32", importc.}
proc PolyDraw*(P1: HDC, P2: ptr POINT, P3: ptr BYTE, P4: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc Polygon*(P1: HDC, P2: ptr POINT, P3: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc Polyline*(P1: HDC, P2: ptr POINT, P3: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc PolylineTo*(P1: HDC, P2: ptr POINT, P3: DWORD): BOOL {.winapi, dynlib: "gdi32", importc.}
proc PolyPolygon*(P1: HDC, P2: ptr POINT, P3: ptr INT, P4: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc PolyPolyline*(P1: HDC, P2: ptr POINT, P3: ptr DWORD, P4: DWORD): BOOL {.winapi, dynlib: "gdi32", importc.}
proc PolyTextOutA*(P1: HDC, P2: ptr POLYTEXTA, P3: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc PolyTextOutW*(P1: HDC, P2: ptr POLYTEXTW, P3: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc PtInRegion*(P1: HRGN, P2: int32, P3: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc PtVisible*(P1: HDC, P2: int32, P3: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc RealizePalette*(P1: HDC): UINT {.winapi, dynlib: "gdi32", importc.}
proc Rectangle*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc RectInRegion*(P1: HRGN, P2: LPCRECT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc RectVisible*(P1: HDC, P2: LPCRECT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc RemoveFontResourceA*(P1: LPCSTR): BOOL {.winapi, dynlib: "gdi32", importc.}
proc RemoveFontResourceW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "gdi32", importc.}
proc ResetDCA*(P1: HDC, P2: ptr DEVMODEA): HDC {.winapi, dynlib: "gdi32", importc.}
proc ResetDCW*(P1: HDC, P2: ptr DEVMODEW): HDC {.winapi, dynlib: "gdi32", importc.}
proc ResizePalette*(P1: HPALETTE, P2: UINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc RestoreDC*(P1: HDC, P2: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc RoundRect*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32, P6: int32, P7: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SaveDC*(P1: HDC): int32 {.winapi, dynlib: "gdi32", importc.}
proc ScaleViewportExtEx*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32, P6: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc ScaleWindowExtEx*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32, P6: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SelectClipPath*(P1: HDC, P2: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SelectClipRgn*(P1: HDC, P2: HRGN): int32 {.winapi, dynlib: "gdi32", importc.}
proc SelectObject*(P1: HDC, P2: HGDIOBJ): HGDIOBJ {.winapi, dynlib: "gdi32", importc.}
proc SelectPalette*(P1: HDC, P2: HPALETTE, P3: BOOL): HPALETTE {.winapi, dynlib: "gdi32", importc.}
proc SetAbortProc*(P1: HDC, P2: ABORTPROC): int32 {.winapi, dynlib: "gdi32", importc.}
proc SetArcDirection*(P1: HDC, P2: int32): int32 {.winapi, dynlib: "gdi32", importc.}
proc SetBitmapBits*(P1: HBITMAP, P2: DWORD, P3: PCVOID): LONG {.winapi, dynlib: "gdi32", importc.}
proc SetBitmapDimensionEx*(P1: HBITMAP, P2: int32, P3: int32, P4: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SetBkColor*(P1: HDC, P2: COLORREF): COLORREF {.winapi, dynlib: "gdi32", importc.}
proc SetBkMode*(P1: HDC, P2: int32): int32 {.winapi, dynlib: "gdi32", importc.}
proc SetBoundsRect*(P1: HDC, P2: LPCRECT, P3: UINT): UINT {.winapi, dynlib: "gdi32", importc.}
proc SetBrushOrgEx*(P1: HDC, P2: int32, P3: int32, P4: LPPOINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SetColorAdjustment*(P1: HDC, P2: ptr COLORADJUSTMENT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SetColorSpace*(P1: HDC, P2: HCOLORSPACE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SetDeviceGammaRamp*(P1: HDC, P2: PVOID): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SetDIBColorTable*(P1: HDC, P2: UINT, P3: UINT, P4: ptr RGBQUAD): UINT {.winapi, dynlib: "gdi32", importc.}
proc SetDIBits*(P1: HDC, P2: HBITMAP, P3: UINT, P4: UINT, P5: PCVOID, P6: ptr BITMAPINFO, P7: UINT): int32 {.winapi, dynlib: "gdi32", importc.}
proc SetDIBitsToDevice*(P1: HDC, P2: int32, P3: int32, P4: DWORD, P5: DWORD, P6: int32, P7: int32, P8: UINT, P9: UINT, P10: PCVOID, P11: ptr BITMAPINFO, P12: UINT): int32 {.winapi, dynlib: "gdi32", importc.}
proc SetEnhMetaFileBits*(P1: UINT, P2: ptr BYTE): HENHMETAFILE {.winapi, dynlib: "gdi32", importc.}
proc SetGraphicsMode*(P1: HDC, P2: int32): int32 {.winapi, dynlib: "gdi32", importc.}
proc SetICMMode*(P1: HDC, P2: int32): int32 {.winapi, dynlib: "gdi32", importc.}
proc SetICMProfileA*(P1: HDC, P2: LPSTR): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SetICMProfileW*(P1: HDC, P2: LPWSTR): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SetMapMode*(P1: HDC, P2: int32): int32 {.winapi, dynlib: "gdi32", importc.}
proc SetLayout*(P1: HDC, P2: DWORD): DWORD {.winapi, dynlib: "gdi32", importc.}
proc GetLayout*(P1: HDC): DWORD {.winapi, dynlib: "gdi32", importc.}
proc SetMapperFlags*(P1: HDC, P2: DWORD): DWORD {.winapi, dynlib: "gdi32", importc.}
proc SetMetaFileBitsEx*(P1: UINT, P2: ptr BYTE): HMETAFILE {.winapi, dynlib: "gdi32", importc.}
proc SetMetaRgn*(P1: HDC): int32 {.winapi, dynlib: "gdi32", importc.}
proc SetMiterLimit*(P1: HDC, P2: FLOAT, P3: PFLOAT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SetPaletteEntries*(P1: HPALETTE, P2: UINT, P3: UINT, P4: ptr PALETTEENTRY): UINT {.winapi, dynlib: "gdi32", importc.}
proc SetPixel*(P1: HDC, P2: int32, P3: int32, P4: COLORREF): COLORREF {.winapi, dynlib: "gdi32", importc.}
proc SetPixelFormat*(P1: HDC, P2: int32, P3: ptr PIXELFORMATDESCRIPTOR): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SetPixelV*(P1: HDC, P2: int32, P3: int32, P4: COLORREF): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SetPolyFillMode*(P1: HDC, P2: int32): int32 {.winapi, dynlib: "gdi32", importc.}
proc SetRectRgn*(P1: HRGN, P2: int32, P3: int32, P4: int32, P5: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SetROP2*(P1: HDC, P2: int32): int32 {.winapi, dynlib: "gdi32", importc.}
proc SetStretchBltMode*(P1: HDC, P2: int32): int32 {.winapi, dynlib: "gdi32", importc.}
proc SetSystemPaletteUse*(P1: HDC, P2: UINT): UINT {.winapi, dynlib: "gdi32", importc.}
proc SetTextAlign*(P1: HDC, P2: UINT): UINT {.winapi, dynlib: "gdi32", importc.}
proc SetTextCharacterExtra*(P1: HDC, P2: int32): int32 {.winapi, dynlib: "gdi32", importc.}
proc SetTextColor*(P1: HDC, P2: COLORREF): COLORREF {.winapi, dynlib: "gdi32", importc.}
proc SetTextJustification*(P1: HDC, P2: int32, P3: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SetViewportExtEx*(P1: HDC, P2: int32, P3: int32, P4: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SetViewportOrgEx*(P1: HDC, P2: int32, P3: int32, P4: LPPOINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SetWindowExtEx*(P1: HDC, P2: int32, P3: int32, P4: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SetWindowOrgEx*(P1: HDC, P2: int32, P3: int32, P4: LPPOINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SetWinMetaFileBits*(P1: UINT, P2: ptr BYTE, P3: HDC, P4: ptr METAFILEPICT): HENHMETAFILE {.winapi, dynlib: "gdi32", importc.}
proc SetWorldTransform*(P1: HDC, P2: ptr XFORM): BOOL {.winapi, dynlib: "gdi32", importc.}
proc StartDocA*(P1: HDC, P2: ptr DOCINFOA): int32 {.winapi, dynlib: "gdi32", importc.}
proc StartDocW*(P1: HDC, P2: ptr DOCINFOW): int32 {.winapi, dynlib: "gdi32", importc.}
proc StartPage*(P1: HDC): int32 {.winapi, dynlib: "gdi32", importc.}
proc StretchBlt*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32, P6: HDC, P7: int32, P8: int32, P9: int32, P10: int32, P11: DWORD): BOOL {.winapi, dynlib: "gdi32", importc.}
proc StretchDIBits*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32, P6: int32, P7: int32, P8: int32, P9: int32, P10: pointer, P11: ptr BITMAPINFO, P12: UINT, P13: DWORD): int32 {.winapi, dynlib: "gdi32", importc.}
proc StrokeAndFillPath*(P1: HDC): BOOL {.winapi, dynlib: "gdi32", importc.}
proc StrokePath*(P1: HDC): BOOL {.winapi, dynlib: "gdi32", importc.}
proc SwapBuffers*(P1: HDC): BOOL {.winapi, dynlib: "gdi32", importc.}
proc TextOutA*(P1: HDC, P2: int32, P3: int32, P4: LPCSTR, P5: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc TextOutW*(P1: HDC, P2: int32, P3: int32, P4: LPCWSTR, P5: int32): BOOL {.winapi, dynlib: "gdi32", importc.}
proc TranslateCharsetInfo*(P1: PDWORD, P2: LPCHARSETINFO, P3: DWORD): BOOL {.winapi, dynlib: "gdi32", importc.}
proc UnrealizeObject*(P1: HGDIOBJ): BOOL {.winapi, dynlib: "gdi32", importc.}
proc UpdateColors*(P1: HDC): BOOL {.winapi, dynlib: "gdi32", importc.}
proc UpdateICMRegKeyA*(P1: DWORD, P2: DWORD, P3: LPSTR, P4: UINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc UpdateICMRegKeyW*(P1: DWORD, P2: DWORD, P3: LPWSTR, P4: UINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc WidenPath*(P1: HDC): BOOL {.winapi, dynlib: "gdi32", importc.}
proc wglCopyContext*(P1: HGLRC, P2: HGLRC, P3: UINT): BOOL {.winapi, dynlib: "opengl32", importc.}
proc wglCreateContext*(P1: HDC): HGLRC {.winapi, dynlib: "opengl32", importc.}
proc wglCreateLayerContext*(P1: HDC, P2: int32): HGLRC {.winapi, dynlib: "opengl32", importc.}
proc wglDeleteContext*(P1: HGLRC): BOOL {.winapi, dynlib: "opengl32", importc.}
proc wglDescribeLayerPlane*(P1: HDC, P2: int32, P3: int32, P4: UINT, P5: LPLAYERPLANEDESCRIPTOR): BOOL {.winapi, dynlib: "opengl32", importc.}
proc wglGetCurrentContext*(): HGLRC {.winapi, dynlib: "opengl32", importc.}
proc wglGetCurrentDC*(): HDC {.winapi, dynlib: "opengl32", importc.}
proc wglGetLayerPaletteEntries*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: ptr COLORREF): int32 {.winapi, dynlib: "opengl32", importc.}
proc wglGetProcAddress*(P1: LPCSTR): PROC {.winapi, dynlib: "opengl32", importc.}
proc wglMakeCurrent*(P1: HDC, P2: HGLRC): BOOL {.winapi, dynlib: "opengl32", importc.}
proc wglRealizeLayerPalette*(P1: HDC, P2: int32, P3: BOOL): BOOL {.winapi, dynlib: "opengl32", importc.}
proc wglSetLayerPaletteEntries*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: ptr COLORREF): int32 {.winapi, dynlib: "opengl32", importc.}
proc wglShareLists*(P1: HGLRC, P2: HGLRC): BOOL {.winapi, dynlib: "opengl32", importc.}
proc wglSwapLayerBuffers*(P1: HDC, P2: UINT): BOOL {.winapi, dynlib: "opengl32", importc.}
proc wglUseFontBitmapsA*(P1: HDC, P2: DWORD, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "opengl32", importc.}
proc wglUseFontBitmapsW*(P1: HDC, P2: DWORD, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "opengl32", importc.}
proc wglUseFontOutlinesA*(P1: HDC, P2: DWORD, P3: DWORD, P4: DWORD, P5: FLOAT, P6: FLOAT, P7: int32, P8: LPGLYPHMETRICSFLOAT): BOOL {.winapi, dynlib: "opengl32", importc.}
proc wglUseFontOutlinesW*(P1: HDC, P2: DWORD, P3: DWORD, P4: DWORD, P5: FLOAT, P6: FLOAT, P7: int32, P8: LPGLYPHMETRICSFLOAT): BOOL {.winapi, dynlib: "opengl32", importc.}

type
  PWGLSWAP* = ptr WGLSWAP
  WGLSWAP* {.final, pure.} = object
    hdc*: HDC
    uiFlags*: UINT

const
  WGL_SWAPMULTIPLE_MAX* = 16

proc wglSwapMultipleBuffers*(P1: UINT, P2: ptr WGLSWAP): DWORD {.winapi, dynlib: "opengl32", importc.}
proc GdiAlphaBlend*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32, P6: HDC, P7: int32, P8: int32, P9: int32, P10: int32, P11: BLENDFUNCTION): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GradientFill*(P1: HDC, P2: PTRIVERTEX, P3: ULONG, P4: PVOID, P5: ULONG, P6: ULONG): BOOL {.winapi, dynlib: "msimg32", importc.}
proc TransparentBlt*(P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32, P6: HDC, P7: int32, P8: int32, P9: int32, P10: int32, P11: UINT): BOOL {.winapi, dynlib: "msimg32", importc.}
proc SetDCBrushColor*(P1: HDC, P2: COLORREF): COLORREF {.winapi, dynlib: "gdi32", importc.}
proc SetDCPenColor*(P1: HDC, P2: COLORREF): COLORREF {.winapi, dynlib: "gdi32", importc.}
proc AddFontMemResourceEx*(P1: PVOID, P2: DWORD, P3: PVOID, P4: ptr DWORD): HANDLE {.winapi, dynlib: "gdi32", importc.}
proc AddFontResourceExA*(P1: LPCSTR, P2: DWORD, P3: PVOID): int32 {.winapi, dynlib: "gdi32", importc.}
proc AddFontResourceExW*(P1: LPCWSTR, P2: DWORD, P3: PVOID): int32 {.winapi, dynlib: "gdi32", importc.}
proc RemoveFontMemResourceEx*(P1: HANDLE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc RemoveFontResourceExA*(P1: LPCSTR, P2: DWORD, P3: PVOID): BOOL {.winapi, dynlib: "gdi32", importc.}
proc RemoveFontResourceExW*(P1: LPCWSTR, P2: DWORD, P3: PVOID): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetFontUnicodeRanges*(P1: HDC, P2: LPGLYPHSET): DWORD {.winapi, dynlib: "gdi32", importc.}
proc GetGlyphIndicesA*(P1: HDC, P2: LPCSTR, P3: int32, P4: LPWORD, P5: DWORD): DWORD {.winapi, dynlib: "gdi32", importc.}
proc GetGlyphIndicesW*(P1: HDC, P2: LPCWSTR, P3: int32, P4: LPWORD, P5: DWORD): DWORD {.winapi, dynlib: "gdi32", importc.}
proc GetTextExtentPointI*(P1: HDC, P2: LPWORD, P3: int32, P4: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetTextExtentExPointI*(P1: HDC, P2: LPWORD, P3: int32, P4: int32, P5: LPINT, P6: LPINT, P7: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetCharWidthI*(P1: HDC, P2: UINT, P3: UINT, P4: LPWORD, P5: LPINT): BOOL {.winapi, dynlib: "gdi32", importc.}
proc GetCharABCWidthsI*(P1: HDC, P2: UINT, P3: UINT, P4: LPWORD, P5: LPABC): BOOL {.winapi, dynlib: "gdi32", importc.}

when not defined(winansi):
  type
    BCHAR* = WCHAR
    DOCINFO* = DOCINFOW
    LOGFONT* = LOGFONTW
    TEXTMETRIC* = TEXTMETRICW
    NPTEXTMETRIC* = NPTEXTMETRICW
    ICMENUMPROC* = ICMENUMPROCW
    FONTENUMPROC* = FONTENUMPROCW
    DEVMODE* = DEVMODEW
    EXTLOGFONT* = EXTLOGFONTW
    GCP_RESULTS* = GCP_RESULTSW
    OUTLINETEXTMETRIC* = OUTLINETEXTMETRICW
    POLYTEXT* = POLYTEXTW
    NEWTEXTMETRIC* = NEWTEXTMETRICW
    NEWTEXTMETRICEX* = NEWTEXTMETRICEXW
    ENUMLOGFONT* = ENUMLOGFONTW
    ENUMLOGFONTEX* = ENUMLOGFONTEXW
    DISPLAY_DEVICE* = DISPLAY_DEVICEW

  proc AddFontResource*(P1: LPCWSTR): int32 {.winapi, dynlib: "gdi32", importc: "AddFontResourceW".}
  proc CopyEnhMetaFile*(P1: HENHMETAFILE, P2: LPCWSTR): HENHMETAFILE {.winapi, dynlib: "gdi32", importc: "CopyEnhMetaFileW".}
  proc CopyMetaFile*(P1: HMETAFILE, P2: LPCWSTR): HMETAFILE {.winapi, dynlib: "gdi32", importc: "CopyMetaFileW".}
  proc CreateColorSpace*(P1: LPLOGCOLORSPACEW): HCOLORSPACE {.winapi, dynlib: "gdi32", importc: "CreateColorSpaceW".}
  proc CreateDC*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: ptr DEVMODEW): HDC {.winapi, dynlib: "gdi32", importc: "CreateDCW".}
  proc CreateEnhMetaFile*(P1: HDC, P2: LPCWSTR, P3: LPCRECT, P4: LPCWSTR): HDC {.winapi, dynlib: "gdi32", importc: "CreateEnhMetaFileW".}
  proc CreateFont*(P1: int32, P2: int32, P3: int32, P4: int32, P5: int32, P6: DWORD, P7: DWORD, P8: DWORD, P9: DWORD, P10: DWORD, P11: DWORD, P12: DWORD, P13: DWORD, P14: LPCWSTR): HFONT {.winapi, dynlib: "gdi32", importc: "CreateFontW".}
  proc CreateFontIndirect*(P1: ptr LOGFONTW): HFONT {.winapi, dynlib: "gdi32", importc: "CreateFontIndirectW".}
  proc CreateIC*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: ptr DEVMODEW): HDC {.winapi, dynlib: "gdi32", importc: "CreateICW".}
  proc CreateMetaFile*(P1: LPCWSTR): HDC {.winapi, dynlib: "gdi32", importc: "CreateMetaFileW".}
  proc CreateScalableFontResource*(P1: DWORD, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "gdi32", importc: "CreateScalableFontResourceW".}
  proc DeviceCapabilities*(P1: LPCWSTR, P2: LPCWSTR, P3: WORD, P4: LPWSTR, P5: ptr DEVMODEW): DWORD {.winapi, dynlib: "winspool.drv", importc: "DeviceCapabilitiesW".}
  proc EnumFontFamilies*(P1: HDC, P2: LPCWSTR, P3: FONTENUMPROCW, P4: LPARAM): int32 {.winapi, dynlib: "gdi32", importc: "EnumFontFamiliesW".}
  proc EnumFontFamiliesEx*(P1: HDC, P2: PLOGFONTW, P3: FONTENUMPROCW, P4: LPARAM, P5: DWORD): int32 {.winapi, dynlib: "gdi32", importc: "EnumFontFamiliesExW".}
  proc EnumFonts*(P1: HDC, P2: LPCWSTR, P3: FONTENUMPROCW, P4: LPARAM): int32 {.winapi, dynlib: "gdi32", importc: "EnumFontsW".}
  proc EnumICMProfiles*(P1: HDC, P2: ICMENUMPROCW, P3: LPARAM): int32 {.winapi, dynlib: "gdi32", importc: "EnumICMProfilesW".}
  proc ExtTextOut*(P1: HDC, P2: int32, P3: int32, P4: UINT, P5: LPCRECT, P6: LPCWSTR, P7: UINT, P8: ptr INT): BOOL {.winapi, dynlib: "gdi32", importc: "ExtTextOutW".}
  proc GetCharABCWidthsFloat*(P1: HDC, P2: UINT, P3: UINT, P4: LPABCFLOAT): BOOL {.winapi, dynlib: "gdi32", importc: "GetCharABCWidthsFloatW".}
  proc GetCharABCWidths*(P1: HDC, P2: UINT, P3: UINT, P4: LPABC): BOOL {.winapi, dynlib: "gdi32", importc: "GetCharABCWidthsW".}
  proc GetCharacterPlacement*(P1: HDC, P2: LPCWSTR, P3: int32, P4: int32, P5: LPGCP_RESULTSW, P6: DWORD): DWORD {.winapi, dynlib: "gdi32", importc: "GetCharacterPlacementW".}
  proc GetCharWidth32*(P1: HDC, P2: UINT, P3: UINT, P4: LPINT): BOOL {.winapi, dynlib: "gdi32", importc: "GetCharWidth32W".}
  proc GetCharWidthFloat*(P1: HDC, P2: UINT, P3: UINT, P4: PFLOAT): BOOL {.winapi, dynlib: "gdi32", importc: "GetCharWidthFloatW".}
  proc GetCharWidth*(P1: HDC, P2: UINT, P3: UINT, P4: LPINT): BOOL {.winapi, dynlib: "gdi32", importc: "GetCharWidthW".}
  proc GetEnhMetaFile*(P1: LPCWSTR): HENHMETAFILE {.winapi, dynlib: "gdi32", importc: "GetEnhMetaFileW".}
  proc GetEnhMetaFileDescription*(P1: HENHMETAFILE, P2: UINT, P3: LPWSTR): UINT {.winapi, dynlib: "gdi32", importc: "GetEnhMetaFileDescriptionW".}
  proc GetGlyphOutline*(P1: HDC, P2: UINT, P3: UINT, P4: LPGLYPHMETRICS, P5: DWORD, P6: PVOID, P7: ptr MAT2): DWORD {.winapi, dynlib: "gdi32", importc: "GetGlyphOutlineW".}
  proc GetICMProfile*(P1: HDC, P2: DWORD, P3: LPWSTR): BOOL {.winapi, dynlib: "gdi32", importc: "GetICMProfileW".}
  proc GetKerningPairs*(P1: HDC, P2: DWORD, P3: LPKERNINGPAIR): DWORD {.winapi, dynlib: "gdi32", importc: "GetKerningPairsW".}
  proc GetLogColorSpace*(P1: HCOLORSPACE, P2: LPLOGCOLORSPACEW, P3: DWORD): BOOL {.winapi, dynlib: "gdi32", importc: "GetLogColorSpaceW".}
  proc GetMetaFile*(P1: LPCWSTR): HMETAFILE {.winapi, dynlib: "gdi32", importc: "GetMetaFileW".}
  proc GetObject*(P1: HGDIOBJ, P2: int32, P3: PVOID): int32 {.winapi, dynlib: "gdi32", importc: "GetObjectW".}
  proc GetOutlineTextMetrics*(P1: HDC, P2: UINT, P3: LPOUTLINETEXTMETRICW): UINT {.winapi, dynlib: "gdi32", importc: "GetOutlineTextMetricsW".}
  proc GetTextExtentPoint*(P1: HDC, P2: LPCWSTR, P3: int32, P4: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc: "GetTextExtentPointW".}
  proc GetTextExtentExPoint*(P1: HDC, P2: LPCWSTR, P3: int32, P4: int32, P5: LPINT, P6: LPINT, P7: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc: "GetTextExtentExPointW".}
  proc GetTextExtentPoint32*(P1: HDC, P2: LPCWSTR, P3: int32, P4: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc: "GetTextExtentPoint32W".}
  proc GetTextFace*(P1: HDC, P2: int32, P3: LPWSTR): int32 {.winapi, dynlib: "gdi32", importc: "GetTextFaceW".}
  proc GetTextMetrics*(P1: HDC, P2: LPTEXTMETRICW): BOOL {.winapi, dynlib: "gdi32", importc: "GetTextMetricsW".}
  proc PolyTextOut*(P1: HDC, P2: ptr POLYTEXTW, P3: int32): BOOL {.winapi, dynlib: "gdi32", importc: "PolyTextOutW".}
  proc RemoveFontResource*(P1: LPCWSTR): BOOL {.winapi, dynlib: "gdi32", importc: "RemoveFontResourceW".}
  proc ResetDC*(P1: HDC, P2: ptr DEVMODEW): HDC {.winapi, dynlib: "gdi32", importc: "ResetDCW".}
  proc SetICMProfile*(P1: HDC, P2: LPWSTR): BOOL {.winapi, dynlib: "gdi32", importc: "SetICMProfileW".}
  proc StartDoc*(P1: HDC, P2: ptr DOCINFOW): int32 {.winapi, dynlib: "gdi32", importc: "StartDocW".}
  proc TextOut*(P1: HDC, P2: int32, P3: int32, P4: LPCWSTR, P5: int32): BOOL {.winapi, dynlib: "gdi32", importc: "TextOutW".}
  proc UpdateICMRegKey*(P1: DWORD, P2: DWORD, P3: LPWSTR, P4: UINT): BOOL {.winapi, dynlib: "gdi32", importc: "UpdateICMRegKeyW".}
  proc wglUseFontBitmaps*(P1: HDC, P2: DWORD, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "opengl32", importc: "wglUseFontBitmapsW".}
  proc wglUseFontOutlines*(P1: HDC, P2: DWORD, P3: DWORD, P4: DWORD, P5: FLOAT, P6: FLOAT, P7: int32, P8: LPGLYPHMETRICSFLOAT): BOOL {.winapi, dynlib: "opengl32", importc: "wglUseFontOutlinesW".}

  type
    ENUMLOGFONTEXDV* = ENUMLOGFONTEXDVW
    PENUMLOGFONTEXDV* = PENUMLOGFONTEXDVW
    LPENUMLOGFONTEXDV* = LPENUMLOGFONTEXDVW

  proc AddFontResourceEx*(P1: LPCWSTR, P2: DWORD, P3: PVOID): int32 {.winapi, dynlib: "gdi32", importc: "AddFontResourceExW".}
  proc RemoveFontResourceEx*(P1: LPCWSTR, P2: DWORD, P3: PVOID): BOOL {.winapi, dynlib: "gdi32", importc: "RemoveFontResourceExW".}
  proc GetGlyphIndices*(P1: HDC, P2: LPCWSTR, P3: int32, P4: LPWORD, P5: DWORD): DWORD {.winapi, dynlib: "gdi32", importc: "GetGlyphIndicesW".}

else:
  type
    BCHAR* = BYTE
    DOCINFO* = DOCINFOA
    LOGFONT* = LOGFONTA
    TEXTMETRIC* = TEXTMETRICA
    NPTEXTMETRIC* = NPTEXTMETRICA
    ICMENUMPROC* = ICMENUMPROCA
    FONTENUMPROC* = FONTENUMPROCA
    DEVMODE* = DEVMODEA
    EXTLOGFONT* = EXTLOGFONTA
    GCP_RESULTS* = GCP_RESULTSA
    OUTLINETEXTMETRIC* = OUTLINETEXTMETRICA
    POLYTEXT* = POLYTEXTA
    NEWTEXTMETRIC* = NEWTEXTMETRICA
    NEWTEXTMETRICEX* = NEWTEXTMETRICEXA
    ENUMLOGFONT* = ENUMLOGFONTA
    ENUMLOGFONTEX* = ENUMLOGFONTEXA
    DISPLAY_DEVICE* = DISPLAY_DEVICEA

  proc AddFontResource*(P1: LPCSTR): int32 {.winapi, dynlib: "gdi32", importc: "AddFontResourceA".}
  proc CopyEnhMetaFile*(P1: HENHMETAFILE, P2: LPCSTR): HENHMETAFILE {.winapi, dynlib: "gdi32", importc: "CopyEnhMetaFileA".}
  proc CopyMetaFile*(P1: HMETAFILE, P2: LPCSTR): HMETAFILE {.winapi, dynlib: "gdi32", importc: "CopyMetaFileA".}
  proc CreateColorSpace*(P1: LPLOGCOLORSPACEA): HCOLORSPACE {.winapi, dynlib: "gdi32", importc: "CreateColorSpaceA".}
  proc CreateDC*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: ptr DEVMODEA): HDC {.winapi, dynlib: "gdi32", importc: "CreateDCA".}
  proc CreateEnhMetaFile*(P1: HDC, P2: LPCSTR, P3: LPCRECT, P4: LPCSTR): HDC {.winapi, dynlib: "gdi32", importc: "CreateEnhMetaFileA".}
  proc CreateFont*(P1: int32, P2: int32, P3: int32, P4: int32, P5: int32, P6: DWORD, P7: DWORD, P8: DWORD, P9: DWORD, P10: DWORD, P11: DWORD, P12: DWORD, P13: DWORD, P14: LPCSTR): HFONT {.winapi, dynlib: "gdi32", importc: "CreateFontA".}
  proc CreateFontIndirect*(P1: ptr LOGFONTA): HFONT {.winapi, dynlib: "gdi32", importc: "CreateFontIndirectA".}
  proc CreateIC*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: ptr DEVMODEA): HDC {.winapi, dynlib: "gdi32", importc: "CreateICA".}
  proc CreateMetaFile*(P1: LPCSTR): HDC {.winapi, dynlib: "gdi32", importc: "CreateMetaFileA".}
  proc CreateScalableFontResource*(P1: DWORD, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR): BOOL {.winapi, dynlib: "gdi32", importc: "CreateScalableFontResourceA".}
  proc DeviceCapabilities*(P1: LPCSTR, P2: LPCSTR, P3: WORD, P4: LPSTR, P5: ptr DEVMODEA): DWORD {.winapi, dynlib: "winspool.drv", importc: "DeviceCapabilitiesA".}
  proc EnumFontFamilies*(P1: HDC, P2: LPCSTR, P3: FONTENUMPROCA, P4: LPARAM): int32 {.winapi, dynlib: "gdi32", importc: "EnumFontFamiliesA".}
  proc EnumFontFamiliesEx*(P1: HDC, P2: PLOGFONTA, P3: FONTENUMPROCA, P4: LPARAM, P5: DWORD): int32 {.winapi, dynlib: "gdi32", importc: "EnumFontFamiliesExA".}
  proc EnumFonts*(P1: HDC, P2: LPCSTR, P3: FONTENUMPROCA, P4: LPARAM): int32 {.winapi, dynlib: "gdi32", importc: "EnumFontsA".}
  proc EnumICMProfiles*(P1: HDC, P2: ICMENUMPROCA, P3: LPARAM): int32 {.winapi, dynlib: "gdi32", importc: "EnumICMProfilesA".}
  proc ExtTextOut*(P1: HDC, P2: int32, P3: int32, P4: UINT, P5: LPCRECT, P6: LPCSTR, P7: UINT, P8: ptr INT): BOOL {.winapi, dynlib: "gdi32", importc: "ExtTextOutA".}
  proc GetCharWidthFloat*(P1: HDC, P2: UINT, P3: UINT, P4: PFLOAT): BOOL {.winapi, dynlib: "gdi32", importc: "GetCharWidthFloatA".}
  proc GetCharWidth*(P1: HDC, P2: UINT, P3: UINT, P4: LPINT): BOOL {.winapi, dynlib: "gdi32", importc: "GetCharWidthA".}
  proc GetCharacterPlacement*(P1: HDC, P2: LPCSTR, P3: int32, P4: int32, P5: LPGCP_RESULTSA, P6: DWORD): DWORD {.winapi, dynlib: "gdi32", importc: "GetCharacterPlacementA".}
  proc GetCharABCWidths*(P1: HDC, P2: UINT, P3: UINT, P4: LPABC): BOOL {.winapi, dynlib: "gdi32", importc: "GetCharABCWidthsA".}
  proc GetCharABCWidthsFloat*(P1: HDC, P2: UINT, P3: UINT, P4: LPABCFLOAT): BOOL {.winapi, dynlib: "gdi32", importc: "GetCharABCWidthsFloatA".}
  proc GetCharWidth32*(P1: HDC, P2: UINT, P3: UINT, P4: LPINT): BOOL {.winapi, dynlib: "gdi32", importc: "GetCharWidth32A".}
  proc GetEnhMetaFile*(P1: LPCSTR): HENHMETAFILE {.winapi, dynlib: "gdi32", importc: "GetEnhMetaFileA".}
  proc GetEnhMetaFileDescription*(P1: HENHMETAFILE, P2: UINT, P3: LPSTR): UINT {.winapi, dynlib: "gdi32", importc: "GetEnhMetaFileDescriptionA".}
  proc GetGlyphOutline*(P1: HDC, P2: UINT, P3: UINT, P4: LPGLYPHMETRICS, P5: DWORD, P6: PVOID, P7: ptr MAT2): DWORD {.winapi, dynlib: "gdi32", importc: "GetGlyphOutlineA".}
  proc GetICMProfile*(P1: HDC, P2: DWORD, P3: LPSTR): BOOL {.winapi, dynlib: "gdi32", importc: "GetICMProfileA".}
  proc GetKerningPairs*(P1: HDC, P2: DWORD, P3: LPKERNINGPAIR): DWORD {.winapi, dynlib: "gdi32", importc: "GetKerningPairsA".}
  proc GetLogColorSpace*(P1: HCOLORSPACE, P2: LPLOGCOLORSPACEA, P3: DWORD): BOOL {.winapi, dynlib: "gdi32", importc: "GetLogColorSpaceA".}
  proc GetMetaFile*(P1: LPCSTR): HMETAFILE {.winapi, dynlib: "gdi32", importc: "GetMetaFileA".}
  proc GetObject*(P1: HGDIOBJ, P2: int32, P3: PVOID): int32 {.winapi, dynlib: "gdi32", importc: "GetObjectA".}
  proc GetOutlineTextMetrics*(P1: HDC, P2: UINT, P3: LPOUTLINETEXTMETRICA): UINT {.winapi, dynlib: "gdi32", importc: "GetOutlineTextMetricsA".}
  proc GetTextExtentPoint*(P1: HDC, P2: LPCSTR, P3: int32, P4: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc: "GetTextExtentPointA".}
  proc GetTextExtentExPoint*(P1: HDC, P2: LPCSTR, P3: int32, P4: int32, P5: LPINT, P6: LPINT, P7: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc: "GetTextExtentExPointA".}
  proc GetTextExtentPoint32*(P1: HDC, P2: LPCSTR, P3: int32, P4: LPSIZE): BOOL {.winapi, dynlib: "gdi32", importc: "GetTextExtentPoint32A".}
  proc GetTextFace*(P1: HDC, P2: int32, P3: LPSTR): int32 {.winapi, dynlib: "gdi32", importc: "GetTextFaceA".}
  proc GetTextMetrics*(P1: HDC, P2: LPTEXTMETRICA): BOOL {.winapi, dynlib: "gdi32", importc: "GetTextMetricsA".}
  proc PolyTextOut*(P1: HDC, P2: ptr POLYTEXTA, P3: int32): BOOL {.winapi, dynlib: "gdi32", importc: "PolyTextOutA".}
  proc RemoveFontResource*(P1: LPCSTR): BOOL {.winapi, dynlib: "gdi32", importc: "RemoveFontResourceA".}
  proc ResetDC*(P1: HDC, P2: ptr DEVMODEA): HDC {.winapi, dynlib: "gdi32", importc: "ResetDCA".}
  proc SetICMProfile*(P1: HDC, P2: LPSTR): BOOL {.winapi, dynlib: "gdi32", importc: "SetICMProfileA".}
  proc StartDoc*(P1: HDC, P2: ptr DOCINFOA): int32 {.winapi, dynlib: "gdi32", importc: "StartDocA".}
  proc TextOut*(P1: HDC, P2: int32, P3: int32, P4: LPCSTR, P5: int32): BOOL {.winapi, dynlib: "gdi32", importc: "TextOutA".}
  proc UpdateICMRegKey*(P1: DWORD, P2: DWORD, P3: LPSTR, P4: UINT): BOOL {.winapi, dynlib: "gdi32", importc: "UpdateICMRegKeyA".}
  proc wglUseFontBitmaps*(P1: HDC, P2: DWORD, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "opengl32", importc: "wglUseFontBitmapsA".}
  proc wglUseFontOutlines*(P1: HDC, P2: DWORD, P3: DWORD, P4: DWORD, P5: FLOAT, P6: FLOAT, P7: int32, P8: LPGLYPHMETRICSFLOAT): BOOL {.winapi, dynlib: "opengl32", importc: "wglUseFontOutlinesA".}

  type
    ENUMLOGFONTEXDV* = ENUMLOGFONTEXDVA
    PENUMLOGFONTEXDV* = PENUMLOGFONTEXDVA
    LPENUMLOGFONTEXDV* = LPENUMLOGFONTEXDVA

  proc AddFontResourceEx*(P1: LPCSTR, P2: DWORD, P3: PVOID): int32 {.winapi, dynlib: "gdi32", importc: "AddFontResourceExA".}
  proc RemoveFontResourceEx*(P1: LPCSTR, P2: DWORD, P3: PVOID): BOOL {.winapi, dynlib: "gdi32", importc: "RemoveFontResourceExA".}
  proc GetGlyphIndices*(P1: HDC, P2: LPCSTR, P3: int32, P4: LPWORD, P5: DWORD): DWORD {.winapi, dynlib: "gdi32", importc: "GetGlyphIndicesA".}

type
  LPDOCINFO* = ptr DOCINFO
  PLOGFONT* = ptr LOGFONT
  NPLOGFONT* = ptr LOGFONT
  LPLOGFONT* = ptr LOGFONT
  PTEXTMETRIC* = ptr TEXTMETRIC
  LPTEXTMETRIC* = ptr TEXTMETRIC
  PDEVMODE* = ptr DEVMODE
  NPDEVMODE* = ptr DEVMODE
  LPDEVMODE* = ptr DEVMODE
  PEXTLOGFONT* = ptr EXTLOGFONT
  NPEXTLOGFONT* = ptr EXTLOGFONT
  LPEXTLOGFONT* = ptr EXTLOGFONT
  LPGCP_RESULTS* = ptr GCP_RESULTS
  POUTLINETEXTMETRIC* = ptr OUTLINETEXTMETRIC
  NPOUTLINETEXTMETRIC* = ptr OUTLINETEXTMETRIC
  LPOUTLINETEXTMETRIC* = ptr OUTLINETEXTMETRIC
  PPOLYTEXT* = ptr POLYTEXT
  NPPOLYTEXT* = ptr POLYTEXT
  LPPOLYTEXT* = ptr POLYTEXT
  LPLOGCOLORSPACE* = ptr LOGCOLORSPACE
  PNEWTEXTMETRIC* = ptr NEWTEXTMETRIC
  NPNEWTEXTMETRIC* = ptr NEWTEXTMETRIC
  LPNEWTEXTMETRIC* = ptr NEWTEXTMETRIC
  LPENUMLOGFONT* = ptr ENUMLOGFONT
  LPENUMLOGFONTEX* = ptr ENUMLOGFONTEX
  PDISPLAY_DEVICE* = ptr DISPLAY_DEVICE
  LPDISPLAY_DEVICE* = ptr DISPLAY_DEVICE

proc `dmOrientation=`*(self: var DEVMODEA, x: int16) = self.u1.s1.dmOrientation = x
proc dmOrientation*(self: DEVMODEA): int16 = self.u1.s1.dmOrientation
proc `dmPaperSize=`*(self: var DEVMODEA, x: int16) = self.u1.s1.dmPaperSize = x
proc dmPaperSize*(self: DEVMODEA): int16 = self.u1.s1.dmPaperSize
proc `dmPaperLength=`*(self: var DEVMODEA, x: int16) = self.u1.s1.dmPaperLength = x
proc dmPaperLength*(self: DEVMODEA): int16 = self.u1.s1.dmPaperLength
proc `dmPaperWidth=`*(self: var DEVMODEA, x: int16) = self.u1.s1.dmPaperWidth = x
proc dmPaperWidth*(self: DEVMODEA): int16 = self.u1.s1.dmPaperWidth
proc `dmScale=`*(self: var DEVMODEA, x: int16) = self.u1.s1.dmScale = x
proc dmScale*(self: DEVMODEA): int16 = self.u1.s1.dmScale
proc `dmCopies=`*(self: var DEVMODEA, x: int16) = self.u1.s1.dmCopies = x
proc dmCopies*(self: DEVMODEA): int16 = self.u1.s1.dmCopies
proc `dmDefaultSource=`*(self: var DEVMODEA, x: int16) = self.u1.s1.dmDefaultSource = x
proc dmDefaultSource*(self: DEVMODEA): int16 = self.u1.s1.dmDefaultSource
proc `dmPrintQuality=`*(self: var DEVMODEA, x: int16) = self.u1.s1.dmPrintQuality = x
proc dmPrintQuality*(self: DEVMODEA): int16 = self.u1.s1.dmPrintQuality
proc `dmPosition=`*(self: var DEVMODEA, x: POINTL) = self.u1.dmPosition = x
proc dmPosition*(self: DEVMODEA): POINTL = self.u1.dmPosition
proc `dmDisplayOrientation=`*(self: var DEVMODEA, x: DWORD) = self.u1.dmDisplayOrientation = x
proc dmDisplayOrientation*(self: DEVMODEA): DWORD = self.u1.dmDisplayOrientation
proc `dmDisplayFixedOutput=`*(self: var DEVMODEA, x: DWORD) = self.u1.dmDisplayFixedOutput = x
proc dmDisplayFixedOutput*(self: DEVMODEA): DWORD = self.u1.dmDisplayFixedOutput
proc `dmDisplayFlags=`*(self: var DEVMODEA, x: DWORD) = self.u2.dmDisplayFlags = x
proc dmDisplayFlags*(self: DEVMODEA): DWORD = self.u2.dmDisplayFlags
proc `dmNup=`*(self: var DEVMODEA, x: DWORD) = self.u2.dmNup = x
proc dmNup*(self: DEVMODEA): DWORD = self.u2.dmNup
proc `dmOrientation=`*(self: var DEVMODEW, x: int16) = self.u1.s1.dmOrientation = x
proc dmOrientation*(self: DEVMODEW): int16 = self.u1.s1.dmOrientation
proc `dmPaperSize=`*(self: var DEVMODEW, x: int16) = self.u1.s1.dmPaperSize = x
proc dmPaperSize*(self: DEVMODEW): int16 = self.u1.s1.dmPaperSize
proc `dmPaperLength=`*(self: var DEVMODEW, x: int16) = self.u1.s1.dmPaperLength = x
proc dmPaperLength*(self: DEVMODEW): int16 = self.u1.s1.dmPaperLength
proc `dmPaperWidth=`*(self: var DEVMODEW, x: int16) = self.u1.s1.dmPaperWidth = x
proc dmPaperWidth*(self: DEVMODEW): int16 = self.u1.s1.dmPaperWidth
proc `dmScale=`*(self: var DEVMODEW, x: int16) = self.u1.s1.dmScale = x
proc dmScale*(self: DEVMODEW): int16 = self.u1.s1.dmScale
proc `dmCopies=`*(self: var DEVMODEW, x: int16) = self.u1.s1.dmCopies = x
proc dmCopies*(self: DEVMODEW): int16 = self.u1.s1.dmCopies
proc `dmDefaultSource=`*(self: var DEVMODEW, x: int16) = self.u1.s1.dmDefaultSource = x
proc dmDefaultSource*(self: DEVMODEW): int16 = self.u1.s1.dmDefaultSource
proc `dmPrintQuality=`*(self: var DEVMODEW, x: int16) = self.u1.s1.dmPrintQuality = x
proc dmPrintQuality*(self: DEVMODEW): int16 = self.u1.s1.dmPrintQuality
proc `dmPosition=`*(self: var DEVMODEW, x: POINTL) = self.u1.dmPosition = x
proc dmPosition*(self: DEVMODEW): POINTL = self.u1.dmPosition
proc `dmDisplayOrientation=`*(self: var DEVMODEW, x: DWORD) = self.u1.dmDisplayOrientation = x
proc dmDisplayOrientation*(self: DEVMODEW): DWORD = self.u1.dmDisplayOrientation
proc `dmDisplayFixedOutput=`*(self: var DEVMODEW, x: DWORD) = self.u1.dmDisplayFixedOutput = x
proc dmDisplayFixedOutput*(self: DEVMODEW): DWORD = self.u1.dmDisplayFixedOutput
proc `dmDisplayFlags=`*(self: var DEVMODEW, x: DWORD) = self.u2.dmDisplayFlags = x
proc dmDisplayFlags*(self: DEVMODEW): DWORD = self.u2.dmDisplayFlags
proc `dmNup=`*(self: var DEVMODEW, x: DWORD) = self.u2.dmNup = x
proc dmNup*(self: DEVMODEW): DWORD = self.u2.dmNup

# core/winuser.nim

const
  WC_DIALOG* = cast[LPTSTR](0x8002)
  FVIRTKEY* = 1
  FNOINVERT* = 2
  FSHIFT* = 4
  FCONTROL* = 8
  FALT* = 16
  ATF_TIMEOUTON* = 1
  ATF_ONOFFFEEDBACK* = 2
  ATF_AVAILABLE* = 4
  WH_MIN* = -1
  WH_MSGFILTER* = -1
  WH_JOURNALRECORD* = 0
  WH_JOURNALPLAYBACK* = 1
  WH_KEYBOARD* = 2
  WH_GETMESSAGE* = 3
  WH_CALLWNDPROC* = 4
  WH_CBT* = 5
  WH_SYSMSGFILTER* = 6
  WH_MOUSE* = 7
  WH_HARDWARE* = 8
  WH_DEBUG* = 9
  WH_SHELL* = 10
  WH_FOREGROUNDIDLE* = 11
  WH_CALLWNDPROCRET* = 12
  WH_KEYBOARD_LL* = 13
  WH_MOUSE_LL* = 14
  WH_MAX* = 14
  WH_MINHOOK* = WH_MIN
  WH_MAXHOOK* = WH_MAX
  HC_ACTION* = 0
  HC_GETNEXT* = 1
  HC_SKIP* = 2
  HC_NOREMOVE* = 3
  HC_NOREM* = HC_NOREMOVE
  HC_SYSMODALON* = HC_NOREMOVE + 1
  HC_SYSMODALOFF* = HC_NOREMOVE + 2
  HCBT_MOVESIZE* = 0
  HCBT_MINMAX* = 1
  HCBT_QS* = 2
  HCBT_CREATEWND* = 3
  HCBT_DESTROYWND* = 4
  HCBT_ACTIVATE* = 5
  HCBT_CLICKSKIPPED* = 6
  HCBT_KEYSKIPPED* = 7
  HCBT_SYSCOMMAND* = 8
  HCBT_SETFOCUS* = 9
  CF_TEXT* = 1
  CF_BITMAP* = 2
  CF_METAFILEPICT* = 3
  CF_SYLK* = 4
  CF_DIF* = 5
  CF_TIFF* = 6
  CF_OEMTEXT* = 7
  CF_DIB* = 8
  CF_PALETTE* = 9
  CF_PENDATA* = 10
  CF_RIFF* = 11
  CF_WAVE* = 12
  CF_UNICODETEXT* = 13
  CF_ENHMETAFILE* = 14
  CF_HDROP* = 15
  CF_LOCALE* = 16
  CF_MAX* = 17
  CF_OWNERDISPLAY* = 128
  CF_DSPTEXT* = 129
  CF_DSPBITMAP* = 130
  CF_DSPMETAFILEPICT* = 131
  CF_DSPENHMETAFILE* = 142
  CF_PRIVATEFIRST* = 512
  CF_PRIVATELAST* = 767
  CF_GDIOBJFIRST* = 768
  CF_GDIOBJLAST* = 1023
  HKL_PREV* = 0
  HKL_NEXT* = 1
  KLF_ACTIVATE* = 1
  KLF_SUBSTITUTE_OK* = 2
  KLF_UNLOADPREVIOUS* = 4
  KLF_REORDER* = 8
  KLF_REPLACELANG* = 16
  KLF_NOTELLSHELL* = 128
  KLF_SETFORPROCESS* = 256
  KL_NAMELENGTH* = 9
  MF_ENABLED* = 0
  MF_GRAYED* = 1
  MF_DISABLED* = 2
  MF_BITMAP* = 4
  MF_CHECKED* = 8
  MF_MENUBARBREAK* = 32
  MF_MENUBREAK* = 64
  MF_OWNERDRAW* = 256
  MF_POPUP* = 16
  MF_SEPARATOR* = 0x800
  MF_STRING* = 0
  MF_UNCHECKED* = 0
  MF_DEFAULT* = 4096
  MF_SYSMENU* = 0x2000
  MF_HELP* = 0x4000
  MF_END* = 128
  MF_RIGHTJUSTIFY* = 0x4000
  MF_MOUSESELECT* = 0x8000
  MF_INSERT* = 0
  MF_CHANGE* = 128
  MF_APPEND* = 256
  MF_DELETE* = 512
  MF_REMOVE* = 4096
  MF_USECHECKBITMAPS* = 512
  MF_UNHILITE* = 0
  MF_HILITE* = 128
  BSM_ALLCOMPONENTS* = 0
  BSM_VXDS* = 1
  BSM_NETDRIVER* = 2
  BSM_INSTALLABLEDRIVERS* = 4
  BSM_APPLICATIONS* = 8
  BSM_ALLDESKTOPS* = 16
  BSF_QUERY* = 0x00000001
  BSF_IGNORECURRENTTASK* = 0x00000002
  BSF_FLUSHDISK* = 0x00000004
  BSF_NOHANG* = 0x00000008
  BSF_POSTMESSAGE* = 0x00000010
  BSF_FORCEIFHUNG* = 0x00000020
  BSF_NOTIMEOUTIFNOTHUNG* = 0x00000040
  BSF_ALLOWSFW* = 0x00000080
  BSF_SENDNOTIFYMESSAGE* = 0x00000100
  BSF_RETURNHDESK* = 0x00000200
  BSF_LUID* = 0x00000400
  BROADCAST_QUERY_DENY* = 1112363332
  ENUM_CURRENT_SETTINGS* = 0xFFFFFFFF'u32
  ENUM_REGISTRY_SETTINGS* = 0xFFFFFFFE'u32
  CDS_UPDATEREGISTRY* = 1
  CDS_TEST* = 2
  CDS_FULLSCREEN* = 4
  CDS_GLOBAL* = 8
  CDS_SET_PRIMARY* = 16
  CDS_NORESET* = 0x10000000
  CDS_SETRECT* = 0x20000000
  CDS_RESET* = 0x40000000
  DISP_CHANGE_RESTART* = 1
  DISP_CHANGE_SUCCESSFUL* = 0
  DISP_CHANGE_FAILED* = -1
  DISP_CHANGE_BADMODE* = -2
  DISP_CHANGE_NOTUPDATED* = -3
  DISP_CHANGE_BADFLAGS* = -4
  DISP_CHANGE_BADPARAM* = -5
  BST_UNCHECKED* = 0
  BST_CHECKED* = 1
  BST_INDETERMINATE* = 2
  BST_PUSHED* = 4
  BST_FOCUS* = 8
  MF_BYCOMMAND* = 0
  MF_BYPOSITION* = 1024
  CWP_ALL* = 0
  CWP_SKIPINVISIBLE* = 1
  CWP_SKIPDISABLED* = 2
  CWP_SKIPTRANSPARENT* = 4
  IMAGE_BITMAP* = 0
  IMAGE_ICON* = 1
  IMAGE_CURSOR* = 2
  IMAGE_ENHMETAFILE* = 3
  DF_ALLOWOTHERACCOUNTHOOK* = 1
  DESKTOP_READOBJECTS* = 1
  DESKTOP_CREATEWINDOW* = 2
  DESKTOP_CREATEMENU* = 4
  DESKTOP_HOOKCONTROL* = 8
  DESKTOP_JOURNALRECORD* = 16
  DESKTOP_JOURNALPLAYBACK* = 32
  DESKTOP_ENUMERATE* = 64
  DESKTOP_WRITEOBJECTS* = 128
  DESKTOP_SWITCHDESKTOP* = 256
  CW_USEDEFAULT* = 0x80000000'i32
  WS_OVERLAPPED* = 0
  WS_TILED* = WS_OVERLAPPED
  WS_MAXIMIZEBOX* = 0x00010000
  WS_MINIMIZEBOX* = 0x00020000
  WS_TABSTOP* = 0x00010000
  WS_GROUP* = 0x00020000
  WS_THICKFRAME* = 0x00040000
  WS_SIZEBOX* = WS_THICKFRAME
  WS_SYSMENU* = 0x00080000
  WS_HSCROLL* = 0x00100000
  WS_VSCROLL* = 0x00200000
  WS_DLGFRAME* = 0x00400000
  WS_BORDER* = 0x00800000
  WS_CAPTION* = 0x00c00000
  WS_OVERLAPPEDWINDOW* = WS_OVERLAPPED or WS_CAPTION or WS_SYSMENU or WS_THICKFRAME or WS_MINIMIZEBOX or WS_MAXIMIZEBOX
  WS_TILEDWINDOW* = WS_OVERLAPPEDWINDOW
  WS_MAXIMIZE* = 0x01000000
  WS_CLIPCHILDREN* = 0x02000000
  WS_CLIPSIBLINGS* = 0x04000000
  WS_DISABLED* = 0x08000000
  WS_VISIBLE* = 0x10000000
  WS_MINIMIZE* = 0x20000000
  WS_ICONIC* = WS_MINIMIZE
  WS_CHILD* = 0x40000000
  WS_CHILDWINDOW* = 0x40000000
  WS_POPUP* = 0x80000000'i32
  WS_POPUPWINDOW* = WS_POPUP or WS_BORDER or WS_SYSMENU
  MDIS_ALLCHILDSTYLES* = 1
  BS_3STATE* = 5
  BS_AUTO3STATE* = 6
  BS_AUTOCHECKBOX* = 3
  BS_AUTORADIOBUTTON* = 9
  BS_BITMAP* = 128
  BS_BOTTOM* = 0x800
  BS_CENTER* = 0x300
  BS_CHECKBOX* = 2
  BS_DEFPUSHBUTTON* = 1
  BS_GROUPBOX* = 7
  BS_ICON* = 64
  BS_LEFT* = 256
  BS_LEFTTEXT* = 32
  BS_MULTILINE* = 0x2000
  BS_NOTIFY* = 0x4000
  BS_OWNERDRAW* = 0xb
  BS_PUSHBUTTON* = 0
  BS_PUSHLIKE* = 4096
  BS_RADIOBUTTON* = 4
  BS_RIGHT* = 512
  BS_RIGHTBUTTON* = 32
  BS_TEXT* = 0
  BS_TOP* = 0x400
  BS_USERBUTTON* = 8
  BS_VCENTER* = 0xc00
  BS_FLAT* = 0x8000
  CBS_AUTOHSCROLL* = 64
  CBS_DISABLENOSCROLL* = 0x800
  CBS_DROPDOWN* = 2
  CBS_DROPDOWNLIST* = 3
  CBS_HASSTRINGS* = 512
  CBS_LOWERCASE* = 0x4000
  CBS_NOINTEGRALHEIGHT* = 0x400
  CBS_OEMCONVERT* = 128
  CBS_OWNERDRAWFIXED* = 16
  CBS_OWNERDRAWVARIABLE* = 32
  CBS_SIMPLE* = 1
  CBS_SORT* = 256
  CBS_UPPERCASE* = 0x2000
  ES_AUTOHSCROLL* = 128
  ES_AUTOVSCROLL* = 64
  ES_CENTER* = 1
  ES_LEFT* = 0
  ES_LOWERCASE* = 16
  ES_MULTILINE* = 4
  ES_NOHIDESEL* = 256
  ES_NUMBER* = 0x2000
  ES_OEMCONVERT* = 0x400
  ES_PASSWORD* = 32
  ES_READONLY* = 0x800
  ES_RIGHT* = 2
  ES_UPPERCASE* = 8
  ES_WANTRETURN* = 4096
  LBS_DISABLENOSCROLL* = 4096
  LBS_EXTENDEDSEL* = 0x800
  LBS_HASSTRINGS* = 64
  LBS_MULTICOLUMN* = 512
  LBS_MULTIPLESEL* = 8
  LBS_NODATA* = 0x2000
  LBS_NOINTEGRALHEIGHT* = 256
  LBS_NOREDRAW* = 4
  LBS_NOSEL* = 0x4000
  LBS_NOTIFY* = 1
  LBS_OWNERDRAWFIXED* = 16
  LBS_OWNERDRAWVARIABLE* = 32
  LBS_SORT* = 2
  LBS_STANDARD* = 0xa00003
  LBS_USETABSTOPS* = 128
  LBS_WANTKEYBOARDINPUT* = 0x400
  SBS_BOTTOMALIGN* = 4
  SBS_HORZ* = 0
  SBS_LEFTALIGN* = 2
  SBS_RIGHTALIGN* = 4
  SBS_SIZEBOX* = 8
  SBS_SIZEBOXBOTTOMRIGHTALIGN* = 4
  SBS_SIZEBOXTOPLEFTALIGN* = 2
  SBS_SIZEGRIP* = 16
  SBS_TOPALIGN* = 2
  SBS_VERT* = 1
  SS_BITMAP* = 14
  SS_BLACKFRAME* = 7
  SS_BLACKRECT* = 4
  SS_CENTER* = 1
  SS_CENTERIMAGE* = 512
  SS_ENHMETAFILE* = 15
  SS_ETCHEDFRAME* = 18
  SS_ETCHEDHORZ* = 16
  SS_ETCHEDVERT* = 17
  SS_GRAYFRAME* = 8
  SS_GRAYRECT* = 5
  SS_ICON* = 3
  SS_LEFT* = 0
  SS_LEFTNOWORDWRAP* = 0xc
  SS_NOPREFIX* = 128
  SS_NOTIFY* = 256
  SS_OWNERDRAW* = 0xd
  SS_REALSIZEIMAGE* = 0x800
  SS_RIGHT* = 2
  SS_RIGHTJUST* = 0x400
  SS_SIMPLE* = 11
  SS_SUNKEN* = 4096
  SS_WHITEFRAME* = 9
  SS_WHITERECT* = 6
  SS_USERITEM* = 10
  SS_TYPEMASK* = 0x0000001F
  SS_ENDELLIPSIS* = 0x00004000
  SS_PATHELLIPSIS* = 0x00008000
  SS_WORDELLIPSIS* = 0x0000C000
  SS_ELLIPSISMASK* = 0x0000C000
  DS_ABSALIGN* = 0x0001
  DS_3DLOOK* = 0x0004
  DS_SYSMODAL* = 0x0002
  DS_FIXEDSYS* = 0x0008
  DS_NOFAILCREATE* = 0x0010
  DS_LOCALEDIT* = 0x0020
  DS_SETFONT* = 0x0040
  DS_MODALFRAME* = 0x0080
  DS_NOIDLEMSG* = 0x0100
  DS_SETFOREGROUND* = 0x0200
  DS_CONTROL* = 0x0400
  DS_CENTER* = 0x0800
  DS_CENTERMOUSE* = 0x1000
  DS_CONTEXTHELP* = 0x2000
  DS_SHELLFONT* = DS_SETFONT or DS_FIXEDSYS
  WS_EX_ACCEPTFILES* = 16
  WS_EX_APPWINDOW* = 0x40000
  WS_EX_CLIENTEDGE* = 512
  WS_EX_COMPOSITED* = 0x2000000
  WS_EX_CONTEXTHELP* = 0x400
  WS_EX_CONTROLPARENT* = 0x10000
  WS_EX_DLGMODALFRAME* = 1
  WS_EX_LAYERED* = 0x80000
  WS_EX_LAYOUTRTL* = 0x400000
  WS_EX_LEFT* = 0
  WS_EX_LEFTSCROLLBAR* = 0x4000
  WS_EX_LTRREADING* = 0
  WS_EX_MDICHILD* = 64
  WS_EX_NOACTIVATE* = 0x8000000
  WS_EX_NOINHERITLAYOUT* = 0x100000
  WS_EX_NOPARENTNOTIFY* = 4
  WS_EX_OVERLAPPEDWINDOW* = 0x300
  WS_EX_PALETTEWINDOW* = 0x188
  WS_EX_RIGHT* = 0x1000
  WS_EX_RIGHTSCROLLBAR* = 0
  WS_EX_RTLREADING* = 0x2000
  WS_EX_STATICEDGE* = 0x20000
  WS_EX_TOOLWINDOW* = 128
  WS_EX_TOPMOST* = 8
  WS_EX_TRANSPARENT* = 32
  WS_EX_WINDOWEDGE* = 256
  WINSTA_ENUMDESKTOPS* = 1
  WINSTA_READATTRIBUTES* = 2
  WINSTA_ACCESSCLIPBOARD* = 4
  WINSTA_CREATEDESKTOP* = 8
  WINSTA_WRITEATTRIBUTES* = 16
  WINSTA_ACCESSGLOBALATOMS* = 32
  WINSTA_EXITWINDOWS* = 64
  WINSTA_ENUMERATE* = 256
  WINSTA_READSCREEN* = 512
  DDL_READWRITE* = 0
  DDL_READONLY* = 1
  DDL_HIDDEN* = 2
  DDL_SYSTEM* = 4
  DDL_DIRECTORY* = 16
  DDL_ARCHIVE* = 32
  DDL_POSTMSGS* = 8192
  DDL_DRIVES* = 16384
  DDL_EXCLUSIVE* = 32768
  DC_ACTIVE* = 0x00000001
  DC_SMALLCAP* = 0x00000002
  DC_ICON* = 0x00000004
  DC_TEXT* = 0x00000008
  DC_INBUTTON* = 0x00000010
  DC_GRADIENT* = 0x00000020
  DC_BUTTONS* = 0x00001000
  BDR_RAISEDOUTER* = 1
  BDR_SUNKENOUTER* = 2
  BDR_RAISEDINNER* = 4
  BDR_SUNKENINNER* = 8
  BDR_OUTER* = 3
  BDR_INNER* = 0xc
  BDR_RAISED* = 5
  BDR_SUNKEN* = 10
  EDGE_RAISED* = BDR_RAISEDOUTER or BDR_RAISEDINNER
  EDGE_SUNKEN* = BDR_SUNKENOUTER or BDR_SUNKENINNER
  EDGE_ETCHED* = BDR_SUNKENOUTER or BDR_RAISEDINNER
  EDGE_BUMP* = BDR_RAISEDOUTER or BDR_SUNKENINNER
  BF_LEFT* = 1
  BF_TOP* = 2
  BF_RIGHT* = 4
  BF_BOTTOM* = 8
  BF_TOPLEFT* = BF_TOP or BF_LEFT
  BF_TOPRIGHT* = BF_TOP or BF_RIGHT
  BF_BOTTOMLEFT* = BF_BOTTOM or BF_LEFT
  BF_BOTTOMRIGHT* = BF_BOTTOM or BF_RIGHT
  BF_RECT* = BF_LEFT or BF_TOP or BF_RIGHT or BF_BOTTOM
  BF_DIAGONAL* = 16
  BF_DIAGONAL_ENDTOPRIGHT* = BF_DIAGONAL or BF_TOP or BF_RIGHT
  BF_DIAGONAL_ENDTOPLEFT* = BF_DIAGONAL or BF_TOP or BF_LEFT
  BF_DIAGONAL_ENDBOTTOMLEFT* = BF_DIAGONAL or BF_BOTTOM or BF_LEFT
  BF_DIAGONAL_ENDBOTTOMRIGHT* = BF_DIAGONAL or BF_BOTTOM or BF_RIGHT
  BF_MIDDLE* = 0x800
  BF_SOFT* = 0x1000
  BF_ADJUST* = 0x2000
  BF_FLAT* = 0x4000
  BF_MONO* = 0x8000
  DFC_CAPTION* = 1
  DFC_MENU* = 2
  DFC_SCROLL* = 3
  DFC_BUTTON* = 4
  DFC_POPUPMENU* = 5
  DFCS_CAPTIONCLOSE* = 0
  DFCS_CAPTIONMIN* = 1
  DFCS_CAPTIONMAX* = 2
  DFCS_CAPTIONRESTORE* = 3
  DFCS_CAPTIONHELP* = 4
  DFCS_MENUARROW* = 0
  DFCS_MENUCHECK* = 1
  DFCS_MENUBULLET* = 2
  DFCS_MENUARROWRIGHT* = 4
  DFCS_SCROLLUP* = 0
  DFCS_SCROLLDOWN* = 1
  DFCS_SCROLLLEFT* = 2
  DFCS_SCROLLRIGHT* = 3
  DFCS_SCROLLCOMBOBOX* = 5
  DFCS_SCROLLSIZEGRIP* = 8
  DFCS_SCROLLSIZEGRIPRIGHT* = 16
  DFCS_BUTTONCHECK* = 0
  DFCS_BUTTONRADIOIMAGE* = 1
  DFCS_BUTTONRADIOMASK* = 2
  DFCS_BUTTONRADIO* = 4
  DFCS_BUTTON3STATE* = 8
  DFCS_BUTTONPUSH* = 16
  DFCS_INACTIVE* = 256
  DFCS_PUSHED* = 512
  DFCS_CHECKED* = 1024
  DFCS_TRANSPARENT* = 0x800
  DFCS_HOT* = 0x1000
  DFCS_ADJUSTRECT* = 0x2000
  DFCS_FLAT* = 0x4000
  DFCS_MONO* = 0x8000
  DST_COMPLEX* = 0
  DST_TEXT* = 1
  DST_PREFIXTEXT* = 2
  DST_ICON* = 3
  DST_BITMAP* = 4
  DSS_NORMAL* = 0
  DSS_UNION* = 16
  DSS_DISABLED* = 32
  DSS_MONO* = 128
  DSS_RIGHT* = 0x8000
  DT_BOTTOM* = 8
  DT_CALCRECT* = 1024
  DT_CENTER* = 1
  DT_EDITCONTROL* = 8192
  DT_END_ELLIPSIS* = 32768
  DT_PATH_ELLIPSIS* = 16384
  DT_WORD_ELLIPSIS* = 0x40000
  DT_EXPANDTABS* = 64
  DT_EXTERNALLEADING* = 512
  DT_LEFT* = 0
  DT_MODIFYSTRING* = 65536
  DT_NOCLIP* = 256
  DT_NOPREFIX* = 2048
  DT_RIGHT* = 2
  DT_RTLREADING* = 131072
  DT_SINGLELINE* = 32
  DT_TABSTOP* = 128
  DT_TOP* = 0
  DT_VCENTER* = 4
  DT_WORDBREAK* = 16
  DT_INTERNAL* = 4096
  WB_ISDELIMITER* = 2
  WB_LEFT* = 0
  WB_RIGHT* = 1
  SB_HORZ* = 0
  SB_VERT* = 1
  SB_CTL* = 2
  SB_BOTH* = 3
  ESB_DISABLE_BOTH* = 3
  ESB_DISABLE_DOWN* = 2
  ESB_DISABLE_LEFT* = 1
  ESB_DISABLE_LTUP* = 1
  ESB_DISABLE_RIGHT* = 2
  ESB_DISABLE_RTDN* = 2
  ESB_DISABLE_UP* = 1
  ESB_ENABLE_BOTH* = 0
  SB_LINEUP* = 0
  SB_LINEDOWN* = 1
  SB_LINELEFT* = 0
  SB_LINERIGHT* = 1
  SB_PAGEUP* = 2
  SB_PAGEDOWN* = 3
  SB_PAGELEFT* = 2
  SB_PAGERIGHT* = 3
  SB_THUMBPOSITION* = 4
  SB_THUMBTRACK* = 5
  SB_ENDSCROLL* = 8
  SB_LEFT* = 6
  SB_RIGHT* = 7
  SB_BOTTOM* = 7
  SB_TOP* = 6

proc MAKEINTRESOURCEA*(i: WORD): LPSTR = cast[LPSTR](i)
proc MAKEINTRESOURCEW*(i: WORD): LPWSTR = cast[LPWSTR](i)

const
  RT_CURSOR* = cast[LPTSTR](1)
  RT_BITMAP* = cast[LPTSTR](2)
  RT_ICON* = cast[LPTSTR](3)
  RT_MENU* = cast[LPTSTR](4)
  RT_DIALOG* = cast[LPTSTR](5)
  RT_STRING* = cast[LPTSTR](6)
  RT_FONTDIR* = cast[LPTSTR](7)
  RT_FONT* = cast[LPTSTR](8)
  RT_ACCELERATOR* = cast[LPTSTR](9)
  RT_RCDATA* = cast[LPTSTR](10)
  RT_MESSAGETABLE* = cast[LPTSTR](11)
  RT_GROUP_CURSOR* = cast[LPTSTR](12)
  RT_GROUP_ICON* = cast[LPTSTR](14)
  RT_VERSION* = cast[LPTSTR](16)
  RT_DLGINCLUDE* = cast[LPTSTR](17)
  RT_PLUGPLAY* = cast[LPTSTR](19)
  RT_VXD* = cast[LPTSTR](20)
  RT_ANICURSOR* = cast[LPTSTR](21)
  RT_ANIICON* = cast[LPTSTR](22)
  RT_HTML* = cast[LPTSTR](23)
  RT_MANIFEST* = cast[LPTSTR](24)
  CREATEPROCESS_MANIFEST_RESOURCE_ID* = cast[LPTSTR](1)
  ISOLATIONAWARE_MANIFEST_RESOURCE_ID* = cast[LPTSTR](2)
  ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID* = cast[LPTSTR](3)
  EWX_LOGOFF* = 0
  EWX_SHUTDOWN* = 1
  EWX_REBOOT* = 2
  EWX_FORCE* = 4
  EWX_POWEROFF* = 8
  EWX_FORCEIFHUNG* = 16
  CS_BYTEALIGNCLIENT* = 4096
  CS_BYTEALIGNWINDOW* = 8192
  CS_KEYCVTWINDOW* = 4
  CS_NOKEYCVT* = 256
  CS_CLASSDC* = 64
  CS_DBLCLKS* = 8
  CS_GLOBALCLASS* = 16384
  CS_HREDRAW* = 2
  CS_NOCLOSE* = 512
  CS_OWNDC* = 32
  CS_PARENTDC* = 128
  CS_SAVEBITS* = 2048
  CS_VREDRAW* = 1
  CS_IME* = 0x10000
  GCW_ATOM* = -32
  GCL_CBCLSEXTRA* = -20
  GCL_CBWNDEXTRA* = -18
  GCL_HBRBACKGROUND* = -10
  GCL_HCURSOR* = -12
  GCL_HICON* = -14
  GCL_HICONSM* = -34
  GCL_HMODULE* = -16
  GCL_MENUNAME* = -8
  GCL_STYLE* = -26
  GCL_WNDPROC* = -24
  GCLP_HICONSM* = GCL_HICONSM
  GCLP_HICON* = GCL_HICON
  GCLP_HCURSOR* = GCL_HCURSOR
  GCLP_HBRBACKGROUND* = GCL_HBRBACKGROUND
  GCLP_HMODULE* = GCL_HMODULE
  GCLP_MENUNAME* = GCL_MENUNAME
  GCLP_WNDPROC* = GCL_WNDPROC
  IDC_ARROW* = cast[LPTSTR](32512)
  IDC_IBEAM* = cast[LPTSTR](32513)
  IDC_WAIT* = cast[LPTSTR](32514)
  IDC_CROSS* = cast[LPTSTR](32515)
  IDC_UPARROW* = cast[LPTSTR](32516)
  IDC_SIZENWSE* = cast[LPTSTR](32642)
  IDC_SIZENESW* = cast[LPTSTR](32643)
  IDC_SIZEWE* = cast[LPTSTR](32644)
  IDC_SIZENS* = cast[LPTSTR](32645)
  IDC_SIZEALL* = cast[LPTSTR](32646)
  IDC_NO* = cast[LPTSTR](32648)
  IDC_HAND* = cast[LPTSTR](32649)
  IDC_APPSTARTING* = cast[LPTSTR](32650)
  IDC_HELP* = cast[LPTSTR](32651)
  IDC_ICON* = cast[LPTSTR](32641)
  IDC_SIZE* = cast[LPTSTR](32640)
  IDI_APPLICATION* = cast[LPTSTR](32512)
  IDI_HAND* = cast[LPTSTR](32513)
  IDI_QUESTION* = cast[LPTSTR](32514)
  IDI_EXCLAMATION* = cast[LPTSTR](32515)
  IDI_ASTERISK* = cast[LPTSTR](32516)
  IDI_WINLOGO* = cast[LPTSTR](32517)
  IDI_WARNING* = IDI_EXCLAMATION
  IDI_ERROR* = IDI_HAND
  IDI_INFORMATION* = IDI_ASTERISK
  MIIM_STATE* = 1
  MIIM_ID* = 2
  MIIM_SUBMENU* = 4
  MIIM_CHECKMARKS* = 8
  MIIM_TYPE* = 16
  MIIM_DATA* = 32
  MIIM_STRING* = 64
  MIIM_BITMAP* = 128
  MIIM_FTYPE* = 256
  MIM_MAXHEIGHT* = 1
  MIM_BACKGROUND* = 2
  MIM_HELPID* = 4
  MIM_MENUDATA* = 8
  MIM_STYLE* = 16
  MIM_APPLYTOSUBMENUS* = -2147483648
  MNS_NOCHECK* = 0x80000000'u32
  MNS_MODELESS* = 0x40000000
  MNS_DRAGDROP* = 0x20000000
  MNS_AUTODISMISS* = 0x10000000
  MNS_NOTIFYBYPOS* = 0x08000000
  MNS_CHECKORBMP* = 0x04000000
  MFT_BITMAP* = 4
  MFT_MENUBARBREAK* = 32
  MFT_MENUBREAK* = 64
  MFT_OWNERDRAW* = 256
  MFT_RADIOCHECK* = 512
  MFT_RIGHTJUSTIFY* = 0x4000
  MFT_SEPARATOR* = 0x800
  MFT_RIGHTORDER* = 0x2000
  MFT_STRING* = 0
  MFS_CHECKED* = 8
  MFS_DEFAULT* = 4096
  MFS_DISABLED* = 3
  MFS_ENABLED* = 0
  MFS_GRAYED* = 3
  MFS_HILITE* = 128
  MFS_UNCHECKED* = 0
  MFS_UNHILITE* = 0
  GW_HWNDNEXT* = 2
  GW_HWNDPREV* = 3
  GW_CHILD* = 5
  GW_HWNDFIRST* = 0
  GW_HWNDLAST* = 1
  GW_OWNER* = 4
  SW_HIDE* = 0
  SW_NORMAL* = 1
  SW_SHOWNORMAL* = 1
  SW_SHOWMINIMIZED* = 2
  SW_MAXIMIZE* = 3
  SW_SHOWMAXIMIZED* = 3
  SW_SHOWNOACTIVATE* = 4
  SW_SHOW* = 5
  SW_MINIMIZE* = 6
  SW_SHOWMINNOACTIVE* = 7
  SW_SHOWNA* = 8
  SW_RESTORE* = 9
  SW_SHOWDEFAULT* = 10
  SW_FORCEMINIMIZE* = 11
  SW_MAX* = 11
  MB_USERICON* = 128
  MB_ICONASTERISK* = 64
  MB_ICONEXCLAMATION* = 0x30
  MB_ICONWARNING* = 0x30
  MB_ICONERROR* = 16
  MB_ICONHAND* = 16
  MB_ICONQUESTION* = 32
  MB_OK* = 0
  MB_ABORTRETRYIGNORE* = 2
  MB_APPLMODAL* = 0
  MB_DEFAULT_DESKTOP_ONLY* = 0x20000
  MB_HELP* = 0x4000
  MB_RIGHT* = 0x80000
  MB_RTLREADING* = 0x100000
  MB_TOPMOST* = 0x40000
  MB_DEFBUTTON1* = 0
  MB_DEFBUTTON2* = 256
  MB_DEFBUTTON3* = 512
  MB_DEFBUTTON4* = 0x300
  MB_ICONINFORMATION* = 64
  MB_ICONSTOP* = 16
  MB_OKCANCEL* = 1
  MB_RETRYCANCEL* = 5
  MB_SERVICE_NOTIFICATION* = 0x00040000
  MB_SERVICE_NOTIFICATION_NT3X* = 0x00040000
  MB_SETFOREGROUND* = 0x10000
  MB_SYSTEMMODAL* = 4096
  MB_TASKMODAL* = 0x2000
  MB_YESNO* = 4
  MB_YESNOCANCEL* = 3
  MB_ICONMASK* = 240
  MB_DEFMASK* = 3840
  MB_MODEMASK* = 0x00003000
  MB_MISCMASK* = 0x0000C000
  MB_NOFOCUS* = 0x00008000
  MB_TYPEMASK* = 15
  MB_CANCELTRYCONTINUE* = 6
  IDOK* = 1
  IDCANCEL* = 2
  IDABORT* = 3
  IDRETRY* = 4
  IDIGNORE* = 5
  IDYES* = 6
  IDNO* = 7
  IDCLOSE* = 8
  IDHELP* = 9
  IDTRYAGAIN* = 10
  IDCONTINUE* = 11
  GWL_EXSTYLE* = -20
  GWL_STYLE* = -16
  GWL_WNDPROC* = -4
  GWLP_WNDPROC* = -4
  GWL_HINSTANCE* = -6
  GWLP_HINSTANCE* = -6
  GWL_HWNDPARENT* = -8
  GWLP_HWNDPARENT* = -8
  GWL_ID* = -12
  GWLP_ID* = -12
  GWL_USERDATA* = -21
  GWLP_USERDATA* = -21
  DWL_DLGPROC* = 4
  DWLP_DLGPROC* = 4
  DWL_MSGRESULT* = 0
  DWLP_MSGRESULT* = 0
  DWL_USER* = 8
  DWLP_USER* = 8
  QS_KEY* = 1
  QS_MOUSEMOVE* = 2
  QS_MOUSEBUTTON* = 4
  QS_MOUSE* = 6
  QS_POSTMESSAGE* = 8
  QS_TIMER* = 16
  QS_PAINT* = 32
  QS_SENDMESSAGE* = 64
  QS_HOTKEY* = 128
  QS_ALLPOSTMESSAGE* = 256
  QS_RAWINPUT* = 1024
  QS_INPUT* = 7
  QS_ALLEVENTS* = 191
  QS_ALLINPUT* = 255
  MWMO_WAITALL* = 1
  MWMO_ALERTABLE* = 2
  MWMO_INPUTAVAILABLE* = 4
  COLOR_3DDKSHADOW* = 21
  COLOR_3DFACE* = 15
  COLOR_3DHILIGHT* = 20
  COLOR_3DHIGHLIGHT* = 20
  COLOR_3DLIGHT* = 22
  COLOR_BTNHILIGHT* = 20
  COLOR_3DSHADOW* = 16
  COLOR_ACTIVEBORDER* = 10
  COLOR_ACTIVECAPTION* = 2
  COLOR_APPWORKSPACE* = 12
  COLOR_BACKGROUND* = 1
  COLOR_DESKTOP* = 1
  COLOR_BTNFACE* = 15
  COLOR_BTNHIGHLIGHT* = 20
  COLOR_BTNSHADOW* = 16
  COLOR_BTNTEXT* = 18
  COLOR_CAPTIONTEXT* = 9
  COLOR_GRAYTEXT* = 17
  COLOR_HIGHLIGHT* = 13
  COLOR_HIGHLIGHTTEXT* = 14
  COLOR_INACTIVEBORDER* = 11
  COLOR_INACTIVECAPTION* = 3
  COLOR_INACTIVECAPTIONTEXT* = 19
  COLOR_INFOBK* = 24
  COLOR_INFOTEXT* = 23
  COLOR_MENU* = 4
  COLOR_MENUTEXT* = 7
  COLOR_SCROLLBAR* = 0
  COLOR_WINDOW* = 5
  COLOR_WINDOWFRAME* = 6
  COLOR_WINDOWTEXT* = 8
  COLOR_HOTLIGHT* = 26
  COLOR_GRADIENTACTIVECAPTION* = 27
  COLOR_GRADIENTINACTIVECAPTION* = 28
  CTLCOLOR_MSGBOX* = 0
  CTLCOLOR_EDIT* = 1
  CTLCOLOR_LISTBOX* = 2
  CTLCOLOR_BTN* = 3
  CTLCOLOR_DLG* = 4
  CTLCOLOR_SCROLLBAR* = 5
  CTLCOLOR_STATIC* = 6
  CTLCOLOR_MAX* = 7
  SM_CXSCREEN* = 0
  SM_CYSCREEN* = 1
  SM_CXVSCROLL* = 2
  SM_CYHSCROLL* = 3
  SM_CYCAPTION* = 4
  SM_CXBORDER* = 5
  SM_CYBORDER* = 6
  SM_CXDLGFRAME* = 7
  SM_CXFIXEDFRAME* = SM_CXDLGFRAME
  SM_CYDLGFRAME* = (SM_CXDLGFRAME + 1)
  SM_CYFIXEDFRAME* = SM_CYDLGFRAME
  SM_CYVTHUMB* = 9
  SM_CXHTHUMB* = 10
  SM_CXICON* = 11
  SM_CYICON* = 12
  SM_CXCURSOR* = 13
  SM_CYCURSOR* = 14
  SM_CYMENU* = 15
  SM_CXFULLSCREEN* = 16
  SM_CYFULLSCREEN* = 17
  SM_CYKANJIWINDOW* = 18
  SM_MOUSEPRESENT* = 19
  SM_CYVSCROLL* = 20
  SM_CXHSCROLL* = 21
  SM_DEBUG* = 22
  SM_SWAPBUTTON* = 23
  SM_RESERVED1* = 24
  SM_RESERVED2* = 25
  SM_RESERVED3* = 26
  SM_RESERVED4* = 27
  SM_CXMIN* = 28
  SM_CYMIN* = 29
  SM_CXSIZE* = 30
  SM_CYSIZE* = 31
  SM_CXSIZEFRAME* = 32
  SM_CXFRAME* = SM_CXSIZEFRAME
  SM_CYSIZEFRAME* = (SM_CXSIZEFRAME + 1)
  SM_CYFRAME* = SM_CYSIZEFRAME
  SM_CXMINTRACK* = (SM_CYSIZEFRAME + 1)
  SM_CYMINTRACK* = (SM_CYSIZEFRAME + 2)
  SM_CXDOUBLECLK* = (SM_CYSIZEFRAME + 3)
  SM_CYDOUBLECLK* = (SM_CYSIZEFRAME + 4)
  SM_CXICONSPACING* = (SM_CYSIZEFRAME + 5)
  SM_CYICONSPACING* = (SM_CYSIZEFRAME + 6)
  SM_MENUDROPALIGNMENT* = (SM_CYSIZEFRAME + 7)
  SM_PENWINDOWS* = (SM_CYSIZEFRAME + 8)
  SM_DBCSENABLED* = (SM_CYSIZEFRAME + 9)
  SM_CMOUSEBUTTONS* = (SM_CYSIZEFRAME + 10)
  SM_SECURE* = (SM_CYSIZEFRAME + 11)
  SM_CXEDGE* = (SM_CYSIZEFRAME + 12)
  SM_CYEDGE* = (SM_CYSIZEFRAME + 13)
  SM_CXMINSPACING* = (SM_CYSIZEFRAME + 14)
  SM_CYMINSPACING* = (SM_CYSIZEFRAME + 15)
  SM_CXSMICON* = (SM_CYSIZEFRAME + 16)
  SM_CYSMICON* = (SM_CYSIZEFRAME + 17)
  SM_CYSMCAPTION* = (SM_CYSIZEFRAME + 18)
  SM_CXSMSIZE* = (SM_CYSIZEFRAME + 19)
  SM_CYSMSIZE* = (SM_CYSIZEFRAME + 20)
  SM_CXMENUSIZE* = (SM_CYSIZEFRAME + 21)
  SM_CYMENUSIZE* = (SM_CYSIZEFRAME + 22)
  SM_ARRANGE* = (SM_CYSIZEFRAME + 23)
  SM_CXMINIMIZED* = (SM_CYSIZEFRAME + 24)
  SM_CYMINIMIZED* = (SM_CYSIZEFRAME + 25)
  SM_CXMAXTRACK* = (SM_CYSIZEFRAME + 26)
  SM_CYMAXTRACK* = (SM_CYSIZEFRAME + 27)
  SM_CXMAXIMIZED* = (SM_CYSIZEFRAME + 28)
  SM_CYMAXIMIZED* = (SM_CYSIZEFRAME + 29)
  SM_NETWORK* = (SM_CYSIZEFRAME + 30)
  SM_CLEANBOOT* = 67
  SM_CXDRAG* = 68
  SM_CYDRAG* = 69
  SM_SHOWSOUNDS* = 70
  SM_CXMENUCHECK* = 71
  SM_CYMENUCHECK* = 72
  SM_SLOWMACHINE* = 73
  SM_MIDEASTENABLED* = 74
  SM_MOUSEWHEELPRESENT* = 75
  SM_XVIRTUALSCREEN* = 76
  SM_YVIRTUALSCREEN* = 77
  SM_CXVIRTUALSCREEN* = 78
  SM_CYVIRTUALSCREEN* = 79
  SM_CMONITORS* = 80
  SM_SAMEDISPLAYFORMAT* = 81
  SM_IMMENABLED* = 82
  SM_CXFOCUSBORDER* = 83
  SM_CYFOCUSBORDER* = 84
  SM_TABLETPC* = 86
  SM_MEDIACENTER* = 87
  SM_REMOTESESSION* = 0x1000
  SM_SHUTTINGDOWN* = 0x2000
  SM_REMOTECONTROL* = 0x2001
  ARW_BOTTOMLEFT* = 0
  ARW_BOTTOMRIGHT* = 1
  ARW_HIDE* = 8
  ARW_TOPLEFT* = 2
  ARW_TOPRIGHT* = 3
  ARW_DOWN* = 4
  ARW_LEFT* = 0
  ARW_RIGHT* = 0
  ARW_UP* = 4
  UOI_FLAGS* = 1
  UOI_NAME* = 2
  UOI_TYPE* = 3
  UOI_USER_SID* = 4
  LR_DEFAULTCOLOR* = 0
  LR_MONOCHROME* = 1
  LR_COLOR* = 2
  LR_COPYRETURNORG* = 4
  LR_COPYDELETEORG* = 8
  LR_LOADFROMFILE* = 16
  LR_LOADTRANSPARENT* = 32
  LR_DEFAULTSIZE* = 64
  LR_LOADREALSIZE* = 128
  LR_LOADMAP3DCOLORS* = 4096
  LR_CREATEDIBSECTION* = 8192
  LR_COPYFROMRESOURCE* = 16384
  LR_SHARED* = 32768
  KEYEVENTF_EXTENDEDKEY* = 0x00000001
  KEYEVENTF_KEYUP* = 00000002
  KEYEVENTF_UNICODE* = 0x00000004
  KEYEVENTF_SCANCODE* = 0x00000008
  OBM_BTNCORNERS* = 32758
  OBM_BTSIZE* = 32761
  OBM_CHECK* = 32760
  OBM_CHECKBOXES* = 32759
  OBM_CLOSE* = 32754
  OBM_COMBO* = 32738
  OBM_DNARROW* = 32752
  OBM_DNARROWD* = 32742
  OBM_DNARROWI* = 32736
  OBM_LFARROW* = 32750
  OBM_LFARROWI* = 32734
  OBM_LFARROWD* = 32740
  OBM_MNARROW* = 32739
  OBM_OLD_CLOSE* = 32767
  OBM_OLD_DNARROW* = 32764
  OBM_OLD_LFARROW* = 32762
  OBM_OLD_REDUCE* = 32757
  OBM_OLD_RESTORE* = 32755
  OBM_OLD_RGARROW* = 32763
  OBM_OLD_UPARROW* = 32765
  OBM_OLD_ZOOM* = 32756
  OBM_REDUCE* = 32749
  OBM_REDUCED* = 32746
  OBM_RESTORE* = 32747
  OBM_RESTORED* = 32744
  OBM_RGARROW* = 32751
  OBM_RGARROWD* = 32741
  OBM_RGARROWI* = 32735
  OBM_SIZE* = 32766
  OBM_UPARROW* = 32753
  OBM_UPARROWD* = 32743
  OBM_UPARROWI* = 32737
  OBM_ZOOM* = 32748
  OBM_ZOOMD* = 32745
  OCR_NORMAL* = 32512
  OCR_IBEAM* = 32513
  OCR_WAIT* = 32514
  OCR_CROSS* = 32515
  OCR_UP* = 32516
  OCR_SIZE* = 32640
  OCR_ICON* = 32641
  OCR_SIZENWSE* = 32642
  OCR_SIZENESW* = 32643
  OCR_SIZEWE* = 32644
  OCR_SIZENS* = 32645
  OCR_SIZEALL* = 32646
  OCR_NO* = 32648
  OCR_APPSTARTING* = 32650
  OIC_SAMPLE* = 32512
  OIC_HAND* = 32513
  OIC_QUES* = 32514
  OIC_BANG* = 32515
  OIC_NOTE* = 32516
  OIC_WINLOGO* = 32517
  OIC_WARNING* = OIC_BANG
  OIC_ERROR* = OIC_HAND
  OIC_INFORMATION* = OIC_NOTE
  HELPINFO_MENUITEM* = 2
  HELPINFO_WINDOW* = 1
  MSGF_DIALOGBOX* = 0
  MSGF_MESSAGEBOX* = 1
  MSGF_MENU* = 2
  MSGF_MOVE* = 3
  MSGF_SIZE* = 4
  MSGF_SCROLLBAR* = 5
  MSGF_NEXTWINDOW* = 6
  MSGF_MAINLOOP* = 8
  MSGF_USER* = 4096
  MOUSEEVENTF_MOVE* = 1
  MOUSEEVENTF_LEFTDOWN* = 2
  MOUSEEVENTF_LEFTUP* = 4
  MOUSEEVENTF_RIGHTDOWN* = 8
  MOUSEEVENTF_RIGHTUP* = 16
  MOUSEEVENTF_MIDDLEDOWN* = 32
  MOUSEEVENTF_MIDDLEUP* = 64
  MOUSEEVENTF_WHEEL* = 0x0800
  MOUSEEVENTF_ABSOLUTE* = 32768
  PM_NOREMOVE* = 0
  PM_REMOVE* = 1
  PM_NOYIELD* = 2
  PM_QS_INPUT* = ( QS_INPUT  shl  16 )
  PM_QS_POSTMESSAGE* = ( ( QS_POSTMESSAGE or QS_HOTKEY or QS_TIMER )  shl  16 )
  PM_QS_PAINT* = ( QS_PAINT  shl  16 )
  PM_QS_SENDMESSAGE* = ( QS_SENDMESSAGE  shl  16 )
  HWND_BROADCAST* = 0xFFFF
  HWND_BOTTOM* = 1
  HWND_NOTOPMOST* = -2
  HWND_TOP* = 0
  HWND_TOPMOST* = -1
  HWND_DESKTOP* = 0
  HWND_MESSAGE* = -3
  RDW_INVALIDATE* = 1
  RDW_INTERNALPAINT* = 2
  RDW_ERASE* = 4
  RDW_VALIDATE* = 8
  RDW_NOINTERNALPAINT* = 16
  RDW_NOERASE* = 32
  RDW_NOCHILDREN* = 64
  RDW_ALLCHILDREN* = 128
  RDW_UPDATENOW* = 256
  RDW_ERASENOW* = 512
  RDW_FRAME* = 1024
  RDW_NOFRAME* = 2048
  SMTO_NORMAL* = 0
  SMTO_BLOCK* = 1
  SMTO_ABORTIFHUNG* = 2
  SIF_ALL* = 23
  SIF_PAGE* = 2
  SIF_POS* = 4
  SIF_RANGE* = 1
  SIF_DISABLENOSCROLL* = 8
  SIF_TRACKPOS* = 16
  SWP_DRAWFRAME* = 32
  SWP_FRAMECHANGED* = 32
  SWP_HIDEWINDOW* = 128
  SWP_NOACTIVATE* = 16
  SWP_NOCOPYBITS* = 256
  SWP_NOMOVE* = 2
  SWP_NOSIZE* = 1
  SWP_NOREDRAW* = 8
  SWP_NOZORDER* = 4
  SWP_SHOWWINDOW* = 64
  SWP_NOOWNERZORDER* = 512
  SWP_NOREPOSITION* = 512
  SWP_NOSENDCHANGING* = 1024
  SWP_DEFERERASE* = 8192
  SWP_ASYNCWINDOWPOS* = 16384
  HSHELL_ACTIVATESHELLWINDOW* = 3
  HSHELL_GETMINRECT* = 5
  HSHELL_LANGUAGE* = 8
  HSHELL_REDRAW* = 6
  HSHELL_TASKMAN* = 7
  HSHELL_WINDOWACTIVATED* = 4
  HSHELL_WINDOWCREATED* = 1
  HSHELL_WINDOWDESTROYED* = 2
  HSHELL_FLASH* = 32774
  SPI_SETFOREGROUNDLOCKTIMEOUT* = 0x2001
  SPI_GETFOREGROUNDLOCKTIMEOUT* = 0x2000
  SPI_GETACCESSTIMEOUT* = 60
  SPI_GETACTIVEWNDTRKTIMEOUT* = 8194
  SPI_GETANIMATION* = 72
  SPI_GETBEEP* = 1
  SPI_GETBORDER* = 5
  SPI_GETDEFAULTINPUTLANG* = 89
  SPI_GETDRAGFULLWINDOWS* = 38
  SPI_GETFASTTASKSWITCH* = 35
  SPI_GETFILTERKEYS* = 50
  SPI_GETFONTSMOOTHING* = 74
  SPI_GETGRIDGRANULARITY* = 18
  SPI_GETHIGHCONTRAST* = 66
  SPI_GETICONMETRICS* = 45
  SPI_GETICONTITLELOGFONT* = 31
  SPI_GETICONTITLEWRAP* = 25
  SPI_GETKEYBOARDDELAY* = 22
  SPI_GETKEYBOARDPREF* = 68
  SPI_GETKEYBOARDSPEED* = 10
  SPI_GETLOWPOWERACTIVE* = 83
  SPI_GETLOWPOWERTIMEOUT* = 79
  SPI_GETMENUDROPALIGNMENT* = 27
  SPI_GETMINIMIZEDMETRICS* = 43
  SPI_GETMOUSE* = 3
  SPI_GETMOUSEKEYS* = 54
  SPI_GETMOUSETRAILS* = 94
  SPI_GETNONCLIENTMETRICS* = 41
  SPI_GETPOWEROFFACTIVE* = 84
  SPI_GETPOWEROFFTIMEOUT* = 80
  SPI_GETSCREENREADER* = 70
  SPI_GETSCREENSAVEACTIVE* = 16
  SPI_GETSCREENSAVETIMEOUT* = 14
  SPI_GETSERIALKEYS* = 62
  SPI_GETSHOWSOUNDS* = 56
  SPI_GETSOUNDSENTRY* = 64
  SPI_GETSTICKYKEYS* = 58
  SPI_GETTOGGLEKEYS* = 52
  SPI_GETWHEELSCROLLLINES* = 104
  SPI_GETWINDOWSEXTENSION* = 92
  SPI_GETWORKAREA* = 48
  SPI_ICONHORIZONTALSPACING* = 13
  SPI_ICONVERTICALSPACING* = 24
  SPI_LANGDRIVER* = 12
  SPI_SCREENSAVERRUNNING* = 97
  SPI_SETACCESSTIMEOUT* = 61
  SPI_SETACTIVEWNDTRKTIMEOUT* = 8195
  SPI_SETANIMATION* = 73
  SPI_SETBEEP* = 2
  SPI_SETBORDER* = 6
  SPI_SETDEFAULTINPUTLANG* = 90
  SPI_SETDESKPATTERN* = 21
  SPI_SETDESKWALLPAPER* = 20
  SPI_SETDOUBLECLICKTIME* = 32
  SPI_SETDOUBLECLKHEIGHT* = 30
  SPI_SETDOUBLECLKWIDTH* = 29
  SPI_SETDRAGFULLWINDOWS* = 37
  SPI_SETDRAGHEIGHT* = 77
  SPI_SETDRAGWIDTH* = 76
  SPI_SETFASTTASKSWITCH* = 36
  SPI_SETFILTERKEYS* = 51
  SPI_SETFONTSMOOTHING* = 75
  SPI_SETGRIDGRANULARITY* = 19
  SPI_SETHANDHELD* = 78
  SPI_SETHIGHCONTRAST* = 67
  SPI_SETICONMETRICS* = 46
  SPI_SETICONTITLELOGFONT* = 34
  SPI_SETICONTITLEWRAP* = 26
  SPI_SETKEYBOARDDELAY* = 23
  SPI_SETKEYBOARDPREF* = 69
  SPI_SETKEYBOARDSPEED* = 11
  SPI_SETLANGTOGGLE* = 91
  SPI_SETLOWPOWERACTIVE* = 85
  SPI_SETLOWPOWERTIMEOUT* = 81
  SPI_SETMENUDROPALIGNMENT* = 28
  SPI_SETMINIMIZEDMETRICS* = 44
  SPI_SETMOUSE* = 4
  SPI_SETMOUSEBUTTONSWAP* = 33
  SPI_SETMOUSEKEYS* = 55
  SPI_SETMOUSETRAILS* = 93
  SPI_SETNONCLIENTMETRICS* = 42
  SPI_SETPENWINDOWS* = 49
  SPI_SETPOWEROFFACTIVE* = 86
  SPI_SETPOWEROFFTIMEOUT* = 82
  SPI_SETSCREENREADER* = 71
  SPI_SETSCREENSAVEACTIVE* = 17
  SPI_SETSCREENSAVERRUNNING* = 97
  SPI_SETSCREENSAVETIMEOUT* = 15
  SPI_SETSERIALKEYS* = 63
  SPI_SETSHOWSOUNDS* = 57
  SPI_SETSOUNDSENTRY* = 65
  SPI_SETSTICKYKEYS* = 59
  SPI_SETTOGGLEKEYS* = 53
  SPI_SETWHEELSCROLLLINES* = 105
  SPI_SETWORKAREA* = 47
  SPI_GETDESKWALLPAPER* = 115
  SPI_GETMOUSESPEED* = 112
  SPI_GETSCREENSAVERRUNNING* = 114
  SPI_GETACTIVEWINDOWTRACKING* = 0x1000
  SPI_GETACTIVEWNDTRKZORDER* = 0x100C
  SPI_GETCOMBOBOXANIMATION* = 0x1004
  SPI_GETCURSORSHADOW* = 0x101A
  SPI_GETGRADIENTCAPTIONS* = 0x1008
  SPI_GETHOTTRACKING* = 0x100E
  SPI_GETKEYBOARDCUES* = 0x100A
  SPI_GETLISTBOXSMOOTHSCROLLING* = 0x1006
  SPI_GETMENUANIMATION* = 0x1002
  SPI_GETMENUFADE* = 0x1012
  SPI_GETMENUUNDERLINES* = 0x100A
  SPI_GETSELECTIONFADE* = 0x1014
  SPI_GETTOOLTIPANIMATION* = 0x1016
  SPI_GETTOOLTIPFADE* = 0x1018
  SPI_SETACTIVEWINDOWTRACKING* = 0x1001
  SPI_SETACTIVEWNDTRKZORDER* = 0x100D
  SPI_SETCOMBOBOXANIMATION* = 0x1005
  SPI_SETCURSORSHADOW* = 0x101B
  SPI_SETGRADIENTCAPTIONS* = 0x1009
  SPI_SETHOTTRACKING* = 0x100F
  SPI_SETKEYBOARDCUES* = 0x100B
  SPI_SETLISTBOXSMOOTHSCROLLING* = 0x1007
  SPI_SETMENUANIMATION* = 0x1003
  SPI_SETMENUFADE* = 0x1013
  SPI_SETMENUUNDERLINES* = 0x100B
  SPI_SETMOUSESPEED* = 113
  SPI_SETSELECTIONFADE* = 0x1015
  SPI_SETTOOLTIPANIMATION* = 0x1017
  SPI_SETTOOLTIPFADE* = 0x1019
  SPIF_UPDATEINIFILE* = 1
  SPIF_SENDWININICHANGE* = 2
  SPIF_SENDCHANGE* = 2
  WM_APP* = 32768
  WM_ACTIVATE* = 6
  WM_ACTIVATEAPP* = 28
  WM_AFXFIRST* = 864
  WM_AFXLAST* = 895
  WM_ASKCBFORMATNAME* = 780
  WM_CANCELJOURNAL* = 75
  WM_CANCELMODE* = 31
  WM_CAPTURECHANGED* = 533
  WM_CHANGECBCHAIN* = 781
  WM_CHAR* = 258
  WM_CHARTOITEM* = 47
  WM_CHILDACTIVATE* = 34
  WM_CLEAR* = 771
  WM_CLOSE* = 16
  WM_COMMAND* = 273
  WM_COMMNOTIFY* = 68
  WM_COMPACTING* = 65
  WM_COMPAREITEM* = 57
  WM_CONTEXTMENU* = 123
  WM_COPY* = 769
  WM_COPYDATA* = 74
  WM_CREATE* = 1
  WM_CTLCOLORBTN* = 309
  WM_CTLCOLORDLG* = 310
  WM_CTLCOLOREDIT* = 307
  WM_CTLCOLORLISTBOX* = 308
  WM_CTLCOLORMSGBOX* = 306
  WM_CTLCOLORSCROLLBAR* = 311
  WM_CTLCOLORSTATIC* = 312
  WM_CUT* = 768
  WM_DEADCHAR* = 259
  WM_DELETEITEM* = 45
  WM_DESTROY* = 2
  WM_DESTROYCLIPBOARD* = 775
  WM_DEVICECHANGE* = 537
  WM_DEVMODECHANGE* = 27
  WM_DISPLAYCHANGE* = 126
  WM_DRAWCLIPBOARD* = 776
  WM_DRAWITEM* = 43
  WM_DROPFILES* = 563
  WM_ENABLE* = 10
  WM_ENDSESSION* = 22
  WM_ENTERIDLE* = 289
  WM_ENTERMENULOOP* = 529
  WM_ENTERSIZEMOVE* = 561
  WM_ERASEBKGND* = 20
  WM_EXITMENULOOP* = 530
  WM_EXITSIZEMOVE* = 562
  WM_FONTCHANGE* = 29
  WM_GETDLGCODE* = 135
  WM_GETFONT* = 49
  WM_GETHOTKEY* = 51
  WM_GETICON* = 127
  WM_GETMINMAXINFO* = 36
  WM_GETTEXT* = 13
  WM_GETTEXTLENGTH* = 14
  WM_HANDHELDFIRST* = 856
  WM_HANDHELDLAST* = 863
  WM_HELP* = 83
  WM_HOTKEY* = 786
  WM_HSCROLL* = 276
  WM_HSCROLLCLIPBOARD* = 782
  WM_ICONERASEBKGND* = 39
  WM_INITDIALOG* = 272
  WM_INITMENU* = 278
  WM_INITMENUPOPUP* = 279
  WM_INPUTLANGCHANGE* = 81
  WM_INPUTLANGCHANGEREQUEST* = 80
  WM_KEYDOWN* = 256
  WM_KEYUP* = 257
  WM_KILLFOCUS* = 8
  WM_MDIACTIVATE* = 546
  WM_MDICASCADE* = 551
  WM_MDICREATE* = 544
  WM_MDIDESTROY* = 545
  WM_MDIGETACTIVE* = 553
  WM_MDIICONARRANGE* = 552
  WM_MDIMAXIMIZE* = 549
  WM_MDINEXT* = 548
  WM_MDIREFRESHMENU* = 564
  WM_MDIRESTORE* = 547
  WM_MDISETMENU* = 560
  WM_MDITILE* = 550
  WM_MEASUREITEM* = 44
  WM_UNINITMENUPOPUP* = 0x0125
  WM_MENURBUTTONUP* = 290
  WM_MENUCOMMAND* = 0x0126
  WM_MENUGETOBJECT* = 0x0124
  WM_MENUDRAG* = 0x0123
  WM_CHANGEUISTATE* = 0x0127
  WM_UPDATEUISTATE* = 0x0128
  WM_QUERYUISTATE* = 0x0129
  UIS_SET* = 1
  UIS_CLEAR* = 2
  UIS_INITIALIZE* = 3
  UISF_HIDEFOCUS* = 0x1
  UISF_HIDEACCEL* = 0x2
  UISF_ACTIVE* = 0x4
  WM_MENUCHAR* = 288
  WM_MENUSELECT* = 287
  WM_MOVE* = 3
  WM_MOVING* = 534
  WM_NCACTIVATE* = 134
  WM_NCCALCSIZE* = 131
  WM_NCCREATE* = 129
  WM_NCDESTROY* = 130
  WM_NCHITTEST* = 132
  WM_NCLBUTTONDBLCLK* = 163
  WM_NCLBUTTONDOWN* = 161
  WM_NCLBUTTONUP* = 162
  WM_NCMBUTTONDBLCLK* = 169
  WM_NCMBUTTONDOWN* = 167
  WM_NCMBUTTONUP* = 168
  WM_NCXBUTTONDOWN* = 171
  WM_NCXBUTTONUP* = 172
  WM_NCXBUTTONDBLCLK* = 173
  WM_NCMOUSEHOVER* = 0x02A0
  WM_NCMOUSELEAVE* = 0x02A2
  WM_NCMOUSEMOVE* = 160
  WM_NCPAINT* = 133
  WM_NCRBUTTONDBLCLK* = 166
  WM_NCRBUTTONDOWN* = 164
  WM_NCRBUTTONUP* = 165
  WM_NEXTDLGCTL* = 40
  WM_NEXTMENU* = 531
  WM_NOTIFY* = 78
  WM_NOTIFYFORMAT* = 85
  WM_NULL* = 0
  WM_PAINT* = 15
  WM_PAINTCLIPBOARD* = 777
  WM_PAINTICON* = 38
  WM_PALETTECHANGED* = 785
  WM_PALETTEISCHANGING* = 784
  WM_PARENTNOTIFY* = 528
  WM_PASTE* = 770
  WM_PENWINFIRST* = 896
  WM_PENWINLAST* = 911
  WM_POWER* = 72
  WM_POWERBROADCAST* = 536
  WM_PRINT* = 791
  WM_PRINTCLIENT* = 792
  WM_APPCOMMAND* = 0x0319
  WM_QUERYDRAGICON* = 55
  WM_QUERYENDSESSION* = 17
  WM_QUERYNEWPALETTE* = 783
  WM_QUERYOPEN* = 19
  WM_QUEUESYNC* = 35
  WM_QUIT* = 18
  WM_RENDERALLFORMATS* = 774
  WM_RENDERFORMAT* = 773
  WM_SETCURSOR* = 32
  WM_SETFOCUS* = 7
  WM_SETFONT* = 48
  WM_SETHOTKEY* = 50
  WM_SETICON* = 128
  WM_SETREDRAW* = 11
  WM_SETTEXT* = 12
  WM_SETTINGCHANGE* = 26
  WM_SHOWWINDOW* = 24
  WM_SIZE* = 5
  WM_SIZECLIPBOARD* = 779
  WM_SIZING* = 532
  WM_SPOOLERSTATUS* = 42
  WM_STYLECHANGED* = 125
  WM_STYLECHANGING* = 124
  WM_SYSCHAR* = 262
  WM_SYSCOLORCHANGE* = 21
  WM_SYSCOMMAND* = 274
  WM_SYSDEADCHAR* = 263
  WM_SYSKEYDOWN* = 260
  WM_SYSKEYUP* = 261
  WM_TCARD* = 82
  WM_THEMECHANGED* = 794
  WM_TIMECHANGE* = 30
  WM_TIMER* = 275
  WM_UNDO* = 772
  WM_USER* = 1024
  WM_USERCHANGED* = 84
  WM_VKEYTOITEM* = 46
  WM_VSCROLL* = 277
  WM_VSCROLLCLIPBOARD* = 778
  WM_WINDOWPOSCHANGED* = 71
  WM_WINDOWPOSCHANGING* = 70
  WM_WININICHANGE* = 26
  WM_INPUT* = 255
  WM_KEYFIRST* = 256
  WM_KEYLAST* = 264
  WM_SYNCPAINT* = 136
  WM_MOUSEACTIVATE* = 33
  WM_MOUSEMOVE* = 512
  WM_LBUTTONDOWN* = 513
  WM_LBUTTONUP* = 514
  WM_LBUTTONDBLCLK* = 515
  WM_RBUTTONDOWN* = 516
  WM_RBUTTONUP* = 517
  WM_RBUTTONDBLCLK* = 518
  WM_MBUTTONDOWN* = 519
  WM_MBUTTONUP* = 520
  WM_MBUTTONDBLCLK* = 521
  WM_MOUSEWHEEL* = 522
  WM_MOUSEFIRST* = 512
  WM_XBUTTONDOWN* = 523
  WM_XBUTTONUP* = 524
  WM_XBUTTONDBLCLK* = 525
  WM_MOUSELAST* = 525
  WM_MOUSEHOVER* = 0x2A1
  WM_MOUSELEAVE* = 0x2A3
  WHEEL_DELTA* = 120

proc GET_WHEEL_DELTA_WPARAM*(wparam: WPARAM): SHORT = cast[SHORT](HIWORD(wparam))

const
  WHEEL_PAGESCROLL* = UINT.high
  BM_CLICK* = 245
  BM_GETCHECK* = 240
  BM_GETIMAGE* = 246
  BM_GETSTATE* = 242
  BM_SETCHECK* = 241
  BM_SETIMAGE* = 247
  BM_SETSTATE* = 243
  BM_SETSTYLE* = 244
  BN_CLICKED* = 0
  BN_DBLCLK* = 5
  BN_DISABLE* = 4
  BN_DOUBLECLICKED* = 5
  BN_HILITE* = 2
  BN_KILLFOCUS* = 7
  BN_PAINT* = 1
  BN_PUSHED* = 2
  BN_SETFOCUS* = 6
  BN_UNHILITE* = 3
  BN_UNPUSHED* = 3
  CB_ADDSTRING* = 323
  CB_DELETESTRING* = 324
  CB_DIR* = 325
  CB_FINDSTRING* = 332
  CB_FINDSTRINGEXACT* = 344
  CB_GETCOUNT* = 326
  CB_GETCURSEL* = 327
  CB_GETDROPPEDCONTROLRECT* = 338
  CB_GETDROPPEDSTATE* = 343
  CB_GETDROPPEDWIDTH* = 351
  CB_GETEDITSEL* = 320
  CB_GETEXTENDEDUI* = 342
  CB_GETHORIZONTALEXTENT* = 349
  CB_GETITEMDATA* = 336
  CB_GETITEMHEIGHT* = 340
  CB_GETLBTEXT* = 328
  CB_GETLBTEXTLEN* = 329
  CB_GETLOCALE* = 346
  CB_GETTOPINDEX* = 347
  CB_INITSTORAGE* = 353
  CB_INSERTSTRING* = 330
  CB_LIMITTEXT* = 321
  CB_RESETCONTENT* = 331
  CB_SELECTSTRING* = 333
  CB_SETCURSEL* = 334
  CB_SETDROPPEDWIDTH* = 352
  CB_SETEDITSEL* = 322
  CB_SETEXTENDEDUI* = 341
  CB_SETHORIZONTALEXTENT* = 350
  CB_SETITEMDATA* = 337
  CB_SETITEMHEIGHT* = 339
  CB_SETLOCALE* = 345
  CB_SETTOPINDEX* = 348
  CB_SHOWDROPDOWN* = 335
  CBN_CLOSEUP* = 8
  CBN_DBLCLK* = 2
  CBN_DROPDOWN* = 7
  CBN_EDITCHANGE* = 5
  CBN_EDITUPDATE* = 6
  CBN_ERRSPACE* = ( -1 )
  CBN_KILLFOCUS* = 4
  CBN_SELCHANGE* = 1
  CBN_SELENDCANCEL* = 10
  CBN_SELENDOK* = 9
  CBN_SETFOCUS* = 3
  EM_CANUNDO* = 198
  EM_CHARFROMPOS* = 215
  EM_EMPTYUNDOBUFFER* = 205
  EM_FMTLINES* = 200
  EM_GETFIRSTVISIBLELINE* = 206
  EM_GETHANDLE* = 189
  EM_GETLIMITTEXT* = 213
  EM_GETLINE* = 196
  EM_GETLINECOUNT* = 186
  EM_GETMARGINS* = 212
  EM_GETMODIFY* = 184
  EM_GETPASSWORDCHAR* = 210
  EM_GETRECT* = 178
  EM_GETSEL* = 176
  EM_GETTHUMB* = 190
  EM_GETWORDBREAKPROC* = 209
  EM_LIMITTEXT* = 197
  EM_LINEFROMCHAR* = 201
  EM_LINEINDEX* = 187
  EM_LINELENGTH* = 193
  EM_LINESCROLL* = 182
  EM_POSFROMCHAR* = 214
  EM_REPLACESEL* = 194
  EM_SCROLL* = 181
  EM_SCROLLCARET* = 183
  EM_SETHANDLE* = 188
  EM_SETLIMITTEXT* = 197
  EM_SETMARGINS* = 211
  EM_SETMODIFY* = 185
  EM_SETPASSWORDCHAR* = 204
  EM_SETREADONLY* = 207
  EM_SETRECT* = 179
  EM_SETRECTNP* = 180
  EM_SETSEL* = 177
  EM_SETTABSTOPS* = 203
  EM_SETWORDBREAKPROC* = 208
  EM_UNDO* = 199
  EN_CHANGE* = 768
  EN_ERRSPACE* = 1280
  EN_HSCROLL* = 1537
  EN_KILLFOCUS* = 512
  EN_MAXTEXT* = 1281
  EN_SETFOCUS* = 256
  EN_UPDATE* = 1024
  EN_VSCROLL* = 1538
  LB_ADDFILE* = 406
  LB_ADDSTRING* = 384
  LB_DELETESTRING* = 386
  LB_DIR* = 397
  LB_FINDSTRING* = 399
  LB_FINDSTRINGEXACT* = 418
  LB_GETANCHORINDEX* = 413
  LB_GETCARETINDEX* = 415
  LB_GETCOUNT* = 395
  LB_GETCURSEL* = 392
  LB_GETHORIZONTALEXTENT* = 403
  LB_GETITEMDATA* = 409
  LB_GETITEMHEIGHT* = 417
  LB_GETITEMRECT* = 408
  LB_GETLOCALE* = 422
  LB_GETSEL* = 391
  LB_GETSELCOUNT* = 400
  LB_GETSELITEMS* = 401
  LB_GETTEXT* = 393
  LB_GETTEXTLEN* = 394
  LB_GETTOPINDEX* = 398
  LB_INITSTORAGE* = 424
  LB_INSERTSTRING* = 385
  LB_ITEMFROMPOINT* = 425
  LB_RESETCONTENT* = 388
  LB_SELECTSTRING* = 396
  LB_SELITEMRANGE* = 411
  LB_SELITEMRANGEEX* = 387
  LB_SETANCHORINDEX* = 412
  LB_SETCARETINDEX* = 414
  LB_SETCOLUMNWIDTH* = 405
  LB_SETCOUNT* = 423
  LB_SETCURSEL* = 390
  LB_SETHORIZONTALEXTENT* = 404
  LB_SETITEMDATA* = 410
  LB_SETITEMHEIGHT* = 416
  LB_SETLOCALE* = 421
  LB_SETSEL* = 389
  LB_SETTABSTOPS* = 402
  LB_SETTOPINDEX* = 407
  LBN_DBLCLK* = 2
  LBN_ERRSPACE* = -2
  LBN_KILLFOCUS* = 5
  LBN_SELCANCEL* = 3
  LBN_SELCHANGE* = 1
  LBN_SETFOCUS* = 4
  SBM_ENABLE_ARROWS* = 228
  SBM_GETPOS* = 225
  SBM_GETRANGE* = 227
  SBM_GETSCROLLINFO* = 234
  SBM_SETPOS* = 224
  SBM_SETRANGE* = 226
  SBM_SETRANGEREDRAW* = 230
  SBM_SETSCROLLINFO* = 233
  STM_GETICON* = 369
  STM_GETIMAGE* = 371
  STM_SETICON* = 368
  STM_SETIMAGE* = 370
  STN_CLICKED* = 0
  STN_DBLCLK* = 1
  STN_DISABLE* = 3
  STN_ENABLE* = 2
  DM_GETDEFID* = WM_USER
  DM_SETDEFID* = WM_USER+1
  DM_REPOSITION* = WM_USER+2
  PSM_PAGEINFO* = WM_USER+100
  PSM_SHEETINFO* = WM_USER+101
  PSI_SETACTIVE* = 1
  PSI_KILLACTIVE* = 2
  PSI_APPLY* = 3
  PSI_RESET* = 4
  PSI_HASHELP* = 5
  PSI_HELP* = 6
  PSI_CHANGED* = 1
  PSI_GUISTART* = 2
  PSI_REBOOT* = 3
  PSI_GETSIBLINGS* = 4
  DCX_WINDOW* = 1
  DCX_CACHE* = 2
  DCX_PARENTCLIP* = 32
  DCX_CLIPSIBLINGS* = 16
  DCX_CLIPCHILDREN* = 8
  DCX_NORESETATTRS* = 4
  DCX_INTERSECTUPDATE* = 0x200
  DCX_LOCKWINDOWUPDATE* = 0x400
  DCX_EXCLUDERGN* = 64
  DCX_INTERSECTRGN* = 128
  DCX_VALIDATE* = 0x200000
  GMDI_GOINTOPOPUPS* = 2
  GMDI_USEDISABLED* = 1
  FKF_AVAILABLE* = 2
  FKF_CLICKON* = 64
  FKF_FILTERKEYSON* = 1
  FKF_HOTKEYACTIVE* = 4
  FKF_HOTKEYSOUND* = 16
  FKF_CONFIRMHOTKEY* = 8
  FKF_INDICATOR* = 32
  HCF_HIGHCONTRASTON* = 1
  HCF_AVAILABLE* = 2
  HCF_HOTKEYACTIVE* = 4
  HCF_CONFIRMHOTKEY* = 8
  HCF_HOTKEYSOUND* = 16
  HCF_INDICATOR* = 32
  HCF_HOTKEYAVAILABLE* = 64
  MKF_AVAILABLE* = 2
  MKF_CONFIRMHOTKEY* = 8
  MKF_HOTKEYACTIVE* = 4
  MKF_HOTKEYSOUND* = 16
  MKF_INDICATOR* = 32
  MKF_MOUSEKEYSON* = 1
  MKF_MODIFIERS* = 64
  MKF_REPLACENUMBERS* = 128
  SERKF_ACTIVE* = 8
  SERKF_AVAILABLE* = 2
  SERKF_INDICATOR* = 4
  SERKF_SERIALKEYSON* = 1
  SSF_AVAILABLE* = 2
  SSF_SOUNDSENTRYON* = 1
  SSTF_BORDER* = 2
  SSTF_CHARS* = 1
  SSTF_DISPLAY* = 3
  SSTF_NONE* = 0
  SSGF_DISPLAY* = 3
  SSGF_NONE* = 0
  SSWF_CUSTOM* = 4
  SSWF_DISPLAY* = 3
  SSWF_NONE* = 0
  SSWF_TITLE* = 1
  SSWF_WINDOW* = 2
  SKF_AUDIBLEFEEDBACK* = 64
  SKF_AVAILABLE* = 2
  SKF_CONFIRMHOTKEY* = 8
  SKF_HOTKEYACTIVE* = 4
  SKF_HOTKEYSOUND* = 16
  SKF_INDICATOR* = 32
  SKF_STICKYKEYSON* = 1
  SKF_TRISTATE* = 128
  SKF_TWOKEYSOFF* = 256
  TKF_AVAILABLE* = 2
  TKF_CONFIRMHOTKEY* = 8
  TKF_HOTKEYACTIVE* = 4
  TKF_HOTKEYSOUND* = 16
  TKF_TOGGLEKEYSON* = 1
  MDITILE_SKIPDISABLED* = 2
  MDITILE_HORIZONTAL* = 1
  MDITILE_VERTICAL* = 0
  VK_LBUTTON* = 0x01
  VK_RBUTTON* = 0x02
  VK_CANCEL* = 0x03
  VK_MBUTTON* = 0x04
  VK_XBUTTON1* = 0x05
  VK_XBUTTON2* = 0x06
  VK_BACK* = 0x08
  VK_TAB* = 0x09
  VK_CLEAR* = 0x0C
  VK_RETURN* = 0x0D
  VK_SHIFT* = 0x10
  VK_CONTROL* = 0x11
  VK_MENU* = 0x12
  VK_PAUSE* = 0x13
  VK_CAPITAL* = 0x14
  VK_KANA* = 0x15
  VK_HANGEUL* = 0x15
  VK_HANGUL* = 0x15
  VK_JUNJA* = 0x17
  VK_FINAL* = 0x18
  VK_HANJA* = 0x19
  VK_KANJI* = 0x19
  VK_ESCAPE* = 0x1B
  VK_CONVERT* = 0x1C
  VK_NONCONVERT* = 0x1D
  VK_ACCEPT* = 0x1E
  VK_MODECHANGE* = 0x1F
  VK_SPACE* = 0x20
  VK_PRIOR* = 0x21
  VK_NEXT* = 0x22
  VK_END* = 0x23
  VK_HOME* = 0x24
  VK_LEFT* = 0x25
  VK_UP* = 0x26
  VK_RIGHT* = 0x27
  VK_DOWN* = 0x28
  VK_SELECT* = 0x29
  VK_PRINT* = 0x2A
  VK_EXECUTE* = 0x2B
  VK_SNAPSHOT* = 0x2C
  VK_INSERT* = 0x2D
  VK_DELETE* = 0x2E
  VK_HELP* = 0x2F
  VK_LWIN* = 0x5B
  VK_RWIN* = 0x5C
  VK_APPS* = 0x5D
  VK_SLEEP* = 0x5F
  VK_NUMPAD0* = 0x60
  VK_NUMPAD1* = 0x61
  VK_NUMPAD2* = 0x62
  VK_NUMPAD3* = 0x63
  VK_NUMPAD4* = 0x64
  VK_NUMPAD5* = 0x65
  VK_NUMPAD6* = 0x66
  VK_NUMPAD7* = 0x67
  VK_NUMPAD8* = 0x68
  VK_NUMPAD9* = 0x69
  VK_MULTIPLY* = 0x6A
  VK_ADD* = 0x6B
  VK_SEPARATOR* = 0x6C
  VK_SUBTRACT* = 0x6D
  VK_DECIMAL* = 0x6E
  VK_DIVIDE* = 0x6F
  VK_F1* = 0x70
  VK_F2* = 0x71
  VK_F3* = 0x72
  VK_F4* = 0x73
  VK_F5* = 0x74
  VK_F6* = 0x75
  VK_F7* = 0x76
  VK_F8* = 0x77
  VK_F9* = 0x78
  VK_F10* = 0x79
  VK_F11* = 0x7A
  VK_F12* = 0x7B
  VK_F13* = 0x7C
  VK_F14* = 0x7D
  VK_F15* = 0x7E
  VK_F16* = 0x7F
  VK_F17* = 0x80
  VK_F18* = 0x81
  VK_F19* = 0x82
  VK_F20* = 0x83
  VK_F21* = 0x84
  VK_F22* = 0x85
  VK_F23* = 0x86
  VK_F24* = 0x87
  VK_NUMLOCK* = 0x90
  VK_SCROLL* = 0x91
  VK_LSHIFT* = 0xA0
  VK_RSHIFT* = 0xA1
  VK_LCONTROL* = 0xA2
  VK_RCONTROL* = 0xA3
  VK_LMENU* = 0xA4
  VK_RMENU* = 0xA5
  VK_BROWSER_BACK* = 0xA6
  VK_BROWSER_FORWARD* = 0xA7
  VK_BROWSER_REFRESH* = 0xA8
  VK_BROWSER_STOP* = 0xA9
  VK_BROWSER_SEARCH* = 0xAA
  VK_BROWSER_FAVORITES* = 0xAB
  VK_BROWSER_HOME* = 0xAC
  VK_VOLUME_MUTE* = 0xAD
  VK_VOLUME_DOWN* = 0xAE
  VK_VOLUME_UP* = 0xAF
  VK_MEDIA_NEXT_TRACK* = 0xB0
  VK_MEDIA_PREV_TRACK* = 0xB1
  VK_MEDIA_STOP* = 0xB2
  VK_MEDIA_PLAY_PAUSE* = 0xB3
  VK_LAUNCH_MAIL* = 0xB4
  VK_LAUNCH_MEDIA_SELECT* = 0xB5
  VK_LAUNCH_APP1* = 0xB6
  VK_LAUNCH_APP2* = 0xB7
  VK_OEM_1* = 0xBA
  VK_OEM_PLUS* = 0xBB
  VK_OEM_COMMA* = 0xBC
  VK_OEM_MINUS* = 0xBD
  VK_OEM_PERIOD* = 0xBE
  VK_OEM_2* = 0xBF
  VK_OEM_3* = 0xC0
  VK_OEM_4* = 0xDB
  VK_OEM_5* = 0xDC
  VK_OEM_6* = 0xDD
  VK_OEM_7* = 0xDE
  VK_OEM_8* = 0xDF
  VK_OEM_102* = 0xE2
  VK_PROCESSKEY* = 0xE5
  VK_PACKET* = 0xE7
  VK_ATTN* = 0xF6
  VK_CRSEL* = 0xF7
  VK_EXSEL* = 0xF8
  VK_EREOF* = 0xF9
  VK_PLAY* = 0xFA
  VK_ZOOM* = 0xFB
  VK_NONAME* = 0xFC
  VK_PA1* = 0xFD
  VK_OEM_CLEAR* = 0xFE
  TME_HOVER* = 1
  TME_LEAVE* = 2
  TME_QUERY* = 0x40000000
  TME_CANCEL* = 0x80000000'u32
  HOVER_DEFAULT* = 0xFFFFFFFF'u32
  MK_LBUTTON* = 1
  MK_RBUTTON* = 2
  MK_SHIFT* = 4
  MK_CONTROL* = 8
  MK_MBUTTON* = 16
  MK_XBUTTON1* = 32
  MK_XBUTTON2* = 64
  TPM_CENTERALIGN* = 4
  TPM_LEFTALIGN* = 0
  TPM_RIGHTALIGN* = 8
  TPM_LEFTBUTTON* = 0
  TPM_RIGHTBUTTON* = 2
  TPM_HORIZONTAL* = 0
  TPM_VERTICAL* = 64
  TPM_TOPALIGN* = 0
  TPM_VCENTERALIGN* = 16
  TPM_BOTTOMALIGN* = 32
  TPM_NONOTIFY* = 128
  TPM_RETURNCMD* = 256
  TPM_RECURSE* = 1
  HELP_COMMAND* = 0x102
  HELP_CONTENTS* = 3
  HELP_CONTEXT* = 1
  HELP_CONTEXTPOPUP* = 8
  HELP_FORCEFILE* = 9
  HELP_HELPONHELP* = 4
  HELP_INDEX* = 3
  HELP_KEY* = 0x101
  HELP_MULTIKEY* = 0x201
  HELP_PARTIALKEY* = 0x105
  HELP_QUIT* = 2
  HELP_SETCONTENTS* = 5
  HELP_SETINDEX* = 5
  HELP_SETWINPOS* = 0x203
  HELP_CONTEXTMENU* = 0xa
  HELP_FINDER* = 0xb
  HELP_WM_HELP* = 0xc
  HELP_TCARD* = 0x8000
  HELP_TCARD_DATA* = 16
  HELP_TCARD_OTHER_CALLER* = 0x11
  IDH_NO_HELP* = 28440
  IDH_MISSING_CONTEXT* = 28441
  IDH_GENERIC_HELP_BUTTON* = 28442
  IDH_OK* = 28443
  IDH_CANCEL* = 28444
  IDH_HELP* = 28445
  LB_CTLCODE* = 0
  LB_OKAY* = 0
  LB_ERR* = -1
  LB_ERRSPACE* = -2
  CB_OKAY* = 0
  CB_ERR* = -1
  CB_ERRSPACE* = -2
  HIDE_WINDOW* = 0
  SHOW_OPENWINDOW* = 1
  SHOW_ICONWINDOW* = 2
  SHOW_FULLSCREEN* = 3
  SHOW_OPENNOACTIVATE* = 4
  SW_PARENTCLOSING* = 1
  SW_OTHERZOOM* = 2
  SW_PARENTOPENING* = 3
  SW_OTHERUNZOOM* = 4
  KF_EXTENDED* = 256
  KF_DLGMODE* = 2048
  KF_MENUMODE* = 4096
  KF_ALTDOWN* = 8192
  KF_REPEAT* = 16384
  KF_UP* = 32768
  WSF_VISIBLE* = 1
  PWR_OK* = 1
  PWR_FAIL* = -1
  PWR_SUSPENDREQUEST* = 1
  PWR_SUSPENDRESUME* = 2
  PWR_CRITICALRESUME* = 3
  NFR_ANSI* = 1
  NFR_UNICODE* = 2
  NF_QUERY* = 3
  NF_REQUERY* = 4
  MENULOOP_WINDOW* = 0
  MENULOOP_POPUP* = 1
  WMSZ_LEFT* = 1
  WMSZ_RIGHT* = 2
  WMSZ_TOP* = 3
  WMSZ_TOPLEFT* = 4
  WMSZ_TOPRIGHT* = 5
  WMSZ_BOTTOM* = 6
  WMSZ_BOTTOMLEFT* = 7
  WMSZ_BOTTOMRIGHT* = 8
  HTERROR* = -2
  HTTRANSPARENT* = -1
  HTNOWHERE* = 0
  HTCLIENT* = 1
  HTCAPTION* = 2
  HTSYSMENU* = 3
  HTGROWBOX* = 4
  HTSIZE* = 4
  HTMENU* = 5
  HTHSCROLL* = 6
  HTVSCROLL* = 7
  HTMINBUTTON* = 8
  HTMAXBUTTON* = 9
  HTREDUCE* = 8
  HTZOOM* = 9
  HTLEFT* = 10
  HTSIZEFIRST* = 10
  HTRIGHT* = 11
  HTTOP* = 12
  HTTOPLEFT* = 13
  HTTOPRIGHT* = 14
  HTBOTTOM* = 15
  HTBOTTOMLEFT* = 16
  HTBOTTOMRIGHT* = 17
  HTSIZELAST* = 17
  HTBORDER* = 18
  HTOBJECT* = 19
  HTCLOSE* = 20
  HTHELP* = 21
  MA_ACTIVATE* = 1
  MA_ACTIVATEANDEAT* = 2
  MA_NOACTIVATE* = 3
  MA_NOACTIVATEANDEAT* = 4
  SIZE_RESTORED* = 0
  SIZE_MINIMIZED* = 1
  SIZE_MAXIMIZED* = 2
  SIZE_MAXSHOW* = 3
  SIZE_MAXHIDE* = 4
  SIZENORMAL* = 0
  SIZEICONIC* = 1
  SIZEFULLSCREEN* = 2
  SIZEZOOMSHOW* = 3
  SIZEZOOMHIDE* = 4
  WVR_ALIGNTOP* = 16
  WVR_ALIGNLEFT* = 32
  WVR_ALIGNBOTTOM* = 64
  WVR_ALIGNRIGHT* = 128
  WVR_HREDRAW* = 256
  WVR_VREDRAW* = 512
  WVR_REDRAW* = ( WVR_HREDRAW or WVR_VREDRAW )
  WVR_VALIDRECTS* = 1024
  PRF_CHECKVISIBLE* = 1
  PRF_NONCLIENT* = 2
  PRF_CLIENT* = 4
  PRF_ERASEBKGND* = 8
  PRF_CHILDREN* = 16
  PRF_OWNED* = 32
  IDANI_OPEN* = 1
  IDANI_CLOSE* = 2
  IDANI_CAPTION* = 3
  WPF_RESTORETOMAXIMIZED* = 2
  WPF_SETMINPOSITION* = 1
  ODT_MENU* = 1
  ODT_LISTBOX* = 2
  ODT_COMBOBOX* = 3
  ODT_BUTTON* = 4
  ODT_STATIC* = 5
  ODA_DRAWENTIRE* = 1
  ODA_SELECT* = 2
  ODA_FOCUS* = 4
  ODS_SELECTED* = 1
  ODS_GRAYED* = 2
  ODS_DISABLED* = 4
  ODS_CHECKED* = 8
  ODS_FOCUS* = 16
  ODS_DEFAULT* = 32
  ODS_COMBOBOXEDIT* = 4096
  IDHOT_SNAPWINDOW* = -1
  IDHOT_SNAPDESKTOP* = -2
  DBWF_LPARAMPOINTER* = 0x8000
  DLGWINDOWEXTRA* = 30
  MNC_IGNORE* = 0
  MNC_CLOSE* = 1
  MNC_EXECUTE* = 2
  MNC_SELECT* = 3
  DOF_EXECUTABLE* = 0x8001
  DOF_DOCUMENT* = 0x8002
  DOF_DIRECTORY* = 0x8003
  DOF_MULTIPLE* = 0x8004
  DOF_PROGMAN* = 1
  DOF_SHELLDATA* = 2
  DO_DROPFILE* = 0x454C4946
  DO_PRINTFILE* = 0x544E5250
  SW_SCROLLCHILDREN* = 1
  SW_INVALIDATE* = 2
  SW_ERASE* = 4
  SC_SIZE* = 0xF000
  SC_MOVE* = 0xF010
  SC_MINIMIZE* = 0xF020
  SC_ICON* = 0xf020
  SC_MAXIMIZE* = 0xF030
  SC_ZOOM* = 0xF030
  SC_NEXTWINDOW* = 0xF040
  SC_PREVWINDOW* = 0xF050
  SC_CLOSE* = 0xF060
  SC_VSCROLL* = 0xF070
  SC_HSCROLL* = 0xF080
  SC_MOUSEMENU* = 0xF090
  SC_KEYMENU* = 0xF100
  SC_ARRANGE* = 0xF110
  SC_RESTORE* = 0xF120
  SC_TASKLIST* = 0xF130
  SC_SCREENSAVE* = 0xF140
  SC_HOTKEY* = 0xF150
  SC_DEFAULT* = 0xF160
  SC_MONITORPOWER* = 0xF170
  SC_CONTEXTHELP* = 0xF180
  SC_SEPARATOR* = 0xF00F
  EC_LEFTMARGIN* = 1
  EC_RIGHTMARGIN* = 2
  EC_USEFONTINFO* = 0xffff
  DC_HASDEFID* = 0x534B
  DLGC_WANTARROWS* = 1
  DLGC_WANTTAB* = 2
  DLGC_WANTALLKEYS* = 4
  DLGC_WANTMESSAGE* = 4
  DLGC_HASSETSEL* = 8
  DLGC_DEFPUSHBUTTON* = 16
  DLGC_UNDEFPUSHBUTTON* = 32
  DLGC_RADIOBUTTON* = 64
  DLGC_WANTCHARS* = 128
  DLGC_STATIC* = 256
  DLGC_BUTTON* = 0x2000
  WA_INACTIVE* = 0
  WA_ACTIVE* = 1
  WA_CLICKACTIVE* = 2
  ICON_SMALL* = 0
  ICON_BIG* = 1
  ICON_SMALL2* = 2
  HBMMENU_CALLBACK* = -1
  HBMMENU_SYSTEM* = 1
  HBMMENU_MBAR_RESTORE* = 2
  HBMMENU_MBAR_MINIMIZE* = 3
  HBMMENU_MBAR_CLOSE* = 5
  HBMMENU_MBAR_CLOSE_D* = 6
  HBMMENU_MBAR_MINIMIZE_D* = 7
  HBMMENU_POPUP_CLOSE* = 8
  HBMMENU_POPUP_RESTORE* = 9
  HBMMENU_POPUP_MAXIMIZE* = 10
  HBMMENU_POPUP_MINIMIZE* = 11
  MOD_ALT* = 1
  MOD_CONTROL* = 2
  MOD_SHIFT* = 4
  MOD_WIN* = 8
  MOD_IGNORE_ALL_MODIFIER* = 1024
  MOD_ON_KEYUP* = 2048
  MOD_RIGHT* = 16384
  MOD_LEFT* = 32768
  LLKHF_EXTENDED* = ( KF_EXTENDED  shr  8 )
  LLKHF_INJECTED* = 0x00000010
  LLKHF_ALTDOWN* = ( KF_ALTDOWN  shr  8 )
  LLKHF_UP* = ( KF_UP  shr  8 )
  FLASHW_STOP* = 0
  FLASHW_CAPTION* = 1
  FLASHW_TRAY* = 2
  FLASHW_ALL* = ( FLASHW_CAPTION or FLASHW_TRAY )
  FLASHW_TIMER* = 4
  FLASHW_TIMERNOFG* = 12
  CURSOR_SHOWING* = 0x00000001
  WS_ACTIVECAPTION* = 0x00000001
  INPUT_MOUSE* = 0x00000000
  INPUT_KEYBOARD* = 0x00000001
  INPUT_HARDWARE* = 0x00000002
  ENDSESSION_LOGOFF* = 0x80000000'i32
  CHILDID_SELF* = 0
  OBJID_WINDOW* = 0x00000000
  OBJID_SYSMENU* = -1
  OBJID_TITLEBAR* = -2
  OBJID_MENU* = -3
  OBJID_CLIENT* = -4
  OBJID_VSCROLL* = -5
  OBJID_HSCROLL* = -6
  OBJID_SIZEGRIP* = -7
  OBJID_CARET* = -8
  OBJID_CURSOR* = -9
  OBJID_ALERT* = -10
  OBJID_SOUND* = -11
  GUI_CARETBLINKING* = 0x00000001
  GUI_INMOVESIZE* = 0x00000002
  GUI_INMENUMODE* = 0x00000004
  GUI_SYSTEMMENUMODE* = 0x00000008
  GUI_POPUPMENUMODE* = 0x00000010
  GUI_16BITTASK* = 0x00000020
  WINEVENT_OUTOFCONTEXT* = 0x0000
  WINEVENT_SKIPOWNTHREAD* = 0x0001
  WINEVENT_SKIPOWNPROCESS* = 0x0002
  WINEVENT_INCONTEXT* = 0x0004
  AW_HOR_POSITIVE* = 0x00000001
  AW_HOR_NEGATIVE* = 0x00000002
  AW_VER_POSITIVE* = 0x00000004
  AW_VER_NEGATIVE* = 0x00000008
  AW_CENTER* = 0x00000010
  AW_HIDE* = 0x00010000
  AW_ACTIVATE* = 0x00020000
  AW_SLIDE* = 0x00040000
  AW_BLEND* = 0x00080000
  DEVICE_NOTIFY_WINDOW_HANDLE* = 0x00000000
  DEVICE_NOTIFY_SERVICE_HANDLE* = 0x00000001
  DEVICE_NOTIFY_ALL_INTERFACE_CLASSES* = 0x00000004
  EVENT_MIN* = 0x00000001
  EVENT_SYSTEM_SOUND* = 0x00000001
  EVENT_SYSTEM_ALERT* = 0x00000002
  EVENT_SYSTEM_FOREGROUND* = 0x00000003
  EVENT_SYSTEM_MENUSTART* = 0x00000004
  EVENT_SYSTEM_MENUEND* = 0x00000005
  EVENT_SYSTEM_MENUPOPUPSTART* = 0x00000006
  EVENT_SYSTEM_MENUPOPUPEND* = 0x00000007
  EVENT_SYSTEM_CAPTURESTART* = 0x00000008
  EVENT_SYSTEM_CAPTUREEND* = 0x00000009
  EVENT_SYSTEM_MOVESIZESTART* = 0x0000000a
  EVENT_SYSTEM_MOVESIZEEND* = 0x0000000b
  EVENT_SYSTEM_CONTEXTHELPSTART* = 0x0000000c
  EVENT_SYSTEM_CONTEXTHELPEND* = 0x0000000d
  EVENT_SYSTEM_DRAGDROPSTART* = 0x0000000e
  EVENT_SYSTEM_DRAGDROPEND* = 0x0000000f
  EVENT_SYSTEM_DIALOGSTART* = 0x00000010
  EVENT_SYSTEM_DIALOGEND* = 0x00000011
  EVENT_SYSTEM_SCROLLINGSTART* = 0x00000012
  EVENT_SYSTEM_SCROLLINGEND* = 0x00000013
  EVENT_SYSTEM_SWITCHSTART* = 0x00000014
  EVENT_SYSTEM_SWITCHEND* = 0x00000015
  EVENT_SYSTEM_MINIMIZESTART* = 0x00000016
  EVENT_SYSTEM_MINIMIZEEND* = 0x00000017
  EVENT_OBJECT_CREATE* = 0x00008000
  EVENT_OBJECT_DESTROY* = 0x00008001
  EVENT_OBJECT_SHOW* = 0x00008002
  EVENT_OBJECT_HIDE* = 0x00008003
  EVENT_OBJECT_REORDER* = 0x00008004
  EVENT_OBJECT_FOCUS* = 0x00008005
  EVENT_OBJECT_SELECTION* = 0x00008006
  EVENT_OBJECT_SELECTIONADD* = 0x00008007
  EVENT_OBJECT_SELECTIONREMOVE* = 0x00008008
  EVENT_OBJECT_SELECTIONWITHIN* = 0x00008009
  EVENT_OBJECT_STATECHANGE* = 0x0000800a
  EVENT_OBJECT_LOCATIONCHANGE* = 0x0000800b
  EVENT_OBJECT_NAMECHANGE* = 0x0000800c
  EVENT_OBJECT_DESCRIPTIONCHANGE* = 0x0000800d
  EVENT_OBJECT_VALUECHANGE* = 0x0000800e
  EVENT_OBJECT_PARENTCHANGE* = 0x0000800f
  EVENT_OBJECT_HELPCHANGE* = 0x00008010
  EVENT_OBJECT_DEFACTIONCHANGE* = 0x00008011
  EVENT_OBJECT_ACCELERATORCHANGE* = 0x00008012
  EVENT_CONSOLE_CARET* = 0x00004001
  EVENT_CONSOLE_UPDATE_REGION* = 0x00004002
  EVENT_CONSOLE_UPDATE_SIMPLE* = 0x00004003
  EVENT_CONSOLE_UPDATE_SCROLL* = 0x00004004
  EVENT_CONSOLE_LAYOUT* = 0x00004005
  EVENT_CONSOLE_START_APPLICATION* = 0x00004006
  EVENT_CONSOLE_END_APPLICATION* = 0x00004007
  CONSOLE_CARET_SELECTION* = 0x00000001
  CONSOLE_CARET_VISIBLE* = 0x00000002
  CONSOLE_APPLICATION_16BIT* = 0x00000001
  EVENT_MAX* = 0x7fffffff
  ASFW_ANY* = 0xFFFFFFFF'u32
  LSFW_LOCK* = 1
  LSFW_UNLOCK* = 2
  LWA_COLORKEY* = 0x01
  LWA_ALPHA* = 0x02
  ULW_COLORKEY* = 0x01
  ULW_ALPHA* = 0x02
  ULW_OPAQUE* = 0x04
  GA_PARENT* = 1
  GA_ROOT* = 2
  GA_ROOTOWNER* = 3
  MONITOR_DEFAULTTONULL* = 0
  MONITOR_DEFAULTTOPRIMARY* = 1
  MONITOR_DEFAULTTONEAREST* = 2
  MONITORINFOF_PRIMARY* = 1
  EDS_RAWMODE* = 0x00000002
  ISMEX_NOSEND* = 0x00000000
  ISMEX_SEND* = 0x00000001
  ISMEX_NOTIFY* = 0x00000002
  ISMEX_CALLBACK* = 0x00000004
  ISMEX_REPLIED* = 0x00000008
  GR_GDIOBJECTS* = 0
  GR_USEROBJECTS* = 1
  GMMP_USE_DISPLAY_POINTS* = 1
  GMMP_USE_HIGH_RESOLUTION_POINTS* = 2
  PW_CLIENTONLY* = 0x00000001
  RIM_INPUT* = 0x00000000
  RIM_INPUTSINK* = 0x00000001
  RIM_TYPEMOUSE* = 0x00000000
  RIM_TYPEKEYBOARD* = 0x00000001
  RIM_TYPEHID* = 0x00000002
  MOUSE_MOVE_RELATIVE* = 0x00000000
  MOUSE_MOVE_ABSOLUTE* = 0x00000001
  MOUSE_VIRTUAL_DESKTOP* = 0x00000002
  MOUSE_ATTRIBUTES_CHANGED* = 0x00000004
  RI_MOUSE_LEFT_BUTTON_DOWN* = 0x0001
  RI_MOUSE_LEFT_BUTTON_UP* = 0x0002
  RI_MOUSE_RIGHT_BUTTON_DOWN* = 0x0004
  RI_MOUSE_RIGHT_BUTTON_UP* = 0x0008
  RI_MOUSE_MIDDLE_BUTTON_DOWN* = 0x0010
  RI_MOUSE_MIDDLE_BUTTON_UP* = 0x0020
  RI_MOUSE_BUTTON_1_DOWN* = RI_MOUSE_LEFT_BUTTON_DOWN
  RI_MOUSE_BUTTON_1_UP* = RI_MOUSE_LEFT_BUTTON_UP
  RI_MOUSE_BUTTON_2_DOWN* = RI_MOUSE_RIGHT_BUTTON_DOWN
  RI_MOUSE_BUTTON_2_UP* = RI_MOUSE_RIGHT_BUTTON_UP
  RI_MOUSE_BUTTON_3_DOWN* = RI_MOUSE_MIDDLE_BUTTON_DOWN
  RI_MOUSE_BUTTON_3_UP* = RI_MOUSE_MIDDLE_BUTTON_UP
  RI_MOUSE_BUTTON_4_DOWN* = 0x0040
  RI_MOUSE_BUTTON_4_UP* = 0x0080
  RI_MOUSE_BUTTON_5_DOWN* = 0x0100
  RI_MOUSE_BUTTON_5_UP* = 0x0200
  RI_MOUSE_WHEEL* = 0x0400
  KEYBOARD_OVERRUN_MAKE_CODE* = 0x00ff
  RI_KEY_MAKE* = 0x0000
  RI_KEY_BREAK* = 0x0001
  RI_KEY_E0* = 0x0002
  RI_KEY_E1* = 0x0004
  RI_KEY_TERMSRV_SET_LED* = 0x0008
  RI_KEY_TERMSRV_SHADOW* = 0x0010
  RID_INPUT* = 0x10000003
  RID_HEADER* = 0x10000005
  RIDI_PREPARSEDDATA* = 0x20000005
  RIDI_DEVICENAME* = 0x20000007
  RIDI_DEVICEINFO* = 0x2000000b
  RIDEV_REMOVE* = 0x00000001
  RIDEV_EXCLUDE* = 0x00000010
  RIDEV_PAGEONLY* = 0x00000020
  RIDEV_NOLEGACY* = 0x00000030
  RIDEV_INPUTSINK* = 0x00000100
  RIDEV_CAPTUREMOUSE* = 0x00000200
  RIDEV_NOHOTKEYS* = 0x00000200
  RIDEV_APPKEYS* = 0x00000400

type
  MENUBARINFO* {.final, pure.} = object
    cbSize*: DWORD
    rcBar*: RECT
    hMenu*: HMENU
    hwndMenu*: HWND
    fBarFocused* {.bitsize: 1.}: BYTE
    fFocused* {.bitsize: 1.}: BYTE
  PMENUBARINFO* = ptr MENUBARINFO

type
  DLGPROC* = proc (P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.stdcall.}
  TIMERPROC* = proc (P1: HWND, P2: UINT, P3: UINT, P4: DWORD): void {.stdcall.}
  GRAYSTRINGPROC* = proc (P1: HDC, P2: LPARAM, P3: int32): BOOL {.stdcall.}
  HOOKPROC* = proc (P1: int32, P2: WPARAM, P3: LPARAM): LRESULT {.stdcall.}
  PROPENUMPROCA* = proc (P1: HWND, P2: LPCSTR, P3: HANDLE): BOOL {.stdcall.}
  PROPENUMPROCW* = proc (P1: HWND, P2: LPCWSTR, P3: HANDLE): BOOL {.stdcall.}
  PROPENUMPROCEXA* = proc (P1: HWND, P2: LPSTR, P3: HANDLE, P4: DWORD): BOOL {.stdcall.}
  PROPENUMPROCEXW* = proc (P1: HWND, P2: LPWSTR, P3: HANDLE, P4: DWORD): BOOL {.stdcall.}
  EDITWORDBREAKPROCA* = proc (P1: LPSTR, P2: int32, P3: int32, P4: int32): int32 {.stdcall.}
  EDITWORDBREAKPROCW* = proc (P1: LPWSTR, P2: int32, P3: int32, P4: int32): int32 {.stdcall.}
  WNDPROC* = proc (P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): LRESULT {.stdcall.}
  DRAWSTATEPROC* = proc (P1: HDC, P2: LPARAM, P3: WPARAM, P4: int32, P5: int32): BOOL {.stdcall.}
  WNDENUMPROC* = proc (P1: HWND, P2: LPARAM): BOOL {.stdcall.}
  ENUMWINDOWSPROC* = proc (P1: HWND, P2: LPARAM): BOOL {.stdcall.}
  MSGBOXCALLBACK* = proc (P1: LPHELPINFO): void {.stdcall.}
  MONITORENUMPROC* = proc (P1: HMONITOR, P2: HDC, P3: LPRECT, P4: LPARAM): BOOL {.stdcall.}
  NAMEENUMPROCA* = proc (P1: LPSTR, P2: LPARAM): BOOL {.stdcall.}
  NAMEENUMPROCW* = proc (P1: LPWSTR, P2: LPARAM): BOOL {.stdcall.}
  SENDASYNCPROC* = proc (P1: HWND, P2: UINT, P3: DWORD, P4: LRESULT): void {.stdcall.}
  DESKTOPENUMPROCA* = NAMEENUMPROCA
  DESKTOPENUMPROCW* = NAMEENUMPROCW
  WINSTAENUMPROCA* = NAMEENUMPROCA
  WINSTAENUMPROCW* = NAMEENUMPROCW
  HHOOK* = HANDLE
  HDWP* = HANDLE
  HDEVNOTIFY* = HANDLE
  ACCEL* {.final, pure.} = object
    fVirt*: BYTE
    key*: WORD
    cmd*: WORD
  LPACCEL* = ptr ACCEL
  ACCESSTIMEOUT* {.final, pure.} = object
    cbSize*: UINT
    dwFlags*: DWORD
    iTimeOutMSec*: DWORD
  LPACCESSTIMEOUT* = ptr ACCESSTIMEOUT
  ANIMATIONINFO* {.final, pure.} = object
    cbSize*: UINT
    iMinAnimate*: int32
  LPANIMATIONINFO* = ptr ANIMATIONINFO
  CREATESTRUCTA* {.final, pure.} = object
    lpCreateParams*: LPVOID
    hInstance*: HINSTANCE
    hMenu*: HMENU
    hwndParent*: HWND
    cy*: int32
    cx*: int32
    y*: int32
    x*: int32
    style*: LONG
    lpszName*: LPCSTR
    lpszClass*: LPCSTR
    dwExStyle*: DWORD
  LPCREATESTRUCTA* = ptr CREATESTRUCTA
  CREATESTRUCTW* {.final, pure.} = object
    lpCreateParams*: LPVOID
    hInstance*: HINSTANCE
    hMenu*: HMENU
    hwndParent*: HWND
    cy*: int32
    cx*: int32
    y*: int32
    x*: int32
    style*: LONG
    lpszName*: LPCWSTR
    lpszClass*: LPCWSTR
    dwExStyle*: DWORD
  LPCREATESTRUCTW* = ptr CREATESTRUCTW
  CBT_CREATEWNDA* {.final, pure.} = object
    lpcs*: LPCREATESTRUCTA
    hwndInsertAfter*: HWND
  LPCBT_CREATEWNDA* = ptr CBT_CREATEWNDA
  CBT_CREATEWNDW* {.final, pure.} = object
    lpcs*: LPCREATESTRUCTW
    hwndInsertAfter*: HWND
  LPCBT_CREATEWNDW* = ptr CBT_CREATEWNDW
  CBTACTIVATESTRUCT* {.final, pure.} = object
    fMouse*: BOOL
    hWndActive*: HWND
  LPCBTACTIVATESTRUCT* = ptr CBTACTIVATESTRUCT
  CLIENTCREATESTRUCT* {.final, pure.} = object
    hWindowMenu*: HANDLE
    idFirstChild*: UINT
  LPCLIENTCREATESTRUCT* = ptr CLIENTCREATESTRUCT
  COMPAREITEMSTRUCT* {.final, pure.} = object
    CtlType*: UINT
    CtlID*: UINT
    hwndItem*: HWND
    itemID1*: UINT
    itemData1*: DWORD
    itemID2*: UINT
    itemData2*: DWORD
    dwLocaleId*: DWORD
  LPCOMPAREITEMSTRUCT* = ptr COMPAREITEMSTRUCT
  COPYDATASTRUCT* {.final, pure.} = object
    dwData*: DWORD
    cbData*: DWORD
    lpData*: PVOID
  PCOPYDATASTRUCT* = ptr COPYDATASTRUCT
  CURSORSHAPE* {.final, pure.} = object
    xHotSpot*: int32
    yHotSpot*: int32
    cx*: int32
    cy*: int32
    cbWidth*: int32
    Planes*: BYTE
    BitsPixel*: BYTE
  LPCURSORSHAPE* = ptr CURSORSHAPE
  CWPRETSTRUCT* {.final, pure.} = object
    lResult*: LRESULT
    lParam*: LPARAM
    wParam*: WPARAM
    message*: DWORD
    hwnd*: HWND
  CWPSTRUCT* {.final, pure.} = object
    lParam*: LPARAM
    wParam*: WPARAM
    message*: UINT
    hwnd*: HWND
  PCWPSTRUCT* = ptr CWPSTRUCT
  DEBUGHOOKINFO* {.final, pure.} = object
    idThread*: DWORD
    idThreadInstaller*: DWORD
    lParam*: LPARAM
    wParam*: WPARAM
    code*: int32
  PDEBUGHOOKINFO* = ptr DEBUGHOOKINFO
  LPDEBUGHOOKINFO* = ptr DEBUGHOOKINFO
  DELETEITEMSTRUCT* {.final, pure.} = object
    CtlType*: UINT
    CtlID*: UINT
    itemID*: UINT
    hwndItem*: HWND
    itemData*: UINT
  PDELETEITEMSTRUCT* = ptr DELETEITEMSTRUCT
  LPDELETEITEMSTRUCT* = ptr DELETEITEMSTRUCT
  DLGITEMTEMPLATE* {.final, pure.} = object
    style*: DWORD
    dwExtendedStyle*: DWORD
    x*: int16
    y*: int16
    cx*: int16
    cy*: int16
    id*: WORD
  LPDLGITEMTEMPLATE* = ptr DLGITEMTEMPLATE
  DLGTEMPLATE* {.final, pure.} = object
    style*: DWORD
    dwExtendedStyle*: DWORD
    cdit*: WORD
    x*: int16
    y*: int16
    cx*: int16
    cy*: int16
  LPDLGTEMPLATE* = ptr DLGTEMPLATE
  LPDLGTEMPLATEA* = ptr DLGTEMPLATE
  LPDLGTEMPLATEW* = ptr DLGTEMPLATE
  LPCDLGTEMPLATE* = ptr DLGTEMPLATE
  DRAWITEMSTRUCT* {.final, pure.} = object
    CtlType*: UINT
    CtlID*: UINT
    itemID*: UINT
    itemAction*: UINT
    itemState*: UINT
    hwndItem*: HWND
    hDC*: HDC
    rcItem*: RECT
    itemData*: DWORD
  LPDRAWITEMSTRUCT* = ptr DRAWITEMSTRUCT
  PDRAWITEMSTRUCT* = ptr DRAWITEMSTRUCT
  DRAWTEXTPARAMS* {.final, pure.} = object
    cbSize*: UINT
    iTabLength*: int32
    iLeftMargin*: int32
    iRightMargin*: int32
    uiLengthDrawn*: UINT
  LPDRAWTEXTPARAMS* = ptr DRAWTEXTPARAMS
  PAINTSTRUCT* {.final, pure.} = object
    hdc*: HDC
    fErase*: BOOL
    rcPaint*: RECT
    fRestore*: BOOL
    fIncUpdate*: BOOL
    rgbReserved*: array[32, BYTE]
  LPPAINTSTRUCT* = ptr PAINTSTRUCT
  MSG* {.final, pure.} = object
    hwnd*: HWND
    message*: UINT
    wParam*: WPARAM
    lParam*: LPARAM
    time*: DWORD
    pt*: POINT
  LPMSG* = ptr MSG
  PMSG* = ptr MSG
  ICONINFO* {.final, pure.} = object
    fIcon*: BOOL
    xHotspot*: DWORD
    yHotspot*: DWORD
    hbmMask*: HBITMAP
    hbmColor*: HBITMAP
  PICONINFO* = ptr ICONINFO
  NMHDR* {.final, pure.} = object
    hwndFrom*: HWND
    idFrom*: UINT
    code*: UINT
  LPNMHDR* = ptr NMHDR
  WNDCLASSA* {.final, pure.} = object
    style*: UINT
    lpfnWndProc*: WNDPROC
    cbClsExtra*: int32
    cbWndExtra*: int32
    hInstance*: HINSTANCE
    hIcon*: HICON
    hCursor*: HCURSOR
    hbrBackground*: HBRUSH
    lpszMenuName*: LPCSTR
    lpszClassName*: LPCSTR
  LPWNDCLASSA* = ptr WNDCLASSA
  PWNDCLASSA* = ptr WNDCLASSA
  WNDCLASSW* {.final, pure.} = object
    style*: UINT
    lpfnWndProc*: WNDPROC
    cbClsExtra*: int32
    cbWndExtra*: int32
    hInstance*: HINSTANCE
    hIcon*: HICON
    hCursor*: HCURSOR
    hbrBackground*: HBRUSH
    lpszMenuName*: LPCWSTR
    lpszClassName*: LPCWSTR
  LPWNDCLASSW* = ptr WNDCLASSW
  PWNDCLASSW* = ptr WNDCLASSW
  WNDCLASSEXA* {.final, pure.} = object
    cbSize*: UINT
    style*: UINT
    lpfnWndProc*: WNDPROC
    cbClsExtra*: int32
    cbWndExtra*: int32
    hInstance*: HINSTANCE
    hIcon*: HICON
    hCursor*: HCURSOR
    hbrBackground*: HBRUSH
    lpszMenuName*: LPCSTR
    lpszClassName*: LPCSTR
    hIconSm*: HICON
  LPWNDCLASSEXA* = ptr WNDCLASSEXA
  PWNDCLASSEXA* = ptr WNDCLASSEXA
  WNDCLASSEXW* {.final, pure.} = object
    cbSize*: UINT
    style*: UINT
    lpfnWndProc*: WNDPROC
    cbClsExtra*: int32
    cbWndExtra*: int32
    hInstance*: HINSTANCE
    hIcon*: HICON
    hCursor*: HCURSOR
    hbrBackground*: HBRUSH
    lpszMenuName*: LPCWSTR
    lpszClassName*: LPCWSTR
    hIconSm*: HICON
  LPWNDCLASSEXW* = ptr WNDCLASSEXW
  PWNDCLASSEXW* = ptr WNDCLASSEXW
  MENUITEMINFOA* {.final, pure.} = object
    cbSize*: UINT
    fMask*: UINT
    fType*: UINT
    fState*: UINT
    wID*: UINT
    hSubMenu*: HMENU
    hbmpChecked*: HBITMAP
    hbmpUnchecked*: HBITMAP
    dwItemData*: DWORD
    dwTypeData*: LPSTR
    cch*: UINT
    hbmpItem*: HBITMAP
  LPMENUITEMINFOA* = ptr MENUITEMINFOA
  LPCMENUITEMINFOA* = ptr MENUITEMINFOA
  MENUITEMINFOW* {.final, pure.} = object
    cbSize*: UINT
    fMask*: UINT
    fType*: UINT
    fState*: UINT
    wID*: UINT
    hSubMenu*: HMENU
    hbmpChecked*: HBITMAP
    hbmpUnchecked*: HBITMAP
    dwItemData*: DWORD
    dwTypeData*: LPWSTR
    cch*: UINT
    hbmpItem*: HBITMAP
  LPMENUITEMINFOW* = ptr MENUITEMINFOW
  LPCMENUITEMINFOW* = ptr MENUITEMINFOW
  SCROLLINFO* {.final, pure.} = object
    cbSize*: UINT
    fMask*: UINT
    nMin*: int32
    nMax*: int32
    nPage*: UINT
    nPos*: int32
    nTrackPos*: int32
  LPSCROLLINFO* = ptr SCROLLINFO
  LPCSCROLLINFO* = ptr SCROLLINFO
  WINDOWPLACEMENT* {.final, pure.} = object
    length*: UINT
    flags*: UINT
    showCmd*: UINT
    ptMinPosition*: POINT
    ptMaxPosition*: POINT
    rcNormalPosition*: RECT
  LPWINDOWPLACEMENT* = ptr WINDOWPLACEMENT
  PWINDOWPLACEMENT* = ptr WINDOWPLACEMENT
  MENUITEMTEMPLATEHEADER* {.final, pure.} = object
    versionNumber*: WORD
    offset*: WORD
  MENUITEMTEMPLATE* {.final, pure.} = object
    mtOption*: WORD
    mtID*: WORD
    mtString*: array[1, WCHAR]
  MENUTEMPLATE* {.final, pure.} = object
  MENUTEMPLATEA* {.final, pure.} = object
  MENUTEMPLATEW* {.final, pure.} = object
  LPMENUTEMPLATEA* = ptr MENUTEMPLATE
  LPMENUTEMPLATEW* = ptr MENUTEMPLATE
  LPMENUTEMPLATE* = ptr MENUTEMPLATE
  HELPINFO* {.final, pure.} = object
    cbSize*: UINT
    iContextType*: int32
    iCtrlId*: int32
    hItemHandle*: HANDLE
    dwContextId*: DWORD
    MousePos*: POINT
  LPHELPINFO* = ptr HELPINFO
  MSGBOXPARAMSA* {.final, pure.} = object
    cbSize*: UINT
    hwndOwner*: HWND
    hInstance*: HINSTANCE
    lpszText*: LPCSTR
    lpszCaption*: LPCSTR
    dwStyle*: DWORD
    lpszIcon*: LPCSTR
    dwContextHelpId*: DWORD
    lpfnMsgBoxCallback*: MSGBOXCALLBACK
    dwLanguageId*: DWORD
  PMSGBOXPARAMSA* = ptr MSGBOXPARAMSA
  LPMSGBOXPARAMSA* = ptr MSGBOXPARAMSA
  MSGBOXPARAMSW* {.final, pure.} = object
    cbSize*: UINT
    hwndOwner*: HWND
    hInstance*: HINSTANCE
    lpszText*: LPCWSTR
    lpszCaption*: LPCWSTR
    dwStyle*: DWORD
    lpszIcon*: LPCWSTR
    dwContextHelpId*: DWORD
    lpfnMsgBoxCallback*: MSGBOXCALLBACK
    dwLanguageId*: DWORD
  PMSGBOXPARAMSW* = ptr MSGBOXPARAMSW
  LPMSGBOXPARAMSW* = ptr MSGBOXPARAMSW
  USEROBJECTFLAGS* {.final, pure.} = object
    fInherit*: BOOL
    fReserved*: BOOL
    dwFlags*: DWORD
  FILTERKEYS* {.final, pure.} = object
    cbSize*: UINT
    dwFlags*: DWORD
    iWaitMSec*: DWORD
    iDelayMSec*: DWORD
    iRepeatMSec*: DWORD
    iBounceMSec*: DWORD
  HIGHCONTRASTA* {.final, pure.} = object
    cbSize*: UINT
    dwFlags*: DWORD
    lpszDefaultScheme*: LPSTR
  LPHIGHCONTRASTA* = ptr HIGHCONTRASTA
  HIGHCONTRASTW* {.final, pure.} = object
    cbSize*: UINT
    dwFlags*: DWORD
    lpszDefaultScheme*: LPWSTR
  LPHIGHCONTRASTW* = ptr HIGHCONTRASTW
  ICONMETRICSA* {.final, pure.} = object
    cbSize*: UINT
    iHorzSpacing*: int32
    iVertSpacing*: int32
    iTitleWrap*: int32
    lfFont*: LOGFONTA
  LPICONMETRICSA* = ptr ICONMETRICSA
  ICONMETRICSW* {.final, pure.} = object
    cbSize*: UINT
    iHorzSpacing*: int32
    iVertSpacing*: int32
    iTitleWrap*: int32
    lfFont*: LOGFONTW
  LPICONMETRICSW* = ptr ICONMETRICSW
  MINIMIZEDMETRICS* {.final, pure.} = object
    cbSize*: UINT
    iWidth*: int32
    iHorzGap*: int32
    iVertGap*: int32
    iArrange*: int32
  LPMINIMIZEDMETRICS* = ptr MINIMIZEDMETRICS
  MOUSEKEYS* {.final, pure.} = object
    cbSize*: UINT
    dwFlags*: DWORD
    iMaxSpeed*: DWORD
    iTimeToMaxSpeed*: DWORD
    iCtrlSpeed*: DWORD
    dwReserved1*: DWORD
    dwReserved2*: DWORD
  LPMOUSEKEYS* = ptr MOUSEKEYS
  NONCLIENTMETRICSA* {.final, pure.} = object
    cbSize*: UINT
    iBorderWidth*: int32
    iScrollWidth*: int32
    iScrollHeight*: int32
    iCaptionWidth*: int32
    iCaptionHeight*: int32
    lfCaptionFont*: LOGFONTA
    iSmCaptionWidth*: int32
    iSmCaptionHeight*: int32
    lfSmCaptionFont*: LOGFONTA
    iMenuWidth*: int32
    iMenuHeight*: int32
    lfMenuFont*: LOGFONTA
    lfStatusFont*: LOGFONTA
    lfMessageFont*: LOGFONTA
  LPNONCLIENTMETRICSA* = ptr NONCLIENTMETRICSA
  NONCLIENTMETRICSW* {.final, pure.} = object
    cbSize*: UINT
    iBorderWidth*: int32
    iScrollWidth*: int32
    iScrollHeight*: int32
    iCaptionWidth*: int32
    iCaptionHeight*: int32
    lfCaptionFont*: LOGFONTW
    iSmCaptionWidth*: int32
    iSmCaptionHeight*: int32
    lfSmCaptionFont*: LOGFONTW
    iMenuWidth*: int32
    iMenuHeight*: int32
    lfMenuFont*: LOGFONTW
    lfStatusFont*: LOGFONTW
    lfMessageFont*: LOGFONTW
  LPNONCLIENTMETRICSW* = ptr NONCLIENTMETRICSW
  SERIALKEYSA* {.final, pure.} = object
    cbSize*: UINT
    dwFlags*: DWORD
    lpszActivePort*: LPSTR
    lpszPort*: LPSTR
    iBaudRate*: UINT
    iPortState*: UINT
    iActive*: UINT
  LPSERIALKEYSA* = ptr SERIALKEYSA
  SERIALKEYSW* {.final, pure.} = object
    cbSize*: UINT
    dwFlags*: DWORD
    lpszActivePort*: LPWSTR
    lpszPort*: LPWSTR
    iBaudRate*: UINT
    iPortState*: UINT
    iActive*: UINT
  LPSERIALKEYSW* = ptr SERIALKEYSW
  SOUNDSENTRYA* {.final, pure.} = object
    cbSize*: UINT
    dwFlags*: DWORD
    iFSTextEffect*: DWORD
    iFSTextEffectMSec*: DWORD
    iFSTextEffectColorBits*: DWORD
    iFSGrafEffect*: DWORD
    iFSGrafEffectMSec*: DWORD
    iFSGrafEffectColor*: DWORD
    iWindowsEffect*: DWORD
    iWindowsEffectMSec*: DWORD
    lpszWindowsEffectDLL*: LPSTR
    iWindowsEffectOrdinal*: DWORD
  LPSOUNDSENTRYA* = ptr SOUNDSENTRYA
  SOUNDSENTRYW* {.final, pure.} = object
    cbSize*: UINT
    dwFlags*: DWORD
    iFSTextEffect*: DWORD
    iFSTextEffectMSec*: DWORD
    iFSTextEffectColorBits*: DWORD
    iFSGrafEffect*: DWORD
    iFSGrafEffectMSec*: DWORD
    iFSGrafEffectColor*: DWORD
    iWindowsEffect*: DWORD
    iWindowsEffectMSec*: DWORD
    lpszWindowsEffectDLL*: LPWSTR
    iWindowsEffectOrdinal*: DWORD
  LPSOUNDSENTRYW* = ptr SOUNDSENTRYW
  STICKYKEYS* {.final, pure.} = object
    cbSize*: DWORD
    dwFlags*: DWORD
  LPSTICKYKEYS* = ptr STICKYKEYS
  TOGGLEKEYS* {.final, pure.} = object
    cbSize*: DWORD
    dwFlags*: DWORD
  MOUSEHOOKSTRUCT* {.final, pure.} = object
    pt*: POINT
    hwnd*: HWND
    wHitTestCode*: UINT
    dwExtraInfo*: DWORD
  LPMOUSEHOOKSTRUCT* = ptr MOUSEHOOKSTRUCT
  PMOUSEHOOKSTRUCT* = ptr MOUSEHOOKSTRUCT
  TTRACKMOUSEEVENT* {.final, pure.} = object # renamed from TRACKMOUSEEVENT
    cbSize*: DWORD
    dwFlags*: DWORD
    hwndTrack*: HWND
    dwHoverTime*: DWORD
  LPTRACKMOUSEEVENT* = ptr TTRACKMOUSEEVENT
  TPMPARAMS* {.final, pure.} = object
    cbSize*: UINT
    rcExclude*: RECT
  LPTPMPARAMS* = ptr TPMPARAMS
  EVENTMSG* {.final, pure.} = object
    message*: UINT
    paramL*: UINT
    paramH*: UINT
    time*: DWORD
    hwnd*: HWND
  PEVENTMSGMSG* = ptr EVENTMSG
  LPEVENTMSGMSG* = ptr EVENTMSG
  PEVENTMSG* = ptr EVENTMSG
  LPEVENTMSG* = ptr EVENTMSG
  WINDOWPOS* {.final, pure.} = object
    hwnd*: HWND
    hwndInsertAfter*: HWND
    x*: int32
    y*: int32
    cx*: int32
    cy*: int32
    flags*: UINT
  PWINDOWPOS* = ptr WINDOWPOS
  LPWINDOWPOS* = ptr WINDOWPOS
  NCCALCSIZE_PARAMS* {.final, pure.} = object
    rgrc*: array[3, RECT]
    lppos*: PWINDOWPOS
  LPNCCALCSIZE_PARAMS* = ptr NCCALCSIZE_PARAMS
  MDICREATESTRUCTA* {.final, pure.} = object
    szClass*: LPCSTR
    szTitle*: LPCSTR
    hOwner*: HANDLE
    x*: int32
    y*: int32
    cx*: int32
    cy*: int32
    style*: DWORD
    lParam*: LPARAM
  LPMDICREATESTRUCTA* = ptr MDICREATESTRUCTA
  MDICREATESTRUCTW* {.final, pure.} = object
    szClass*: LPCWSTR
    szTitle*: LPCWSTR
    hOwner*: HANDLE
    x*: int32
    y*: int32
    cx*: int32
    cy*: int32
    style*: DWORD
    lParam*: LPARAM
  LPMDICREATESTRUCTW* = ptr MDICREATESTRUCTW
  MINMAXINFO* {.final, pure.} = object
    ptReserved*: POINT
    ptMaxSize*: POINT
    ptMaxPosition*: POINT
    ptMinTrackSize*: POINT
    ptMaxTrackSize*: POINT
  PMINMAXINFO* = ptr MINMAXINFO
  LPMINMAXINFO* = ptr MINMAXINFO
  MDINEXTMENU* {.final, pure.} = object
    hmenuIn*: HMENU
    hmenuNext*: HMENU
    hwndNext*: HWND
  PMDINEXTMENU* = ptr MDINEXTMENU
  LPMDINEXTMENU* = ptr MDINEXTMENU
  MEASUREITEMSTRUCT* {.final, pure.} = object
    CtlType*: UINT
    CtlID*: UINT
    itemID*: UINT
    itemWidth*: UINT
    itemHeight*: UINT
    itemData*: DWORD
  PMEASUREITEMSTRUCT* = ptr MEASUREITEMSTRUCT
  LPMEASUREITEMSTRUCT* = ptr MEASUREITEMSTRUCT
  DROPSTRUCT* {.final, pure.} = object
    hwndSource*: HWND
    hwndSink*: HWND
    wFmt*: DWORD
    dwData*: DWORD
    ptDrop*: POINT
    dwControlData*: DWORD
  PDROPSTRUCT* = ptr DROPSTRUCT
  LPDROPSTRUCT* = ptr DROPSTRUCT
  HELPPOLY* = DWORD
  MULTIKEYHELPA* {.final, pure.} = object
    mkSize*: DWORD
    mkKeylist*: CHAR
    szKeyphrase*: array[1, CHAR]
  PMULTIKEYHELPA* = ptr MULTIKEYHELPA
  LPMULTIKEYHELPA* = ptr MULTIKEYHELPA
  MULTIKEYHELPW* {.final, pure.} = object
    mkSize*: DWORD
    mkKeylist*: WCHAR
    szKeyphrase*: array[1, WCHAR]
  PMULTIKEYHELPW* = ptr MULTIKEYHELPW
  LPMULTIKEYHELPW* = ptr MULTIKEYHELPW
  HELPWININFOA* {.final, pure.} = object
    wStructSize*: int32
    x*: int32
    y*: int32
    dx*: int32
    dy*: int32
    wMax*: int32
    rgchMember*: array[2, WCHAR]
  PHELPWININFOA* = ptr HELPWININFOA
  LPHELPWININFOA* = ptr HELPWININFOA
  HELPWININFOW* {.final, pure.} = object
    wStructSize*: int32
    x*: int32
    y*: int32
    dx*: int32
    dy*: int32
    wMax*: int32
    rgchMember*: array[2, CHAR]
  PHELPWININFOW* = ptr HELPWININFOW
  LPHELPWININFOW* = ptr HELPWININFOW
  STYLESTRUCT* {.final, pure.} = object
    styleOld*: DWORD
    styleNew*: DWORD
  LPSTYLESTRUCT* = ptr STYLESTRUCT
  ALTTABINFO* {.final, pure.} = object
    cbSize*: DWORD
    cItems*: int32
    cColumns*: int32
    cRows*: int32
    iColFocus*: int32
    iRowFocus*: int32
    cxItem*: int32
    cyItem*: int32
    ptStart*: POINT
  PALTTABINFO* = ptr ALTTABINFO
  LPALTTABINFO* = ptr ALTTABINFO
  COMBOBOXINFO* {.final, pure.} = object
    cbSize*: DWORD
    rcItem*: RECT
    rcButton*: RECT
    stateButton*: DWORD
    hwndCombo*: HWND
    hwndItem*: HWND
    hwndList*: HWND
  PCOMBOBOXINFO* = ptr COMBOBOXINFO
  LPCOMBOBOXINFO* = ptr COMBOBOXINFO
  CURSORINFO* {.final, pure.} = object
    cbSize*: DWORD
    flags*: DWORD
    hCursor*: HCURSOR
    ptScreenPos*: POINT
  PCURSORINFO* = ptr CURSORINFO
  LPCURSORINFO* = ptr CURSORINFO
  MENUINFO* {.final, pure.} = object
    cbSize*: DWORD
    fMask*: DWORD
    dwStyle*: DWORD
    cyMax*: UINT
    hbrBack*: HBRUSH
    dwContextHelpID*: DWORD
    dwMenuData*: ULONG_PTR
  LPMENUINFO* = ptr MENUINFO
  LPCMENUINFO* = ptr MENUINFO

const
  CCHILDREN_SCROLLBAR* = 5

type
  SCROLLBARINFO* {.final, pure.} = object
    cbSize*: DWORD
    rcScrollBar*: RECT
    dxyLineButton*: int32
    xyThumbTop*: int32
    xyThumbBottom*: int32
    reserved*: int32
    rgstate*: array[CCHILDREN_SCROLLBAR+1, DWORD]
  PSCROLLBARINFO* = ptr SCROLLBARINFO
  LPSCROLLBARINFO* = ptr SCROLLBARINFO

const
  CCHILDREN_TITLEBAR* = 5

type
  TITLEBARINFO* {.final, pure.} = object
    cbSize*: DWORD
    rcTitleBar*: RECT
    rgstate*: array[CCHILDREN_TITLEBAR+1, DWORD]
  PTITLEBARINFO* = ptr TITLEBARINFO
  LPTITLEBARINFO* = ptr TITLEBARINFO
  WINDOWINFO* {.final, pure.} = object
    cbSize*: DWORD
    rcWindow*: RECT
    rcClient*: RECT
    dwStyle*: DWORD
    dwExStyle*: DWORD
    dwWindowStatus*: DWORD
    cxWindowBorders*: UINT
    cyWindowBorders*: UINT
    atomWindowType*: ATOM
    wCreatorVersion*: WORD
  PWINDOWINFO* = ptr WINDOWINFO
  LPWINDOWINFO* = ptr WINDOWINFO
  LASTINPUTINFO* {.final, pure.} = object
    cbSize*: UINT
    dwTime*: DWORD
  PLASTINPUTINFO* = ptr LASTINPUTINFO
  MONITORINFO* {.final, pure.} = object
    cbSize*: DWORD
    rcMonitor*: RECT
    rcWork*: RECT
    dwFlags*: DWORD
  LPMONITORINFO* = ptr MONITORINFO
  MONITORINFOEXA* {.final, pure.} = object
    cbSize*: DWORD
    rcMonitor*: RECT
    rcWork*: RECT
    dwFlags*: DWORD
    szDevice*: array[CCHDEVICENAME, CHAR]
  LPMONITORINFOEXA* = ptr MONITORINFOEXA
  MONITORINFOEXW* {.final, pure.} = object
    cbSize*: DWORD
    rcMonitor*: RECT
    rcWork*: RECT
    dwFlags*: DWORD
    szDevice*: array[CCHDEVICENAME, WCHAR]
  LPMONITORINFOEXW* = ptr MONITORINFOEXW
  KBDLLHOOKSTRUCT* {.final, pure.} = object
    vkCode*: DWORD
    scanCode*: DWORD
    flags*: DWORD
    time*: DWORD
    dwExtraInfo*: DWORD
  LPKBDLLHOOKSTRUCT* = ptr KBDLLHOOKSTRUCT
  PKBDLLHOOKSTRUCT* = ptr KBDLLHOOKSTRUCT
  FLASHWINFO* {.final, pure.} = object
    cbSize*: UINT
    hwnd*: HWND
    dwFlags*: DWORD
    uCount*: UINT
    dwTimeout*: DWORD
  PFLASHWINFO* = ptr FLASHWINFO
  MOUSEMOVEPOINT* {.final, pure.} = object
    x*: int32
    y*: int32
    time*: DWORD
    dwExtraInfo*: ULONG_PTR
  PMOUSEMOVEPOINT* = ptr MOUSEMOVEPOINT
  LPMOUSEMOVEPOINT* = ptr MOUSEMOVEPOINT
  MOUSEINPUT* {.final, pure.} = object
    dx*: LONG
    dy*: LONG
    mouseData*: DWORD
    dwFlags*: DWORD
    time*: DWORD
    dwExtraInfo*: ULONG_PTR
  PMOUSEINPUT* = ptr MOUSEINPUT
  KEYBDINPUT* {.final, pure.} = object
    wVk*: WORD
    wScan*: WORD
    dwFlags*: DWORD
    time*: DWORD
    dwExtraInfo*: ULONG_PTR
  PKEYBDINPUT* = ptr KEYBDINPUT
  HARDWAREINPUT* {.final, pure.} = object
    uMsg*: DWORD
    wParamL*: WORD
    wParamH*: WORD
  PHARDWAREINPUT* = ptr HARDWAREINPUT
  INPUT_UNION1* {.final, union, pure.} = object
    mi*: MOUSEINPUT
    ki*: KEYBDINPUT
    hi*: HARDWAREINPUT
  INPUT* {.final, pure.} = object
    itype*: DWORD
    u1*: INPUT_UNION1
  PINPUT* = ptr INPUT
  LPINPUT* = ptr INPUT
  GUITHREADINFO* {.final, pure.} = object
    cbSize*: DWORD
    flags*: DWORD
    hwndActive*: HWND
    hwndFocus*: HWND
    hwndCapture*: HWND
    hwndMenuOwner*: HWND
    hwndMoveSize*: HWND
    hwndCaret*: HWND
    rcCaret*: RECT
  PGUITHREADINFO* = ptr GUITHREADINFO
  LPGUITHREADINFO* = ptr GUITHREADINFO
  WINEVENTPROC* = proc (P1: HWINEVENTHOOK, P2: DWORD, P3: HWND, P4: LONG, P5: LONG, P6: DWORD, P7: DWORD): void {.stdcall.}
  BSMINFO* {.final, pure.} = object
    cbSize*: UINT
    hdesk*: HDESK
    hwnd*: HWND
    luid*: LUID
  PBSMINFO* = ptr BSMINFO
  HRAWINPUT* = HANDLE
  RAWINPUTHEADER* {.final, pure.} = object
    dwType*: DWORD
    dwSize*: DWORD
    hDevice*: HANDLE
    wParam*: WPARAM
  PRAWINPUTHEADER* = ptr RAWINPUTHEADER
  RAWMOUSE_UNION1_STRUCT1* {.final, pure.} = object
    usButtonFlags*: USHORT
    usButtonData*: USHORT
  RAWMOUSE_UNION1* {.final, union, pure.} = object
    ulButtons*: ULONG
    s1*: RAWMOUSE_UNION1_STRUCT1
  RAWMOUSE* {.final, pure.} = object
    usFlags*: USHORT
    u1*: RAWMOUSE_UNION1
    ulRawButtons*: ULONG
    lLastX*: LONG
    lLastY*: LONG
    ulExtraInformation*: ULONG
  PRAWMOUSE* = ptr RAWMOUSE
  LPRAWMOUSE* = ptr RAWMOUSE
  RAWKEYBOARD* {.final, pure.} = object
    MakeCode*: USHORT
    Flags*: USHORT
    Reserved*: USHORT
    VKey*: USHORT
    Message*: UINT
    ExtraInformation*: ULONG
  PRAWKEYBOARD* = ptr RAWKEYBOARD
  LPRAWKEYBOARD* = ptr RAWKEYBOARD
  RAWHID* {.final, pure.} = object
    dwSizeHid*: DWORD
    dwCount*: DWORD
    bRawData*: BYTE
  PRAWHID* = ptr RAWHID
  LPRAWHID* = ptr RAWHID
  RAWINPUT_data* {.final, union, pure.} = object
    mouse*: RAWMOUSE
    keyboard*: RAWKEYBOARD
    hid*: RAWHID
  RAWINPUT* {.final, pure.} = object
    header*: RAWINPUTHEADER
    data*: RAWINPUT_data
  PRAWINPUT* = ptr RAWINPUT
  LPRAWINPUT* = ptr RAWINPUT
  RAWINPUTDEVICE* {.final, pure.} = object
    usUsagePage*: USHORT
    usUsage*: USHORT
    dwFlags*: DWORD
    hwndTarget*: HWND
  PRAWINPUTDEVICE* = ptr RAWINPUTDEVICE
  LPRAWINPUTDEVICE* = ptr RAWINPUTDEVICE
  PCRAWINPUTDEVICE* = ptr RAWINPUTDEVICE
  RAWINPUTDEVICELIST* {.final, pure.} = object
    hDevice*: HANDLE
    dwType*: DWORD
  PRAWINPUTDEVICELIST* = ptr RAWINPUTDEVICELIST
  RID_DEVICE_INFO_MOUSE* {.final, pure.} = object
    dwId*: DWORD
    dwNumberOfButtons*: DWORD
    dwSampleRate*: DWORD
    fHasHorizontalWheel*: BOOL
  RID_DEVICE_INFO_KEYBOARD* {.final, pure.} = object
    dwType*: DWORD
    dwSubType*: DWORD
    dwKeyboardMode*: DWORD
    dwNumberOfFunctionKeys*: DWORD
    dwNumberOfIndicators*: DWORD
    dwNumberOfKeysTotal*: DWORD
  RID_DEVICE_INFO_HID* {.final, pure.} = object
    dwVendorId*: DWORD
    dwProductId*: DWORD
    dwVersionNumber*: DWORD
    usUsagePage*: USHORT
    usUsage*: USHORT
  RID_DEVICE_INFO_UNION1* {.final, union, pure.} = object
    mouse*: RID_DEVICE_INFO_MOUSE
    keyboard*: RID_DEVICE_INFO_KEYBOARD
    hid*: RID_DEVICE_INFO_HID
  RID_DEVICE_INFO* {.final, pure.} = object
    cbSize*: DWORD
    dwType*: DWORD
    u1*: RID_DEVICE_INFO_UNION1
  MSLLHOOKSTRUCT* {.final, pure.} = object
    pt*: POINT
    mouseData*: DWORD
    flags*: DWORD
    time*: DWORD
    dwExtraInfo*: ULONG_PTR
  PMSLLHOOKSTRUCT* = ptr MSLLHOOKSTRUCT


proc MAKEWPARAM*(a, b: auto): WPARAM = ((b.uint16.uint32 shl 16) or a.uint16.uint32).WPARAM
proc MAKELPARAM*(a, b: auto): LPARAM = ((b.uint16.uint32 shl 16) or a.uint16.uint32).LPARAM
proc MAKELRESULT*(a, b: auto): LRESULT = ((b.uint16.uint32 shl 16) or a.uint16.uint32).LRESULT

proc ActivateKeyboardLayout*(P1: HKL, P2: UINT): HKL {.winapi, dynlib: "user32", importc.}
proc AdjustWindowRect*(P1: LPRECT, P2: DWORD, P3: BOOL): BOOL {.winapi, dynlib: "user32", importc.}
proc AdjustWindowRectEx*(P1: LPRECT, P2: DWORD, P3: BOOL, P4: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc AnyPopup*(): BOOL {.winapi, dynlib: "user32", importc.}
proc AppendMenuA*(P1: HMENU, P2: UINT, P3: UINT_PTR, P4: LPCSTR): BOOL {.winapi, dynlib: "user32", importc.}
proc AppendMenuW*(P1: HMENU, P2: UINT, P3: UINT_PTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "user32", importc.}
proc ArrangeIconicWindows*(P1: HWND): UINT {.winapi, dynlib: "user32", importc.}
proc AttachThreadInput*(P1: DWORD, P2: DWORD, P3: BOOL): BOOL {.winapi, dynlib: "user32", importc.}
proc BeginDeferWindowPos*(P1: int32): HDWP {.winapi, dynlib: "user32", importc.}
proc BeginPaint*(P1: HWND, P2: LPPAINTSTRUCT): HDC {.winapi, dynlib: "user32", importc.}
proc BringWindowToTop*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc CallMsgFilterA*(P1: LPMSG, P2: INT): BOOL {.winapi, dynlib: "user32", importc.}
proc CallMsgFilterW*(P1: LPMSG, P2: INT): BOOL {.winapi, dynlib: "user32", importc.}
proc CallNextHookEx*(P1: HHOOK, P2: int32, P3: WPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "user32", importc.}
proc CallWindowProcA*(P1: WNDPROC, P2: HWND, P3: UINT, P4: WPARAM, P5: LPARAM): LRESULT {.winapi, dynlib: "user32", importc.}
proc CallWindowProcW*(P1: WNDPROC, P2: HWND, P3: UINT, P4: WPARAM, P5: LPARAM): LRESULT {.winapi, dynlib: "user32", importc.}
proc CascadeWindows*(P1: HWND, P2: UINT, P3: LPCRECT, P4: UINT, P5: ptr HWND): WORD {.winapi, dynlib: "user32", importc.}
proc ChangeClipboardChain*(P1: HWND, P2: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc ChangeDisplaySettingsA*(P1: PDEVMODEA, P2: DWORD): LONG {.winapi, dynlib: "user32", importc.}
proc ChangeDisplaySettingsW*(P1: PDEVMODEW, P2: DWORD): LONG {.winapi, dynlib: "user32", importc.}
proc ChangeDisplaySettingsExA*(P1: LPCSTR, P2: LPDEVMODEA, P3: HWND, P4: DWORD, P5: LPVOID): LONG {.winapi, dynlib: "user32", importc.}
proc ChangeDisplaySettingsExW*(P1: LPCWSTR, P2: LPDEVMODEW, P3: HWND, P4: DWORD, P5: LPVOID): LONG {.winapi, dynlib: "user32", importc.}
proc ChangeMenuA*(P1: HMENU, P2: UINT, P3: LPCSTR, P4: UINT, P5: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc ChangeMenuW*(P1: HMENU, P2: UINT, P3: LPCWSTR, P4: UINT, P5: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc CharLowerA*(P1: LPSTR): LPSTR {.winapi, dynlib: "user32", importc.}
proc AnsiLower*(P1: LPSTR): LPSTR {.winapi, dynlib: "user32", importc: "CharLowerA".}
proc CharLowerW*(P1: LPWSTR): LPWSTR {.winapi, dynlib: "user32", importc.}
proc CharLowerBuffA*(P1: LPSTR, P2: DWORD): DWORD {.winapi, dynlib: "user32", importc.}
proc AnsiLowerBuff*(P1: LPSTR, P2: DWORD): DWORD {.winapi, dynlib: "user32", importc: "CharLowerBuffA".}
proc CharLowerBuffW*(P1: LPWSTR, P2: DWORD): DWORD {.winapi, dynlib: "user32", importc.}
proc CharNextA*(P1: LPCSTR): LPSTR {.winapi, dynlib: "user32", importc.}
proc AnsiNext*(P1: LPCSTR): LPSTR {.winapi, dynlib: "user32", importc: "CharNextA".}
proc CharNextW*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "user32", importc.}
proc CharNextExA*(P1: WORD, P2: LPCSTR, P3: DWORD): LPSTR {.winapi, dynlib: "user32", importc.}
proc CharNextExW*(P1: WORD, P2: LPCWSTR, P3: DWORD): LPWSTR {.winapi, dynlib: "user32", importc.}
proc CharPrevA*(P1: LPCSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "user32", importc.}
proc AnsiPrev*(P1: LPCSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "user32", importc: "CharPrevA".}
proc CharPrevW*(P1: LPCWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "user32", importc.}
proc CharPrevExA*(P1: WORD, P2: LPCSTR, P3: LPCSTR, P4: DWORD): LPSTR {.winapi, dynlib: "user32", importc.}
proc CharPrevExW*(P1: WORD, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD): LPWSTR {.winapi, dynlib: "user32", importc.}
proc CharToOemA*(P1: LPCSTR, P2: LPSTR): BOOL {.winapi, dynlib: "user32", importc.}
proc AnsiToOem*(P1: LPCSTR, P2: LPSTR): BOOL {.winapi, dynlib: "user32", importc: "CharToOemA".}
proc CharToOemW*(P1: LPCWSTR, P2: LPSTR): BOOL {.winapi, dynlib: "user32", importc.}
proc CharToOemBuffA*(P1: LPCSTR, P2: LPSTR, P3: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc AnsiToOemBuff*(P1: LPCSTR, P2: LPSTR, P3: DWORD): BOOL {.winapi, dynlib: "user32", importc: "CharToOemBuffA".}
proc CharToOemBuffW*(P1: LPCWSTR, P2: LPSTR, P3: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc CharUpperA*(P1: LPSTR): LPSTR {.winapi, dynlib: "user32", importc.}
proc AnsiUpper*(P1: LPSTR): LPSTR {.winapi, dynlib: "user32", importc: "CharUpperA".}
proc CharUpperW*(P1: LPWSTR): LPWSTR {.winapi, dynlib: "user32", importc.}
proc CharUpperBuffA*(P1: LPSTR, P2: DWORD): DWORD {.winapi, dynlib: "user32", importc.}
proc AnsiUpperBuff*(P1: LPSTR, P2: DWORD): DWORD {.winapi, dynlib: "user32", importc: "CharUpperBuffA".}
proc CharUpperBuffW*(P1: LPWSTR, P2: DWORD): DWORD {.winapi, dynlib: "user32", importc.}
proc CheckDlgButton*(P1: HWND, P2: int32, P3: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc CheckMenuItem*(P1: HMENU, P2: UINT, P3: UINT): DWORD {.winapi, dynlib: "user32", importc.}
proc CheckMenuRadioItem*(P1: HMENU, P2: UINT, P3: UINT, P4: UINT, P5: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc CheckRadioButton*(P1: HWND, P2: int32, P3: int32, P4: int32): BOOL {.winapi, dynlib: "user32", importc.}
proc ChildWindowFromPoint*(P1: HWND, P2: POINT): HWND {.winapi, dynlib: "user32", importc.}
proc ChildWindowFromPointEx*(P1: HWND, P2: POINT, P3: UINT): HWND {.winapi, dynlib: "user32", importc.}
proc ClientToScreen*(P1: HWND, P2: LPPOINT): BOOL {.winapi, dynlib: "user32", importc.}
proc ClipCursor*(P1: LPCRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc CloseClipboard*(): BOOL {.winapi, dynlib: "user32", importc.}
proc CloseDesktop*(P1: HDESK): BOOL {.winapi, dynlib: "user32", importc.}
proc CloseWindow*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc CloseWindowStation*(P1: HWINSTA): BOOL {.winapi, dynlib: "user32", importc.}
proc CopyAcceleratorTableA*(P1: HACCEL, P2: LPACCEL, P3: int32): int32 {.winapi, dynlib: "user32", importc.}
proc CopyAcceleratorTableW*(P1: HACCEL, P2: LPACCEL, P3: int32): int32 {.winapi, dynlib: "user32", importc.}
proc CopyIcon*(P1: HICON): HICON {.winapi, dynlib: "user32", importc.}
proc CopyImage*(P1: HANDLE, P2: UINT, P3: int32, P4: int32, P5: UINT): HANDLE {.winapi, dynlib: "user32", importc.}
proc CopyRect*(P1: LPRECT, P2: LPCRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc CountClipboardFormats*(): int32 {.winapi, dynlib: "user32", importc.}
proc CreateAcceleratorTableA*(P1: LPACCEL, P2: int32): HACCEL {.winapi, dynlib: "user32", importc.}
proc CreateAcceleratorTableW*(P1: LPACCEL, P2: int32): HACCEL {.winapi, dynlib: "user32", importc.}
proc CreateCaret*(P1: HWND, P2: HBITMAP, P3: int32, P4: int32): BOOL {.winapi, dynlib: "user32", importc.}
proc CreateCursor*(P1: HINSTANCE, P2: int32, P3: int32, P4: int32, P5: int32, P6: PCVOID, P7: PCVOID): HCURSOR {.winapi, dynlib: "user32", importc.}
proc CreateDesktopA*(P1: LPCSTR, P2: LPCSTR, P3: LPDEVMODEA, P4: DWORD, P5: ACCESS_MASK, P6: LPSECURITY_ATTRIBUTES): HDESK {.winapi, dynlib: "user32", importc.}
proc CreateDesktopW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPDEVMODEW, P4: DWORD, P5: ACCESS_MASK, P6: LPSECURITY_ATTRIBUTES): HDESK {.winapi, dynlib: "user32", importc.}
proc CreateDialogParamA*(P1: HINSTANCE, P2: LPCSTR, P3: HWND, P4: DLGPROC, P5: LPARAM): HWND {.winapi, dynlib: "user32", importc.}
proc CreateDialogParamW*(P1: HINSTANCE, P2: LPCWSTR, P3: HWND, P4: DLGPROC, P5: LPARAM): HWND {.winapi, dynlib: "user32", importc.}
proc CreateDialogIndirectParamA*(P1: HINSTANCE, P2: LPCDLGTEMPLATE, P3: HWND, P4: DLGPROC, P5: LPARAM): HWND {.winapi, dynlib: "user32", importc.}
proc CreateDialogIndirectParamW*(P1: HINSTANCE, P2: LPCDLGTEMPLATE, P3: HWND, P4: DLGPROC, P5: LPARAM): HWND {.winapi, dynlib: "user32", importc.}
proc CreateIcon*(P1: HINSTANCE, P2: int32, P3: int32, P4: BYTE, P5: BYTE, P6: ptr BYTE, P7: ptr BYTE): HICON {.winapi, dynlib: "user32", importc.}
proc CreateIconFromResource*(P1: PBYTE, P2: DWORD, P3: BOOL, P4: DWORD): HICON {.winapi, dynlib: "user32", importc.}
proc CreateIconFromResourceEx*(P1: PBYTE, P2: DWORD, P3: BOOL, P4: DWORD, P5: int32, P6: int32, P7: UINT): HICON {.winapi, dynlib: "user32", importc.}
proc CreateIconIndirect*(P1: PICONINFO): HICON {.winapi, dynlib: "user32", importc.}
proc CreateMDIWindowA*(P1: LPCSTR, P2: LPCSTR, P3: DWORD, P4: int32, P5: int32, P6: int32, P7: int32, P8: HWND, P9: HINSTANCE, P10: LPARAM): HWND {.winapi, dynlib: "user32", importc.}
proc CreateMDIWindowW*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: int32, P5: int32, P6: int32, P7: int32, P8: HWND, P9: HINSTANCE, P10: LPARAM): HWND {.winapi, dynlib: "user32", importc.}
proc CreateMenu*(): HMENU {.winapi, dynlib: "user32", importc.}
proc CreatePopupMenu*(): HMENU {.winapi, dynlib: "user32", importc.}
proc CreateWindowExA*(P1: DWORD, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: int32, P6: int32, P7: int32, P8: int32, P9: HWND, P10: HMENU, P11: HINSTANCE, P12: LPVOID): HWND {.winapi, dynlib: "user32", importc.}
proc CreateWindowExW*(P1: DWORD, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: int32, P6: int32, P7: int32, P8: int32, P9: HWND, P10: HMENU, P11: HINSTANCE, P12: LPVOID): HWND {.winapi, dynlib: "user32", importc.}
proc CreateWindowStationA*(P1: LPSTR, P2: DWORD, P3: DWORD, P4: LPSECURITY_ATTRIBUTES): HWINSTA {.winapi, dynlib: "user32", importc.}
proc CreateWindowStationW*(P1: LPWSTR, P2: DWORD, P3: DWORD, P4: LPSECURITY_ATTRIBUTES): HWINSTA {.winapi, dynlib: "user32", importc.}
proc DefDlgProcA*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "user32", importc.}
proc DefDlgProcW*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "user32", importc.}
proc DeferWindowPos*(P1: HDWP, P2: HWND, P3: HWND, P4: int32, P5: int32, P6: int32, P7: int32, P8: UINT): HDWP {.winapi, dynlib: "user32", importc.}
proc DefFrameProcA*(P1: HWND, P2: HWND, P3: UINT, P4: WPARAM, P5: LPARAM): LRESULT {.winapi, dynlib: "user32", importc.}
proc DefFrameProcW*(P1: HWND, P2: HWND, P3: UINT, P4: WPARAM, P5: LPARAM): LRESULT {.winapi, dynlib: "user32", importc.}
proc DefMDIChildProcA*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "user32", importc.}
proc DefMDIChildProcW*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "user32", importc.}
proc DefWindowProcA*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "user32", importc.}
proc DefWindowProcW*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "user32", importc.}
proc DeleteMenu*(P1: HMENU, P2: UINT, P3: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc DeregisterShellHookWindow*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc DestroyAcceleratorTable*(P1: HACCEL): BOOL {.winapi, dynlib: "user32", importc.}
proc DestroyCaret*(): BOOL {.winapi, dynlib: "user32", importc.}
proc DestroyCursor*(P1: HCURSOR): BOOL {.winapi, dynlib: "user32", importc.}
proc DestroyIcon*(P1: HICON): BOOL {.winapi, dynlib: "user32", importc.}
proc DestroyMenu*(P1: HMENU): BOOL {.winapi, dynlib: "user32", importc.}
proc DestroyWindow*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc DialogBoxParamA*(P1: HINSTANCE, P2: LPCSTR, P3: HWND, P4: DLGPROC, P5: LPARAM): int32 {.winapi, dynlib: "user32", importc.}
proc DialogBoxParamW*(P1: HINSTANCE, P2: LPCWSTR, P3: HWND, P4: DLGPROC, P5: LPARAM): int32 {.winapi, dynlib: "user32", importc.}
proc DialogBoxIndirectParamA*(P1: HINSTANCE, P2: LPCDLGTEMPLATE, P3: HWND, P4: DLGPROC, P5: LPARAM): int32 {.winapi, dynlib: "user32", importc.}
proc DialogBoxIndirectParamW*(P1: HINSTANCE, P2: LPCDLGTEMPLATE, P3: HWND, P4: DLGPROC, P5: LPARAM): int32 {.winapi, dynlib: "user32", importc.}
proc DispatchMessageA*(P1: ptr MSG): LONG {.winapi, dynlib: "user32", importc.}
proc DispatchMessageW*(P1: ptr MSG): LONG {.winapi, dynlib: "user32", importc.}
proc DlgDirListA*(P1: HWND, P2: LPSTR, P3: int32, P4: int32, P5: UINT): int32 {.winapi, dynlib: "user32", importc.}
proc DlgDirListW*(P1: HWND, P2: LPWSTR, P3: int32, P4: int32, P5: UINT): int32 {.winapi, dynlib: "user32", importc.}
proc DlgDirListComboBoxA*(P1: HWND, P2: LPSTR, P3: int32, P4: int32, P5: UINT): int32 {.winapi, dynlib: "user32", importc.}
proc DlgDirListComboBoxW*(P1: HWND, P2: LPWSTR, P3: int32, P4: int32, P5: UINT): int32 {.winapi, dynlib: "user32", importc.}
proc DlgDirSelectComboBoxExA*(P1: HWND, P2: LPSTR, P3: int32, P4: int32): BOOL {.winapi, dynlib: "user32", importc.}
proc DlgDirSelectComboBoxExW*(P1: HWND, P2: LPWSTR, P3: int32, P4: int32): BOOL {.winapi, dynlib: "user32", importc.}
proc DlgDirSelectExA*(P1: HWND, P2: LPSTR, P3: int32, P4: int32): BOOL {.winapi, dynlib: "user32", importc.}
proc DlgDirSelectExW*(P1: HWND, P2: LPWSTR, P3: int32, P4: int32): BOOL {.winapi, dynlib: "user32", importc.}
proc DragDetect*(P1: HWND, P2: POINT): BOOL {.winapi, dynlib: "user32", importc.}
proc DragObject*(P1: HWND, P2: HWND, P3: UINT, P4: DWORD, P5: HCURSOR): DWORD {.winapi, dynlib: "user32", importc.}
proc DrawAnimatedRects*(P1: HWND, P2: int32, P3: LPCRECT, P4: LPCRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc DrawCaption*(P1: HWND, P2: HDC, P3: LPCRECT, P4: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc DrawEdge*(P1: HDC, P2: LPRECT, P3: UINT, P4: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc DrawFocusRect*(P1: HDC, P2: LPCRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc DrawFrameControl*(P1: HDC, P2: LPRECT, P3: UINT, P4: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc DrawIcon*(P1: HDC, P2: int32, P3: int32, P4: HICON): BOOL {.winapi, dynlib: "user32", importc.}
proc DrawIconEx*(P1: HDC, P2: int32, P3: int32, P4: HICON, P5: int32, P6: int32, P7: UINT, P8: HBRUSH, P9: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc DrawMenuBar*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc DrawStateA*(P1: HDC, P2: HBRUSH, P3: DRAWSTATEPROC, P4: LPARAM, P5: WPARAM, P6: int32, P7: int32, P8: int32, P9: int32, P10: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc DrawStateW*(P1: HDC, P2: HBRUSH, P3: DRAWSTATEPROC, P4: LPARAM, P5: WPARAM, P6: int32, P7: int32, P8: int32, P9: int32, P10: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc DrawTextA*(P1: HDC, P2: LPCSTR, P3: int32, P4: LPRECT, P5: UINT): int32 {.winapi, dynlib: "user32", importc.}
proc DrawTextW*(P1: HDC, P2: LPCWSTR, P3: int32, P4: LPRECT, P5: UINT): int32 {.winapi, dynlib: "user32", importc.}
proc DrawTextExA*(P1: HDC, P2: LPSTR, P3: int32, P4: LPRECT, P5: UINT, P6: LPDRAWTEXTPARAMS): int32 {.winapi, dynlib: "user32", importc.}
proc DrawTextExW*(P1: HDC, P2: LPWSTR, P3: int32, P4: LPRECT, P5: UINT, P6: LPDRAWTEXTPARAMS): int32 {.winapi, dynlib: "user32", importc.}
proc EmptyClipboard*(): BOOL {.winapi, dynlib: "user32", importc.}
proc EnableMenuItem*(P1: HMENU, P2: UINT, P3: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc EnableScrollBar*(P1: HWND, P2: UINT, P3: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc EnableWindow*(P1: HWND, P2: BOOL): BOOL {.winapi, dynlib: "user32", importc.}
proc EndDeferWindowPos*(P1: HDWP): BOOL {.winapi, dynlib: "user32", importc.}
proc EndDialog*(P1: HWND, P2: int32): BOOL {.winapi, dynlib: "user32", importc.}
proc EndMenu*(): BOOL {.winapi, dynlib: "user32", importc.}
proc EndPaint*(P1: HWND, P2: ptr PAINTSTRUCT): BOOL {.winapi, dynlib: "user32", importc.}
proc EnumChildWindows*(P1: HWND, P2: ENUMWINDOWSPROC, P3: LPARAM): BOOL {.winapi, dynlib: "user32", importc.}
proc EnumClipboardFormats*(P1: UINT): UINT {.winapi, dynlib: "user32", importc.}
proc EnumDesktopsA*(P1: HWINSTA, P2: DESKTOPENUMPROCA, P3: LPARAM): BOOL {.winapi, dynlib: "user32", importc.}
proc EnumDesktopsW*(P1: HWINSTA, P2: DESKTOPENUMPROCW, P3: LPARAM): BOOL {.winapi, dynlib: "user32", importc.}
proc EnumDesktopWindows*(P1: HDESK, P2: ENUMWINDOWSPROC, P3: LPARAM): BOOL {.winapi, dynlib: "user32", importc.}
proc EnumDisplaySettingsA*(P1: LPCSTR, P2: DWORD, P3: PDEVMODEA): BOOL {.winapi, dynlib: "user32", importc.}
proc EnumDisplaySettingsW*(P1: LPCWSTR, P2: DWORD, P3: PDEVMODEW): BOOL {.winapi, dynlib: "user32", importc.}
proc EnumDisplayDevicesA*(P1: LPCSTR, P2: DWORD, P3: PDISPLAY_DEVICEA, P4: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc EnumDisplayDevicesW*(P1: LPCWSTR, P2: DWORD, P3: PDISPLAY_DEVICEW, P4: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc EnumPropsA*(P1: HWND, P2: PROPENUMPROCA): int32 {.winapi, dynlib: "user32", importc.}
proc EnumPropsW*(P1: HWND, P2: PROPENUMPROCW): int32 {.winapi, dynlib: "user32", importc.}
proc EnumPropsExA*(P1: HWND, P2: PROPENUMPROCEXA, P3: LPARAM): int32 {.winapi, dynlib: "user32", importc.}
proc EnumPropsExW*(P1: HWND, P2: PROPENUMPROCEXW, P3: LPARAM): int32 {.winapi, dynlib: "user32", importc.}
proc EnumThreadWindows*(P1: DWORD, P2: WNDENUMPROC, P3: LPARAM): BOOL {.winapi, dynlib: "user32", importc.}
proc EnumWindows*(P1: WNDENUMPROC, P2: LPARAM): BOOL {.winapi, dynlib: "user32", importc.}
proc EnumWindowStationsA*(P1: WINSTAENUMPROCA, P2: LPARAM): BOOL {.winapi, dynlib: "user32", importc.}
proc EnumWindowStationsW*(P1: WINSTAENUMPROCW, P2: LPARAM): BOOL {.winapi, dynlib: "user32", importc.}
proc EqualRect*(P1: LPCRECT, P2: LPCRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc ExitWindowsEx*(P1: UINT, P2: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc FindWindowA*(P1: LPCSTR, P2: LPCSTR): HWND {.winapi, dynlib: "user32", importc.}
proc FindWindowExA*(P1: HWND, P2: HWND, P3: LPCSTR, P4: LPCSTR): HWND {.winapi, dynlib: "user32", importc.}
proc FindWindowExW*(P1: HWND, P2: HWND, P3: LPCWSTR, P4: LPCWSTR): HWND {.winapi, dynlib: "user32", importc.}
proc FindWindowW*(P1: LPCWSTR, P2: LPCWSTR): HWND {.winapi, dynlib: "user32", importc.}
proc FlashWindow*(P1: HWND, P2: BOOL): BOOL {.winapi, dynlib: "user32", importc.}
proc FrameRect*(P1: HDC, P2: LPCRECT, P3: HBRUSH): int32 {.winapi, dynlib: "user32", importc.}
proc GetActiveWindow*(): HWND {.winapi, dynlib: "user32", importc.}
proc GetAncestor*(P1: HWND, P2: UINT): HWND {.winapi, dynlib: "user32", importc.}
proc GetAsyncKeyState*(P1: int32): SHORT {.winapi, dynlib: "user32", importc.}
proc GetCapture*(): HWND {.winapi, dynlib: "user32", importc.}
proc GetCaretBlinkTime*(): UINT {.winapi, dynlib: "user32", importc.}
proc GetCaretPos*(P1: LPPOINT): BOOL {.winapi, dynlib: "user32", importc.}
proc GetClassInfoA*(P1: HINSTANCE, P2: LPCSTR, P3: LPWNDCLASSA): BOOL {.winapi, dynlib: "user32", importc.}
proc GetClassInfoExA*(P1: HINSTANCE, P2: LPCSTR, P3: LPWNDCLASSEXA): BOOL {.winapi, dynlib: "user32", importc.}
proc GetClassInfoW*(P1: HINSTANCE, P2: LPCWSTR, P3: LPWNDCLASSW): BOOL {.winapi, dynlib: "user32", importc.}
proc GetClassInfoExW*(P1: HINSTANCE, P2: LPCWSTR, P3: LPWNDCLASSEXW): BOOL {.winapi, dynlib: "user32", importc.}
proc GetClassLongA*(P1: HWND, P2: int32): DWORD {.winapi, dynlib: "user32", importc.}
proc GetClassLongW*(P1: HWND, P2: int32): DWORD {.winapi, dynlib: "user32", importc.}
proc GetClassNameA*(P1: HWND, P2: LPSTR, P3: int32): int32 {.winapi, dynlib: "user32", importc.}
proc GetClassNameW*(P1: HWND, P2: LPWSTR, P3: int32): int32 {.winapi, dynlib: "user32", importc.}
proc GetClassWord*(P1: HWND, P2: int32): WORD {.winapi, dynlib: "user32", importc.}
proc GetClientRect*(P1: HWND, P2: LPRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc GetClipboardData*(P1: UINT): HANDLE {.winapi, dynlib: "user32", importc.}
proc GetClipboardFormatNameA*(P1: UINT, P2: LPSTR, P3: int32): int32 {.winapi, dynlib: "user32", importc.}
proc GetClipboardFormatNameW*(P1: UINT, P2: LPWSTR, P3: int32): int32 {.winapi, dynlib: "user32", importc.}
proc GetClipboardOwner*(): HWND {.winapi, dynlib: "user32", importc.}
proc GetClipboardViewer*(): HWND {.winapi, dynlib: "user32", importc.}
proc GetClipCursor*(P1: LPRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc GetCursorPos*(P1: LPPOINT): BOOL {.winapi, dynlib: "user32", importc.}
proc GetDC*(P1: HWND): HDC {.winapi, dynlib: "user32", importc.}
proc GetDCEx*(P1: HWND, P2: HRGN, P3: DWORD): HDC {.winapi, dynlib: "user32", importc.}
proc GetDesktopWindow*(): HWND {.winapi, dynlib: "user32", importc.}
proc GetDialogBaseUnits*(): int32 {.winapi, dynlib: "user32", importc.}
proc GetDlgCtrlID*(P1: HWND): int32 {.winapi, dynlib: "user32", importc.}
proc GetDlgItem*(P1: HWND, P2: int32): HWND {.winapi, dynlib: "user32", importc.}
proc GetDlgItemInt*(P1: HWND, P2: int32, P3: PBOOL, P4: BOOL): UINT {.winapi, dynlib: "user32", importc.}
proc GetDlgItemTextA*(P1: HWND, P2: int32, P3: LPSTR, P4: int32): UINT {.winapi, dynlib: "user32", importc.}
proc GetDlgItemTextW*(P1: HWND, P2: int32, P3: LPWSTR, P4: int32): UINT {.winapi, dynlib: "user32", importc.}
proc GetDoubleClickTime*(): UINT {.winapi, dynlib: "user32", importc.}
proc GetFocus*(): HWND {.winapi, dynlib: "user32", importc.}
proc GetForegroundWindow*(): HWND {.winapi, dynlib: "user32", importc.}
proc GetIconInfo*(P1: HICON, P2: PICONINFO): BOOL {.winapi, dynlib: "user32", importc.}
proc GetInputState*(): BOOL {.winapi, dynlib: "user32", importc.}
proc GetKBCodePage*(): UINT {.winapi, dynlib: "user32", importc.}
proc GetKeyboardLayout*(P1: DWORD): HKL {.winapi, dynlib: "user32", importc.}
proc GetKeyboardLayoutList*(P1: int32, P2: ptr HKL): UINT {.winapi, dynlib: "user32", importc.}
proc GetKeyboardLayoutNameA*(P1: LPSTR): BOOL {.winapi, dynlib: "user32", importc.}
proc GetKeyboardLayoutNameW*(P1: LPWSTR): BOOL {.winapi, dynlib: "user32", importc.}
proc GetKeyboardState*(P1: PBYTE): BOOL {.winapi, dynlib: "user32", importc.}
proc GetKeyboardType*(P1: int32): int32 {.winapi, dynlib: "user32", importc.}
proc GetKeyNameTextA*(P1: LONG, P2: LPSTR, P3: int32): int32 {.winapi, dynlib: "user32", importc.}
proc GetKeyNameTextW*(P1: LONG, P2: LPWSTR, P3: int32): int32 {.winapi, dynlib: "user32", importc.}
proc GetKeyState*(P1: int32): SHORT {.winapi, dynlib: "user32", importc.}
proc GetLastActivePopup*(P1: HWND): HWND {.winapi, dynlib: "user32", importc.}
proc GetMenu*(P1: HWND): HMENU {.winapi, dynlib: "user32", importc.}
proc GetMenuCheckMarkDimensions*(): LONG {.winapi, dynlib: "user32", importc.}
proc GetMenuContextHelpId*(P1: HMENU): DWORD {.winapi, dynlib: "user32", importc.}
proc GetMenuDefaultItem*(P1: HMENU, P2: UINT, P3: UINT): UINT {.winapi, dynlib: "user32", importc.}
proc GetMenuItemCount*(P1: HMENU): int32 {.winapi, dynlib: "user32", importc.}
proc GetMenuItemID*(P1: HMENU, P2: int32): UINT {.winapi, dynlib: "user32", importc.}
proc GetMenuItemInfoA*(P1: HMENU, P2: UINT, P3: BOOL, P4: LPMENUITEMINFOA): BOOL {.winapi, dynlib: "user32", importc.}
proc GetMenuItemInfoW*(P1: HMENU, P2: UINT, P3: BOOL, P4: LPMENUITEMINFOW): BOOL {.winapi, dynlib: "user32", importc.}
proc GetMenuItemRect*(P1: HWND, P2: HMENU, P3: UINT, P4: LPRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc GetMenuState*(P1: HMENU, P2: UINT, P3: UINT): UINT {.winapi, dynlib: "user32", importc.}
proc GetMenuStringA*(P1: HMENU, P2: UINT, P3: LPSTR, P4: int32, P5: UINT): int32 {.winapi, dynlib: "user32", importc.}
proc GetMenuStringW*(P1: HMENU, P2: UINT, P3: LPWSTR, P4: int32, P5: UINT): int32 {.winapi, dynlib: "user32", importc.}
proc GetMessageA*(P1: LPMSG, P2: HWND, P3: UINT, P4: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc GetMessageW*(P1: LPMSG, P2: HWND, P3: UINT, P4: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc GetMessageExtraInfo*(): LONG {.winapi, dynlib: "user32", importc.}
proc GetMessagePos*(): DWORD {.winapi, dynlib: "user32", importc.}
proc GetMessageTime*(): LONG {.winapi, dynlib: "user32", importc.}
proc GetNextDlgGroupItem*(P1: HWND, P2: HWND, P3: BOOL): HWND {.winapi, dynlib: "user32", importc.}
proc GetNextDlgTabItem*(P1: HWND, P2: HWND, P3: BOOL): HWND {.winapi, dynlib: "user32", importc.}
proc GetOpenClipboardWindow*(): HWND {.winapi, dynlib: "user32", importc.}
proc GetParent*(P1: HWND): HWND {.winapi, dynlib: "user32", importc.}
proc GetPriorityClipboardFormat*(P1: ptr UINT, P2: int32): int32 {.winapi, dynlib: "user32", importc.}
proc GetPropA*(P1: HWND, P2: LPCSTR): HANDLE {.winapi, dynlib: "user32", importc.}
proc GetPropW*(P1: HWND, P2: LPCWSTR): HANDLE {.winapi, dynlib: "user32", importc.}
proc GetQueueStatus*(P1: UINT): DWORD {.winapi, dynlib: "user32", importc.}
proc GetScrollInfo*(P1: HWND, P2: int32, P3: LPSCROLLINFO): BOOL {.winapi, dynlib: "user32", importc.}
proc GetScrollPos*(P1: HWND, P2: int32): int32 {.winapi, dynlib: "user32", importc.}
proc GetScrollRange*(P1: HWND, P2: int32, P3: LPINT, P4: LPINT): BOOL {.winapi, dynlib: "user32", importc.}
proc GetSubMenu*(P1: HMENU, P2: int32): HMENU {.winapi, dynlib: "user32", importc.}
proc GetSysColor*(P1: int32): DWORD {.winapi, dynlib: "user32", importc.}
proc GetSysColorBrush*(P1: int32): HBRUSH {.winapi, dynlib: "user32", importc.}
proc GetSystemMenu*(P1: HWND, P2: BOOL): HMENU {.winapi, dynlib: "user32", importc.}
proc GetSystemMetrics*(P1: int32): int32 {.winapi, dynlib: "user32", importc.}
proc GetTabbedTextExtentA*(P1: HDC, P2: LPCSTR, P3: int32, P4: int32, P5: LPINT): DWORD {.winapi, dynlib: "user32", importc.}
proc GetTabbedTextExtentW*(P1: HDC, P2: LPCWSTR, P3: int32, P4: int32, P5: LPINT): DWORD {.winapi, dynlib: "user32", importc.}
proc GetWindowLongA*(P1: HWND, P2: int32): LONG {.winapi, dynlib: "user32", importc.}
proc GetWindowLongW*(P1: HWND, P2: int32): LONG {.winapi, dynlib: "user32", importc.}
proc GetThreadDesktop*(P1: DWORD): HDESK {.winapi, dynlib: "user32", importc.}
proc GetTopWindow*(P1: HWND): HWND {.winapi, dynlib: "user32", importc.}
proc GetUpdateRect*(P1: HWND, P2: LPRECT, P3: BOOL): BOOL {.winapi, dynlib: "user32", importc.}
proc GetUpdateRgn*(P1: HWND, P2: HRGN, P3: BOOL): int32 {.winapi, dynlib: "user32", importc.}
proc GetUserObjectInformationA*(P1: HANDLE, P2: int32, P3: PVOID, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc GetUserObjectInformationW*(P1: HANDLE, P2: int32, P3: PVOID, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc GetUserObjectSecurity*(P1: HANDLE, P2: PSECURITY_INFORMATION, P3: PSECURITY_DESCRIPTOR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc GetWindow*(P1: HWND, P2: UINT): HWND {.winapi, dynlib: "user32", importc.}
proc GetNextWindow*(P1: HWND, P2: UINT): HWND {.winapi, dynlib: "user32", importc: "GetWindow".}
proc GetWindowContextHelpId*(P1: HWND): DWORD {.winapi, dynlib: "user32", importc.}
proc GetWindowDC*(P1: HWND): HDC {.winapi, dynlib: "user32", importc.}
proc GetWindowPlacement*(P1: HWND, P2: ptr WINDOWPLACEMENT): BOOL {.winapi, dynlib: "user32", importc.}
proc GetWindowRect*(P1: HWND, P2: LPRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc GetWindowRgn*(P1: HWND, P2: HRGN): int32 {.winapi, dynlib: "user32", importc.}
proc GetWindowTextA*(P1: HWND, P2: LPSTR, P3: int32): int32 {.winapi, dynlib: "user32", importc.}
proc GetWindowTextLengthA*(P1: HWND): int32 {.winapi, dynlib: "user32", importc.}
proc GetWindowTextLengthW*(P1: HWND): int32 {.winapi, dynlib: "user32", importc.}
proc GetWindowTextW*(P1: HWND, P2: LPWSTR, P3: int32): int32 {.winapi, dynlib: "user32", importc.}
proc GetWindowWord*(P1: HWND, P2: int32): WORD {.winapi, dynlib: "user32", importc.}
proc GetAltTabInfoA*(P1: HWND, P2: int32, P3: PALTTABINFO, P4: LPSTR, P5: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc GetAltTabInfoW*(P1: HWND, P2: int32, P3: PALTTABINFO, P4: LPWSTR, P5: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc GetComboBoxInfo*(P1: HWND, P2: PCOMBOBOXINFO): BOOL {.winapi, dynlib: "user32", importc.}
proc GetCursorInfo*(P1: PCURSORINFO): BOOL {.winapi, dynlib: "user32", importc.}
proc GetLastInputInfo*(P1: PLASTINPUTINFO): BOOL {.winapi, dynlib: "user32", importc.}
proc GetListBoxInfo*(P1: HWND): DWORD {.winapi, dynlib: "user32", importc.}
proc GetMenuBarInfo*(P1: HWND, P2: LONG, P3: LONG, P4: PMENUBARINFO): BOOL {.winapi, dynlib: "user32", importc.}
proc GetMenuInfo*(P1: HMENU, P2: LPMENUINFO): BOOL {.winapi, dynlib: "user32", importc.}
proc GetScrollBarInfo*(P1: HWND, P2: LONG, P3: PSCROLLBARINFO): BOOL {.winapi, dynlib: "user32", importc.}
proc GetTitleBarInfo*(P1: HWND, P2: PTITLEBARINFO): BOOL {.winapi, dynlib: "user32", importc.}
proc GetWindowInfo*(P1: HWND, P2: PWINDOWINFO): BOOL {.winapi, dynlib: "user32", importc.}
proc GetWindowModuleFileNameA*(P1: HWND, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "user32", importc.}
proc GetWindowModuleFileNameW*(P1: HWND, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "user32", importc.}
proc GrayStringA*(P1: HDC, P2: HBRUSH, P3: GRAYSTRINGPROC, P4: LPARAM, P5: int32, P6: int32, P7: int32, P8: int32, P9: int32): BOOL {.winapi, dynlib: "user32", importc.}
proc GrayStringW*(P1: HDC, P2: HBRUSH, P3: GRAYSTRINGPROC, P4: LPARAM, P5: int32, P6: int32, P7: int32, P8: int32, P9: int32): BOOL {.winapi, dynlib: "user32", importc.}
proc HideCaret*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc HiliteMenuItem*(P1: HWND, P2: HMENU, P3: UINT, P4: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc InflateRect*(P1: LPRECT, P2: int32, P3: int32): BOOL {.winapi, dynlib: "user32", importc.}
proc InSendMessage*(): BOOL {.winapi, dynlib: "user32", importc.}
proc InsertMenuA*(P1: HMENU, P2: UINT, P3: UINT, P4: UINT, P5: LPCSTR): BOOL {.winapi, dynlib: "user32", importc.}
proc InsertMenuW*(P1: HMENU, P2: UINT, P3: UINT, P4: UINT, P5: LPCWSTR): BOOL {.winapi, dynlib: "user32", importc.}
proc InsertMenuItemA*(P1: HMENU, P2: UINT, P3: BOOL, P4: LPCMENUITEMINFOA): BOOL {.winapi, dynlib: "user32", importc.}
proc InsertMenuItemW*(P1: HMENU, P2: UINT, P3: BOOL, P4: LPCMENUITEMINFOW): BOOL {.winapi, dynlib: "user32", importc.}
proc InternalGetWindowText*(P1: HWND, P2: LPWSTR, P3: INT): INT {.winapi, dynlib: "user32", importc.}
proc IntersectRect*(P1: LPRECT, P2: LPCRECT, P3: LPCRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc InvalidateRect*(P1: HWND, P2: LPCRECT, P3: BOOL): BOOL {.winapi, dynlib: "user32", importc.}
proc InvalidateRgn*(P1: HWND, P2: HRGN, P3: BOOL): BOOL {.winapi, dynlib: "user32", importc.}
proc InvertRect*(P1: HDC, P2: LPCRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc IsCharAlphaA*(P1: CHAR): BOOL {.winapi, dynlib: "user32", importc.}
proc IsCharAlphaNumericA*(P1: CHAR): BOOL {.winapi, dynlib: "user32", importc.}
proc IsCharAlphaNumericW*(P1: WCHAR): BOOL {.winapi, dynlib: "user32", importc.}
proc IsCharAlphaW*(P1: WCHAR): BOOL {.winapi, dynlib: "user32", importc.}
proc IsCharLowerA*(P1: CHAR): BOOL {.winapi, dynlib: "user32", importc.}
proc IsCharLowerW*(P1: WCHAR): BOOL {.winapi, dynlib: "user32", importc.}
proc IsCharUpperA*(P1: CHAR): BOOL {.winapi, dynlib: "user32", importc.}
proc IsCharUpperW*(P1: WCHAR): BOOL {.winapi, dynlib: "user32", importc.}
proc IsChild*(P1: HWND, P2: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc IsClipboardFormatAvailable*(P1: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc IsDialogMessageA*(P1: HWND, P2: LPMSG): BOOL {.winapi, dynlib: "user32", importc.}
proc IsDialogMessageW*(P1: HWND, P2: LPMSG): BOOL {.winapi, dynlib: "user32", importc.}
proc IsDlgButtonChecked*(P1: HWND, P2: int32): UINT {.winapi, dynlib: "user32", importc.}
proc IsIconic*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc IsMenu*(P1: HMENU): BOOL {.winapi, dynlib: "user32", importc.}
proc IsRectEmpty*(P1: LPCRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc IsWindow*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc IsWindowEnabled*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc IsWindowUnicode*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc IsWindowVisible*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc IsZoomed*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc keybd_event*(P1: BYTE, P2: BYTE, P3: DWORD, P4: DWORD): void {.winapi, dynlib: "user32", importc.}
proc KillTimer*(P1: HWND, P2: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc LoadAcceleratorsA*(P1: HINSTANCE, P2: LPCSTR): HACCEL {.winapi, dynlib: "user32", importc.}
proc LoadAcceleratorsW*(P1: HINSTANCE, P2: LPCWSTR): HACCEL {.winapi, dynlib: "user32", importc.}
proc LoadBitmapA*(P1: HINSTANCE, P2: LPCSTR): HBITMAP {.winapi, dynlib: "user32", importc.}
proc LoadBitmapW*(P1: HINSTANCE, P2: LPCWSTR): HBITMAP {.winapi, dynlib: "user32", importc.}
proc LoadCursorA*(P1: HINSTANCE, P2: LPCSTR): HCURSOR {.winapi, dynlib: "user32", importc.}
proc LoadCursorFromFileA*(P1: LPCSTR): HCURSOR {.winapi, dynlib: "user32", importc.}
proc LoadCursorFromFileW*(P1: LPCWSTR): HCURSOR {.winapi, dynlib: "user32", importc.}
proc LoadCursorW*(P1: HINSTANCE, P2: LPCWSTR): HCURSOR {.winapi, dynlib: "user32", importc.}
proc LoadIconA*(P1: HINSTANCE, P2: LPCSTR): HICON {.winapi, dynlib: "user32", importc.}
proc LoadIconW*(P1: HINSTANCE, P2: LPCWSTR): HICON {.winapi, dynlib: "user32", importc.}
proc LoadImageA*(P1: HINSTANCE, P2: LPCSTR, P3: UINT, P4: int32, P5: int32, P6: UINT): HANDLE {.winapi, dynlib: "user32", importc.}
proc LoadImageW*(P1: HINSTANCE, P2: LPCWSTR, P3: UINT, P4: int32, P5: int32, P6: UINT): HANDLE {.winapi, dynlib: "user32", importc.}
proc LoadKeyboardLayoutA*(P1: LPCSTR, P2: UINT): HKL {.winapi, dynlib: "user32", importc.}
proc LoadKeyboardLayoutW*(P1: LPCWSTR, P2: UINT): HKL {.winapi, dynlib: "user32", importc.}
proc LoadMenuA*(P1: HINSTANCE, P2: LPCSTR): HMENU {.winapi, dynlib: "user32", importc.}
proc LoadMenuIndirectA*(P1: ptr MENUTEMPLATE): HMENU {.winapi, dynlib: "user32", importc.}
proc LoadMenuIndirectW*(P1: ptr MENUTEMPLATE): HMENU {.winapi, dynlib: "user32", importc.}
proc LoadMenuW*(P1: HINSTANCE, P2: LPCWSTR): HMENU {.winapi, dynlib: "user32", importc.}
proc LoadStringA*(P1: HINSTANCE, P2: UINT, P3: LPSTR, P4: int32): int32 {.winapi, dynlib: "user32", importc.}
proc LoadStringW*(P1: HINSTANCE, P2: UINT, P3: LPWSTR, P4: int32): int32 {.winapi, dynlib: "user32", importc.}
proc LockWindowUpdate*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc LookupIconIdFromDirectory*(P1: PBYTE, P2: BOOL): int32 {.winapi, dynlib: "user32", importc.}
proc LookupIconIdFromDirectoryEx*(P1: PBYTE, P2: BOOL, P3: int32, P4: int32, P5: UINT): int32 {.winapi, dynlib: "user32", importc.}
proc MapDialogRect*(P1: HWND, P2: LPRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc MapVirtualKeyA*(P1: UINT, P2: UINT): UINT {.winapi, dynlib: "user32", importc.}
proc MapVirtualKeyExA*(P1: UINT, P2: UINT, P3: HKL): UINT {.winapi, dynlib: "user32", importc.}
proc MapVirtualKeyExW*(P1: UINT, P2: UINT, P3: HKL): UINT {.winapi, dynlib: "user32", importc.}
proc MapVirtualKeyW*(P1: UINT, P2: UINT): UINT {.winapi, dynlib: "user32", importc.}
proc MapWindowPoints*(P1: HWND, P2: HWND, P3: LPPOINT, P4: UINT): int32 {.winapi, dynlib: "user32", importc.}
proc MenuItemFromPoint*(P1: HWND, P2: HMENU, P3: POINT): int32 {.winapi, dynlib: "user32", importc.}
proc MessageBeep*(P1: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc MessageBoxA*(P1: HWND, P2: LPCSTR, P3: LPCSTR, P4: UINT): int32 {.winapi, dynlib: "user32", importc.}
proc MessageBoxW*(P1: HWND, P2: LPCWSTR, P3: LPCWSTR, P4: UINT): int32 {.winapi, dynlib: "user32", importc.}
proc MessageBoxExA*(P1: HWND, P2: LPCSTR, P3: LPCSTR, P4: UINT, P5: WORD): int32 {.winapi, dynlib: "user32", importc.}
proc MessageBoxExW*(P1: HWND, P2: LPCWSTR, P3: LPCWSTR, P4: UINT, P5: WORD): int32 {.winapi, dynlib: "user32", importc.}
proc MessageBoxIndirectA*(P1: ptr MSGBOXPARAMSA): int32 {.winapi, dynlib: "user32", importc.}
proc MessageBoxIndirectW*(P1: ptr MSGBOXPARAMSW): int32 {.winapi, dynlib: "user32", importc.}
proc ModifyMenuA*(P1: HMENU, P2: UINT, P3: UINT, P4: UINT, P5: LPCSTR): BOOL {.winapi, dynlib: "user32", importc.}
proc ModifyMenuW*(P1: HMENU, P2: UINT, P3: UINT, P4: UINT, P5: LPCWSTR): BOOL {.winapi, dynlib: "user32", importc.}
proc mouse_event*(P1: DWORD, P2: DWORD, P3: DWORD, P4: DWORD, P5: ULONG_PTR): void {.winapi, dynlib: "user32", importc.}
proc MoveWindow*(P1: HWND, P2: int32, P3: int32, P4: int32, P5: int32, P6: BOOL): BOOL {.winapi, dynlib: "user32", importc.}
proc MsgWaitForMultipleObjects*(P1: DWORD, P2: ptr HANDLE, P3: BOOL, P4: DWORD, P5: DWORD): DWORD {.winapi, dynlib: "user32", importc.}
proc MsgWaitForMultipleObjectsEx*(P1: DWORD, P2: ptr HANDLE, P3: DWORD, P4: DWORD, P5: DWORD): DWORD {.winapi, dynlib: "user32", importc.}
proc OemKeyScan*(P1: WORD): DWORD {.winapi, dynlib: "user32", importc.}
proc OemToCharA*(P1: LPCSTR, P2: LPSTR): BOOL {.winapi, dynlib: "user32", importc.}
proc OemToAnsi*(P1: LPCSTR, P2: LPSTR): BOOL {.winapi, dynlib: "user32", importc: "OemToCharA".}
proc OemToCharBuffA*(P1: LPCSTR, P2: LPSTR, P3: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc OemToAnsiBuff*(P1: LPCSTR, P2: LPSTR, P3: DWORD): BOOL {.winapi, dynlib: "user32", importc: "OemToCharBuffA".}
proc OemToCharBuffW*(P1: LPCSTR, P2: LPWSTR, P3: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc OemToCharW*(P1: LPCSTR, P2: LPWSTR): BOOL {.winapi, dynlib: "user32", importc.}
proc OffsetRect*(P1: LPRECT, P2: int32, P3: int32): BOOL {.winapi, dynlib: "user32", importc.}
proc OpenClipboard*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc OpenDesktopA*(P1: LPSTR, P2: DWORD, P3: BOOL, P4: DWORD): HDESK {.winapi, dynlib: "user32", importc.}
proc OpenDesktopW*(P1: LPWSTR, P2: DWORD, P3: BOOL, P4: DWORD): HDESK {.winapi, dynlib: "user32", importc.}
proc OpenIcon*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc OpenInputDesktop*(P1: DWORD, P2: BOOL, P3: DWORD): HDESK {.winapi, dynlib: "user32", importc.}
proc OpenWindowStationA*(P1: LPSTR, P2: BOOL, P3: DWORD): HWINSTA {.winapi, dynlib: "user32", importc.}
proc OpenWindowStationW*(P1: LPWSTR, P2: BOOL, P3: DWORD): HWINSTA {.winapi, dynlib: "user32", importc.}
proc PaintDesktop*(P1: HDC): BOOL {.winapi, dynlib: "user32", importc.}
proc PeekMessageA*(P1: LPMSG, P2: HWND, P3: UINT, P4: UINT, P5: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc PeekMessageW*(P1: LPMSG, P2: HWND, P3: UINT, P4: UINT, P5: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc PostMessageA*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "user32", importc.}
proc PostMessageW*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "user32", importc.}
proc PostQuitMessage*(P1: int32): void {.winapi, dynlib: "user32", importc.}
proc PostThreadMessageA*(P1: DWORD, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "user32", importc.}
proc PostThreadMessageW*(P1: DWORD, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "user32", importc.}
proc PtInRect*(P1: LPCRECT, P2: POINT): BOOL {.winapi, dynlib: "user32", importc.}
proc RealChildWindowFromPoint*(P1: HWND, P2: POINT): HWND {.winapi, dynlib: "user32", importc.}
proc RealGetWindowClassA*(P1: HWND, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "user32", importc.}
proc RealGetWindowClassW*(P1: HWND, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "user32", importc.}
proc RedrawWindow*(P1: HWND, P2: LPCRECT, P3: HRGN, P4: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc RegisterClassA*(P1: ptr WNDCLASSA): ATOM {.winapi, dynlib: "user32", importc.}
proc RegisterClassW*(P1: ptr WNDCLASSW): ATOM {.winapi, dynlib: "user32", importc.}
proc RegisterClassExA*(P1: ptr WNDCLASSEXA): ATOM {.winapi, dynlib: "user32", importc.}
proc RegisterClassExW*(P1: ptr WNDCLASSEXW): ATOM {.winapi, dynlib: "user32", importc.}
proc RegisterClipboardFormatA*(P1: LPCSTR): UINT {.winapi, dynlib: "user32", importc.}
proc RegisterClipboardFormatW*(P1: LPCWSTR): UINT {.winapi, dynlib: "user32", importc.}
proc RegisterHotKey*(P1: HWND, P2: int32, P3: UINT, P4: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc RegisterWindowMessageA*(P1: LPCSTR): UINT {.winapi, dynlib: "user32", importc.}
proc RegisterWindowMessageW*(P1: LPCWSTR): UINT {.winapi, dynlib: "user32", importc.}
proc ReleaseCapture*(): BOOL {.winapi, dynlib: "user32", importc.}
proc ReleaseDC*(P1: HWND, P2: HDC): int32 {.winapi, dynlib: "user32", importc.}
proc RemoveMenu*(P1: HMENU, P2: UINT, P3: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc RemovePropA*(P1: HWND, P2: LPCSTR): HANDLE {.winapi, dynlib: "user32", importc.}
proc RemovePropW*(P1: HWND, P2: LPCWSTR): HANDLE {.winapi, dynlib: "user32", importc.}
proc ReplyMessage*(P1: LRESULT): BOOL {.winapi, dynlib: "user32", importc.}
proc ScreenToClient*(P1: HWND, P2: LPPOINT): BOOL {.winapi, dynlib: "user32", importc.}
proc ScrollDC*(P1: HDC, P2: int32, P3: int32, P4: LPCRECT, P5: LPCRECT, P6: HRGN, P7: LPRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc ScrollWindow*(P1: HWND, P2: int32, P3: int32, P4: LPCRECT, P5: LPCRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc ScrollWindowEx*(P1: HWND, P2: int32, P3: int32, P4: LPCRECT, P5: LPCRECT, P6: HRGN, P7: LPRECT, P8: UINT): int32 {.winapi, dynlib: "user32", importc.}
proc SendDlgItemMessageA*(P1: HWND, P2: int32, P3: UINT, P4: WPARAM, P5: LPARAM): LONG {.winapi, dynlib: "user32", importc.}
proc SendDlgItemMessageW*(P1: HWND, P2: int32, P3: UINT, P4: WPARAM, P5: LPARAM): LONG {.winapi, dynlib: "user32", importc.}
proc SendMessageA*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "user32", importc.}
proc SendMessageCallbackA*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM, P5: SENDASYNCPROC, P6: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc SendMessageCallbackW*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM, P5: SENDASYNCPROC, P6: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc SendMessageTimeoutA*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM, P5: UINT, P6: UINT, P7: PDWORD): LRESULT {.winapi, dynlib: "user32", importc.}
proc SendMessageTimeoutW*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM, P5: UINT, P6: UINT, P7: PDWORD): LRESULT {.winapi, dynlib: "user32", importc.}
proc SendMessageW*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "user32", importc.}
proc SendNotifyMessageA*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "user32", importc.}
proc SendNotifyMessageW*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "user32", importc.}
proc SetActiveWindow*(P1: HWND): HWND {.winapi, dynlib: "user32", importc.}
proc SetCapture*(P1: HWND): HWND {.winapi, dynlib: "user32", importc.}
proc SetCaretBlinkTime*(P1: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc SetCaretPos*(P1: int32, P2: int32): BOOL {.winapi, dynlib: "user32", importc.}
proc SetClassLongA*(P1: HWND, P2: int32, P3: LONG): DWORD {.winapi, dynlib: "user32", importc.}
proc SetClassLongW*(P1: HWND, P2: int32, P3: LONG): DWORD {.winapi, dynlib: "user32", importc.}
proc SetClassWord*(P1: HWND, P2: int32, P3: WORD): WORD {.winapi, dynlib: "user32", importc.}
proc SetClipboardData*(P1: UINT, P2: HANDLE): HANDLE {.winapi, dynlib: "user32", importc.}
proc SetClipboardViewer*(P1: HWND): HWND {.winapi, dynlib: "user32", importc.}
proc SetCursor*(P1: HCURSOR): HCURSOR {.winapi, dynlib: "user32", importc.}
proc SetCursorPos*(P1: int32, P2: int32): BOOL {.winapi, dynlib: "user32", importc.}
proc SetDebugErrorLevel*(P1: DWORD): void {.winapi, dynlib: "user32", importc.}
proc SetDlgItemInt*(P1: HWND, P2: int32, P3: UINT, P4: BOOL): BOOL {.winapi, dynlib: "user32", importc.}
proc SetDlgItemTextA*(P1: HWND, P2: int32, P3: LPCSTR): BOOL {.winapi, dynlib: "user32", importc.}
proc SetDlgItemTextW*(P1: HWND, P2: int32, P3: LPCWSTR): BOOL {.winapi, dynlib: "user32", importc.}
proc SetDoubleClickTime*(P1: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc SetFocus*(P1: HWND): HWND {.winapi, dynlib: "user32", importc.}
proc SetForegroundWindow*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc SetKeyboardState*(P1: PBYTE): BOOL {.winapi, dynlib: "user32", importc.}
proc SetMenu*(P1: HWND, P2: HMENU): BOOL {.winapi, dynlib: "user32", importc.}
proc SetMenuContextHelpId*(P1: HMENU, P2: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc SetMenuDefaultItem*(P1: HMENU, P2: UINT, P3: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc SetMenuInfo*(P1: HMENU, P2: LPCMENUINFO): BOOL {.winapi, dynlib: "user32", importc.}
proc SetMenuItemBitmaps*(P1: HMENU, P2: UINT, P3: UINT, P4: HBITMAP, P5: HBITMAP): BOOL {.winapi, dynlib: "user32", importc.}
proc SetMenuItemInfoA*(P1: HMENU, P2: UINT, P3: BOOL, P4: LPCMENUITEMINFOA): BOOL {.winapi, dynlib: "user32", importc.}
proc SetMenuItemInfoW*(P1: HMENU, P2: UINT, P3: BOOL, P4: LPCMENUITEMINFOW): BOOL {.winapi, dynlib: "user32", importc.}
proc SetMessageExtraInfo*(P1: LPARAM): LPARAM {.winapi, dynlib: "user32", importc.}
proc SetMessageQueue*(P1: int32): BOOL {.winapi, dynlib: "user32", importc.}
proc SetParent*(P1: HWND, P2: HWND): HWND {.winapi, dynlib: "user32", importc.}
proc SetProcessWindowStation*(P1: HWINSTA): BOOL {.winapi, dynlib: "user32", importc.}
proc SetPropA*(P1: HWND, P2: LPCSTR, P3: HANDLE): BOOL {.winapi, dynlib: "user32", importc.}
proc SetPropW*(P1: HWND, P2: LPCWSTR, P3: HANDLE): BOOL {.winapi, dynlib: "user32", importc.}
proc SetRect*(P1: LPRECT, P2: int32, P3: int32, P4: int32, P5: int32): BOOL {.winapi, dynlib: "user32", importc.}
proc SetRectEmpty*(P1: LPRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc SetScrollInfo*(P1: HWND, P2: int32, P3: LPCSCROLLINFO, P4: BOOL): int32 {.winapi, dynlib: "user32", importc.}
proc SetScrollPos*(P1: HWND, P2: int32, P3: int32, P4: BOOL): int32 {.winapi, dynlib: "user32", importc.}
proc SetScrollRange*(P1: HWND, P2: int32, P3: int32, P4: int32, P5: BOOL): BOOL {.winapi, dynlib: "user32", importc.}
proc SetSysColors*(P1: int32, P2: ptr INT, P3: ptr COLORREF): BOOL {.winapi, dynlib: "user32", importc.}
proc SetSystemCursor*(P1: HCURSOR, P2: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc SetThreadDesktop*(P1: HDESK): BOOL {.winapi, dynlib: "user32", importc.}
proc SetTimer*(P1: HWND, P2: UINT, P3: UINT, P4: TIMERPROC): UINT {.winapi, dynlib: "user32", importc.}
proc SetUserObjectInformationA*(P1: HANDLE, P2: int32, P3: PVOID, P4: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc SetUserObjectInformationW*(P1: HANDLE, P2: int32, P3: PVOID, P4: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc SetUserObjectSecurity*(P1: HANDLE, P2: PSECURITY_INFORMATION, P3: PSECURITY_DESCRIPTOR): BOOL {.winapi, dynlib: "user32", importc.}
proc SetWindowContextHelpId*(P1: HWND, P2: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc SetWindowLongA*(P1: HWND, P2: int32, P3: LONG): LONG {.winapi, dynlib: "user32", importc.}
proc SetWindowLongW*(P1: HWND, P2: int32, P3: LONG): LONG {.winapi, dynlib: "user32", importc.}
proc SetWindowPlacement*(P1: HWND, P2: ptr WINDOWPLACEMENT): BOOL {.winapi, dynlib: "user32", importc.}
proc SetWindowPos*(P1: HWND, P2: HWND, P3: int32, P4: int32, P5: int32, P6: int32, P7: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc SetWindowRgn*(P1: HWND, P2: HRGN, P3: BOOL): int32 {.winapi, dynlib: "user32", importc.}
proc SetWindowsHookA*(P1: int32, P2: HOOKPROC): HHOOK {.winapi, dynlib: "user32", importc.}
proc SetWindowsHookW*(P1: int32, P2: HOOKPROC): HHOOK {.winapi, dynlib: "user32", importc.}
proc SetWindowsHookExA*(P1: int32, P2: HOOKPROC, P3: HINSTANCE, P4: DWORD): HHOOK {.winapi, dynlib: "user32", importc.}
proc SetWindowsHookExW*(P1: int32, P2: HOOKPROC, P3: HINSTANCE, P4: DWORD): HHOOK {.winapi, dynlib: "user32", importc.}
proc SetWindowTextA*(P1: HWND, P2: LPCSTR): BOOL {.winapi, dynlib: "user32", importc.}
proc SetWindowTextW*(P1: HWND, P2: LPCWSTR): BOOL {.winapi, dynlib: "user32", importc.}
proc SetWindowWord*(P1: HWND, P2: int32, P3: WORD): WORD {.winapi, dynlib: "user32", importc.}
proc ShowCaret*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc ShowCursor*(P1: BOOL): int32 {.winapi, dynlib: "user32", importc.}
proc ShowOwnedPopups*(P1: HWND, P2: BOOL): BOOL {.winapi, dynlib: "user32", importc.}
proc ShowScrollBar*(P1: HWND, P2: int32, P3: BOOL): BOOL {.winapi, dynlib: "user32", importc.}
proc ShowWindow*(P1: HWND, P2: int32): BOOL {.winapi, dynlib: "user32", importc.}
proc ShowWindowAsync*(P1: HWND, P2: int32): BOOL {.winapi, dynlib: "user32", importc.}
proc SubtractRect*(P1: LPRECT, P2: LPCRECT, P3: LPCRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc SwapMouseButton*(P1: BOOL): BOOL {.winapi, dynlib: "user32", importc.}
proc SwitchDesktop*(P1: HDESK): BOOL {.winapi, dynlib: "user32", importc.}
proc SystemParametersInfoA*(P1: UINT, P2: UINT, P3: PVOID, P4: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc SystemParametersInfoW*(P1: UINT, P2: UINT, P3: PVOID, P4: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc TabbedTextOutA*(P1: HDC, P2: int32, P3: int32, P4: LPCSTR, P5: int32, P6: int32, P7: LPINT, P8: int32): LONG {.winapi, dynlib: "user32", importc.}
proc TabbedTextOutW*(P1: HDC, P2: int32, P3: int32, P4: LPCWSTR, P5: int32, P6: int32, P7: LPINT, P8: int32): LONG {.winapi, dynlib: "user32", importc.}
proc TileWindows*(P1: HWND, P2: UINT, P3: LPCRECT, P4: UINT, P5: ptr HWND): WORD {.winapi, dynlib: "user32", importc.}
proc ToAscii*(P1: UINT, P2: UINT, P3: PBYTE, P4: LPWORD, P5: UINT): int32 {.winapi, dynlib: "user32", importc.}
proc ToAsciiEx*(P1: UINT, P2: UINT, P3: PBYTE, P4: LPWORD, P5: UINT, P6: HKL): int32 {.winapi, dynlib: "user32", importc.}
proc ToUnicode*(P1: UINT, P2: UINT, P3: PBYTE, P4: LPWSTR, P5: int32, P6: UINT): int32 {.winapi, dynlib: "user32", importc.}
proc ToUnicodeEx*(P1: UINT, P2: UINT, P3: PBYTE, P4: LPWSTR, P5: int32, P6: UINT, P7: HKL): int32 {.winapi, dynlib: "user32", importc.}
proc TrackMouseEvent*(P1: LPTRACKMOUSEEVENT): BOOL {.winapi, dynlib: "user32", importc.}
proc TrackPopupMenu*(P1: HMENU, P2: UINT, P3: int32, P4: int32, P5: int32, P6: HWND, P7: LPCRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc TrackPopupMenuEx*(P1: HMENU, P2: UINT, P3: int32, P4: int32, P5: HWND, P6: LPTPMPARAMS): BOOL {.winapi, dynlib: "user32", importc.}
proc TranslateAcceleratorA*(P1: HWND, P2: HACCEL, P3: LPMSG): int32 {.winapi, dynlib: "user32", importc.}
proc TranslateAcceleratorW*(P1: HWND, P2: HACCEL, P3: LPMSG): int32 {.winapi, dynlib: "user32", importc.}
proc TranslateMDISysAccel*(P1: HWND, P2: LPMSG): BOOL {.winapi, dynlib: "user32", importc.}
proc TranslateMessage*(P1: ptr MSG): BOOL {.winapi, dynlib: "user32", importc.}
proc UnhookWindowsHook*(P1: int32, P2: HOOKPROC): BOOL {.winapi, dynlib: "user32", importc.}
proc UnhookWindowsHookEx*(P1: HHOOK): BOOL {.winapi, dynlib: "user32", importc.}
proc UnionRect*(P1: LPRECT, P2: LPCRECT, P3: LPCRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc UnloadKeyboardLayout*(P1: HKL): BOOL {.winapi, dynlib: "user32", importc.}
proc UnregisterClassA*(P1: LPCSTR, P2: HINSTANCE): BOOL {.winapi, dynlib: "user32", importc.}
proc UnregisterClassW*(P1: LPCWSTR, P2: HINSTANCE): BOOL {.winapi, dynlib: "user32", importc.}
proc UnregisterHotKey*(P1: HWND, P2: int32): BOOL {.winapi, dynlib: "user32", importc.}
proc UpdateWindow*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc ValidateRect*(P1: HWND, P2: LPCRECT): BOOL {.winapi, dynlib: "user32", importc.}
proc ValidateRgn*(P1: HWND, P2: HRGN): BOOL {.winapi, dynlib: "user32", importc.}
proc VkKeyScanA*(P1: CHAR): SHORT {.winapi, dynlib: "user32", importc.}
proc VkKeyScanExA*(P1: CHAR, P2: HKL): SHORT {.winapi, dynlib: "user32", importc.}
proc VkKeyScanExW*(P1: WCHAR, P2: HKL): SHORT {.winapi, dynlib: "user32", importc.}
proc VkKeyScanW*(P1: WCHAR): SHORT {.winapi, dynlib: "user32", importc.}
proc WaitForInputIdle*(P1: HANDLE, P2: DWORD): DWORD {.winapi, dynlib: "user32", importc.}
proc WaitMessage*(): BOOL {.winapi, dynlib: "user32", importc.}
proc WindowFromDC*(P1: HDC): HWND {.winapi, dynlib: "user32", importc.}
proc WindowFromPoint*(P1: POINT): HWND {.winapi, dynlib: "user32", importc.}
proc WinExec*(P1: LPCSTR, P2: UINT): UINT {.winapi, dynlib: "kernel32", importc.}
proc WinHelpA*(P1: HWND, P2: LPCSTR, P3: UINT, P4: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc WinHelpW*(P1: HWND, P2: LPCWSTR, P3: UINT, P4: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc wvsprintfA*(P1: LPSTR, P2: LPCSTR, P3: va_list): int32 {.winapi, dynlib: "user32", importc.}
proc wvsprintfW*(P1: LPWSTR, P2: LPCWSTR, P3: va_list): int32 {.winapi, dynlib: "user32", importc.}
proc BroadcastSystemMessageA*(P1: DWORD, P2: LPDWORD, P3: UINT, P4: WPARAM, P5: LPARAM): int32 {.winapi, dynlib: "user32", importc.}
proc BroadcastSystemMessageW*(P1: DWORD, P2: LPDWORD, P3: UINT, P4: WPARAM, P5: LPARAM): int32 {.winapi, dynlib: "user32", importc.}
proc BroadcastSystemMessageExA*(P1: DWORD, P2: LPDWORD, P3: UINT, P4: WPARAM, P5: LPARAM, P6: PBSMINFO): int32 {.winapi, dynlib: "user32", importc.}
proc BroadcastSystemMessageExW*(P1: DWORD, P2: LPDWORD, P3: UINT, P4: WPARAM, P5: LPARAM, P6: PBSMINFO): int32 {.winapi, dynlib: "user32", importc.}
proc SendInput*(P1: UINT, P2: LPINPUT, P3: int32): UINT {.winapi, dynlib: "user32", importc.}
proc AnimateWindow*(P1: HWND, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc EndTask*(P1: HWND, P2: BOOL, P3: BOOL): BOOL {.winapi, dynlib: "user32", importc.}
proc GetGuiResources*(P1: HANDLE, P2: DWORD): DWORD {.winapi, dynlib: "user32", importc.}
proc GetShellWindow*(): HWND {.winapi, dynlib: "user32", importc.}
proc GetProcessDefaultLayout*(P1: ptr DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc IsHungAppWindow*(P1: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc LockWorkStation*(): BOOL {.winapi, dynlib: "user32", importc.}
proc RegisterDeviceNotificationA*(P1: HANDLE, P2: LPVOID, P3: DWORD): HDEVNOTIFY {.winapi, dynlib: "user32", importc.}
proc RegisterDeviceNotificationW*(P1: HANDLE, P2: LPVOID, P3: DWORD): HDEVNOTIFY {.winapi, dynlib: "user32", importc.}
proc SetProcessDefaultLayout*(P1: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc SwitchToThisWindow*(P1: HWND, P2: BOOL): void {.winapi, dynlib: "user32", importc.}
proc SetLayeredWindowAttributes*(P1: HWND, P2: COLORREF, P3: BYTE, P4: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc UpdateLayeredWindow*(P1: HWND, P2: HDC, P3: ptr POINT, P4: ptr SIZE, P5: HDC, P6: ptr POINT, P7: COLORREF, P8: ptr BLENDFUNCTION, P9: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc UserHandleGrantAccess*(P1: HANDLE, P2: HANDLE, P3: BOOL): BOOL {.winapi, dynlib: "user32", importc.}
proc GetRawInputBuffer*(P1: PRAWINPUT, P2: PUINT, P3: UINT): UINT {.winapi, dynlib: "user32", importc.}
proc GetRawInputData*(P1: HRAWINPUT, P2: UINT, P3: LPVOID, P4: PUINT, P5: UINT): UINT {.winapi, dynlib: "user32", importc.}
proc GetRawInputDeviceInfoA*(P1: HANDLE, P2: UINT, P3: LPVOID, P4: PUINT): UINT {.winapi, dynlib: "user32", importc.}
proc GetRawInputDeviceInfoW*(P1: HANDLE, P2: UINT, P3: LPVOID, P4: PUINT): UINT {.winapi, dynlib: "user32", importc.}
proc GetRawInputDeviceList*(P1: PRAWINPUTDEVICELIST, P2: PUINT, P3: UINT): UINT {.winapi, dynlib: "user32", importc.}
proc GetRegisteredRawInputDevices*(P1: PRAWINPUTDEVICE, P2: PUINT, P3: UINT): UINT {.winapi, dynlib: "user32", importc.}
proc DefRawInputProc*(P1: ptr PRAWINPUT, P2: INT, P3: UINT): LRESULT {.winapi, dynlib: "user32", importc.}
proc RegisterRawInputDevices*(P1: PCRAWINPUTDEVICE, P2: UINT, P3: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc IsGUIThread*(P1: BOOL): BOOL {.winapi, dynlib: "user32", importc.}
proc IsWinEventHookInstalled*(P1: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc PrintWindow*(P1: HWND, P2: HDC, P3: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc GetLayeredWindowAttributes*(P1: HWND, P2: ptr COLORREF, P3: ptr BYTE, P4: ptr DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc EnumDisplayMonitors*(P1: HDC, P2: LPCRECT, P3: MONITORENUMPROC, P4: LPARAM): BOOL {.winapi, dynlib: "user32", importc.}
proc GetMonitorInfoA*(P1: HMONITOR, P2: LPMONITORINFO): BOOL {.winapi, dynlib: "user32", importc.}
proc GetMonitorInfoA*(P1: HMONITOR, P2: LPMONITORINFOEXA): BOOL {.winapi, dynlib: "user32", importc.}
proc GetMonitorInfoW*(P1: HMONITOR, P2: LPMONITORINFO): BOOL {.winapi, dynlib: "user32", importc.}
proc GetMonitorInfoW*(P1: HMONITOR, P2: LPMONITORINFOEXW): BOOL {.winapi, dynlib: "user32", importc.}
proc MonitorFromPoint*(P1: POINT, P2: DWORD): HMONITOR {.winapi, dynlib: "user32", importc.}
proc MonitorFromRect*(P1: LPCRECT, P2: DWORD): HMONITOR {.winapi, dynlib: "user32", importc.}
proc MonitorFromWindow*(P1: HWND, P2: DWORD): HMONITOR {.winapi, dynlib: "user32", importc.}
proc GetGUIThreadInfo*(P1: DWORD, P2: LPGUITHREADINFO): BOOL {.winapi, dynlib: "user32", importc.}
proc NotifyWinEvent*(P1: DWORD, P2: HWND, P3: LONG, P4: LONG): void {.winapi, dynlib: "user32", importc.}
proc SetWinEventHook*(P1: UINT, P2: UINT, P3: HMODULE, P4: WINEVENTPROC, P5: DWORD, P6: DWORD, P7: UINT): HWINEVENTHOOK {.winapi, dynlib: "user32", importc.}
proc UnhookWinEvent*(P1: HWINEVENTHOOK): BOOL {.winapi, dynlib: "user32", importc.}
proc UnregisterDeviceNotification*(P1: HANDLE): BOOL {.winapi, dynlib: "user32", importc.}
proc EnumDisplaySettingsExA*(P1: LPCSTR, P2: DWORD, P3: LPDEVMODEA, P4: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc EnumDisplaySettingsExW*(P1: LPCWSTR, P2: DWORD, P3: LPDEVMODEW, P4: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc FlashWindowEx*(P1: PFLASHWINFO): BOOL {.winapi, dynlib: "user32", importc.}
proc GetClipboardSequenceNumber*(): DWORD {.winapi, dynlib: "user32", importc.}
proc InSendMessageEx*(P1: LPVOID): DWORD {.winapi, dynlib: "user32", importc.}
proc AllowSetForegroundWindow*(P1: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc LockSetForegroundWindow*(P1: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc GetMouseMovePointsEx*(P1: UINT, P2: LPMOUSEMOVEPOINT, P3: LPMOUSEMOVEPOINT, P4: int32, P5: DWORD): int32 {.winapi, dynlib: "user32", importc.}

proc CopyCursor*(c: HCURSOR): HCURSOR {.discardable.} = CopyIcon(c)
proc CreateDialogA*(h: HINSTANCE, n: LPCSTR, w: HWND, f: DLGPROC): HWND {.discardable.} = CreateDialogParamA( h , n , w , f , 0 )
proc CreateDialogW*(h: HINSTANCE, n: LPCWSTR, w: HWND, f: DLGPROC): HWND {.discardable.} = CreateDialogParamW( h , n , w , f , 0 )
proc CreateDialogIndirectA*(h: HINSTANCE, t: LPCDLGTEMPLATE, w: HWND, f: DLGPROC): HWND {.discardable.} = CreateDialogIndirectParamA( h , t , w , f , 0 )
proc CreateDialogIndirectW*(h: HINSTANCE, t: LPCDLGTEMPLATE, w: HWND, f: DLGPROC): HWND {.discardable.} = CreateDialogIndirectParamW( h , t , w , f , 0 )
proc CreateWindowA*(a: LPCSTR, b: LPCSTR, c: DWORD, d: int32, e: int32, f: int32, g: int32, h: HWND, i: HMENU, j: HINSTANCE, k: LPVOID): HWND {.discardable.} = CreateWindowExA( 0 , a , b , c , d , e , f , g , h , i , j , k )
proc CreateWindowW*(a: LPCWSTR, b: LPCWSTR, c: DWORD, d: int32, e: int32, f: int32, g: int32, h: HWND, i: HMENU, j: HINSTANCE, k: LPVOID): HWND {.discardable.} = CreateWindowExW( 0 , a , b , c , d , e , f , g , h , i , j , k )
proc DialogBoxA*(i: HINSTANCE, t: LPCSTR, p: HWND, f: DLGPROC): int32 {.discardable.} = DialogBoxParamA( i , t , p , f , 0 )
proc DialogBoxW*(i: HINSTANCE, t: LPCWSTR, p: HWND, f: DLGPROC): int32 {.discardable.} = DialogBoxParamW( i , t , p , f , 0 )
proc DialogBoxIndirectA*(i: HINSTANCE, t: LPCDLGTEMPLATE, p: HWND, f: DLGPROC): int32 {.discardable.} = DialogBoxIndirectParamA( i , t , p , f , 0 )
proc DialogBoxIndirectW*(i: HINSTANCE, t: LPCDLGTEMPLATE, p: HWND, f: DLGPROC): int32 {.discardable.} = DialogBoxIndirectParamW( i , t , p , f , 0 )
proc ExitWindows*(r: UINT, c: DWORD): BOOL {.discardable.} = ExitWindowsEx( EWX_LOGOFF , 0 )

when defined(cpu64):
  proc GetWindowLongPtrA*(P1: HWND, P2: int32): LONG_PTR {.winapi, dynlib: "user32", importc.}
  proc GetWindowLongPtrW*(P1: HWND, P2: int32): LONG_PTR {.winapi, dynlib: "user32", importc.}
  proc SetWindowLongPtrA*(P1: HWND, P2: int32, P3: LONG_PTR): LONG_PTR {.winapi, dynlib: "user32", importc.}
  proc SetWindowLongPtrW*(P1: HWND, P2: int32, P3: LONG_PTR): LONG_PTR {.winapi, dynlib: "user32", importc.}
  proc GetClassLongPtrA*(P1: HWND, P2: int32): LONG_PTR{.winapi, dynlib: "user32", importc.}
  proc GetClassLongPtrW*(P1: HWND, P2: int32): LONG_PTR{.winapi, dynlib: "user32", importc.}
  proc SetClassLongPtrA*(P1: HWND, P2: int32, P3: LONG_PTR): ULONG_PTR {.winapi, dynlib: "user32", importc.}
  proc SetClassLongPtrW*(P1: HWND, P2: int32, P3: LONG_PTR): LONG_PTR{.winapi, dynlib: "user32", importc.}
else:
  proc GetWindowLongPtrA*(P1: HWND, P2: int32): LONG_PTR {.winapi, dynlib: "user32", importc: "GetWindowLongA".}
  proc GetWindowLongPtrW*(P1: HWND, P2: int32): LONG_PTR {.winapi, dynlib: "user32", importc: "GetWindowLongW".}
  proc SetWindowLongPtrA*(P1: HWND, P2: int32, P3: LONG_PTR): LONG_PTR {.winapi, dynlib: "user32", importc: "SetWindowLongA".}
  proc SetWindowLongPtrW*(P1: HWND, P2: int32, P3: LONG_PTR): LONG_PTR {.winapi, dynlib: "user32", importc: "SetWindowLongW".}
  proc GetClassLongPtrA*(P1: HWND, P2: int32): LONG_PTR{.winapi, dynlib: "user32", importc: "GetClassLongA".}
  proc GetClassLongPtrW*(P1: HWND, P2: int32): LONG_PTR{.winapi, dynlib: "user32", importc: "GetClassLongW".}
  proc SetClassLongPtrA*(P1: HWND, P2: int32, P3: LONG_PTR): ULONG_PTR {.winapi, dynlib: "user32", importc: "SetClassLongA".}
  proc SetClassLongPtrW*(P1: HWND, P2: int32, P3: LONG_PTR): LONG_PTR{.winapi, dynlib: "user32", importc: "SetClassLongW".}

when not defined(winansi):
  const
    MAKEINTRESOURCE* = MAKEINTRESOURCEW

  type
    EDITWORDBREAKPROC* = EDITWORDBREAKPROCW
    PROPENUMPROC* = PROPENUMPROCW
    PROPENUMPROCEX* = PROPENUMPROCEXW
    DESKTOPENUMPROC* = DESKTOPENUMPROCW
    WINSTAENUMPROC* = WINSTAENUMPROCW
    WNDCLASS* = WNDCLASSW
    WNDCLASSEX* = WNDCLASSEXW
    MENUITEMINFO* = MENUITEMINFOW
    LPCMENUITEMINFO* = LPCMENUITEMINFOW
    MSGBOXPARAMS* = MSGBOXPARAMSW
    HIGHCONTRAST* = HIGHCONTRASTW
    SERIALKEYS* = SERIALKEYSW
    SOUNDSENTRY* = SOUNDSENTRYW
    CREATESTRUCT* = CREATESTRUCTW
    CBT_CREATEWND* = CBT_CREATEWNDW
    MDICREATESTRUCT* = MDICREATESTRUCTW
    MULTIKEYHELP* = MULTIKEYHELPW
    MONITORINFOEX* = MONITORINFOEXW
    ICONMETRICS* = ICONMETRICSW
    NONCLIENTMETRICS* = NONCLIENTMETRICSW

  proc AppendMenu*(P1: HMENU, P2: UINT, P3: UINT_PTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "user32", importc: "AppendMenuW".}
  proc BroadcastSystemMessage*(P1: DWORD, P2: LPDWORD, P3: UINT, P4: WPARAM, P5: LPARAM): int32 {.winapi, dynlib: "user32", importc: "BroadcastSystemMessageW".}
  proc BroadcastSystemMessageEx*(P1: DWORD, P2: LPDWORD, P3: UINT, P4: WPARAM, P5: LPARAM, P6: PBSMINFO): int32 {.winapi, dynlib: "user32", importc: "BroadcastSystemMessageExW".}
  proc CallMsgFilter*(P1: LPMSG, P2: INT): BOOL {.winapi, dynlib: "user32", importc: "CallMsgFilterW".}
  proc CallWindowProc*(P1: WNDPROC, P2: HWND, P3: UINT, P4: WPARAM, P5: LPARAM): LRESULT {.winapi, dynlib: "user32", importc: "CallWindowProcW".}
  proc ChangeMenu*(P1: HMENU, P2: UINT, P3: LPCWSTR, P4: UINT, P5: UINT): BOOL {.winapi, dynlib: "user32", importc: "ChangeMenuW".}
  proc CharLower*(P1: LPWSTR): LPWSTR {.winapi, dynlib: "user32", importc: "CharLowerW".}
  proc CharLowerBuff*(P1: LPWSTR, P2: DWORD): DWORD {.winapi, dynlib: "user32", importc: "CharLowerBuffW".}
  proc CharNext*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "user32", importc: "CharNextW".}
  proc CharNextEx*(P1: WORD, P2: LPCWSTR, P3: DWORD): LPWSTR {.winapi, dynlib: "user32", importc: "CharNextExW".}
  proc CharPrev*(P1: LPCWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "user32", importc: "CharPrevW".}
  proc CharPrevEx*(P1: WORD, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD): LPWSTR {.winapi, dynlib: "user32", importc: "CharPrevExW".}
  proc CharToOem*(P1: LPCWSTR, P2: LPSTR): BOOL {.winapi, dynlib: "user32", importc: "CharToOemW".}
  proc CharToOemBuff*(P1: LPCWSTR, P2: LPSTR, P3: DWORD): BOOL {.winapi, dynlib: "user32", importc: "CharToOemBuffW".}
  proc CharUpper*(P1: LPWSTR): LPWSTR {.winapi, dynlib: "user32", importc: "CharUpperW".}
  proc CharUpperBuff*(P1: LPWSTR, P2: DWORD): DWORD {.winapi, dynlib: "user32", importc: "CharUpperBuffW".}
  proc CopyAcceleratorTable*(P1: HACCEL, P2: LPACCEL, P3: int32): int32 {.winapi, dynlib: "user32", importc: "CopyAcceleratorTableW".}
  proc CreateAcceleratorTable*(P1: LPACCEL, P2: int32): HACCEL {.winapi, dynlib: "user32", importc: "CreateAcceleratorTableW".}
  proc CreateDialog*(h: HINSTANCE, n: LPCWSTR, w: HWND, f: DLGPROC): HWND {.discardable.} = CreateDialogParamW( h , n , w , f , 0 )
  proc CreateDialogIndirect*(h: HINSTANCE, t: LPCDLGTEMPLATE, w: HWND, f: DLGPROC): HWND {.discardable.} = CreateDialogIndirectParamW( h , t , w , f , 0 )
  proc CreateDialogIndirectParam*(P1: HINSTANCE, P2: LPCDLGTEMPLATE, P3: HWND, P4: DLGPROC, P5: LPARAM): HWND {.winapi, dynlib: "user32", importc: "CreateDialogIndirectParamW".}
  proc CreateDialogParam*(P1: HINSTANCE, P2: LPCWSTR, P3: HWND, P4: DLGPROC, P5: LPARAM): HWND {.winapi, dynlib: "user32", importc: "CreateDialogParamW".}
  proc CreateMDIWindow*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: int32, P5: int32, P6: int32, P7: int32, P8: HWND, P9: HINSTANCE, P10: LPARAM): HWND {.winapi, dynlib: "user32", importc: "CreateMDIWindowW".}
  proc CreateWindow*(a: LPCWSTR, b: LPCWSTR, c: DWORD, d: int32, e: int32, f: int32, g: int32, h: HWND, i: HMENU, j: HINSTANCE, k: LPVOID): HWND {.discardable.} = CreateWindowExW( 0 , a , b , c , d , e , f , g , h , i , j , k )
  proc CreateWindowEx*(P1: DWORD, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: int32, P6: int32, P7: int32, P8: int32, P9: HWND, P10: HMENU, P11: HINSTANCE, P12: LPVOID): HWND {.winapi, dynlib: "user32", importc: "CreateWindowExW".}
  proc CreateWindowStation*(P1: LPWSTR, P2: DWORD, P3: DWORD, P4: LPSECURITY_ATTRIBUTES): HWINSTA {.winapi, dynlib: "user32", importc: "CreateWindowStationW".}
  proc DefDlgProc*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "user32", importc: "DefDlgProcW".}
  proc DefFrameProc*(P1: HWND, P2: HWND, P3: UINT, P4: WPARAM, P5: LPARAM): LRESULT {.winapi, dynlib: "user32", importc: "DefFrameProcW".}
  proc DefMDIChildProc*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "user32", importc: "DefMDIChildProcW".}
  proc DefWindowProc*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "user32", importc: "DefWindowProcW".}
  proc DialogBox*(i: HINSTANCE, t: LPCWSTR, p: HWND, f: DLGPROC): int32 {.discardable.} = DialogBoxParamW( i , t , p , f , 0 )
  proc DialogBoxIndirect*(i: HINSTANCE, t: LPCDLGTEMPLATE, p: HWND, f: DLGPROC): int32 {.discardable.} = DialogBoxIndirectParamW( i , t , p , f , 0 )
  proc DialogBoxIndirectParam*(P1: HINSTANCE, P2: LPCDLGTEMPLATE, P3: HWND, P4: DLGPROC, P5: LPARAM): int32 {.winapi, dynlib: "user32", importc: "DialogBoxIndirectParamW".}
  proc DialogBoxParam*(P1: HINSTANCE, P2: LPCWSTR, P3: HWND, P4: DLGPROC, P5: LPARAM): int32 {.winapi, dynlib: "user32", importc: "DialogBoxParamW".}
  proc DispatchMessage*(P1: ptr MSG): LONG {.winapi, dynlib: "user32", importc: "DispatchMessageW".}
  proc DlgDirList*(P1: HWND, P2: LPWSTR, P3: int32, P4: int32, P5: UINT): int32 {.winapi, dynlib: "user32", importc: "DlgDirListW".}
  proc DlgDirListComboBox*(P1: HWND, P2: LPWSTR, P3: int32, P4: int32, P5: UINT): int32 {.winapi, dynlib: "user32", importc: "DlgDirListComboBoxW".}
  proc DlgDirSelectComboBoxEx*(P1: HWND, P2: LPWSTR, P3: int32, P4: int32): BOOL {.winapi, dynlib: "user32", importc: "DlgDirSelectComboBoxExW".}
  proc DlgDirSelectEx*(P1: HWND, P2: LPWSTR, P3: int32, P4: int32): BOOL {.winapi, dynlib: "user32", importc: "DlgDirSelectExW".}
  proc DrawState*(P1: HDC, P2: HBRUSH, P3: DRAWSTATEPROC, P4: LPARAM, P5: WPARAM, P6: int32, P7: int32, P8: int32, P9: int32, P10: UINT): BOOL {.winapi, dynlib: "user32", importc: "DrawStateW".}
  proc DrawText*(P1: HDC, P2: LPCWSTR, P3: int32, P4: LPRECT, P5: UINT): int32 {.winapi, dynlib: "user32", importc: "DrawTextW".}
  proc DrawTextEx*(P1: HDC, P2: LPWSTR, P3: int32, P4: LPRECT, P5: UINT, P6: LPDRAWTEXTPARAMS): int32 {.winapi, dynlib: "user32", importc: "DrawTextExW".}
  proc EnumDesktops*(P1: HWINSTA, P2: DESKTOPENUMPROCW, P3: LPARAM): BOOL {.winapi, dynlib: "user32", importc: "EnumDesktopsW".}
  proc EnumProps*(P1: HWND, P2: PROPENUMPROCW): int32 {.winapi, dynlib: "user32", importc: "EnumPropsW".}
  proc EnumPropsEx*(P1: HWND, P2: PROPENUMPROCEXW, P3: LPARAM): int32 {.winapi, dynlib: "user32", importc: "EnumPropsExW".}
  proc EnumWindowStations*(P1: WINSTAENUMPROCW, P2: LPARAM): BOOL {.winapi, dynlib: "user32", importc: "EnumWindowStationsW".}
  proc FindWindow*(P1: LPCWSTR, P2: LPCWSTR): HWND {.winapi, dynlib: "user32", importc: "FindWindowW".}
  proc FindWindowEx*(P1: HWND, P2: HWND, P3: LPCWSTR, P4: LPCWSTR): HWND {.winapi, dynlib: "user32", importc: "FindWindowExW".}
  proc GetClassInfo*(P1: HINSTANCE, P2: LPCWSTR, P3: LPWNDCLASSW): BOOL {.winapi, dynlib: "user32", importc: "GetClassInfoW".}
  proc GetClassInfoEx*(P1: HINSTANCE, P2: LPCWSTR, P3: LPWNDCLASSEXW): BOOL {.winapi, dynlib: "user32", importc: "GetClassInfoExW".}
  proc GetClassLong*(P1: HWND, P2: int32): DWORD {.winapi, dynlib: "user32", importc: "GetClassLongW".}
  proc GetClassName*(P1: HWND, P2: LPWSTR, P3: int32): int32 {.winapi, dynlib: "user32", importc: "GetClassNameW".}
  proc GetClipboardFormatName*(P1: UINT, P2: LPWSTR, P3: int32): int32 {.winapi, dynlib: "user32", importc: "GetClipboardFormatNameW".}
  proc GetDlgItemText*(P1: HWND, P2: int32, P3: LPWSTR, P4: int32): UINT {.winapi, dynlib: "user32", importc: "GetDlgItemTextW".}
  proc GetKeyboardLayoutName*(P1: LPWSTR): BOOL {.winapi, dynlib: "user32", importc: "GetKeyboardLayoutNameW".}
  proc GetKeyNameText*(P1: LONG, P2: LPWSTR, P3: int32): int32 {.winapi, dynlib: "user32", importc: "GetKeyNameTextW".}
  proc GetMenuItemInfo*(P1: HMENU, P2: UINT, P3: BOOL, P4: LPMENUITEMINFOW): BOOL {.winapi, dynlib: "user32", importc: "GetMenuItemInfoW".}
  proc GetMenuString*(P1: HMENU, P2: UINT, P3: LPWSTR, P4: int32, P5: UINT): int32 {.winapi, dynlib: "user32", importc: "GetMenuStringW".}
  proc GetMessage*(P1: LPMSG, P2: HWND, P3: UINT, P4: UINT): BOOL {.winapi, dynlib: "user32", importc: "GetMessageW".}
  proc GetMonitorInfo*(P1: HMONITOR, P2: LPMONITORINFOEXW): BOOL {.winapi, dynlib: "user32", importc: "GetMonitorInfoW".}
  proc GetProp*(P1: HWND, P2: LPCWSTR): HANDLE {.winapi, dynlib: "user32", importc: "GetPropW".}
  proc GetRawInputDeviceInfo*(P1: HANDLE, P2: UINT, P3: LPVOID, P4: PUINT): UINT {.winapi, dynlib: "user32", importc: "GetRawInputDeviceInfoW".}
  proc GetTabbedTextExtent*(P1: HDC, P2: LPCWSTR, P3: int32, P4: int32, P5: LPINT): DWORD {.winapi, dynlib: "user32", importc: "GetTabbedTextExtentW".}
  proc GetUserObjectInformation*(P1: HANDLE, P2: int32, P3: PVOID, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "user32", importc: "GetUserObjectInformationW".}
  proc GetWindowLong*(P1: HWND, P2: int32): LONG {.winapi, dynlib: "user32", importc: "GetWindowLongW".}
  proc GetWindowText*(P1: HWND, P2: LPWSTR, P3: int32): int32 {.winapi, dynlib: "user32", importc: "GetWindowTextW".}
  proc GetWindowTextLength*(P1: HWND): int32 {.winapi, dynlib: "user32", importc: "GetWindowTextLengthW".}
  proc GetAltTabInfo*(P1: HWND, P2: int32, P3: PALTTABINFO, P4: LPWSTR, P5: UINT): BOOL {.winapi, dynlib: "user32", importc: "GetAltTabInfoW".}
  proc GetWindowModuleFileName*(P1: HWND, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "user32", importc: "GetWindowModuleFileNameW".}
  proc GrayString*(P1: HDC, P2: HBRUSH, P3: GRAYSTRINGPROC, P4: LPARAM, P5: int32, P6: int32, P7: int32, P8: int32, P9: int32): BOOL {.winapi, dynlib: "user32", importc: "GrayStringW".}
  proc InsertMenu*(P1: HMENU, P2: UINT, P3: UINT, P4: UINT, P5: LPCWSTR): BOOL {.winapi, dynlib: "user32", importc: "InsertMenuW".}
  proc InsertMenuItem*(P1: HMENU, P2: UINT, P3: BOOL, P4: LPCMENUITEMINFOW): BOOL {.winapi, dynlib: "user32", importc: "InsertMenuItemW".}
  proc IsCharAlpha*(P1: WCHAR): BOOL {.winapi, dynlib: "user32", importc: "IsCharAlphaW".}
  proc IsCharAlphaNumeric*(P1: WCHAR): BOOL {.winapi, dynlib: "user32", importc: "IsCharAlphaNumericW".}
  proc IsCharLower*(P1: WCHAR): BOOL {.winapi, dynlib: "user32", importc: "IsCharLowerW".}
  proc IsCharUpper*(P1: WCHAR): BOOL {.winapi, dynlib: "user32", importc: "IsCharUpperW".}
  proc IsDialogMessage*(P1: HWND, P2: LPMSG): BOOL {.winapi, dynlib: "user32", importc: "IsDialogMessageW".}
  proc LoadAccelerators*(P1: HINSTANCE, P2: LPCWSTR): HACCEL {.winapi, dynlib: "user32", importc: "LoadAcceleratorsW".}
  proc LoadBitmap*(P1: HINSTANCE, P2: LPCWSTR): HBITMAP {.winapi, dynlib: "user32", importc: "LoadBitmapW".}
  proc LoadCursor*(P1: HINSTANCE, P2: LPCWSTR): HCURSOR {.winapi, dynlib: "user32", importc: "LoadCursorW".}
  proc LoadCursorFromFile*(P1: LPCWSTR): HCURSOR {.winapi, dynlib: "user32", importc: "LoadCursorFromFileW".}
  proc LoadIcon*(P1: HINSTANCE, P2: LPCWSTR): HICON {.winapi, dynlib: "user32", importc: "LoadIconW".}
  proc LoadImage*(P1: HINSTANCE, P2: LPCWSTR, P3: UINT, P4: int32, P5: int32, P6: UINT): HANDLE {.winapi, dynlib: "user32", importc: "LoadImageW".}
  proc LoadKeyboardLayout*(P1: LPCWSTR, P2: UINT): HKL {.winapi, dynlib: "user32", importc: "LoadKeyboardLayoutW".}
  proc LoadMenu*(P1: HINSTANCE, P2: LPCWSTR): HMENU {.winapi, dynlib: "user32", importc: "LoadMenuW".}
  proc LoadMenuIndirect*(P1: ptr MENUTEMPLATE): HMENU {.winapi, dynlib: "user32", importc: "LoadMenuIndirectW".}
  proc LoadString*(P1: HINSTANCE, P2: UINT, P3: LPWSTR, P4: int32): int32 {.winapi, dynlib: "user32", importc: "LoadStringW".}
  proc MapVirtualKey*(P1: UINT, P2: UINT): UINT {.winapi, dynlib: "user32", importc: "MapVirtualKeyW".}
  proc MapVirtualKeyEx*(P1: UINT, P2: UINT, P3: HKL): UINT {.winapi, dynlib: "user32", importc: "MapVirtualKeyExW".}
  proc MessageBox*(P1: HWND, P2: LPCWSTR, P3: LPCWSTR, P4: UINT): int32 {.winapi, dynlib: "user32", importc: "MessageBoxW".}
  proc MessageBoxEx*(P1: HWND, P2: LPCWSTR, P3: LPCWSTR, P4: UINT, P5: WORD): int32 {.winapi, dynlib: "user32", importc: "MessageBoxExW".}
  proc MessageBoxIndirect*(P1: ptr MSGBOXPARAMSW): int32 {.winapi, dynlib: "user32", importc: "MessageBoxIndirectW".}
  proc ModifyMenu*(P1: HMENU, P2: UINT, P3: UINT, P4: UINT, P5: LPCWSTR): BOOL {.winapi, dynlib: "user32", importc: "ModifyMenuW".}
  proc OemToChar*(P1: LPCSTR, P2: LPWSTR): BOOL {.winapi, dynlib: "user32", importc: "OemToCharW".}
  proc OemToCharBuff*(P1: LPCSTR, P2: LPWSTR, P3: DWORD): BOOL {.winapi, dynlib: "user32", importc: "OemToCharBuffW".}
  proc OpenDesktop*(P1: LPWSTR, P2: DWORD, P3: BOOL, P4: DWORD): HDESK {.winapi, dynlib: "user32", importc: "OpenDesktopW".}
  proc OpenWindowStation*(P1: LPWSTR, P2: BOOL, P3: DWORD): HWINSTA {.winapi, dynlib: "user32", importc: "OpenWindowStationW".}
  proc PeekMessage*(P1: LPMSG, P2: HWND, P3: UINT, P4: UINT, P5: UINT): BOOL {.winapi, dynlib: "user32", importc: "PeekMessageW".}
  proc PostMessage*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "user32", importc: "PostMessageW".}
  proc PostThreadMessage*(P1: DWORD, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "user32", importc: "PostThreadMessageW".}
  proc RealGetWindowClass*(P1: HWND, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "user32", importc: "RealGetWindowClassW".}
  proc RegisterClass*(P1: ptr WNDCLASSW): ATOM {.winapi, dynlib: "user32", importc: "RegisterClassW".}
  proc RegisterClassEx*(P1: ptr WNDCLASSEXW): ATOM {.winapi, dynlib: "user32", importc: "RegisterClassExW".}
  proc RegisterClipboardFormat*(P1: LPCWSTR): UINT {.winapi, dynlib: "user32", importc: "RegisterClipboardFormatW".}
  proc RegisterDeviceNotification*(P1: HANDLE, P2: LPVOID, P3: DWORD): HDEVNOTIFY {.winapi, dynlib: "user32", importc: "RegisterDeviceNotificationW".}
  proc RegisterWindowMessage*(P1: LPCWSTR): UINT {.winapi, dynlib: "user32", importc: "RegisterWindowMessageW".}
  proc RemoveProp*(P1: HWND, P2: LPCWSTR): HANDLE {.winapi, dynlib: "user32", importc: "RemovePropW".}
  proc SendDlgItemMessage*(P1: HWND, P2: int32, P3: UINT, P4: WPARAM, P5: LPARAM): LONG {.winapi, dynlib: "user32", importc: "SendDlgItemMessageW".}
  proc SendMessage*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "user32", importc: "SendMessageW".}
  proc SendMessageCallback*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM, P5: SENDASYNCPROC, P6: DWORD): BOOL {.winapi, dynlib: "user32", importc: "SendMessageCallbackW".}
  proc SendMessageTimeout*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM, P5: UINT, P6: UINT, P7: PDWORD): LRESULT {.winapi, dynlib: "user32", importc: "SendMessageTimeoutW".}
  proc SendNotifyMessage*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "user32", importc: "SendNotifyMessageW".}
  proc SetClassLong*(P1: HWND, P2: int32, P3: LONG): DWORD {.winapi, dynlib: "user32", importc: "SetClassLongW".}
  proc SetDlgItemText*(P1: HWND, P2: int32, P3: LPCWSTR): BOOL {.winapi, dynlib: "user32", importc: "SetDlgItemTextW".}
  proc SetMenuItemInfo*(P1: HMENU, P2: UINT, P3: BOOL, P4: LPCMENUITEMINFOW): BOOL {.winapi, dynlib: "user32", importc: "SetMenuItemInfoW".}
  proc SetProp*(P1: HWND, P2: LPCWSTR, P3: HANDLE): BOOL {.winapi, dynlib: "user32", importc: "SetPropW".}
  proc SetUserObjectInformation*(P1: HANDLE, P2: int32, P3: PVOID, P4: DWORD): BOOL {.winapi, dynlib: "user32", importc: "SetUserObjectInformationW".}
  proc SetWindowLong*(P1: HWND, P2: int32, P3: LONG): LONG {.winapi, dynlib: "user32", importc: "SetWindowLongW".}
  proc SetWindowsHook*(P1: int32, P2: HOOKPROC): HHOOK {.winapi, dynlib: "user32", importc: "SetWindowsHookW".}
  proc SetWindowsHookEx*(P1: int32, P2: HOOKPROC, P3: HINSTANCE, P4: DWORD): HHOOK {.winapi, dynlib: "user32", importc: "SetWindowsHookExW".}
  proc SetWindowText*(P1: HWND, P2: LPCWSTR): BOOL {.winapi, dynlib: "user32", importc: "SetWindowTextW".}
  proc SystemParametersInfo*(P1: UINT, P2: UINT, P3: PVOID, P4: UINT): BOOL {.winapi, dynlib: "user32", importc: "SystemParametersInfoW".}
  proc TabbedTextOut*(P1: HDC, P2: int32, P3: int32, P4: LPCWSTR, P5: int32, P6: int32, P7: LPINT, P8: int32): LONG {.winapi, dynlib: "user32", importc: "TabbedTextOutW".}
  proc TranslateAccelerator*(P1: HWND, P2: HACCEL, P3: LPMSG): int32 {.winapi, dynlib: "user32", importc: "TranslateAcceleratorW".}
  proc UnregisterClass*(P1: LPCWSTR, P2: HINSTANCE): BOOL {.winapi, dynlib: "user32", importc: "UnregisterClassW".}
  proc VkKeyScan*(P1: WCHAR): SHORT {.winapi, dynlib: "user32", importc: "VkKeyScanW".}
  proc VkKeyScanEx*(P1: WCHAR, P2: HKL): SHORT {.winapi, dynlib: "user32", importc: "VkKeyScanExW".}
  proc WinHelp*(P1: HWND, P2: LPCWSTR, P3: UINT, P4: DWORD): BOOL {.winapi, dynlib: "user32", importc: "WinHelpW".}
  proc wvsprintf*(P1: LPWSTR, P2: LPCWSTR, P3: va_list): int32 {.winapi, dynlib: "user32", importc: "wvsprintfW".}
  proc ChangeDisplaySettings*(P1: PDEVMODEW, P2: DWORD): LONG {.winapi, dynlib: "user32", importc: "ChangeDisplaySettingsW".}
  proc ChangeDisplaySettingsEx*(P1: LPCWSTR, P2: LPDEVMODEW, P3: HWND, P4: DWORD, P5: LPVOID): LONG {.winapi, dynlib: "user32", importc: "ChangeDisplaySettingsExW".}
  proc CreateDesktop*(P1: LPCWSTR, P2: LPCWSTR, P3: LPDEVMODEW, P4: DWORD, P5: ACCESS_MASK, P6: LPSECURITY_ATTRIBUTES): HDESK {.winapi, dynlib: "user32", importc: "CreateDesktopW".}
  proc EnumDisplaySettings*(P1: LPCWSTR, P2: DWORD, P3: PDEVMODEW): BOOL {.winapi, dynlib: "user32", importc: "EnumDisplaySettingsW".}
  proc EnumDisplaySettingsEx*(P1: LPCWSTR, P2: DWORD, P3: LPDEVMODEW, P4: DWORD): BOOL {.winapi, dynlib: "user32", importc: "EnumDisplaySettingsExW".}
  proc EnumDisplayDevices*(P1: LPCWSTR, P2: DWORD, P3: PDISPLAY_DEVICEW, P4: DWORD): BOOL {.winapi, dynlib: "user32", importc: "EnumDisplayDevicesW".}

  when defined(cpu64):
    proc GetWindowLongPtr*(P1: HWND, P2: int32): LONG_PTR {.winapi, dynlib: "user32", importc.}
    proc SetWindowLongPtr*(P1: HWND, P2: int32, P3: LONG_PTR): LONG_PTR {.winapi, dynlib: "user32", importc.}
    proc GetClassLongPtr*(P1: HWND, P2: int32): LONG_PTR{.winapi, dynlib: "user32", importc.}
    proc SetClassLongPtr*(P1: HWND, P2: int32, P3: LONG_PTR): LONG_PTR{.winapi, dynlib: "user32", importc.}
  else:
    proc GetWindowLongPtr*(P1: HWND, P2: int32): LONG_PTR {.winapi, dynlib: "user32", importc: "GetWindowLongW".}
    proc SetWindowLongPtr*(P1: HWND, P2: int32, P3: LONG_PTR): LONG_PTR {.winapi, dynlib: "user32", importc: "SetWindowLongW".}
    proc GetClassLongPtr*(P1: HWND, P2: int32): LONG_PTR{.winapi, dynlib: "user32", importc: "GetClassLongW".}
    proc SetClassLongPtr*(P1: HWND, P2: int32, P3: LONG_PTR): LONG_PTR{.winapi, dynlib: "user32", importc: "SetClassLongW".}

else:
  const
    MAKEINTRESOURCE* = MAKEINTRESOURCEA

  type
    EDITWORDBREAKPROC* = EDITWORDBREAKPROCA
    PROPENUMPROC* = PROPENUMPROCA
    PROPENUMPROCEX* = PROPENUMPROCEXA
    DESKTOPENUMPROC* = DESKTOPENUMPROCA
    WINSTAENUMPROC* = WINSTAENUMPROCA
    WNDCLASS* = WNDCLASSA
    WNDCLASSEX* = WNDCLASSEXA
    MENUITEMINFO* = MENUITEMINFOA
    LPCMENUITEMINFO* = LPCMENUITEMINFOA
    MSGBOXPARAMS* = MSGBOXPARAMSA
    HIGHCONTRAST* = HIGHCONTRASTA
    SERIALKEYS* = SERIALKEYSA
    SOUNDSENTRY* = SOUNDSENTRYA
    CREATESTRUCT* = CREATESTRUCTA
    CBT_CREATEWND* = CBT_CREATEWNDA
    MDICREATESTRUCT* = MDICREATESTRUCTA
    MULTIKEYHELP* = MULTIKEYHELPA
    MONITORINFOEX* = MONITORINFOEXA
    ICONMETRICS* = ICONMETRICSA
    NONCLIENTMETRICS* = NONCLIENTMETRICSA

  proc AppendMenu*(P1: HMENU, P2: UINT, P3: UINT_PTR, P4: LPCSTR): BOOL {.winapi, dynlib: "user32", importc: "AppendMenuA".}
  proc BroadcastSystemMessage*(P1: DWORD, P2: LPDWORD, P3: UINT, P4: WPARAM, P5: LPARAM): int32 {.winapi, dynlib: "user32", importc: "BroadcastSystemMessageA".}
  proc BroadcastSystemMessageEx*(P1: DWORD, P2: LPDWORD, P3: UINT, P4: WPARAM, P5: LPARAM, P6: PBSMINFO): int32 {.winapi, dynlib: "user32", importc: "BroadcastSystemMessageExA".}
  proc CallMsgFilter*(P1: LPMSG, P2: INT): BOOL {.winapi, dynlib: "user32", importc: "CallMsgFilterA".}
  proc CallWindowProc*(P1: WNDPROC, P2: HWND, P3: UINT, P4: WPARAM, P5: LPARAM): LRESULT {.winapi, dynlib: "user32", importc: "CallWindowProcA".}
  proc ChangeMenu*(P1: HMENU, P2: UINT, P3: LPCSTR, P4: UINT, P5: UINT): BOOL {.winapi, dynlib: "user32", importc: "ChangeMenuA".}
  proc CharLower*(P1: LPSTR): LPSTR {.winapi, dynlib: "user32", importc: "CharLowerA".}
  proc CharLowerBuff*(P1: LPSTR, P2: DWORD): DWORD {.winapi, dynlib: "user32", importc: "CharLowerBuffA".}
  proc CharNext*(P1: LPCSTR): LPSTR {.winapi, dynlib: "user32", importc: "CharNextA".}
  proc CharNextEx*(P1: WORD, P2: LPCSTR, P3: DWORD): LPSTR {.winapi, dynlib: "user32", importc: "CharNextExA".}
  proc CharPrev*(P1: LPCSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "user32", importc: "CharPrevA".}
  proc CharPrevEx*(P1: WORD, P2: LPCSTR, P3: LPCSTR, P4: DWORD): LPSTR {.winapi, dynlib: "user32", importc: "CharPrevExA".}
  proc CharToOem*(P1: LPCSTR, P2: LPSTR): BOOL {.winapi, dynlib: "user32", importc: "CharToOemA".}
  proc CharToOemBuff*(P1: LPCSTR, P2: LPSTR, P3: DWORD): BOOL {.winapi, dynlib: "user32", importc: "CharToOemBuffA".}
  proc CharUpper*(P1: LPSTR): LPSTR {.winapi, dynlib: "user32", importc: "CharUpperA".}
  proc CharUpperBuff*(P1: LPSTR, P2: DWORD): DWORD {.winapi, dynlib: "user32", importc: "CharUpperBuffA".}
  proc CopyAcceleratorTable*(P1: HACCEL, P2: LPACCEL, P3: int32): int32 {.winapi, dynlib: "user32", importc: "CopyAcceleratorTableA".}
  proc CreateAcceleratorTable*(P1: LPACCEL, P2: int32): HACCEL {.winapi, dynlib: "user32", importc: "CreateAcceleratorTableA".}
  proc CreateDialog*(h: HINSTANCE, n: LPCSTR, w: HWND, f: DLGPROC): HWND {.discardable.} = CreateDialogParamA( h , n , w , f , 0 )
  proc CreateDialogIndirect*(h: HINSTANCE, t: LPCDLGTEMPLATE, w: HWND, f: DLGPROC): HWND {.discardable.} = CreateDialogIndirectParamA( h , t , w , f , 0 )
  proc CreateDialogIndirectParam*(P1: HINSTANCE, P2: LPCDLGTEMPLATE, P3: HWND, P4: DLGPROC, P5: LPARAM): HWND {.winapi, dynlib: "user32", importc: "CreateDialogIndirectParamA".}
  proc CreateDialogParam*(P1: HINSTANCE, P2: LPCSTR, P3: HWND, P4: DLGPROC, P5: LPARAM): HWND {.winapi, dynlib: "user32", importc: "CreateDialogParamA".}
  proc CreateMDIWindow*(P1: LPCSTR, P2: LPCSTR, P3: DWORD, P4: int32, P5: int32, P6: int32, P7: int32, P8: HWND, P9: HINSTANCE, P10: LPARAM): HWND {.winapi, dynlib: "user32", importc: "CreateMDIWindowA".}
  proc CreateWindow*(a: LPCSTR, b: LPCSTR, c: DWORD, d: int32, e: int32, f: int32, g: int32, h: HWND, i: HMENU, j: HINSTANCE, k: LPVOID): HWND {.discardable.} = CreateWindowExA( 0 , a , b , c , d , e , f , g , h , i , j , k )
  proc CreateWindowEx*(P1: DWORD, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: int32, P6: int32, P7: int32, P8: int32, P9: HWND, P10: HMENU, P11: HINSTANCE, P12: LPVOID): HWND {.winapi, dynlib: "user32", importc: "CreateWindowExA".}
  proc CreateWindowStation*(P1: LPSTR, P2: DWORD, P3: DWORD, P4: LPSECURITY_ATTRIBUTES): HWINSTA {.winapi, dynlib: "user32", importc: "CreateWindowStationA".}
  proc DefDlgProc*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "user32", importc: "DefDlgProcA".}
  proc DefFrameProc*(P1: HWND, P2: HWND, P3: UINT, P4: WPARAM, P5: LPARAM): LRESULT {.winapi, dynlib: "user32", importc: "DefFrameProcA".}
  proc DefMDIChildProc*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "user32", importc: "DefMDIChildProcA".}
  proc DefWindowProc*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "user32", importc: "DefWindowProcA".}
  proc DialogBox*(i: HINSTANCE, t: LPCSTR, p: HWND, f: DLGPROC): int32 {.discardable.} = DialogBoxParamA( i , t , p , f , 0 )
  proc DialogBoxIndirect*(i: HINSTANCE, t: LPCDLGTEMPLATE, p: HWND, f: DLGPROC): int32 {.discardable.} = DialogBoxIndirectParamA( i , t , p , f , 0 )
  proc DialogBoxIndirectParam*(P1: HINSTANCE, P2: LPCDLGTEMPLATE, P3: HWND, P4: DLGPROC, P5: LPARAM): int32 {.winapi, dynlib: "user32", importc: "DialogBoxIndirectParamA".}
  proc DialogBoxParam*(P1: HINSTANCE, P2: LPCSTR, P3: HWND, P4: DLGPROC, P5: LPARAM): int32 {.winapi, dynlib: "user32", importc: "DialogBoxParamA".}
  proc DispatchMessage*(P1: ptr MSG): LONG {.winapi, dynlib: "user32", importc: "DispatchMessageA".}
  proc DlgDirList*(P1: HWND, P2: LPSTR, P3: int32, P4: int32, P5: UINT): int32 {.winapi, dynlib: "user32", importc: "DlgDirListA".}
  proc DlgDirListComboBox*(P1: HWND, P2: LPSTR, P3: int32, P4: int32, P5: UINT): int32 {.winapi, dynlib: "user32", importc: "DlgDirListComboBoxA".}
  proc DlgDirSelectComboBoxEx*(P1: HWND, P2: LPSTR, P3: int32, P4: int32): BOOL {.winapi, dynlib: "user32", importc: "DlgDirSelectComboBoxExA".}
  proc DlgDirSelectEx*(P1: HWND, P2: LPSTR, P3: int32, P4: int32): BOOL {.winapi, dynlib: "user32", importc: "DlgDirSelectExA".}
  proc DrawState*(P1: HDC, P2: HBRUSH, P3: DRAWSTATEPROC, P4: LPARAM, P5: WPARAM, P6: int32, P7: int32, P8: int32, P9: int32, P10: UINT): BOOL {.winapi, dynlib: "user32", importc: "DrawStateA".}
  proc DrawText*(P1: HDC, P2: LPCSTR, P3: int32, P4: LPRECT, P5: UINT): int32 {.winapi, dynlib: "user32", importc: "DrawTextA".}
  proc DrawTextEx*(P1: HDC, P2: LPSTR, P3: int32, P4: LPRECT, P5: UINT, P6: LPDRAWTEXTPARAMS): int32 {.winapi, dynlib: "user32", importc: "DrawTextExA".}
  proc EnumDesktops*(P1: HWINSTA, P2: DESKTOPENUMPROCA, P3: LPARAM): BOOL {.winapi, dynlib: "user32", importc: "EnumDesktopsA".}
  proc EnumProps*(P1: HWND, P2: PROPENUMPROCA): int32 {.winapi, dynlib: "user32", importc: "EnumPropsA".}
  proc EnumPropsEx*(P1: HWND, P2: PROPENUMPROCEXA, P3: LPARAM): int32 {.winapi, dynlib: "user32", importc: "EnumPropsExA".}
  proc EnumWindowStations*(P1: WINSTAENUMPROCA, P2: LPARAM): BOOL {.winapi, dynlib: "user32", importc: "EnumWindowStationsA".}
  proc FindWindow*(P1: LPCSTR, P2: LPCSTR): HWND {.winapi, dynlib: "user32", importc: "FindWindowA".}
  proc FindWindowEx*(P1: HWND, P2: HWND, P3: LPCSTR, P4: LPCSTR): HWND {.winapi, dynlib: "user32", importc: "FindWindowExA".}
  proc GetClassInfo*(P1: HINSTANCE, P2: LPCSTR, P3: LPWNDCLASSA): BOOL {.winapi, dynlib: "user32", importc: "GetClassInfoA".}
  proc GetClassInfoEx*(P1: HINSTANCE, P2: LPCSTR, P3: LPWNDCLASSEXA): BOOL {.winapi, dynlib: "user32", importc: "GetClassInfoExA".}
  proc GetClassLong*(P1: HWND, P2: int32): DWORD {.winapi, dynlib: "user32", importc: "GetClassLongA".}
  proc GetClassName*(P1: HWND, P2: LPSTR, P3: int32): int32 {.winapi, dynlib: "user32", importc: "GetClassNameA".}
  proc GetClipboardFormatName*(P1: UINT, P2: LPSTR, P3: int32): int32 {.winapi, dynlib: "user32", importc: "GetClipboardFormatNameA".}
  proc GetDlgItemText*(P1: HWND, P2: int32, P3: LPSTR, P4: int32): UINT {.winapi, dynlib: "user32", importc: "GetDlgItemTextA".}
  proc GetKeyboardLayoutName*(P1: LPSTR): BOOL {.winapi, dynlib: "user32", importc: "GetKeyboardLayoutNameA".}
  proc GetKeyNameText*(P1: LONG, P2: LPSTR, P3: int32): int32 {.winapi, dynlib: "user32", importc: "GetKeyNameTextA".}
  proc GetMenuItemInfo*(P1: HMENU, P2: UINT, P3: BOOL, P4: LPMENUITEMINFOA): BOOL {.winapi, dynlib: "user32", importc: "GetMenuItemInfoA".}
  proc GetMenuString*(P1: HMENU, P2: UINT, P3: LPSTR, P4: int32, P5: UINT): int32 {.winapi, dynlib: "user32", importc: "GetMenuStringA".}
  proc GetMessage*(P1: LPMSG, P2: HWND, P3: UINT, P4: UINT): BOOL {.winapi, dynlib: "user32", importc: "GetMessageA".}
  proc GetMonitorInfo*(P1: HMONITOR, P2: LPMONITORINFOEXA): BOOL {.winapi, dynlib: "user32", importc: "GetMonitorInfoA".}
  proc GetProp*(P1: HWND, P2: LPCSTR): HANDLE {.winapi, dynlib: "user32", importc: "GetPropA".}
  proc GetRawInputDeviceInfo*(P1: HANDLE, P2: UINT, P3: LPVOID, P4: PUINT): UINT {.winapi, dynlib: "user32", importc: "GetRawInputDeviceInfoA".}
  proc GetTabbedTextExtent*(P1: HDC, P2: LPCSTR, P3: int32, P4: int32, P5: LPINT): DWORD {.winapi, dynlib: "user32", importc: "GetTabbedTextExtentA".}
  proc GetUserObjectInformation*(P1: HANDLE, P2: int32, P3: PVOID, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "user32", importc: "GetUserObjectInformationA".}
  proc GetWindowLong*(P1: HWND, P2: int32): LONG {.winapi, dynlib: "user32", importc: "GetWindowLongA".}
  proc GetWindowText*(P1: HWND, P2: LPSTR, P3: int32): int32 {.winapi, dynlib: "user32", importc: "GetWindowTextA".}
  proc GetWindowTextLength*(P1: HWND): int32 {.winapi, dynlib: "user32", importc: "GetWindowTextLengthA".}
  proc GetAltTabInfo*(P1: HWND, P2: int32, P3: PALTTABINFO, P4: LPSTR, P5: UINT): BOOL {.winapi, dynlib: "user32", importc: "GetAltTabInfoA".}
  proc GetWindowModuleFileName*(P1: HWND, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "user32", importc: "GetWindowModuleFileNameA".}
  proc GrayString*(P1: HDC, P2: HBRUSH, P3: GRAYSTRINGPROC, P4: LPARAM, P5: int32, P6: int32, P7: int32, P8: int32, P9: int32): BOOL {.winapi, dynlib: "user32", importc: "GrayStringA".}
  proc InsertMenu*(P1: HMENU, P2: UINT, P3: UINT, P4: UINT, P5: LPCSTR): BOOL {.winapi, dynlib: "user32", importc: "InsertMenuA".}
  proc InsertMenuItem*(P1: HMENU, P2: UINT, P3: BOOL, P4: LPCMENUITEMINFOA): BOOL {.winapi, dynlib: "user32", importc: "InsertMenuItemA".}
  proc IsCharAlpha*(P1: CHAR): BOOL {.winapi, dynlib: "user32", importc: "IsCharAlphaA".}
  proc IsCharAlphaNumeric*(P1: CHAR): BOOL {.winapi, dynlib: "user32", importc: "IsCharAlphaNumericA".}
  proc IsCharLower*(P1: CHAR): BOOL {.winapi, dynlib: "user32", importc: "IsCharLowerA".}
  proc IsCharUpper*(P1: CHAR): BOOL {.winapi, dynlib: "user32", importc: "IsCharUpperA".}
  proc IsDialogMessage*(P1: HWND, P2: LPMSG): BOOL {.winapi, dynlib: "user32", importc: "IsDialogMessageA".}
  proc LoadAccelerators*(P1: HINSTANCE, P2: LPCSTR): HACCEL {.winapi, dynlib: "user32", importc: "LoadAcceleratorsA".}
  proc LoadBitmap*(P1: HINSTANCE, P2: LPCSTR): HBITMAP {.winapi, dynlib: "user32", importc: "LoadBitmapA".}
  proc LoadCursor*(P1: HINSTANCE, P2: LPCSTR): HCURSOR {.winapi, dynlib: "user32", importc: "LoadCursorA".}
  proc LoadIcon*(P1: HINSTANCE, P2: LPCSTR): HICON {.winapi, dynlib: "user32", importc: "LoadIconA".}
  proc LoadCursorFromFile*(P1: LPCSTR): HCURSOR {.winapi, dynlib: "user32", importc: "LoadCursorFromFileA".}
  proc LoadImage*(P1: HINSTANCE, P2: LPCSTR, P3: UINT, P4: int32, P5: int32, P6: UINT): HANDLE {.winapi, dynlib: "user32", importc: "LoadImageA".}
  proc LoadKeyboardLayout*(P1: LPCSTR, P2: UINT): HKL {.winapi, dynlib: "user32", importc: "LoadKeyboardLayoutA".}
  proc LoadMenu*(P1: HINSTANCE, P2: LPCSTR): HMENU {.winapi, dynlib: "user32", importc: "LoadMenuA".}
  proc LoadMenuIndirect*(P1: ptr MENUTEMPLATE): HMENU {.winapi, dynlib: "user32", importc: "LoadMenuIndirectA".}
  proc LoadString*(P1: HINSTANCE, P2: UINT, P3: LPSTR, P4: int32): int32 {.winapi, dynlib: "user32", importc: "LoadStringA".}
  proc MapVirtualKey*(P1: UINT, P2: UINT): UINT {.winapi, dynlib: "user32", importc: "MapVirtualKeyA".}
  proc MapVirtualKeyEx*(P1: UINT, P2: UINT, P3: HKL): UINT {.winapi, dynlib: "user32", importc: "MapVirtualKeyExA".}
  proc MessageBox*(P1: HWND, P2: LPCSTR, P3: LPCSTR, P4: UINT): int32 {.winapi, dynlib: "user32", importc: "MessageBoxA".}
  proc MessageBoxEx*(P1: HWND, P2: LPCSTR, P3: LPCSTR, P4: UINT, P5: WORD): int32 {.winapi, dynlib: "user32", importc: "MessageBoxExA".}
  proc MessageBoxIndirect*(P1: ptr MSGBOXPARAMSA): int32 {.winapi, dynlib: "user32", importc: "MessageBoxIndirectA".}
  proc ModifyMenu*(P1: HMENU, P2: UINT, P3: UINT, P4: UINT, P5: LPCSTR): BOOL {.winapi, dynlib: "user32", importc: "ModifyMenuA".}
  proc OemToChar*(P1: LPCSTR, P2: LPSTR): BOOL {.winapi, dynlib: "user32", importc: "OemToCharA".}
  proc OemToCharBuff*(P1: LPCSTR, P2: LPSTR, P3: DWORD): BOOL {.winapi, dynlib: "user32", importc: "OemToCharBuffA".}
  proc OpenDesktop*(P1: LPSTR, P2: DWORD, P3: BOOL, P4: DWORD): HDESK {.winapi, dynlib: "user32", importc: "OpenDesktopA".}
  proc OpenWindowStation*(P1: LPSTR, P2: BOOL, P3: DWORD): HWINSTA {.winapi, dynlib: "user32", importc: "OpenWindowStationA".}
  proc PeekMessage*(P1: LPMSG, P2: HWND, P3: UINT, P4: UINT, P5: UINT): BOOL {.winapi, dynlib: "user32", importc: "PeekMessageA".}
  proc PostMessage*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "user32", importc: "PostMessageA".}
  proc PostThreadMessage*(P1: DWORD, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "user32", importc: "PostThreadMessageA".}
  proc RealGetWindowClass*(P1: HWND, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "user32", importc: "RealGetWindowClassA".}
  proc RegisterClass*(P1: ptr WNDCLASSA): ATOM {.winapi, dynlib: "user32", importc: "RegisterClassA".}
  proc RegisterClassEx*(P1: ptr WNDCLASSEXA): ATOM {.winapi, dynlib: "user32", importc: "RegisterClassExA".}
  proc RegisterClipboardFormat*(P1: LPCSTR): UINT {.winapi, dynlib: "user32", importc: "RegisterClipboardFormatA".}
  proc RegisterDeviceNotification*(P1: HANDLE, P2: LPVOID, P3: DWORD): HDEVNOTIFY {.winapi, dynlib: "user32", importc: "RegisterDeviceNotificationA".}
  proc RegisterWindowMessage*(P1: LPCSTR): UINT {.winapi, dynlib: "user32", importc: "RegisterWindowMessageA".}
  proc RemoveProp*(P1: HWND, P2: LPCSTR): HANDLE {.winapi, dynlib: "user32", importc: "RemovePropA".}
  proc SendDlgItemMessage*(P1: HWND, P2: int32, P3: UINT, P4: WPARAM, P5: LPARAM): LONG {.winapi, dynlib: "user32", importc: "SendDlgItemMessageA".}
  proc SendMessage*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "user32", importc: "SendMessageA".}
  proc SendMessageCallback*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM, P5: SENDASYNCPROC, P6: DWORD): BOOL {.winapi, dynlib: "user32", importc: "SendMessageCallbackA".}
  proc SendMessageTimeout*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM, P5: UINT, P6: UINT, P7: PDWORD): LRESULT {.winapi, dynlib: "user32", importc: "SendMessageTimeoutA".}
  proc SendNotifyMessage*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "user32", importc: "SendNotifyMessageA".}
  proc SetClassLong*(P1: HWND, P2: int32, P3: LONG): DWORD {.winapi, dynlib: "user32", importc: "SetClassLongA".}
  proc SetDlgItemText*(P1: HWND, P2: int32, P3: LPCSTR): BOOL {.winapi, dynlib: "user32", importc: "SetDlgItemTextA".}
  proc SetMenuItemInfo*(P1: HMENU, P2: UINT, P3: BOOL, P4: LPCMENUITEMINFOA): BOOL {.winapi, dynlib: "user32", importc: "SetMenuItemInfoA".}
  proc SetProp*(P1: HWND, P2: LPCSTR, P3: HANDLE): BOOL {.winapi, dynlib: "user32", importc: "SetPropA".}
  proc SetUserObjectInformation*(P1: HANDLE, P2: int32, P3: PVOID, P4: DWORD): BOOL {.winapi, dynlib: "user32", importc: "SetUserObjectInformationA".}
  proc SetWindowLong*(P1: HWND, P2: int32, P3: LONG): LONG {.winapi, dynlib: "user32", importc: "SetWindowLongA".}
  proc SetWindowsHook*(P1: int32, P2: HOOKPROC): HHOOK {.winapi, dynlib: "user32", importc: "SetWindowsHookA".}
  proc SetWindowsHookEx*(P1: int32, P2: HOOKPROC, P3: HINSTANCE, P4: DWORD): HHOOK {.winapi, dynlib: "user32", importc: "SetWindowsHookExA".}
  proc SetWindowText*(P1: HWND, P2: LPCSTR): BOOL {.winapi, dynlib: "user32", importc: "SetWindowTextA".}
  proc SystemParametersInfo*(P1: UINT, P2: UINT, P3: PVOID, P4: UINT): BOOL {.winapi, dynlib: "user32", importc: "SystemParametersInfoA".}
  proc TabbedTextOut*(P1: HDC, P2: int32, P3: int32, P4: LPCSTR, P5: int32, P6: int32, P7: LPINT, P8: int32): LONG {.winapi, dynlib: "user32", importc: "TabbedTextOutA".}
  proc TranslateAccelerator*(P1: HWND, P2: HACCEL, P3: LPMSG): int32 {.winapi, dynlib: "user32", importc: "TranslateAcceleratorA".}
  proc UnregisterClass*(P1: LPCSTR, P2: HINSTANCE): BOOL {.winapi, dynlib: "user32", importc: "UnregisterClassA".}
  proc VkKeyScan*(P1: CHAR): SHORT {.winapi, dynlib: "user32", importc: "VkKeyScanA".}
  proc VkKeyScanEx*(P1: CHAR, P2: HKL): SHORT {.winapi, dynlib: "user32", importc: "VkKeyScanExA".}
  proc WinHelp*(P1: HWND, P2: LPCSTR, P3: UINT, P4: DWORD): BOOL {.winapi, dynlib: "user32", importc: "WinHelpA".}
  proc wvsprintf*(P1: LPSTR, P2: LPCSTR, P3: va_list): int32 {.winapi, dynlib: "user32", importc: "wvsprintfA".}
  proc ChangeDisplaySettings*(P1: PDEVMODEA, P2: DWORD): LONG {.winapi, dynlib: "user32", importc: "ChangeDisplaySettingsA".}
  proc ChangeDisplaySettingsEx*(P1: LPCSTR, P2: LPDEVMODEA, P3: HWND, P4: DWORD, P5: LPVOID): LONG {.winapi, dynlib: "user32", importc: "ChangeDisplaySettingsExA".}
  proc CreateDesktop*(P1: LPCSTR, P2: LPCSTR, P3: LPDEVMODEA, P4: DWORD, P5: ACCESS_MASK, P6: LPSECURITY_ATTRIBUTES): HDESK {.winapi, dynlib: "user32", importc: "CreateDesktopA".}
  proc EnumDisplaySettings*(P1: LPCSTR, P2: DWORD, P3: PDEVMODEA): BOOL {.winapi, dynlib: "user32", importc: "EnumDisplaySettingsA".}
  proc EnumDisplaySettingsEx*(P1: LPCSTR, P2: DWORD, P3: LPDEVMODEA, P4: DWORD): BOOL {.winapi, dynlib: "user32", importc: "EnumDisplaySettingsExA".}
  proc EnumDisplayDevices*(P1: LPCSTR, P2: DWORD, P3: PDISPLAY_DEVICEA, P4: DWORD): BOOL {.winapi, dynlib: "user32", importc: "EnumDisplayDevicesA".}

  when defined(cpu64):
    proc GetWindowLongPtr*(P1: HWND, P2: int32): LONG_PTR {.winapi, dynlib: "user32", importc.}
    proc SetWindowLongPtr*(P1: HWND, P2: int32, P3: LONG_PTR): LONG_PTR {.winapi, dynlib: "user32", importc.}
    proc GetClassLongPtr*(P1: HWND, P2: int32): LONG_PTR{.winapi, dynlib: "user32", importc.}
    proc SetClassLongPtr*(P1: HWND, P2: int32, P3: LONG_PTR): ULONG_PTR {.winapi, dynlib: "user32", importc.}
  else:
    proc GetWindowLongPtr*(P1: HWND, P2: int32): LONG_PTR {.winapi, dynlib: "user32", importc: "GetWindowLongA".}
    proc SetWindowLongPtr*(P1: HWND, P2: int32, P3: LONG_PTR): LONG_PTR {.winapi, dynlib: "user32", importc: "SetWindowLongA".}
    proc GetClassLongPtr*(P1: HWND, P2: int32): LONG_PTR{.winapi, dynlib: "user32", importc: "GetClassLongA".}
    proc SetClassLongPtr*(P1: HWND, P2: int32, P3: LONG_PTR): ULONG_PTR {.winapi, dynlib: "user32", importc: "SetClassLongA".}

type
  LPWNDCLASS* = ptr WNDCLASS
  PWNDCLASS* = ptr WNDCLASS
  LPWNDCLASSEX* = ptr WNDCLASSEX
  PWNDCLASSEX* = ptr WNDCLASSEX
  LPMENUITEMINFO* = ptr MENUITEMINFO
  PMSGBOXPARAMS* = ptr MSGBOXPARAMS
  LPMSGBOXPARAMS* = ptr MSGBOXPARAMS
  LPHIGHCONTRAST* = ptr HIGHCONTRAST
  LPSERIALKEYS* = ptr SERIALKEYS
  LPSOUNDSENTRY* = ptr SOUNDSENTRY
  LPCREATESTRUCT* = ptr CREATESTRUCT
  LPCBT_CREATEWND* = ptr CBT_CREATEWND
  LPMDICREATESTRUCT* = ptr MDICREATESTRUCT
  PMULTIKEYHELP* = ptr MULTIKEYHELP
  LPMULTIKEYHELP* = ptr MULTIKEYHELP
  LPMONITORINFOEX* = ptr MONITORINFOEX
  LPICONMETRICS* = ptr ICONMETRICS
  LPNONCLIENTMETRICS* = ptr NONCLIENTMETRICS

proc `mi=`*(self: var INPUT, x: MOUSEINPUT) = self.u1.mi = x
proc mi*(self: INPUT): MOUSEINPUT = self.u1.mi
proc `ki=`*(self: var INPUT, x: KEYBDINPUT) = self.u1.ki = x
proc ki*(self: INPUT): KEYBDINPUT = self.u1.ki
proc `hi=`*(self: var INPUT, x: HARDWAREINPUT) = self.u1.hi = x
proc hi*(self: INPUT): HARDWAREINPUT = self.u1.hi
proc `ulButtons=`*(self: var RAWMOUSE, x: ULONG) = self.u1.ulButtons = x
proc ulButtons*(self: RAWMOUSE): ULONG = self.u1.ulButtons
proc `usButtonFlags=`*(self: var RAWMOUSE, x: USHORT) = self.u1.s1.usButtonFlags = x
proc usButtonFlags*(self: RAWMOUSE): USHORT = self.u1.s1.usButtonFlags
proc `usButtonData=`*(self: var RAWMOUSE, x: USHORT) = self.u1.s1.usButtonData = x
proc usButtonData*(self: RAWMOUSE): USHORT = self.u1.s1.usButtonData
proc `mouse=`*(self: var RID_DEVICE_INFO, x: RID_DEVICE_INFO_MOUSE) = self.u1.mouse = x
proc mouse*(self: RID_DEVICE_INFO): RID_DEVICE_INFO_MOUSE = self.u1.mouse
proc `keyboard=`*(self: var RID_DEVICE_INFO, x: RID_DEVICE_INFO_KEYBOARD) = self.u1.keyboard = x
proc keyboard*(self: RID_DEVICE_INFO): RID_DEVICE_INFO_KEYBOARD = self.u1.keyboard
proc `hid=`*(self: var RID_DEVICE_INFO, x: RID_DEVICE_INFO_HID) = self.u1.hid = x
proc hid*(self: RID_DEVICE_INFO): RID_DEVICE_INFO_HID = self.u1.hid

# core/winerror.nim

type
  SCODE* = int32

const
  ERROR_SUCCESS* = 0
  NO_ERROR* = 0
  ERROR_INVALID_FUNCTION* = 1
  ERROR_FILE_NOT_FOUND* = 2
  ERROR_PATH_NOT_FOUND* = 3
  ERROR_TOO_MANY_OPEN_FILES* = 4
  ERROR_ACCESS_DENIED* = 5
  ERROR_INVALID_HANDLE* = 6
  ERROR_ARENA_TRASHED* = 7
  ERROR_NOT_ENOUGH_MEMORY* = 8
  ERROR_INVALID_BLOCK* = 9
  ERROR_BAD_ENVIRONMENT* = 10
  ERROR_BAD_FORMAT* = 11
  ERROR_INVALID_ACCESS* = 12
  ERROR_INVALID_DATA* = 13
  ERROR_OUTOFMEMORY* = 14
  ERROR_INVALID_DRIVE* = 15
  ERROR_CURRENT_DIRECTORY* = 16
  ERROR_NOT_SAME_DEVICE* = 17
  ERROR_NO_MORE_FILES* = 18
  ERROR_WRITE_PROTECT* = 19
  ERROR_BAD_UNIT* = 20
  ERROR_NOT_READY* = 21
  ERROR_BAD_COMMAND* = 22
  ERROR_CRC* = 23
  ERROR_BAD_LENGTH* = 24
  ERROR_SEEK* = 25
  ERROR_NOT_DOS_DISK* = 26
  ERROR_SECTOR_NOT_FOUND* = 27
  ERROR_OUT_OF_PAPER* = 28
  ERROR_WRITE_FAULT* = 29
  ERROR_READ_FAULT* = 30
  ERROR_GEN_FAILURE* = 31
  ERROR_SHARING_VIOLATION* = 32
  ERROR_LOCK_VIOLATION* = 33
  ERROR_WRONG_DISK* = 34
  ERROR_SHARING_BUFFER_EXCEEDED* = 36
  ERROR_HANDLE_EOF* = 38
  ERROR_HANDLE_DISK_FULL* = 39
  ERROR_NOT_SUPPORTED* = 50
  ERROR_REM_NOT_LIST* = 51
  ERROR_DUP_NAME* = 52
  ERROR_BAD_NETPATH* = 53
  ERROR_NETWORK_BUSY* = 54
  ERROR_DEV_NOT_EXIST* = 55
  ERROR_TOO_MANY_CMDS* = 56
  ERROR_ADAP_HDW_ERR* = 57
  ERROR_BAD_NET_RESP* = 58
  ERROR_UNEXP_NET_ERR* = 59
  ERROR_BAD_REM_ADAP* = 60
  ERROR_PRINTQ_FULL* = 61
  ERROR_NO_SPOOL_SPACE* = 62
  ERROR_PRINT_CANCELLED* = 63
  ERROR_NETNAME_DELETED* = 64
  ERROR_NETWORK_ACCESS_DENIED* = 65
  ERROR_BAD_DEV_TYPE* = 66
  ERROR_BAD_NET_NAME* = 67
  ERROR_TOO_MANY_NAMES* = 68
  ERROR_TOO_MANY_SESS* = 69
  ERROR_SHARING_PAUSED* = 70
  ERROR_REQ_NOT_ACCEP* = 71
  ERROR_REDIR_PAUSED* = 72
  ERROR_FILE_EXISTS* = 80
  ERROR_CANNOT_MAKE* = 82
  ERROR_FAIL_I24* = 83
  ERROR_OUT_OF_STRUCTURES* = 84
  ERROR_ALREADY_ASSIGNED* = 85
  ERROR_INVALID_PASSWORD* = 86
  ERROR_INVALID_PARAMETER* = 87
  ERROR_NET_WRITE_FAULT* = 88
  ERROR_NO_PROC_SLOTS* = 89
  ERROR_TOO_MANY_SEMAPHORES* = 100
  ERROR_EXCL_SEM_ALREADY_OWNED* = 101
  ERROR_SEM_IS_SET* = 102
  ERROR_TOO_MANY_SEM_REQUESTS* = 103
  ERROR_INVALID_AT_INTERRUPT_TIME* = 104
  ERROR_SEM_OWNER_DIED* = 105
  ERROR_SEM_USER_LIMIT* = 106
  ERROR_DISK_CHANGE* = 107
  ERROR_DRIVE_LOCKED* = 108
  ERROR_BROKEN_PIPE* = 109
  ERROR_OPEN_FAILED* = 110
  ERROR_BUFFER_OVERFLOW* = 111
  ERROR_DISK_FULL* = 112
  ERROR_NO_MORE_SEARCH_HANDLES* = 113
  ERROR_INVALID_TARGET_HANDLE* = 114
  ERROR_INVALID_CATEGORY* = 117
  ERROR_INVALID_VERIFY_SWITCH* = 118
  ERROR_BAD_DRIVER_LEVEL* = 119
  ERROR_CALL_NOT_IMPLEMENTED* = 120
  ERROR_SEM_TIMEOUT* = 121
  ERROR_INSUFFICIENT_BUFFER* = 122
  ERROR_INVALID_NAME* = 123
  ERROR_INVALID_LEVEL* = 124
  ERROR_NO_VOLUME_LABEL* = 125
  ERROR_MOD_NOT_FOUND* = 126
  ERROR_PROC_NOT_FOUND* = 127
  ERROR_WAIT_NO_CHILDREN* = 128
  ERROR_CHILD_NOT_COMPLETE* = 129
  ERROR_DIRECT_ACCESS_HANDLE* = 130
  ERROR_NEGATIVE_SEEK* = 131
  ERROR_SEEK_ON_DEVICE* = 132
  ERROR_IS_JOIN_TARGET* = 133
  ERROR_IS_JOINED* = 134
  ERROR_IS_SUBSTED* = 135
  ERROR_NOT_JOINED* = 136
  ERROR_NOT_SUBSTED* = 137
  ERROR_JOIN_TO_JOIN* = 138
  ERROR_SUBST_TO_SUBST* = 139
  ERROR_JOIN_TO_SUBST* = 140
  ERROR_SUBST_TO_JOIN* = 141
  ERROR_BUSY_DRIVE* = 142
  ERROR_SAME_DRIVE* = 143
  ERROR_DIR_NOT_ROOT* = 144
  ERROR_DIR_NOT_EMPTY* = 145
  ERROR_IS_SUBST_PATH* = 146
  ERROR_IS_JOIN_PATH* = 147
  ERROR_PATH_BUSY* = 148
  ERROR_IS_SUBST_TARGET* = 149
  ERROR_SYSTEM_TRACE* = 150
  ERROR_INVALID_EVENT_COUNT* = 151
  ERROR_TOO_MANY_MUXWAITERS* = 152
  ERROR_INVALID_LIST_FORMAT* = 153
  ERROR_LABEL_TOO_LONG* = 154
  ERROR_TOO_MANY_TCBS* = 155
  ERROR_SIGNAL_REFUSED* = 156
  ERROR_DISCARDED* = 157
  ERROR_NOT_LOCKED* = 158
  ERROR_BAD_THREADID_ADDR* = 159
  ERROR_BAD_ARGUMENTS* = 160
  ERROR_BAD_PATHNAME* = 161
  ERROR_SIGNAL_PENDING* = 162
  ERROR_MAX_THRDS_REACHED* = 164
  ERROR_LOCK_FAILED* = 167
  ERROR_BUSY* = 170
  ERROR_CANCEL_VIOLATION* = 173
  ERROR_ATOMIC_LOCKS_NOT_SUPPORTED* = 174
  ERROR_INVALID_SEGMENT_NUMBER* = 180
  ERROR_INVALID_ORDINAL* = 182
  ERROR_ALREADY_EXISTS* = 183
  ERROR_INVALID_FLAG_NUMBER* = 186
  ERROR_SEM_NOT_FOUND* = 187
  ERROR_INVALID_STARTING_CODESEG* = 188
  ERROR_INVALID_STACKSEG* = 189
  ERROR_INVALID_MODULETYPE* = 190
  ERROR_INVALID_EXE_SIGNATURE* = 191
  ERROR_EXE_MARKED_INVALID* = 192
  ERROR_BAD_EXE_FORMAT* = 193
  ERROR_ITERATED_DATA_EXCEEDS_64k* = 194
  ERROR_INVALID_MINALLOCSIZE* = 195
  ERROR_DYNLINK_FROM_INVALID_RING* = 196
  ERROR_IOPL_NOT_ENABLED* = 197
  ERROR_INVALID_SEGDPL* = 198
  ERROR_AUTODATASEG_EXCEEDS_64k* = 199
  ERROR_RING2SEG_MUST_BE_MOVABLE* = 200
  ERROR_RELOC_CHAIN_XEEDS_SEGLIM* = 201
  ERROR_INFLOOP_IN_RELOC_CHAIN* = 202
  ERROR_ENVVAR_NOT_FOUND* = 203
  ERROR_NO_SIGNAL_SENT* = 205
  ERROR_FILENAME_EXCED_RANGE* = 206
  ERROR_RING2_STACK_IN_USE* = 207
  ERROR_META_EXPANSION_TOO_LONG* = 208
  ERROR_INVALID_SIGNAL_NUMBER* = 209
  ERROR_THREAD_1_INACTIVE* = 210
  ERROR_LOCKED* = 212
  ERROR_TOO_MANY_MODULES* = 214
  ERROR_NESTING_NOT_ALLOWED* = 215
  ERROR_EXE_MACHINE_TYPE_MISMATCH* = 216
  ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY* = 217
  ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY* = 218
  ERROR_BAD_PIPE* = 230
  ERROR_PIPE_BUSY* = 231
  ERROR_NO_DATA* = 232
  ERROR_PIPE_NOT_CONNECTED* = 233
  ERROR_MORE_DATA* = 234
  ERROR_VC_DISCONNECTED* = 240
  ERROR_INVALID_EA_NAME* = 254
  ERROR_EA_LIST_INCONSISTENT* = 255
  WAIT_TIMEOUT* = 258
  ERROR_NO_MORE_ITEMS* = 259
  ERROR_CANNOT_COPY* = 266
  ERROR_DIRECTORY* = 267
  ERROR_EAS_DIDNT_FIT* = 275
  ERROR_EA_FILE_CORRUPT* = 276
  ERROR_EA_TABLE_FULL* = 277
  ERROR_INVALID_EA_HANDLE* = 278
  ERROR_EAS_NOT_SUPPORTED* = 282
  ERROR_NOT_OWNER* = 288
  ERROR_TOO_MANY_POSTS* = 298
  ERROR_PARTIAL_COPY* = 299
  ERROR_OPLOCK_NOT_GRANTED* = 300
  ERROR_INVALID_OPLOCK_PROTOCOL* = 301
  ERROR_DISK_TOO_FRAGMENTED* = 302
  ERROR_DELETE_PENDING* = 303
  ERROR_MR_MID_NOT_FOUND* = 317
  ERROR_SCOPE_NOT_FOUND* = 318
  ERROR_INVALID_ADDRESS* = 487
  ERROR_ARITHMETIC_OVERFLOW* = 534
  ERROR_PIPE_CONNECTED* = 535
  ERROR_PIPE_LISTENING* = 536
  ERROR_EA_ACCESS_DENIED* = 994
  ERROR_OPERATION_ABORTED* = 995
  ERROR_IO_INCOMPLETE* = 996
  ERROR_IO_PENDING* = 997
  ERROR_NOACCESS* = 998
  ERROR_SWAPERROR* = 999
  ERROR_STACK_OVERFLOW* = 1001
  ERROR_INVALID_MESSAGE* = 1002
  ERROR_CAN_NOT_COMPLETE* = 1003
  ERROR_INVALID_FLAGS* = 1004
  ERROR_UNRECOGNIZED_VOLUME* = 1005
  ERROR_FILE_INVALID* = 1006
  ERROR_FULLSCREEN_MODE* = 1007
  ERROR_NO_TOKEN* = 1008
  ERROR_BADDB* = 1009
  ERROR_BADKEY* = 1010
  ERROR_CANTOPEN* = 1011
  ERROR_CANTREAD* = 1012
  ERROR_CANTWRITE* = 1013
  ERROR_REGISTRY_RECOVERED* = 1014
  ERROR_REGISTRY_CORRUPT* = 1015
  ERROR_REGISTRY_IO_FAILED* = 1016
  ERROR_NOT_REGISTRY_FILE* = 1017
  ERROR_KEY_DELETED* = 1018
  ERROR_NO_LOG_SPACE* = 1019
  ERROR_KEY_HAS_CHILDREN* = 1020
  ERROR_CHILD_MUST_BE_VOLATILE* = 1021
  ERROR_NOTIFY_ENUM_DIR* = 1022
  ERROR_DEPENDENT_SERVICES_RUNNING* = 1051
  ERROR_INVALID_SERVICE_CONTROL* = 1052
  ERROR_SERVICE_REQUEST_TIMEOUT* = 1053
  ERROR_SERVICE_NO_THREAD* = 1054
  ERROR_SERVICE_DATABASE_LOCKED* = 1055
  ERROR_SERVICE_ALREADY_RUNNING* = 1056
  ERROR_INVALID_SERVICE_ACCOUNT* = 1057
  ERROR_SERVICE_DISABLED* = 1058
  ERROR_CIRCULAR_DEPENDENCY* = 1059
  ERROR_SERVICE_DOES_NOT_EXIST* = 1060
  ERROR_SERVICE_CANNOT_ACCEPT_CTRL* = 1061
  ERROR_SERVICE_NOT_ACTIVE* = 1062
  ERROR_FAILED_SERVICE_CONTROLLER_CONNECT* = 1063
  ERROR_EXCEPTION_IN_SERVICE* = 1064
  ERROR_DATABASE_DOES_NOT_EXIST* = 1065
  ERROR_SERVICE_SPECIFIC_ERROR* = 1066
  ERROR_PROCESS_ABORTED* = 1067
  ERROR_SERVICE_DEPENDENCY_FAIL* = 1068
  ERROR_SERVICE_LOGON_FAILED* = 1069
  ERROR_SERVICE_START_HANG* = 1070
  ERROR_INVALID_SERVICE_LOCK* = 1071
  ERROR_SERVICE_MARKED_FOR_DELETE* = 1072
  ERROR_SERVICE_EXISTS* = 1073
  ERROR_ALREADY_RUNNING_LKG* = 1074
  ERROR_SERVICE_DEPENDENCY_DELETED* = 1075
  ERROR_BOOT_ALREADY_ACCEPTED* = 1076
  ERROR_SERVICE_NEVER_STARTED* = 1077
  ERROR_DUPLICATE_SERVICE_NAME* = 1078
  ERROR_DIFFERENT_SERVICE_ACCOUNT* = 1079
  ERROR_CANNOT_DETECT_DRIVER_FAILURE* = 1080
  ERROR_CANNOT_DETECT_PROCESS_ABORT* = 1081
  ERROR_NO_RECOVERY_PROGRAM* = 1082
  ERROR_SERVICE_NOT_IN_EXE* = 1083
  ERROR_NOT_SAFEBOOT_SERVICE* = 1084
  ERROR_END_OF_MEDIA* = 1100
  ERROR_FILEMARK_DETECTED* = 1101
  ERROR_BEGINNING_OF_MEDIA* = 1102
  ERROR_SETMARK_DETECTED* = 1103
  ERROR_NO_DATA_DETECTED* = 1104
  ERROR_PARTITION_FAILURE* = 1105
  ERROR_INVALID_BLOCK_LENGTH* = 1106
  ERROR_DEVICE_NOT_PARTITIONED* = 1107
  ERROR_UNABLE_TO_LOCK_MEDIA* = 1108
  ERROR_UNABLE_TO_UNLOAD_MEDIA* = 1109
  ERROR_MEDIA_CHANGED* = 1110
  ERROR_BUS_RESET* = 1111
  ERROR_NO_MEDIA_IN_DRIVE* = 1112
  ERROR_NO_UNICODE_TRANSLATION* = 1113
  ERROR_DLL_INIT_FAILED* = 1114
  ERROR_SHUTDOWN_IN_PROGRESS* = 1115
  ERROR_NO_SHUTDOWN_IN_PROGRESS* = 1116
  ERROR_IO_DEVICE* = 1117
  ERROR_SERIAL_NO_DEVICE* = 1118
  ERROR_IRQ_BUSY* = 1119
  ERROR_MORE_WRITES* = 1120
  ERROR_COUNTER_TIMEOUT* = 1121
  ERROR_FLOPPY_ID_MARK_NOT_FOUND* = 1122
  ERROR_FLOPPY_WRONG_CYLINDER* = 1123
  ERROR_FLOPPY_UNKNOWN_ERROR* = 1124
  ERROR_FLOPPY_BAD_REGISTERS* = 1125
  ERROR_DISK_RECALIBRATE_FAILED* = 1126
  ERROR_DISK_OPERATION_FAILED* = 1127
  ERROR_DISK_RESET_FAILED* = 1128
  ERROR_EOM_OVERFLOW* = 1129
  ERROR_NOT_ENOUGH_SERVER_MEMORY* = 1130
  ERROR_POSSIBLE_DEADLOCK* = 1131
  ERROR_MAPPED_ALIGNMENT* = 1132
  ERROR_SET_POWER_STATE_VETOED* = 1140
  ERROR_SET_POWER_STATE_FAILED* = 1141
  ERROR_TOO_MANY_LINKS* = 1142
  ERROR_OLD_WIN_VERSION* = 1150
  ERROR_APP_WRONG_OS* = 1151
  ERROR_SINGLE_INSTANCE_APP* = 1152
  ERROR_RMODE_APP* = 1153
  ERROR_INVALID_DLL* = 1154
  ERROR_NO_ASSOCIATION* = 1155
  ERROR_DDE_FAIL* = 1156
  ERROR_DLL_NOT_FOUND* = 1157
  ERROR_NO_MORE_USER_HANDLES* = 1158
  ERROR_MESSAGE_SYNC_ONLY* = 1159
  ERROR_SOURCE_ELEMENT_EMPTY* = 1160
  ERROR_DESTINATION_ELEMENT_FULL* = 1161
  ERROR_ILLEGAL_ELEMENT_ADDRESS* = 1162
  ERROR_MAGAZINE_NOT_PRESENT* = 1163
  ERROR_DEVICE_REINITIALIZATION_NEEDED* = 1164
  ERROR_DEVICE_REQUIRES_CLEANING* = 1165
  ERROR_DEVICE_DOOR_OPEN* = 1166
  ERROR_DEVICE_NOT_CONNECTED* = 1167
  ERROR_NOT_FOUND* = 1168
  ERROR_NO_MATCH* = 1169
  ERROR_SET_NOT_FOUND* = 1170
  ERROR_POINT_NOT_FOUND* = 1171
  ERROR_NO_TRACKING_SERVICE* = 1172
  ERROR_NO_VOLUME_ID* = 1173
  ERROR_UNABLE_TO_REMOVE_REPLACED* = 1175
  ERROR_UNABLE_TO_MOVE_REPLACEMENT* = 1176
  ERROR_UNABLE_TO_MOVE_REPLACEMENT_2* = 1177
  ERROR_JOURNAL_DELETE_IN_PROGRESS* = 1178
  ERROR_JOURNAL_NOT_ACTIVE* = 1179
  ERROR_POTENTIAL_FILE_FOUND* = 1180
  ERROR_JOURNAL_ENTRY_DELETED* = 1181
  ERROR_BAD_DEVICE* = 1200
  ERROR_CONNECTION_UNAVAIL* = 1201
  ERROR_DEVICE_ALREADY_REMEMBERED* = 1202
  ERROR_NO_NET_OR_BAD_PATH* = 1203
  ERROR_BAD_PROVIDER* = 1204
  ERROR_CANNOT_OPEN_PROFILE* = 1205
  ERROR_BAD_PROFILE* = 1206
  ERROR_NOT_CONTAINER* = 1207
  ERROR_EXTENDED_ERROR* = 1208
  ERROR_INVALID_GROUPNAME* = 1209
  ERROR_INVALID_COMPUTERNAME* = 1210
  ERROR_INVALID_EVENTNAME* = 1211
  ERROR_INVALID_DOMAINNAME* = 1212
  ERROR_INVALID_SERVICENAME* = 1213
  ERROR_INVALID_NETNAME* = 1214
  ERROR_INVALID_SHARENAME* = 1215
  ERROR_INVALID_PASSWORDNAME* = 1216
  ERROR_INVALID_MESSAGENAME* = 1217
  ERROR_INVALID_MESSAGEDEST* = 1218
  ERROR_SESSION_CREDENTIAL_CONFLICT* = 1219
  ERROR_REMOTE_SESSION_LIMIT_EXCEEDED* = 1220
  ERROR_DUP_DOMAINNAME* = 1221
  ERROR_NO_NETWORK* = 1222
  ERROR_CANCELLED* = 1223
  ERROR_USER_MAPPED_FILE* = 1224
  ERROR_CONNECTION_REFUSED* = 1225
  ERROR_GRACEFUL_DISCONNECT* = 1226
  ERROR_ADDRESS_ALREADY_ASSOCIATED* = 1227
  ERROR_ADDRESS_NOT_ASSOCIATED* = 1228
  ERROR_CONNECTION_INVALID* = 1229
  ERROR_CONNECTION_ACTIVE* = 1230
  ERROR_NETWORK_UNREACHABLE* = 1231
  ERROR_HOST_UNREACHABLE* = 1232
  ERROR_PROTOCOL_UNREACHABLE* = 1233
  ERROR_PORT_UNREACHABLE* = 1234
  ERROR_REQUEST_ABORTED* = 1235
  ERROR_CONNECTION_ABORTED* = 1236
  ERROR_RETRY* = 1237
  ERROR_CONNECTION_COUNT_LIMIT* = 1238
  ERROR_LOGIN_TIME_RESTRICTION* = 1239
  ERROR_LOGIN_WKSTA_RESTRICTION* = 1240
  ERROR_INCORRECT_ADDRESS* = 1241
  ERROR_ALREADY_REGISTERED* = 1242
  ERROR_SERVICE_NOT_FOUND* = 1243
  ERROR_NOT_AUTHENTICATED* = 1244
  ERROR_NOT_LOGGED_ON* = 1245
  ERROR_CONTINUE* = 1246
  ERROR_ALREADY_INITIALIZED* = 1247
  ERROR_NO_MORE_DEVICES* = 1248
  ERROR_NO_SUCH_SITE* = 1249
  ERROR_DOMAIN_CONTROLLER_EXISTS* = 1250
  ERROR_ONLY_IF_CONNECTED* = 1251
  ERROR_OVERRIDE_NOCHANGES* = 1252
  ERROR_BAD_USER_PROFILE* = 1253
  ERROR_NOT_SUPPORTED_ON_SBS* = 1254
  ERROR_SERVER_SHUTDOWN_IN_PROGRESS* = 1255
  ERROR_HOST_DOWN* = 1256
  ERROR_NON_ACCOUNT_SID* = 1257
  ERROR_NON_DOMAIN_SID* = 1258
  ERROR_APPHELP_BLOCK* = 1259
  ERROR_ACCESS_DISABLED_BY_POLICY* = 1260
  ERROR_REG_NAT_CONSUMPTION* = 1261
  ERROR_CSCSHARE_OFFLINE* = 1262
  ERROR_PKINIT_FAILURE* = 1263
  ERROR_SMARTCARD_SUBSYSTEM_FAILURE* = 1264
  ERROR_DOWNGRADE_DETECTED* = 1265
  SEC_E_SMARTCARD_CERT_REVOKED* = 1266
  SEC_E_ISSUING_CA_UNTRUSTED* = 1267
  SEC_E_REVOCATION_OFFLINE_C* = 1268
  SEC_E_PKINIT_CLIENT_FAILUR* = 1269
  SEC_E_SMARTCARD_CERT_EXPIRED* = 1270
  ERROR_MACHINE_LOCKED* = 1271
  ERROR_CALLBACK_SUPPLIED_INVALID_DATA* = 1273
  ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED* = 1274
  ERROR_DRIVER_BLOCKED* = 1275
  ERROR_INVALID_IMPORT_OF_NON_DLL* = 1276
  ERROR_ACCESS_DISABLED_WEBBLADE* = 1277
  ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER* = 1278
  ERROR_RECOVERY_FAILURE* = 1279
  ERROR_ALREADY_FIBER* = 1280
  ERROR_ALREADY_THREAD* = 1281
  ERROR_STACK_BUFFER_OVERRUN* = 1282
  ERROR_PARAMETER_QUOTA_EXCEEDED* = 1283
  ERROR_DEBUGGER_INACTIVE* = 1284
  ERROR_NOT_ALL_ASSIGNED* = 1300
  ERROR_SOME_NOT_MAPPED* = 1301
  ERROR_NO_QUOTAS_FOR_ACCOUNT* = 1302
  ERROR_LOCAL_USER_SESSION_KEY* = 1303
  ERROR_NULL_LM_PASSWORD* = 1304
  ERROR_UNKNOWN_REVISION* = 1305
  ERROR_REVISION_MISMATCH* = 1306
  ERROR_INVALID_OWNER* = 1307
  ERROR_INVALID_PRIMARY_GROUP* = 1308
  ERROR_NO_IMPERSONATION_TOKEN* = 1309
  ERROR_CANT_DISABLE_MANDATORY* = 1310
  ERROR_NO_LOGON_SERVERS* = 1311
  ERROR_NO_SUCH_LOGON_SESSION* = 1312
  ERROR_NO_SUCH_PRIVILEGE* = 1313
  ERROR_PRIVILEGE_NOT_HELD* = 1314
  ERROR_INVALID_ACCOUNT_NAME* = 1315
  ERROR_USER_EXISTS* = 1316
  ERROR_NO_SUCH_USER* = 1317
  ERROR_GROUP_EXISTS* = 1318
  ERROR_NO_SUCH_GROUP* = 1319
  ERROR_MEMBER_IN_GROUP* = 1320
  ERROR_MEMBER_NOT_IN_GROUP* = 1321
  ERROR_LAST_ADMIN* = 1322
  ERROR_WRONG_PASSWORD* = 1323
  ERROR_ILL_FORMED_PASSWORD* = 1324
  ERROR_PASSWORD_RESTRICTION* = 1325
  ERROR_LOGON_FAILURE* = 1326
  ERROR_ACCOUNT_RESTRICTION* = 1327
  ERROR_INVALID_LOGON_HOURS* = 1328
  ERROR_INVALID_WORKSTATION* = 1329
  ERROR_PASSWORD_EXPIRED* = 1330
  ERROR_ACCOUNT_DISABLED* = 1331
  ERROR_NONE_MAPPED* = 1332
  ERROR_TOO_MANY_LUIDS_REQUESTED* = 1333
  ERROR_LUIDS_EXHAUSTED* = 1334
  ERROR_INVALID_SUB_AUTHORITY* = 1335
  ERROR_INVALID_ACL* = 1336
  ERROR_INVALID_SID* = 1337
  ERROR_INVALID_SECURITY_DESCR* = 1338
  ERROR_BAD_INHERITANCE_ACL* = 1340
  ERROR_SERVER_DISABLED* = 1341
  ERROR_SERVER_NOT_DISABLED* = 1342
  ERROR_INVALID_ID_AUTHORITY* = 1343
  ERROR_ALLOTTED_SPACE_EXCEEDED* = 1344
  ERROR_INVALID_GROUP_ATTRIBUTES* = 1345
  ERROR_BAD_IMPERSONATION_LEVEL* = 1346
  ERROR_CANT_OPEN_ANONYMOUS* = 1347
  ERROR_BAD_VALIDATION_CLASS* = 1348
  ERROR_BAD_TOKEN_TYPE* = 1349
  ERROR_NO_SECURITY_ON_OBJECT* = 1350
  ERROR_CANT_ACCESS_DOMAIN_INFO* = 1351
  ERROR_INVALID_SERVER_STATE* = 1352
  ERROR_INVALID_DOMAIN_STATE* = 1353
  ERROR_INVALID_DOMAIN_ROLE* = 1354
  ERROR_NO_SUCH_DOMAIN* = 1355
  ERROR_DOMAIN_EXISTS* = 1356
  ERROR_DOMAIN_LIMIT_EXCEEDED* = 1357
  ERROR_INTERNAL_DB_CORRUPTION* = 1358
  ERROR_INTERNAL_ERROR* = 1359
  ERROR_GENERIC_NOT_MAPPED* = 1360
  ERROR_BAD_DESCRIPTOR_FORMAT* = 1361
  ERROR_NOT_LOGON_PROCESS* = 1362
  ERROR_LOGON_SESSION_EXISTS* = 1363
  ERROR_NO_SUCH_PACKAGE* = 1364
  ERROR_BAD_LOGON_SESSION_STATE* = 1365
  ERROR_LOGON_SESSION_COLLISION* = 1366
  ERROR_INVALID_LOGON_TYPE* = 1367
  ERROR_CANNOT_IMPERSONATE* = 1368
  ERROR_RXACT_INVALID_STATE* = 1369
  ERROR_RXACT_COMMIT_FAILURE* = 1370
  ERROR_SPECIAL_ACCOUNT* = 1371
  ERROR_SPECIAL_GROUP* = 1372
  ERROR_SPECIAL_USER* = 1373
  ERROR_MEMBERS_PRIMARY_GROUP* = 1374
  ERROR_TOKEN_ALREADY_IN_USE* = 1375
  ERROR_NO_SUCH_ALIAS* = 1376
  ERROR_MEMBER_NOT_IN_ALIAS* = 1377
  ERROR_MEMBER_IN_ALIAS* = 1378
  ERROR_ALIAS_EXISTS* = 1379
  ERROR_LOGON_NOT_GRANTED* = 1380
  ERROR_TOO_MANY_SECRETS* = 1381
  ERROR_SECRET_TOO_LONG* = 1382
  ERROR_INTERNAL_DB_ERROR* = 1383
  ERROR_TOO_MANY_CONTEXT_IDS* = 1384
  ERROR_LOGON_TYPE_NOT_GRANTED* = 1385
  ERROR_NT_CROSS_ENCRYPTION_REQUIRED* = 1386
  ERROR_NO_SUCH_MEMBER* = 1387
  ERROR_INVALID_MEMBER* = 1388
  ERROR_TOO_MANY_SIDS* = 1389
  ERROR_LM_CROSS_ENCRYPTION_REQUIRED* = 1390
  ERROR_NO_INHERITANCE* = 1391
  ERROR_FILE_CORRUPT* = 1392
  ERROR_DISK_CORRUPT* = 1393
  ERROR_NO_USER_SESSION_KEY* = 1394
  ERROR_LICENSE_QUOTA_EXCEEDED* = 1395
  ERROR_WRONG_TARGET_NAME* = 1396
  ERROR_MUTUAL_AUTH_FAILED* = 1397
  ERROR_TIME_SKEW* = 1398
  ERROR_CURRENT_DOMAIN_NOT_ALLOWED* = 1399
  ERROR_INVALID_WINDOW_HANDLE* = 1400
  ERROR_INVALID_MENU_HANDLE* = 1401
  ERROR_INVALID_CURSOR_HANDLE* = 1402
  ERROR_INVALID_ACCEL_HANDLE* = 1403
  ERROR_INVALID_HOOK_HANDLE* = 1404
  ERROR_INVALID_DWP_HANDLE* = 1405
  ERROR_TLW_WITH_WSCHILD* = 1406
  ERROR_CANNOT_FIND_WND_CLASS* = 1407
  ERROR_WINDOW_OF_OTHER_THREAD* = 1408
  ERROR_HOTKEY_ALREADY_REGISTERED* = 1409
  ERROR_CLASS_ALREADY_EXISTS* = 1410
  ERROR_CLASS_DOES_NOT_EXIST* = 1411
  ERROR_CLASS_HAS_WINDOWS* = 1412
  ERROR_INVALID_INDEX* = 1413
  ERROR_INVALID_ICON_HANDLE* = 1414
  ERROR_PRIVATE_DIALOG_INDEX* = 1415
  ERROR_LISTBOX_ID_NOT_FOUND* = 1416
  ERROR_NO_WILDCARD_CHARACTERS* = 1417
  ERROR_CLIPBOARD_NOT_OPEN* = 1418
  ERROR_HOTKEY_NOT_REGISTERED* = 1419
  ERROR_WINDOW_NOT_DIALOG* = 1420
  ERROR_CONTROL_ID_NOT_FOUND* = 1421
  ERROR_INVALID_COMBOBOX_MESSAGE* = 1422
  ERROR_WINDOW_NOT_COMBOBOX* = 1423
  ERROR_INVALID_EDIT_HEIGHT* = 1424
  ERROR_DC_NOT_FOUND* = 1425
  ERROR_INVALID_HOOK_FILTER* = 1426
  ERROR_INVALID_FILTER_PROC* = 1427
  ERROR_HOOK_NEEDS_HMOD* = 1428
  ERROR_GLOBAL_ONLY_HOOK* = 1429
  ERROR_JOURNAL_HOOK_SET* = 1430
  ERROR_HOOK_NOT_INSTALLED* = 1431
  ERROR_INVALID_LB_MESSAGE* = 1432
  ERROR_SETCOUNT_ON_BAD_LB* = 1433
  ERROR_LB_WITHOUT_TABSTOPS* = 1434
  ERROR_DESTROY_OBJECT_OF_OTHER_THREAD* = 1435
  ERROR_CHILD_WINDOW_MENU* = 1436
  ERROR_NO_SYSTEM_MENU* = 1437
  ERROR_INVALID_MSGBOX_STYLE* = 1438
  ERROR_INVALID_SPI_VALUE* = 1439
  ERROR_SCREEN_ALREADY_LOCKED* = 1440
  ERROR_HWNDS_HAVE_DIFF_PARENT* = 1441
  ERROR_NOT_CHILD_WINDOW* = 1442
  ERROR_INVALID_GW_COMMAND* = 1443
  ERROR_INVALID_THREAD_ID* = 1444
  ERROR_NON_MDICHILD_WINDOW* = 1445
  ERROR_POPUP_ALREADY_ACTIVE* = 1446
  ERROR_NO_SCROLLBARS* = 1447
  ERROR_INVALID_SCROLLBAR_RANGE* = 1448
  ERROR_INVALID_SHOWWIN_COMMAND* = 1449
  ERROR_NO_SYSTEM_RESOURCES* = 1450
  ERROR_NONPAGED_SYSTEM_RESOURCES* = 1451
  ERROR_PAGED_SYSTEM_RESOURCES* = 1452
  ERROR_WORKING_SET_QUOTA* = 1453
  ERROR_PAGEFILE_QUOTA* = 1454
  ERROR_COMMITMENT_LIMIT* = 1455
  ERROR_MENU_ITEM_NOT_FOUND* = 1456
  ERROR_INVALID_KEYBOARD_HANDLE* = 1457
  ERROR_HOOK_TYPE_NOT_ALLOWED* = 1458
  ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION* = 1459
  ERROR_TIMEOUT* = 1460
  ERROR_INVALID_MONITOR_HANDLE* = 1461
  ERROR_EVENTLOG_FILE_CORRUPT* = 1500
  ERROR_EVENTLOG_CANT_START* = 1501
  ERROR_LOG_FILE_FULL* = 1502
  ERROR_EVENTLOG_FILE_CHANGED* = 1503
  ERROR_INSTALL_SERVICE_FAILURE* = 1601
  ERROR_INSTALL_USEREXIT* = 1602
  ERROR_INSTALL_FAILURE* = 1603
  ERROR_INSTALL_SUSPEND* = 1604
  ERROR_UNKNOWN_PRODUCT* = 1605
  ERROR_UNKNOWN_FEATURE* = 1606
  ERROR_UNKNOWN_COMPONENT* = 1607
  ERROR_UNKNOWN_PROPERTY* = 1608
  ERROR_INVALID_HANDLE_STATE* = 1609
  ERROR_BAD_CONFIGURATION* = 1610
  ERROR_INDEX_ABSENT* = 1611
  ERROR_INSTALL_SOURCE_ABSENT* = 1612
  ERROR_INSTALL_PACKAGE_VERSION* = 1613
  ERROR_PRODUCT_UNINSTALLED* = 1614
  ERROR_BAD_QUERY_SYNTAX* = 1615
  ERROR_INVALID_FIELD* = 1616
  ERROR_DEVICE_REMOVED* = 1617
  ERROR_INSTALL_ALREADY_RUNNING* = 1618
  ERROR_INSTALL_PACKAGE_OPEN_FAILED* = 1619
  ERROR_INSTALL_PACKAGE_INVALID* = 1620
  ERROR_INSTALL_UI_FAILURE* = 1621
  ERROR_INSTALL_LOG_FAILURE* = 1622
  ERROR_INSTALL_LANGUAGE_UNSUPPORTED* = 1623
  ERROR_INSTALL_TRANSFORM_FAILURE* = 1624
  ERROR_INSTALL_PACKAGE_REJECTED* = 1625
  ERROR_FUNCTION_NOT_CALLED* = 1626
  ERROR_FUNCTION_FAILED* = 1627
  ERROR_INVALID_TABLE* = 1628
  ERROR_DATATYPE_MISMATCH* = 1629
  ERROR_UNSUPPORTED_TYPE* = 1630
  ERROR_CREATE_FAILED* = 1631
  ERROR_INSTALL_TEMP_UNWRITABLE* = 1632
  ERROR_INSTALL_PLATFORM_UNSUPPORTED* = 1633
  ERROR_INSTALL_NOTUSED* = 1634
  ERROR_PATCH_PACKAGE_OPEN_FAILED* = 1635
  ERROR_PATCH_PACKAGE_INVALID* = 1636
  ERROR_PATCH_PACKAGE_UNSUPPORTED* = 1637
  ERROR_PRODUCT_VERSION* = 1638
  ERROR_INVALID_COMMAND_LINE* = 1639
  ERROR_INSTALL_REMOTE_DISALLOWED* = 1640
  ERROR_SUCCESS_REBOOT_INITIATED* = 1641
  ERROR_PATCH_TARGET_NOT_FOUND* = 1642
  ERROR_PATCH_PACKAGE_REJECTED* = 1643
  ERROR_INSTALL_TRANSFORM_REJECTED* = 1644
  ERROR_INSTALL_REMOTE_PROHIBITED* = 1645
  RPC_S_INVALID_STRING_BINDING* = 1700
  RPC_S_WRONG_KIND_OF_BINDING* = 1701
  RPC_S_INVALID_BINDING* = 1702
  RPC_S_PROTSEQ_NOT_SUPPORTED* = 1703
  RPC_S_INVALID_RPC_PROTSEQ* = 1704
  RPC_S_INVALID_STRING_UUID* = 1705
  RPC_S_INVALID_ENDPOINT_FORMAT* = 1706
  RPC_S_INVALID_NET_ADDR* = 1707
  RPC_S_NO_ENDPOINT_FOUND* = 1708
  RPC_S_INVALID_TIMEOUT* = 1709
  RPC_S_OBJECT_NOT_FOUND* = 1710
  RPC_S_ALREADY_REGISTERED* = 1711
  RPC_S_TYPE_ALREADY_REGISTERED* = 1712
  RPC_S_ALREADY_LISTENING* = 1713
  RPC_S_NO_PROTSEQS_REGISTERED* = 1714
  RPC_S_NOT_LISTENING* = 1715
  RPC_S_UNKNOWN_MGR_TYPE* = 1716
  RPC_S_UNKNOWN_IF* = 1717
  RPC_S_NO_BINDINGS* = 1718
  RPC_S_NO_PROTSEQS* = 1719
  RPC_S_CANT_CREATE_ENDPOINT* = 1720
  RPC_S_OUT_OF_RESOURCES* = 1721
  RPC_S_SERVER_UNAVAILABLE* = 1722
  RPC_S_SERVER_TOO_BUSY* = 1723
  RPC_S_INVALID_NETWORK_OPTIONS* = 1724
  RPC_S_NO_CALL_ACTIVE* = 1725
  RPC_S_CALL_FAILED* = 1726
  RPC_S_CALL_FAILED_DNE* = 1727
  RPC_S_PROTOCOL_ERROR* = 1728
  RPC_S_UNSUPPORTED_TRANS_SYN* = 1730
  RPC_S_UNSUPPORTED_TYPE* = 1732
  RPC_S_INVALID_TAG* = 1733
  RPC_S_INVALID_BOUND* = 1734
  RPC_S_NO_ENTRY_NAME* = 1735
  RPC_S_INVALID_NAME_SYNTAX* = 1736
  RPC_S_UNSUPPORTED_NAME_SYNTAX* = 1737
  RPC_S_UUID_NO_ADDRESS* = 1739
  RPC_S_DUPLICATE_ENDPOINT* = 1740
  RPC_S_UNKNOWN_AUTHN_TYPE* = 1741
  RPC_S_MAX_CALLS_TOO_SMALL* = 1742
  RPC_S_STRING_TOO_LONG* = 1743
  RPC_S_PROTSEQ_NOT_FOUND* = 1744
  RPC_S_PROCNUM_OUT_OF_RANGE* = 1745
  RPC_S_BINDING_HAS_NO_AUTH* = 1746
  RPC_S_UNKNOWN_AUTHN_SERVICE* = 1747
  RPC_S_UNKNOWN_AUTHN_LEVEL* = 1748
  RPC_S_INVALID_AUTH_IDENTITY* = 1749
  RPC_S_UNKNOWN_AUTHZ_SERVICE* = 1750
  EPT_S_INVALID_ENTRY* = 1751
  EPT_S_CANT_PERFORM_OP* = 1752
  EPT_S_NOT_REGISTERED* = 1753
  RPC_S_NOTHING_TO_EXPORT* = 1754
  RPC_S_INCOMPLETE_NAME* = 1755
  RPC_S_INVALID_VERS_OPTION* = 1756
  RPC_S_NO_MORE_MEMBERS* = 1757
  RPC_S_NOT_ALL_OBJS_UNEXPORTED* = 1758
  RPC_S_INTERFACE_NOT_FOUND* = 1759
  RPC_S_ENTRY_ALREADY_EXISTS* = 1760
  RPC_S_ENTRY_NOT_FOUND* = 1761
  RPC_S_NAME_SERVICE_UNAVAILABLE* = 1762
  RPC_S_INVALID_NAF_ID* = 1763
  RPC_S_CANNOT_SUPPORT* = 1764
  RPC_S_NO_CONTEXT_AVAILABLE* = 1765
  RPC_S_INTERNAL_ERROR* = 1766
  RPC_S_ZERO_DIVIDE* = 1767
  RPC_S_ADDRESS_ERROR* = 1768
  RPC_S_FP_DIV_ZERO* = 1769
  RPC_S_FP_UNDERFLOW* = 1770
  RPC_S_FP_OVERFLOW* = 1771
  RPC_X_NO_MORE_ENTRIES* = 1772
  RPC_X_SS_CHAR_TRANS_OPEN_FAIL* = 1773
  RPC_X_SS_CHAR_TRANS_SHORT_FILE* = 1774
  RPC_X_SS_IN_NULL_CONTEXT* = 1775
  RPC_X_SS_CONTEXT_DAMAGED* = 1777
  RPC_X_SS_HANDLES_MISMATCH* = 1778
  RPC_X_SS_CANNOT_GET_CALL_HANDLE* = 1779
  RPC_X_NULL_REF_POINTER* = 1780
  RPC_X_ENUM_VALUE_OUT_OF_RANGE* = 1781
  RPC_X_BYTE_COUNT_TOO_SMALL* = 1782
  RPC_X_BAD_STUB_DATA* = 1783
  ERROR_INVALID_USER_BUFFER* = 1784
  ERROR_UNRECOGNIZED_MEDIA* = 1785
  ERROR_NO_TRUST_LSA_SECRET* = 1786
  ERROR_NO_TRUST_SAM_ACCOUNT* = 1787
  ERROR_TRUSTED_DOMAIN_FAILURE* = 1788
  ERROR_TRUSTED_RELATIONSHIP_FAILURE* = 1789
  ERROR_TRUST_FAILURE* = 1790
  RPC_S_CALL_IN_PROGRESS* = 1791
  ERROR_NETLOGON_NOT_STARTED* = 1792
  ERROR_ACCOUNT_EXPIRED* = 1793
  ERROR_REDIRECTOR_HAS_OPEN_HANDLES* = 1794
  ERROR_PRINTER_DRIVER_ALREADY_INSTALLED* = 1795
  ERROR_UNKNOWN_PORT* = 1796
  ERROR_UNKNOWN_PRINTER_DRIVER* = 1797
  ERROR_UNKNOWN_PRINTPROCESSOR* = 1798
  ERROR_INVALID_SEPARATOR_FILE* = 1799
  ERROR_INVALID_PRIORITY* = 1800
  ERROR_INVALID_PRINTER_NAME* = 1801
  ERROR_PRINTER_ALREADY_EXISTS* = 1802
  ERROR_INVALID_PRINTER_COMMAND* = 1803
  ERROR_INVALID_DATATYPE* = 1804
  ERROR_INVALID_ENVIRONMENT* = 1805
  RPC_S_NO_MORE_BINDINGS* = 1806
  ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT* = 1807
  ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT* = 1808
  ERROR_NOLOGON_SERVER_TRUST_ACCOUNT* = 1809
  ERROR_DOMAIN_TRUST_INCONSISTENT* = 1810
  ERROR_SERVER_HAS_OPEN_HANDLES* = 1811
  ERROR_RESOURCE_DATA_NOT_FOUND* = 1812
  ERROR_RESOURCE_TYPE_NOT_FOUND* = 1813
  ERROR_RESOURCE_NAME_NOT_FOUND* = 1814
  ERROR_RESOURCE_LANG_NOT_FOUND* = 1815
  ERROR_NOT_ENOUGH_QUOTA* = 1816
  RPC_S_NO_INTERFACES* = 1817
  RPC_S_CALL_CANCELLED* = 1818
  RPC_S_BINDING_INCOMPLETE* = 1819
  RPC_S_COMM_FAILURE* = 1820
  RPC_S_UNSUPPORTED_AUTHN_LEVEL* = 1821
  RPC_S_NO_PRINC_NAME* = 1822
  RPC_S_NOT_RPC_ERROR* = 1823
  RPC_S_UUID_LOCAL_ONLY* = 1824
  RPC_S_SEC_PKG_ERROR* = 1825
  RPC_S_NOT_CANCELLED* = 1826
  RPC_X_INVALID_ES_ACTION* = 1827
  RPC_X_WRONG_ES_VERSION* = 1828
  RPC_X_WRONG_STUB_VERSION* = 1829
  RPC_X_INVALID_PIPE_OBJECT* = 1830
  RPC_X_WRONG_PIPE_ORDER* = 1831
  RPC_X_WRONG_PIPE_VERSION* = 1832
  RPC_S_GROUP_MEMBER_NOT_FOUND* = 1898
  EPT_S_CANT_CREATE* = 1899
  RPC_S_INVALID_OBJECT* = 1900
  ERROR_INVALID_TIME* = 1901
  ERROR_INVALID_FORM_NAME* = 1902
  ERROR_INVALID_FORM_SIZE* = 1903
  ERROR_ALREADY_WAITING* = 1904
  ERROR_PRINTER_DELETED* = 1905
  ERROR_INVALID_PRINTER_STATE* = 1906
  ERROR_PASSWORD_MUST_CHANGE* = 1907
  ERROR_DOMAIN_CONTROLLER_NOT_FOUND* = 1908
  ERROR_ACCOUNT_LOCKED_OUT* = 1909
  OR_INVALID_OXID* = 1910
  OR_INVALID_OID* = 1911
  OR_INVALID_SET* = 1912
  RPC_S_SEND_INCOMPLETE* = 1913
  RPC_S_INVALID_ASYNC_HANDLE* = 1914
  RPC_S_INVALID_ASYNC_CALL* = 1915
  RPC_X_PIPE_CLOSED* = 1916
  RPC_X_PIPE_DISCIPLINE_ERROR* = 1917
  RPC_X_PIPE_EMPTY* = 1918
  ERROR_NO_SITENAME* = 1919
  ERROR_CANT_ACCESS_FILE* = 1920
  ERROR_CANT_RESOLVE_FILENAME* = 1921
  RPC_S_ENTRY_TYPE_MISMATCH* = 1922
  RPC_S_NOT_ALL_OBJS_EXPORTED* = 1923
  RPC_S_INTERFACE_NOT_EXPORTED* = 1924
  RPC_S_PROFILE_NOT_ADDED* = 1925
  RPC_S_PRF_ELT_NOT_ADDED* = 1926
  RPC_S_PRF_ELT_NOT_REMOVED* = 1927
  RPC_S_GRP_ELT_NOT_ADDED* = 1928
  RPC_S_GRP_ELT_NOT_REMOVED* = 1929
  ERROR_KM_DRIVER_BLOCKED* = 1930
  ERROR_CONTEXT_EXPIRED* = 1931
  ERROR_PER_USER_TRUST_QUOTA_EXCEEDED* = 1932
  ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED* = 1933
  ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED* = 1934
  ERROR_INVALID_PIXEL_FORMAT* = 2000
  ERROR_BAD_DRIVER* = 2001
  ERROR_INVALID_WINDOW_STYLE* = 2002
  ERROR_METAFILE_NOT_SUPPORTED* = 2003
  ERROR_TRANSFORM_NOT_SUPPORTED* = 2004
  ERROR_CLIPPING_NOT_SUPPORTED* = 2005
  ERROR_INVALID_CMM* = 2010
  ERROR_INVALID_PROFILE* = 2011
  ERROR_TAG_NOT_FOUND* = 2012
  ERROR_TAG_NOT_PRESENT* = 2013
  ERROR_DUPLICATE_TAG* = 2014
  ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE* = 2015
  ERROR_PROFILE_NOT_FOUND* = 2016
  ERROR_INVALID_COLORSPACE* = 2017
  ERROR_ICM_NOT_ENABLED* = 2018
  ERROR_DELETING_ICM_XFORM* = 2019
  ERROR_INVALID_TRANSFORM* = 2020
  ERROR_COLORSPACE_MISMATCH* = 2021
  ERROR_INVALID_COLORINDEX* = 2022
  ERROR_CONNECTED_OTHER_PASSWORD* = 2108
  ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT* = 2109
  ERROR_BAD_USERNAME* = 2202
  ERROR_NOT_CONNECTED* = 2250
  ERROR_OPEN_FILES* = 2401
  ERROR_ACTIVE_CONNECTIONS* = 2402
  ERROR_DEVICE_IN_USE* = 2404
  ERROR_UNKNOWN_PRINT_MONITOR* = 3000
  ERROR_PRINTER_DRIVER_IN_USE* = 3001
  ERROR_SPOOL_FILE_NOT_FOUND* = 3002
  ERROR_SPL_NO_STARTDOC* = 3003
  ERROR_SPL_NO_ADDJOB* = 3004
  ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED* = 3005
  ERROR_PRINT_MONITOR_ALREADY_INSTALLED* = 3006
  ERROR_INVALID_PRINT_MONITOR* = 3007
  ERROR_PRINT_MONITOR_IN_USE* = 3008
  ERROR_PRINTER_HAS_JOBS_QUEUED* = 3009
  ERROR_SUCCESS_REBOOT_REQUIRED* = 3010
  ERROR_SUCCESS_RESTART_REQUIRED* = 3011
  ERROR_PRINTER_NOT_FOUND* = 3012
  ERROR_PRINTER_DRIVER_WARNED* = 3013
  ERROR_PRINTER_DRIVER_BLOCKED* = 3014
  ERROR_WINS_INTERNAL* = 4000
  ERROR_CAN_NOT_DEL_LOCAL_WINS* = 4001
  ERROR_STATIC_INIT* = 4002
  ERROR_INC_BACKUP* = 4003
  ERROR_FULL_BACKUP* = 4004
  ERROR_REC_NON_EXISTENT* = 4005
  ERROR_RPL_NOT_ALLOWED* = 4006
  ERROR_DHCP_ADDRESS_CONFLICT* = 4100
  ERROR_WMI_GUID_NOT_FOUND* = 4200
  ERROR_WMI_INSTANCE_NOT_FOUND* = 4201
  ERROR_WMI_ITEMID_NOT_FOUND* = 4202
  ERROR_WMI_TRY_AGAIN* = 4203
  ERROR_WMI_DP_NOT_FOUND* = 4204
  ERROR_WMI_UNRESOLVED_INSTANCE_REF* = 4205
  ERROR_WMI_ALREADY_ENABLED* = 4206
  ERROR_WMI_GUID_DISCONNECTED* = 4207
  ERROR_WMI_SERVER_UNAVAILABLE* = 4208
  ERROR_WMI_DP_FAILED* = 4209
  ERROR_WMI_INVALID_MOF* = 4210
  ERROR_WMI_INVALID_REGINFO* = 4211
  ERROR_WMI_ALREADY_DISABLED* = 4212
  ERROR_WMI_READ_ONLY* = 4213
  ERROR_WMI_SET_FAILURE* = 4214
  ERROR_INVALID_MEDIA* = 4300
  ERROR_INVALID_LIBRARY* = 4301
  ERROR_INVALID_MEDIA_POOL* = 4302
  ERROR_DRIVE_MEDIA_MISMATCH* = 4303
  ERROR_MEDIA_OFFLINE* = 4304
  ERROR_LIBRARY_OFFLINE* = 4305
  ERROR_EMPTY* = 4306
  ERROR_NOT_EMPTY* = 4307
  ERROR_MEDIA_UNAVAILABLE* = 4308
  ERROR_RESOURCE_DISABLED* = 4309
  ERROR_INVALID_CLEANER* = 4310
  ERROR_UNABLE_TO_CLEAN* = 4311
  ERROR_OBJECT_NOT_FOUND* = 4312
  ERROR_DATABASE_FAILURE* = 4313
  ERROR_DATABASE_FULL* = 4314
  ERROR_MEDIA_INCOMPATIBLE* = 4315
  ERROR_RESOURCE_NOT_PRESENT* = 4316
  ERROR_INVALID_OPERATION* = 4317
  ERROR_MEDIA_NOT_AVAILABLE* = 4318
  ERROR_DEVICE_NOT_AVAILABLE* = 4319
  ERROR_REQUEST_REFUSED* = 4320
  ERROR_INVALID_DRIVE_OBJECT* = 4321
  ERROR_LIBRARY_FULL* = 4322
  ERROR_MEDIUM_NOT_ACCESSIBLE* = 4323
  ERROR_UNABLE_TO_LOAD_MEDIUM* = 4324
  ERROR_UNABLE_TO_INVENTORY_DRIVE* = 4325
  ERROR_UNABLE_TO_INVENTORY_SLOT* = 4326
  ERROR_UNABLE_TO_INVENTORY_TRANSPORT* = 4327
  ERROR_TRANSPORT_FULL* = 4328
  ERROR_CONTROLLING_IEPORT* = 4329
  ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA* = 4330
  ERROR_CLEANER_SLOT_SET* = 4331
  ERROR_CLEANER_SLOT_NOT_SET* = 4332
  ERROR_CLEANER_CARTRIDGE_SPENT* = 4333
  ERROR_UNEXPECTED_OMID* = 4334
  ERROR_CANT_DELETE_LAST_ITEM* = 4335
  ERROR_MESSAGE_EXCEEDS_MAX_SIZE* = 4336
  ERROR_VOLUME_CONTAINS_SYS_FILES* = 4337
  ERROR_INDIGENOUS_TYPE* = 4338
  ERROR_NO_SUPPORTING_DRIVES* = 4339
  ERROR_CLEANER_CARTRIDGE_INSTALLED* = 4340
  ERROR_FILE_OFFLINE* = 4350
  ERROR_REMOTE_STORAGE_NOT_ACTIVE* = 4351
  ERROR_REMOTE_STORAGE_MEDIA_ERROR* = 4352
  ERROR_NOT_A_REPARSE_POINT* = 4390
  ERROR_REPARSE_ATTRIBUTE_CONFLICT* = 4391
  ERROR_INVALID_REPARSE_DATA* = 4392
  ERROR_REPARSE_TAG_INVALID* = 4393
  ERROR_REPARSE_TAG_MISMATCH* = 4394
  ERROR_VOLUME_NOT_SIS_ENABLED* = 4500
  ERROR_DEPENDENT_RESOURCE_EXISTS* = 5001
  ERROR_DEPENDENCY_NOT_FOUND* = 5002
  ERROR_DEPENDENCY_ALREADY_EXISTS* = 5003
  ERROR_RESOURCE_NOT_ONLINE* = 5004
  ERROR_HOST_NODE_NOT_AVAILABLE* = 5005
  ERROR_RESOURCE_NOT_AVAILABLE* = 5006
  ERROR_RESOURCE_NOT_FOUND* = 5007
  ERROR_SHUTDOWN_CLUSTER* = 5008
  ERROR_CANT_EVICT_ACTIVE_NODE* = 5009
  ERROR_OBJECT_ALREADY_EXISTS* = 5010
  ERROR_OBJECT_IN_LIST* = 5011
  ERROR_GROUP_NOT_AVAILABLE* = 5012
  ERROR_GROUP_NOT_FOUND* = 5013
  ERROR_GROUP_NOT_ONLINE* = 5014
  ERROR_HOST_NODE_NOT_RESOURCE_OWNER* = 5015
  ERROR_HOST_NODE_NOT_GROUP_OWNER* = 5016
  ERROR_RESMON_CREATE_FAILED* = 5017
  ERROR_RESMON_ONLINE_FAILED* = 5018
  ERROR_RESOURCE_ONLINE* = 5019
  ERROR_QUORUM_RESOURCE* = 5020
  ERROR_NOT_QUORUM_CAPABLE* = 5021
  ERROR_CLUSTER_SHUTTING_DOWN* = 5022
  ERROR_INVALID_STATE* = 5023
  ERROR_RESOURCE_PROPERTIES_STORED* = 5024
  ERROR_NOT_QUORUM_CLASS* = 5025
  ERROR_CORE_RESOURCE* = 5026
  ERROR_QUORUM_RESOURCE_ONLINE_FAILED* = 5027
  ERROR_QUORUMLOG_OPEN_FAILED* = 5028
  ERROR_CLUSTERLOG_CORRUPT* = 5029
  ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE* = 5030
  ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE* = 5031
  ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND* = 5032
  ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE* = 5033
  ERROR_QUORUM_OWNER_ALIVE* = 5034
  ERROR_NETWORK_NOT_AVAILABLE* = 5035
  ERROR_NODE_NOT_AVAILABLE* = 5036
  ERROR_ALL_NODES_NOT_AVAILABLE* = 5037
  ERROR_RESOURCE_FAILED* = 5038
  ERROR_CLUSTER_INVALID_NODE* = 5039
  ERROR_CLUSTER_NODE_EXISTS* = 5040
  ERROR_CLUSTER_JOIN_IN_PROGRESS* = 5041
  ERROR_CLUSTER_NODE_NOT_FOUND* = 5042
  ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND* = 5043
  ERROR_CLUSTER_NETWORK_EXISTS* = 5044
  ERROR_CLUSTER_NETWORK_NOT_FOUND* = 5045
  ERROR_CLUSTER_NETINTERFACE_EXISTS* = 5046
  ERROR_CLUSTER_NETINTERFACE_NOT_FOUND* = 5047
  ERROR_CLUSTER_INVALID_REQUEST* = 5048
  ERROR_CLUSTER_INVALID_NETWORK_PROVIDER* = 5049
  ERROR_CLUSTER_NODE_DOWN* = 5050
  ERROR_CLUSTER_NODE_UNREACHABLE* = 5051
  ERROR_CLUSTER_NODE_NOT_MEMBER* = 5052
  ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS* = 5053
  ERROR_CLUSTER_INVALID_NETWORK* = 5054
  ERROR_CLUSTER_NODE_UP* = 5056
  ERROR_CLUSTER_IPADDR_IN_USE* = 5057
  ERROR_CLUSTER_NODE_NOT_PAUSED* = 5058
  ERROR_CLUSTER_NO_SECURITY_CONTEXT* = 5059
  ERROR_CLUSTER_NETWORK_NOT_INTERNAL* = 5060
  ERROR_CLUSTER_NODE_ALREADY_UP* = 5061
  ERROR_CLUSTER_NODE_ALREADY_DOWN* = 5062
  ERROR_CLUSTER_NETWORK_ALREADY_ONLINE* = 5063
  ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE* = 5064
  ERROR_CLUSTER_NODE_ALREADY_MEMBER* = 5065
  ERROR_CLUSTER_LAST_INTERNAL_NETWORK* = 5066
  ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS* = 5067
  ERROR_INVALID_OPERATION_ON_QUORUM* = 5068
  ERROR_DEPENDENCY_NOT_ALLOWED* = 5069
  ERROR_CLUSTER_NODE_PAUSED* = 5070
  ERROR_NODE_CANT_HOST_RESOURCE* = 5071
  ERROR_CLUSTER_NODE_NOT_READY* = 5072
  ERROR_CLUSTER_NODE_SHUTTING_DOWN* = 5073
  ERROR_CLUSTER_JOIN_ABORTED* = 5074
  ERROR_CLUSTER_INCOMPATIBLE_VERSIONS* = 5075
  ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED* = 5076
  ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED* = 5077
  ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND* = 5078
  ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED* = 5079
  ERROR_CLUSTER_RESNAME_NOT_FOUND* = 5080
  ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED* = 5081
  ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST* = 5082
  ERROR_CLUSTER_DATABASE_SEQMISMATCH* = 5083
  ERROR_RESMON_INVALID_STATE* = 5084
  ERROR_CLUSTER_GUM_NOT_LOCKER* = 5085
  ERROR_QUORUM_DISK_NOT_FOUND* = 5086
  ERROR_DATABASE_BACKUP_CORRUPT* = 5087
  ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT* = 5088
  ERROR_RESOURCE_PROPERTY_UNCHANGEABLE* = 5089
  ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE* = 5890
  ERROR_CLUSTER_QUORUMLOG_NOT_FOUND* = 5891
  ERROR_CLUSTER_MEMBERSHIP_HALT* = 5892
  ERROR_CLUSTER_INSTANCE_ID_MISMATCH* = 5893
  ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP* = 5894
  ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH* = 5895
  ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP* = 5896
  ERROR_CLUSTER_PARAMETER_MISMATCH* = 5897
  ERROR_NODE_CANNOT_BE_CLUSTERED* = 5898
  ERROR_CLUSTER_WRONG_OS_VERSION* = 5899
  ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME* = 5900
  ERROR_CLUSCFG_ALREADY_COMMITTED* = 5901
  ERROR_CLUSCFG_ROLLBACK_FAILED* = 5902
  ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT* = 5903
  ERROR_CLUSTER_OLD_VERSION* = 5904
  ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME* = 5905
  ERROR_ENCRYPTION_FAILED* = 6000
  ERROR_DECRYPTION_FAILED* = 6001
  ERROR_FILE_ENCRYPTED* = 6002
  ERROR_NO_RECOVERY_POLICY* = 6003
  ERROR_NO_EFS* = 6004
  ERROR_WRONG_EFS* = 6005
  ERROR_NO_USER_KEYS* = 6006
  ERROR_FILE_NOT_ENCRYPTED* = 6007
  ERROR_NOT_EXPORT_FORMAT* = 6008
  ERROR_FILE_READ_ONLY* = 6009
  ERROR_DIR_EFS_DISALLOWED* = 6010
  ERROR_EFS_SERVER_NOT_TRUSTED* = 6011
  ERROR_BAD_RECOVERY_POLICY* = 6012
  ERROR_EFS_ALG_BLOB_TOO_BIG* = 6013
  ERROR_VOLUME_NOT_SUPPORT_EFS* = 6014
  ERROR_EFS_DISABLED* = 6015
  ERROR_EFS_VERSION_NOT_SUPPORT* = 6016
  ERROR_NO_BROWSER_SERVERS_FOUND* = 6118
  SCHED_E_SERVICE_NOT_LOCALSYSTEM* = 6200
  ERROR_CTX_WINSTATION_NAME_INVALID* = 7001
  ERROR_CTX_INVALID_PD* = 7002
  ERROR_CTX_PD_NOT_FOUND* = 7003
  ERROR_CTX_WD_NOT_FOUND* = 7004
  ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY* = 7005
  ERROR_CTX_SERVICE_NAME_COLLISION* = 7006
  ERROR_CTX_CLOSE_PENDING* = 7007
  ERROR_CTX_NO_OUTBUF* = 7008
  ERROR_CTX_MODEM_INF_NOT_FOUND* = 7009
  ERROR_CTX_INVALID_MODEMNAME* = 7010
  ERROR_CTX_MODEM_RESPONSE_ERROR* = 7011
  ERROR_CTX_MODEM_RESPONSE_TIMEOUT* = 7012
  ERROR_CTX_MODEM_RESPONSE_NO_CARRIER* = 7013
  ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE* = 7014
  ERROR_CTX_MODEM_RESPONSE_BUSY* = 7015
  ERROR_CTX_MODEM_RESPONSE_VOICE* = 7016
  ERROR_CTX_TD_ERROR* = 7017
  ERROR_CTX_WINSTATION_NOT_FOUND* = 7022
  ERROR_CTX_WINSTATION_ALREADY_EXISTS* = 7023
  ERROR_CTX_WINSTATION_BUSY* = 7024
  ERROR_CTX_BAD_VIDEO_MODE* = 7025
  ERROR_CTX_GRAPHICS_INVALID* = 7035
  ERROR_CTX_LOGON_DISABLED* = 7037
  ERROR_CTX_NOT_CONSOLE* = 7038
  ERROR_CTX_CLIENT_QUERY_TIMEOUT* = 7040
  ERROR_CTX_CONSOLE_DISCONNECT* = 7041
  ERROR_CTX_CONSOLE_CONNECT* = 7042
  ERROR_CTX_SHADOW_DENIED* = 7044
  ERROR_CTX_WINSTATION_ACCESS_DENIED* = 7045
  ERROR_CTX_INVALID_WD* = 7049
  ERROR_CTX_SHADOW_INVALID* = 7050
  ERROR_CTX_SHADOW_DISABLED* = 7051
  ERROR_CTX_CLIENT_LICENSE_IN_USE* = 7052
  ERROR_CTX_CLIENT_LICENSE_NOT_SET* = 7053
  ERROR_CTX_LICENSE_NOT_AVAILABLE* = 7054
  ERROR_CTX_LICENSE_CLIENT_INVALID* = 7055
  ERROR_CTX_LICENSE_EXPIRED* = 7056
  ERROR_CTX_SHADOW_NOT_RUNNING* = 7057
  ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE* = 7058
  ERROR_ACTIVATION_COUNT_EXCEEDED* = 7059
  FRS_ERR_INVALID_API_SEQUENCE* = 8001
  FRS_ERR_STARTING_SERVICE* = 8002
  FRS_ERR_STOPPING_SERVICE* = 8003
  FRS_ERR_INTERNAL_API* = 8004
  FRS_ERR_INTERNAL* = 8005
  FRS_ERR_SERVICE_COMM* = 8006
  FRS_ERR_INSUFFICIENT_PRIV* = 8007
  FRS_ERR_AUTHENTICATION* = 8008
  FRS_ERR_PARENT_INSUFFICIENT_PRIV* = 8009
  FRS_ERR_PARENT_AUTHENTICATION* = 8010
  FRS_ERR_CHILD_TO_PARENT_COMM* = 8011
  FRS_ERR_PARENT_TO_CHILD_COMM* = 8012
  FRS_ERR_SYSVOL_POPULATE* = 8013
  FRS_ERR_SYSVOL_POPULATE_TIMEOUT* = 8014
  FRS_ERR_SYSVOL_IS_BUSY* = 8015
  FRS_ERR_SYSVOL_DEMOTE* = 8016
  FRS_ERR_INVALID_SERVICE_PARAMETER* = 8017
  ERROR_DS_NOT_INSTALLED* = 8200
  ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY* = 8201
  ERROR_DS_NO_ATTRIBUTE_OR_VALUE* = 8202
  ERROR_DS_INVALID_ATTRIBUTE_SYNTAX* = 8203
  ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED* = 8204
  ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS* = 8205
  ERROR_DS_BUSY* = 8206
  ERROR_DS_UNAVAILABLE* = 8207
  ERROR_DS_NO_RIDS_ALLOCATED* = 8208
  ERROR_DS_NO_MORE_RIDS* = 8209
  ERROR_DS_INCORRECT_ROLE_OWNER* = 8210
  ERROR_DS_RIDMGR_INIT_ERROR* = 8211
  ERROR_DS_OBJ_CLASS_VIOLATION* = 8212
  ERROR_DS_CANT_ON_NON_LEAF* = 8213
  ERROR_DS_CANT_ON_RDN* = 8214
  ERROR_DS_CANT_MOD_OBJ_CLASS* = 8215
  ERROR_DS_CROSS_DOM_MOVE_ERROR* = 8216
  ERROR_DS_GC_NOT_AVAILABLE* = 8217
  ERROR_SHARED_POLICY* = 8218
  ERROR_POLICY_OBJECT_NOT_FOUND* = 8219
  ERROR_POLICY_ONLY_IN_DS* = 8220
  ERROR_PROMOTION_ACTIVE* = 8221
  ERROR_NO_PROMOTION_ACTIVE* = 8222
  ERROR_DS_OPERATIONS_ERROR* = 8224
  ERROR_DS_PROTOCOL_ERROR* = 8225
  ERROR_DS_TIMELIMIT_EXCEEDED* = 8226
  ERROR_DS_SIZELIMIT_EXCEEDED* = 8227
  ERROR_DS_ADMIN_LIMIT_EXCEEDED* = 8228
  ERROR_DS_COMPARE_FALSE* = 8229
  ERROR_DS_COMPARE_TRUE* = 8230
  ERROR_DS_AUTH_METHOD_NOT_SUPPORTED* = 8231
  ERROR_DS_STRONG_AUTH_REQUIRED* = 8232
  ERROR_DS_INAPPROPRIATE_AUTH* = 8233
  ERROR_DS_AUTH_UNKNOWN* = 8234
  ERROR_DS_REFERRAL* = 8235
  ERROR_DS_UNAVAILABLE_CRIT_EXTENSION* = 8236
  ERROR_DS_CONFIDENTIALITY_REQUIRED* = 8237
  ERROR_DS_INAPPROPRIATE_MATCHING* = 8238
  ERROR_DS_CONSTRAINT_VIOLATION* = 8239
  ERROR_DS_NO_SUCH_OBJECT* = 8240
  ERROR_DS_ALIAS_PROBLEM* = 8241
  ERROR_DS_INVALID_DN_SYNTAX* = 8242
  ERROR_DS_IS_LEAF* = 8243
  ERROR_DS_ALIAS_DEREF_PROBLEM* = 8244
  ERROR_DS_UNWILLING_TO_PERFORM* = 8245
  ERROR_DS_LOOP_DETECT* = 8246
  ERROR_DS_NAMING_VIOLATION* = 8247
  ERROR_DS_OBJECT_RESULTS_TOO_LARGE* = 8248
  ERROR_DS_AFFECTS_MULTIPLE_DSAS* = 8249
  ERROR_DS_SERVER_DOWN* = 8250
  ERROR_DS_LOCAL_ERROR* = 8251
  ERROR_DS_ENCODING_ERROR* = 8252
  ERROR_DS_DECODING_ERROR* = 8253
  ERROR_DS_FILTER_UNKNOWN* = 8254
  ERROR_DS_PARAM_ERROR* = 8255
  ERROR_DS_NOT_SUPPORTED* = 8256
  ERROR_DS_NO_RESULTS_RETURNED* = 8257
  ERROR_DS_CONTROL_NOT_FOUND* = 8258
  ERROR_DS_CLIENT_LOOP* = 8259
  ERROR_DS_REFERRAL_LIMIT_EXCEEDED* = 8260
  ERROR_DS_SORT_CONTROL_MISSING* = 8261
  ERROR_DS_OFFSET_RANGE_ERROR* = 8262
  ERROR_DS_ROOT_MUST_BE_NC* = 8301
  ERROR_DS_ADD_REPLICA_INHIBITED* = 8302
  ERROR_DS_ATT_NOT_DEF_IN_SCHEMA* = 8303
  ERROR_DS_MAX_OBJ_SIZE_EXCEEDED* = 8304
  ERROR_DS_OBJ_STRING_NAME_EXISTS* = 8305
  ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA* = 8306
  ERROR_DS_RDN_DOESNT_MATCH_SCHEMA* = 8307
  ERROR_DS_NO_REQUESTED_ATTS_FOUND* = 8308
  ERROR_DS_USER_BUFFER_TO_SMALL* = 8309
  ERROR_DS_ATT_IS_NOT_ON_OBJ* = 8310
  ERROR_DS_ILLEGAL_MOD_OPERATION* = 8311
  ERROR_DS_OBJ_TOO_LARGE* = 8312
  ERROR_DS_BAD_INSTANCE_TYPE* = 8313
  ERROR_DS_MASTERDSA_REQUIRED* = 8314
  ERROR_DS_OBJECT_CLASS_REQUIRED* = 8315
  ERROR_DS_MISSING_REQUIRED_ATT* = 8316
  ERROR_DS_ATT_NOT_DEF_FOR_CLASS* = 8317
  ERROR_DS_ATT_ALREADY_EXISTS* = 8318
  ERROR_DS_CANT_ADD_ATT_VALUES* = 8320
  ERROR_DS_SINGLE_VALUE_CONSTRAINT* = 8321
  ERROR_DS_RANGE_CONSTRAINT* = 8322
  ERROR_DS_ATT_VAL_ALREADY_EXISTS* = 8323
  ERROR_DS_CANT_REM_MISSING_ATT* = 8324
  ERROR_DS_CANT_REM_MISSING_ATT_VAL* = 8325
  ERROR_DS_ROOT_CANT_BE_SUBREF* = 8326
  ERROR_DS_NO_CHAINING* = 8327
  ERROR_DS_NO_CHAINED_EVAL* = 8328
  ERROR_DS_NO_PARENT_OBJECT* = 8329
  ERROR_DS_PARENT_IS_AN_ALIAS* = 8330
  ERROR_DS_CANT_MIX_MASTER_AND_REPS* = 8331
  ERROR_DS_CHILDREN_EXIST* = 8332
  ERROR_DS_OBJ_NOT_FOUND* = 8333
  ERROR_DS_ALIASED_OBJ_MISSING* = 8334
  ERROR_DS_BAD_NAME_SYNTAX* = 8335
  ERROR_DS_ALIAS_POINTS_TO_ALIAS* = 8336
  ERROR_DS_CANT_DEREF_ALIAS* = 8337
  ERROR_DS_OUT_OF_SCOPE* = 8338
  ERROR_DS_OBJECT_BEING_REMOVED* = 8339
  ERROR_DS_CANT_DELETE_DSA_OBJ* = 8340
  ERROR_DS_GENERIC_ERROR* = 8341
  ERROR_DS_DSA_MUST_BE_INT_MASTER* = 8342
  ERROR_DS_CLASS_NOT_DSA* = 8343
  ERROR_DS_INSUFF_ACCESS_RIGHTS* = 8344
  ERROR_DS_ILLEGAL_SUPERIOR* = 8345
  ERROR_DS_ATTRIBUTE_OWNED_BY_SAM* = 8346
  ERROR_DS_NAME_TOO_MANY_PARTS* = 8347
  ERROR_DS_NAME_TOO_LONG* = 8348
  ERROR_DS_NAME_VALUE_TOO_LONG* = 8349
  ERROR_DS_NAME_UNPARSEABLE* = 8350
  ERROR_DS_NAME_TYPE_UNKNOWN* = 8351
  ERROR_DS_NOT_AN_OBJECT* = 8352
  ERROR_DS_SEC_DESC_TOO_SHORT* = 8353
  ERROR_DS_SEC_DESC_INVALID* = 8354
  ERROR_DS_NO_DELETED_NAME* = 8355
  ERROR_DS_SUBREF_MUST_HAVE_PARENT* = 8356
  ERROR_DS_NCNAME_MUST_BE_NC* = 8357
  ERROR_DS_CANT_ADD_SYSTEM_ONLY* = 8358
  ERROR_DS_CLASS_MUST_BE_CONCRETE* = 8359
  ERROR_DS_INVALID_DMD* = 8360
  ERROR_DS_OBJ_GUID_EXISTS* = 8361
  ERROR_DS_NOT_ON_BACKLINK* = 8362
  ERROR_DS_NO_CROSSREF_FOR_NC* = 8363
  ERROR_DS_SHUTTING_DOWN* = 8364
  ERROR_DS_UNKNOWN_OPERATION* = 8365
  ERROR_DS_INVALID_ROLE_OWNER* = 8366
  ERROR_DS_COULDNT_CONTACT_FSMO* = 8367
  ERROR_DS_CROSS_NC_DN_RENAME* = 8368
  ERROR_DS_CANT_MOD_SYSTEM_ONLY* = 8369
  ERROR_DS_REPLICATOR_ONLY* = 8370
  ERROR_DS_OBJ_CLASS_NOT_DEFINED* = 8371
  ERROR_DS_OBJ_CLASS_NOT_SUBCLASS* = 8372
  ERROR_DS_NAME_REFERENCE_INVALID* = 8373
  ERROR_DS_CROSS_REF_EXISTS* = 8374
  ERROR_DS_CANT_DEL_MASTER_CROSSREF* = 8375
  ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD* = 8376
  ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX* = 8377
  ERROR_DS_DUP_RDN* = 8378
  ERROR_DS_DUP_OID* = 8379
  ERROR_DS_DUP_MAPI_ID* = 8380
  ERROR_DS_DUP_SCHEMA_ID_GUID* = 8381
  ERROR_DS_DUP_LDAP_DISPLAY_NAME* = 8382
  ERROR_DS_SEMANTIC_ATT_TEST* = 8383
  ERROR_DS_SYNTAX_MISMATCH* = 8384
  ERROR_DS_EXISTS_IN_MUST_HAVE* = 8385
  ERROR_DS_EXISTS_IN_MAY_HAVE* = 8386
  ERROR_DS_NONEXISTENT_MAY_HAVE* = 8387
  ERROR_DS_NONEXISTENT_MUST_HAVE* = 8388
  ERROR_DS_AUX_CLS_TEST_FAIL* = 8389
  ERROR_DS_NONEXISTENT_POSS_SUP* = 8390
  ERROR_DS_SUB_CLS_TEST_FAIL* = 8391
  ERROR_DS_BAD_RDN_ATT_ID_SYNTAX* = 8392
  ERROR_DS_EXISTS_IN_AUX_CLS* = 8393
  ERROR_DS_EXISTS_IN_SUB_CLS* = 8394
  ERROR_DS_EXISTS_IN_POSS_SUP* = 8395
  ERROR_DS_RECALCSCHEMA_FAILED* = 8396
  ERROR_DS_TREE_DELETE_NOT_FINISHED* = 8397
  ERROR_DS_CANT_DELETE* = 8398
  ERROR_DS_ATT_SCHEMA_REQ_ID* = 8399
  ERROR_DS_BAD_ATT_SCHEMA_SYNTAX* = 8400
  ERROR_DS_CANT_CACHE_ATT* = 8401
  ERROR_DS_CANT_CACHE_CLASS* = 8402
  ERROR_DS_CANT_REMOVE_ATT_CACHE* = 8403
  ERROR_DS_CANT_REMOVE_CLASS_CACHE* = 8404
  ERROR_DS_CANT_RETRIEVE_DN* = 8405
  ERROR_DS_MISSING_SUPREF* = 8406
  ERROR_DS_CANT_RETRIEVE_INSTANCE* = 8407
  ERROR_DS_CODE_INCONSISTENCY* = 8408
  ERROR_DS_DATABASE_ERROR* = 8409
  ERROR_DS_GOVERNSID_MISSING* = 8410
  ERROR_DS_MISSING_EXPECTED_ATT* = 8411
  ERROR_DS_NCNAME_MISSING_CR_REF* = 8412
  ERROR_DS_SECURITY_CHECKING_ERROR* = 8413
  ERROR_DS_SCHEMA_NOT_LOADED* = 8414
  ERROR_DS_SCHEMA_ALLOC_FAILED* = 8415
  ERROR_DS_ATT_SCHEMA_REQ_SYNTAX* = 8416
  ERROR_DS_GCVERIFY_ERROR* = 8417
  ERROR_DS_DRA_SCHEMA_MISMATCH* = 8418
  ERROR_DS_CANT_FIND_DSA_OBJ* = 8419
  ERROR_DS_CANT_FIND_EXPECTED_NC* = 8420
  ERROR_DS_CANT_FIND_NC_IN_CACHE* = 8421
  ERROR_DS_CANT_RETRIEVE_CHILD* = 8422
  ERROR_DS_SECURITY_ILLEGAL_MODIFY* = 8423
  ERROR_DS_CANT_REPLACE_HIDDEN_REC* = 8424
  ERROR_DS_BAD_HIERARCHY_FILE* = 8425
  ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED* = 8426
  ERROR_DS_CONFIG_PARAM_MISSING* = 8427
  ERROR_DS_COUNTING_AB_INDICES_FAILED* = 8428
  ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED* = 8429
  ERROR_DS_INTERNAL_FAILURE* = 8430
  ERROR_DS_UNKNOWN_ERROR* = 8431
  ERROR_DS_ROOT_REQUIRES_CLASS_TOP* = 8432
  ERROR_DS_REFUSING_FSMO_ROLES* = 8433
  ERROR_DS_MISSING_FSMO_SETTINGS* = 8434
  ERROR_DS_UNABLE_TO_SURRENDER_ROLES* = 8435
  ERROR_DS_DRA_GENERIC* = 8436
  ERROR_DS_DRA_INVALID_PARAMETER* = 8437
  ERROR_DS_DRA_BUSY* = 8438
  ERROR_DS_DRA_BAD_DN* = 8439
  ERROR_DS_DRA_BAD_NC* = 8440
  ERROR_DS_DRA_DN_EXISTS* = 8441
  ERROR_DS_DRA_INTERNAL_ERROR* = 8442
  ERROR_DS_DRA_INCONSISTENT_DIT* = 8443
  ERROR_DS_DRA_CONNECTION_FAILED* = 8444
  ERROR_DS_DRA_BAD_INSTANCE_TYPE* = 8445
  ERROR_DS_DRA_OUT_OF_MEM* = 8446
  ERROR_DS_DRA_MAIL_PROBLEM* = 8447
  ERROR_DS_DRA_REF_ALREADY_EXISTS* = 8448
  ERROR_DS_DRA_REF_NOT_FOUND* = 8449
  ERROR_DS_DRA_OBJ_IS_REP_SOURCE* = 8450
  ERROR_DS_DRA_DB_ERROR* = 8451
  ERROR_DS_DRA_NO_REPLICA* = 8452
  ERROR_DS_DRA_ACCESS_DENIED* = 8453
  ERROR_DS_DRA_NOT_SUPPORTED* = 8454
  ERROR_DS_DRA_RPC_CANCELLED* = 8455
  ERROR_DS_DRA_SOURCE_DISABLED* = 8456
  ERROR_DS_DRA_SINK_DISABLED* = 8457
  ERROR_DS_DRA_NAME_COLLISION* = 8458
  ERROR_DS_DRA_SOURCE_REINSTALLED* = 8459
  ERROR_DS_DRA_MISSING_PARENT* = 8460
  ERROR_DS_DRA_PREEMPTED* = 8461
  ERROR_DS_DRA_ABANDON_SYNC* = 8462
  ERROR_DS_DRA_SHUTDOWN* = 8463
  ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET* = 8464
  ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA* = 8465
  ERROR_DS_DRA_EXTN_CONNECTION_FAILED* = 8466
  ERROR_DS_INSTALL_SCHEMA_MISMATCH* = 8467
  ERROR_DS_DUP_LINK_ID* = 8468
  ERROR_DS_NAME_ERROR_RESOLVING* = 8469
  ERROR_DS_NAME_ERROR_NOT_FOUND* = 8470
  ERROR_DS_NAME_ERROR_NOT_UNIQUE* = 8471
  ERROR_DS_NAME_ERROR_NO_MAPPING* = 8472
  ERROR_DS_NAME_ERROR_DOMAIN_ONLY* = 8473
  ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING* = 8474
  ERROR_DS_CONSTRUCTED_ATT_MOD* = 8475
  ERROR_DS_WRONG_OM_OBJ_CLASS* = 8476
  ERROR_DS_DRA_REPL_PENDING* = 8477
  ERROR_DS_DS_REQUIRED* = 8478
  ERROR_DS_INVALID_LDAP_DISPLAY_NAME* = 8479
  ERROR_DS_NON_BASE_SEARCH* = 8480
  ERROR_DS_CANT_RETRIEVE_ATTS* = 8481
  ERROR_DS_BACKLINK_WITHOUT_LINK* = 8482
  ERROR_DS_EPOCH_MISMATCH* = 8483
  ERROR_DS_SRC_NAME_MISMATCH* = 8484
  ERROR_DS_SRC_AND_DST_NC_IDENTICAL* = 8485
  ERROR_DS_DST_NC_MISMATCH* = 8486
  ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC* = 8487
  ERROR_DS_SRC_GUID_MISMATCH* = 8488
  ERROR_DS_CANT_MOVE_DELETED_OBJECT* = 8489
  ERROR_DS_PDC_OPERATION_IN_PROGRESS* = 8490
  ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD* = 8491
  ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION* = 8492
  ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS* = 8493
  ERROR_DS_NC_MUST_HAVE_NC_PARENT* = 8494
  ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE* = 8495
  ERROR_DS_DST_DOMAIN_NOT_NATIVE* = 8496
  ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER* = 8497
  ERROR_DS_CANT_MOVE_ACCOUNT_GROUP* = 8498
  ERROR_DS_CANT_MOVE_RESOURCE_GROUP* = 8499
  ERROR_DS_INVALID_SEARCH_FLAG* = 8500
  ERROR_DS_NO_TREE_DELETE_ABOVE_NC* = 8501
  ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE* = 8502
  ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE* = 8503
  ERROR_DS_SAM_INIT_FAILURE* = 8504
  ERROR_DS_SENSITIVE_GROUP_VIOLATION* = 8505
  ERROR_DS_CANT_MOD_PRIMARYGROUPID* = 8506
  ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD* = 8507
  ERROR_DS_NONSAFE_SCHEMA_CHANGE* = 8508
  ERROR_DS_SCHEMA_UPDATE_DISALLOWED* = 8509
  ERROR_DS_CANT_CREATE_UNDER_SCHEMA* = 8510
  ERROR_DS_INSTALL_NO_SRC_SCH_VERSION* = 8511
  ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE* = 8512
  ERROR_DS_INVALID_GROUP_TYPE* = 8513
  ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN* = 8514
  ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN* = 8515
  ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER* = 8516
  ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER* = 8517
  ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER* = 8518
  ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER* = 8519
  ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER* = 8520
  ERROR_DS_HAVE_PRIMARY_MEMBERS* = 8521
  ERROR_DS_STRING_SD_CONVERSION_FAILED* = 8522
  ERROR_DS_NAMING_MASTER_GC* = 8523
  ERROR_DS_LOOKUP_FAILURE* = 8524
  ERROR_DS_COULDNT_UPDATE_SPNS* = 8525
  ERROR_DS_CANT_RETRIEVE_SD* = 8526
  ERROR_DS_KEY_NOT_UNIQUE* = 8527
  ERROR_DS_WRONG_LINKED_ATT_SYNTAX* = 8528
  ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD* = 8529
  ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY* = 8530
  ERROR_DS_CANT_START* = 8531
  ERROR_DS_INIT_FAILURE* = 8532
  ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION* = 8533
  ERROR_DS_SOURCE_DOMAIN_IN_FOREST* = 8534
  ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST* = 8535
  ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED* = 8536
  ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN* = 8537
  ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER* = 8538
  ERROR_DS_SRC_SID_EXISTS_IN_FOREST* = 8539
  ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH* = 8540
  ERROR_SAM_INIT_FAILURE* = 8541
  ERROR_DS_DRA_SCHEMA_INFO_SHIP* = 8542
  ERROR_DS_DRA_SCHEMA_CONFLICT* = 8543
  ERROR_DS_DRA_EARLIER_SCHEMA_CONLICT* = 8544
  ERROR_DS_DRA_OBJ_NC_MISMATCH* = 8545
  ERROR_DS_NC_STILL_HAS_DSAS* = 8546
  ERROR_DS_GC_REQUIRED* = 8547
  ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY* = 8548
  ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS* = 8549
  ERROR_DS_CANT_ADD_TO_GC* = 8550
  ERROR_DS_NO_CHECKPOINT_WITH_PDC* = 8551
  ERROR_DS_SOURCE_AUDITING_NOT_ENABLED* = 8552
  ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC* = 8553
  ERROR_DS_INVALID_NAME_FOR_SPN* = 8554
  ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS* = 8555
  ERROR_DS_UNICODEPWD_NOT_IN_QUOTES* = 8556
  ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED* = 8557
  ERROR_DS_MUST_BE_RUN_ON_DST_DC* = 8558
  ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER* = 8559
  ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ* = 8560
  ERROR_DS_INIT_FAILURE_CONSOLE* = 8561
  ERROR_DS_SAM_INIT_FAILURE_CONSOLE* = 8562
  ERROR_DS_FOREST_VERSION_TOO_HIGH* = 8563
  ERROR_DS_DOMAIN_VERSION_TOO_HIGH* = 8564
  ERROR_DS_FOREST_VERSION_TOO_LOW* = 8565
  ERROR_DS_DOMAIN_VERSION_TOO_LOW* = 8566
  ERROR_DS_INCOMPATIBLE_VERSION* = 8567
  ERROR_DS_LOW_DSA_VERSION* = 8568
  ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN* = 8569
  ERROR_DS_NOT_SUPPORTED_SORT_ORDER* = 8570
  ERROR_DS_NAME_NOT_UNIQUE* = 8571
  ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4* = 8572
  ERROR_DS_OUT_OF_VERSION_STORE* = 8573
  ERROR_DS_INCOMPATIBLE_CONTROLS_USED* = 8574
  ERROR_DS_NO_REF_DOMAIN* = 8575
  ERROR_DS_RESERVED_LINK_ID* = 8576
  ERROR_DS_LINK_ID_NOT_AVAILABLE* = 8577
  ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER* = 8578
  ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE* = 8579
  ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC* = 8580
  ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG* = 8581
  ERROR_DS_MODIFYDN_WRONG_GRANDPARENT* = 8582
  ERROR_DS_NAME_ERROR_TRUST_REFERRAL* = 8583
  ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER* = 8584
  ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD* = 8585
  ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2* = 8586
  ERROR_DS_THREAD_LIMIT_EXCEEDED* = 8587
  ERROR_DS_NOT_CLOSEST* = 8588
  ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF* = 8589
  ERROR_DS_SINGLE_USER_MODE_FAILED* = 8590
  ERROR_DS_NTDSCRIPT_SYNTAX_ERROR* = 8591
  ERROR_DS_NTDSCRIPT_PROCESS_ERROR* = 8592
  ERROR_DS_DIFFERENT_REPL_EPOCHS* = 8593
  ERROR_DS_DRS_EXTENSIONS_CHANGED* = 8594
  ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR* = 8595
  ERROR_DS_NO_MSDS_INTID* = 8596
  ERROR_DS_DUP_MSDS_INTID* = 8597
  ERROR_DS_EXISTS_IN_RDNATTID* = 8598
  ERROR_DS_AUTHORIZATION_FAILED* = 8599
  ERROR_DS_INVALID_SCRIPT* = 8600
  ERROR_DS_REMOTE_CROSSREF_OP_FAILED* = 8601
  ERROR_DS_CROSS_REF_BUSY* = 8602
  ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN* = 8603
  ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC* = 8604
  ERROR_DS_DUPLICATE_ID_FOUND* = 8605
  ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT* = 8606
  ERROR_DS_GROUP_CONVERSION_ERROR* = 8607
  ERROR_DS_CANT_MOVE_APP_BASIC_GROUP* = 8608
  ERROR_DS_CANT_MOVE_APP_QUERY_GROUP* = 8609
  ERROR_DS_ROLE_NOT_VERIFIED* = 8610
  ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL* = 8611
  ERROR_DS_DOMAIN_RENAME_IN_PROGRESS* = 8612
  ERROR_DS_EXISTING_AD_CHILD_NC* = 8613
  DNS_ERROR_RCODE_FORMAT_ERROR* = 9001
  DNS_ERROR_RCODE_SERVER_FAILURE* = 9002
  DNS_ERROR_RCODE_NAME_ERROR* = 9003
  DNS_ERROR_RCODE_NOT_IMPLEMENTED* = 9004
  DNS_ERROR_RCODE_REFUSED* = 9005
  DNS_ERROR_RCODE_YXDOMAIN* = 9006
  DNS_ERROR_RCODE_YXRRSET* = 9007
  DNS_ERROR_RCODE_NXRRSET* = 9008
  DNS_ERROR_RCODE_NOTAUTH* = 9009
  DNS_ERROR_RCODE_NOTZONE* = 9010
  DNS_ERROR_RCODE_BADSIG* = 9016
  DNS_ERROR_RCODE_BADKEY* = 9017
  DNS_ERROR_RCODE_BADTIME* = 9018
  DNS_INFO_NO_RECORDS* = 9501
  DNS_ERROR_BAD_PACKET* = 9502
  DNS_ERROR_NO_PACKET* = 9503
  DNS_ERROR_RCODE* = 9504
  DNS_ERROR_UNSECURE_PACKET* = 9505
  DNS_ERROR_INVALID_TYPE* = 9551
  DNS_ERROR_INVALID_IP_ADDRESS* = 9552
  DNS_ERROR_INVALID_PROPERTY* = 9553
  DNS_ERROR_TRY_AGAIN_LATER* = 9554
  DNS_ERROR_NOT_UNIQUE* = 9555
  DNS_ERROR_NON_RFC_NAME* = 9556
  DNS_STATUS_FQDN* = 9557
  DNS_STATUS_DOTTED_NAME* = 9558
  DNS_STATUS_SINGLE_PART_NAME* = 9559
  DNS_ERROR_INVALID_NAME_CHAR* = 9560
  DNS_ERROR_NUMERIC_NAME* = 9561
  DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER* = 9562
  DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION* = 9563
  DNS_ERROR_CANNOT_FIND_ROOT_HINTS* = 9564
  DNS_ERROR_INCONSISTENT_ROOT_HINTS* = 9565
  DNS_ERROR_ZONE_DOES_NOT_EXIST* = 9601
  DNS_ERROR_NO_ZONE_INFO* = 9602
  DNS_ERROR_INVALID_ZONE_OPERATION* = 9603
  DNS_ERROR_ZONE_CONFIGURATION_ERROR* = 9604
  DNS_ERROR_ZONE_HAS_NO_SOA_RECORD* = 9605
  DNS_ERROR_ZONE_HAS_NO_NS_RECORDS* = 9606
  DNS_ERROR_ZONE_LOCKED* = 9607
  DNS_ERROR_ZONE_CREATION_FAILED* = 9608
  DNS_ERROR_ZONE_ALREADY_EXISTS* = 9609
  DNS_ERROR_AUTOZONE_ALREADY_EXISTS* = 9610
  DNS_ERROR_INVALID_ZONE_TYPE* = 9611
  DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP* = 9612
  DNS_ERROR_ZONE_NOT_SECONDARY* = 9613
  DNS_ERROR_NEED_SECONDARY_ADDRESSES* = 9614
  DNS_ERROR_WINS_INIT_FAILED* = 9615
  DNS_ERROR_NEED_WINS_SERVERS* = 9616
  DNS_ERROR_NBSTAT_INIT_FAILED* = 9617
  DNS_ERROR_SOA_DELETE_INVALID* = 9618
  DNS_ERROR_FORWARDER_ALREADY_EXISTS* = 9619
  DNS_ERROR_ZONE_REQUIRES_MASTER_IP* = 9620
  DNS_ERROR_ZONE_IS_SHUTDOWN* = 9621
  DNS_ERROR_PRIMARY_REQUIRES_DATAFILE* = 9651
  DNS_ERROR_INVALID_DATAFILE_NAME* = 9652
  DNS_ERROR_DATAFILE_OPEN_FAILURE* = 9653
  DNS_ERROR_FILE_WRITEBACK_FAILED* = 9654
  DNS_ERROR_DATAFILE_PARSING* = 9655
  DNS_ERROR_RECORD_DOES_NOT_EXIST* = 9701
  DNS_ERROR_RECORD_FORMAT* = 9702
  DNS_ERROR_NODE_CREATION_FAILED* = 9703
  DNS_ERROR_UNKNOWN_RECORD_TYPE* = 9704
  DNS_ERROR_RECORD_TIMED_OUT* = 9705
  DNS_ERROR_NAME_NOT_IN_ZONE* = 9706
  DNS_ERROR_CNAME_LOOP* = 9707
  DNS_ERROR_NODE_IS_CNAME* = 9708
  DNS_ERROR_CNAME_COLLISION* = 9709
  DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT* = 9710
  DNS_ERROR_RECORD_ALREADY_EXISTS* = 9711
  DNS_ERROR_SECONDARY_DATA* = 9712
  DNS_ERROR_NO_CREATE_CACHE_DATA* = 9713
  DNS_ERROR_NAME_DOES_NOT_EXIST* = 9714
  DNS_WARNING_PTR_CREATE_FAILED* = 9715
  DNS_WARNING_DOMAIN_UNDELETED* = 9716
  DNS_ERROR_DS_UNAVAILABLE* = 9717
  DNS_ERROR_DS_ZONE_ALREADY_EXISTS* = 9718
  DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE* = 9719
  DNS_INFO_AXFR_COMPLETE* = 9751
  DNS_ERROR_AXFR* = 9752
  DNS_INFO_ADDED_LOCAL_WINS* = 9753
  DNS_STATUS_CONTINUE_NEEDED* = 9801
  DNS_ERROR_NO_TCPIP* = 9851
  DNS_ERROR_NO_DNS_SERVERS* = 9852
  DNS_ERROR_DP_DOES_NOT_EXIST* = 9901
  DNS_ERROR_DP_ALREADY_EXISTS* = 9902
  DNS_ERROR_DP_NOT_ENLISTED* = 9903
  DNS_ERROR_DP_ALREADY_ENLISTED* = 9904
  DNS_ERROR_DP_NOT_AVAILABLE* = 9905
  ERROR_IPSEC_QM_POLICY_EXISTS* = 13000
  ERROR_IPSEC_QM_POLICY_NOT_FOUND* = 13001
  ERROR_IPSEC_QM_POLICY_IN_USE* = 13002
  ERROR_IPSEC_MM_POLICY_EXISTS* = 13003
  ERROR_IPSEC_MM_POLICY_NOT_FOUND* = 13004
  ERROR_IPSEC_MM_POLICY_IN_USE* = 13005
  ERROR_IPSEC_MM_FILTER_EXISTS* = 13006
  ERROR_IPSEC_MM_FILTER_NOT_FOUND* = 13007
  ERROR_IPSEC_TRANSPORT_FILTER_EXISTS* = 13008
  ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND* = 13009
  ERROR_IPSEC_MM_AUTH_EXISTS* = 13010
  ERROR_IPSEC_MM_AUTH_NOT_FOUND* = 13011
  ERROR_IPSEC_MM_AUTH_IN_USE* = 13012
  ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND* = 13013
  ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND* = 13014
  ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND* = 13015
  ERROR_IPSEC_TUNNEL_FILTER_EXISTS* = 13016
  ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND* = 13017
  ERROR_IPSEC_MM_FILTER_PENDING_DELETION* = 13018
  ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION* = 13019
  ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION* = 13020
  ERROR_IPSEC_MM_POLICY_PENDING_DELETION* = 13021
  ERROR_IPSEC_MM_AUTH_PENDING_DELETION* = 13022
  ERROR_IPSEC_QM_POLICY_PENDING_DELETION* = 13023
  WARNING_IPSEC_MM_POLICY_PRUNED* = 13024
  WARNING_IPSEC_QM_POLICY_PRUNED* = 13025
  ERROR_IPSEC_IKE_AUTH_FAIL* = 13801
  ERROR_IPSEC_IKE_ATTRIB_FAIL* = 13802
  ERROR_IPSEC_IKE_NEGOTIATION_PENDING* = 13803
  ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR* = 13804
  ERROR_IPSEC_IKE_TIMED_OUT* = 13805
  ERROR_IPSEC_IKE_NO_CERT* = 13806
  ERROR_IPSEC_IKE_SA_DELETED* = 13807
  ERROR_IPSEC_IKE_SA_REAPED* = 13808
  ERROR_IPSEC_IKE_MM_ACQUIRE_DROP* = 13809
  ERROR_IPSEC_IKE_QM_ACQUIRE_DROP* = 13810
  ERROR_IPSEC_IKE_QUEUE_DROP_MM* = 13811
  ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM* = 13812
  ERROR_IPSEC_IKE_DROP_NO_RESPONSE* = 13813
  ERROR_IPSEC_IKE_MM_DELAY_DROP* = 13814
  ERROR_IPSEC_IKE_QM_DELAY_DROP* = 13815
  ERROR_IPSEC_IKE_ERROR* = 13816
  ERROR_IPSEC_IKE_CRL_FAILED* = 13817
  ERROR_IPSEC_IKE_INVALID_KEY_USAGE* = 13818
  ERROR_IPSEC_IKE_INVALID_CERT_TYPE* = 13819
  ERROR_IPSEC_IKE_NO_PRIVATE_KEY* = 13820
  ERROR_IPSEC_IKE_DH_FAIL* = 13822
  ERROR_IPSEC_IKE_INVALID_HEADER* = 13824
  ERROR_IPSEC_IKE_NO_POLICY* = 13825
  ERROR_IPSEC_IKE_INVALID_SIGNATURE* = 13826
  ERROR_IPSEC_IKE_KERBEROS_ERROR* = 13827
  ERROR_IPSEC_IKE_NO_PUBLIC_KEY* = 13828
  ERROR_IPSEC_IKE_PROCESS_ERR* = 13829
  ERROR_IPSEC_IKE_PROCESS_ERR_SA* = 13830
  ERROR_IPSEC_IKE_PROCESS_ERR_PROP* = 13831
  ERROR_IPSEC_IKE_PROCESS_ERR_TRANS* = 13832
  ERROR_IPSEC_IKE_PROCESS_ERR_KE* = 13833
  ERROR_IPSEC_IKE_PROCESS_ERR_ID* = 13834
  ERROR_IPSEC_IKE_PROCESS_ERR_CERT* = 13835
  ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ* = 13836
  ERROR_IPSEC_IKE_PROCESS_ERR_HASH* = 13837
  ERROR_IPSEC_IKE_PROCESS_ERR_SIG* = 13838
  ERROR_IPSEC_IKE_PROCESS_ERR_NONCE* = 13839
  ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY* = 13840
  ERROR_IPSEC_IKE_PROCESS_ERR_DELETE* = 13841
  ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR* = 13842
  ERROR_IPSEC_IKE_INVALID_PAYLOAD* = 13843
  ERROR_IPSEC_IKE_LOAD_SOFT_SA* = 13844
  ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN* = 13845
  ERROR_IPSEC_IKE_INVALID_COOKIE* = 13846
  ERROR_IPSEC_IKE_NO_PEER_CERT* = 13847
  ERROR_IPSEC_IKE_PEER_CRL_FAILED* = 13848
  ERROR_IPSEC_IKE_POLICY_CHANGE* = 13849
  ERROR_IPSEC_IKE_NO_MM_POLICY* = 13850
  ERROR_IPSEC_IKE_NOTCBPRIV* = 13851
  ERROR_IPSEC_IKE_SECLOADFAIL* = 13852
  ERROR_IPSEC_IKE_FAILSSPINIT* = 13853
  ERROR_IPSEC_IKE_FAILQUERYSSP* = 13854
  ERROR_IPSEC_IKE_SRVACQFAIL* = 13855
  ERROR_IPSEC_IKE_SRVQUERYCRED* = 13856
  ERROR_IPSEC_IKE_GETSPIFAIL* = 13857
  ERROR_IPSEC_IKE_INVALID_FILTER* = 13858
  ERROR_IPSEC_IKE_OUT_OF_MEMORY* = 13859
  ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED* = 13860
  ERROR_IPSEC_IKE_INVALID_POLICY* = 13861
  ERROR_IPSEC_IKE_UNKNOWN_DOI* = 13862
  ERROR_IPSEC_IKE_INVALID_SITUATION* = 13863
  ERROR_IPSEC_IKE_DH_FAILURE* = 13864
  ERROR_IPSEC_IKE_INVALID_GROUP* = 13865
  ERROR_IPSEC_IKE_ENCRYPT* = 13866
  ERROR_IPSEC_IKE_DECRYPT* = 13867
  ERROR_IPSEC_IKE_POLICY_MATCH* = 13868
  ERROR_IPSEC_IKE_UNSUPPORTED_ID* = 13869
  ERROR_IPSEC_IKE_INVALID_HASH* = 13870
  ERROR_IPSEC_IKE_INVALID_HASH_ALG* = 13871
  ERROR_IPSEC_IKE_INVALID_HASH_SIZE* = 13872
  ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG* = 13873
  ERROR_IPSEC_IKE_INVALID_AUTH_ALG* = 13874
  ERROR_IPSEC_IKE_INVALID_SIG* = 13875
  ERROR_IPSEC_IKE_LOAD_FAILED* = 13876
  ERROR_IPSEC_IKE_RPC_DELETE* = 13877
  ERROR_IPSEC_IKE_BENIGN_REINIT* = 13878
  ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY* = 13879
  ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN* = 13881
  ERROR_IPSEC_IKE_MM_LIMIT* = 13882
  ERROR_IPSEC_IKE_NEGOTIATION_DISABLED* = 13883
  ERROR_IPSEC_IKE_NEG_STATUS_END* = 13884
  ERROR_SXS_SECTION_NOT_FOUND* = 13885
  ERROR_SXS_CANT_GEN_ACTCTX* = 13886
  ERROR_SXS_INVALID_ACTCTXDATA_FORMAT* = 13887
  ERROR_SXS_ASSEMBLY_NOT_FOUND* = 13888
  ERROR_SXS_MANIFEST_FORMAT_ERROR* = 13889
  ERROR_SXS_MANIFEST_PARSE_ERROR* = 13890
  ERROR_SXS_ACTIVATION_CONTEXT_DISABLED* = 13891
  ERROR_SXS_KEY_NOT_FOUND* = 13892
  ERROR_SXS_VERSION_CONFLICT* = 13893
  ERROR_SXS_WRONG_SECTION_TYPE* = 13894
  ERROR_SXS_THREAD_QUERIES_DISABLED* = 13895
  ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET* = 13896
  ERROR_SXS_UNKNOWN_ENCODING_GROUP* = 13897
  ERROR_SXS_UNKNOWN_ENCODING* = 13898
  ERROR_SXS_INVALID_XML_NAMESPACE_URI* = 13899
  ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED* = 13900
  ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED* = 13901
  ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE* = 13902
  ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE* = 13903
  ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE* = 13904
  ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT* = 13905
  ERROR_SXS_DUPLICATE_DLL_NAME* = 13906
  ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME* = 13907
  ERROR_SXS_DUPLICATE_CLSID* = 13908
  ERROR_SXS_DUPLICATE_IID* = 13909
  ERROR_SXS_DUPLICATE_TLBID* = 13910
  ERROR_SXS_DUPLICATE_PROGID* = 13911
  ERROR_SXS_DUPLICATE_ASSEMBLY_NAME* = 13912
  ERROR_SXS_FILE_HASH_MISMATCH* = 13913
  ERROR_SXS_POLICY_PARSE_ERROR* = 13914
  ERROR_SXS_XML_E_MISSINGQUOTE* = 13915
  ERROR_SXS_XML_E_COMMENTSYNTAX* = 13916
  ERROR_SXS_XML_E_BADSTARTNAMECHAR* = 13917
  ERROR_SXS_XML_E_BADNAMECHAR* = 13918
  ERROR_SXS_XML_E_BADCHARINSTRING* = 13919
  ERROR_SXS_XML_E_XMLDECLSYNTAX* = 13920
  ERROR_SXS_XML_E_BADCHARDATA* = 13921
  ERROR_SXS_XML_E_MISSINGWHITESPACE* = 13922
  ERROR_SXS_XML_E_EXPECTINGTAGEND* = 13923
  ERROR_SXS_XML_E_MISSINGSEMICOLON* = 13924
  ERROR_SXS_XML_E_UNBALANCEDPAREN* = 13925
  ERROR_SXS_XML_E_INTERNALERROR* = 13926
  ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE* = 13927
  ERROR_SXS_XML_E_INCOMPLETE_ENCODING* = 13928
  ERROR_SXS_XML_E_MISSING_PAREN* = 13929
  ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE* = 13930
  ERROR_SXS_XML_E_MULTIPLE_COLONS* = 13931
  ERROR_SXS_XML_E_INVALID_DECIMAL* = 13932
  ERROR_SXS_XML_E_INVALID_HEXIDECIMAL* = 13933
  ERROR_SXS_XML_E_INVALID_UNICODE* = 13934
  ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK* = 13935
  ERROR_SXS_XML_E_UNEXPECTEDENDTAG* = 13936
  ERROR_SXS_XML_E_UNCLOSEDTAG* = 13937
  ERROR_SXS_XML_E_DUPLICATEATTRIBUTE* = 13938
  ERROR_SXS_XML_E_MULTIPLEROOTS* = 13939
  ERROR_SXS_XML_E_INVALIDATROOTLEVEL* = 13940
  ERROR_SXS_XML_E_BADXMLDECL* = 13941
  ERROR_SXS_XML_E_MISSINGROOT* = 13942
  ERROR_SXS_XML_E_UNEXPECTEDEOF* = 13943
  ERROR_SXS_XML_E_BADPEREFINSUBSET* = 13944
  ERROR_SXS_XML_E_UNCLOSEDSTARTTAG* = 13945
  ERROR_SXS_XML_E_UNCLOSEDENDTAG* = 13946
  ERROR_SXS_XML_E_UNCLOSEDSTRING* = 13947
  ERROR_SXS_XML_E_UNCLOSEDCOMMENT* = 13948
  ERROR_SXS_XML_E_UNCLOSEDDECL* = 13949
  ERROR_SXS_XML_E_UNCLOSEDCDATA* = 13950
  ERROR_SXS_XML_E_RESERVEDNAMESPACE* = 13951
  ERROR_SXS_XML_E_INVALIDENCODING* = 13952
  ERROR_SXS_XML_E_INVALIDSWITCH* = 13953
  ERROR_SXS_XML_E_BADXMLCASE* = 13954
  ERROR_SXS_XML_E_INVALID_STANDALONE* = 13955
  ERROR_SXS_XML_E_UNEXPECTED_STANDALONE* = 13956
  ERROR_SXS_XML_E_INVALID_VERSION* = 13957
  ERROR_SXS_XML_E_MISSINGEQUALS* = 13958
  ERROR_SXS_PROTECTION_RECOVERY_FAILED* = 13959
  ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT* = 13960
  ERROR_SXS_PROTECTION_CATALOG_NOT_VALID* = 13961
  ERROR_SXS_UNTRANSLATABLE_HRESULT* = 13962
  ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING* = 13963
  ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE* = 13964
  ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME* = 13965
  S_OK* = 0x00000000
  S_FALSE* = 0x00000001
  # NOERROR* = 0x00000000.HRESULT
  E_PENDING* = -2147483638
  E_NOTIMPL* = -2147467263
  E_NOINTERFACE* = -2147467262
  E_POINTER* = -2147467261
  E_ABORT* = -2147467260
  E_FAIL* = -2147467259
  E_ACCESSDENIED* = -2147024891
  E_HANDLE* = -2147024890
  E_OUTOFMEMORY* = -2147024882
  E_INVALIDARG* = -2147024809
  E_UNEXPECTED* = -2147418113
  CO_E_INIT_TLS* = -2147467258
  CO_E_INIT_SHARED_ALLOCATOR* = -2147467257
  CO_E_INIT_MEMORY_ALLOCATOR* = -2147467256
  CO_E_INIT_CLASS_CACHE* = -2147467255
  CO_E_INIT_RPC_CHANNEL* = -2147467254
  CO_E_INIT_TLS_SET_CHANNEL_CONTROL* = -2147467253
  CO_E_INIT_TLS_CHANNEL_CONTROL* = -2147467252
  CO_E_INIT_UNACCEPTED_USER_ALLOCATOR* = -2147467251
  CO_E_INIT_SCM_MUTEX_EXISTS* = -2147467250
  CO_E_INIT_SCM_FILE_MAPPING_EXISTS* = -2147467249
  CO_E_INIT_SCM_MAP_VIEW_OF_FILE* = -2147467248
  CO_E_INIT_SCM_EXEC_FAILURE* = -2147467247
  CO_E_INIT_ONLY_SINGLE_THREADED* = -2147467246
  RPC_E_CALL_REJECTED* = -2147418111
  RPC_E_CALL_CANCELED* = -2147418110
  RPC_E_CANTPOST_INSENDCALL* = -2147418109
  RPC_E_CANTCALLOUT_INASYNCCALL* = -2147418108
  RPC_E_CANTCALLOUT_INEXTERNALCALL* = -2147418107
  RPC_E_CONNECTION_TERMINATED* = -2147418106
  RPC_E_SERVER_DIED* = -2147418105
  RPC_E_CLIENT_DIED* = -2147418104
  RPC_E_INVALID_DATAPACKET* = -2147418103
  RPC_E_CANTTRANSMIT_CALL* = -2147418102
  RPC_E_CLIENT_CANTMARSHAL_DATA* = -2147418101
  RPC_E_CLIENT_CANTUNMARSHAL_DATA* = -2147418100
  RPC_E_SERVER_CANTMARSHAL_DATA* = -2147418099
  RPC_E_SERVER_CANTUNMARSHAL_DATA* = -2147418098
  RPC_E_INVALID_DATA* = -2147418097
  RPC_E_INVALID_PARAMETER* = -2147418096
  RPC_E_CANTCALLOUT_AGAIN* = -2147418095
  RPC_E_SERVER_DIED_DNE* = -2147418094
  RPC_E_SYS_CALL_FAILED* = -2147417856
  RPC_E_OUT_OF_RESOURCES* = -2147417855
  RPC_E_ATTEMPTED_MULTITHREAD* = -2147417854
  RPC_E_NOT_REGISTERED* = -2147417853
  RPC_E_FAULT* = -2147417852
  RPC_E_SERVERFAULT* = -2147417851
  RPC_E_CHANGED_MODE* = -2147417850
  RPC_E_INVALIDMETHOD* = -2147417849
  RPC_E_DISCONNECTED* = -2147417848
  RPC_E_RETRY* = -2147417847
  RPC_E_SERVERCALL_RETRYLATER* = -2147417846
  RPC_E_SERVERCALL_REJECTED* = -2147417845
  RPC_E_INVALID_CALLDATA* = -2147417844
  RPC_E_CANTCALLOUT_ININPUTSYNCCALL* = -2147417843
  RPC_E_WRONG_THREAD* = -2147417842
  RPC_E_THREAD_NOT_INIT* = -2147417841
  RPC_E_UNEXPECTED* = -2147352577
  DISP_E_UNKNOWNINTERFACE* = -2147352575
  DISP_E_MEMBERNOTFOUND* = -2147352573
  DISP_E_PARAMNOTFOUND* = -2147352572
  DISP_E_TYPEMISMATCH* = -2147352571
  DISP_E_UNKNOWNNAME* = -2147352570
  DISP_E_NONAMEDARGS* = -2147352569
  DISP_E_BADVARTYPE* = -2147352568
  DISP_E_EXCEPTION* = -2147352567
  DISP_E_OVERFLOW* = -2147352566
  DISP_E_BADINDEX* = -2147352565
  DISP_E_UNKNOWNLCID* = -2147352564
  DISP_E_ARRAYISLOCKED* = -2147352563
  DISP_E_BADPARAMCOUNT* = -2147352562
  DISP_E_PARAMNOTOPTIONAL* = -2147352561
  DISP_E_BADCALLEE* = -2147352560
  DISP_E_NOTACOLLECTION* = -2147352559
  DISP_E_DIVBYZERO* = -2147352558
  TYPE_E_BUFFERTOOSMALL* = -2147319786
  TYPE_E_INVDATAREAD* = -2147319784
  TYPE_E_UNSUPFORMAT* = -2147319783
  TYPE_E_REGISTRYACCESS* = -2147319780
  TYPE_E_LIBNOTREGISTERED* = -2147319779
  TYPE_E_UNDEFINEDTYPE* = -2147319769
  TYPE_E_QUALIFIEDNAMEDISALLOWED* = -2147319768
  TYPE_E_INVALIDSTATE* = -2147319767
  TYPE_E_WRONGTYPEKIND* = -2147319766
  TYPE_E_ELEMENTNOTFOUND* = -2147319765
  TYPE_E_AMBIGUOUSNAME* = -2147319764
  TYPE_E_NAMECONFLICT* = -2147319763
  TYPE_E_UNKNOWNLCID* = -2147319762
  TYPE_E_DLLFUNCTIONNOTFOUND* = -2147319761
  TYPE_E_BADMODULEKIND* = -2147317571
  TYPE_E_SIZETOOBIG* = -2147317563
  TYPE_E_DUPLICATEID* = -2147317562
  TYPE_E_INVALIDID* = -2147317553
  TYPE_E_TYPEMISMATCH* = -2147316576
  TYPE_E_OUTOFBOUNDS* = -2147316575
  TYPE_E_IOERROR* = -2147316574
  TYPE_E_CANTCREATETMPFILE* = -2147316573
  TYPE_E_CANTLOADLIBRARY* = -2147312566
  TYPE_E_INCONSISTENTPROPFUNCS* = -2147312509
  TYPE_E_CIRCULARTYPE* = -2147312508
  STG_E_INVALIDFUNCTION* = -2147287039
  STG_E_FILENOTFOUND* = -2147287038
  STG_E_PATHNOTFOUND* = -2147287037
  STG_E_TOOMANYOPENFILES* = -2147287036
  STG_E_ACCESSDENIED* = -2147287035
  STG_E_INVALIDHANDLE* = -2147287034
  STG_E_INSUFFICIENTMEMORY* = -2147287032
  STG_E_INVALIDPOINTER* = -2147287031
  STG_E_NOMOREFILES* = -2147287022
  STG_E_DISKISWRITEPROTECTED* = -2147287021
  STG_E_SEEKERROR* = -2147287015
  STG_E_WRITEFAULT* = -2147287011
  STG_E_READFAULT* = -2147287010
  STG_E_SHAREVIOLATION* = -2147287008
  STG_E_LOCKVIOLATION* = -2147287007
  STG_E_FILEALREADYEXISTS* = -2147286960
  STG_E_INVALIDPARAMETER* = -2147286953
  STG_E_MEDIUMFULL* = -2147286928
  STG_E_ABNORMALAPIEXIT* = -2147286790
  STG_E_INVALIDHEADER* = -2147286789
  STG_E_INVALIDNAME* = -2147286788
  STG_E_UNKNOWN* = -2147286787
  STG_E_UNIMPLEMENTEDFUNCTION* = -2147286786
  STG_E_INVALIDFLAG* = -2147286785
  STG_E_INUSE* = -2147286784
  STG_E_NOTCURRENT* = -2147286783
  STG_E_REVERTED* = -2147286782
  STG_E_CANTSAVE* = -2147286781
  STG_E_OLDFORMAT* = -2147286780
  STG_E_OLDDLL* = -2147286779
  STG_E_SHAREREQUIRED* = -2147286778
  STG_E_NOTFILEBASEDSTORAGE* = -2147286777
  STG_E_EXTANTMARSHALLINGS* = -2147286776
  STG_S_CONVERTED* = 0x00030200
  OLE_E_FIRST* = -2147221504
  OLE_S_FIRST* = 0x00040000
  OLE_E_OLEVERB* = -2147221504
  OLE_S_USEREG* = 0x00040000
  OLE_E_ADVF* = -2147221503
  OLE_S_STATIC* = 0x00040001
  OLE_E_ENUM_NOMORE* = -2147221502
  OLE_S_MAC_CLIPFORMAT* = 0x00040002
  OLE_E_ADVISENOTSUPPORTED* = -2147221501
  OLE_E_NOCONNECTION* = -2147221500
  OLE_E_NOTRUNNING* = -2147221499
  OLE_E_NOCACHE* = -2147221498
  OLE_E_BLANK* = -2147221497
  OLE_E_CLASSDIFF* = -2147221496
  OLE_E_CANT_GETMONIKER* = -2147221495
  OLE_E_CANT_BINDTOSOURCE* = -2147221494
  OLE_E_STATIC* = -2147221493
  OLE_E_PROMPTSAVECANCELLED* = -2147221492
  OLE_E_INVALIDRECT* = -2147221491
  OLE_E_WRONGCOMPOBJ* = -2147221490
  OLE_E_INVALIDHWND* = -2147221489
  OLE_E_NOT_INPLACEACTIVE* = -2147221488
  OLE_E_CANTCONVERT* = -2147221487
  OLE_E_NOSTORAGE* = -2147221486
  DV_E_FORMATETC* = -2147221404
  DV_E_DVTARGETDEVICE* = -2147221403
  DV_E_STGMEDIUM* = -2147221402
  DV_E_STATDATA* = -2147221401
  DV_E_LINDEX* = -2147221400
  DV_E_TYMED* = -2147221399
  DV_E_CLIPFORMAT* = -2147221398
  DV_E_DVASPECT* = -2147221397
  DV_E_DVTARGETDEVICE_SIZE* = -2147221396
  DV_E_NOIVIEWOBJECT* = -2147221395
  OLE_E_LAST* = -2147221249
  OLE_S_LAST* = 0x000400FF
  DRAGDROP_E_FIRST* = -2147221248
  DRAGDROP_S_FIRST* = 0x00040100
  DRAGDROP_E_NOTREGISTERED* = -2147221248
  DRAGDROP_S_DROP* = 0x00040100
  DRAGDROP_E_ALREADYREGISTERED* = -2147221247
  DRAGDROP_S_CANCEL* = 0x00040101
  DRAGDROP_E_INVALIDHWND* = -2147221246
  DRAGDROP_S_USEDEFAULTCURSORS* = 0x00040102
  DRAGDROP_E_LAST* = -2147221233
  DRAGDROP_S_LAST* = 0x0004010F
  CLASSFACTORY_E_FIRST* = -2147221232
  CLASSFACTORY_S_FIRST* = 0x00040110
  CLASS_E_NOAGGREGATION* = -2147221232
  CLASS_E_CLASSNOTAVAILABLE* = -2147221231
  CLASSFACTORY_E_LAST* = -2147221217
  CLASSFACTORY_S_LAST* = 0x0004011F
  MARSHAL_E_FIRST* = -2147221216
  MARSHAL_S_FIRST* = 0x00040120
  MARSHAL_E_LAST* = -2147221201
  MARSHAL_S_LAST* = 0x0004012F
  DATA_E_FIRST* = -2147221200
  DATA_S_FIRST* = 0x00040130
  DATA_S_SAMEFORMATETC* = 0x00040130
  DATA_E_LAST* = -2147221185
  DATA_S_LAST* = 0x0004013F
  VIEW_E_FIRST* = -2147221184
  VIEW_S_FIRST* = 0x00040140
  VIEW_E_DRAW* = -2147221184
  VIEW_S_ALREADY_FROZEN* = 0x00040140
  VIEW_E_LAST* = -2147221169
  VIEW_S_LAST* = 0x0004014F
  REGDB_E_FIRST* = -2147221168
  REGDB_S_FIRST* = 0x00040150
  REGDB_E_READREGDB* = -2147221168
  REGDB_E_WRITEREGDB* = -2147221167
  REGDB_E_KEYMISSING* = -2147221166
  REGDB_E_INVALIDVALUE* = -2147221165
  REGDB_E_CLASSNOTREG* = -2147221164
  REGDB_E_IIDNOTREG* = -2147221163
  REGDB_E_LAST* = -2147221153
  REGDB_S_LAST* = 0x0004015F
  CACHE_E_FIRST* = -2147221136
  CACHE_S_FIRST* = 0x00040170
  CACHE_E_NOCACHE_UPDATED* = -2147221136
  CACHE_S_FORMATETC_NOTSUPPORTED* = 0x00040170
  CACHE_S_SAMECACHE* = 0x00040171
  CACHE_S_SOMECACHES_NOTUPDATED* = 0x00040172
  CACHE_E_LAST* = -2147221121
  CACHE_S_LAST* = 0x0004017F
  OLEOBJ_E_FIRST* = -2147221120
  OLEOBJ_S_FIRST* = 0x00040180
  OLEOBJ_E_NOVERBS* = -2147221120
  OLEOBJ_S_INVALIDVERB* = 0x00040180
  OLEOBJ_E_INVALIDVERB* = -2147221119
  OLEOBJ_S_CANNOT_DOVERB_NOW* = 0x00040181
  OLEOBJ_S_INVALIDHWND* = 0x00040182
  OLEOBJ_E_LAST* = -2147221105
  OLEOBJ_S_LAST* = 0x0004018F
  CLIENTSITE_E_FIRST* = -2147221104
  CLIENTSITE_S_FIRST* = 0x00040190
  CLIENTSITE_E_LAST* = -2147221089
  CLIENTSITE_S_LAST* = 0x0004019F
  INPLACE_E_NOTUNDOABLE* = -2147221088
  INPLACE_E_FIRST* = -2147221088
  INPLACE_S_FIRST* = 0x000401A0
  INPLACE_S_TRUNCATED* = 0x000401A0
  INPLACE_E_NOTOOLSPACE* = -2147221087
  INPLACE_E_LAST* = -2147221073
  INPLACE_S_LAST* = 0x000401AF
  ENUM_E_FIRST* = -2147221072
  ENUM_S_FIRST* = 0x000401B0
  ENUM_E_LAST* = -2147221057
  ENUM_S_LAST* = 0x000401BF
  CONVERT10_E_FIRST* = -2147221056
  CONVERT10_S_FIRST* = 0x000401C0
  CONVERT10_E_OLESTREAM_GET* = -2147221056
  CONVERT10_S_NO_PRESENTATION* = 0x000401C0
  CONVERT10_E_OLESTREAM_PUT* = -2147221055
  CONVERT10_E_OLESTREAM_FMT* = -2147221054
  CONVERT10_E_OLESTREAM_BITMAP_TO_DIB* = -2147221053
  CONVERT10_E_STG_FMT* = -2147221052
  CONVERT10_E_STG_NO_STD_STREAM* = -2147221051
  CONVERT10_E_STG_DIB_TO_BITMAP* = -2147221050
  CONVERT10_E_LAST* = -2147221041
  CONVERT10_S_LAST* = 0x000401CF
  CLIPBRD_E_FIRST* = -2147221040
  CLIPBRD_S_FIRST* = 0x000401D0
  CLIPBRD_E_CANT_OPEN* = -2147221040
  CLIPBRD_E_CANT_EMPTY* = -2147221039
  CLIPBRD_E_CANT_SET* = -2147221038
  CLIPBRD_E_BAD_DATA* = -2147221037
  CLIPBRD_E_CANT_CLOSE* = -2147221036
  CLIPBRD_E_LAST* = -2147221025
  CLIPBRD_S_LAST* = 0x000401DF
  MK_E_FIRST* = -2147221024
  MK_S_FIRST* = 0x000401E0
  MK_E_CONNECTMANUALLY* = -2147221024
  MK_E_EXCEEDEDDEADLINE* = -2147221023
  MK_E_NEEDGENERIC* = -2147221022
  MK_S_REDUCED_TO_SELF* = 0x000401E2
  MK_E_UNAVAILABLE* = -2147221021
  MK_E_SYNTAX* = -2147221020
  MK_S_ME* = 0x000401E4
  MK_E_NOOBJECT* = -2147221019
  MK_S_HIM* = 0x000401E5
  MK_E_INVALIDEXTENSION* = -2147221018
  MK_S_US* = 0x000401E6
  MK_E_INTERMEDIATEINTERFACENOTSUPPORTED* = -2147221017
  MK_S_MONIKERALREADYREGISTERED* = 0x000401E7
  MK_E_NOTBINDABLE* = -2147221016
  MK_E_NOTBOUND* = -2147221015
  MK_E_CANTOPENFILE* = -2147221014
  MK_E_MUSTBOTHERUSER* = -2147221013
  MK_E_NOINVERSE* = -2147221012
  MK_E_NOSTORAGE* = -2147221011
  MK_E_NOPREFIX* = -2147221010
  MK_E_LAST* = -2147221009
  MK_S_LAST* = 0x000401EF
  MK_E_ENUMERATION_FAILED* = -2147221009
  CO_E_FIRST* = -2147221008
  CO_S_FIRST* = 0x000401F0
  CO_E_NOTINITIALIZED* = -2147221008
  CO_E_ALREADYINITIALIZED* = -2147221007
  CO_E_CANTDETERMINECLASS* = -2147221006
  CO_E_CLASSSTRING* = -2147221005
  CO_E_IIDSTRING* = -2147221004
  CO_E_APPNOTFOUND* = -2147221003
  CO_E_APPSINGLEUSE* = -2147221002
  CO_E_ERRORINAPP* = -2147221001
  CO_E_DLLNOTFOUND* = -2147221000
  CO_E_ERRORINDLL* = -2147220999
  CO_E_WRONGOSFORAPP* = -2147220998
  CO_E_OBJNOTREG* = -2147220997
  CO_E_OBJISREG* = -2147220996
  CO_E_OBJNOTCONNECTED* = -2147220995
  CO_E_APPDIDNTREG* = -2147220994
  CO_E_LAST* = -2147220993
  CO_S_LAST* = 0x000401FF
  CO_E_RELEASED* = -2147220993
  CO_E_CLASS_CREATE_FAILED* = -2146959359
  CO_E_SCM_ERROR* = -2146959358
  CO_E_SCM_RPC_FAILURE* = -2146959357
  CO_E_BAD_PATH* = -2146959356
  CO_E_SERVER_EXEC_FAILURE* = -2146959355
  CO_E_OBJSRV_RPC_FAILURE* = -2146959354
  MK_E_NO_NORMALIZED* = -2146959353
  CO_E_SERVER_STOPPING* = -2146959352
  MEM_E_INVALID_ROOT* = -2146959351
  MEM_E_INVALID_LINK* = -2146959344
  MEM_E_INVALID_SIZE* = -2146959343
  CO_S_NOTALLINTERFACES* = 0x00080012
  NTE_BAD_UID* = -2146893823
  NTE_BAD_HASH* = -2146893822
  NTE_BAD_KEY* = -2146893821
  NTE_BAD_LEN* = -2146893820
  NTE_BAD_DATA* = -2146893819
  NTE_BAD_SIGNATURE* = -2146893818
  NTE_BAD_VER* = -2146893817
  NTE_BAD_ALGID* = -2146893816
  NTE_BAD_FLAGS* = -2146893815
  NTE_BAD_TYPE* = -2146893814
  NTE_BAD_KEY_STATE* = -2146893813
  NTE_BAD_HASH_STATE* = -2146893812
  NTE_NO_KEY* = -2146893811
  NTE_NO_MEMORY* = -2146893810
  NTE_EXISTS* = -2146893809
  NTE_PERM* = -2146893808
  NTE_NOT_FOUND* = -2146893807
  NTE_DOUBLE_ENCRYPT* = -2146893806
  NTE_BAD_PROVIDER* = -2146893805
  NTE_BAD_PROV_TYPE* = -2146893804
  NTE_BAD_PUBLIC_KEY* = -2146893803
  NTE_BAD_KEYSET* = -2146893802
  NTE_PROV_TYPE_NOT_DEF* = -2146893801
  NTE_PROV_TYPE_ENTRY_BAD* = -2146893800
  NTE_KEYSET_NOT_DEF* = -2146893799
  NTE_KEYSET_ENTRY_BAD* = -2146893798
  NTE_PROV_TYPE_NO_MATCH* = -2146893797
  NTE_SIGNATURE_FILE_BAD* = -2146893796
  NTE_PROVIDER_DLL_FAIL* = -2146893795
  NTE_PROV_DLL_NOT_FOUND* = -2146893794
  NTE_BAD_KEYSET_PARAM* = -2146893793
  NTE_FAIL* = -2146893792
  NTE_SYS_ERR* = -2146893791
  SEVERITY_SUCCESS* = 0
  SEVERITY_ERROR* = 1
  FACILITY_NULL* = 0
  FACILITY_RPC* = 1
  FACILITY_DISPATCH* = 2
  FACILITY_STORAGE* = 3
  FACILITY_ITF* = 4
  FACILITY_WIN32* = 7
  FACILITY_WINDOWS* = 8
  FACILITY_CONTROL* = 10
  FACILITY_NT_BIT* = 0x10000000


proc SUCCEEDED*(Status: HRESULT): bool = Status >= 0
proc FAILED*(Status: HRESULT): bool = Status < 0
proc IS_ERROR*(Status: HRESULT): bool = ( Status shr 31 ) == SEVERITY_ERROR
proc HRESULT_CODE*(r: HRESULT): uint16 = r and 0xFFFF
proc SCODE_CODE*(r: SCODE): uint16 = r and 0xFFFF
proc HRESULT_FACILITY*(r: HRESULT): uint16 = (r shr 16) and 0x1fff
proc SCODE_FACILITY*(r: SCODE): uint16 = (r shr 16) and 0x1fff
proc HRESULT_SEVERITY*(r: HRESULT): uint16 = ( r shr 31 ) and 0x1
proc SCODE_SEVERITY*(r: SCODE): uint16 = (r shr 31) and 0x1
proc MAKE_HRESULT*(s: BOOL, f: uint32, c: uint32): HRESULT = (s.HRESULT shl 31) or (f shl 16).HRESULT or c.HRESULT
proc MAKE_SCODE*(s: BOOL, f: uint32, c: uint32): SCODE = (s.SCODE shl 31) or (f shl 16).SCODE or c.SCODE
proc GetScode*(hr: HRESULT): SCODE = hr
proc ResultFromScode*(c: SCODE): HRESULT = c
proc HRESULT_FROM_NT*(x: HRESULT): HRESULT = x or FACILITY_NT_BIT.HRESULT
proc HRESULT_FROM_WIN32*(x: HRESULT): HRESULT = (if x != 0: (x and 0x0000FFFF).HRESULT or (FACILITY_WIN32 shl 16).HRESULT or 0x80000000'i32 else: 0)
proc PropagateResult*(hrPrevious: HRESULT, scBase: SCODE): HRESULT = scBase

# core/wincon.nim

const
  FOREGROUND_BLUE* = 1
  FOREGROUND_GREEN* = 2
  FOREGROUND_RED* = 4
  FOREGROUND_INTENSITY* = 8
  BACKGROUND_BLUE* = 16
  BACKGROUND_GREEN* = 32
  BACKGROUND_RED* = 64
  BACKGROUND_INTENSITY* = 128
  CONSOLE_FULLSCREEN_MODE* = 1
  CONSOLE_WINDOWED_MODE* = 0
  CTRL_C_EVENT* = 0
  CTRL_BREAK_EVENT* = 1
  CTRL_CLOSE_EVENT* = 2
  CTRL_LOGOFF_EVENT* = 5
  CTRL_SHUTDOWN_EVENT* = 6
  ENABLE_PROCESSED_INPUT* = 1
  ENABLE_LINE_INPUT* = 2
  ENABLE_ECHO_INPUT* = 4
  ENABLE_WINDOW_INPUT* = 8
  ENABLE_MOUSE_INPUT* = 16
  ENABLE_PROCESSED_OUTPUT* = 1
  ENABLE_WRAP_AT_EOL_OUTPUT* = 2
  KEY_EVENT* = 1
  MOUSE_EVENT* = 2
  WINDOW_BUFFER_SIZE_EVENT* = 4
  MENU_EVENT* = 8
  FOCUS_EVENT* = 16
  RIGHT_ALT_PRESSED* = 1
  LEFT_ALT_PRESSED* = 2
  RIGHT_CTRL_PRESSED* = 4
  LEFT_CTRL_PRESSED* = 8
  SHIFT_PRESSED* = 16
  NUMLOCK_ON* = 32
  SCROLLLOCK_ON* = 64
  CAPSLOCK_ON* = 128
  ENHANCED_KEY* = 256
  FROM_LEFT_1ST_BUTTON_PRESSED* = 1
  RIGHTMOST_BUTTON_PRESSED* = 2
  FROM_LEFT_2ND_BUTTON_PRESSED* = 4
  FROM_LEFT_3RD_BUTTON_PRESSED* = 8
  FROM_LEFT_4TH_BUTTON_PRESSED* = 16
  MOUSE_MOVED* = 1
  DOUBLE_CLICK* = 2
  MOUSE_WHEELED* = 4

type
  CHAR_INFO_Char* {.final, union, pure.} = object
    UnicodeChar*: WCHAR
    AsciiChar*: CHAR
  CHAR_INFO* {.final, pure.} = object
    Char*: CHAR_INFO_Char
    Attributes*: WORD
  PCHAR_INFO* = ptr CHAR_INFO
  SMALL_RECT* {.final, pure.} = object
    Left*: SHORT
    Top*: SHORT
    Right*: SHORT
    Bottom*: SHORT
  PSMALL_RECT* = ptr SMALL_RECT
  CONSOLE_CURSOR_INFO* {.final, pure.} = object
    dwSize*: DWORD
    bVisible*: BOOL
  PCONSOLE_CURSOR_INFO* = ptr CONSOLE_CURSOR_INFO
  COORD* {.final, pure.} = object
    X*: SHORT
    Y*: SHORT
  PCOORD* = ptr COORD
  CONSOLE_FONT_INFO* {.final, pure.} = object
    nFont*: DWORD
    dwFontSize*: COORD
  PCONSOLE_FONT_INFO* = ptr CONSOLE_FONT_INFO
  CONSOLE_SCREEN_BUFFER_INFO* {.final, pure.} = object
    dwSize*: COORD
    dwCursorPosition*: COORD
    wAttributes*: WORD
    srWindow*: SMALL_RECT
    dwMaximumWindowSize*: COORD
  PCONSOLE_SCREEN_BUFFER_INFO* = ptr CONSOLE_SCREEN_BUFFER_INFO
  PHANDLER_ROUTINE* = proc (P1: DWORD): BOOL {.stdcall.}
  KEY_EVENT_RECORD_uChar* {.final, union, pure.} = object
    UnicodeChar*: WCHAR
    AsciiChar*: CHAR
  KEY_EVENT_RECORD* {.final, pure.} = object
    bKeyDown*: BOOL
    wRepeatCount*: WORD
    wVirtualKeyCode*: WORD
    wVirtualScanCode*: WORD
    uChar*: KEY_EVENT_RECORD_uChar
    dwControlKeyState*: DWORD
  MOUSE_EVENT_RECORD* {.final, pure.} = object
    dwMousePosition*: COORD
    dwButtonState*: DWORD
    dwControlKeyState*: DWORD
    dwEventFlags*: DWORD
  WINDOW_BUFFER_SIZE_RECORD* {.final, pure.} = object
    dwSize*: COORD
  MENU_EVENT_RECORD* {.final, pure.} = object
    dwCommandId*: UINT
  PMENU_EVENT_RECORD* = ptr MENU_EVENT_RECORD
  FOCUS_EVENT_RECORD* {.final, pure.} = object
    bSetFocus*: BOOL
  INPUT_RECORD_Event* {.final, union, pure.} = object
    KeyEvent*: KEY_EVENT_RECORD
    MouseEvent*: MOUSE_EVENT_RECORD
    WindowBufferSizeEvent*: WINDOW_BUFFER_SIZE_RECORD
    MenuEvent*: MENU_EVENT_RECORD
    FocusEvent*: FOCUS_EVENT_RECORD
  INPUT_RECORD* {.final, pure.} = object
    EventType*: WORD
    Event*: INPUT_RECORD_Event
  PINPUT_RECORD* = ptr INPUT_RECORD

proc AllocConsole*(): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CreateConsoleScreenBuffer*(P1: DWORD, P2: DWORD, P3: ptr SECURITY_ATTRIBUTES, P4: DWORD, P5: LPVOID): HANDLE {.winapi, dynlib: "kernel32", importc.}
proc FillConsoleOutputAttribute*(P1: HANDLE, P2: WORD, P3: DWORD, P4: COORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FillConsoleOutputCharacterA*(P1: HANDLE, P2: CHAR, P3: DWORD, P4: COORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FillConsoleOutputCharacterW*(P1: HANDLE, P2: WCHAR, P3: DWORD, P4: COORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FlushConsoleInputBuffer*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FreeConsole*(): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GenerateConsoleCtrlEvent*(P1: DWORD, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetConsoleCP*(): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetConsoleCursorInfo*(P1: HANDLE, P2: PCONSOLE_CURSOR_INFO): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetConsoleMode*(P1: HANDLE, P2: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetConsoleOutputCP*(): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetConsoleScreenBufferInfo*(P1: HANDLE, P2: PCONSOLE_SCREEN_BUFFER_INFO): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetConsoleTitleA*(P1: LPSTR, P2: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetConsoleTitleW*(P1: LPWSTR, P2: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetLargestConsoleWindowSize*(P1: HANDLE): COORD {.winapi, dynlib: "kernel32", importc.}
proc GetNumberOfConsoleInputEvents*(P1: HANDLE, P2: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetNumberOfConsoleMouseButtons*(P1: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc PeekConsoleInputA*(P1: HANDLE, P2: PINPUT_RECORD, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc PeekConsoleInputW*(P1: HANDLE, P2: PINPUT_RECORD, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ReadConsoleA*(P1: HANDLE, P2: PVOID, P3: DWORD, P4: PDWORD, P5: PVOID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ReadConsoleW*(P1: HANDLE, P2: PVOID, P3: DWORD, P4: PDWORD, P5: PVOID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ReadConsoleInputA*(P1: HANDLE, P2: PINPUT_RECORD, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ReadConsoleInputW*(P1: HANDLE, P2: PINPUT_RECORD, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ReadConsoleOutputAttribute*(P1: HANDLE, P2: LPWORD, P3: DWORD, P4: COORD, P5: LPDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ReadConsoleOutputCharacterA*(P1: HANDLE, P2: LPSTR, P3: DWORD, P4: COORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ReadConsoleOutputCharacterW*(P1: HANDLE, P2: LPWSTR, P3: DWORD, P4: COORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ReadConsoleOutputA*(P1: HANDLE, P2: PCHAR_INFO, P3: COORD, P4: COORD, P5: PSMALL_RECT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ReadConsoleOutputW*(P1: HANDLE, P2: PCHAR_INFO, P3: COORD, P4: COORD, P5: PSMALL_RECT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ScrollConsoleScreenBufferA*(P1: HANDLE, P2: ptr SMALL_RECT, P3: ptr SMALL_RECT, P4: COORD, P5: ptr CHAR_INFO): BOOL {.winapi, dynlib: "kernel32", importc.}
proc ScrollConsoleScreenBufferW*(P1: HANDLE, P2: ptr SMALL_RECT, P3: ptr SMALL_RECT, P4: COORD, P5: ptr CHAR_INFO): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetConsoleActiveScreenBuffer*(P1: HANDLE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetConsoleCP*(P1: UINT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetConsoleCtrlHandler*(P1: PHANDLER_ROUTINE, P2: BOOL): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetConsoleCursorInfo*(P1: HANDLE, P2: ptr CONSOLE_CURSOR_INFO): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetConsoleCursorPosition*(P1: HANDLE, P2: COORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetConsoleDisplayMode*(P1: LPDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetConsoleWindow*(): HWND {.winapi, dynlib: "kernel32", importc.}
proc AttachConsole*(P1: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetConsoleDisplayMode*(P1: HANDLE, P2: DWORD, P3: PCOORD): BOOL {.winapi, dynlib: "kernel32", importc.}

const
  ATTACH_PARENT_PROCESS* = 0xFFFFFFFF'u32

proc SetConsoleMode*(P1: HANDLE, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetConsoleOutputCP*(P1: UINT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetConsoleScreenBufferSize*(P1: HANDLE, P2: COORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetConsoleTextAttribute*(P1: HANDLE, P2: WORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetConsoleTitleA*(P1: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetConsoleTitleW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetConsoleWindowInfo*(P1: HANDLE, P2: BOOL, P3: ptr SMALL_RECT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WriteConsoleA*(P1: HANDLE, P2: PCVOID, P3: DWORD, P4: PDWORD, P5: PVOID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WriteConsoleW*(P1: HANDLE, P2: PCVOID, P3: DWORD, P4: PDWORD, P5: PVOID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WriteConsoleInputA*(P1: HANDLE, P2: ptr INPUT_RECORD, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WriteConsoleInputW*(P1: HANDLE, P2: ptr INPUT_RECORD, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WriteConsoleOutputA*(P1: HANDLE, P2: ptr CHAR_INFO, P3: COORD, P4: COORD, P5: PSMALL_RECT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WriteConsoleOutputW*(P1: HANDLE, P2: ptr CHAR_INFO, P3: COORD, P4: COORD, P5: PSMALL_RECT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WriteConsoleOutputAttribute*(P1: HANDLE, P2: ptr WORD, P3: DWORD, P4: COORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WriteConsoleOutputCharacterA*(P1: HANDLE, P2: LPCSTR, P3: DWORD, P4: COORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WriteConsoleOutputCharacterW*(P1: HANDLE, P2: LPCWSTR, P3: DWORD, P4: COORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}

when not defined(winansi):
  proc FillConsoleOutputCharacter*(P1: HANDLE, P2: WCHAR, P3: DWORD, P4: COORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "FillConsoleOutputCharacterW".}
  proc GetConsoleTitle*(P1: LPWSTR, P2: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "GetConsoleTitleW".}
  proc PeekConsoleInput*(P1: HANDLE, P2: PINPUT_RECORD, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "PeekConsoleInputW".}
  proc ReadConsole*(P1: HANDLE, P2: PVOID, P3: DWORD, P4: PDWORD, P5: PVOID): BOOL {.winapi, dynlib: "kernel32", importc: "ReadConsoleW".}
  proc ReadConsoleInput*(P1: HANDLE, P2: PINPUT_RECORD, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "ReadConsoleInputW".}
  proc ReadConsoleOutput*(P1: HANDLE, P2: PCHAR_INFO, P3: COORD, P4: COORD, P5: PSMALL_RECT): BOOL {.winapi, dynlib: "kernel32", importc: "ReadConsoleOutputW".}
  proc ReadConsoleOutputCharacter*(P1: HANDLE, P2: LPWSTR, P3: DWORD, P4: COORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "ReadConsoleOutputCharacterW".}
  proc ScrollConsoleScreenBuffer*(P1: HANDLE, P2: ptr SMALL_RECT, P3: ptr SMALL_RECT, P4: COORD, P5: ptr CHAR_INFO): BOOL {.winapi, dynlib: "kernel32", importc: "ScrollConsoleScreenBufferW".}
  proc SetConsoleTitle*(P1: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "SetConsoleTitleW".}
  proc WriteConsole*(P1: HANDLE, P2: PCVOID, P3: DWORD, P4: PDWORD, P5: PVOID): BOOL {.winapi, dynlib: "kernel32", importc: "WriteConsoleW".}
  proc WriteConsoleInput*(P1: HANDLE, P2: ptr INPUT_RECORD, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "WriteConsoleInputW".}
  proc WriteConsoleOutput*(P1: HANDLE, P2: ptr CHAR_INFO, P3: COORD, P4: COORD, P5: PSMALL_RECT): BOOL {.winapi, dynlib: "kernel32", importc: "WriteConsoleOutputW".}
  proc WriteConsoleOutputCharacter*(P1: HANDLE, P2: LPCWSTR, P3: DWORD, P4: COORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "WriteConsoleOutputCharacterW".}
else:
  proc FillConsoleOutputCharacter*(P1: HANDLE, P2: CHAR, P3: DWORD, P4: COORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "FillConsoleOutputCharacterA".}
  proc GetConsoleTitle*(P1: LPSTR, P2: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "GetConsoleTitleA".}
  proc PeekConsoleInput*(P1: HANDLE, P2: PINPUT_RECORD, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "PeekConsoleInputA".}
  proc ReadConsole*(P1: HANDLE, P2: PVOID, P3: DWORD, P4: PDWORD, P5: PVOID): BOOL {.winapi, dynlib: "kernel32", importc: "ReadConsoleA".}
  proc ReadConsoleInput*(P1: HANDLE, P2: PINPUT_RECORD, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "ReadConsoleInputA".}
  proc ReadConsoleOutput*(P1: HANDLE, P2: PCHAR_INFO, P3: COORD, P4: COORD, P5: PSMALL_RECT): BOOL {.winapi, dynlib: "kernel32", importc: "ReadConsoleOutputA".}
  proc ReadConsoleOutputCharacter*(P1: HANDLE, P2: LPSTR, P3: DWORD, P4: COORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "ReadConsoleOutputCharacterA".}
  proc ScrollConsoleScreenBuffer*(P1: HANDLE, P2: ptr SMALL_RECT, P3: ptr SMALL_RECT, P4: COORD, P5: ptr CHAR_INFO): BOOL {.winapi, dynlib: "kernel32", importc: "ScrollConsoleScreenBufferA".}
  proc SetConsoleTitle*(P1: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "SetConsoleTitleA".}
  proc WriteConsole*(P1: HANDLE, P2: PCVOID, P3: DWORD, P4: PDWORD, P5: PVOID): BOOL {.winapi, dynlib: "kernel32", importc: "WriteConsoleA".}
  proc WriteConsoleInput*(P1: HANDLE, P2: ptr INPUT_RECORD, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "WriteConsoleInputA".}
  proc WriteConsoleOutput*(P1: HANDLE, P2: ptr CHAR_INFO, P3: COORD, P4: COORD, P5: PSMALL_RECT): BOOL {.winapi, dynlib: "kernel32", importc: "WriteConsoleOutputA".}
  proc WriteConsoleOutputCharacter*(P1: HANDLE, P2: LPCSTR, P3: DWORD, P4: COORD, P5: PDWORD): BOOL {.winapi, dynlib: "kernel32", importc: "WriteConsoleOutputCharacterA".}

# core/winnls.nim

const
  # SYSGEOTYPE* = enum
  GEO_NATION* = 0x0001
  GEO_LATITUDE* = 0x0002
  GEO_LONGITUDE* = 0x0003
  GEO_ISO2* = 0x0004
  GEO_ISO3* = 0x0005
  GEO_RFC1766* = 0x0006
  GEO_LCID* = 0x0007
  GEO_FRIENDLYNAME* = 0x0008
  GEO_OFFICIALNAME* = 0x0009
  GEO_TIMEZONES* = 0x000a
  GEO_OFFICIALLANGUAGES* = 0x000a
  # SYSGEOCLASS* = enum
  GEOCLASS_REGION* = 14
  GEOCLASS_NATION* = 16

type
  LCTYPE* = DWORD
  CALTYPE* = DWORD
  CALID* = DWORD
  LGRPID* = DWORD
  GEOID* = DWORD
  GEOTYPE* = DWORD
  GEOCLASS* = DWORD

const
  MAX_DEFAULTCHAR* = 2
  MAX_LEADBYTES* = 12
  LOCALE_USE_CP_ACP* = 0x40000000
  LOCALE_RETURN_NUMBER* = 0x20000000
  LOCALE_ILANGUAGE* = 1
  LOCALE_SLANGUAGE* = 2
  LOCALE_SABBREVLANGNAME* = 3
  LOCALE_SNATIVELANGNAME* = 4
  LOCALE_ICOUNTRY* = 5
  LOCALE_SCOUNTRY* = 6
  LOCALE_SABBREVCTRYNAME* = 7
  LOCALE_SNATIVECTRYNAME* = 8
  LOCALE_IDEFAULTLANGUAGE* = 9
  LOCALE_IDEFAULTCOUNTRY* = 10
  LOCALE_IDEFAULTCODEPAGE* = 11
  LOCALE_SLIST* = 12
  LOCALE_IMEASURE* = 13
  LOCALE_SDECIMAL* = 14
  LOCALE_STHOUSAND* = 15
  LOCALE_SGROUPING* = 16
  LOCALE_IDIGITS* = 17
  LOCALE_ILZERO* = 18
  LOCALE_SNATIVEDIGITS* = 19
  LOCALE_SCURRENCY* = 20
  LOCALE_SINTLSYMBOL* = 21
  LOCALE_SMONDECIMALSEP* = 22
  LOCALE_SMONTHOUSANDSEP* = 23
  LOCALE_SMONGROUPING* = 24
  LOCALE_ICURRDIGITS* = 25
  LOCALE_IINTLCURRDIGITS* = 26
  LOCALE_ICURRENCY* = 27
  LOCALE_INEGCURR* = 28
  LOCALE_SDATE* = 29
  LOCALE_STIME* = 30
  LOCALE_SSHORTDATE* = 31
  LOCALE_SLONGDATE* = 32
  LOCALE_IDATE* = 33
  LOCALE_ILDATE* = 34
  LOCALE_ITIME* = 35
  LOCALE_ICENTURY* = 36
  LOCALE_ITLZERO* = 37
  LOCALE_IDAYLZERO* = 38
  LOCALE_IMONLZERO* = 39
  LOCALE_S1159* = 40
  LOCALE_S2359* = 41
  LOCALE_SDAYNAME1* = 42
  LOCALE_SDAYNAME2* = 43
  LOCALE_SDAYNAME3* = 44
  LOCALE_SDAYNAME4* = 45
  LOCALE_SDAYNAME5* = 46
  LOCALE_SDAYNAME6* = 47
  LOCALE_SDAYNAME7* = 48
  LOCALE_SABBREVDAYNAME1* = 49
  LOCALE_SABBREVDAYNAME2* = 50
  LOCALE_SABBREVDAYNAME3* = 51
  LOCALE_SABBREVDAYNAME4* = 52
  LOCALE_SABBREVDAYNAME5* = 53
  LOCALE_SABBREVDAYNAME6* = 54
  LOCALE_SABBREVDAYNAME7* = 55
  LOCALE_SMONTHNAME1* = 56
  LOCALE_SMONTHNAME2* = 57
  LOCALE_SMONTHNAME3* = 58
  LOCALE_SMONTHNAME4* = 59
  LOCALE_SMONTHNAME5* = 60
  LOCALE_SMONTHNAME6* = 61
  LOCALE_SMONTHNAME7* = 62
  LOCALE_SMONTHNAME8* = 63
  LOCALE_SMONTHNAME9* = 64
  LOCALE_SMONTHNAME10* = 65
  LOCALE_SMONTHNAME11* = 66
  LOCALE_SMONTHNAME12* = 67
  LOCALE_SABBREVMONTHNAME1* = 68
  LOCALE_SABBREVMONTHNAME2* = 69
  LOCALE_SABBREVMONTHNAME3* = 70
  LOCALE_SABBREVMONTHNAME4* = 71
  LOCALE_SABBREVMONTHNAME5* = 72
  LOCALE_SABBREVMONTHNAME6* = 73
  LOCALE_SABBREVMONTHNAME7* = 74
  LOCALE_SABBREVMONTHNAME8* = 75
  LOCALE_SABBREVMONTHNAME9* = 76
  LOCALE_SABBREVMONTHNAME10* = 77
  LOCALE_SABBREVMONTHNAME11* = 78
  LOCALE_SABBREVMONTHNAME12* = 79
  LOCALE_SPOSITIVESIGN* = 80
  LOCALE_SNEGATIVESIGN* = 81
  LOCALE_IPOSSIGNPOSN* = 82
  LOCALE_INEGSIGNPOSN* = 83
  LOCALE_IPOSSYMPRECEDES* = 84
  LOCALE_IPOSSEPBYSPACE* = 85
  LOCALE_INEGSYMPRECEDES* = 86
  LOCALE_INEGSEPBYSPACE* = 87
  LOCALE_FONTSIGNATURE* = 88
  LOCALE_SISO639LANGNAME* = 89
  LOCALE_SISO3166CTRYNAME* = 90
  LOCALE_SENGLANGUAGE* = 0x1001
  LOCALE_SENGCOUNTRY* = 0x1002
  LOCALE_IDEFAULTANSICODEPAGE* = 0x1004
  LOCALE_INEGNUMBER* = 0x1010
  LOCALE_STIMEFORMAT* = 0x1003
  LOCALE_ITIMEMARKPOSN* = 0x1005
  LOCALE_ICALENDARTYPE* = 0x1009
  LOCALE_IOPTIONALCALENDAR* = 0x100B
  LOCALE_IFIRSTDAYOFWEEK* = 0x100C
  LOCALE_IFIRSTWEEKOFYEAR* = 0x100D
  LOCALE_SMONTHNAME13* = 0x100E
  LOCALE_SABBREVMONTHNAME13* = 0x100F
  LOCALE_USER_DEFAULT* = 0x400
  LOCALE_SYSTEM_DEFAULT* = 0x800
  NORM_IGNORECASE* = 1
  NORM_IGNORENONSPACE* = 2
  NORM_IGNORESYMBOLS* = 4
  SORT_STRINGSORT* = 0x01000
  NORM_IGNOREKANATYPE* = 0x10000
  NORM_IGNOREWIDTH* = 0x20000
  LCMAP_LOWERCASE* = 0x00000100
  LCMAP_UPPERCASE* = 0x00000200
  LCMAP_SORTKEY* = 0x00000400
  LCMAP_BYTEREV* = 0x00000800
  LCMAP_HIRAGANA* = 0x00100000
  LCMAP_KATAKANA* = 0x00200000
  LCMAP_HALFWIDTH* = 0x00400000
  LCMAP_FULLWIDTH* = 0x00800000
  LCMAP_LINGUISTIC_CASING* = 0x01000000
  LCMAP_SIMPLIFIED_CHINESE* = 0x02000000
  LCMAP_TRADITIONAL_CHINESE* = 0x04000000
  ENUM_ALL_CALENDARS* = 0xFFFFFFFF.CALID
  DATE_SHORTDATE* = 1
  DATE_LONGDATE* = 2
  DATE_USE_ALT_CALENDAR* = 4
  LOCALE_NOUSEROVERRIDE* = 0x80000000'u32
  CP_INSTALLED* = 1
  CP_SUPPORTED* = 2
  LCID_INSTALLED* = 1
  LCID_SUPPORTED* = 2
  LCID_ALTERNATE_SORTS* = 4
  MAP_FOLDCZONE* = 16
  MAP_PRECOMPOSED* = 32
  MAP_COMPOSITE* = 64
  MAP_FOLDDIGITS* = 128
  CP_ACP* = 0
  CP_OEMCP* = 1
  CP_MACCP* = 2
  CP_THREAD_ACP* = 3
  CP_SYMBOL* = 42
  CP_UTF7* = 65000
  CP_UTF8* = 65001
  CT_CTYPE1* = 1
  CT_CTYPE2* = 2
  CT_CTYPE3* = 4
  C1_UPPER* = 1
  C1_LOWER* = 2
  C1_DIGIT* = 4
  C1_SPACE* = 8
  C1_PUNCT* = 16
  C1_CNTRL* = 32
  C1_BLANK* = 64
  C1_XDIGIT* = 128
  C1_ALPHA* = 256
  C2_NOTAPPLICABLE* = 0
  C2_LEFTTORIGHT* = 1
  C2_RIGHTTOLEFT* = 2
  C2_EUROPENUMBER* = 3
  C2_EUROPESEPARATOR* = 4
  C2_EUROPETERMINATOR* = 5
  C2_ARABICNUMBER* = 6
  C2_COMMONSEPARATOR* = 7
  C2_BLOCKSEPARATOR* = 8
  C2_SEGMENTSEPARATOR* = 9
  C2_WHITESPACE* = 10
  C2_OTHERNEUTRAL* = 11
  C3_NOTAPPLICABLE* = 0
  C3_NONSPACING* = 1
  C3_DIACRITIC* = 2
  C3_VOWELMARK* = 4
  C3_SYMBOL* = 8
  C3_KATAKANA* = 0x0010
  C3_HIRAGANA* = 0x0020
  C3_HALFWIDTH* = 0x0040
  C3_FULLWIDTH* = 0x0080
  C3_IDEOGRAPH* = 0x0100
  C3_KASHIDA* = 0x0200
  C3_LEXICAL* = 0x0400
  C3_ALPHA* = 0x8000
  TIME_NOMINUTESORSECONDS* = 1
  TIME_NOSECONDS* = 2
  TIME_NOTIMEMARKER* = 4
  TIME_FORCE24HOURFORMAT* = 8
  MB_PRECOMPOSED* = 1
  MB_COMPOSITE* = 2
  MB_USEGLYPHCHARS* = 4
  MB_ERR_INVALID_CHARS* = 8
  WC_DISCARDNS* = 16
  WC_SEPCHARS* = 32
  WC_DEFAULTCHAR* = 64
  WC_COMPOSITECHECK* = 512
  CTRY_DEFAULT* = 0
  CTRY_DOMINICAN_REPUBLIC* = 1
  CTRY_PUERTO_RICO* = 1
  CTRY_CARIBBEAN* = 1
  CTRY_JAMAICA* = 1
  CTRY_UNITED_STATES* = 1
  CTRY_TRINIDAD_Y_TOBAGO* = 1
  CTRY_CANADA* = 2
  CTRY_RUSSIA* = 7
  CTRY_UZBEKISTAN* = 7
  CTRY_KAZAKSTAN* = 7
  CTRY_TATARSTAN* = 7
  CTRY_EGYPT* = 20
  CTRY_SOUTH_AFRICA* = 27
  CTRY_GREECE* = 30
  CTRY_NETHERLANDS* = 31
  CTRY_BELGIUM* = 32
  CTRY_FRANCE* = 33
  CTRY_MONACO* = 33
  CTRY_SPAIN* = 34
  CTRY_HUNGARY* = 36
  CTRY_ITALY* = 39
  CTRY_ROMANIA* = 40
  CTRY_SWITZERLAND* = 41
  CTRY_LIECHTENSTEIN* = 41
  CTRY_AUSTRIA* = 43
  CTRY_UNITED_KINGDOM* = 44
  CTRY_DENMARK* = 45
  CTRY_SWEDEN* = 46
  CTRY_NORWAY* = 47
  CTRY_POLAND* = 48
  CTRY_GERMANY* = 49
  CTRY_PERU* = 51
  CTRY_MEXICO* = 52
  CTRY_ARGENTINA* = 54
  CTRY_BRAZIL* = 55
  CTRY_CHILE* = 56
  CTRY_COLOMBIA* = 57
  CTRY_VENEZUELA* = 58
  CTRY_MALAYSIA* = 60
  CTRY_AUSTRALIA* = 61
  CTRY_INDONESIA* = 62
  CTRY_PHILIPPINES* = 63
  CTRY_NEW_ZEALAND* = 64
  CTRY_SINGAPORE* = 65
  CTRY_THAILAND* = 66
  CTRY_JAPAN* = 81
  CTRY_SOUTH_KOREA* = 82
  CTRY_VIET_NAM* = 84
  CTRY_PRCHINA* = 86
  CTRY_TURKEY* = 90
  CTRY_INDIA* = 91
  CTRY_PAKISTAN* = 92
  CTRY_MOROCCO* = 212
  CTRY_ALGERIA* = 213
  CTRY_TUNISIA* = 216
  CTRY_LIBYA* = 218
  CTRY_KENYA* = 254
  CTRY_ZIMBABWE* = 263
  CTRY_FAEROE_ISLANDS* = 298
  CTRY_PORTUGAL* = 351
  CTRY_LUXEMBOURG* = 352
  CTRY_IRELAND* = 353
  CTRY_ICELAND* = 354
  CTRY_ALBANIA* = 355
  CTRY_FINLAND* = 358
  CTRY_BULGARIA* = 359
  CTRY_LITHUANIA* = 370
  CTRY_LATVIA* = 371
  CTRY_ESTONIA* = 372
  CTRY_ARMENIA* = 374
  CTRY_BELARUS* = 375
  CTRY_UKRAINE* = 380
  CTRY_SERBIA* = 381
  CTRY_CROATIA* = 385
  CTRY_SLOVENIA* = 386
  CTRY_MACEDONIA* = 389
  CTRY_CZECH* = 420
  CTRY_SLOVAK* = 421
  CTRY_BELIZE* = 501
  CTRY_GUATEMALA* = 502
  CTRY_EL_SALVADOR* = 503
  CTRY_HONDURAS* = 504
  CTRY_NICARAGUA* = 505
  CTRY_COSTA_RICA* = 506
  CTRY_PANAMA* = 507
  CTRY_BOLIVIA* = 591
  CTRY_ECUADOR* = 593
  CTRY_PARAGUAY* = 595
  CTRY_URUGUAY* = 598
  CTRY_BRUNEI_DARUSSALAM* = 673
  CTRY_HONG_KONG* = 852
  CTRY_MACAU* = 853
  CTRY_TAIWAN* = 886
  CTRY_MALDIVES* = 960
  CTRY_LEBANON* = 961
  CTRY_JORDAN* = 962
  CTRY_SYRIA* = 963
  CTRY_IRAQ* = 964
  CTRY_KUWAIT* = 965
  CTRY_SAUDI_ARABIA* = 966
  CTRY_YEMEN* = 967
  CTRY_OMAN* = 968
  CTRY_UAE* = 971
  CTRY_ISRAEL* = 972
  CTRY_BAHRAIN* = 973
  CTRY_QATAR* = 974
  CTRY_MONGOLIA* = 976
  CTRY_IRAN* = 981
  CTRY_AZERBAIJAN* = 994
  CTRY_GEORGIA* = 995
  CTRY_KYRGYZSTAN* = 996
  CAL_ICALINTVALUE* = 1
  CAL_SCALNAME* = 2
  CAL_IYEAROFFSETRANGE* = 3
  CAL_SERASTRING* = 4
  CAL_SSHORTDATE* = 5
  CAL_SLONGDATE* = 6
  CAL_SDAYNAME1* = 7
  CAL_SDAYNAME2* = 8
  CAL_SDAYNAME3* = 9
  CAL_SDAYNAME4* = 10
  CAL_SDAYNAME5* = 11
  CAL_SDAYNAME6* = 12
  CAL_SDAYNAME7* = 13
  CAL_SABBREVDAYNAME1* = 14
  CAL_SABBREVDAYNAME2* = 15
  CAL_SABBREVDAYNAME3* = 16
  CAL_SABBREVDAYNAME4* = 17
  CAL_SABBREVDAYNAME5* = 18
  CAL_SABBREVDAYNAME6* = 19
  CAL_SABBREVDAYNAME7* = 20
  CAL_SMONTHNAME1* = 21
  CAL_SMONTHNAME2* = 22
  CAL_SMONTHNAME3* = 23
  CAL_SMONTHNAME4* = 24
  CAL_SMONTHNAME5* = 25
  CAL_SMONTHNAME6* = 26
  CAL_SMONTHNAME7* = 27
  CAL_SMONTHNAME8* = 28
  CAL_SMONTHNAME9* = 29
  CAL_SMONTHNAME10* = 30
  CAL_SMONTHNAME11* = 31
  CAL_SMONTHNAME12* = 32
  CAL_SMONTHNAME13* = 33
  CAL_SABBREVMONTHNAME1* = 34
  CAL_SABBREVMONTHNAME2* = 35
  CAL_SABBREVMONTHNAME3* = 36
  CAL_SABBREVMONTHNAME4* = 37
  CAL_SABBREVMONTHNAME5* = 38
  CAL_SABBREVMONTHNAME6* = 39
  CAL_SABBREVMONTHNAME7* = 40
  CAL_SABBREVMONTHNAME8* = 41
  CAL_SABBREVMONTHNAME9* = 42
  CAL_SABBREVMONTHNAME10* = 43
  CAL_SABBREVMONTHNAME11* = 44
  CAL_SABBREVMONTHNAME12* = 45
  CAL_SABBREVMONTHNAME13* = 46
  CAL_GREGORIAN* = 1
  CAL_GREGORIAN_US* = 2
  CAL_JAPAN* = 3
  CAL_TAIWAN* = 4
  CAL_KOREA* = 5
  CAL_HIJRI* = 6
  CAL_THAI* = 7
  CAL_HEBREW* = 8
  CAL_GREGORIAN_ME_FRENCH* = 9
  CAL_GREGORIAN_ARABIC* = 10
  CAL_GREGORIAN_XLIT_ENGLISH* = 11
  CAL_GREGORIAN_XLIT_FRENCH* = 12
  CSTR_LESS_THAN* = 1
  CSTR_EQUAL* = 2
  CSTR_GREATER_THAN* = 3
  LGRPID_INSTALLED* = 1
  LGRPID_SUPPORTED* = 2
  LGRPID_WESTERN_EUROPE* = 1
  LGRPID_CENTRAL_EUROPE* = 2
  LGRPID_BALTIC* = 3
  LGRPID_GREEK* = 4
  LGRPID_CYRILLIC* = 5
  LGRPID_TURKISH* = 6
  LGRPID_JAPANESE* = 7
  LGRPID_KOREAN* = 8
  LGRPID_TRADITIONAL_CHINESE* = 9
  LGRPID_SIMPLIFIED_CHINESE* = 10
  LGRPID_THAI* = 11
  LGRPID_HEBREW* = 12
  LGRPID_ARABIC* = 13
  LGRPID_VIETNAMESE* = 14
  LGRPID_INDIC* = 15
  LGRPID_GEORGIAN* = 16
  LGRPID_ARMENIAN* = 17

const
  LOCALE_SYEARMONTH* = 0x1006
  LOCALE_SENGCURRNAME* = 0x1007
  LOCALE_SNATIVECURRNAME* = 0x1008
  LOCALE_IDEFAULTEBCDICCODEPAGE* = 0x1012
  LOCALE_SSORTNAME* = 0x1013
  LOCALE_IDIGITSUBSTITUTION* = 0x1014
  LOCALE_IPAPERSIZE* = 0x100A
  DATE_YEARMONTH* = 8
  DATE_LTRREADING* = 16
  DATE_RTLREADING* = 32
  MAP_EXPAND_LIGATURES* = 0x2000
  WC_NO_BEST_FIT_CHARS* = 1024
  CAL_SYEARMONTH* = 47
  CAL_ITWODIGITYEARMAX* = 48
  CAL_NOUSEROVERRIDE* = LOCALE_NOUSEROVERRIDE.CALTYPE
  CAL_RETURN_NUMBER* = LOCALE_RETURN_NUMBER.CALTYPE
  CAL_USE_CP_ACP* = LOCALE_USE_CP_ACP.CALTYPE

type
  CALINFO_ENUMPROCA* = proc (P1: LPSTR): BOOL {.stdcall.}
  CALINFO_ENUMPROCW* = proc (P1: LPWSTR): BOOL {.stdcall.}
  CALINFO_ENUMPROCEXA* = proc (P1: LPSTR, P2: CALID): BOOL {.stdcall.}
  CALINFO_ENUMPROCEXW* = proc (P1: LPWSTR, P2: CALID): BOOL {.stdcall.}
  LANGUAGEGROUP_ENUMPROCA* = proc (P1: LGRPID, P2: LPSTR, P3: LPSTR, P4: DWORD, P5: LONG_PTR): BOOL {.stdcall.}
  LANGUAGEGROUP_ENUMPROCW* = proc (P1: LGRPID, P2: LPWSTR, P3: LPWSTR, P4: DWORD, P5: LONG_PTR): BOOL {.stdcall.}
  LANGGROUPLOCALE_ENUMPROCA* = proc (P1: LGRPID, P2: LCID, P3: LPSTR, P4: LONG_PTR): BOOL {.stdcall.}
  LANGGROUPLOCALE_ENUMPROCW* = proc (P1: LGRPID, P2: LCID, P3: LPWSTR, P4: LONG_PTR): BOOL {.stdcall.}
  UILANGUAGE_ENUMPROCW* = proc (P1: LPWSTR, P2: LONG_PTR): BOOL {.stdcall.}
  UILANGUAGE_ENUMPROCA* = proc (P1: LPSTR, P2: LONG_PTR): BOOL {.stdcall.}
  LOCALE_ENUMPROCA* = proc (P1: LPSTR): BOOL {.stdcall.}
  LOCALE_ENUMPROCW* = proc (P1: LPWSTR): BOOL {.stdcall.}
  CODEPAGE_ENUMPROCA* = proc (P1: LPSTR): BOOL {.stdcall.}
  CODEPAGE_ENUMPROCW* = proc (P1: LPWSTR): BOOL {.stdcall.}
  DATEFMT_ENUMPROCA* = proc (P1: LPSTR): BOOL {.stdcall.}
  DATEFMT_ENUMPROCW* = proc (P1: LPWSTR): BOOL {.stdcall.}
  DATEFMT_ENUMPROCEXA* = proc (P1: LPSTR, P2: CALID): BOOL {.stdcall.}
  DATEFMT_ENUMPROCEXW* = proc (P1: LPWSTR, P2: CALID): BOOL {.stdcall.}
  TIMEFMT_ENUMPROCA* = proc (P1: LPSTR): BOOL {.stdcall.}
  TIMEFMT_ENUMPROCW* = proc (P1: LPWSTR): BOOL {.stdcall.}
  GEO_ENUMPROC* = proc (P1: GEOID): BOOL {.stdcall.}

type
  NLS_FUNCTION* {.pure.} = enum
    COMPARE_STRING = 0x0001
  CPINFO* {.final, pure.} = object
    MaxCharSize*: UINT
    DefaultChar*: array[MAX_DEFAULTCHAR, BYTE]
    LeadByte*: array[MAX_LEADBYTES, BYTE]
  LPCPINFO* = ptr CPINFO
  CPINFOEXA* {.final, pure.} = object
    MaxCharSize*: UINT
    DefaultChar*: array[MAX_DEFAULTCHAR, BYTE]
    LeadByte*: array[MAX_LEADBYTES, BYTE]
    UnicodeDefaultChar*: WCHAR
    CodePage*: UINT
    CodePageName*: array[MAX_PATH, CHAR]
  LPCPINFOEXA* = ptr CPINFOEXA
  CPINFOEXW* {.final, pure.} = object
    MaxCharSize*: UINT
    DefaultChar*: array[MAX_DEFAULTCHAR, BYTE]
    LeadByte*: array[MAX_LEADBYTES, BYTE]
    UnicodeDefaultChar*: WCHAR
    CodePage*: UINT
    CodePageName*: array[MAX_PATH, WCHAR]
  LPCPINFOEXW* = ptr CPINFOEXW
  CURRENCYFMTA* {.final, pure.} = object
    NumDigits*: UINT
    LeadingZero*: UINT
    Grouping*: UINT
    lpDecimalSep*: LPSTR
    lpThousandSep*: LPSTR
    NegativeOrder*: UINT
    PositiveOrder*: UINT
    lpCurrencySymbol*: LPSTR
  LPCURRENCYFMTA* = ptr CURRENCYFMTA
  CURRENCYFMTW* {.final, pure.} = object
    NumDigits*: UINT
    LeadingZero*: UINT
    Grouping*: UINT
    lpDecimalSep*: LPWSTR
    lpThousandSep*: LPWSTR
    NegativeOrder*: UINT
    PositiveOrder*: UINT
    lpCurrencySymbol*: LPWSTR
  LPCURRENCYFMTW* = ptr CURRENCYFMTW
  NLSVERSIONINFO* {.final, pure.} = object
    dwNLSVersionInfoSize*: DWORD
    dwNLSVersion*: DWORD
    dwDefinedVersion*: DWORD
  LPNLSVERSIONINFO* = ptr NLSVERSIONINFO
  NUMBERFMTA* {.final, pure.} = object
    NumDigits*: UINT
    LeadingZero*: UINT
    Grouping*: UINT
    lpDecimalSep*: LPSTR
    lpThousandSep*: LPSTR
    NegativeOrder*: UINT
  LPNUMBERFMTA* = ptr NUMBERFMTA
  NUMBERFMTW* {.final, pure.} = object
    NumDigits*: UINT
    LeadingZero*: UINT
    Grouping*: UINT
    lpDecimalSep*: LPWSTR
    lpThousandSep*: LPWSTR
    NegativeOrder*: UINT
  LPNUMBERFMTW* = ptr NUMBERFMTW
proc CompareStringA*(P1: LCID, P2: DWORD, P3: LPCSTR, P4: int32, P5: LPCSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc.}
proc CompareStringW*(P1: LCID, P2: DWORD, P3: LPCWSTR, P4: int32, P5: LPCWSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc.}
proc ConvertDefaultLocale*(P1: LCID): LCID {.winapi, dynlib: "kernel32", importc.}
proc EnumCalendarInfoA*(P1: CALINFO_ENUMPROCA, P2: LCID, P3: CALID, P4: CALTYPE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumCalendarInfoW*(P1: CALINFO_ENUMPROCW, P2: LCID, P3: CALID, P4: CALTYPE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumDateFormatsA*(P1: DATEFMT_ENUMPROCA, P2: LCID, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumDateFormatsW*(P1: DATEFMT_ENUMPROCW, P2: LCID, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumSystemCodePagesA*(P1: CODEPAGE_ENUMPROCA, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumSystemCodePagesW*(P1: CODEPAGE_ENUMPROCW, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumSystemGeoID*(P1: GEOCLASS, P2: GEOID, P3: GEO_ENUMPROC): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumSystemLocalesA*(P1: LOCALE_ENUMPROCA, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumSystemLocalesW*(P1: LOCALE_ENUMPROCW, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumTimeFormatsA*(P1: TIMEFMT_ENUMPROCA, P2: LCID, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumTimeFormatsW*(P1: TIMEFMT_ENUMPROCW, P2: LCID, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc FoldStringA*(P1: DWORD, P2: LPCSTR, P3: int32, P4: LPSTR, P5: int32): int32 {.winapi, dynlib: "kernel32", importc.}
proc FoldStringW*(P1: DWORD, P2: LPCWSTR, P3: int32, P4: LPWSTR, P5: int32): int32 {.winapi, dynlib: "kernel32", importc.}
proc GetACP*(): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetCalendarInfoA*(P1: LCID, P2: CALID, P3: CALTYPE, P4: LPSTR, P5: int32, P6: LPDWORD): int32 {.winapi, dynlib: "kernel32", importc.}
proc GetCalendarInfoW*(P1: LCID, P2: CALID, P3: CALTYPE, P4: LPWSTR, P5: int32, P6: LPDWORD): int32 {.winapi, dynlib: "kernel32", importc.}
proc GetCPInfo*(P1: UINT, P2: LPCPINFO): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetCPInfoExA*(P1: UINT, P2: DWORD, P3: LPCPINFOEXA): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetCPInfoExW*(P1: UINT, P2: DWORD, P3: LPCPINFOEXW): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetCurrencyFormatA*(P1: LCID, P2: DWORD, P3: LPCSTR, P4: ptr CURRENCYFMTA, P5: LPSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc.}
proc GetCurrencyFormatW*(P1: LCID, P2: DWORD, P3: LPCWSTR, P4: ptr CURRENCYFMTW, P5: LPWSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc.}
proc GetDateFormatA*(P1: LCID, P2: DWORD, P3: ptr SYSTEMTIME, P4: LPCSTR, P5: LPSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc.}
proc GetDateFormatW*(P1: LCID, P2: DWORD, P3: ptr SYSTEMTIME, P4: LPCWSTR, P5: LPWSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc.}
proc GetGeoInfoA*(P1: GEOID, P2: GEOTYPE, P3: LPSTR, P4: int32, P5: LANGID): int32 {.winapi, dynlib: "kernel32", importc.}
proc GetGeoInfoW*(P1: GEOID, P2: GEOTYPE, P3: LPWSTR, P4: int32, P5: LANGID): int32 {.winapi, dynlib: "kernel32", importc.}
proc GetLocaleInfoA*(P1: LCID, P2: LCTYPE, P3: LPSTR, P4: int32): int32 {.winapi, dynlib: "kernel32", importc.}
proc GetLocaleInfoW*(P1: LCID, P2: LCTYPE, P3: LPWSTR, P4: int32): int32 {.winapi, dynlib: "kernel32", importc.}
proc GetNLSVersion*(P1: NLS_FUNCTION, P2: LCID, P3: LPNLSVERSIONINFO): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetNumberFormatA*(P1: LCID, P2: DWORD, P3: LPCSTR, P4: ptr NUMBERFMTA, P5: LPSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc.}
proc GetNumberFormatW*(P1: LCID, P2: DWORD, P3: LPCWSTR, P4: ptr NUMBERFMTW, P5: LPWSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc.}
proc GetOEMCP*(): UINT {.winapi, dynlib: "kernel32", importc.}
proc GetStringTypeA*(P1: LCID, P2: DWORD, P3: LPCSTR, P4: int32, P5: LPWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetStringTypeW*(P1: DWORD, P2: LPCWSTR, P3: int32, P4: LPWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetStringTypeExA*(P1: LCID, P2: DWORD, P3: LPCSTR, P4: int32, P5: LPWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetStringTypeExW*(P1: LCID, P2: DWORD, P3: LPCWSTR, P4: int32, P5: LPWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetSystemDefaultLangID*(): LANGID {.winapi, dynlib: "kernel32", importc.}
proc GetSystemDefaultLCID*(): LCID {.winapi, dynlib: "kernel32", importc.}
proc GetThreadLocale*(): LCID {.winapi, dynlib: "kernel32", importc.}
proc GetTimeFormatA*(P1: LCID, P2: DWORD, P3: ptr SYSTEMTIME, P4: LPCSTR, P5: LPSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc.}
proc GetTimeFormatW*(P1: LCID, P2: DWORD, P3: ptr SYSTEMTIME, P4: LPCWSTR, P5: LPWSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc.}
proc GetUserDefaultLangID*(): LANGID {.winapi, dynlib: "kernel32", importc.}
proc GetUserDefaultLCID*(): LCID {.winapi, dynlib: "kernel32", importc.}
proc GetUserGeoID*(P1: GEOCLASS): GEOID {.winapi, dynlib: "kernel32", importc.}
proc IsDBCSLeadByte*(P1: BYTE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc IsDBCSLeadByteEx*(P1: UINT, P2: BYTE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc IsNLSDefinedString*(P1: NLS_FUNCTION, P2: DWORD, P3: LPNLSVERSIONINFO, P4: LPCWSTR, P5: int32): BOOL {.winapi, dynlib: "kernel32", importc.}
proc IsValidCodePage*(P1: UINT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc IsValidLocale*(P1: LCID, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc LCMapStringA*(P1: LCID, P2: DWORD, P3: LPCSTR, P4: int32, P5: LPSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc.}
proc LCMapStringW*(P1: LCID, P2: DWORD, P3: LPCWSTR, P4: int32, P5: LPWSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc.}
proc MultiByteToWideChar*(P1: UINT, P2: DWORD, P3: LPCSTR, P4: int32, P5: LPWSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc.}
proc SetCalendarInfoA*(P1: LCID, P2: CALID, P3: CALTYPE, P4: LPCSTR): int32 {.winapi, dynlib: "kernel32", importc.}
proc SetCalendarInfoW*(P1: LCID, P2: CALID, P3: CALTYPE, P4: LPCWSTR): int32 {.winapi, dynlib: "kernel32", importc.}
proc SetLocaleInfoA*(P1: LCID, P2: LCTYPE, P3: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetLocaleInfoW*(P1: LCID, P2: LCTYPE, P3: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetThreadLocale*(P1: LCID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc SetUserGeoID*(P1: GEOID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc WideCharToMultiByte*(P1: UINT, P2: DWORD, P3: LPCWSTR, P4: int32, P5: LPSTR, P6: int32, P7: LPCSTR, P8: LPBOOL): int32 {.winapi, dynlib: "kernel32", importc.}
proc EnumCalendarInfoExA*(P1: CALINFO_ENUMPROCEXA, P2: LCID, P3: CALID, P4: CALTYPE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumCalendarInfoExW*(P1: CALINFO_ENUMPROCEXW, P2: LCID, P3: CALID, P4: CALTYPE): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumDateFormatsExA*(P1: DATEFMT_ENUMPROCEXA, P2: LCID, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumDateFormatsExW*(P1: DATEFMT_ENUMPROCEXW, P2: LCID, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc IsValidLanguageGroup*(P1: LGRPID, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetSystemDefaultUILanguage*(): LANGID {.winapi, dynlib: "kernel32", importc.}
proc GetUserDefaultUILanguage*(): LANGID {.winapi, dynlib: "kernel32", importc.}
proc EnumSystemLanguageGroupsA*(P1: LANGUAGEGROUP_ENUMPROCA, P2: DWORD, P3: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumSystemLanguageGroupsW*(P1: LANGUAGEGROUP_ENUMPROCW, P2: DWORD, P3: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumLanguageGroupLocalesA*(P1: LANGGROUPLOCALE_ENUMPROCA, P2: LGRPID, P3: DWORD, P4: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumLanguageGroupLocalesW*(P1: LANGGROUPLOCALE_ENUMPROCW, P2: LGRPID, P3: DWORD, P4: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumUILanguagesA*(P1: UILANGUAGE_ENUMPROCA, P2: DWORD, P3: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc.}
proc EnumUILanguagesW*(P1: UILANGUAGE_ENUMPROCW, P2: DWORD, P3: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc.}

when not defined(winansi):
  type
    CALINFO_ENUMPROC* = CALINFO_ENUMPROCW
    CALINFO_ENUMPROCEX* = CALINFO_ENUMPROCEXW
    LOCALE_ENUMPROC* = LOCALE_ENUMPROCW
    CODEPAGE_ENUMPROC* = CODEPAGE_ENUMPROCW
    DATEFMT_ENUMPROC* = DATEFMT_ENUMPROCW
    DATEFMT_ENUMPROCEX* = DATEFMT_ENUMPROCEXW
    TIMEFMT_ENUMPROC* = TIMEFMT_ENUMPROCW
    LANGUAGEGROUP_ENUMPROC* = LANGUAGEGROUP_ENUMPROCW
    LANGGROUPLOCALE_ENUMPROC* = LANGGROUPLOCALE_ENUMPROCW
    UILANGUAGE_ENUMPROC* = UILANGUAGE_ENUMPROCW
    CPINFOEX* = CPINFOEXW
    LPCPINFOEX* = LPCPINFOEXW
    CURRENCYFMT* = CURRENCYFMTW
    LPCURRENCYFMT* = LPCURRENCYFMTW
    NUMBERFMT* = NUMBERFMTW
    LPNUMBERFMT* = LPNUMBERFMTW

  proc CompareString*(P1: LCID, P2: DWORD, P3: LPCWSTR, P4: int32, P5: LPCWSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc: "CompareStringW".}
  proc EnumCalendarInfo*(P1: CALINFO_ENUMPROCW, P2: LCID, P3: CALID, P4: CALTYPE): BOOL {.winapi, dynlib: "kernel32", importc: "EnumCalendarInfoW".}
  proc EnumSystemCodePages*(P1: CODEPAGE_ENUMPROCW, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "EnumSystemCodePagesW".}
  proc EnumSystemLocales*(P1: LOCALE_ENUMPROCW, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "EnumSystemLocalesW".}
  proc EnumTimeFormats*(P1: TIMEFMT_ENUMPROCW, P2: LCID, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "EnumTimeFormatsW".}
  proc FoldString*(P1: DWORD, P2: LPCWSTR, P3: int32, P4: LPWSTR, P5: int32): int32 {.winapi, dynlib: "kernel32", importc: "FoldStringW".}
  proc GetCalendarInfo*(P1: LCID, P2: CALID, P3: CALTYPE, P4: LPWSTR, P5: int32, P6: LPDWORD): int32 {.winapi, dynlib: "kernel32", importc: "GetCalendarInfoW".}
  proc GetCPInfoEx*(P1: UINT, P2: DWORD, P3: LPCPINFOEXW): BOOL {.winapi, dynlib: "kernel32", importc: "GetCPInfoExW".}
  proc GetCurrencyFormat*(P1: LCID, P2: DWORD, P3: LPCWSTR, P4: ptr CURRENCYFMTW, P5: LPWSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc: "GetCurrencyFormatW".}
  proc GetDateFormat*(P1: LCID, P2: DWORD, P3: ptr SYSTEMTIME, P4: LPCWSTR, P5: LPWSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc: "GetDateFormatW".}
  proc GetGeoInfo*(P1: GEOID, P2: GEOTYPE, P3: LPWSTR, P4: int32, P5: LANGID): int32 {.winapi, dynlib: "kernel32", importc: "GetGeoInfoW".}
  proc GetLocaleInfo*(P1: LCID, P2: LCTYPE, P3: LPWSTR, P4: int32): int32 {.winapi, dynlib: "kernel32", importc: "GetLocaleInfoW".}
  proc GetNumberFormat*(P1: LCID, P2: DWORD, P3: LPCWSTR, P4: ptr NUMBERFMTW, P5: LPWSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc: "GetNumberFormatW".}
  proc GetStringTypeEx*(P1: LCID, P2: DWORD, P3: LPCWSTR, P4: int32, P5: LPWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetStringTypeExW".}
  proc GetTimeFormat*(P1: LCID, P2: DWORD, P3: ptr SYSTEMTIME, P4: LPCWSTR, P5: LPWSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc: "GetTimeFormatW".}
  proc LCMapString*(P1: LCID, P2: DWORD, P3: LPCWSTR, P4: int32, P5: LPWSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc: "LCMapStringW".}
  proc SetCalendarInfo*(P1: LCID, P2: CALID, P3: CALTYPE, P4: LPCWSTR): int32 {.winapi, dynlib: "kernel32", importc: "SetCalendarInfoW".}
  proc SetLocaleInfo*(P1: LCID, P2: LCTYPE, P3: LPCWSTR): BOOL {.winapi, dynlib: "kernel32", importc: "SetLocaleInfoW".}
  proc EnumCalendarInfoEx*(P1: CALINFO_ENUMPROCEXW, P2: LCID, P3: CALID, P4: CALTYPE): BOOL {.winapi, dynlib: "kernel32", importc: "EnumCalendarInfoExW".}
  proc EnumDateFormatsEx*(P1: DATEFMT_ENUMPROCEXW, P2: LCID, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "EnumDateFormatsExW".}
  proc EnumSystemLanguageGroups*(P1: LANGUAGEGROUP_ENUMPROCW, P2: DWORD, P3: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc: "EnumSystemLanguageGroupsW".}
  proc EnumLanguageGroupLocales*(P1: LANGGROUPLOCALE_ENUMPROCW, P2: LGRPID, P3: DWORD, P4: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc: "EnumLanguageGroupLocalesW".}
  proc EnumUILanguages*(P1: UILANGUAGE_ENUMPROCW, P2: DWORD, P3: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc: "EnumUILanguagesW".}

else:
  type
    CALINFO_ENUMPROC* = CALINFO_ENUMPROCA
    CALINFO_ENUMPROCEX* = CALINFO_ENUMPROCEXA
    LOCALE_ENUMPROC* = LOCALE_ENUMPROCA
    CODEPAGE_ENUMPROC* = CODEPAGE_ENUMPROCA
    DATEFMT_ENUMPROC* = DATEFMT_ENUMPROCA
    DATEFMT_ENUMPROCEX* = DATEFMT_ENUMPROCEXA
    TIMEFMT_ENUMPROC* = TIMEFMT_ENUMPROCA
    LANGUAGEGROUP_ENUMPROC* = LANGUAGEGROUP_ENUMPROCA
    LANGGROUPLOCALE_ENUMPROC* = LANGGROUPLOCALE_ENUMPROCA
    UILANGUAGE_ENUMPROC* = UILANGUAGE_ENUMPROCA
    CPINFOEX* = CPINFOEXA
    LPCPINFOEX* = LPCPINFOEXA
    CURRENCYFMT* = CURRENCYFMTA
    LPCURRENCYFMT* = LPCURRENCYFMTA
    NUMBERFMT* = NUMBERFMTA
    LPNUMBERFMT* = LPNUMBERFMTA

  proc CompareString*(P1: LCID, P2: DWORD, P3: LPCSTR, P4: int32, P5: LPCSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc: "CompareStringA".}
  proc EnumCalendarInfo*(P1: CALINFO_ENUMPROCA, P2: LCID, P3: CALID, P4: CALTYPE): BOOL {.winapi, dynlib: "kernel32", importc: "EnumCalendarInfoA".}
  proc EnumSystemCodePages*(P1: CODEPAGE_ENUMPROCA, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "EnumSystemCodePagesA".}
  proc EnumSystemLocales*(P1: LOCALE_ENUMPROCA, P2: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "EnumSystemLocalesA".}
  proc EnumTimeFormats*(P1: TIMEFMT_ENUMPROCA, P2: LCID, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "EnumTimeFormatsA".}
  proc FoldString*(P1: DWORD, P2: LPCSTR, P3: int32, P4: LPSTR, P5: int32): int32 {.winapi, dynlib: "kernel32", importc: "FoldStringA".}
  proc GetCalendarInfo*(P1: LCID, P2: CALID, P3: CALTYPE, P4: LPSTR, P5: int32, P6: LPDWORD): int32 {.winapi, dynlib: "kernel32", importc: "GetCalendarInfoA".}
  proc GetCPInfoEx*(P1: UINT, P2: DWORD, P3: LPCPINFOEXA): BOOL {.winapi, dynlib: "kernel32", importc: "GetCPInfoExA".}
  proc GetCurrencyFormat*(P1: LCID, P2: DWORD, P3: LPCSTR, P4: ptr CURRENCYFMTA, P5: LPSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc: "GetCurrencyFormatA".}
  proc GetDateFormat*(P1: LCID, P2: DWORD, P3: ptr SYSTEMTIME, P4: LPCSTR, P5: LPSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc: "GetDateFormatA".}
  proc GetGeoInfo*(P1: GEOID, P2: GEOTYPE, P3: LPSTR, P4: int32, P5: LANGID): int32 {.winapi, dynlib: "kernel32", importc: "GetGeoInfoA".}
  proc GetLocaleInfo*(P1: LCID, P2: LCTYPE, P3: LPSTR, P4: int32): int32 {.winapi, dynlib: "kernel32", importc: "GetLocaleInfoA".}
  proc GetNumberFormat*(P1: LCID, P2: DWORD, P3: LPCSTR, P4: ptr NUMBERFMTA, P5: LPSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc: "GetNumberFormatA".}
  proc GetStringTypeEx*(P1: LCID, P2: DWORD, P3: LPCSTR, P4: int32, P5: LPWORD): BOOL {.winapi, dynlib: "kernel32", importc: "GetStringTypeExA".}
  proc GetTimeFormat*(P1: LCID, P2: DWORD, P3: ptr SYSTEMTIME, P4: LPCSTR, P5: LPSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc: "GetTimeFormatA".}
  proc LCMapString*(P1: LCID, P2: DWORD, P3: LPCSTR, P4: int32, P5: LPSTR, P6: int32): int32 {.winapi, dynlib: "kernel32", importc: "LCMapStringA".}
  proc SetCalendarInfo*(P1: LCID, P2: CALID, P3: CALTYPE, P4: LPCSTR): int32 {.winapi, dynlib: "kernel32", importc: "SetCalendarInfoA".}
  proc SetLocaleInfo*(P1: LCID, P2: LCTYPE, P3: LPCSTR): BOOL {.winapi, dynlib: "kernel32", importc: "SetLocaleInfoA".}
  proc EnumCalendarInfoEx*(P1: CALINFO_ENUMPROCEXA, P2: LCID, P3: CALID, P4: CALTYPE): BOOL {.winapi, dynlib: "kernel32", importc: "EnumCalendarInfoExA".}
  proc EnumDateFormatsEx*(P1: DATEFMT_ENUMPROCEXA, P2: LCID, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc: "EnumDateFormatsExA".}
  proc EnumSystemLanguageGroups*(P1: LANGUAGEGROUP_ENUMPROCA, P2: DWORD, P3: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc: "EnumSystemLanguageGroupsA".}
  proc EnumLanguageGroupLocales*(P1: LANGGROUPLOCALE_ENUMPROCA, P2: LGRPID, P3: DWORD, P4: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc: "EnumLanguageGroupLocalesA".}
  proc EnumUILanguages*(P1: UILANGUAGE_ENUMPROCA, P2: DWORD, P3: LONG_PTR): BOOL {.winapi, dynlib: "kernel32", importc: "EnumUILanguagesA".}

# core/winreg.nim

const
  HKEY_CLASSES_ROOT* = 0x80000000.HKEY
  HKEY_CURRENT_USER* = 0x80000001.HKEY
  HKEY_LOCAL_MACHINE* = 0x80000002.HKEY
  HKEY_USERS* = 0x80000003.HKEY
  HKEY_PERFORMANCE_DATA* = 0x80000004.HKEY
  HKEY_CURRENT_CONFIG* = 0x80000005.HKEY
  HKEY_DYN_DATA* = 0x80000006.HKEY
  # REG_OPTION_NON_VOLATILE* = 0.DWORD
  # REG_OPTION_VOLATILE* = 1.DWORD
  REG_CREATED_NEW_KEY* = 1
  REG_OPENED_EXISTING_KEY* = 2
  REG_NONE* = 0
  REG_SZ* = 1
  REG_EXPAND_SZ* = 2
  REG_BINARY* = 3
  REG_DWORD_LITTLE_ENDIAN* = 4
  REG_DWORD* = REG_DWORD_LITTLE_ENDIAN
  REG_DWORD_BIG_ENDIAN* = (REG_DWORD_LITTLE_ENDIAN + 1)
  REG_LINK* = (REG_DWORD_LITTLE_ENDIAN + 2)
  REG_MULTI_SZ* = (REG_DWORD_LITTLE_ENDIAN + 3)
  REG_RESOURCE_LIST* = (REG_DWORD_LITTLE_ENDIAN + 4)
  REG_FULL_RESOURCE_DESCRIPTOR* = (REG_DWORD_LITTLE_ENDIAN + 5)
  REG_RESOURCE_REQUIREMENTS_LIST* = (REG_DWORD_LITTLE_ENDIAN + 6)
  REG_QWORD_LITTLE_ENDIAN* = (REG_DWORD_LITTLE_ENDIAN + 7)
  REG_QWORD* = REG_QWORD_LITTLE_ENDIAN
  REG_NOTIFY_CHANGE_NAME* = 1
  REG_NOTIFY_CHANGE_ATTRIBUTES* = 2
  REG_NOTIFY_CHANGE_LAST_SET* = 4
  REG_NOTIFY_CHANGE_SECURITY* = 8

type
  REGSAM* = ACCESS_MASK
  VALENTA* {.final, pure.} = object
    ve_valuename*: LPSTR
    ve_valuelen*: DWORD
    ve_valueptr*: DWORD
    ve_type*: DWORD
  PVALENTA* = ptr VALENTA
  VALENTW* {.final, pure.} = object
    ve_valuename*: LPWSTR
    ve_valuelen*: DWORD
    ve_valueptr*: DWORD
    ve_type*: DWORD
  PVALENTW* = ptr VALENTW

const
  RRF_RT_REG_NONE* = 0x00000001
  RRF_RT_REG_SZ* = 0x00000002
  RRF_RT_REG_EXPAND_SZ* = 0x00000004
  RRF_RT_REG_BINARY* = 0x00000008
  RRF_RT_REG_DWORD* = 0x00000010
  RRF_RT_REG_MULTI_SZ* = 0x00000020
  RRF_RT_REG_QWORD* = 0x00000040
  RRF_RT_DWORD* = (RRF_RT_REG_BINARY or RRF_RT_REG_DWORD).DWORD
  RRF_RT_QWORD* = (RRF_RT_REG_BINARY or RRF_RT_REG_QWORD).DWORD
  RRF_RT_ANY* = 0x0000FFFF
  RRF_NOEXPAND* = 0x10000000
  RRF_ZEROONFAILURE* = 0x20000000

proc RegCloseKey*(P1: HKEY): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegConnectRegistryA*(P1: LPCSTR, P2: HKEY, P3: PHKEY): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegConnectRegistryW*(P1: LPCWSTR, P2: HKEY, P3: PHKEY): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegCreateKeyExA*(P1: HKEY, P2: LPCSTR, P3: DWORD, P4: LPSTR, P5: DWORD, P6: REGSAM, P7: LPSECURITY_ATTRIBUTES, P8: PHKEY, P9: PDWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegCreateKeyExW*(P1: HKEY, P2: LPCWSTR, P3: DWORD, P4: LPWSTR, P5: DWORD, P6: REGSAM, P7: LPSECURITY_ATTRIBUTES, P8: PHKEY, P9: PDWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegDeleteKeyA*(P1: HKEY, P2: LPCSTR): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegDeleteKeyW*(P1: HKEY, P2: LPCWSTR): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegDeleteValueA*(P1: HKEY, P2: LPCSTR): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegDeleteValueW*(P1: HKEY, P2: LPCWSTR): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegEnumKeyExA*(P1: HKEY, P2: DWORD, P3: LPSTR, P4: PDWORD, P5: PDWORD, P6: LPSTR, P7: PDWORD, P8: PFILETIME): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegEnumKeyExW*(P1: HKEY, P2: DWORD, P3: LPWSTR, P4: PDWORD, P5: PDWORD, P6: LPWSTR, P7: PDWORD, P8: PFILETIME): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegEnumValueA*(P1: HKEY, P2: DWORD, P3: LPSTR, P4: PDWORD, P5: PDWORD, P6: PDWORD, P7: LPBYTE, P8: PDWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegEnumValueW*(P1: HKEY, P2: DWORD, P3: LPWSTR, P4: PDWORD, P5: PDWORD, P6: PDWORD, P7: LPBYTE, P8: PDWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegFlushKey*(P1: HKEY): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegLoadKeyA*(P1: HKEY, P2: LPCSTR, P3: LPCSTR): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegLoadKeyW*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegOpenKeyExA*(P1: HKEY, P2: LPCSTR, P3: DWORD, P4: REGSAM, P5: PHKEY): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegOpenKeyExW*(P1: HKEY, P2: LPCWSTR, P3: DWORD, P4: REGSAM, P5: PHKEY): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegQueryInfoKeyA*(P1: HKEY, P2: LPSTR, P3: PDWORD, P4: PDWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD, P8: PDWORD, P9: PDWORD, P10: PDWORD, P11: PDWORD, P12: PFILETIME): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegQueryInfoKeyW*(P1: HKEY, P2: LPWSTR, P3: PDWORD, P4: PDWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD, P8: PDWORD, P9: PDWORD, P10: PDWORD, P11: PDWORD, P12: PFILETIME): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegQueryMultipleValuesA*(P1: HKEY, P2: PVALENTA, P3: DWORD, P4: LPSTR, P5: LPDWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegQueryMultipleValuesW*(P1: HKEY, P2: PVALENTW, P3: DWORD, P4: LPWSTR, P5: LPDWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegQueryValueExA*(P1: HKEY, P2: LPCSTR, P3: LPDWORD, P4: LPDWORD, P5: LPBYTE, P6: LPDWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegQueryValueExW*(P1: HKEY, P2: LPCWSTR, P3: LPDWORD, P4: LPDWORD, P5: LPBYTE, P6: LPDWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegReplaceKeyA*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegReplaceKeyW*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegSaveKeyA*(P1: HKEY, P2: LPCSTR, P3: LPSECURITY_ATTRIBUTES): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegSaveKeyW*(P1: HKEY, P2: LPCWSTR, P3: LPSECURITY_ATTRIBUTES): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegSetKeySecurity*(P1: HKEY, P2: SECURITY_INFORMATION, P3: PSECURITY_DESCRIPTOR): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegSetValueExA*(P1: HKEY, P2: LPCSTR, P3: DWORD, P4: DWORD, P5: ptr BYTE, P6: DWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegSetValueExW*(P1: HKEY, P2: LPCWSTR, P3: DWORD, P4: DWORD, P5: ptr BYTE, P6: DWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegUnLoadKeyA*(P1: HKEY, P2: LPCSTR): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegUnLoadKeyW*(P1: HKEY, P2: LPCWSTR): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegNotifyChangeKeyValue*(P1: HKEY, P2: BOOL, P3: DWORD, P4: HANDLE, P5: BOOL): LONG {.winapi, dynlib: "advapi32", importc.}
proc AbortSystemShutdownA*(P1: LPCSTR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc AbortSystemShutdownW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc InitiateSystemShutdownA*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: BOOL, P5: BOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc InitiateSystemShutdownW*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: BOOL, P5: BOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc RegGetKeySecurity*(P1: HKEY, P2: SECURITY_INFORMATION, P3: PSECURITY_DESCRIPTOR, P4: PDWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegRestoreKeyA*(P1: HKEY, P2: LPCSTR, P3: DWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegRestoreKeyW*(P1: HKEY, P2: LPCWSTR, P3: DWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegDisablePredefinedCache*(): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegOpenCurrentUser*(P1: REGSAM, P2: PHKEY): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegOpenUserClassesRoot*(P1: HANDLE, P2: DWORD, P3: REGSAM, P4: PHKEY): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegSaveKeyExA*(P1: HKEY, P2: LPCSTR, P3: LPSECURITY_ATTRIBUTES, P4: DWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegSaveKeyExW*(P1: HKEY, P2: LPCWSTR, P3: LPSECURITY_ATTRIBUTES, P4: DWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegGetValueA*(hkey: HKEY, lpSubKey: LPCSTR, lpValue: LPCSTR, dwFlags: DWORD, pdwType: LPDWORD, pvData: PVOID, pcbData: LPDWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegGetValueW*(hkey: HKEY, lpSubKey: LPCWSTR, lpValue: LPCWSTR, dwFlags: DWORD, pdwType: LPDWORD, pvData: PVOID, pcbData: LPDWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegCreateKeyA*(P1: HKEY, P2: LPCSTR, P3: PHKEY): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegCreateKeyW*(P1: HKEY, P2: LPCWSTR, P3: PHKEY): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegEnumKeyA*(P1: HKEY, P2: DWORD, P3: LPSTR, P4: DWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegEnumKeyW*(P1: HKEY, P2: DWORD, P3: LPWSTR, P4: DWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegOpenKeyA*(P1: HKEY, P2: LPCSTR, P3: PHKEY): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegOpenKeyW*(P1: HKEY, P2: LPCWSTR, P3: PHKEY): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegQueryValueA*(P1: HKEY, P2: LPCSTR, P3: LPSTR, P4: PLONG): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegQueryValueW*(P1: HKEY, P2: LPCWSTR, P3: LPWSTR, P4: PLONG): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegSetValueA*(P1: HKEY, P2: LPCSTR, P3: DWORD, P4: LPCSTR, P5: DWORD): LONG {.winapi, dynlib: "advapi32", importc.}
proc RegSetValueW*(P1: HKEY, P2: LPCWSTR, P3: DWORD, P4: LPCWSTR, P5: DWORD): LONG {.winapi, dynlib: "advapi32", importc.}

when not defined(winansi):
  type
    VALENT* = VALENTW

  proc RegConnectRegistry*(P1: LPCWSTR, P2: HKEY, P3: PHKEY): LONG {.winapi, dynlib: "advapi32", importc: "RegConnectRegistryW".}
  proc RegCreateKeyEx*(P1: HKEY, P2: LPCWSTR, P3: DWORD, P4: LPWSTR, P5: DWORD, P6: REGSAM, P7: LPSECURITY_ATTRIBUTES, P8: PHKEY, P9: PDWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegCreateKeyExW".}
  proc RegDeleteKey*(P1: HKEY, P2: LPCWSTR): LONG {.winapi, dynlib: "advapi32", importc: "RegDeleteKeyW".}
  proc RegDeleteValue*(P1: HKEY, P2: LPCWSTR): LONG {.winapi, dynlib: "advapi32", importc: "RegDeleteValueW".}
  proc RegEnumKeyEx*(P1: HKEY, P2: DWORD, P3: LPWSTR, P4: PDWORD, P5: PDWORD, P6: LPWSTR, P7: PDWORD, P8: PFILETIME): LONG {.winapi, dynlib: "advapi32", importc: "RegEnumKeyExW".}
  proc RegEnumValue*(P1: HKEY, P2: DWORD, P3: LPWSTR, P4: PDWORD, P5: PDWORD, P6: PDWORD, P7: LPBYTE, P8: PDWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegEnumValueW".}
  proc RegLoadKey*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR): LONG {.winapi, dynlib: "advapi32", importc: "RegLoadKeyW".}
  proc RegOpenKeyEx*(P1: HKEY, P2: LPCWSTR, P3: DWORD, P4: REGSAM, P5: PHKEY): LONG {.winapi, dynlib: "advapi32", importc: "RegOpenKeyExW".}
  proc RegQueryInfoKey*(P1: HKEY, P2: LPWSTR, P3: PDWORD, P4: PDWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD, P8: PDWORD, P9: PDWORD, P10: PDWORD, P11: PDWORD, P12: PFILETIME): LONG {.winapi, dynlib: "advapi32", importc: "RegQueryInfoKeyW".}
  proc RegQueryMultipleValues*(P1: HKEY, P2: PVALENTW, P3: DWORD, P4: LPWSTR, P5: LPDWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegQueryMultipleValuesW".}
  proc RegQueryValueEx*(P1: HKEY, P2: LPCWSTR, P3: LPDWORD, P4: LPDWORD, P5: LPBYTE, P6: LPDWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegQueryValueExW".}
  proc RegReplaceKey*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): LONG {.winapi, dynlib: "advapi32", importc: "RegReplaceKeyW".}
  proc RegSaveKey*(P1: HKEY, P2: LPCWSTR, P3: LPSECURITY_ATTRIBUTES): LONG {.winapi, dynlib: "advapi32", importc: "RegSaveKeyW".}
  proc RegSetValueEx*(P1: HKEY, P2: LPCWSTR, P3: DWORD, P4: DWORD, P5: ptr BYTE, P6: DWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegSetValueExW".}
  proc RegUnLoadKey*(P1: HKEY, P2: LPCWSTR): LONG {.winapi, dynlib: "advapi32", importc: "RegUnLoadKeyW".}
  proc AbortSystemShutdown*(P1: LPCWSTR): BOOL {.winapi, dynlib: "advapi32", importc: "AbortSystemShutdownW".}
  proc InitiateSystemShutdown*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: BOOL, P5: BOOL): BOOL {.winapi, dynlib: "advapi32", importc: "InitiateSystemShutdownW".}
  proc RegRestoreKey*(P1: HKEY, P2: LPCWSTR, P3: DWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegRestoreKeyW".}
  proc RegSaveKeyEx*(P1: HKEY, P2: LPCSTR, P3: LPSECURITY_ATTRIBUTES, P4: DWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegSaveKeyExA".}
  proc RegGetValue*(hkey: HKEY, lpSubKey: LPCWSTR, lpValue: LPCWSTR, dwFlags: DWORD, pdwType: LPDWORD, pvData: PVOID, pcbData: LPDWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegGetValueW".}
  proc RegCreateKey*(P1: HKEY, P2: LPCWSTR, P3: PHKEY): LONG {.winapi, dynlib: "advapi32", importc: "RegCreateKeyW".}
  proc RegEnumKey*(P1: HKEY, P2: DWORD, P3: LPWSTR, P4: DWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegEnumKeyW".}
  proc RegOpenKey*(P1: HKEY, P2: LPCWSTR, P3: PHKEY): LONG {.winapi, dynlib: "advapi32", importc: "RegOpenKeyW".}
  proc RegQueryValue*(P1: HKEY, P2: LPCWSTR, P3: LPWSTR, P4: PLONG): LONG {.winapi, dynlib: "advapi32", importc: "RegQueryValueW".}
  proc RegSetValue*(P1: HKEY, P2: LPCWSTR, P3: DWORD, P4: LPCWSTR, P5: DWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegSetValueW".}

else:
  type
    VALENT* = VALENTA

  proc RegConnectRegistry*(P1: LPCSTR, P2: HKEY, P3: PHKEY): LONG {.winapi, dynlib: "advapi32", importc: "RegConnectRegistryA".}
  proc RegCreateKeyEx*(P1: HKEY, P2: LPCSTR, P3: DWORD, P4: LPSTR, P5: DWORD, P6: REGSAM, P7: LPSECURITY_ATTRIBUTES, P8: PHKEY, P9: PDWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegCreateKeyExA".}
  proc RegDeleteKey*(P1: HKEY, P2: LPCSTR): LONG {.winapi, dynlib: "advapi32", importc: "RegDeleteKeyA".}
  proc RegDeleteValue*(P1: HKEY, P2: LPCSTR): LONG {.winapi, dynlib: "advapi32", importc: "RegDeleteValueA".}
  proc RegEnumKeyEx*(P1: HKEY, P2: DWORD, P3: LPSTR, P4: PDWORD, P5: PDWORD, P6: LPSTR, P7: PDWORD, P8: PFILETIME): LONG {.winapi, dynlib: "advapi32", importc: "RegEnumKeyExA".}
  proc RegEnumValue*(P1: HKEY, P2: DWORD, P3: LPSTR, P4: PDWORD, P5: PDWORD, P6: PDWORD, P7: LPBYTE, P8: PDWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegEnumValueA".}
  proc RegLoadKey*(P1: HKEY, P2: LPCSTR, P3: LPCSTR): LONG {.winapi, dynlib: "advapi32", importc: "RegLoadKeyA".}
  proc RegOpenKeyEx*(P1: HKEY, P2: LPCSTR, P3: DWORD, P4: REGSAM, P5: PHKEY): LONG {.winapi, dynlib: "advapi32", importc: "RegOpenKeyExA".}
  proc RegQueryInfoKey*(P1: HKEY, P2: LPSTR, P3: PDWORD, P4: PDWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD, P8: PDWORD, P9: PDWORD, P10: PDWORD, P11: PDWORD, P12: PFILETIME): LONG {.winapi, dynlib: "advapi32", importc: "RegQueryInfoKeyA".}
  proc RegQueryMultipleValues*(P1: HKEY, P2: PVALENTA, P3: DWORD, P4: LPSTR, P5: LPDWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegQueryMultipleValuesA".}
  proc RegQueryValueEx*(P1: HKEY, P2: LPCSTR, P3: LPDWORD, P4: LPDWORD, P5: LPBYTE, P6: LPDWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegQueryValueExA".}
  proc RegReplaceKey*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR): LONG {.winapi, dynlib: "advapi32", importc: "RegReplaceKeyA".}
  proc RegSaveKey*(P1: HKEY, P2: LPCSTR, P3: LPSECURITY_ATTRIBUTES): LONG {.winapi, dynlib: "advapi32", importc: "RegSaveKeyA".}
  proc RegSetValueEx*(P1: HKEY, P2: LPCSTR, P3: DWORD, P4: DWORD, P5: ptr BYTE, P6: DWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegSetValueExA".}
  proc RegUnLoadKey*(P1: HKEY, P2: LPCSTR): LONG {.winapi, dynlib: "advapi32", importc: "RegUnLoadKeyA".}
  proc AbortSystemShutdown*(P1: LPCSTR): BOOL {.winapi, dynlib: "advapi32", importc: "AbortSystemShutdownA".}
  proc InitiateSystemShutdown*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: BOOL, P5: BOOL): BOOL {.winapi, dynlib: "advapi32", importc: "InitiateSystemShutdownA".}
  proc RegRestoreKey*(P1: HKEY, P2: LPCWSTR, P3: DWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegRestoreKeyW".}
  proc RegSaveKeyEx*(P1: HKEY, P2: LPCSTR, P3: LPSECURITY_ATTRIBUTES, P4: DWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegSaveKeyExA".}
  proc RegGetValue*(hkey: HKEY, lpSubKey: LPCSTR, lpValue: LPCSTR, dwFlags: DWORD, pdwType: LPDWORD, pvData: PVOID, pcbData: LPDWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegGetValueA".}
  proc RegCreateKey*(P1: HKEY, P2: LPCSTR, P3: PHKEY): LONG {.winapi, dynlib: "advapi32", importc: "RegCreateKeyA".}
  proc RegEnumKey*(P1: HKEY, P2: DWORD, P3: LPSTR, P4: DWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegEnumKeyA".}
  proc RegOpenKey*(P1: HKEY, P2: LPCSTR, P3: PHKEY): LONG {.winapi, dynlib: "advapi32", importc: "RegOpenKeyA".}
  proc RegQueryValue*(P1: HKEY, P2: LPCSTR, P3: LPSTR, P4: PLONG): LONG {.winapi, dynlib: "advapi32", importc: "RegQueryValueA".}
  proc RegSetValue*(P1: HKEY, P2: LPCSTR, P3: DWORD, P4: LPCSTR, P5: DWORD): LONG {.winapi, dynlib: "advapi32", importc: "RegSetValueA".}

type
  PVALENT* = ptr VALENT

# core/winsvc.nim
const
  # SC_STATUS_TYPE* = enum
  SC_STATUS_PROCESS_INFO* = 0
  # SC_ENUM_TYPE* = enum
  SC_ENUM_PROCESS_INFO* = 0
  # SC_ACTION_TYPE* = enum
  SC_ACTION_NONE* = 0
  SC_ACTION_RESTART* = 1
  SC_ACTION_REBOOT* = 2
  SC_ACTION_RUN_COMMAND* = 3

const
  SERVICES_ACTIVE_DATABASE* = "ServicesActive"
  SERVICES_FAILED_DATABASE* = "ServicesFailed"
  SC_GROUP_IDENTIFIER* = '+'.TCHAR
  SC_MANAGER_ALL_ACCESS* = 0xf003f
  SC_MANAGER_CONNECT* = 1
  SC_MANAGER_CREATE_SERVICE* = 2
  SC_MANAGER_ENUMERATE_SERVICE* = 4
  SC_MANAGER_LOCK* = 8
  SC_MANAGER_QUERY_LOCK_STATUS* = 16
  SC_MANAGER_MODIFY_BOOT_CONFIG* = 32
  SERVICE_NO_CHANGE* = 0xffffffff'u32
  SERVICE_STOPPED* = 1
  SERVICE_START_PENDING* = 2
  SERVICE_STOP_PENDING* = 3
  SERVICE_RUNNING* = 4
  SERVICE_CONTINUE_PENDING* = 5
  SERVICE_PAUSE_PENDING* = 6
  SERVICE_PAUSED* = 7
  SERVICE_ACCEPT_STOP* = 1
  SERVICE_ACCEPT_PAUSE_CONTINUE* = 2
  SERVICE_ACCEPT_SHUTDOWN* = 4
  SERVICE_ACCEPT_PARAMCHANGE* = 8
  SERVICE_ACCEPT_NETBINDCHANGE* = 16
  SERVICE_ACCEPT_HARDWAREPROFILECHANGE* = 32
  SERVICE_ACCEPT_POWEREVENT* = 64
  SERVICE_ACCEPT_SESSIONCHANGE* = 128
  SERVICE_CONTROL_STOP* = 1
  SERVICE_CONTROL_PAUSE* = 2
  SERVICE_CONTROL_CONTINUE* = 3
  SERVICE_CONTROL_INTERROGATE* = 4
  SERVICE_CONTROL_SHUTDOWN* = 5
  SERVICE_CONTROL_PARAMCHANGE* = 6
  SERVICE_CONTROL_NETBINDADD* = 7
  SERVICE_CONTROL_NETBINDREMOVE* = 8
  SERVICE_CONTROL_NETBINDENABLE* = 9
  SERVICE_CONTROL_NETBINDDISABLE* = 10
  SERVICE_CONTROL_DEVICEEVENT* = 11
  SERVICE_CONTROL_HARDWAREPROFILECHANGE* = 12
  SERVICE_CONTROL_POWEREVENT* = 13
  SERVICE_CONTROL_SESSIONCHANGE* = 14
  SERVICE_ACTIVE* = 1
  SERVICE_INACTIVE* = 2
  SERVICE_STATE_ALL* = 3
  SERVICE_QUERY_CONFIG* = 0x0001
  SERVICE_CHANGE_CONFIG* = 0x0002
  SERVICE_QUERY_STATUS* = 0x0004
  SERVICE_ENUMERATE_DEPENDENTS* = 0x0008
  SERVICE_START* = 0x0010
  SERVICE_STOP* = 0x0020
  SERVICE_PAUSE_CONTINUE* = 0x0040
  SERVICE_INTERROGATE* = 0x0080
  SERVICE_USER_DEFINED_CONTROL* = 0x0100
  SERVICE_ALL_ACCESS* = (0x01FF or STANDARD_RIGHTS_REQUIRED.ord).DWORD
  SERVICE_RUNS_IN_SYSTEM_PROCESS* = 1
  SERVICE_CONFIG_DESCRIPTION* = 1
  SERVICE_CONFIG_FAILURE_ACTIONS* = 2
  SERVICE_CONFIG_DELAYED_AUTO_START_INFO* = 3
  SERVICE_CONFIG_FAILURE_ACTIONS_FLAG* = 4
  SERVICE_CONFIG_SERVICE_SID_INFO* = 5
  SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO* = 6
  SERVICE_CONFIG_PRESHUTDOWN_INFO* = 7

type
  SERVICE_STATUS* {.final, pure.} = object
    dwServiceType*: DWORD
    dwCurrentState*: DWORD
    dwControlsAccepted*: DWORD
    dwWin32ExitCode*: DWORD
    dwServiceSpecificExitCode*: DWORD
    dwCheckPoint*: DWORD
    dwWaitHint*: DWORD
  LPSERVICE_STATUS* = ptr SERVICE_STATUS
  ENUM_SERVICE_STATUSA* {.final, pure.} = object
    lpServiceName*: LPSTR
    lpDisplayName*: LPSTR
    ServiceStatus*: SERVICE_STATUS
  LPENUM_SERVICE_STATUSA* = ptr ENUM_SERVICE_STATUSA
  ENUM_SERVICE_STATUSW* {.final, pure.} = object
    lpServiceName*: LPWSTR
    lpDisplayName*: LPWSTR
    ServiceStatus*: SERVICE_STATUS
  LPENUM_SERVICE_STATUSW* = ptr ENUM_SERVICE_STATUSW
  TQUERY_SERVICE_CONFIGA* {.final, pure.} = object # renamed from QUERY_SERVICE_CONFIGA
    dwServiceType*: DWORD
    dwStartType*: DWORD
    dwErrorControl*: DWORD
    lpBinaryPathName*: LPSTR
    lpLoadOrderGroup*: LPSTR
    dwTagId*: DWORD
    lpDependencies*: LPSTR
    lpServiceStartName*: LPSTR
    lpDisplayName*: LPSTR
  LPQUERY_SERVICE_CONFIGA* = ptr TQUERY_SERVICE_CONFIGA
  TQUERY_SERVICE_CONFIGW* {.final, pure.} = object # renamed from QUERY_SERVICE_CONFIGW
    dwServiceType*: DWORD
    dwStartType*: DWORD
    dwErrorControl*: DWORD
    lpBinaryPathName*: LPWSTR
    lpLoadOrderGroup*: LPWSTR
    dwTagId*: DWORD
    lpDependencies*: LPWSTR
    lpServiceStartName*: LPWSTR
    lpDisplayName*: LPWSTR
  LPQUERY_SERVICE_CONFIGW* = ptr TQUERY_SERVICE_CONFIGW
  TQUERY_SERVICE_LOCK_STATUSA* {.final, pure.} = object # renamed from QUERY_SERVICE_LOCK_STATUSA
    fIsLocked*: DWORD
    lpLockOwner*: LPSTR
    dwLockDuration*: DWORD
  LPQUERY_SERVICE_LOCK_STATUSA* = ptr TQUERY_SERVICE_LOCK_STATUSA
  TQUERY_SERVICE_LOCK_STATUSW* {.final, pure.} = object # renamed from QUERY_SERVICE_LOCK_STATUSW
    fIsLocked*: DWORD
    lpLockOwner*: LPWSTR
    dwLockDuration*: DWORD
  LPQUERY_SERVICE_LOCK_STATUSW* = ptr TQUERY_SERVICE_LOCK_STATUSW
  LPSERVICE_MAIN_FUNCTIONA* = proc (P1: DWORD, P2: ptr LPSTR): void {.stdcall.}
  LPSERVICE_MAIN_FUNCTIONW* = proc (P1: DWORD, P2: ptr LPWSTR): void {.stdcall.}
  SERVICE_TABLE_ENTRYA* {.final, pure.} = object
    lpServiceName*: LPSTR
    lpServiceProc*: LPSERVICE_MAIN_FUNCTIONA
  LPSERVICE_TABLE_ENTRYA* = ptr SERVICE_TABLE_ENTRYA
  SERVICE_TABLE_ENTRYW* {.final, pure.} = object
    lpServiceName*: LPWSTR
    lpServiceProc*: LPSERVICE_MAIN_FUNCTIONW
  LPSERVICE_TABLE_ENTRYW* = ptr SERVICE_TABLE_ENTRYW
  SC_HANDLE* = HANDLE
  LPSC_HANDLE* = ptr HANDLE
  SC_LOCK* = pointer
  SERVICE_STATUS_HANDLE* = DWORD
  LPHANDLER_FUNCTION* = proc (P1: DWORD): void {.stdcall.}
  LPHANDLER_FUNCTION_EX* = proc (P1: DWORD, P2: DWORD, P3: LPVOID, P4: LPVOID): DWORD {.stdcall.}
  SERVICE_STATUS_PROCESS* {.final, pure.} = object
    dwServiceType*: DWORD
    dwCurrentState*: DWORD
    dwControlsAccepted*: DWORD
    dwWin32ExitCode*: DWORD
    dwServiceSpecificExitCode*: DWORD
    dwCheckPoint*: DWORD
    dwWaitHint*: DWORD
    dwProcessId*: DWORD
    dwServiceFlags*: DWORD
  LPSERVICE_STATUS_PROCESS* = ptr SERVICE_STATUS_PROCESS
  SC_STATUS_TYPE* = int32
  SC_ENUM_TYPE* = int32
  ENUM_SERVICE_STATUS_PROCESSA* {.final, pure.} = object
    lpServiceName*: LPSTR
    lpDisplayName*: LPSTR
    ServiceStatusProcess*: SERVICE_STATUS_PROCESS
  LPENUM_SERVICE_STATUS_PROCESSA* = ptr ENUM_SERVICE_STATUS_PROCESSA
  ENUM_SERVICE_STATUS_PROCESSW* {.final, pure.} = object
    lpServiceName*: LPWSTR
    lpDisplayName*: LPWSTR
    ServiceStatusProcess*: SERVICE_STATUS_PROCESS
  LPENUM_SERVICE_STATUS_PROCESSW* = ptr ENUM_SERVICE_STATUS_PROCESSW
  SERVICE_DESCRIPTIONA* {.final, pure.} = object
    lpDescription*: LPSTR
  LPSERVICE_DESCRIPTIONA* = ptr SERVICE_DESCRIPTIONA
  SERVICE_DESCRIPTIONW* {.final, pure.} = object
    lpDescription*: LPWSTR
  LPSERVICE_DESCRIPTIONW* = ptr SERVICE_DESCRIPTIONW
  SC_ACTION_TYPE* = int32
  SC_ACTION* {.final, pure.} = object
    Type*: SC_ACTION_TYPE
    Delay*: DWORD
  LPSC_ACTION* = ptr SC_ACTION
  SERVICE_FAILURE_ACTIONSA* {.final, pure.} = object
    dwResetPeriod*: DWORD
    lpRebootMsg*: LPSTR
    lpCommand*: LPSTR
    cActions*: DWORD
    lpsaActions*: ptr SC_ACTION
  LPSERVICE_FAILURE_ACTIONSA* = ptr SERVICE_FAILURE_ACTIONSA
  SERVICE_FAILURE_ACTIONSW* {.final, pure.} = object
    dwResetPeriod*: DWORD
    lpRebootMsg*: LPWSTR
    lpCommand*: LPWSTR
    cActions*: DWORD
    lpsaActions*: ptr SC_ACTION
  LPSERVICE_FAILURE_ACTIONSW* = ptr SERVICE_FAILURE_ACTIONSW

proc ChangeServiceConfigA*(P1: SC_HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: LPCSTR, P6: LPCSTR, P7: LPDWORD, P8: LPCSTR, P9: LPCSTR, P10: LPCSTR, P11: LPCSTR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ChangeServiceConfigW*(P1: SC_HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: LPCWSTR, P6: LPCWSTR, P7: LPDWORD, P8: LPCWSTR, P9: LPCWSTR, P10: LPCWSTR, P11: LPCWSTR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CloseServiceHandle*(P1: SC_HANDLE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ControlService*(P1: SC_HANDLE, P2: DWORD, P3: LPSERVICE_STATUS): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CreateServiceA*(P1: SC_HANDLE, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: DWORD, P6: DWORD, P7: DWORD, P8: LPCSTR, P9: LPCSTR, P10: PDWORD, P11: LPCSTR, P12: LPCSTR, P13: LPCSTR): SC_HANDLE {.winapi, dynlib: "advapi32", importc.}
proc CreateServiceW*(P1: SC_HANDLE, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD, P6: DWORD, P7: DWORD, P8: LPCWSTR, P9: LPCWSTR, P10: PDWORD, P11: LPCWSTR, P12: LPCWSTR, P13: LPCWSTR): SC_HANDLE {.winapi, dynlib: "advapi32", importc.}
proc DeleteService*(P1: SC_HANDLE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc EnumDependentServicesA*(P1: SC_HANDLE, P2: DWORD, P3: LPENUM_SERVICE_STATUSA, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc EnumDependentServicesW*(P1: SC_HANDLE, P2: DWORD, P3: LPENUM_SERVICE_STATUSW, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc EnumServicesStatusA*(P1: SC_HANDLE, P2: DWORD, P3: DWORD, P4: LPENUM_SERVICE_STATUSA, P5: DWORD, P6: PDWORD, P7: PDWORD, P8: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc EnumServicesStatusW*(P1: SC_HANDLE, P2: DWORD, P3: DWORD, P4: LPENUM_SERVICE_STATUSW, P5: DWORD, P6: PDWORD, P7: PDWORD, P8: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetServiceDisplayNameA*(P1: SC_HANDLE, P2: LPCSTR, P3: LPSTR, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetServiceDisplayNameW*(P1: SC_HANDLE, P2: LPCWSTR, P3: LPWSTR, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetServiceKeyNameA*(P1: SC_HANDLE, P2: LPCSTR, P3: LPSTR, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc GetServiceKeyNameW*(P1: SC_HANDLE, P2: LPCWSTR, P3: LPWSTR, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc LockServiceDatabase*(P1: SC_HANDLE): SC_LOCK {.winapi, dynlib: "advapi32", importc.}
proc NotifyBootConfigStatus*(P1: BOOL): BOOL {.winapi, dynlib: "advapi32", importc.}
proc OpenSCManagerA*(P1: LPCSTR, P2: LPCSTR, P3: DWORD): SC_HANDLE {.winapi, dynlib: "advapi32", importc.}
proc OpenSCManagerW*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD): SC_HANDLE {.winapi, dynlib: "advapi32", importc.}
proc OpenServiceA*(P1: SC_HANDLE, P2: LPCSTR, P3: DWORD): SC_HANDLE {.winapi, dynlib: "advapi32", importc.}
proc OpenServiceW*(P1: SC_HANDLE, P2: LPCWSTR, P3: DWORD): SC_HANDLE {.winapi, dynlib: "advapi32", importc.}
proc QueryServiceConfigA*(P1: SC_HANDLE, P2: LPQUERY_SERVICE_CONFIGA, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc QueryServiceConfigW*(P1: SC_HANDLE, P2: LPQUERY_SERVICE_CONFIGW, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc QueryServiceLockStatusA*(P1: SC_HANDLE, P2: LPQUERY_SERVICE_LOCK_STATUSA, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc QueryServiceLockStatusW*(P1: SC_HANDLE, P2: LPQUERY_SERVICE_LOCK_STATUSW, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc QueryServiceObjectSecurity*(P1: SC_HANDLE, P2: SECURITY_INFORMATION, P3: PSECURITY_DESCRIPTOR, P4: DWORD, P5: LPDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc QueryServiceStatus*(P1: SC_HANDLE, P2: LPSERVICE_STATUS): BOOL {.winapi, dynlib: "advapi32", importc.}
proc RegisterServiceCtrlHandlerA*(P1: LPCSTR, P2: LPHANDLER_FUNCTION): SERVICE_STATUS_HANDLE {.winapi, dynlib: "advapi32", importc.}
proc RegisterServiceCtrlHandlerW*(P1: LPCWSTR, P2: LPHANDLER_FUNCTION): SERVICE_STATUS_HANDLE {.winapi, dynlib: "advapi32", importc.}
proc SetServiceObjectSecurity*(P1: SC_HANDLE, P2: SECURITY_INFORMATION, P3: PSECURITY_DESCRIPTOR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc SetServiceStatus*(P1: SERVICE_STATUS_HANDLE, P2: LPSERVICE_STATUS): BOOL {.winapi, dynlib: "advapi32", importc.}
proc StartServiceA*(P1: SC_HANDLE, P2: DWORD, P3: ptr LPCSTR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc StartServiceW*(P1: SC_HANDLE, P2: DWORD, P3: ptr LPCWSTR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc StartServiceCtrlDispatcherA*(P1: LPSERVICE_TABLE_ENTRYA): BOOL {.winapi, dynlib: "advapi32", importc.}
proc StartServiceCtrlDispatcherW*(P1: LPSERVICE_TABLE_ENTRYW): BOOL {.winapi, dynlib: "advapi32", importc.}
proc UnlockServiceDatabase*(P1: SC_LOCK): BOOL {.winapi, dynlib: "advapi32", importc.}
proc EnumServicesStatusExA*(P1: SC_HANDLE, P2: SC_ENUM_TYPE, P3: DWORD, P4: DWORD, P5: LPBYTE, P6: DWORD, P7: LPDWORD, P8: LPDWORD, P9: LPDWORD, P10: LPCSTR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc EnumServicesStatusExW*(P1: SC_HANDLE, P2: SC_ENUM_TYPE, P3: DWORD, P4: DWORD, P5: LPBYTE, P6: DWORD, P7: LPDWORD, P8: LPDWORD, P9: LPDWORD, P10: LPCWSTR): BOOL {.winapi, dynlib: "advapi32", importc.}
proc QueryServiceConfig2A*(P1: SC_HANDLE, P2: DWORD, P3: LPBYTE, P4: DWORD, P5: LPDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc QueryServiceConfig2W*(P1: SC_HANDLE, P2: DWORD, P3: LPBYTE, P4: DWORD, P5: LPDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc QueryServiceStatusEx*(P1: SC_HANDLE, P2: SC_STATUS_TYPE, P3: LPBYTE, P4: DWORD, P5: LPDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc RegisterServiceCtrlHandlerExA*(P1: LPCSTR, P2: LPHANDLER_FUNCTION_EX, P3: LPVOID): SERVICE_STATUS_HANDLE {.winapi, dynlib: "advapi32", importc.}
proc RegisterServiceCtrlHandlerExW*(P1: LPCWSTR, P2: LPHANDLER_FUNCTION_EX, P3: LPVOID): SERVICE_STATUS_HANDLE {.winapi, dynlib: "advapi32", importc.}
proc ChangeServiceConfig2A*(P1: SC_HANDLE, P2: DWORD, P3: LPVOID): BOOL {.winapi, dynlib: "advapi32", importc.}
proc ChangeServiceConfig2W*(P1: SC_HANDLE, P2: DWORD, P3: LPVOID): BOOL {.winapi, dynlib: "advapi32", importc.}

when not defined(winansi):
  type
    ENUM_SERVICE_STATUS* = ENUM_SERVICE_STATUSW
    TQUERY_SERVICE_CONFIG* = TQUERY_SERVICE_CONFIGW
    TQUERY_SERVICE_LOCK_STATUS* = TQUERY_SERVICE_LOCK_STATUSW
    LPSERVICE_MAIN_FUNCTION* = LPSERVICE_MAIN_FUNCTIONW
    SERVICE_TABLE_ENTRY* = SERVICE_TABLE_ENTRYW

  proc ChangeServiceConfig*(P1: SC_HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: LPCWSTR, P6: LPCWSTR, P7: LPDWORD, P8: LPCWSTR, P9: LPCWSTR, P10: LPCWSTR, P11: LPCWSTR): BOOL {.winapi, dynlib: "advapi32", importc: "ChangeServiceConfigW".}
  proc CreateService*(P1: SC_HANDLE, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD, P6: DWORD, P7: DWORD, P8: LPCWSTR, P9: LPCWSTR, P10: PDWORD, P11: LPCWSTR, P12: LPCWSTR, P13: LPCWSTR): SC_HANDLE {.winapi, dynlib: "advapi32", importc: "CreateServiceW".}
  proc EnumDependentServices*(P1: SC_HANDLE, P2: DWORD, P3: LPENUM_SERVICE_STATUSW, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "EnumDependentServicesW".}
  proc EnumServicesStatus*(P1: SC_HANDLE, P2: DWORD, P3: DWORD, P4: LPENUM_SERVICE_STATUSW, P5: DWORD, P6: PDWORD, P7: PDWORD, P8: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "EnumServicesStatusW".}
  proc GetServiceDisplayName*(P1: SC_HANDLE, P2: LPCWSTR, P3: LPWSTR, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "GetServiceDisplayNameW".}
  proc GetServiceKeyName*(P1: SC_HANDLE, P2: LPCWSTR, P3: LPWSTR, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "GetServiceKeyNameW".}
  proc OpenSCManager*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD): SC_HANDLE {.winapi, dynlib: "advapi32", importc: "OpenSCManagerW".}
  proc OpenService*(P1: SC_HANDLE, P2: LPCWSTR, P3: DWORD): SC_HANDLE {.winapi, dynlib: "advapi32", importc: "OpenServiceW".}
  proc QueryServiceConfig*(P1: SC_HANDLE, P2: LPQUERY_SERVICE_CONFIGW, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "QueryServiceConfigW".}
  proc QueryServiceLockStatus*(P1: SC_HANDLE, P2: LPQUERY_SERVICE_LOCK_STATUSW, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "QueryServiceLockStatusW".}
  proc RegisterServiceCtrlHandler*(P1: LPCWSTR, P2: LPHANDLER_FUNCTION): SERVICE_STATUS_HANDLE {.winapi, dynlib: "advapi32", importc: "RegisterServiceCtrlHandlerW".}
  proc StartService*(P1: SC_HANDLE, P2: DWORD, P3: ptr LPCWSTR): BOOL {.winapi, dynlib: "advapi32", importc: "StartServiceW".}
  proc StartServiceCtrlDispatcher*(P1: LPSERVICE_TABLE_ENTRYW): BOOL {.winapi, dynlib: "advapi32", importc: "StartServiceCtrlDispatcherW".}

  type
    ENUM_SERVICE_STATUS_PROCESS* = ENUM_SERVICE_STATUS_PROCESSW
    SERVICE_DESCRIPTION* = SERVICE_DESCRIPTIONW
    SERVICE_FAILURE_ACTIONS* = SERVICE_FAILURE_ACTIONSW

  proc EnumServicesStatusEx*(P1: SC_HANDLE, P2: SC_ENUM_TYPE, P3: DWORD, P4: DWORD, P5: LPBYTE, P6: DWORD, P7: LPDWORD, P8: LPDWORD, P9: LPDWORD, P10: LPCWSTR): BOOL {.winapi, dynlib: "advapi32", importc: "EnumServicesStatusExW".}
  proc QueryServiceConfig2*(P1: SC_HANDLE, P2: DWORD, P3: LPBYTE, P4: DWORD, P5: LPDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "QueryServiceConfig2W".}
  proc RegisterServiceCtrlHandlerEx*(P1: LPCWSTR, P2: LPHANDLER_FUNCTION_EX, P3: LPVOID): SERVICE_STATUS_HANDLE {.winapi, dynlib: "advapi32", importc: "RegisterServiceCtrlHandlerExW".}
  proc ChangeServiceConfig2*(P1: SC_HANDLE, P2: DWORD, P3: LPVOID): BOOL {.winapi, dynlib: "advapi32", importc: "ChangeServiceConfig2W".}

else:
  type
    ENUM_SERVICE_STATUS* = ENUM_SERVICE_STATUSA
    TQUERY_SERVICE_CONFIG* = TQUERY_SERVICE_CONFIGA
    TQUERY_SERVICE_LOCK_STATUS* = TQUERY_SERVICE_LOCK_STATUSA
    LPSERVICE_MAIN_FUNCTION* = LPSERVICE_MAIN_FUNCTIONA
    SERVICE_TABLE_ENTRY* = SERVICE_TABLE_ENTRYA

  proc ChangeServiceConfig*(P1: SC_HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: LPCSTR, P6: LPCSTR, P7: LPDWORD, P8: LPCSTR, P9: LPCSTR, P10: LPCSTR, P11: LPCSTR): BOOL {.winapi, dynlib: "advapi32", importc: "ChangeServiceConfigA".}
  proc CreateService*(P1: SC_HANDLE, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: DWORD, P6: DWORD, P7: DWORD, P8: LPCSTR, P9: LPCSTR, P10: PDWORD, P11: LPCSTR, P12: LPCSTR, P13: LPCSTR): SC_HANDLE {.winapi, dynlib: "advapi32", importc: "CreateServiceA".}
  proc EnumDependentServices*(P1: SC_HANDLE, P2: DWORD, P3: LPENUM_SERVICE_STATUSA, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "EnumDependentServicesA".}
  proc EnumServicesStatus*(P1: SC_HANDLE, P2: DWORD, P3: DWORD, P4: LPENUM_SERVICE_STATUSA, P5: DWORD, P6: PDWORD, P7: PDWORD, P8: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "EnumServicesStatusA".}
  proc GetServiceDisplayName*(P1: SC_HANDLE, P2: LPCSTR, P3: LPSTR, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "GetServiceDisplayNameA".}
  proc GetServiceKeyName*(P1: SC_HANDLE, P2: LPCSTR, P3: LPSTR, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "GetServiceKeyNameA".}
  proc OpenSCManager*(P1: LPCSTR, P2: LPCSTR, P3: DWORD): SC_HANDLE {.winapi, dynlib: "advapi32", importc: "OpenSCManagerA".}
  proc OpenService*(P1: SC_HANDLE, P2: LPCSTR, P3: DWORD): SC_HANDLE {.winapi, dynlib: "advapi32", importc: "OpenServiceA".}
  proc QueryServiceConfig*(P1: SC_HANDLE, P2: LPQUERY_SERVICE_CONFIGA, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "QueryServiceConfigA".}
  proc QueryServiceLockStatus*(P1: SC_HANDLE, P2: LPQUERY_SERVICE_LOCK_STATUSA, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "QueryServiceLockStatusA".}
  proc RegisterServiceCtrlHandler*(P1: LPCSTR, P2: LPHANDLER_FUNCTION): SERVICE_STATUS_HANDLE {.winapi, dynlib: "advapi32", importc: "RegisterServiceCtrlHandlerA".}
  proc StartService*(P1: SC_HANDLE, P2: DWORD, P3: ptr LPCSTR): BOOL {.winapi, dynlib: "advapi32", importc: "StartServiceA".}
  proc StartServiceCtrlDispatcher*(P1: LPSERVICE_TABLE_ENTRYA): BOOL {.winapi, dynlib: "advapi32", importc: "StartServiceCtrlDispatcherA".}

  type
    ENUM_SERVICE_STATUS_PROCESS* = ENUM_SERVICE_STATUS_PROCESSA
    SERVICE_DESCRIPTION* = SERVICE_DESCRIPTIONA
    SERVICE_FAILURE_ACTIONS* = SERVICE_FAILURE_ACTIONSA

  proc EnumServicesStatusEx*(P1: SC_HANDLE, P2: SC_ENUM_TYPE, P3: DWORD, P4: DWORD, P5: LPBYTE, P6: DWORD, P7: LPDWORD, P8: LPDWORD, P9: LPDWORD, P10: LPCSTR): BOOL {.winapi, dynlib: "advapi32", importc: "EnumServicesStatusExA".}
  proc QueryServiceConfig2*(P1: SC_HANDLE, P2: DWORD, P3: LPBYTE, P4: DWORD, P5: LPDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "QueryServiceConfig2A".}
  proc RegisterServiceCtrlHandlerEx*(P1: LPCSTR, P2: LPHANDLER_FUNCTION_EX, P3: LPVOID): SERVICE_STATUS_HANDLE {.winapi, dynlib: "advapi32", importc: "RegisterServiceCtrlHandlerExA".}
  proc ChangeServiceConfig2*(P1: SC_HANDLE, P2: DWORD, P3: LPVOID): BOOL {.winapi, dynlib: "advapi32", importc: "ChangeServiceConfig2A".}

type
  LPENUM_SERVICE_STATUS* = ptr ENUM_SERVICE_STATUS
  LPQUERY_SERVICE_CONFIG* = ptr TQUERY_SERVICE_CONFIG
  LPQUERY_SERVICE_LOCK_STATUS* = ptr TQUERY_SERVICE_LOCK_STATUS
  LPSERVICE_TABLE_ENTRY* = ptr SERVICE_TABLE_ENTRY

type
  LPENUM_SERVICE_STATUS_PROCESS* = ptr ENUM_SERVICE_STATUS_PROCESS
  LPSERVICE_DESCRIPTION* = ptr SERVICE_DESCRIPTION
  LPSERVICE_FAILURE_ACTIONS* = ptr SERVICE_FAILURE_ACTIONS

# core/winver.nim

const
  VS_FILE_INFO* = 16
  VS_VERSION_INFO* = 1
  VS_USER_DEFINED* = 100
  VS_FFI_SIGNATURE* = -17890115
  VS_FFI_STRUCVERSION* = 0x10000
  VS_FFI_FILEFLAGSMASK* = 0x3F
  VS_FF_DEBUG* = 1
  VS_FF_PRERELEASE* = 2
  VS_FF_PATCHED* = 4
  VS_FF_PRIVATEBUILD* = 8
  VS_FF_INFOINFERRED* = 16
  VS_FF_SPECIALBUILD* = 32
  VOS_UNKNOWN* = 0
  VOS_DOS* = 0x10000
  VOS_OS216* = 0x20000
  VOS_OS232* = 0x30000
  VOS_NT* = 0x40000
  VOS_BASE* = 0
  VOS_WINDOWS16* = 1
  VOS_PM16* = 2
  VOS_PM32* = 3
  VOS_WINDOWS32* = 4
  VOS_DOS_WINDOWS16* = 0x10001
  VOS_DOS_WINDOWS32* = 0x10004
  VOS_OS216_PM16* = 0x20002
  VOS_OS232_PM32* = 0x30003
  VOS_NT_WINDOWS32* = 0x40004
  VFT_UNKNOWN* = 0
  VFT_APP* = 1
  VFT_DLL* = 2
  VFT_DRV* = 3
  VFT_FONT* = 4
  VFT_VXD* = 5
  VFT_STATIC_LIB* = 7
  VFT2_UNKNOWN* = 0
  VFT2_DRV_PRINTER* = 1
  VFT2_DRV_KEYBOARD* = 2
  VFT2_DRV_LANGUAGE* = 3
  VFT2_DRV_DISPLAY* = 4
  VFT2_DRV_MOUSE* = 5
  VFT2_DRV_NETWORK* = 6
  VFT2_DRV_SYSTEM* = 7
  VFT2_DRV_INSTALLABLE* = 8
  VFT2_DRV_SOUND* = 9
  VFT2_DRV_COMM* = 10
  VFT2_DRV_INPUTMETHOD* = 11
  VFT2_FONT_RASTER* = 1
  VFT2_FONT_VECTOR* = 2
  VFT2_FONT_TRUETYPE* = 3
  VFFF_ISSHAREDFILE* = 1
  VFF_CURNEDEST* = 1
  VFF_FILEINUSE* = 2
  VFF_BUFFTOOSMALL* = 4
  VIFF_FORCEINSTALL* = 1
  VIFF_DONTDELETEOLD* = 2
  VIF_TEMPFILE* = 0x00001
  VIF_MISMATCH* = 0x00002
  VIF_SRCOLD* = 0x00004
  VIF_DIFFLANG* = 0x00008
  VIF_DIFFCODEPG* = 0x00010
  VIF_DIFFTYPE* = 0x00020
  VIF_WRITEPROT* = 0x00040
  VIF_FILEINUSE* = 0x00080
  VIF_OUTOFSPACE* = 0x00100
  VIF_ACCESSVIOLATION* = 0x00200
  VIF_SHARINGVIOLATION* = 0x00400
  VIF_CANNOTCREATE* = 0x00800
  VIF_CANNOTDELETE* = 0x01000
  VIF_CANNOTRENAME* = 0x02000
  VIF_CANNOTDELETECUR* = 0x04000
  VIF_OUTOFMEMORY* = 0x08000
  VIF_CANNOTREADSRC* = 0x10000
  VIF_CANNOTREADDST* = 0x20000
  VIF_BUFFTOOSMALL* = 0x40000

type
  VS_FIXEDFILEINFO* {.final, pure.} = object
    dwSignature*: DWORD
    dwStrucVersion*: DWORD
    dwFileVersionMS*: DWORD
    dwFileVersionLS*: DWORD
    dwProductVersionMS*: DWORD
    dwProductVersionLS*: DWORD
    dwFileFlagsMask*: DWORD
    dwFileFlags*: DWORD
    dwFileOS*: DWORD
    dwFileType*: DWORD
    dwFileSubtype*: DWORD
    dwFileDateMS*: DWORD
    dwFileDateLS*: DWORD

proc VerFindFileA*(P1: DWORD, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR, P5: LPSTR, P6: PUINT, P7: LPSTR, P8: PUINT): DWORD {.winapi, dynlib: "kernel32", importc.}
proc VerFindFileW*(P1: DWORD, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR, P5: LPWSTR, P6: PUINT, P7: LPWSTR, P8: PUINT): DWORD {.winapi, dynlib: "kernel32", importc.}
proc VerInstallFileA*(P1: DWORD, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR, P5: LPCSTR, P6: LPCSTR, P7: LPSTR, P8: PUINT): DWORD {.winapi, dynlib: "kernel32", importc.}
proc VerInstallFileW*(P1: DWORD, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR, P5: LPCWSTR, P6: LPCWSTR, P7: LPWSTR, P8: PUINT): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetFileVersionInfoSizeA*(P1: LPCSTR, P2: PDWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetFileVersionInfoSizeW*(P1: LPCWSTR, P2: PDWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc GetFileVersionInfoA*(P1: LPCSTR, P2: DWORD, P3: DWORD, P4: PVOID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc GetFileVersionInfoW*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: PVOID): BOOL {.winapi, dynlib: "kernel32", importc.}
proc VerLanguageNameA*(P1: DWORD, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc VerLanguageNameW*(P1: DWORD, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc.}
proc VerQueryValueA*(P1: LPCVOID, P2: LPCSTR, P3: ptr LPVOID, P4: PUINT): BOOL {.winapi, dynlib: "kernel32", importc.}
proc VerQueryValueW*(P1: LPCVOID, P2: LPCWSTR, P3: ptr LPVOID, P4: PUINT): BOOL {.winapi, dynlib: "kernel32", importc.}

when not defined(winansi):
  proc VerFindFile*(P1: DWORD, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR, P5: LPWSTR, P6: PUINT, P7: LPWSTR, P8: PUINT): DWORD {.winapi, dynlib: "kernel32", importc: "VerFindFileW".}
  proc VerQueryValue*(P1: LPCVOID, P2: LPCWSTR, P3: ptr LPVOID, P4: PUINT): BOOL {.winapi, dynlib: "kernel32", importc: "VerQueryValueW".}
  proc VerInstallFile*(P1: DWORD, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR, P5: LPCWSTR, P6: LPCWSTR, P7: LPWSTR, P8: PUINT): DWORD {.winapi, dynlib: "kernel32", importc: "VerInstallFileW".}
  proc GetFileVersionInfoSize*(P1: LPCWSTR, P2: PDWORD): DWORD {.winapi, dynlib: "kernel32", importc: "GetFileVersionInfoSizeW".}
  proc GetFileVersionInfo*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: PVOID): BOOL {.winapi, dynlib: "kernel32", importc: "GetFileVersionInfoW".}
  proc VerLanguageName*(P1: DWORD, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "VerLanguageNameW".}

else:
  proc VerQueryValue*(P1: LPCVOID, P2: LPCSTR, P3: ptr LPVOID, P4: PUINT): BOOL {.winapi, dynlib: "kernel32", importc: "VerQueryValueA".}
  proc VerFindFile*(P1: DWORD, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR, P5: LPSTR, P6: PUINT, P7: LPSTR, P8: PUINT): DWORD {.winapi, dynlib: "kernel32", importc: "VerFindFileA".}
  proc VerInstallFile*(P1: DWORD, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR, P5: LPCSTR, P6: LPCSTR, P7: LPSTR, P8: PUINT): DWORD {.winapi, dynlib: "kernel32", importc: "VerInstallFileA".}
  proc GetFileVersionInfoSize*(P1: LPCSTR, P2: PDWORD): DWORD {.winapi, dynlib: "kernel32", importc: "GetFileVersionInfoSizeA".}
  proc GetFileVersionInfo*(P1: LPCSTR, P2: DWORD, P3: DWORD, P4: PVOID): BOOL {.winapi, dynlib: "kernel32", importc: "GetFileVersionInfoA".}
  proc VerLanguageName*(P1: DWORD, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "kernel32", importc: "VerLanguageNameA".}

# core/winnetwk.nim

const
  WNNC_NET_MSNET* = 0x00010000
  WNNC_NET_LANMAN* = 0x00020000
  WNNC_NET_NETWARE* = 0x00030000
  WNNC_NET_VINES* = 0x00040000
  WNNC_NET_10NET* = 0x00050000
  WNNC_NET_LOCUS* = 0x00060000
  WNNC_NET_SUN_PC_NFS* = 0x00070000
  WNNC_NET_LANSTEP* = 0x00080000
  WNNC_NET_9TILES* = 0x00090000
  WNNC_NET_LANTASTIC* = 0x000A0000
  WNNC_NET_AS400* = 0x000B0000
  WNNC_NET_FTP_NFS* = 0x000C0000
  WNNC_NET_PATHWORKS* = 0x000D0000
  WNNC_NET_LIFENET* = 0x000E0000
  WNNC_NET_POWERLAN* = 0x000F0000
  WNNC_NET_BWNFS* = 0x00100000
  WNNC_NET_COGENT* = 0x00110000
  WNNC_NET_FARALLON* = 0x00120000
  WNNC_NET_APPLETALK* = 0x00130000
  WNNC_NET_INTERGRAPH* = 0x00140000
  WNNC_NET_SYMFONET* = 0x00150000
  WNNC_NET_CLEARCASE* = 0x00160000
  WNNC_NET_FRONTIER* = 0x00170000
  WNNC_NET_BMC* = 0x00180000
  WNNC_NET_DCE* = 0x00190000
  WNNC_NET_AVID* = 0x001A0000
  WNNC_NET_DOCUSPACE* = 0x001B0000
  WNNC_NET_MANGOSOFT* = 0x001C0000
  WNNC_NET_SERNET* = 0x001D0000
  WNNC_NET_DECORB* = 0x00200000
  WNNC_NET_PROTSTOR* = 0x00210000
  WNNC_NET_FJ_REDIR* = 0x00220000
  WNNC_NET_DISTINCT* = 0x00230000
  WNNC_NET_TWINS* = 0x00240000
  WNNC_NET_RDR2SAMPLE* = 0x00250000
  WNNC_NET_CSC* = 0x00260000
  WNNC_NET_3IN1* = 0x00270000
  WNNC_NET_EXTENDNET* = 0x00290000
  WNNC_NET_OBJECT_DIRE* = 0x00300000
  WNNC_NET_MASFAX* = 0x00310000
  WNNC_NET_HOB_NFS* = 0x00320000
  WNNC_NET_SHIVA* = 0x00330000
  WNNC_NET_IBMAL* = 0x00340000
  WNNC_CRED_MANAGER* = 0xFFFF0000'u32
  RESOURCE_CONNECTED* = 1
  RESOURCE_GLOBALNET* = 2
  RESOURCE_REMEMBERED* = 3
  RESOURCE_RECENT* = 4
  RESOURCE_CONTEXT* = 5
  RESOURCETYPE_ANY* = 0
  RESOURCETYPE_DISK* = 1
  RESOURCETYPE_PRINT* = 2
  RESOURCETYPE_RESERVED* = 8
  RESOURCETYPE_UNKNOWN* = 0xFFFFFFFF'u32
  RESOURCEUSAGE_CONNECTABLE* = 0x00000001
  RESOURCEUSAGE_CONTAINER* = 0x00000002
  RESOURCEUSAGE_NOLOCALDEVICE* = 0x00000004
  RESOURCEUSAGE_SIBLING* = 0x00000008
  RESOURCEUSAGE_ATTACHED* = 0x00000010
  RESOURCEUSAGE_ALL* = (( RESOURCEUSAGE_CONNECTABLE or RESOURCEUSAGE_CONTAINER or RESOURCEUSAGE_ATTACHED )).DWORD
  RESOURCEUSAGE_RESERVED* = 0x80000000'u32
  RESOURCEDISPLAYTYPE_GENERIC* = 0
  RESOURCEDISPLAYTYPE_DOMAIN* = 1
  RESOURCEDISPLAYTYPE_SERVER* = 2
  RESOURCEDISPLAYTYPE_SHARE* = 3
  RESOURCEDISPLAYTYPE_FILE* = 4
  RESOURCEDISPLAYTYPE_GROUP* = 5
  RESOURCEDISPLAYTYPE_NETWORK* = 6
  RESOURCEDISPLAYTYPE_ROOT* = 7
  RESOURCEDISPLAYTYPE_SHAREADMIN* = 8
  RESOURCEDISPLAYTYPE_DIRECTORY* = 9
  RESOURCEDISPLAYTYPE_TREE* = 10
  NETPROPERTY_PERSISTENT* = 1
  CONNECT_UPDATE_PROFILE* = 1
  CONNECT_UPDATE_RECENT* = 2
  CONNECT_TEMPORARY* = 4
  CONNECT_INTERACTIVE* = 8
  CONNECT_PROMPT* = 16
  CONNECT_NEED_DRIVE* = 32
  CONNECT_REFCOUNT* = 64
  CONNECT_REDIRECT* = 128
  CONNECT_LOCALDRIVE* = 256
  CONNECT_CURRENT_MEDIA* = 512
  CONNDLG_RO_PATH* = 1
  CONNDLG_CONN_POINT* = 2
  CONNDLG_USE_MRU* = 4
  CONNDLG_HIDE_BOX* = 8
  CONNDLG_PERSIST* = 16
  CONNDLG_NOT_PERSIST* = 32
  DISC_UPDATE_PROFILE* = 1
  DISC_NO_FORCE* = 64
  WNFMT_MULTILINE* = 1
  WNFMT_ABBREVIATED* = 2
  WNFMT_INENUM* = 16
  WNFMT_CONNECTION* = 32
  WN_SUCCESS* = NO_ERROR
  WN_NO_ERROR* = NO_ERROR
  WN_NOT_SUPPORTED* = ERROR_NOT_SUPPORTED
  WN_CANCEL* = ERROR_CANCELLED
  WN_RETRY* = ERROR_RETRY
  WN_NET_ERROR* = ERROR_UNEXP_NET_ERR
  WN_MORE_DATA* = ERROR_MORE_DATA
  WN_BAD_POINTER* = ERROR_INVALID_ADDRESS
  WN_BAD_VALUE* = ERROR_INVALID_PARAMETER
  WN_BAD_USER* = ERROR_BAD_USERNAME
  WN_BAD_PASSWORD* = ERROR_INVALID_PASSWORD
  WN_ACCESS_DENIED* = ERROR_ACCESS_DENIED
  WN_FUNCTION_BUSY* = ERROR_BUSY
  WN_WINDOWS_ERROR* = ERROR_UNEXP_NET_ERR
  WN_OUT_OF_MEMORY* = ERROR_NOT_ENOUGH_MEMORY
  WN_NO_NETWORK* = ERROR_NO_NETWORK
  WN_EXTENDED_ERROR* = ERROR_EXTENDED_ERROR
  WN_BAD_LEVEL* = ERROR_INVALID_LEVEL
  WN_BAD_HANDLE* = ERROR_INVALID_HANDLE
  WN_NOT_INITIALIZING* = ERROR_ALREADY_INITIALIZED
  WN_NO_MORE_DEVICES* = ERROR_NO_MORE_DEVICES
  WN_NOT_CONNECTED* = ERROR_NOT_CONNECTED
  WN_OPEN_FILES* = ERROR_OPEN_FILES
  WN_DEVICE_IN_USE* = ERROR_DEVICE_IN_USE
  WN_BAD_NETNAME* = ERROR_BAD_NET_NAME
  WN_BAD_LOCALNAME* = ERROR_BAD_DEVICE
  WN_ALREADY_CONNECTED* = ERROR_ALREADY_ASSIGNED
  WN_DEVICE_ERROR* = ERROR_GEN_FAILURE
  WN_CONNECTION_CLOSED* = ERROR_CONNECTION_UNAVAIL
  WN_NO_NET_OR_BAD_PATH* = ERROR_NO_NET_OR_BAD_PATH
  WN_BAD_PROVIDER* = ERROR_BAD_PROVIDER
  WN_CANNOT_OPEN_PROFILE* = ERROR_CANNOT_OPEN_PROFILE
  WN_BAD_PROFILE* = ERROR_BAD_PROFILE
  WN_BAD_DEV_TYPE* = ERROR_BAD_DEV_TYPE
  WN_DEVICE_ALREADY_REMEMBERED* = ERROR_DEVICE_ALREADY_REMEMBERED
  WN_NO_MORE_ENTRIES* = ERROR_NO_MORE_ITEMS
  WN_NOT_CONTAINER* = ERROR_NOT_CONTAINER
  WN_NOT_AUTHENTICATED* = ERROR_NOT_AUTHENTICATED
  WN_NOT_LOGGED_ON* = ERROR_NOT_LOGGED_ON
  WN_NOT_VALIDATED* = ERROR_NO_LOGON_SERVERS
  UNIVERSAL_NAME_INFO_LEVEL* = 1
  REMOTE_NAME_INFO_LEVEL* = 2
  NETINFO_DLL16* = 1
  NETINFO_DISKRED* = 4
  NETINFO_PRINTERRED* = 8
  RP_LOGON* = 1
  RP_INIFILE* = 2
  PP_DISPLAYERRORS* = 1
  WNCON_FORNETCARD* = 1
  WNCON_NOTROUTED* = 2
  WNCON_SLOWLINK* = 4
  WNCON_DYNAMIC* = 8

type
  NETRESOURCEA* {.final, pure.} = object
    dwScope*: DWORD
    dwType*: DWORD
    dwDisplayType*: DWORD
    dwUsage*: DWORD
    lpLocalName*: LPSTR
    lpRemoteName*: LPSTR
    lpComment*: LPSTR
    lpProvider*: LPSTR
  LPNETRESOURCEA* = ptr NETRESOURCEA
  NETRESOURCEW* {.final, pure.} = object
    dwScope*: DWORD
    dwType*: DWORD
    dwDisplayType*: DWORD
    dwUsage*: DWORD
    lpLocalName*: LPWSTR
    lpRemoteName*: LPWSTR
    lpComment*: LPWSTR
    lpProvider*: LPWSTR
  LPNETRESOURCEW* = ptr NETRESOURCEW
  CONNECTDLGSTRUCTA* {.final, pure.} = object
    cbStructure*: DWORD
    hwndOwner*: HWND
    lpConnRes*: LPNETRESOURCEA
    dwFlags*: DWORD
    dwDevNum*: DWORD
  LPCONNECTDLGSTRUCTA* = ptr CONNECTDLGSTRUCTA
  CONNECTDLGSTRUCTW* {.final, pure.} = object
    cbStructure*: DWORD
    hwndOwner*: HWND
    lpConnRes*: LPNETRESOURCEW
    dwFlags*: DWORD
    dwDevNum*: DWORD
  LPCONNECTDLGSTRUCTW* = ptr CONNECTDLGSTRUCTW
  DISCDLGSTRUCTA* {.final, pure.} = object
    cbStructure*: DWORD
    hwndOwner*: HWND
    lpLocalName*: LPSTR
    lpRemoteName*: LPSTR
    dwFlags*: DWORD
  LPDISCDLGSTRUCTA* = ptr DISCDLGSTRUCTA
  DISCDLGSTRUCTW* {.final, pure.} = object
    cbStructure*: DWORD
    hwndOwner*: HWND
    lpLocalName*: LPWSTR
    lpRemoteName*: LPWSTR
    dwFlags*: DWORD
  LPDISCDLGSTRUCTW* = ptr DISCDLGSTRUCTW
  UNIVERSAL_NAME_INFOA* {.final, pure.} = object
    lpUniversalName*: LPSTR
  LPUNIVERSAL_NAME_INFOA* = ptr UNIVERSAL_NAME_INFOA
  UNIVERSAL_NAME_INFOW* {.final, pure.} = object
    lpUniversalName*: LPWSTR
  LPUNIVERSAL_NAME_INFOW* = ptr UNIVERSAL_NAME_INFOW
  REMOTE_NAME_INFOA* {.final, pure.} = object
    lpUniversalName*: LPSTR
    lpConnectionName*: LPSTR
    lpRemainingPath*: LPSTR
  LPREMOTE_NAME_INFOA* = ptr REMOTE_NAME_INFOA
  REMOTE_NAME_INFOW* {.final, pure.} = object
    lpUniversalName*: LPWSTR
    lpConnectionName*: LPWSTR
    lpRemainingPath*: LPWSTR
  LPREMOTE_NAME_INFOW* = ptr REMOTE_NAME_INFOW
  NETINFOSTRUCT* {.final, pure.} = object
    cbStructure*: DWORD
    dwProviderVersion*: DWORD
    dwStatus*: DWORD
    dwCharacteristics*: DWORD
    dwHandle*: DWORD
    wNetType*: WORD
    dwPrinters*: DWORD
    dwDrives*: DWORD
  LPNETINFOSTRUCT* = ptr NETINFOSTRUCT
  NETCONNECTINFOSTRUCT* {.final, pure.} = object
    cbStructure*: DWORD
    dwFlags*: DWORD
    dwSpeed*: DWORD
    dwDelay*: DWORD
    dwOptDataSize*: DWORD
  LPNETCONNECTINFOSTRUCT* = ptr NETCONNECTINFOSTRUCT
proc WNetAddConnection2A*(P1: LPNETRESOURCEA, P2: LPCSTR, P3: LPCSTR, P4: DWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetAddConnection2W*(P1: LPNETRESOURCEW, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetAddConnection3A*(P1: HWND, P2: LPNETRESOURCEA, P3: LPCSTR, P4: LPCSTR, P5: DWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetAddConnection3W*(P1: HWND, P2: LPNETRESOURCEW, P3: LPCWSTR, P4: LPCWSTR, P5: DWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetCancelConnection2A*(P1: LPCSTR, P2: DWORD, P3: BOOL): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetCancelConnection2W*(P1: LPCWSTR, P2: DWORD, P3: BOOL): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetGetConnectionA*(P1: LPCSTR, P2: LPSTR, P3: PDWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetGetConnectionW*(P1: LPCWSTR, P2: LPWSTR, P3: PDWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetUseConnectionA*(P1: HWND, P2: LPNETRESOURCEA, P3: LPCSTR, P4: LPCSTR, P5: DWORD, P6: LPSTR, P7: PDWORD, P8: PDWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetUseConnectionW*(P1: HWND, P2: LPNETRESOURCEW, P3: LPCWSTR, P4: LPCWSTR, P5: DWORD, P6: LPWSTR, P7: PDWORD, P8: PDWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetSetConnectionA*(P1: LPCSTR, P2: DWORD, P3: PVOID): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetSetConnectionW*(P1: LPCWSTR, P2: DWORD, P3: PVOID): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetConnectionDialog*(P1: HWND, P2: DWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetDisconnectDialog*(P1: HWND, P2: DWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetConnectionDialog1A*(P1: LPCONNECTDLGSTRUCTA): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetConnectionDialog1W*(P1: LPCONNECTDLGSTRUCTW): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetDisconnectDialog1A*(P1: LPDISCDLGSTRUCTA): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetDisconnectDialog1W*(P1: LPDISCDLGSTRUCTW): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetOpenEnumA*(P1: DWORD, P2: DWORD, P3: DWORD, P4: LPNETRESOURCEA, P5: LPHANDLE): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetOpenEnumW*(P1: DWORD, P2: DWORD, P3: DWORD, P4: LPNETRESOURCEW, P5: LPHANDLE): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetEnumResourceA*(P1: HANDLE, P2: PDWORD, P3: PVOID, P4: PDWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetEnumResourceW*(P1: HANDLE, P2: PDWORD, P3: PVOID, P4: PDWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetCloseEnum*(P1: HANDLE): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetGetUniversalNameA*(P1: LPCSTR, P2: DWORD, P3: PVOID, P4: PDWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetGetUniversalNameW*(P1: LPCWSTR, P2: DWORD, P3: PVOID, P4: PDWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetGetUserA*(P1: LPCSTR, P2: LPSTR, P3: PDWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetGetUserW*(P1: LPCWSTR, P2: LPWSTR, P3: PDWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetGetProviderNameA*(P1: DWORD, P2: LPSTR, P3: PDWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetGetProviderNameW*(P1: DWORD, P2: LPWSTR, P3: PDWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetGetNetworkInformationA*(P1: LPCSTR, P2: LPNETINFOSTRUCT): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetGetNetworkInformationW*(P1: LPCWSTR, P2: LPNETINFOSTRUCT): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetGetResourceInformationA*(P1: LPNETRESOURCEA, P2: LPVOID, P3: LPDWORD, P4: ptr LPSTR): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetGetResourceInformationW*(P1: LPNETRESOURCEA, P2: LPVOID, P3: LPDWORD, P4: ptr LPWSTR): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetGetResourceParentA*(P1: LPNETRESOURCEA, P2: LPVOID, P3: LPDWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetGetResourceParentW*(P1: LPNETRESOURCEW, P2: LPVOID, P3: LPDWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetGetLastErrorA*(P1: PDWORD, P2: LPSTR, P3: DWORD, P4: LPSTR, P5: DWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetGetLastErrorW*(P1: PDWORD, P2: LPWSTR, P3: DWORD, P4: LPWSTR, P5: DWORD): DWORD {.winapi, dynlib: "mpr", importc.}
proc MultinetGetConnectionPerformanceA*(P1: LPNETRESOURCEA, P2: LPNETCONNECTINFOSTRUCT): DWORD {.winapi, dynlib: "mpr", importc.}
proc MultinetGetConnectionPerformanceW*(P1: LPNETRESOURCEW, P2: LPNETCONNECTINFOSTRUCT): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetAddConnectionA*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetAddConnectionW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetCancelConnectionA*(P1: LPCSTR, P2: BOOL): DWORD {.winapi, dynlib: "mpr", importc.}
proc WNetCancelConnectionW*(P1: LPCWSTR, P2: BOOL): DWORD {.winapi, dynlib: "mpr", importc.}

when not defined(winansi):
  type
    NETRESOURCE* = NETRESOURCEW
    CONNECTDLGSTRUCT* = CONNECTDLGSTRUCTW
    DISCDLGSTRUCT* = DISCDLGSTRUCTW
    REMOTE_NAME_INFO* = REMOTE_NAME_INFOW
    UNIVERSAL_NAME_INFO* = UNIVERSAL_NAME_INFOW

  proc WNetAddConnection2*(P1: LPNETRESOURCEW, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetAddConnection2W".}
  proc WNetAddConnection3*(P1: HWND, P2: LPNETRESOURCEW, P3: LPCWSTR, P4: LPCWSTR, P5: DWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetAddConnection3W".}
  proc WNetCancelConnection2*(P1: LPCWSTR, P2: DWORD, P3: BOOL): DWORD {.winapi, dynlib: "mpr", importc: "WNetCancelConnection2W".}
  proc WNetGetConnection*(P1: LPCWSTR, P2: LPWSTR, P3: PDWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetGetConnectionW".}
  proc WNetUseConnection*(P1: HWND, P2: LPNETRESOURCEW, P3: LPCWSTR, P4: LPCWSTR, P5: DWORD, P6: LPWSTR, P7: PDWORD, P8: PDWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetUseConnectionW".}
  proc WNetSetConnection*(P1: LPCWSTR, P2: DWORD, P3: PVOID): DWORD {.winapi, dynlib: "mpr", importc: "WNetSetConnectionW".}
  proc WNetConnectionDialog1*(P1: LPCONNECTDLGSTRUCTW): DWORD {.winapi, dynlib: "mpr", importc: "WNetConnectionDialog1W".}
  proc WNetDisconnectDialog1*(P1: LPDISCDLGSTRUCTW): DWORD {.winapi, dynlib: "mpr", importc: "WNetDisconnectDialog1W".}
  proc WNetOpenEnum*(P1: DWORD, P2: DWORD, P3: DWORD, P4: LPNETRESOURCEW, P5: LPHANDLE): DWORD {.winapi, dynlib: "mpr", importc: "WNetOpenEnumW".}
  proc WNetEnumResource*(P1: HANDLE, P2: PDWORD, P3: PVOID, P4: PDWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetEnumResourceW".}
  proc WNetGetUniversalName*(P1: LPCWSTR, P2: DWORD, P3: PVOID, P4: PDWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetGetUniversalNameW".}
  proc WNetGetUser*(P1: LPCWSTR, P2: LPWSTR, P3: PDWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetGetUserW".}
  proc WNetGetProviderName*(P1: DWORD, P2: LPWSTR, P3: PDWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetGetProviderNameW".}
  proc WNetGetNetworkInformation*(P1: LPCWSTR, P2: LPNETINFOSTRUCT): DWORD {.winapi, dynlib: "mpr", importc: "WNetGetNetworkInformationW".}
  proc WNetGetResourceInformation*(P1: LPNETRESOURCEA, P2: LPVOID, P3: LPDWORD, P4: ptr LPWSTR): DWORD {.winapi, dynlib: "mpr", importc: "WNetGetResourceInformationW".}
  proc WNetGetResourceParent*(P1: LPNETRESOURCEW, P2: LPVOID, P3: LPDWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetGetResourceParentW".}
  proc WNetGetLastError*(P1: PDWORD, P2: LPWSTR, P3: DWORD, P4: LPWSTR, P5: DWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetGetLastErrorW".}
  proc MultinetGetConnectionPerformance*(P1: LPNETRESOURCEW, P2: LPNETCONNECTINFOSTRUCT): DWORD {.winapi, dynlib: "mpr", importc: "MultinetGetConnectionPerformanceW".}
  proc WNetAddConnection*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): DWORD {.winapi, dynlib: "mpr", importc: "WNetAddConnectionW".}
  proc WNetCancelConnection*(P1: LPCWSTR, P2: BOOL): DWORD {.winapi, dynlib: "mpr", importc: "WNetCancelConnectionW".}

else:
  type
    NETRESOURCE* = NETRESOURCEA
    CONNECTDLGSTRUCT* = CONNECTDLGSTRUCTA
    DISCDLGSTRUCT* = DISCDLGSTRUCTA
    REMOTE_NAME_INFO* = REMOTE_NAME_INFOA
    UNIVERSAL_NAME_INFO* = UNIVERSAL_NAME_INFOA

  proc WNetAddConnection2*(P1: LPNETRESOURCEA, P2: LPCSTR, P3: LPCSTR, P4: DWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetAddConnection2A".}
  proc WNetAddConnection3*(P1: HWND, P2: LPNETRESOURCEA, P3: LPCSTR, P4: LPCSTR, P5: DWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetAddConnection3A".}
  proc WNetCancelConnection2*(P1: LPCSTR, P2: DWORD, P3: BOOL): DWORD {.winapi, dynlib: "mpr", importc: "WNetCancelConnection2A".}
  proc WNetGetConnection*(P1: LPCSTR, P2: LPSTR, P3: PDWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetGetConnectionA".}
  proc WNetUseConnection*(P1: HWND, P2: LPNETRESOURCEA, P3: LPCSTR, P4: LPCSTR, P5: DWORD, P6: LPSTR, P7: PDWORD, P8: PDWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetUseConnectionA".}
  proc WNetSetConnection*(P1: LPCSTR, P2: DWORD, P3: PVOID): DWORD {.winapi, dynlib: "mpr", importc: "WNetSetConnectionA".}
  proc WNetConnectionDialog1*(P1: LPCONNECTDLGSTRUCTA): DWORD {.winapi, dynlib: "mpr", importc: "WNetConnectionDialog1A".}
  proc WNetDisconnectDialog1*(P1: LPDISCDLGSTRUCTA): DWORD {.winapi, dynlib: "mpr", importc: "WNetDisconnectDialog1A".}
  proc WNetOpenEnum*(P1: DWORD, P2: DWORD, P3: DWORD, P4: LPNETRESOURCEA, P5: LPHANDLE): DWORD {.winapi, dynlib: "mpr", importc: "WNetOpenEnumA".}
  proc WNetEnumResource*(P1: HANDLE, P2: PDWORD, P3: PVOID, P4: PDWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetEnumResourceA".}
  proc WNetGetUniversalName*(P1: LPCSTR, P2: DWORD, P3: PVOID, P4: PDWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetGetUniversalNameA".}
  proc WNetGetUser*(P1: LPCSTR, P2: LPSTR, P3: PDWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetGetUserA".}
  proc WNetGetProviderName*(P1: DWORD, P2: LPSTR, P3: PDWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetGetProviderNameA".}
  proc WNetGetNetworkInformation*(P1: LPCSTR, P2: LPNETINFOSTRUCT): DWORD {.winapi, dynlib: "mpr", importc: "WNetGetNetworkInformationA".}
  proc WNetGetResourceInformation*(P1: LPNETRESOURCEA, P2: LPVOID, P3: LPDWORD, P4: ptr LPSTR): DWORD {.winapi, dynlib: "mpr", importc: "WNetGetResourceInformationA".}
  proc WNetGetResourceParent*(P1: LPNETRESOURCEA, P2: LPVOID, P3: LPDWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetGetResourceParentA".}
  proc WNetGetLastError*(P1: PDWORD, P2: LPSTR, P3: DWORD, P4: LPSTR, P5: DWORD): DWORD {.winapi, dynlib: "mpr", importc: "WNetGetLastErrorA".}
  proc MultinetGetConnectionPerformance*(P1: LPNETRESOURCEA, P2: LPNETCONNECTINFOSTRUCT): DWORD {.winapi, dynlib: "mpr", importc: "MultinetGetConnectionPerformanceA".}
  proc WNetAddConnection*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR): DWORD {.winapi, dynlib: "mpr", importc: "WNetAddConnectionA".}
  proc WNetCancelConnection*(P1: LPCSTR, P2: BOOL): DWORD {.winapi, dynlib: "mpr", importc: "WNetCancelConnectionA".}

type
  LPNETRESOURCE* = ptr NETRESOURCE
  LPCONNECTDLGSTRUCT* = ptr CONNECTDLGSTRUCT
  LPDISCDLGSTRUCT* = ptr DISCDLGSTRUCT
  LPREMOTE_NAME_INFO* = ptr REMOTE_NAME_INFO
  LPUNIVERSAL_NAME_INFO* = ptr UNIVERSAL_NAME_INFO


# objcore/uuid.nim

const
  DBBMKGUID* = DEFINE_GUID(0xF6304BB0'u32, 0xD188, 0x11CD, [0xAD'u8, 0x48, 0x00, 0xAA, 0x00, 0x3C, 0x9C, 0xB6])
  DBCIDGUID* = DEFINE_GUID(0xFE284700'u32, 0xD188, 0x11CD, [0xAD'u8, 0x48, 0x00, 0xAA, 0x00, 0x3C, 0x9C, 0xB6])
  GUID_NAMEONLY* = DEFINE_GUID(0xE8BF1170'u32, 0xD188, 0x11CD, [0xAD'u8, 0x48, 0x00, 0xAA, 0x00, 0x3C, 0x9C, 0xB6])
  ARRAYID_PathProperties* = DEFINE_GUID(0x7ECBBA04'u32, 0x2D97, 0x11CF, [0xA2'u8, 0x29, 0x00, 0xAA, 0x00, 0x3D, 0x73, 0x52])
  BFID_GRAY_16* = DEFINE_GUID(0xF9D6BC00'u32, 0x449C, 0x11D0, [0x91'u8, 0x8C, 0x00, 0xAA, 0x00, 0x6C, 0x1A, 0x01])
  BFID_GRAY_8* = DEFINE_GUID(0xD93DE910'u32, 0x449C, 0x11D0, [0x91'u8, 0x8C, 0x00, 0xAA, 0x00, 0x6C, 0x1A, 0x01])
  BFID_MONOCHROME* = DEFINE_GUID(0xE436EB78'u32, 0x524F, 0x11CE, [0x9F'u8, 0x53, 0x00, 0x20, 0xAF, 0x0B, 0xA7, 0x70])
  BFID_RGB_24* = DEFINE_GUID(0xE436EB7D'u32, 0x524F, 0x11CE, [0x9F'u8, 0x53, 0x00, 0x20, 0xAF, 0x0B, 0xA7, 0x70])
  BFID_RGB_32* = DEFINE_GUID(0xE436EB7E'u32, 0x524F, 0x11CE, [0x9F'u8, 0x53, 0x00, 0x20, 0xAF, 0x0B, 0xA7, 0x70])
  BFID_RGB_4* = DEFINE_GUID(0xE436EB79'u32, 0x524F, 0x11CE, [0x9F'u8, 0x53, 0x00, 0x20, 0xAF, 0x0B, 0xA7, 0x70])
  BFID_RGB_555* = DEFINE_GUID(0xE436EB7C'u32, 0x524F, 0x11CE, [0x9F'u8, 0x53, 0x00, 0x20, 0xAF, 0x0B, 0xA7, 0x70])
  BFID_RGB_565* = DEFINE_GUID(0xE436EB7B'u32, 0x524F, 0x11CE, [0x9F'u8, 0x53, 0x00, 0x20, 0xAF, 0x0B, 0xA7, 0x70])
  BFID_RGB_8* = DEFINE_GUID(0xE436EB7A'u32, 0x524F, 0x11CE, [0x9F'u8, 0x53, 0x00, 0x20, 0xAF, 0x0B, 0xA7, 0x70])
  BFID_RGBA_32* = DEFINE_GUID(0x773C9AC0'u32, 0x3274, 0x11D0, [0xB7'u8, 0x24, 0x00, 0xAA, 0x00, 0x6C, 0x1A, 0x01])
  BHID_LinkTargetItem* = DEFINE_GUID(0x3981E228'u32, 0xF559, 0x11D3, [0x8E'u8, 0x3A, 0x00, 0xC0, 0x4F, 0x68, 0x37, 0xD5])
  BHID_SFObject* = DEFINE_GUID(0x3981E224'u32, 0xF559, 0x11D3, [0x8E'u8, 0x3A, 0x00, 0xC0, 0x4F, 0x68, 0x37, 0xD5])
  BHID_SFUIObject* = DEFINE_GUID(0x3981E225'u32, 0xF559, 0x11D3, [0x8E'u8, 0x3A, 0x00, 0xC0, 0x4F, 0x68, 0x37, 0xD5])
  BHID_SFViewObject* = DEFINE_GUID(0x3981E226'u32, 0xF559, 0x11D3, [0x8E'u8, 0x3A, 0x00, 0xC0, 0x4F, 0x68, 0x37, 0xD5])
  BHID_Storage* = DEFINE_GUID(0x3981E227'u32, 0xF559, 0x11D3, [0x8E'u8, 0x3A, 0x00, 0xC0, 0x4F, 0x68, 0x37, 0xD5])
  BHID_StorageEnum* = DEFINE_GUID(0x4621A4E3'u32, 0xF0D6, 0x4773, [0x8A'u8, 0x9C, 0x46, 0xE7, 0x7B, 0x17, 0x48, 0x40])
  BHID_Stream* = DEFINE_GUID(0x1CEBB3AB'u32, 0x7C10, 0x499A, [0xA4'u8, 0x17, 0x92, 0xCA, 0x16, 0xC4, 0xCB, 0x83])
  CATID_BrowsableShellExt* = DEFINE_GUID(0x00021490'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CATID_BrowseInPlace* = DEFINE_GUID(0x00021491'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CATID_ClusCfgCapabilities* = DEFINE_GUID(0x4653EEC4'u32, 0x2788, 0x4EBD, [0xA8'u8, 0x31, 0x7E, 0x0D, 0x9F, 0x82, 0xD6, 0xE7])
  CATID_ClusCfgMemberSetChangeListener* = DEFINE_GUID(0x8A43EAD4'u32, 0x10F1, 0x440D, [0x8D'u8, 0xAA, 0x1F, 0xE3, 0x8D, 0x16, 0x98, 0xCD])
  CATID_ClusCfgResourceTypes* = DEFINE_GUID(0x7C4CAE52'u32, 0xCAC9, 0x499D, [0x82'u8, 0xC6, 0xBC, 0x6A, 0x21, 0x77, 0xE5, 0x56])
  CATID_ClusCfgStartupListeners* = DEFINE_GUID(0xDF406DB4'u32, 0x7872, 0x4A99, [0xBB'u8, 0x3C, 0x14, 0xA9, 0xC3, 0x39, 0x33, 0xD1])
  CATID_CommBand* = DEFINE_GUID(0x00021494'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CATID_Control* = DEFINE_GUID(0x40FC6ED4'u32, 0x2438, 0x11CF, [0xA3'u8, 0xDB, 0x08, 0x00, 0x36, 0xF1, 0x25, 0x02])
  CATID_DesignTimeUIActivatableControl* = DEFINE_GUID(0xF2BB56D1'u32, 0xDB07, 0x11D1, [0xAA'u8, 0x6B, 0x00, 0x60, 0x97, 0xDB, 0x95, 0x39])
  CATID_DeskBand* = DEFINE_GUID(0x00021492'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CATID_DocObject* = DEFINE_GUID(0x40FC6ED8'u32, 0x2438, 0x11CF, [0xA3'u8, 0xDB, 0x08, 0x00, 0x36, 0xF1, 0x25, 0x02])
  CATID_EnumClusCfgManagedResources* = DEFINE_GUID(0x02A34F88'u32, 0xD31A, 0x4688, [0xBD'u8, 0xDD, 0x38, 0xA7, 0x39, 0xE4, 0xF8, 0x9B])
  CATID_InfoBand* = DEFINE_GUID(0x00021493'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CATID_Insertable* = DEFINE_GUID(0x40FC6ED3'u32, 0x2438, 0x11CF, [0xA3'u8, 0xDB, 0x08, 0x00, 0x36, 0xF1, 0x25, 0x02])
  CATID_InternetAware* = DEFINE_GUID(0x0DE86A58'u32, 0x2BAA, 0x11CF, [0xA2'u8, 0x29, 0x00, 0xAA, 0x00, 0x3D, 0x73, 0x52])
  CATID_IsShortcut* = DEFINE_GUID(0x40FC6ED6'u32, 0x2438, 0x11CF, [0xA3'u8, 0xDB, 0x08, 0x00, 0x36, 0xF1, 0x25, 0x02])
  CATID_MARSHALER* = DEFINE_GUID(0x00000003'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CATID_NeverShowExt* = DEFINE_GUID(0x40FC6ED7'u32, 0x2438, 0x11CF, [0xA3'u8, 0xDB, 0x08, 0x00, 0x36, 0xF1, 0x25, 0x02])
  CATID_PersistsToFile* = DEFINE_GUID(0x0DE86A56'u32, 0x2BAA, 0x11CF, [0xA2'u8, 0x29, 0x00, 0xAA, 0x00, 0x3D, 0x73, 0x52])
  CATID_PersistsToMemory* = DEFINE_GUID(0x0DE86A55'u32, 0x2BAA, 0x11CF, [0xA2'u8, 0x29, 0x00, 0xAA, 0x00, 0x3D, 0x73, 0x52])
  CATID_PersistsToMoniker* = DEFINE_GUID(0x0DE86A51'u32, 0x2BAA, 0x11CF, [0xA2'u8, 0x29, 0x00, 0xAA, 0x00, 0x3D, 0x73, 0x52])
  CATID_PersistsToPropertyBag* = DEFINE_GUID(0x0DE86A57'u32, 0x2BAA, 0x11CF, [0xA2'u8, 0x29, 0x00, 0xAA, 0x00, 0x3D, 0x73, 0x52])
  CATID_PersistsToStorage* = DEFINE_GUID(0x0DE86A52'u32, 0x2BAA, 0x11CF, [0xA2'u8, 0x29, 0x00, 0xAA, 0x00, 0x3D, 0x73, 0x52])
  CATID_PersistsToStream* = DEFINE_GUID(0x0DE86A54'u32, 0x2BAA, 0x11CF, [0xA2'u8, 0x29, 0x00, 0xAA, 0x00, 0x3D, 0x73, 0x52])
  CATID_PersistsToStreamInit* = DEFINE_GUID(0x0DE86A53'u32, 0x2BAA, 0x11CF, [0xA2'u8, 0x29, 0x00, 0xAA, 0x00, 0x3D, 0x73, 0x52])
  CATID_Printable* = DEFINE_GUID(0x40FC6ED9'u32, 0x2438, 0x11CF, [0xA3'u8, 0xDB, 0x08, 0x00, 0x36, 0xF1, 0x25, 0x02])
  CATID_Programmable* = DEFINE_GUID(0x40FC6ED5'u32, 0x2438, 0x11CF, [0xA3'u8, 0xDB, 0x08, 0x00, 0x36, 0xF1, 0x25, 0x02])
  CATID_RequiresDataPathHost* = DEFINE_GUID(0x0DE86A50'u32, 0x2BAA, 0x11CF, [0xA2'u8, 0x29, 0x00, 0xAA, 0x00, 0x3D, 0x73, 0x52])
  CATID_SafeForInitializing* = DEFINE_GUID(0x7DD95802'u32, 0x9882, 0x11CF, [0x9F'u8, 0xA9, 0x00, 0xAA, 0x00, 0x6C, 0x42, 0xC4])
  CATID_SafeForScripting* = DEFINE_GUID(0x7DD95801'u32, 0x9882, 0x11CF, [0x9F'u8, 0xA9, 0x00, 0xAA, 0x00, 0x6C, 0x42, 0xC4])
  CGID_DocHostCommandHandler* = DEFINE_GUID(0xF38BC242'u32, 0xB950, 0x11D1, [0x89'u8, 0x18, 0x00, 0xC0, 0x4F, 0xC2, 0xC8, 0x36])
  CGID_DownloadHost* = DEFINE_GUID(0xE0608728'u32, 0xAE4C, 0x11D1, [0xBA'u8, 0x40, 0x00, 0xC0, 0x4F, 0xB9, 0x2D, 0x79])
  CGID_Explorer* = DEFINE_GUID(0x000214D0'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CGID_ExplorerBarDoc* = DEFINE_GUID(0x000214D3'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CGID_InternetExplorer* = DEFINE_GUID(0xEB7EED00'u32, 0xF74D, 0x11D2, [0xBB'u8, 0x7F, 0x00, 0x10, 0x4B, 0x35, 0xE7, 0xF9])
  CGID_MSHTML* = DEFINE_GUID(0xDE4BA900'u32, 0x59CA, 0x11CF, [0x95'u8, 0x92, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  CGID_ShellDocView* = DEFINE_GUID(0x000214D1'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CGID_ShellServiceObject* = DEFINE_GUID(0x000214D2'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CGID_ShortCut* = DEFINE_GUID(0x93A68750'u32, 0x951A, 0x11D1, [0x94'u8, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
  CLSID_1* = DEFINE_GUID(0xD34F1813'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_2* = DEFINE_GUID(0xD34F1814'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_3* = DEFINE_GUID(0xD34F1815'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_4* = DEFINE_GUID(0xD34F1816'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_5* = DEFINE_GUID(0xD34F1817'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_6* = DEFINE_GUID(0xD34F1818'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_7* = DEFINE_GUID(0xD34F1819'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_8* = DEFINE_GUID(0xD34F181A'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_9* = DEFINE_GUID(0xD34F181B'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_a* = DEFINE_GUID(0xD34F181C'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_AboutProtocol* = DEFINE_GUID(0x3050F406'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_AccessControlEntry* = DEFINE_GUID(0xB75AC000'u32, 0x9BDD, 0x11D0, [0x85'u8, 0x2C, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  CLSID_AccessControlList* = DEFINE_GUID(0xB85EA052'u32, 0x9BDD, 0x11D0, [0x85'u8, 0x2C, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  CLSID_AccountDiscovery* = DEFINE_GUID(0x3DAB30ED'u32, 0x8132, 0x40BF, [0xA8'u8, 0xBA, 0x7B, 0x50, 0x57, 0xF0, 0xCD, 0x10])
  CLSID_ACLCustomMRU* = DEFINE_GUID(0x6935DB93'u32, 0x21E8, 0x4CCC, [0xBE'u8, 0xB9, 0x9F, 0xE3, 0xC7, 0x7A, 0x29, 0x7A])
  CLSID_ACLHistory* = DEFINE_GUID(0x00BB2764'u32, 0x6A77, 0x11D0, [0xA5'u8, 0x35, 0x00, 0xC0, 0x4F, 0xD7, 0xD0, 0x62])
  CLSID_ACListISF* = DEFINE_GUID(0x03C036F1'u32, 0xA186, 0x11D0, [0x82'u8, 0x4A, 0x00, 0xAA, 0x00, 0x5B, 0x43, 0x83])
  CLSID_ACLMRU* = DEFINE_GUID(0x6756A641'u32, 0xDE71, 0x11D0, [0x83'u8, 0x1B, 0x00, 0xAA, 0x00, 0x5B, 0x43, 0x83])
  CLSID_ACLMulti* = DEFINE_GUID(0x00BB2765'u32, 0x6A77, 0x11D0, [0xA5'u8, 0x35, 0x00, 0xC0, 0x4F, 0xD7, 0xD0, 0x62])
  CLSID_ActiveDesktop* = DEFINE_GUID(0x75048700'u32, 0xEF1F, 0x11D0, [0x98'u8, 0x88, 0x00, 0x60, 0x97, 0xDE, 0xAC, 0xF9])
  CLSID_AdapterInfo* = DEFINE_GUID(0x6F9942C9'u32, 0xC1B1, 0x4AB5, [0x93'u8, 0xDA, 0x60, 0x58, 0x99, 0x1D, 0xC8, 0xF3])
  CLSID_AddrControl* = DEFINE_GUID(0x00000348'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_AddressBarParser* = DEFINE_GUID(0xE0E11A09'u32, 0x5CB8, 0x4B6C, [0x83'u8, 0x32, 0xE0, 0x07, 0x20, 0xA1, 0x68, 0xF2])
  CLSID_ADsDSOObject* = DEFINE_GUID(0x549365D0'u32, 0xEC26, 0x11CF, [0x83'u8, 0x10, 0x00, 0xAA, 0x00, 0xB5, 0x05, 0xDB])
  CLSID_ADsSecurityUtility* = DEFINE_GUID(0xF270C64A'u32, 0xFFB8, 0x4AE4, [0x85'u8, 0xFE, 0x3A, 0x75, 0xE5, 0x34, 0x79, 0x66])
  CLSID_ADSystemInfo* = DEFINE_GUID(0x50B6327F'u32, 0xAFD1, 0x11D2, [0x9C'u8, 0xB9, 0x00, 0x00, 0xF8, 0x7A, 0x36, 0x9E])
  CLSID_AlgSetup* = DEFINE_GUID(0x27D0BCCC'u32, 0x344D, 0x4287, [0xAF'u8, 0x37, 0x0C, 0x72, 0xC1, 0x61, 0xC1, 0x4C])
  CLSID_AllClasses* = DEFINE_GUID(0x00000330'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_AlphabeticalCategorizer* = DEFINE_GUID(0x3C2654C6'u32, 0x7372, 0x4F6B, [0xB3'u8, 0x10, 0x55, 0xD6, 0x12, 0x8F, 0x49, 0xD2])
  CLSID_AnchorClick* = DEFINE_GUID(0x13D5413C'u32, 0x33B9, 0x11D2, [0x95'u8, 0xA7, 0x00, 0xC0, 0x4F, 0x8E, 0xCB, 0x02])
  CLSID_AnimationComposerFactory* = DEFINE_GUID(0x332B2A56'u32, 0xF86C, 0x47E7, [0x86'u8, 0x02, 0xFC, 0x42, 0xAC, 0x8B, 0x99, 0x20])
  CLSID_AnimationComposerSiteFactory* = DEFINE_GUID(0x16911A65'u32, 0xD41D, 0x4431, [0x87'u8, 0xF7, 0xE7, 0x57, 0xF4, 0xD0, 0x3B, 0xD8])
  CLSID_ApplicationGatewayServices* = DEFINE_GUID(0xF8ADE1D3'u32, 0x49DF, 0x4B75, [0x90'u8, 0x05, 0xEF, 0x95, 0x08, 0xE6, 0xA3, 0x37])
  CLSID_AutoComplete* = DEFINE_GUID(0x00BB2763'u32, 0x6A77, 0x11D0, [0xA5'u8, 0x35, 0x00, 0xC0, 0x4F, 0xD7, 0xD0, 0x62])
  CLSID_AutoDiscoveryProvider* = DEFINE_GUID(0xC4F3D5BF'u32, 0x4809, 0x44E3, [0x84'u8, 0xA4, 0x36, 0x8B, 0x6B, 0x33, 0xB0, 0xB4])
  CLSID_AutoplayForSlideShow* = DEFINE_GUID(0x00E7B358'u32, 0xF65B, 0x4DCF, [0x83'u8, 0xDF, 0xCD, 0x02, 0x6B, 0x94, 0xBF, 0xD4])
  CLSID_b* = DEFINE_GUID(0xD34F181D'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_BackgroundCopyManager* = DEFINE_GUID(0x4991D34B'u32, 0x80A1, 0x4291, [0x83'u8, 0xB6, 0x33, 0x28, 0x36, 0x6B, 0x90, 0x97])
  CLSID_BackgroundCopyManager1_5* = DEFINE_GUID(0xF087771F'u32, 0xD74F, 0x4C1A, [0xBB'u8, 0x8A, 0xE1, 0x6A, 0xCA, 0x91, 0x24, 0xEA])
  CLSID_BackgroundCopyQMgr* = DEFINE_GUID(0x69AD4AEE'u32, 0x51BE, 0x439B, [0xA9'u8, 0x2C, 0x86, 0xAE, 0x49, 0x0E, 0x8B, 0x30])
  CLSID_BackLink* = DEFINE_GUID(0xFCBF906F'u32, 0x4080, 0x11D1, [0xA3'u8, 0xAC, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  CLSID_BasicImageEffects* = DEFINE_GUID(0x16B280C8'u32, 0xEE70, 0x11D1, [0x90'u8, 0x66, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  CLSID_BasicImageEffectsPP* = DEFINE_GUID(0x16B280C9'u32, 0xEE70, 0x11D1, [0x90'u8, 0x66, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  CLSID_BlockFormats* = DEFINE_GUID(0x3050F831'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_BridgeTerminal* = DEFINE_GUID(0x8EBAE7A3'u32, 0x8943, 0x11D1, [0x96'u8, 0xB8, 0x00, 0xC0, 0x4F, 0xB6, 0xE8, 0x66])
  CLSID_c* = DEFINE_GUID(0xD34F181E'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_CAccPropServices* = DEFINE_GUID(0xB5F8350B'u32, 0x0548, 0x48B1, [0xA6'u8, 0xEE, 0x88, 0xBD, 0x00, 0xB4, 0xA5, 0xE7])
  CLSID_CActiveIMM* = DEFINE_GUID(0x4955DD33'u32, 0xB159, 0x11D0, [0x8F'u8, 0xCF, 0x00, 0xAA, 0x00, 0x6B, 0xCC, 0x59])
  CLSID_CAnchorBrowsePropertyPage* = DEFINE_GUID(0x3050F3BB'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CaseIgnoreList* = DEFINE_GUID(0x15F88A55'u32, 0x4680, 0x11D1, [0xA3'u8, 0xB4, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  CLSID_CCheckBox* = DEFINE_GUID(0x3050F686'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CColorPropPage* = DEFINE_GUID(0x0BE35201'u32, 0x8F91, 0x11CE, [0x9D'u8, 0xE3, 0x00, 0xAA, 0x00, 0x4B, 0xB8, 0x51])
  CLSID_CCombobox* = DEFINE_GUID(0x3050F678'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CDBurn* = DEFINE_GUID(0xFBEB8A05'u32, 0xBEEE, 0x4442, [0x80'u8, 0x4E, 0x40, 0x9D, 0x6C, 0x45, 0x15, 0xE9])
  CLSID_CDebugDocumentHelper* = DEFINE_GUID(0x83B8BCA6'u32, 0x687C, 0x11D0, [0xA4'u8, 0x05, 0x00, 0xAA, 0x00, 0x60, 0x27, 0x5C])
  CLSID_CDeviceRect* = DEFINE_GUID(0x3050F6D4'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CDirect3DRM* = DEFINE_GUID(0x4516EC41'u32, 0x8F20, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  CLSID_CDirect3DRMAnimation* = DEFINE_GUID(0x4FA35698'u32, 0x623F, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  CLSID_CDirect3DRMAnimationSet* = DEFINE_GUID(0x4FA35699'u32, 0x623F, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  CLSID_CDirect3DRMClippedVisual* = DEFINE_GUID(0x5434E72D'u32, 0x6D66, 0x11D1, [0xBB'u8, 0x0B, 0x00, 0x00, 0xF8, 0x75, 0x86, 0x5A])
  CLSID_CDirect3DRMDevice* = DEFINE_GUID(0x4FA3568E'u32, 0x623F, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  CLSID_CDirect3DRMFace* = DEFINE_GUID(0x4FA35693'u32, 0x623F, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  CLSID_CDirect3DRMFrame* = DEFINE_GUID(0x4FA35690'u32, 0x623F, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  CLSID_CDirect3DRMFrameInterpolator* = DEFINE_GUID(0x0DE9EAA2'u32, 0x3B84, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  CLSID_CDirect3DRMLight* = DEFINE_GUID(0x4FA35694'u32, 0x623F, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  CLSID_CDirect3DRMLightInterpolator* = DEFINE_GUID(0x0DE9EAA6'u32, 0x3B84, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  CLSID_CDirect3DRMMaterial* = DEFINE_GUID(0x4FA35697'u32, 0x623F, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  CLSID_CDirect3DRMMaterialInterpolato* = DEFINE_GUID(0x0DE9EAA7'u32, 0x3B84, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  CLSID_CDirect3DRMMesh* = DEFINE_GUID(0x4FA35691'u32, 0x623F, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  CLSID_CDirect3DRMMeshBuilder* = DEFINE_GUID(0x4FA35692'u32, 0x623F, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  CLSID_CDirect3DRMMeshInterpolator* = DEFINE_GUID(0x0DE9EAA3'u32, 0x3B84, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  CLSID_CDirect3DRMProgressiveMesh* = DEFINE_GUID(0x4516EC40'u32, 0x8F20, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  CLSID_CDirect3DRMShadow* = DEFINE_GUID(0x4FA3569B'u32, 0x623F, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  CLSID_CDirect3DRMTexture* = DEFINE_GUID(0x4FA35695'u32, 0x623F, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  CLSID_CDirect3DRMTextureInterpolator* = DEFINE_GUID(0x0DE9EAA8'u32, 0x3B84, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  CLSID_CDirect3DRMUserVisual* = DEFINE_GUID(0x4FA3569A'u32, 0x623F, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  CLSID_CDirect3DRMViewport* = DEFINE_GUID(0x4FA3568F'u32, 0x623F, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  CLSID_CDirect3DRMViewportInterpolato* = DEFINE_GUID(0x0DE9EAA1'u32, 0x3B84, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  CLSID_CDirect3DRMWrap* = DEFINE_GUID(0x4FA35696'u32, 0x623F, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  CLSID_CDirectXFile* = DEFINE_GUID(0x4516EC43'u32, 0x8F20, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  CLSID_CDLAgent* = DEFINE_GUID(0x7D559C10'u32, 0x9FE9, 0x11D0, [0x93'u8, 0xF7, 0x00, 0xAA, 0x00, 0x59, 0xCE, 0x02])
  CLSID_CdlProtocol* = DEFINE_GUID(0x3DD53D40'u32, 0x7B8B, 0x11D0, [0xB0'u8, 0x13, 0x00, 0xAA, 0x00, 0x59, 0xCE, 0x02])
  CLSID_CDocBrowsePropertyPage* = DEFINE_GUID(0x3050F3B4'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CDownloadBehavior* = DEFINE_GUID(0x3050F5BE'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CEnroll* = DEFINE_GUID(0x43F8F289'u32, 0x7A20, 0x11D0, [0x8F'u8, 0x06, 0x00, 0xC0, 0x4F, 0xC2, 0x95, 0xE1])
  CLSID_CEventObj* = DEFINE_GUID(0x3050F48A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CFontPropPage* = DEFINE_GUID(0x0BE35200'u32, 0x8F91, 0x11CE, [0x9D'u8, 0xE3, 0x00, 0xAA, 0x00, 0x4B, 0xB8, 0x51])
  CLSID_CFSIconOverlayManager* = DEFINE_GUID(0x63B51F81'u32, 0xC868, 0x11D0, [0x99'u8, 0x9C, 0x00, 0xC0, 0x4F, 0xD6, 0x55, 0xE1])
  CLSID_ChannelAgent* = DEFINE_GUID(0xE3A8BDE6'u32, 0xABCE, 0x11D0, [0xBC'u8, 0x4B, 0x00, 0xC0, 0x4F, 0xD9, 0x29, 0xDB])
  CLSID_ChannelMgr* = DEFINE_GUID(0xB3CDAE90'u32, 0xD170, 0x11D0, [0x80'u8, 0x2B, 0x00, 0xC0, 0x4F, 0xD7, 0x5D, 0x13])
  CLSID_CHeaderFooter* = DEFINE_GUID(0x3050F6CD'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CHtmlArea* = DEFINE_GUID(0x3050F64F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CIEOptionElement* = DEFINE_GUID(0x3050F698'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CIESelectElement* = DEFINE_GUID(0x3050F688'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CImageBrowsePropertyPage* = DEFINE_GUID(0x3050F3B3'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_ClassInstallFilter* = DEFINE_GUID(0x32B533BB'u32, 0xEDAE, 0x11D0, [0xBD'u8, 0x5A, 0x00, 0xAA, 0x00, 0xB9, 0x2A, 0xF1])
  CLSID_CLayoutRect* = DEFINE_GUID(0x3050F664'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_ClientCaps* = DEFINE_GUID(0x7E8BC44E'u32, 0xAEFF, 0x11D1, [0x89'u8, 0xC2, 0x00, 0xC0, 0x4F, 0xB6, 0xBF, 0xC4])
  CLSID_ClusAppWiz* = DEFINE_GUID(0x24F97150'u32, 0x6689, 0x11D1, [0x9A'u8, 0xA7, 0x00, 0xC0, 0x4F, 0xB9, 0x3A, 0x80])
  CLSID_ClusCfgAsyncEvictCleanup* = DEFINE_GUID(0x08F35A72'u32, 0xD7C4, 0x42F4, [0xBC'u8, 0x81, 0x51, 0x88, 0xE1, 0x9D, 0xFA, 0x39])
  CLSID_ClusCfgEvictCleanup* = DEFINE_GUID(0x32152BE9'u32, 0xDE8C, 0x4D0F, [0x81'u8, 0xB0, 0xBC, 0xE5, 0xD1, 0x1E, 0xCB, 0x00])
  CLSID_ClusCfgResTypeGenScript* = DEFINE_GUID(0xD513C4F4'u32, 0x1D34, 0x44A3, [0x83'u8, 0xD4, 0x81, 0x26, 0x51, 0xDB, 0x89, 0x18])
  CLSID_ClusCfgResTypeMajorityNodeSet* = DEFINE_GUID(0xB6870B44'u32, 0x0BDF, 0x4B46, [0xAC'u8, 0x1F, 0x6C, 0x69, 0x1B, 0x62, 0x2E, 0xDF])
  CLSID_ClusCfgResTypeServices* = DEFINE_GUID(0x6A370489'u32, 0xBB52, 0x4727, [0xB7'u8, 0x40, 0x08, 0xF4, 0x94, 0x16, 0x34, 0x78])
  CLSID_ClusCfgStartupNotify* = DEFINE_GUID(0x105EEEB6'u32, 0x32FD, 0x4EA9, [0x89'u8, 0x12, 0x84, 0x3A, 0x7F, 0xF3, 0xCA, 0x2D])
  CLSID_ClusCfgWizard* = DEFINE_GUID(0x1919C4FE'u32, 0x6F46, 0x4027, [0x97'u8, 0x7D, 0x0E, 0xF1, 0xC8, 0xF2, 0x63, 0x72])
  CLSID_ClusterConfigurationType* = DEFINE_GUID(0xBF3768C2'u32, 0xE0E5, 0x448F, [0x95'u8, 0x2B, 0x25, 0xD4, 0x33, 0x2D, 0xEF, 0xA3])
  CLSID_CMimeTypes* = DEFINE_GUID(0x3050F3FE'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CMLangConvertCharset* = DEFINE_GUID(0xD66D6F99'u32, 0xCDAA, 0x11D0, [0xB8'u8, 0x22, 0x00, 0xC0, 0x4F, 0xC9, 0xB3, 0x1F])
  CLSID_CMLangString* = DEFINE_GUID(0xC04D65CF'u32, 0xB70D, 0x11D0, [0xB1'u8, 0x88, 0x00, 0xAA, 0x00, 0x38, 0xC9, 0x69])
  CLSID_CMultiLanguage* = DEFINE_GUID(0x275C23E2'u32, 0x3747, 0x11D0, [0x9F'u8, 0xEA, 0x00, 0xAA, 0x00, 0x3F, 0x86, 0x46])
  CLSID_CNetCfg* = DEFINE_GUID(0x5B035261'u32, 0x40F9, 0x11D1, [0xAA'u8, 0xEC, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  CLSID_CoDitherToRGB8* = DEFINE_GUID(0xA860CE50'u32, 0x3910, 0x11D0, [0x86'u8, 0xFC, 0x00, 0xA0, 0xC9, 0x13, 0xF7, 0x50])
  CLSID_CoMapMIMEToCLSID* = DEFINE_GUID(0x30C3B080'u32, 0x30FB, 0x11D0, [0xB7'u8, 0x24, 0x00, 0xAA, 0x00, 0x6C, 0x1A, 0x01])
  CLSID_ComBinding* = DEFINE_GUID(0x00000328'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_CommonQuery* = DEFINE_GUID(0x83BC5EC0'u32, 0x6F2A, 0x11D0, [0xA1'u8, 0xC4, 0x00, 0xAA, 0x00, 0xC1, 0x6E, 0x65])
  CLSID_CompositePP* = DEFINE_GUID(0x25B33660'u32, 0xFD83, 0x11D1, [0x8A'u8, 0xDE, 0x44, 0x45, 0x53, 0x54, 0x00, 0x01])
  CLSID_ConnectionCommonUi* = DEFINE_GUID(0x7007ACD1'u32, 0x3202, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  CLSID_ConnectionManager* = DEFINE_GUID(0xBA126AD1'u32, 0x2166, 0x11D1, [0xB1'u8, 0xD0, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  CLSID_ConnectionManager2* = DEFINE_GUID(0xBA126AE5'u32, 0x2166, 0x11D1, [0xB1'u8, 0xD0, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  CLSID_ControlPanel* = DEFINE_GUID(0x21EC2020'u32, 0x3AEA, 0x1069, [0xA2'u8, 0xDD, 0x08, 0x00, 0x2B, 0x30, 0x30, 0x9D])
  CLSID_ConvertVBX* = DEFINE_GUID(0xFB8F0822'u32, 0x0164, 0x101B, [0x84'u8, 0xED, 0x08, 0x00, 0x2B, 0x2E, 0xC7, 0x13])
  CLSID_ConvolvePP* = DEFINE_GUID(0x25B33661'u32, 0xFD83, 0x11D1, [0x8A'u8, 0xDE, 0x44, 0x45, 0x53, 0x54, 0x00, 0x01])
  CLSID_COpsProfile* = DEFINE_GUID(0x3050F402'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CoSniffStream* = DEFINE_GUID(0x6A01FDA0'u32, 0x30DF, 0x11D0, [0xB7'u8, 0x24, 0x00, 0xAA, 0x00, 0x6C, 0x1A, 0x01])
  CLSID_CPersistDataPeer* = DEFINE_GUID(0x3050F487'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CPersistHistory* = DEFINE_GUID(0x3050F4C8'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CPersistShortcut* = DEFINE_GUID(0x3050F4C6'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CPersistSnapshot* = DEFINE_GUID(0x3050F4C9'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CPersistUserData* = DEFINE_GUID(0x3050F48E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CPicturePropPage* = DEFINE_GUID(0x0BE35202'u32, 0x8F91, 0x11CE, [0x9D'u8, 0xE3, 0x00, 0xAA, 0x00, 0x4B, 0xB8, 0x51])
  CLSID_CPlugins* = DEFINE_GUID(0x3050F3FF'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CRadioButton* = DEFINE_GUID(0x3050F69C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CrBarn* = DEFINE_GUID(0xC3BDF740'u32, 0x0B58, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  CLSID_CrBarnPP* = DEFINE_GUID(0xFCAD7436'u32, 0xF151, 0x4110, [0xB9'u8, 0x7E, 0x32, 0xBD, 0x60, 0x7F, 0xBD, 0xB8])
  CLSID_CrBlindPP* = DEFINE_GUID(0x213052C1'u32, 0x100D, 0x11D2, [0x8B'u8, 0x82, 0x00, 0xA0, 0xC9, 0x3C, 0x09, 0xB2])
  CLSID_CrBlinds* = DEFINE_GUID(0x00C429C0'u32, 0x0BA9, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  CLSID_CrBlur* = DEFINE_GUID(0x7312498D'u32, 0xE87A, 0x11D1, [0x81'u8, 0xE0, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  CLSID_CrBlurPP* = DEFINE_GUID(0x623E287E'u32, 0xFC0E, 0x11D1, [0x9A'u8, 0x77, 0x00, 0x00, 0xF8, 0x75, 0x6A, 0x10])
  CLSID_CrEmboss* = DEFINE_GUID(0xF515306D'u32, 0x0156, 0x11D2, [0x81'u8, 0xEA, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  CLSID_CrEngrave* = DEFINE_GUID(0xF515306E'u32, 0x0156, 0x11D2, [0x81'u8, 0xEA, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  CLSID_CrInset* = DEFINE_GUID(0x93073C40'u32, 0x0BA5, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  CLSID_CrIris* = DEFINE_GUID(0x3F69F351'u32, 0x0379, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  CLSID_CrIrisPP* = DEFINE_GUID(0x80DE22C4'u32, 0x0F44, 0x11D2, [0x8B'u8, 0x82, 0x00, 0xA0, 0xC9, 0x3C, 0x09, 0xB2])
  CLSID_CrRadialWipe* = DEFINE_GUID(0x424B71AF'u32, 0x0695, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  CLSID_CrRadialWipePP* = DEFINE_GUID(0x33D932E0'u32, 0x0F48, 0x11D2, [0x8B'u8, 0x82, 0x00, 0xA0, 0xC9, 0x3C, 0x09, 0xB2])
  CLSID_CrSlide* = DEFINE_GUID(0x810E402F'u32, 0x056B, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  CLSID_CrSlidePP* = DEFINE_GUID(0xCC8CEDE1'u32, 0x1003, 0x11D2, [0x8B'u8, 0x82, 0x00, 0xA0, 0xC9, 0x3C, 0x09, 0xB2])
  CLSID_CrSpiral* = DEFINE_GUID(0xACA97E00'u32, 0x0C7D, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  CLSID_CrSpiralPP* = DEFINE_GUID(0xC6A4FE81'u32, 0x1022, 0x11D2, [0x8B'u8, 0x82, 0x00, 0xA0, 0xC9, 0x3C, 0x09, 0xB2])
  CLSID_CrStretch* = DEFINE_GUID(0x7658F2A2'u32, 0x0A83, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  CLSID_CrStretchPP* = DEFINE_GUID(0x15FB95E0'u32, 0x0F77, 0x11D2, [0x8B'u8, 0x82, 0x00, 0xA0, 0xC9, 0x3C, 0x09, 0xB2])
  CLSID_CrWheel* = DEFINE_GUID(0x5AE1DAE0'u32, 0x1461, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  CLSID_CrWheelPP* = DEFINE_GUID(0xFA9F6180'u32, 0x1464, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  CLSID_CrZigzag* = DEFINE_GUID(0xE6E73D20'u32, 0x0C8A, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  CLSID_CrZigzagPP* = DEFINE_GUID(0x1559A3C1'u32, 0x102B, 0x11D2, [0x8B'u8, 0x82, 0x00, 0xA0, 0xC9, 0x3C, 0x09, 0xB2])
  CLSID_CScriptErrorList* = DEFINE_GUID(0xEFD01300'u32, 0x160F, 0x11D2, [0xBB'u8, 0x2E, 0x00, 0x80, 0x5F, 0xF7, 0xEF, 0xCA])
  CLSID_CScrollBar* = DEFINE_GUID(0x3050F68A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CSliderBar* = DEFINE_GUID(0x3050F68E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CSpinButton* = DEFINE_GUID(0x3050F68C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CTemplatePrinter* = DEFINE_GUID(0x3050F6B3'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_CUrlHistory* = DEFINE_GUID(0x3C374A40'u32, 0xBAE4, 0x11CF, [0xBF'u8, 0x7D, 0x00, 0xAA, 0x00, 0x69, 0x46, 0xEE])
  CLSID_CURLSearchHook* = DEFINE_GUID(0xCFBFAE00'u32, 0x17A6, 0x11D0, [0x99'u8, 0xCB, 0x00, 0xC0, 0x4F, 0xD6, 0x44, 0x97])
  CLSID_CurrentUserClasses* = DEFINE_GUID(0x00000332'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_CUtilityButton* = DEFINE_GUID(0x3050F6B0'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_d* = DEFINE_GUID(0xD34F181F'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_DAArray* = DEFINE_GUID(0x9CDE7340'u32, 0x3C20, 0x11D0, [0xA3'u8, 0x30, 0x00, 0xAA, 0x00, 0xB9, 0x2C, 0x03])
  CLSID_DABbox2* = DEFINE_GUID(0x50B4791E'u32, 0x4731, 0x11D0, [0x89'u8, 0x12, 0x00, 0xC0, 0x4F, 0xC2, 0xA0, 0xCA])
  CLSID_DABbox3* = DEFINE_GUID(0x4A933703'u32, 0xE36F, 0x11D0, [0x9B'u8, 0x99, 0x00, 0xC0, 0x4F, 0xC2, 0xF5, 0x1D])
  CLSID_DABehavior* = DEFINE_GUID(0xC46C1BF2'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DABoolean* = DEFINE_GUID(0x25B0F91D'u32, 0xD23D, 0x11D0, [0x9B'u8, 0x85, 0x00, 0xC0, 0x4F, 0xC2, 0xF5, 0x1D])
  CLSID_DACamera* = DEFINE_GUID(0xC46C1BD9'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DAColor* = DEFINE_GUID(0xC46C1BC9'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DADashStyle* = DEFINE_GUID(0x9CADDC0C'u32, 0xAD56, 0x11D1, [0x9F'u8, 0xF8, 0x00, 0xC0, 0x4F, 0xA3, 0x21, 0x95])
  CLSID_DAEndStyle* = DEFINE_GUID(0xFC54BEAB'u32, 0x5B12, 0x11D1, [0x8E'u8, 0x7B, 0x00, 0xC0, 0x4F, 0xC2, 0x9D, 0x46])
  CLSID_DAEvent* = DEFINE_GUID(0x3E2487C4'u32, 0x8709, 0x11D0, [0xB1'u8, 0x77, 0x00, 0xC0, 0x4F, 0xC2, 0xA0, 0xCA])
  CLSID_DAFontStyle* = DEFINE_GUID(0x3F3DA01A'u32, 0x4705, 0x11D0, [0x87'u8, 0x10, 0x00, 0xC0, 0x4F, 0xC2, 0x9D, 0x46])
  CLSID_DAGeometry* = DEFINE_GUID(0xC46C1BDB'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DAImage* = DEFINE_GUID(0xC46C1BCB'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DAImportationResult* = DEFINE_GUID(0x283807B3'u32, 0x2C60, 0x11D0, [0xA3'u8, 0x1D, 0x00, 0xAA, 0x00, 0xB9, 0x2C, 0x03])
  CLSID_DAJoinStyle* = DEFINE_GUID(0xFC54BEAA'u32, 0x5B12, 0x11D1, [0x8E'u8, 0x7B, 0x00, 0xC0, 0x4F, 0xC2, 0x9D, 0x46])
  CLSID_DALineStyle* = DEFINE_GUID(0x283807B8'u32, 0x2C60, 0x11D0, [0xA3'u8, 0x1D, 0x00, 0xAA, 0x00, 0xB9, 0x2C, 0x03])
  CLSID_DAMatte* = DEFINE_GUID(0xC46C1BC3'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DAMicrophone* = DEFINE_GUID(0xC46C1BE3'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DAMontage* = DEFINE_GUID(0xC46C1BD7'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DANumber* = DEFINE_GUID(0xC46C1BC7'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DAPair* = DEFINE_GUID(0xBC0BFD34'u32, 0xD21D, 0x11D0, [0x93'u8, 0x85, 0x00, 0xC0, 0x4F, 0xB6, 0xBD, 0x36])
  CLSID_DAPath2* = DEFINE_GUID(0xC46C1BCF'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DAPickableResult* = DEFINE_GUID(0x34F681D0'u32, 0x3640, 0x11CF, [0x92'u8, 0x94, 0x00, 0xAA, 0x00, 0xB8, 0xA7, 0x33])
  CLSID_DAPoint2* = DEFINE_GUID(0xC46C1BD5'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DAPoint3* = DEFINE_GUID(0xC46C1BE5'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DarwinAppPublisher* = DEFINE_GUID(0xCFCCC7A0'u32, 0xA282, 0x11D1, [0x90'u8, 0x82, 0x00, 0x60, 0x08, 0x05, 0x93, 0x82])
  CLSID_DASound* = DEFINE_GUID(0xC46C1BD1'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DAStatics* = DEFINE_GUID(0xC46C1BF3'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DAString* = DEFINE_GUID(0xC46C1BD3'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DataChannel* = DEFINE_GUID(0xBBB36F15'u32, 0x408D, 0x4056, [0x8C'u8, 0x27, 0x92, 0x08, 0x43, 0xD4, 0x0B, 0xE5])
  CLSID_DATransform2* = DEFINE_GUID(0xC46C1BDF'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DATransform3* = DEFINE_GUID(0xC46C1BC5'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DATuple* = DEFINE_GUID(0x283807B7'u32, 0x2C60, 0x11D0, [0xA3'u8, 0x1D, 0x00, 0xAA, 0x00, 0xB9, 0x2C, 0x03])
  CLSID_DAUserData* = DEFINE_GUID(0x283807B4'u32, 0x2C60, 0x11D0, [0xA3'u8, 0x1D, 0x00, 0xAA, 0x00, 0xB9, 0x2C, 0x03])
  CLSID_DAVector2* = DEFINE_GUID(0xC46C1BE1'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DAVector3* = DEFINE_GUID(0xC46C1BC0'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DAView* = DEFINE_GUID(0x960D8EFF'u32, 0xE494, 0x11D1, [0xAB'u8, 0x75, 0x00, 0xC0, 0x4F, 0xD9, 0x2B, 0x6B])
  CLSID_DAViewerControl* = DEFINE_GUID(0xC46C1BEB'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DAViewerControlWindowed* = DEFINE_GUID(0xC46C1BF1'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  CLSID_DCOMAccessControl* = DEFINE_GUID(0x0000031D'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_DebugHelper* = DEFINE_GUID(0x0BFCC060'u32, 0x8C1D, 0x11D0, [0xAC'u8, 0xCD, 0x00, 0xAA, 0x00, 0x60, 0x27, 0x5C])
  CLSID_DeCompMimeFilter* = DEFINE_GUID(0x8F6B0360'u32, 0xB80D, 0x11D0, [0xA9'u8, 0xB3, 0x00, 0x60, 0x97, 0x94, 0x23, 0x11])
  CLSID_DefaultDebugSessionProvider* = DEFINE_GUID(0x834128A2'u32, 0x51F4, 0x11D0, [0x8F'u8, 0x20, 0x00, 0x80, 0x5F, 0x2C, 0xD0, 0x64])
  CLSID_DirectDraw* = DEFINE_GUID(0xD7B70EE0'u32, 0x4340, 0x11CF, [0xB0'u8, 0x63, 0x00, 0x20, 0xAF, 0xC2, 0xCD, 0x35])
  CLSID_DirectDrawClipper* = DEFINE_GUID(0x593817A0'u32, 0x7DB3, 0x11CF, [0xA2'u8, 0xDE, 0x00, 0xAA, 0x00, 0xB9, 0x33, 0x56])
  CLSID_DirectDrawFactory2* = DEFINE_GUID(0xB9DC4790'u32, 0x4AF1, 0x11D1, [0x8C'u8, 0x4C, 0x00, 0xC0, 0x4F, 0xD9, 0x30, 0xC5])
  CLSID_DirectInput* = DEFINE_GUID(0x25E609E0'u32, 0xB259, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  CLSID_DirectInputDevice* = DEFINE_GUID(0x25E609E1'u32, 0xB259, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  CLSID_DirectMusic* = DEFINE_GUID(0x636B9F10'u32, 0x0C7D, 0x11D1, [0x95'u8, 0xB2, 0x00, 0x20, 0xAF, 0xDC, 0x74, 0x21])
  CLSID_DirectMusicBand* = DEFINE_GUID(0x79BA9E00'u32, 0xB6EE, 0x11D1, [0x86'u8, 0xBE, 0x00, 0xC0, 0x4F, 0xBF, 0x8F, 0xEF])
  CLSID_DirectMusicBandTrack* = DEFINE_GUID(0xD2AC2894'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicChordMap* = DEFINE_GUID(0xD2AC288F'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicChordMapTrack* = DEFINE_GUID(0xD2AC2896'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicChordTrack* = DEFINE_GUID(0xD2AC288B'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicCollection* = DEFINE_GUID(0x480FF4B0'u32, 0x28B2, 0x11D1, [0xBE'u8, 0xF7, 0x00, 0xC0, 0x4F, 0xBF, 0x8F, 0xEF])
  CLSID_DirectMusicCommandTrack* = DEFINE_GUID(0xD2AC288C'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicComposer* = DEFINE_GUID(0xD2AC2890'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicGraph* = DEFINE_GUID(0xD2AC2884'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicLoader* = DEFINE_GUID(0xD2AC2892'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicMotifTrack* = DEFINE_GUID(0xD2AC288E'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicMuteTrack* = DEFINE_GUID(0xD2AC2898'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicPerformance* = DEFINE_GUID(0xD2AC2881'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicSegment* = DEFINE_GUID(0xD2AC2882'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicSegmentState* = DEFINE_GUID(0xD2AC2883'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicSeqTrack* = DEFINE_GUID(0xD2AC2886'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicSignPostTrack* = DEFINE_GUID(0xF17E8672'u32, 0xC3B4, 0x11D1, [0x87'u8, 0x0B, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicStyle* = DEFINE_GUID(0xD2AC288A'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicStyleTrack* = DEFINE_GUID(0xD2AC288D'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicSynth* = DEFINE_GUID(0x58C2B4D0'u32, 0x46E7, 0x11D1, [0x89'u8, 0xAC, 0x00, 0xA0, 0xC9, 0x05, 0x41, 0x29])
  CLSID_DirectMusicSysExTrack* = DEFINE_GUID(0xD2AC2887'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicTempoTrack* = DEFINE_GUID(0xD2AC2885'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectMusicTimeSigTrack* = DEFINE_GUID(0xD2AC2888'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  CLSID_DirectPlay* = DEFINE_GUID(0xD1EB6D20'u32, 0x8923, 0x11D0, [0x9D'u8, 0x97, 0x00, 0xA0, 0xC9, 0x0A, 0x43, 0xCB])
  CLSID_DirectPlayLobby* = DEFINE_GUID(0x2FE8F810'u32, 0xB2A5, 0x11D0, [0xA7'u8, 0x87, 0x00, 0x00, 0xF8, 0x03, 0xAB, 0xFC])
  CLSID_DirectSound* = DEFINE_GUID(0x47D4D946'u32, 0x62E8, 0x11CF, [0x93'u8, 0xBC, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  CLSID_DirectSoundCapture* = DEFINE_GUID(0xB0210780'u32, 0x89CD, 0x11D0, [0xAF'u8, 0x08, 0x00, 0xA0, 0xC9, 0x25, 0xCD, 0x16])
  CLSID_DispatchMapper* = DEFINE_GUID(0xE9225296'u32, 0xC759, 0x11D1, [0xA0'u8, 0x2B, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  CLSID_DNWithBinary* = DEFINE_GUID(0x7E99C0A3'u32, 0xF935, 0x11D2, [0xBA'u8, 0x96, 0x00, 0xC0, 0x4F, 0xB6, 0xD0, 0xD1])
  CLSID_DNWithString* = DEFINE_GUID(0x334857CC'u32, 0xF934, 0x11D2, [0xBA'u8, 0x96, 0x00, 0xC0, 0x4F, 0xB6, 0xD0, 0xD1])
  CLSID_DocFileColumnProvider* = DEFINE_GUID(0x24F14F01'u32, 0x7B1C, 0x11D1, [0x83'u8, 0x8F, 0x00, 0x00, 0xF8, 0x04, 0x61, 0xCF])
  CLSID_DocHostUIHandler* = DEFINE_GUID(0x7057E952'u32, 0xBD1B, 0x11D1, [0x89'u8, 0x19, 0x00, 0xC0, 0x4F, 0xC2, 0xC8, 0x36])
  CLSID_DOMChildrenCollection* = DEFINE_GUID(0x3050F5AA'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_DOMDocument* = DEFINE_GUID(0x2933BF90'u32, 0x7B36, 0x11D2, [0xB2'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x98, 0x3E, 0x60])
  CLSID_DOMFreeThreadedDocument* = DEFINE_GUID(0x2933BF91'u32, 0x7B36, 0x11D2, [0xB2'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x98, 0x3E, 0x60])
  CLSID_DragDropHelper* = DEFINE_GUID(0x4657278A'u32, 0x411B, 0x11D2, [0x83'u8, 0x9A, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0xD0])
  CLSID_DriveSizeCategorizer* = DEFINE_GUID(0x94357B53'u32, 0xCA29, 0x4B78, [0x83'u8, 0xAE, 0xE8, 0xFE, 0x74, 0x09, 0x13, 0x4F])
  CLSID_DriveTypeCategorizer* = DEFINE_GUID(0xB0A8F3CF'u32, 0x4333, 0x4BAB, [0x88'u8, 0x73, 0x1C, 0xCB, 0x1C, 0xAD, 0xA4, 0x8B])
  CLSID_DsDisplaySpecifier* = DEFINE_GUID(0x1AB4A8C0'u32, 0x6A0B, 0x11D2, [0xAD'u8, 0x49, 0x00, 0xC0, 0x4F, 0xA3, 0x1A, 0x86])
  CLSID_DsDomainTreeBrowser* = DEFINE_GUID(0x1698790A'u32, 0xE2B4, 0x11D0, [0xB0'u8, 0xB1, 0x00, 0xC0, 0x4F, 0xD8, 0xDC, 0xA6])
  CLSID_DsFindAdvanced* = DEFINE_GUID(0x83EE3FE3'u32, 0x57D9, 0x11D0, [0xB9'u8, 0x32, 0x00, 0xA0, 0x24, 0xAB, 0x2D, 0xBB])
  CLSID_DsFindComputer* = DEFINE_GUID(0x16006700'u32, 0x87AD, 0x11D0, [0x91'u8, 0x40, 0x00, 0xAA, 0x00, 0xC1, 0x6E, 0x65])
  CLSID_DsFindContainer* = DEFINE_GUID(0xC1B3CBF2'u32, 0x886A, 0x11D0, [0x91'u8, 0x40, 0x00, 0xAA, 0x00, 0xC1, 0x6E, 0x65])
  CLSID_DsFindDomainController* = DEFINE_GUID(0x538C7B7E'u32, 0xD25E, 0x11D0, [0x97'u8, 0x42, 0x00, 0xA0, 0xC9, 0x06, 0xAF, 0x45])
  CLSID_DsFindFrsMembers* = DEFINE_GUID(0x94CE4B18'u32, 0xB3D3, 0x11D1, [0xB9'u8, 0xB4, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0xB0])
  CLSID_DsFindObjects* = DEFINE_GUID(0x83EE3FE1'u32, 0x57D9, 0x11D0, [0xB9'u8, 0x32, 0x00, 0xA0, 0x24, 0xAB, 0x2D, 0xBB])
  CLSID_DsFindPeople* = DEFINE_GUID(0x83EE3FE2'u32, 0x57D9, 0x11D0, [0xB9'u8, 0x32, 0x00, 0xA0, 0x24, 0xAB, 0x2D, 0xBB])
  CLSID_DsFindPrinter* = DEFINE_GUID(0xB577F070'u32, 0x7EE2, 0x11D0, [0x91'u8, 0x3F, 0x00, 0xAA, 0x00, 0xC1, 0x6E, 0x65])
  CLSID_DsFindVolume* = DEFINE_GUID(0xC1B3CBF1'u32, 0x886A, 0x11D0, [0x91'u8, 0x40, 0x00, 0xAA, 0x00, 0xC1, 0x6E, 0x65])
  CLSID_DsFolderProperties* = DEFINE_GUID(0x9E51E0D0'u32, 0x6E0F, 0x11D2, [0x96'u8, 0x01, 0x00, 0xC0, 0x4F, 0xA3, 0x1A, 0x86])
  CLSID_DsPropertyPages* = DEFINE_GUID(0x0D45D530'u32, 0x764B, 0x11D0, [0xA1'u8, 0xCA, 0x00, 0xAA, 0x00, 0xC1, 0x6E, 0x65])
  CLSID_DsQuery* = DEFINE_GUID(0x8A23E65E'u32, 0x31C2, 0x11D0, [0x89'u8, 0x1C, 0x00, 0xA0, 0x24, 0xAB, 0x2D, 0xBB])
  CLSID_DWbemClassObject* = DEFINE_GUID(0x64AB3751'u32, 0x12BC, 0x11D1, [0x9E'u8, 0x61, 0x00, 0xC0, 0x4F, 0xC3, 0x24, 0xA8])
  CLSID_DWbemContext* = DEFINE_GUID(0x752FF212'u32, 0xF7B7, 0x11D0, [0x9E'u8, 0x4D, 0x00, 0xC0, 0x4F, 0xC3, 0x24, 0xA8])
  CLSID_DWbemLocator* = DEFINE_GUID(0xCB7CA032'u32, 0xF729, 0x11D0, [0x9E'u8, 0x4D, 0x00, 0xC0, 0x4F, 0xC3, 0x24, 0xA8])
  CLSID_DX2D* = DEFINE_GUID(0x473AA80B'u32, 0x4577, 0x11D1, [0x81'u8, 0xA8, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  CLSID_DXFade* = DEFINE_GUID(0x16B280C5'u32, 0xEE70, 0x11D1, [0x90'u8, 0x66, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  CLSID_DXGradient* = DEFINE_GUID(0xC6365470'u32, 0xF667, 0x11D1, [0x90'u8, 0x67, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  CLSID_DXLUTBuilder* = DEFINE_GUID(0x1E54333B'u32, 0x2A00, 0x11D1, [0x81'u8, 0x98, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  CLSID_DXRasterizer* = DEFINE_GUID(0x8652CE55'u32, 0x9E80, 0x11D1, [0x90'u8, 0x53, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  CLSID_DXSurface* = DEFINE_GUID(0x0E890F83'u32, 0x5F79, 0x11D1, [0x90'u8, 0x43, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  CLSID_DXSurfaceModifier* = DEFINE_GUID(0x3E669F1D'u32, 0x9C23, 0x11D1, [0x90'u8, 0x53, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  CLSID_DXTAlpha* = DEFINE_GUID(0xADC6CB82'u32, 0x424C, 0x11D2, [0x95'u8, 0x2A, 0x00, 0xC0, 0x4F, 0xA3, 0x4F, 0x05])
  CLSID_DXTAlphaImageLoader* = DEFINE_GUID(0x0C7EFBDE'u32, 0x0303, 0x4C6F, [0xA4'u8, 0xF7, 0x31, 0xFA, 0x2B, 0xE5, 0xE3, 0x97])
  CLSID_DXTAlphaImageLoaderPP* = DEFINE_GUID(0x8C80CE2D'u32, 0x850D, 0x47DA, [0x8E'u8, 0xCD, 0x55, 0x02, 0x35, 0x62, 0xD1, 0x67])
  CLSID_DXTAlphaPP* = DEFINE_GUID(0xD687A7E0'u32, 0x4BA4, 0x11D2, [0x8A'u8, 0xDE, 0x00, 0xA0, 0xC9, 0x8E, 0x65, 0x27])
  CLSID_DXTaskManager* = DEFINE_GUID(0x4CB26C03'u32, 0xFF93, 0x11D0, [0x81'u8, 0x7E, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  CLSID_DXTBarn* = DEFINE_GUID(0xEC9BA17D'u32, 0x60B5, 0x462B, [0xA6'u8, 0xD8, 0x14, 0xB8, 0x90, 0x57, 0xE2, 0x2A])
  CLSID_DXTBlinds* = DEFINE_GUID(0x9A4A4A51'u32, 0xFB3A, 0x4F4B, [0x9B'u8, 0x57, 0xA2, 0x91, 0x2A, 0x28, 0x97, 0x69])
  CLSID_DXTCheckerBoard* = DEFINE_GUID(0xB3EE7802'u32, 0x8224, 0x4787, [0xA1'u8, 0xEA, 0xF0, 0xDE, 0x16, 0xDE, 0xAB, 0xD3])
  CLSID_DXTCheckerBoardPP* = DEFINE_GUID(0xCBF47525'u32, 0x98D2, 0x45EA, [0xB8'u8, 0x43, 0xFD, 0x21, 0x3D, 0x93, 0x2B, 0x10])
  CLSID_DXTChroma* = DEFINE_GUID(0x421516C1'u32, 0x3CF8, 0x11D2, [0x95'u8, 0x2A, 0x00, 0xC0, 0x4F, 0xA3, 0x4F, 0x05])
  CLSID_DXTChromaPP* = DEFINE_GUID(0xEC7E0760'u32, 0x4C76, 0x11D2, [0x8A'u8, 0xDE, 0x00, 0xA0, 0xC9, 0x8E, 0x65, 0x27])
  CLSID_DXTComposite* = DEFINE_GUID(0x9A43A844'u32, 0x0831, 0x11D1, [0x81'u8, 0x7F, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  CLSID_DXTConvolution* = DEFINE_GUID(0x2BC0EF29'u32, 0xE6BA, 0x11D1, [0x81'u8, 0xDD, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  CLSID_DXTDropShadow* = DEFINE_GUID(0xADC6CB86'u32, 0x424C, 0x11D2, [0x95'u8, 0x2A, 0x00, 0xC0, 0x4F, 0xA3, 0x4F, 0x05])
  CLSID_DXTDropShadowPP* = DEFINE_GUID(0xEC7E0761'u32, 0x4C76, 0x11D2, [0x8A'u8, 0xDE, 0x00, 0xA0, 0xC9, 0x8E, 0x65, 0x27])
  CLSID_DXTFilter* = DEFINE_GUID(0x385A91BC'u32, 0x1E8A, 0x4E4A, [0xA7'u8, 0xA6, 0xF4, 0xFC, 0x1E, 0x6C, 0xA1, 0xBD])
  CLSID_DXTFilterBehavior* = DEFINE_GUID(0x649EEC1E'u32, 0xB579, 0x4E8C, [0xBB'u8, 0x3B, 0x49, 0x97, 0xF8, 0x42, 0x65, 0x36])
  CLSID_DXTFilterCollection* = DEFINE_GUID(0xA7EE7F34'u32, 0x3BD1, 0x427F, [0x92'u8, 0x31, 0xF9, 0x41, 0xE9, 0xB7, 0xE1, 0xFE])
  CLSID_DXTFilterFactory* = DEFINE_GUID(0x81397204'u32, 0xF51A, 0x4571, [0x8D'u8, 0x7B, 0xDC, 0x03, 0x05, 0x21, 0xAA, 0xBD])
  CLSID_DXTGlow* = DEFINE_GUID(0x9F8E6421'u32, 0x3D9B, 0x11D2, [0x95'u8, 0x2A, 0x00, 0xC0, 0x4F, 0xA3, 0x4F, 0x05])
  CLSID_DXTGlowPP* = DEFINE_GUID(0xEC7E0764'u32, 0x4C76, 0x11D2, [0x8A'u8, 0xDE, 0x00, 0xA0, 0xC9, 0x8E, 0x65, 0x27])
  CLSID_DXTGradientD* = DEFINE_GUID(0x623E2882'u32, 0xFC0E, 0x11D1, [0x9A'u8, 0x77, 0x00, 0x00, 0xF8, 0x75, 0x6A, 0x10])
  CLSID_DXTGradientWipe* = DEFINE_GUID(0xB96F67A2'u32, 0x30C2, 0x47E8, [0xBD'u8, 0x85, 0x70, 0xA2, 0xC9, 0x48, 0xB5, 0x0F])
  CLSID_DXTICMFilter* = DEFINE_GUID(0xA1BFB370'u32, 0x5A9F, 0x4429, [0xBB'u8, 0x72, 0xB1, 0x3E, 0x2F, 0xEA, 0xED, 0xEF])
  CLSID_DXTICMFilterPP* = DEFINE_GUID(0x1958FB12'u32, 0x31E6, 0x47E5, [0xAA'u8, 0x49, 0xB2, 0x3D, 0x12, 0xC8, 0x53, 0xE6])
  CLSID_DXTInset* = DEFINE_GUID(0x76F363F2'u32, 0x7E9F, 0x4ED7, [0xA6'u8, 0xA7, 0xEE, 0x30, 0x35, 0x1B, 0x66, 0x28])
  CLSID_DXTIris* = DEFINE_GUID(0x049F2CE6'u32, 0xD996, 0x4721, [0x89'u8, 0x7A, 0xDB, 0x15, 0xCE, 0x9E, 0xB7, 0x3D])
  CLSID_DXTLabel* = DEFINE_GUID(0x54702535'u32, 0x2606, 0x11D1, [0x99'u8, 0x9C, 0x00, 0x00, 0xF8, 0x75, 0x6A, 0x10])
  CLSID_DXTLight* = DEFINE_GUID(0xF9EFBEC2'u32, 0x4302, 0x11D2, [0x95'u8, 0x2A, 0x00, 0xC0, 0x4F, 0xA3, 0x4F, 0x05])
  CLSID_DXTLightPP* = DEFINE_GUID(0x694AF25F'u32, 0x124D, 0x11D3, [0x91'u8, 0xD5, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  CLSID_DXTMaskFilter* = DEFINE_GUID(0x3A04D93B'u32, 0x1EDD, 0x4F3F, [0xA3'u8, 0x75, 0xA0, 0x3E, 0xC1, 0x95, 0x72, 0xC4])
  CLSID_DXTMatrix* = DEFINE_GUID(0x4ABF5A06'u32, 0x5568, 0x4834, [0xBE'u8, 0xE3, 0x32, 0x7A, 0x6D, 0x95, 0xA6, 0x85])
  CLSID_DXTMatrixPP* = DEFINE_GUID(0xC591103A'u32, 0xB3A8, 0x4D47, [0xA3'u8, 0xF7, 0x2A, 0xEE, 0xE4, 0xB8, 0x01, 0x3F])
  CLSID_DXTMetaBurnFilm* = DEFINE_GUID(0x107045D1'u32, 0x06E0, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  CLSID_DXTMetaCenterPeel* = DEFINE_GUID(0xAA0D4D0C'u32, 0x06A3, 0x11D2, [0x8F'u8, 0x98, 0x00, 0xC0, 0x4F, 0xB9, 0x2E, 0xB7])
  CLSID_DXTMetaColorFade* = DEFINE_GUID(0x2A54C908'u32, 0x07AA, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  CLSID_DXTMetaFlowMotion* = DEFINE_GUID(0x2A54C90B'u32, 0x07AA, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  CLSID_DXTMetaGriddler* = DEFINE_GUID(0x2A54C911'u32, 0x07AA, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  CLSID_DXTMetaGriddler2* = DEFINE_GUID(0x2A54C913'u32, 0x07AA, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  CLSID_DXTMetaJaws* = DEFINE_GUID(0x2A54C904'u32, 0x07AA, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  CLSID_DXTMetaLightWipe* = DEFINE_GUID(0x107045C8'u32, 0x06E0, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  CLSID_DXTMetaLiquid* = DEFINE_GUID(0xAA0D4D0A'u32, 0x06A3, 0x11D2, [0x8F'u8, 0x98, 0x00, 0xC0, 0x4F, 0xB9, 0x2E, 0xB7])
  CLSID_DXTMetaPageTurn* = DEFINE_GUID(0xAA0D4D08'u32, 0x06A3, 0x11D2, [0x8F'u8, 0x98, 0x00, 0xC0, 0x4F, 0xB9, 0x2E, 0xB7])
  CLSID_DXTMetaPeelPiece* = DEFINE_GUID(0xAA0D4D10'u32, 0x06A3, 0x11D2, [0x8F'u8, 0x98, 0x00, 0xC0, 0x4F, 0xB9, 0x2E, 0xB7])
  CLSID_DXTMetaPeelSmall* = DEFINE_GUID(0xAA0D4D0E'u32, 0x06A3, 0x11D2, [0x8F'u8, 0x98, 0x00, 0xC0, 0x4F, 0xB9, 0x2E, 0xB7])
  CLSID_DXTMetaPeelSplit* = DEFINE_GUID(0xAA0D4D12'u32, 0x06A3, 0x11D2, [0x8F'u8, 0x98, 0x00, 0xC0, 0x4F, 0xB9, 0x2E, 0xB7])
  CLSID_DXTMetaRadialScaleWipe* = DEFINE_GUID(0x107045CA'u32, 0x06E0, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  CLSID_DXTMetaRipple* = DEFINE_GUID(0xAA0D4D03'u32, 0x06A3, 0x11D2, [0x8F'u8, 0x98, 0x00, 0xC0, 0x4F, 0xB9, 0x2E, 0xB7])
  CLSID_DXTMetaRoll* = DEFINE_GUID(0x9C61F46E'u32, 0x0530, 0x11D2, [0x8F'u8, 0x98, 0x00, 0xC0, 0x4F, 0xB9, 0x2E, 0xB7])
  CLSID_DXTMetaThreshold* = DEFINE_GUID(0x2A54C915'u32, 0x07AA, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  CLSID_DXTMetaTwister* = DEFINE_GUID(0x107045CF'u32, 0x06E0, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  CLSID_DXTMetaVacuum* = DEFINE_GUID(0x2A54C90D'u32, 0x07AA, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  CLSID_DXTMetaWater* = DEFINE_GUID(0x107045C5'u32, 0x06E0, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  CLSID_DXTMetaWhiteOut* = DEFINE_GUID(0x107045CC'u32, 0x06E0, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  CLSID_DXTMetaWormHole* = DEFINE_GUID(0x0E6AE022'u32, 0x0C83, 0x11D2, [0x8C'u8, 0xD4, 0x00, 0x10, 0x4B, 0xC7, 0x5D, 0x9A])
  CLSID_DXTMotionBlur* = DEFINE_GUID(0xDD13DE77'u32, 0xD3BA, 0x42D4, [0xB5'u8, 0xC6, 0x77, 0x45, 0xFA, 0x4E, 0x2D, 0x4B])
  CLSID_DXTMotionBlurPP* = DEFINE_GUID(0x926433E1'u32, 0x7F8F, 0x4BC6, [0xBE'u8, 0xC4, 0x8C, 0x12, 0x6C, 0x6B, 0x7D, 0xC4])
  CLSID_DXTRadialWipe* = DEFINE_GUID(0x164484A9'u32, 0x35D9, 0x4FB7, [0x9F'u8, 0xAB, 0x48, 0x27, 0x3B, 0x96, 0xAA, 0x1D])
  CLSID_DXTRandomBars* = DEFINE_GUID(0x2E7700B7'u32, 0x27C4, 0x437F, [0x9F'u8, 0xBF, 0x1E, 0x8B, 0xE2, 0x81, 0x75, 0x66])
  CLSID_DXTRandomBarsPP* = DEFINE_GUID(0xE3E6AE11'u32, 0x7FDC, 0x40C4, [0xAF'u8, 0xBF, 0x1D, 0xCE, 0xA8, 0x28, 0x62, 0xCC])
  CLSID_DXTRandomDissolve* = DEFINE_GUID(0xF7F4A1B6'u32, 0x8E87, 0x452F, [0xA2'u8, 0xD7, 0x30, 0x77, 0xF5, 0x08, 0xDB, 0xC0])
  CLSID_DXTransformFactory* = DEFINE_GUID(0xD1FE6762'u32, 0xFC48, 0x11D0, [0x88'u8, 0x3A, 0x3C, 0x8B, 0x00, 0xC1, 0x00, 0x00])
  CLSID_DXTRedirect* = DEFINE_GUID(0x42B07B28'u32, 0x2280, 0x4937, [0xB0'u8, 0x35, 0x02, 0x93, 0xFB, 0x81, 0x27, 0x81])
  CLSID_DXTRevealTrans* = DEFINE_GUID(0xE31E87C4'u32, 0x86EA, 0x4940, [0x9B'u8, 0x8A, 0x5B, 0xD5, 0xD1, 0x79, 0xA7, 0x37])
  CLSID_DXTScale* = DEFINE_GUID(0x555278E2'u32, 0x05DB, 0x11D1, [0x88'u8, 0x3A, 0x3C, 0x8B, 0x00, 0xC1, 0x00, 0x00])
  CLSID_DXTShadow* = DEFINE_GUID(0xE71B4063'u32, 0x3E59, 0x11D2, [0x95'u8, 0x2A, 0x00, 0xC0, 0x4F, 0xA3, 0x4F, 0x05])
  CLSID_DXTShadowPP* = DEFINE_GUID(0xEC7E0765'u32, 0x4C76, 0x11D2, [0x8A'u8, 0xDE, 0x00, 0xA0, 0xC9, 0x8E, 0x65, 0x27])
  CLSID_DXTSlide* = DEFINE_GUID(0xD1C5A1E7'u32, 0xCC47, 0x4E32, [0xBD'u8, 0xD2, 0x4B, 0x3C, 0x5F, 0xC5, 0x0A, 0xF5])
  CLSID_DXTSpiral* = DEFINE_GUID(0x4A03DCB9'u32, 0x6E17, 0x4A39, [0x88'u8, 0x45, 0x4E, 0xE7, 0xDC, 0x53, 0x31, 0xA5])
  CLSID_DXTStretch* = DEFINE_GUID(0xF088DE73'u32, 0xBDD0, 0x4E3C, [0x81'u8, 0xF8, 0x6D, 0x32, 0xF4, 0xFE, 0x9D, 0x28])
  CLSID_DXTStrips* = DEFINE_GUID(0x63A4B1FC'u32, 0x259A, 0x4A5B, [0x81'u8, 0x29, 0xA8, 0x3B, 0x8C, 0x9E, 0x6F, 0x4F])
  CLSID_DXTStripsPP* = DEFINE_GUID(0xFEC0B7EE'u32, 0x7AEC, 0x4067, [0x9E'u8, 0xE1, 0xFA, 0xCF, 0xB7, 0xCE, 0x9A, 0xF9])
  CLSID_DXTWave* = DEFINE_GUID(0xADC6CB88'u32, 0x424C, 0x11D2, [0x95'u8, 0x2A, 0x00, 0xC0, 0x4F, 0xA3, 0x4F, 0x05])
  CLSID_DXTWavePP* = DEFINE_GUID(0xF12456C0'u32, 0x4C9E, 0x11D2, [0x8A'u8, 0xDE, 0x00, 0xA0, 0xC9, 0x8E, 0x65, 0x27])
  CLSID_DXTWipe* = DEFINE_GUID(0xAF279B30'u32, 0x86EB, 0x11D1, [0x81'u8, 0xBF, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  CLSID_DXTWipePP* = DEFINE_GUID(0x7FFE4D08'u32, 0xFBFD, 0x11D1, [0x9A'u8, 0x77, 0x00, 0x00, 0xF8, 0x75, 0x6A, 0x10])
  CLSID_DXTZigzag* = DEFINE_GUID(0x23E26328'u32, 0x3928, 0x40F2, [0x95'u8, 0xE5, 0x93, 0xCA, 0xD6, 0x90, 0x16, 0xEB])
  CLSID_EAPOLManager* = DEFINE_GUID(0xBA126AE4'u32, 0x2166, 0x11D1, [0xB1'u8, 0xD0, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  CLSID_Email* = DEFINE_GUID(0x8F92A857'u32, 0x478E, 0x11D1, [0xA3'u8, 0xB4, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  CLSID_EnumAdapterInfo* = DEFINE_GUID(0x6F9942CA'u32, 0xC1B1, 0x4AB5, [0x93'u8, 0xDA, 0x60, 0x58, 0x99, 0x1D, 0xC8, 0xF3])
  CLSID_EVENTQUEUE* = DEFINE_GUID(0x6E0FF466'u32, 0x339E, 0x11D1, [0xBE'u8, 0x5B, 0x00, 0xC0, 0x4F, 0xC9, 0xE2, 0xBB])
  CLSID_EXTENDEDERRORINFO* = DEFINE_GUID(0xC8B522CF'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  CLSID_FadePP* = DEFINE_GUID(0x16B280C6'u32, 0xEE70, 0x11D1, [0x90'u8, 0x66, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  CLSID_FaxNumber* = DEFINE_GUID(0xA5062215'u32, 0x4681, 0x11D1, [0xA3'u8, 0xB4, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  CLSID_FilePlaybackTerminal* = DEFINE_GUID(0x0CB9914C'u32, 0x79CD, 0x47DC, [0xAD'u8, 0xB0, 0x32, 0x7F, 0x47, 0xCE, 0xFB, 0x20])
  CLSID_FileProtocol* = DEFINE_GUID(0x79EAC9E7'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  CLSID_FileRecordingTerminal* = DEFINE_GUID(0x521F3D06'u32, 0xC3D0, 0x4511, [0x86'u8, 0x17, 0x86, 0xB9, 0xA7, 0x83, 0xDA, 0x77])
  CLSID_FileRecordingTrack* = DEFINE_GUID(0xBF14A2E4'u32, 0xE88B, 0x4EF5, [0x97'u8, 0x40, 0x5A, 0xC5, 0xD0, 0x22, 0xF8, 0xC9])
  CLSID_FileSearchBand* = DEFINE_GUID(0xC4EE31F3'u32, 0x4768, 0x11D2, [0xBE'u8, 0x5C, 0x00, 0xA0, 0xC9, 0xA8, 0x3D, 0xA1])
  CLSID_FileSysColumnProvider* = DEFINE_GUID(0x0D2E74C4'u32, 0x3C34, 0x11D2, [0xA2'u8, 0x7E, 0x00, 0xC0, 0x4F, 0xC3, 0x08, 0x71])
  CLSID_FileTerminal* = DEFINE_GUID(0xAAF578F1'u32, 0xDC70, 0x11D0, [0x8E'u8, 0xD3, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  CLSID_FolderShortcut* = DEFINE_GUID(0x0AFACED1'u32, 0xE828, 0x11D1, [0x91'u8, 0x87, 0xB5, 0x32, 0xF1, 0xE9, 0x57, 0x5D])
  CLSID_FolderViewHost* = DEFINE_GUID(0x20B1CB23'u32, 0x6968, 0x4EB9, [0xB7'u8, 0xD4, 0xA6, 0x6D, 0x00, 0xD0, 0x7C, 0xEE])
  CLSID_FontNames* = DEFINE_GUID(0x3050F83A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_FramesCollection* = DEFINE_GUID(0x3050F7F6'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_FreeSpaceCategorizer* = DEFINE_GUID(0xB5607793'u32, 0x24AC, 0x44C7, [0x82'u8, 0xE2, 0x83, 0x17, 0x26, 0xAA, 0x6C, 0xB7])
  CLSID_FtpProtocol* = DEFINE_GUID(0x79EAC9E3'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  CLSID_GblComponentCategoriesMgr* = DEFINE_GUID(0x0002E006'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_GLOBAL_BROADCAST* = DEFINE_GUID(0xD34F1810'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_GopherProtocol* = DEFINE_GUID(0x79EAC9E4'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  CLSID_GradientPP* = DEFINE_GUID(0x623E2880'u32, 0xFC0E, 0x11D1, [0x9A'u8, 0x77, 0x00, 0x00, 0xF8, 0x75, 0x6A, 0x10])
  CLSID_HandsetTerminal* = DEFINE_GUID(0xAAF578EB'u32, 0xDC70, 0x11D0, [0x8E'u8, 0xD3, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  CLSID_HeadsetTerminal* = DEFINE_GUID(0xAAF578ED'u32, 0xDC70, 0x11D0, [0x8E'u8, 0xD3, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  CLSID_HNetCfgMgr* = DEFINE_GUID(0x46C166AA'u32, 0x3108, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  CLSID_Hold* = DEFINE_GUID(0xB3AD3E13'u32, 0x4080, 0x11D1, [0xA3'u8, 0xAC, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  CLSID_HomeNetAutoConfigService* = DEFINE_GUID(0x9A8EA3B5'u32, 0x572E, 0x4CB3, [0x9E'u8, 0xB9, 0xEC, 0x68, 0x9A, 0xC5, 0x75, 0xAE])
  CLSID_HomePage* = DEFINE_GUID(0x766BF2AE'u32, 0xD650, 0x11D1, [0x98'u8, 0x11, 0x00, 0xC0, 0x4F, 0xC3, 0x1D, 0x2E])
  CLSID_HostDialogHelper* = DEFINE_GUID(0x429AF92C'u32, 0xA51F, 0x11D2, [0x86'u8, 0x1E, 0x00, 0xC0, 0x4F, 0xA3, 0x5C, 0x89])
  CLSID_HTADocument* = DEFINE_GUID(0x3050F5C8'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTCAttachBehavior* = DEFINE_GUID(0x3050F5F5'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTCDefaultDispatch* = DEFINE_GUID(0x3050F4FC'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTCDescBehavior* = DEFINE_GUID(0x3050F5DD'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTCEventBehavior* = DEFINE_GUID(0x3050F4FE'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTCMethodBehavior* = DEFINE_GUID(0x3050F630'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTCPropertyBehavior* = DEFINE_GUID(0x3050F5DE'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLAnchorElement* = DEFINE_GUID(0x3050F248'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLAppBehavior* = DEFINE_GUID(0x3050F5CB'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLApplication* = DEFINE_GUID(0x3050F4D8'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLAreaElement* = DEFINE_GUID(0x3050F283'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLAreasCollection* = DEFINE_GUID(0x3050F4CA'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLAttributeCollection* = DEFINE_GUID(0x3050F4CC'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLBaseElement* = DEFINE_GUID(0x3050F276'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLBaseFontElement* = DEFINE_GUID(0x3050F282'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLBGsound* = DEFINE_GUID(0x3050F370'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLBlockElement* = DEFINE_GUID(0x3050F281'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLBody* = DEFINE_GUID(0x3050F24A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLBRElement* = DEFINE_GUID(0x3050F280'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLButtonElement* = DEFINE_GUID(0x3050F2C6'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLCommentElement* = DEFINE_GUID(0x3050F317'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLCurrentStyle* = DEFINE_GUID(0x3050F3DC'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLDDElement* = DEFINE_GUID(0x3050F27F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLDefaults* = DEFINE_GUID(0x3050F6C8'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLDialog* = DEFINE_GUID(0x3050F28A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLDivElement* = DEFINE_GUID(0x3050F27E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLDivPosition* = DEFINE_GUID(0x3050F249'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HtmlDlgSafeHelper* = DEFINE_GUID(0x3050F819'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLDListElement* = DEFINE_GUID(0x3050F27D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLDocument* = DEFINE_GUID(0x25336920'u32, 0x03F9, 0x11CF, [0x8F'u8, 0xD0, 0x00, 0xAA, 0x00, 0x68, 0x6F, 0x13])
  CLSID_HTMLDOMAttribute* = DEFINE_GUID(0x3050F4B2'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLDOMImplementation* = DEFINE_GUID(0x3050F80E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLDOMTextNode* = DEFINE_GUID(0x3050F4BA'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLDTElement* = DEFINE_GUID(0x3050F27C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLElementCollection* = DEFINE_GUID(0x3050F4CB'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLEmbed* = DEFINE_GUID(0x3050F25D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLFieldSetElement* = DEFINE_GUID(0x3050F3E8'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLFontElement* = DEFINE_GUID(0x3050F27B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLFormElement* = DEFINE_GUID(0x3050F251'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLFrameBase* = DEFINE_GUID(0x3050F312'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLFrameElement* = DEFINE_GUID(0x3050F314'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLFrameSetSite* = DEFINE_GUID(0x3050F31A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLGenericElement* = DEFINE_GUID(0x3050F4B8'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLHeadElement* = DEFINE_GUID(0x3050F493'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLHeaderElement* = DEFINE_GUID(0x3050F27A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLHistory* = DEFINE_GUID(0xFECEAAA3'u32, 0x8405, 0x11CF, [0x8B'u8, 0xA1, 0x00, 0xAA, 0x00, 0x47, 0x6D, 0xA6])
  CLSID_HTMLHRElement* = DEFINE_GUID(0x3050F252'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLHtmlElement* = DEFINE_GUID(0x3050F491'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLIFrame* = DEFINE_GUID(0x3050F316'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLImageElementFactory* = DEFINE_GUID(0x3050F38F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLImg* = DEFINE_GUID(0x3050F241'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLInputButtonElement* = DEFINE_GUID(0x3050F2B4'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLInputElement* = DEFINE_GUID(0x3050F5D8'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLInputFileElement* = DEFINE_GUID(0x3050F2AE'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLInputImage* = DEFINE_GUID(0x3050F2C4'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLInputTextElement* = DEFINE_GUID(0x3050F2AB'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLIsIndexElement* = DEFINE_GUID(0x3050F278'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLLabelElement* = DEFINE_GUID(0x3050F32B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLLegendElement* = DEFINE_GUID(0x3050F3E9'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLLIElement* = DEFINE_GUID(0x3050F273'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLLinkElement* = DEFINE_GUID(0x3050F277'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLListElement* = DEFINE_GUID(0x3050F272'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLLoadOptions* = DEFINE_GUID(0x18845040'u32, 0x0FA5, 0x11D1, [0xBA'u8, 0x19, 0x00, 0xC0, 0x4F, 0xD9, 0x12, 0xD0])
  CLSID_HTMLLocation* = DEFINE_GUID(0x163BB1E1'u32, 0x6E00, 0x11CF, [0x83'u8, 0x7A, 0x48, 0xDC, 0x04, 0xC1, 0x00, 0x00])
  CLSID_HTMLMapElement* = DEFINE_GUID(0x3050F271'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLMarqueeElement* = DEFINE_GUID(0x3050F2B9'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLMetaElement* = DEFINE_GUID(0x3050F275'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLNamespace* = DEFINE_GUID(0x3050F6BC'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLNamespaceCollection* = DEFINE_GUID(0x3050F6B9'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLNavigator* = DEFINE_GUID(0xFECEAAA6'u32, 0x8405, 0x11CF, [0x8B'u8, 0xA1, 0x00, 0xAA, 0x00, 0x47, 0x6D, 0xA6])
  CLSID_HTMLNextIdElement* = DEFINE_GUID(0x3050F279'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLNoShowElement* = DEFINE_GUID(0x3050F38B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLObjectElement* = DEFINE_GUID(0x3050F24E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLOListElement* = DEFINE_GUID(0x3050F270'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLOptionButtonElement* = DEFINE_GUID(0x3050F2BE'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLOptionElement* = DEFINE_GUID(0x3050F24D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLOptionElementFactory* = DEFINE_GUID(0x3050F38D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLParaElement* = DEFINE_GUID(0x3050F26F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLParamElement* = DEFINE_GUID(0x3050F83E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLPhraseElement* = DEFINE_GUID(0x3050F26E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLPluginDocument* = DEFINE_GUID(0x25336921'u32, 0x03F9, 0x11CF, [0x8F'u8, 0xD0, 0x00, 0xAA, 0x00, 0x68, 0x6F, 0x13])
  CLSID_HTMLPopup* = DEFINE_GUID(0x3050F667'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLRenderStyle* = DEFINE_GUID(0x3050F6AA'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLRichtextElement* = DEFINE_GUID(0x3050F2DF'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLRuleStyle* = DEFINE_GUID(0x3050F3D0'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLScreen* = DEFINE_GUID(0x3050F35D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLScriptElement* = DEFINE_GUID(0x3050F28C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLSelectElement* = DEFINE_GUID(0x3050F245'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLSpanElement* = DEFINE_GUID(0x3050F3F5'u32, 0x98B4, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLSpanFlow* = DEFINE_GUID(0x3050F3E6'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLStyle* = DEFINE_GUID(0x3050F285'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLStyleElement* = DEFINE_GUID(0x3050F37D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLStyleFontFace* = DEFINE_GUID(0x3050F3D4'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLStyleSheet* = DEFINE_GUID(0x3050F2E4'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLStyleSheetPage* = DEFINE_GUID(0x3050F7EF'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLStyleSheetPagesCollection* = DEFINE_GUID(0x3050F7F1'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLStyleSheetRule* = DEFINE_GUID(0x3050F3CE'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLStyleSheetRulesCollection* = DEFINE_GUID(0x3050F3CD'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLStyleSheetsCollection* = DEFINE_GUID(0x3050F37F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLTable* = DEFINE_GUID(0x3050F26B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLTableCaption* = DEFINE_GUID(0x3050F2EC'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLTableCell* = DEFINE_GUID(0x3050F246'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLTableCol* = DEFINE_GUID(0x3050F26C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLTableRow* = DEFINE_GUID(0x3050F26D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLTableSection* = DEFINE_GUID(0x3050F2E9'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLTextAreaElement* = DEFINE_GUID(0x3050F2AC'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLTextElement* = DEFINE_GUID(0x3050F26A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLTitleElement* = DEFINE_GUID(0x3050F284'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLUListElement* = DEFINE_GUID(0x3050F269'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLUnknownElement* = DEFINE_GUID(0x3050F268'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLUrnCollection* = DEFINE_GUID(0x3050F580'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HTMLWindow2* = DEFINE_GUID(0xD48A6EC6'u32, 0x6A4A, 0x11CF, [0x94'u8, 0xA7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  CLSID_HTMLWindowProxy* = DEFINE_GUID(0x3050F391'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_HttpProtocol* = DEFINE_GUID(0x79EAC9E2'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  CLSID_HttpSProtocol* = DEFINE_GUID(0x79EAC9E5'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  CLSID_HWShellExecute* = DEFINE_GUID(0xFFB8655F'u32, 0x81B9, 0x4FCE, [0xB8'u8, 0x9C, 0x9A, 0x6B, 0xA7, 0x6D, 0x13, 0xE7])
  CLSID_IActiveXSafetyProvider* = DEFINE_GUID(0xAAF8C6CE'u32, 0xF972, 0x11D0, [0x97'u8, 0xEB, 0x00, 0xAA, 0x00, 0x61, 0x53, 0x33])
  CLSID_IImageDecodeFilter* = DEFINE_GUID(0x607FD4E8'u32, 0x0A03, 0x11D1, [0xAB'u8, 0x1D, 0x00, 0xC0, 0x4F, 0xC9, 0xB3, 0x04])
  CLSID_IImgCtx* = DEFINE_GUID(0x3050F3D6'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_ImageList* = DEFINE_GUID(0x7C476BA2'u32, 0x02B1, 0x48F4, [0x80'u8, 0x48, 0xB2, 0x46, 0x19, 0xDD, 0xC0, 0x58])
  CLSID_ImageProperties* = DEFINE_GUID(0x7AB770C7'u32, 0x0E23, 0x4D7A, [0x8A'u8, 0xA2, 0x19, 0xBF, 0xAD, 0x47, 0x98, 0x29])
  CLSID_InProcFreeMarshaler* = DEFINE_GUID(0x0000033A'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_IntDitherer* = DEFINE_GUID(0x05F6FE1A'u32, 0xECEF, 0x11D0, [0xAA'u8, 0xE7, 0x00, 0xC0, 0x4F, 0xC9, 0xB3, 0x04])
  CLSID_IntelliForms* = DEFINE_GUID(0x613AB92E'u32, 0x16BF, 0x11D2, [0xBC'u8, 0xA5, 0x00, 0xC0, 0x4F, 0xD9, 0x29, 0xDB])
  CLSID_Internet* = DEFINE_GUID(0x871C5380'u32, 0x42A0, 0x1069, [0xA2'u8, 0xEA, 0x08, 0x00, 0x2B, 0x30, 0x30, 0x9D])
  CLSID_InternetButtons* = DEFINE_GUID(0x1E796980'u32, 0x9CC5, 0x11D1, [0xA8'u8, 0x3F, 0x00, 0xC0, 0x4F, 0xC9, 0x9D, 0x61])
  CLSID_InternetConnectionBeaconServic* = DEFINE_GUID(0x04DF613A'u32, 0x5610, 0x11D4, [0x9E'u8, 0xC8, 0x00, 0xB0, 0xD0, 0x22, 0xDD, 0x1F])
  CLSID_InternetExplorer* = DEFINE_GUID(0x0002DF01'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_InternetPrintOrdering* = DEFINE_GUID(0xADD36AA8'u32, 0x751A, 0x4579, [0xA2'u8, 0x66, 0xD6, 0x6F, 0x52, 0x02, 0xCC, 0xBB])
  CLSID_InternetSecurityManager* = DEFINE_GUID(0x7B8A2D94'u32, 0x0AC9, 0x11D1, [0x89'u8, 0x6C, 0x00, 0xC0, 0x4F, 0xB6, 0xBF, 0xC4])
  CLSID_InternetShortcut* = DEFINE_GUID(0xFBF23B40'u32, 0xE3F0, 0x101B, [0x84'u8, 0x88, 0x00, 0xAA, 0x00, 0x3E, 0x56, 0xF8])
  CLSID_InternetZoneManager* = DEFINE_GUID(0x7B8A2D95'u32, 0x0AC9, 0x11D1, [0x89'u8, 0x6C, 0x00, 0xC0, 0x4F, 0xB6, 0xBF, 0xC4])
  CLSID_LanConnectionManager* = DEFINE_GUID(0xBA126AD3'u32, 0x2166, 0x11D1, [0xB1'u8, 0xD0, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  CLSID_LargeInteger* = DEFINE_GUID(0x927971F5'u32, 0x0939, 0x11D1, [0x8B'u8, 0xE1, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  CLSID_LDAPConnectionObject* = DEFINE_GUID(0x7DA2A9C4'u32, 0x0C46, 0x43BD, [0xB0'u8, 0x4E, 0xD9, 0x2B, 0x1B, 0xE2, 0x7C, 0x45])
  CLSID_LDAPObject* = DEFINE_GUID(0x05709878'u32, 0x5195, 0x466C, [0x9E'u8, 0x64, 0x48, 0x7C, 0xE3, 0xCA, 0x20, 0xBF])
  CLSID_LinkColumnProvider* = DEFINE_GUID(0x24F14F02'u32, 0x7B1C, 0x11D1, [0x83'u8, 0x8F, 0x00, 0x00, 0xF8, 0x04, 0x61, 0xCF])
  CLSID_LocalMachineClasses* = DEFINE_GUID(0x00000331'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_LogManager* = DEFINE_GUID(0x8FDA8FA4'u32, 0x8763, 0x479F, [0xB9'u8, 0xB1, 0x22, 0x02, 0xB2, 0x80, 0xD2, 0x93])
  CLSID_LUTBuilderPP* = DEFINE_GUID(0x25B33662'u32, 0xFD83, 0x11D1, [0x8A'u8, 0xDE, 0x44, 0x45, 0x53, 0x54, 0x00, 0x01])
  CLSID_MachineDebugManager* = DEFINE_GUID(0x0C0A3666'u32, 0x30C9, 0x11D0, [0x8F'u8, 0x20, 0x00, 0x80, 0x5F, 0x2C, 0xD0, 0x64])
  CLSID_MailAutoDiscovery* = DEFINE_GUID(0x008FD5DD'u32, 0x6DBB, 0x48E3, [0x99'u8, 0x1B, 0x2D, 0x3E, 0xD6, 0x58, 0x51, 0x6A])
  CLSID_MailProtocolADEntry* = DEFINE_GUID(0x61A5D6F3'u32, 0xC131, 0x4C35, [0xBF'u8, 0x40, 0x90, 0xA5, 0x0F, 0x21, 0x41, 0x22])
  CLSID_ManualResetEvent* = DEFINE_GUID(0x0000032C'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_McastAddressAllocation* = DEFINE_GUID(0xDF0DAEF2'u32, 0xA289, 0x11D1, [0x86'u8, 0x97, 0x00, 0x60, 0x08, 0xB0, 0xE5, 0xD2])
  CLSID_MediaStreamTerminal* = DEFINE_GUID(0xE2F7AEF7'u32, 0x4971, 0x11D1, [0xA6'u8, 0x71, 0x00, 0x60, 0x97, 0xC9, 0xA2, 0xE8])
  CLSID_MergedCategorizer* = DEFINE_GUID(0x8E827C11'u32, 0x33E7, 0x4BC1, [0xB2'u8, 0x42, 0x8C, 0xD9, 0xA1, 0xC2, 0xB3, 0x04])
  CLSID_MHTMLDocument* = DEFINE_GUID(0x3050F3D9'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_MicrophoneTerminal* = DEFINE_GUID(0xAAF578EF'u32, 0xDC70, 0x11D0, [0x8E'u8, 0xD3, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  CLSID_MicrosoftDS* = DEFINE_GUID(0xFE1290F0'u32, 0xCFBD, 0x11CF, [0xA3'u8, 0x30, 0x00, 0xAA, 0x00, 0xC1, 0x6E, 0x65])
  CLSID_MigrationWizardAuto* = DEFINE_GUID(0x67331D85'u32, 0xBE17, 0x42F6, [0x8D'u8, 0x3F, 0x47, 0xB8, 0xE8, 0xB2, 0x66, 0x37])
  CLSID_MkProtocol* = DEFINE_GUID(0x79EAC9E6'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  CLSID_MofCompiler* = DEFINE_GUID(0x6DAF9757'u32, 0x2E37, 0x11D2, [0xAE'u8, 0xC9, 0x00, 0xC0, 0x4F, 0xB6, 0x88, 0x20])
  CLSID_MountedVolume* = DEFINE_GUID(0x12518493'u32, 0x00B2, 0x11D2, [0x9F'u8, 0xA5, 0x9E, 0x34, 0x20, 0x52, 0x41, 0x53])
  CLSID_MSBurnEngineObj* = DEFINE_GUID(0x520CCA67'u32, 0x51A5, 0x11D3, [0x91'u8, 0x44, 0x00, 0x10, 0x4B, 0xA1, 0x1C, 0x5E])
  CLSID_MSDATT* = DEFINE_GUID(0xC8B522CE'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  CLSID_MSDAVTM* = DEFINE_GUID(0x0C733A8E'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  CLSID_MSDiscMasterObj* = DEFINE_GUID(0x520CCA63'u32, 0x51A5, 0x11D3, [0x91'u8, 0x44, 0x00, 0x10, 0x4B, 0xA1, 0x1C, 0x5E])
  CLSID_MSDiscRecorderObj* = DEFINE_GUID(0x520CCA61'u32, 0x51A5, 0x11D3, [0x91'u8, 0x44, 0x00, 0x10, 0x4B, 0xA1, 0x1C, 0x5E])
  CLSID_MSDiscStashObj* = DEFINE_GUID(0x520CCA65'u32, 0x51A5, 0x11D3, [0x91'u8, 0x44, 0x00, 0x10, 0x4B, 0xA1, 0x1C, 0x5E])
  CLSID_MSEnumDiscRecordersObj* = DEFINE_GUID(0x8A03567A'u32, 0x63CB, 0x4BA8, [0xBA'u8, 0xF6, 0x52, 0x11, 0x98, 0x16, 0xD1, 0xEF])
  CLSID_MSOButtons* = DEFINE_GUID(0x178F34B8'u32, 0xA282, 0x11D2, [0x86'u8, 0xC5, 0x00, 0xC0, 0x4F, 0x8E, 0xEA, 0x99])
  CLSID_MyComputer* = DEFINE_GUID(0x20D04FE0'u32, 0x3AEA, 0x1069, [0xA2'u8, 0xD8, 0x08, 0x00, 0x2B, 0x30, 0x30, 0x9D])
  CLSID_MyDocuments* = DEFINE_GUID(0x450D8FBA'u32, 0xAD25, 0x11D0, [0x98'u8, 0xA8, 0x08, 0x00, 0x36, 0x1B, 0x11, 0x03])
  CLSID_NameTranslate* = DEFINE_GUID(0x274FAE1F'u32, 0x3626, 0x11D1, [0xA3'u8, 0xA4, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  CLSID_NetAddress* = DEFINE_GUID(0xB0B71247'u32, 0x4080, 0x11D1, [0xA3'u8, 0xAC, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  CLSID_NetConnectionHNetUtil* = DEFINE_GUID(0xBA126AE3'u32, 0x2166, 0x11D1, [0xB1'u8, 0xD0, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  CLSID_NetConnectionUiUtilities* = DEFINE_GUID(0x7007ACD3'u32, 0x3202, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  CLSID_NetCrawler* = DEFINE_GUID(0x601AC3DC'u32, 0x786A, 0x4EB0, [0xBF'u8, 0x40, 0xEE, 0x35, 0x21, 0xE7, 0x0B, 0xFB])
  CLSID_NetSharingManager* = DEFINE_GUID(0x5C63C1AD'u32, 0x3956, 0x4FF8, [0x84'u8, 0x86, 0x40, 0x03, 0x47, 0x58, 0x31, 0x5B])
  CLSID_NetworkDomain* = DEFINE_GUID(0x46E06680'u32, 0x4BF0, 0x11D1, [0x83'u8, 0xEE, 0x00, 0xA0, 0xC9, 0x0D, 0xC8, 0x49])
  CLSID_NetworkPlaces* = DEFINE_GUID(0x208D2C60'u32, 0x3AEA, 0x1069, [0xA2'u8, 0xD7, 0x08, 0x00, 0x2B, 0x30, 0x30, 0x9D])
  CLSID_NetworkServer* = DEFINE_GUID(0xC0542A90'u32, 0x4BF0, 0x11D1, [0x83'u8, 0xEE, 0x00, 0xA0, 0xC9, 0x0D, 0xC8, 0x49])
  CLSID_NetworkShare* = DEFINE_GUID(0x54A754C0'u32, 0x4BF0, 0x11D1, [0x83'u8, 0xEE, 0x00, 0xA0, 0xC9, 0x0D, 0xC8, 0x49])
  CLSID_NetworkType* = DEFINE_GUID(0xD4F3D51B'u32, 0x1755, 0x4953, [0x9C'u8, 0x8B, 0x24, 0x95, 0xAB, 0xE5, 0xE0, 0x7E])
  CLSID_NodeType* = DEFINE_GUID(0x1AAA3D11'u32, 0x4792, 0x44E4, [0x9D'u8, 0x49, 0x78, 0xFE, 0xD3, 0x69, 0x1A, 0x14])
  CLSID_NotificaitonTest1* = DEFINE_GUID(0xC733E501'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_NotificaitonTest2* = DEFINE_GUID(0xC733E502'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_NotificaitonTest3* = DEFINE_GUID(0xC733E503'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_NotificaitonTest4* = DEFINE_GUID(0xC733E504'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_NotificationManager* = DEFINE_GUID(0xE1813DD0'u32, 0xAADA, 0x4738, [0xB5'u8, 0xFF, 0x96, 0xB4, 0x18, 0x9C, 0x50, 0x19])
  CLSID_ObjectManager* = DEFINE_GUID(0x955661BD'u32, 0xCCA2, 0x4EAC, [0x91'u8, 0xD0, 0xA0, 0x39, 0x6A, 0x28, 0xAE, 0xFD])
  CLSID_OctetList* = DEFINE_GUID(0x1241400F'u32, 0x4680, 0x11D1, [0xA3'u8, 0xB4, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  CLSID_OldHTMLDocument* = DEFINE_GUID(0xD48A6EC9'u32, 0x6A4A, 0x11CF, [0x94'u8, 0xA7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  CLSID_OldHTMLFormElement* = DEFINE_GUID(0x0D04D285'u32, 0x6BEC, 0x11CF, [0x8B'u8, 0x97, 0x00, 0xAA, 0x00, 0x47, 0x6D, 0xA6])
  CLSID_OLEDB_CONVERSIONLIBRARY* = DEFINE_GUID(0xC8B522D1'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  CLSID_OLEDB_ENUMERATOR* = DEFINE_GUID(0xC8B522D0'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  CLSID_OLEDB_ROWPOSITIONLIBRARY* = DEFINE_GUID(0x2048EEE6'u32, 0x7FA2, 0x11D0, [0x9E'u8, 0x6A, 0x00, 0xA0, 0xC9, 0x13, 0x8C, 0x29])
  CLSID_PassportClientServices* = DEFINE_GUID(0x2D2307C8'u32, 0x7DB4, 0x40D6, [0x91'u8, 0x00, 0xD5, 0x2A, 0xF4, 0xF9, 0x7A, 0x5B])
  CLSID_Path* = DEFINE_GUID(0xB2538919'u32, 0x4080, 0x11D1, [0xA3'u8, 0xAC, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  CLSID_Pathname* = DEFINE_GUID(0x080D0D78'u32, 0xF421, 0x11D0, [0xA3'u8, 0x6E, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  CLSID_PeerFactory* = DEFINE_GUID(0x3050F4CF'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_PendingProxyConnection* = DEFINE_GUID(0xD8A68E5E'u32, 0x2B37, 0x426C, [0xA3'u8, 0x29, 0xC1, 0x17, 0xC1, 0x4C, 0x42, 0x9E])
  CLSID_PersistentDataChannel* = DEFINE_GUID(0xBC9B54AB'u32, 0x7883, 0x4C13, [0x90'u8, 0x9F, 0x03, 0x3D, 0x03, 0x26, 0x79, 0x90])
  CLSID_PersistPropset* = DEFINE_GUID(0xFB8F0821'u32, 0x0164, 0x101B, [0x84'u8, 0xED, 0x08, 0x00, 0x2B, 0x2E, 0xC7, 0x13])
  CLSID_Picture_Dib* = DEFINE_GUID(0x00000316'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_Picture_EnhMetafile* = DEFINE_GUID(0x00000319'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_Picture_Metafile* = DEFINE_GUID(0x00000315'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_Pixelate* = DEFINE_GUID(0x4CCEA634'u32, 0xFBE0, 0x11D1, [0x90'u8, 0x6A, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  CLSID_PixelatePP* = DEFINE_GUID(0x4CCEA635'u32, 0xFBE0, 0x11D1, [0x90'u8, 0x6A, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  CLSID_PluggableSuperclassRegistratio* = DEFINE_GUID(0xBB918E32'u32, 0x2A5C, 0x4986, [0xAB'u8, 0x40, 0x16, 0x86, 0xA0, 0x34, 0x39, 0x0A])
  CLSID_PluggableTerminalRegistration* = DEFINE_GUID(0x45234E3E'u32, 0x61CC, 0x4311, [0xA3'u8, 0xAB, 0x24, 0x80, 0x82, 0x55, 0x44, 0x82])
  CLSID_PostAgent* = DEFINE_GUID(0xD8BD2030'u32, 0x6FC9, 0x11D0, [0x86'u8, 0x4F, 0x00, 0xAA, 0x00, 0x68, 0x09, 0xD9])
  CLSID_PostalAddress* = DEFINE_GUID(0x0A75AFCD'u32, 0x4680, 0x11D1, [0xA3'u8, 0xB4, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  CLSID_PrimaryControlChannel* = DEFINE_GUID(0x3CEB5509'u32, 0xC1CD, 0x432F, [0x9D'u8, 0x8F, 0x65, 0xD1, 0xE2, 0x86, 0xAA, 0x80])
  CLSID_Printers* = DEFINE_GUID(0x2227A280'u32, 0x3AEA, 0x1069, [0xA2'u8, 0xDE, 0x08, 0x00, 0x2B, 0x30, 0x30, 0x9D])
  CLSID_PROCESS_BROADCAST* = DEFINE_GUID(0xD34F1811'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_ProcessDebugManager* = DEFINE_GUID(0x78A51822'u32, 0x51F4, 0x11D0, [0x8F'u8, 0x20, 0x00, 0x80, 0x5F, 0x2C, 0xD0, 0x64])
  CLSID_ProgressDialog* = DEFINE_GUID(0xF8383852'u32, 0xFCD3, 0x11D1, [0xA6'u8, 0xB9, 0x00, 0x60, 0x97, 0xDF, 0x5B, 0xD4])
  CLSID_PropertiesUI* = DEFINE_GUID(0xD912F8CF'u32, 0x0396, 0x4915, [0x88'u8, 0x4E, 0xFB, 0x42, 0x5D, 0x32, 0x94, 0x3B])
  CLSID_PropertyEntry* = DEFINE_GUID(0x72D3EDC2'u32, 0xA4C4, 0x11D0, [0x85'u8, 0x33, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  CLSID_PropertyValue* = DEFINE_GUID(0x7B9E38B0'u32, 0xA97C, 0x11D0, [0x85'u8, 0x34, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  CLSID_PSBindCtx* = DEFINE_GUID(0x00000312'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_PSClassObject* = DEFINE_GUID(0x0000030E'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_PSClientSite* = DEFINE_GUID(0x0000030D'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_PSDragDrop* = DEFINE_GUID(0x00000311'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_PSEnumerators* = DEFINE_GUID(0x00000313'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_PseudoSink* = DEFINE_GUID(0xE002E4F0'u32, 0xE6EA, 0x11D2, [0x9C'u8, 0xB3, 0x00, 0x10, 0x5A, 0x1F, 0x48, 0x01])
  CLSID_PSGenObject* = DEFINE_GUID(0x0000030C'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_PSInPlaceActive* = DEFINE_GUID(0x0000030F'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_PSInPlaceFrame* = DEFINE_GUID(0x00000310'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_PSUrlMonProxy* = DEFINE_GUID(0x79EAC9F1'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  CLSID_PublishDropTarget* = DEFINE_GUID(0xCC6EEFFB'u32, 0x43F6, 0x46C5, [0x96'u8, 0x19, 0x51, 0xD5, 0x71, 0x96, 0x7F, 0x7D])
  CLSID_PublishingWizard* = DEFINE_GUID(0x6B33163C'u32, 0x76A5, 0x4B6C, [0xBF'u8, 0x21, 0x45, 0xDE, 0x9C, 0xD5, 0x03, 0xA1])
  CLSID_QueryAssociations* = DEFINE_GUID(0xA07034FD'u32, 0x6CAA, 0x4954, [0xAC'u8, 0x3F, 0x97, 0xA2, 0x72, 0x16, 0xF9, 0x8A])
  CLSID_QueryCancelAutoPlay* = DEFINE_GUID(0x331F1768'u32, 0x05A9, 0x4DDD, [0xB8'u8, 0x6E, 0xDA, 0xE3, 0x4D, 0xDC, 0x99, 0x8A])
  CLSID_RecycleBin* = DEFINE_GUID(0x645FF040'u32, 0x5081, 0x101B, [0x9F'u8, 0x08, 0x00, 0xAA, 0x00, 0x2F, 0x95, 0x4E])
  CLSID_RemoteUnknownPSFactory* = DEFINE_GUID(0x00000340'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_Rendezvous* = DEFINE_GUID(0xF1029E5B'u32, 0xCB5B, 0x11D0, [0x8D'u8, 0x59, 0x00, 0xC0, 0x4F, 0xD9, 0x1A, 0xC0])
  CLSID_ReplicaPointer* = DEFINE_GUID(0xF5D1BADF'u32, 0x4080, 0x11D1, [0xA3'u8, 0xAC, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  CLSID_Request* = DEFINE_GUID(0x6BC096B1'u32, 0x0CE6, 0x11D1, [0xBA'u8, 0xAE, 0x00, 0xC0, 0x4F, 0xC2, 0xE2, 0x0D])
  CLSID_RequestMakeCall* = DEFINE_GUID(0xAC48FFE0'u32, 0xF8C4, 0x11D1, [0xA0'u8, 0x30, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  CLSID_ResProtocol* = DEFINE_GUID(0x3050F3BC'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_RTCClient* = DEFINE_GUID(0x7A42EA29'u32, 0xA2B7, 0x40C4, [0xB0'u8, 0x91, 0xF6, 0xF0, 0x24, 0xAA, 0x89, 0xBE])
  CLSID_Scriptlet* = DEFINE_GUID(0xAE24FDAE'u32, 0x03C6, 0x11D1, [0x8B'u8, 0x76, 0x00, 0x80, 0xC7, 0x44, 0xF3, 0x89])
  CLSID_SdoMachine* = DEFINE_GUID(0xE9218AE7'u32, 0x9E91, 0x11D1, [0xBF'u8, 0x60, 0x00, 0x80, 0xC7, 0x84, 0x6B, 0xC0])
  CLSID_SdpConferenceBlob* = DEFINE_GUID(0x9B2719DD'u32, 0xB696, 0x11D0, [0xA4'u8, 0x89, 0x00, 0xC0, 0x4F, 0xD9, 0x1A, 0xC0])
  CLSID_SearchAssistantOC* = DEFINE_GUID(0xB45FF030'u32, 0x4447, 0x11D2, [0x85'u8, 0xDE, 0x00, 0xC0, 0x4F, 0xA3, 0x5C, 0x89])
  CLSID_SearchCommand* = DEFINE_GUID(0xB005E690'u32, 0x678D, 0x11D1, [0xB7'u8, 0x58, 0x00, 0xA0, 0xC9, 0x05, 0x64, 0xFE])
  CLSID_SecondaryControlChannel* = DEFINE_GUID(0x7B3181A0'u32, 0xC92F, 0x4567, [0xB0'u8, 0xFA, 0xCD, 0x9A, 0x10, 0xEC, 0xD7, 0xD1])
  CLSID_SecurityDescriptor* = DEFINE_GUID(0xB958F73C'u32, 0x9BDD, 0x11D0, [0x85'u8, 0x2C, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  CLSID_SENS* = DEFINE_GUID(0xD597CAFE'u32, 0x5B9F, 0x11D1, [0x8D'u8, 0xD2, 0x00, 0xAA, 0x00, 0x4A, 0xBD, 0x5E])
  CLSID_ServiceManager* = DEFINE_GUID(0xABD0388A'u32, 0xDEC1, 0x44F3, [0x98'u8, 0xE1, 0x8D, 0x5C, 0xC8, 0x0B, 0x97, 0xEB])
  CLSID_SharingApplicationDefinition* = DEFINE_GUID(0x46C166B0'u32, 0x3108, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  CLSID_SharingConfiguration* = DEFINE_GUID(0x46C166B1'u32, 0x3108, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  CLSID_SharingManagerEnumApplicationDe* = DEFINE_GUID(0x46C166AE'u32, 0x3108, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  CLSID_SharingManagerEnumPortMapping* = DEFINE_GUID(0x46C166AF'u32, 0x3108, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  CLSID_SharingManagerEnumPrivateConnec* = DEFINE_GUID(0x46C166AD'u32, 0x3108, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  CLSID_SharingManagerEnumPublicConnect* = DEFINE_GUID(0x46C166AC'u32, 0x3108, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  CLSID_Shell* = DEFINE_GUID(0x13709620'u32, 0xC279, 0x11CE, [0xA4'u8, 0x9E, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  CLSID_ShellBrowserWindow* = DEFINE_GUID(0xC08AFD90'u32, 0xF2A1, 0x11D1, [0x84'u8, 0x55, 0x00, 0xA0, 0xC9, 0x1F, 0x38, 0x80])
  CLSID_ShellDesktop* = DEFINE_GUID(0x00021400'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_ShellDispatchInproc* = DEFINE_GUID(0x0A89A860'u32, 0xD7B1, 0x11CE, [0x83'u8, 0x50, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  CLSID_ShellFolderItem* = DEFINE_GUID(0x2FE352EA'u32, 0xFD1F, 0x11D2, [0xB1'u8, 0xF4, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x3E])
  CLSID_ShellFolderView* = DEFINE_GUID(0x62112AA1'u32, 0xEBE4, 0x11CF, [0xA5'u8, 0xFB, 0x00, 0x20, 0xAF, 0xE7, 0x29, 0x2D])
  CLSID_ShellFolderViewOC* = DEFINE_GUID(0x9BA05971'u32, 0xF6A8, 0x11CF, [0xA4'u8, 0x42, 0x00, 0xA0, 0xC9, 0x0A, 0x8F, 0x39])
  CLSID_ShellFSFolder* = DEFINE_GUID(0xF3364BA0'u32, 0x65B9, 0x11CE, [0xA9'u8, 0xBA, 0x00, 0xAA, 0x00, 0x4A, 0xE8, 0x37])
  CLSID_ShellImageDataFactory* = DEFINE_GUID(0x66E4E4FB'u32, 0xF385, 0x4DD0, [0x8D'u8, 0x74, 0xA2, 0xEF, 0xD1, 0xBC, 0x61, 0x78])
  CLSID_ShellLink* = DEFINE_GUID(0x00021401'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_ShellLinkObject* = DEFINE_GUID(0x11219420'u32, 0x1768, 0x11D1, [0x95'u8, 0xBE, 0x00, 0x60, 0x97, 0x97, 0xEA, 0x4F])
  CLSID_ShellLocalMachine* = DEFINE_GUID(0x60664CAF'u32, 0xAF0D, 0x0005, [0xA3'u8, 0x00, 0x5C, 0x7D, 0x25, 0xFF, 0x22, 0xA0])
  CLSID_ShellLogonEnumUsers* = DEFINE_GUID(0x60664CAF'u32, 0xAF0D, 0x0004, [0xA3'u8, 0x00, 0x5C, 0x7D, 0x25, 0xFF, 0x22, 0xA0])
  CLSID_ShellLogonStatusHost* = DEFINE_GUID(0x60664CAF'u32, 0xAF0D, 0x0007, [0xA3'u8, 0x00, 0x5C, 0x7D, 0x25, 0xFF, 0x22, 0xA0])
  CLSID_ShellLogonUser* = DEFINE_GUID(0x60664CAF'u32, 0xAF0D, 0x0003, [0xA3'u8, 0x00, 0x5C, 0x7D, 0x25, 0xFF, 0x22, 0xA0])
  CLSID_ShellNameSpace* = DEFINE_GUID(0x55136805'u32, 0xB2DE, 0x11D1, [0xB9'u8, 0xF2, 0x00, 0xA0, 0xC9, 0x8B, 0xC5, 0x47])
  CLSID_ShellUIHelper* = DEFINE_GUID(0x64AB4BB7'u32, 0x111E, 0x11D1, [0x8F'u8, 0x79, 0x00, 0xC0, 0x4F, 0xC2, 0xFB, 0xE1])
  CLSID_ShellWindows* = DEFINE_GUID(0x9BA05972'u32, 0xF6A8, 0x11CF, [0xA4'u8, 0x42, 0x00, 0xA0, 0xC9, 0x0A, 0x8F, 0x39])
  CLSID_SizeCategorizer* = DEFINE_GUID(0x55D7B852'u32, 0xF6D1, 0x42F2, [0xAA'u8, 0x75, 0x87, 0x28, 0xA1, 0xB2, 0xD2, 0x64])
  CLSID_SoftDistExt* = DEFINE_GUID(0xB15B8DC0'u32, 0xC7E1, 0x11D0, [0x86'u8, 0x80, 0x00, 0xAA, 0x00, 0xBD, 0xCB, 0x71])
  CLSID_SpeakerphoneTerminal* = DEFINE_GUID(0xAAF578EE'u32, 0xDC70, 0x11D0, [0x8E'u8, 0xD3, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  CLSID_SpeakersTerminal* = DEFINE_GUID(0xAAF578F0'u32, 0xDC70, 0x11D0, [0x8E'u8, 0xD3, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  CLSID_SpeechUIServer* = DEFINE_GUID(0x1443904B'u32, 0x34E4, 0x40F6, [0xB3'u8, 0x0F, 0x6B, 0xEB, 0x81, 0x26, 0x7B, 0x80])
  CLSID_StaticDib* = DEFINE_GUID(0x00000316'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_StaticMetafile* = DEFINE_GUID(0x00000315'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_StdAsyncActManager* = DEFINE_GUID(0x00000329'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_StdComponentCategoriesMgr* = DEFINE_GUID(0x0002E005'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_StdEncodingFilterFac* = DEFINE_GUID(0x54C37CD0'u32, 0xD944, 0x11D0, [0xA9'u8, 0xF4, 0x00, 0x60, 0x97, 0x94, 0x23, 0x11])
  CLSID_StdEvent* = DEFINE_GUID(0x0000032B'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_StdFont* = DEFINE_GUID(0x0BE35203'u32, 0x8F91, 0x11CE, [0x9D'u8, 0xE3, 0x00, 0xAA, 0x00, 0x4B, 0xB8, 0x51])
  CLSID_StdGlobalInterfaceTable* = DEFINE_GUID(0x00000323'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_StdHlink* = DEFINE_GUID(0x79EAC9D0'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  CLSID_StdHlinkBrowseContext* = DEFINE_GUID(0x79EAC9D1'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  CLSID_StdMarshal* = DEFINE_GUID(0x00000017'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_StdNotificationMgr* = DEFINE_GUID(0xC733E4AF'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_StdPicture* = DEFINE_GUID(0x0BE35204'u32, 0x8F91, 0x11CE, [0x9D'u8, 0xE3, 0x00, 0xAA, 0x00, 0x4B, 0xB8, 0x51])
  CLSID_StdURLMoniker* = DEFINE_GUID(0x79EAC9E0'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  CLSID_StdURLProtocol* = DEFINE_GUID(0x79EAC9E1'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  CLSID_StgFolder* = DEFINE_GUID(0xE773F1AF'u32, 0x3A65, 0x4866, [0x85'u8, 0x7D, 0x84, 0x6F, 0xC9, 0xC4, 0x59, 0x8A])
  CLSID_StockColorPage* = DEFINE_GUID(0x7EBDAAE1'u32, 0x8120, 0x11CF, [0x89'u8, 0x9F, 0x00, 0xAA, 0x00, 0x68, 0x8B, 0x10])
  CLSID_StockFontPage* = DEFINE_GUID(0x7EBDAAE0'u32, 0x8120, 0x11CF, [0x89'u8, 0x9F, 0x00, 0xAA, 0x00, 0x68, 0x8B, 0x10])
  CLSID_StockPicturePage* = DEFINE_GUID(0x7EBDAAE2'u32, 0x8120, 0x11CF, [0x89'u8, 0x9F, 0x00, 0xAA, 0x00, 0x68, 0x8B, 0x10])
  CLSID_SubscriptionMgr* = DEFINE_GUID(0xABBE31D0'u32, 0x6DAE, 0x11D0, [0xBE'u8, 0xCA, 0x00, 0xC0, 0x4F, 0xD9, 0x40, 0xBE])
  CLSID_SubscriptionThrottler* = DEFINE_GUID(0x1E9B00E5'u32, 0x9846, 0x11D1, [0xA1'u8, 0xEE, 0x00, 0xC0, 0x4F, 0xC2, 0xFB, 0xE1])
  CLSID_SWbemDateTime* = DEFINE_GUID(0x47DFBE54'u32, 0xCF76, 0x11D3, [0xB3'u8, 0x8F, 0x00, 0x10, 0x5A, 0x1F, 0x47, 0x3A])
  CLSID_SWbemEventSource* = DEFINE_GUID(0x04B83D58'u32, 0x21AE, 0x11D2, [0x8B'u8, 0x33, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  CLSID_SWbemLastError* = DEFINE_GUID(0xC2FEEEAC'u32, 0xCFCD, 0x11D1, [0x8B'u8, 0x05, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  CLSID_SWbemLocator* = DEFINE_GUID(0x76A64158'u32, 0xCB41, 0x11D1, [0x8B'u8, 0x02, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  CLSID_SWbemMethod* = DEFINE_GUID(0x04B83D5B'u32, 0x21AE, 0x11D2, [0x8B'u8, 0x33, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  CLSID_SWbemMethodSet* = DEFINE_GUID(0x04B83D5A'u32, 0x21AE, 0x11D2, [0x8B'u8, 0x33, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  CLSID_SWbemNamedValue* = DEFINE_GUID(0x04B83D60'u32, 0x21AE, 0x11D2, [0x8B'u8, 0x33, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  CLSID_SWbemNamedValueSet* = DEFINE_GUID(0x9AED384E'u32, 0xCE8B, 0x11D1, [0x8B'u8, 0x05, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  CLSID_SWbemObject* = DEFINE_GUID(0x04B83D62'u32, 0x21AE, 0x11D2, [0x8B'u8, 0x33, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  CLSID_SWbemObjectEx* = DEFINE_GUID(0xD6BDAFB2'u32, 0x9435, 0x491F, [0xBB'u8, 0x87, 0x6A, 0xA0, 0xF0, 0xBC, 0x31, 0xA2])
  CLSID_SWbemObjectPath* = DEFINE_GUID(0x5791BC26'u32, 0xCE9C, 0x11D1, [0x97'u8, 0xBF, 0x00, 0x00, 0xF8, 0x1E, 0x84, 0x9C])
  CLSID_SWbemObjectSet* = DEFINE_GUID(0x04B83D61'u32, 0x21AE, 0x11D2, [0x8B'u8, 0x33, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  CLSID_SWbemPrivilege* = DEFINE_GUID(0x26EE67BC'u32, 0x5804, 0x11D2, [0x8B'u8, 0x4A, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  CLSID_SWbemPrivilegeSet* = DEFINE_GUID(0x26EE67BE'u32, 0x5804, 0x11D2, [0x8B'u8, 0x4A, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  CLSID_SWbemProperty* = DEFINE_GUID(0x04B83D5D'u32, 0x21AE, 0x11D2, [0x8B'u8, 0x33, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  CLSID_SWbemPropertySet* = DEFINE_GUID(0x04B83D5C'u32, 0x21AE, 0x11D2, [0x8B'u8, 0x33, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  CLSID_SWbemQualifier* = DEFINE_GUID(0x04B83D5F'u32, 0x21AE, 0x11D2, [0x8B'u8, 0x33, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  CLSID_SWbemQualifierSet* = DEFINE_GUID(0x04B83D5E'u32, 0x21AE, 0x11D2, [0x8B'u8, 0x33, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  CLSID_SWbemRefreshableItem* = DEFINE_GUID(0x8C6854BC'u32, 0xDE4B, 0x11D3, [0xB3'u8, 0x90, 0x00, 0x10, 0x5A, 0x1F, 0x47, 0x3A])
  CLSID_SWbemRefresher* = DEFINE_GUID(0xD269BF5C'u32, 0xD9C1, 0x11D3, [0xB3'u8, 0x8F, 0x00, 0x10, 0x5A, 0x1F, 0x47, 0x3A])
  CLSID_SWbemSecurity* = DEFINE_GUID(0xB54D66E9'u32, 0x2287, 0x11D2, [0x8B'u8, 0x33, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  CLSID_SWbemServices* = DEFINE_GUID(0x04B83D63'u32, 0x21AE, 0x11D2, [0x8B'u8, 0x33, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  CLSID_SWbemServicesEx* = DEFINE_GUID(0x62E522DC'u32, 0x8CF3, 0x40A8, [0x8B'u8, 0x2E, 0x37, 0xD5, 0x95, 0x65, 0x1E, 0x40])
  CLSID_SWbemSink* = DEFINE_GUID(0x75718C9A'u32, 0xF029, 0x11D1, [0xA1'u8, 0xAC, 0x00, 0xC0, 0x4F, 0xB6, 0xC2, 0x23])
  CLSID_SynchronizeContainer* = DEFINE_GUID(0x0000032D'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  CLSID_SyncMgr* = DEFINE_GUID(0x6295DF27'u32, 0x35EE, 0x11D1, [0x87'u8, 0x07, 0x00, 0xC0, 0x4F, 0xD9, 0x33, 0x27])
  CLSID_TAPI* = DEFINE_GUID(0x21D6D48E'u32, 0xA88B, 0x11D0, [0x83'u8, 0xDD, 0x00, 0xAA, 0x00, 0x3C, 0xCA, 0xBD])
  CLSID_TaskbarList* = DEFINE_GUID(0x56FDF344'u32, 0xFD6D, 0x11D0, [0x95'u8, 0x8A, 0x00, 0x60, 0x97, 0xC9, 0xA0, 0x90])
  CLSID_TaskManager* = DEFINE_GUID(0xC0F615A7'u32, 0xF874, 0x4521, [0x87'u8, 0x91, 0xED, 0x3B, 0x84, 0x01, 0x7E, 0xF7])
  CLSID_TerminalManager* = DEFINE_GUID(0x7170F2E0'u32, 0x9BE3, 0x11D0, [0xA0'u8, 0x09, 0x00, 0xAA, 0x00, 0xB6, 0x05, 0xA4])
  CLSID_THREAD_BROADCAST* = DEFINE_GUID(0xD34F1812'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_ThreadDialogProcParam* = DEFINE_GUID(0x3050F5EB'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  CLSID_ThumbnailFCNHandler* = DEFINE_GUID(0xCEFC65D8'u32, 0x66D8, 0x11D1, [0x8D'u8, 0x8C, 0x00, 0x00, 0xF8, 0x04, 0xB0, 0x57])
  CLSID_ThumbnailUpdater* = DEFINE_GUID(0xA3C63918'u32, 0x889D, 0x11D1, [0x83'u8, 0xE9, 0x00, 0xC0, 0x4F, 0xC2, 0xC6, 0xD4])
  CLSID_TIME* = DEFINE_GUID(0xE32EF57B'u32, 0x7FDE, 0x4765, [0x9B'u8, 0xC5, 0xA1, 0xBA, 0x97, 0x05, 0xC4, 0x4E])
  CLSID_TIMEAnimation* = DEFINE_GUID(0xF99D135A'u32, 0xC07C, 0x449E, [0x96'u8, 0x5C, 0x7D, 0xBB, 0x7C, 0x55, 0x4A, 0x51])
  CLSID_TimeCategorizer* = DEFINE_GUID(0x3BB4118F'u32, 0xDDFD, 0x4D30, [0xA3'u8, 0x48, 0x9F, 0xB5, 0xD6, 0xBF, 0x1A, 0xFE])
  CLSID_TIMEColorAnimation* = DEFINE_GUID(0x62F75052'u32, 0xF3EC, 0x4A64, [0x84'u8, 0xFB, 0xAB, 0x18, 0xE0, 0x74, 0x6E, 0xD8])
  CLSID_TIMEFactory* = DEFINE_GUID(0x17237A20'u32, 0x3ADB, 0x48EC, [0xB1'u8, 0x82, 0x35, 0x29, 0x1F, 0x11, 0x57, 0x90])
  CLSID_TIMEFilterAnimation* = DEFINE_GUID(0xC54515D0'u32, 0xF2E5, 0x4BDD, [0xAA'u8, 0x86, 0x1E, 0x4F, 0x23, 0xE4, 0x80, 0xE7])
  CLSID_TIMEMotionAnimation* = DEFINE_GUID(0x0019A09D'u32, 0x1A81, 0x41C5, [0x89'u8, 0xEC, 0xD9, 0xE7, 0x37, 0x81, 0x13, 0x03])
  CLSID_TIMESetAnimation* = DEFINE_GUID(0xBA91CE53'u32, 0xBAEB, 0x4F05, [0x86'u8, 0x1C, 0x0A, 0x2A, 0x09, 0x34, 0xF8, 0x2E])
  CLSID_Timestamp* = DEFINE_GUID(0xB2BED2EB'u32, 0x4080, 0x11D1, [0xA3'u8, 0xAC, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  CLSID_ToolbarExtButtons* = DEFINE_GUID(0x2CE4B5D8'u32, 0xA28F, 0x11D2, [0x86'u8, 0xC5, 0x00, 0xC0, 0x4F, 0x8E, 0xEA, 0x99])
  CLSID_TrackFile* = DEFINE_GUID(0x8790C947'u32, 0xA30B, 0x11D0, [0x8C'u8, 0xAB, 0x00, 0xC0, 0x4F, 0xD9, 0x0F, 0x85])
  CLSID_TrkForceOwnership* = DEFINE_GUID(0xA2531F45'u32, 0xC67D, 0x11D0, [0x8C'u8, 0xB1, 0x00, 0xC0, 0x4F, 0xD9, 0x0F, 0x85])
  CLSID_TrkRestoreNotify* = DEFINE_GUID(0xD0056F6C'u32, 0xE2A0, 0x11D0, [0xB1'u8, 0xC2, 0x00, 0xC0, 0x4F, 0xB9, 0x38, 0x6D])
  CLSID_TrkRestoreParser* = DEFINE_GUID(0x755939E4'u32, 0xE381, 0x11D0, [0xB1'u8, 0xC5, 0x00, 0xC0, 0x4F, 0xB9, 0x38, 0x6D])
  CLSID_TypedName* = DEFINE_GUID(0xB33143CB'u32, 0x4080, 0x11D1, [0xA3'u8, 0xAC, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  CLSID_UmiLDAPQueryObject* = DEFINE_GUID(0xCD5D4D76'u32, 0xA818, 0x4F95, [0xB9'u8, 0x58, 0x79, 0x70, 0xFD, 0x94, 0x12, 0xCA])
  CLSID_UnsecuredApartment* = DEFINE_GUID(0x49BD2028'u32, 0x1523, 0x11D1, [0xAD'u8, 0x79, 0x00, 0xC0, 0x4F, 0xD8, 0xFD, 0xFF])
  CLSID_UPnPDescriptionDocument* = DEFINE_GUID(0x1D8A9B47'u32, 0x3A28, 0x4CE2, [0x8A'u8, 0x4B, 0xBD, 0x34, 0xE4, 0x5B, 0xCE, 0xEB])
  CLSID_UPnPDevice* = DEFINE_GUID(0xA32552C5'u32, 0xBA61, 0x457A, [0xB5'u8, 0x9A, 0xA2, 0x56, 0x1E, 0x12, 0x5E, 0x33])
  CLSID_UPnPDeviceFinder* = DEFINE_GUID(0xE2085F28'u32, 0xFEB7, 0x404A, [0xB8'u8, 0xE7, 0xE6, 0x59, 0xBD, 0xEA, 0xAA, 0x02])
  CLSID_UPnPDeviceHostICSSupport* = DEFINE_GUID(0x797A9BB1'u32, 0x9E49, 0x4E63, [0xAF'u8, 0xE1, 0x1B, 0x45, 0xB9, 0xDC, 0x81, 0x62])
  CLSID_UPnPDeviceHostSetup* = DEFINE_GUID(0xB4609411'u32, 0xC81C, 0x4CCE, [0x8C'u8, 0x76, 0xC6, 0xB5, 0x0C, 0x94, 0x02, 0xC6])
  CLSID_UPnPDevices* = DEFINE_GUID(0xB9E84FFD'u32, 0xAD3C, 0x40A4, [0xB8'u8, 0x35, 0x08, 0x82, 0xEB, 0xCB, 0xAA, 0xA8])
  CLSID_UPnPNAT* = DEFINE_GUID(0xAE1E00AA'u32, 0x3FD5, 0x403C, [0x8A'u8, 0x27, 0x2B, 0xBD, 0xC3, 0x0C, 0xD0, 0xE1])
  CLSID_UPnPRegistrar* = DEFINE_GUID(0x204810B9'u32, 0x73B2, 0x11D4, [0xBF'u8, 0x42, 0x00, 0xB0, 0xD0, 0x11, 0x8B, 0x56])
  CLSID_UPnPService* = DEFINE_GUID(0xC624BA95'u32, 0xFBCB, 0x4409, [0x8C'u8, 0x03, 0x8C, 0xCE, 0xEC, 0x53, 0x3E, 0xF1])
  CLSID_UPnPServices* = DEFINE_GUID(0xC0BC4B4A'u32, 0xA406, 0x4EFC, [0x93'u8, 0x2F, 0xB8, 0x54, 0x6B, 0x81, 0x00, 0xCC])
  CLSID_UrlMkBindCtx* = DEFINE_GUID(0x79EAC9F2'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  CLSID_UserEventTimer* = DEFINE_GUID(0x864A1288'u32, 0x354C, 0x4D19, [0x9D'u8, 0x68, 0xC2, 0x74, 0x2B, 0xB1, 0x49, 0x97])
  CLSID_UserEventTimerCallback* = DEFINE_GUID(0x15FFFD13'u32, 0x5140, 0x41B8, [0xB8'u8, 0x9A, 0xC8, 0xD5, 0x75, 0x9C, 0xD2, 0xB2])
  CLSID_UserNotification* = DEFINE_GUID(0x0010890E'u32, 0x8789, 0x413C, [0xAD'u8, 0xBC, 0x48, 0xF5, 0xB5, 0x11, 0xB3, 0xAF])
  CLSID_VideoInputTerminal* = DEFINE_GUID(0xAAF578EC'u32, 0xDC70, 0x11D0, [0x8E'u8, 0xD3, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  CLSID_VideoWindowTerm* = DEFINE_GUID(0xF7438990'u32, 0xD6EB, 0x11D0, [0x82'u8, 0xA6, 0x00, 0xAA, 0x00, 0xB5, 0xCA, 0x1B])
  CLSID_VirusScan* = DEFINE_GUID(0xE88E5DE0'u32, 0xBD3E, 0x11CF, [0xAA'u8, 0xFA, 0x00, 0xAA, 0x00, 0xB6, 0x01, 0x5C])
  CLSID_WbemAdministrativeLocator* = DEFINE_GUID(0xCB8555CC'u32, 0x9128, 0x11D1, [0xAD'u8, 0x9B, 0x00, 0xC0, 0x4F, 0xD8, 0xFD, 0xFF])
  CLSID_WbemAuthenticatedLocator* = DEFINE_GUID(0xCD184336'u32, 0x9128, 0x11D1, [0xAD'u8, 0x9B, 0x00, 0xC0, 0x4F, 0xD8, 0xFD, 0xFF])
  CLSID_WbemBackupRestore* = DEFINE_GUID(0xC49E32C6'u32, 0xBC8B, 0x11D2, [0x85'u8, 0xD4, 0x00, 0x10, 0x5A, 0x1F, 0x83, 0x04])
  CLSID_WbemClassObject* = DEFINE_GUID(0x9A653086'u32, 0x174F, 0x11D2, [0xB5'u8, 0xF9, 0x00, 0x10, 0x4B, 0x70, 0x3E, 0xFD])
  CLSID_WbemContext* = DEFINE_GUID(0x674B6698'u32, 0xEE92, 0x11D0, [0xAD'u8, 0x71, 0x00, 0xC0, 0x4F, 0xD8, 0xFD, 0xFF])
  CLSID_WbemDCOMTransport* = DEFINE_GUID(0xF7CE2E13'u32, 0x8C90, 0x11D1, [0x9E'u8, 0x7B, 0x00, 0xC0, 0x4F, 0xC3, 0x24, 0xA8])
  CLSID_WbemDecoupledBasicEventProvide* = DEFINE_GUID(0xF5F75737'u32, 0x2843, 0x4F22, [0x93'u8, 0x3D, 0xC7, 0x6A, 0x97, 0xCD, 0xA6, 0x2F])
  CLSID_WbemDecoupledRegistrar* = DEFINE_GUID(0x4CFC7932'u32, 0x0F9D, 0x4BEF, [0x9C'u8, 0x32, 0x8E, 0xA2, 0xA6, 0xB5, 0x6F, 0xCB])
  CLSID_WbemDefPath* = DEFINE_GUID(0xCF4CC405'u32, 0xE2C5, 0x4DDD, [0xB3'u8, 0xCE, 0x5E, 0x75, 0x82, 0xD8, 0xC9, 0xFA])
  CLSID_WbemLevel1Login* = DEFINE_GUID(0x8BC3F05E'u32, 0xD86B, 0x11D0, [0xA0'u8, 0x75, 0x00, 0xC0, 0x4F, 0xB6, 0x88, 0x20])
  CLSID_WbemLocalAddrRes* = DEFINE_GUID(0xA1044801'u32, 0x8F7E, 0x11D1, [0x9E'u8, 0x7C, 0x00, 0xC0, 0x4F, 0xC3, 0x24, 0xA8])
  CLSID_WbemLocator* = DEFINE_GUID(0x4590F811'u32, 0x1D3A, 0x11D0, [0x89'u8, 0x1F, 0x00, 0xAA, 0x00, 0x4B, 0x2E, 0x24])
  CLSID_WbemObjectTextSrc* = DEFINE_GUID(0x8D1C559D'u32, 0x84F0, 0x4BB3, [0xA7'u8, 0xD5, 0x56, 0xA7, 0x43, 0x5A, 0x9B, 0xA6])
  CLSID_WbemQuery* = DEFINE_GUID(0xEAC8A024'u32, 0x21E2, 0x4523, [0xAD'u8, 0x73, 0xA7, 0x1A, 0x0A, 0xA2, 0xF5, 0x6A])
  CLSID_WbemRefresher* = DEFINE_GUID(0xC71566F2'u32, 0x561E, 0x11D1, [0xAD'u8, 0x87, 0x00, 0xC0, 0x4F, 0xD8, 0xFD, 0xFF])
  CLSID_WbemStatusCodeText* = DEFINE_GUID(0xEB87E1BD'u32, 0x3233, 0x11D2, [0xAE'u8, 0xC9, 0x00, 0xC0, 0x4F, 0xB6, 0x88, 0x20])
  CLSID_WbemUnauthenticatedLocator* = DEFINE_GUID(0x443E7B79'u32, 0xDE31, 0x11D2, [0xB3'u8, 0x40, 0x00, 0x10, 0x4B, 0xCC, 0x4B, 0x4A])
  CLSID_WbemUninitializedClassObject* = DEFINE_GUID(0x7A0227F6'u32, 0x7108, 0x11D1, [0xAD'u8, 0x90, 0x00, 0xC0, 0x4F, 0xD8, 0xFD, 0xFF])
  CLSID_WebBrowser* = DEFINE_GUID(0x8856F961'u32, 0x340A, 0x11D0, [0xA9'u8, 0x6B, 0x00, 0xC0, 0x4F, 0xD7, 0x05, 0xA2])
  CLSID_WebBrowser_V1* = DEFINE_GUID(0xEAB22AC3'u32, 0x30C1, 0x11CF, [0xA7'u8, 0xEB, 0x00, 0x00, 0xC0, 0x5B, 0xAE, 0x0B])
  CLSID_WebCheck* = DEFINE_GUID(0xE6FB5E20'u32, 0xDE35, 0x11CF, [0x9C'u8, 0x87, 0x00, 0xAA, 0x00, 0x51, 0x27, 0xED])
  CLSID_WebCheckDefaultProcess* = DEFINE_GUID(0xC733E4B0'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  CLSID_WebCheckOfflineSync* = DEFINE_GUID(0x7FC0B86E'u32, 0x5FA7, 0x11D1, [0xBC'u8, 0x7C, 0x00, 0xC0, 0x4F, 0xD9, 0x29, 0xDB])
  CLSID_WebCrawlerAgent* = DEFINE_GUID(0x08165EA0'u32, 0xE946, 0x11CF, [0x9C'u8, 0x87, 0x00, 0xAA, 0x00, 0x51, 0x27, 0xED])
  CLSID_WebViewFolderContents* = DEFINE_GUID(0x1820FED0'u32, 0x473E, 0x11D0, [0xA9'u8, 0x6C, 0x00, 0xC0, 0x4F, 0xD7, 0x05, 0xA2])
  CLSID_WebWizardHost* = DEFINE_GUID(0xC827F149'u32, 0x55C1, 0x4D28, [0x93'u8, 0x5E, 0x57, 0xE4, 0x7C, 0xAE, 0xD9, 0x73])
  CLSID_wfolders* = DEFINE_GUID(0xBAE31F9A'u32, 0x1B81, 0x11D2, [0xA9'u8, 0x7A, 0x00, 0xC0, 0x4F, 0x8E, 0xCB, 0x02])
  CLSID_WinNTConnectionObject* = DEFINE_GUID(0x7992C6EB'u32, 0xD142, 0x4332, [0x83'u8, 0x1E, 0x31, 0x54, 0xC5, 0x0A, 0x83, 0x16])
  CLSID_WinNTObject* = DEFINE_GUID(0xB8324185'u32, 0x4050, 0x4220, [0x98'u8, 0x0A, 0xAB, 0x14, 0x62, 0x3E, 0x06, 0x3A])
  CLSID_WinNTSystemInfo* = DEFINE_GUID(0x66182EC4'u32, 0xAFD1, 0x11D2, [0x9C'u8, 0xB9, 0x00, 0x00, 0xF8, 0x7A, 0x36, 0x9E])
  CLSID_WMIExtension* = DEFINE_GUID(0xF0975AFE'u32, 0x5C7F, 0x11D2, [0x8B'u8, 0x74, 0x00, 0x10, 0x4B, 0x2A, 0xFB, 0x41])
  CLSID_XMLDocument* = DEFINE_GUID(0xCFC399AF'u32, 0xD876, 0x11D0, [0x9C'u8, 0x10, 0x00, 0xC0, 0x4F, 0xC9, 0x9C, 0x8E])
  CLSID_XMLDSOControl* = DEFINE_GUID(0x550DDA30'u32, 0x0541, 0x11D2, [0x9C'u8, 0xA9, 0x00, 0x60, 0xB0, 0xEC, 0x3D, 0x39])
  CLSID_XMLHTTPRequest* = DEFINE_GUID(0xED8C108E'u32, 0x4349, 0x11D2, [0x91'u8, 0xA4, 0x00, 0xC0, 0x4F, 0x79, 0x69, 0xE8])
  CLSID_XMLParser* = DEFINE_GUID(0xD2423620'u32, 0x51A0, 0x11D2, [0x9C'u8, 0xAF, 0x00, 0x60, 0xB0, 0xEC, 0x3D, 0x39])
  DB_PROPERTY_AUTOMATICUPDATE* = DEFINE_GUID(0xC8B52209'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DB_PROPERTY_BTREE* = DEFINE_GUID(0xC8B52201'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DB_PROPERTY_CHECK_OPTION* = DEFINE_GUID(0xC8B5220B'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DB_PROPERTY_CLUSTERED* = DEFINE_GUID(0xC8B521FF'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DB_PROPERTY_CONSTRAINT_CHECK_DEFERRE* = DEFINE_GUID(0xC8B521F0'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DB_PROPERTY_DISALLOWNULL* = DEFINE_GUID(0xC8B52205'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DB_PROPERTY_DROP_CASCADE* = DEFINE_GUID(0xC8B521F3'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DB_PROPERTY_EXPLICITUPDATE* = DEFINE_GUID(0xC8B5220A'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DB_PROPERTY_FILLFACTOR* = DEFINE_GUID(0xC8B52203'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DB_PROPERTY_HASH* = DEFINE_GUID(0xC8B52202'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DB_PROPERTY_IGNOREANYNULL* = DEFINE_GUID(0xC8B52207'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DB_PROPERTY_IGNORENULL* = DEFINE_GUID(0xC8B52206'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DB_PROPERTY_INITIALSIZE* = DEFINE_GUID(0xC8B52204'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DB_PROPERTY_NONCLUSTERED* = DEFINE_GUID(0xC8B52200'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DB_PROPERTY_ON_COMMIT_PRESERVE_ROWS* = DEFINE_GUID(0xC8B52230'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DB_PROPERTY_PRIMARY* = DEFINE_GUID(0xC8B521FC'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DB_PROPERTY_SORTBOOKMARKS* = DEFINE_GUID(0xC8B52208'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DB_PROPERTY_UNIQUE* = DEFINE_GUID(0xC8B521F5'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBCOL_SELFCOLUMNS* = DEFINE_GUID(0xC8B52231'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBCOL_SPECIALCOL* = DEFINE_GUID(0xC8B52232'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBGUID_COMMAND* = DEFINE_GUID(0xC8B522F8'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBGUID_CONTAINEROBJECT* = DEFINE_GUID(0xC8B522FB'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBGUID_DBSQL* = DEFINE_GUID(0xC8B521FB'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBGUID_DEFAULT* = DEFINE_GUID(0xC8B521FB'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBGUID_DSO* = DEFINE_GUID(0xC8B522F4'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBGUID_HISTOGRAM_ROWSET* = DEFINE_GUID(0xC8B52300'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBGUID_LDAPDialect* = DEFINE_GUID(0xEFF65380'u32, 0x9C98, 0x11CF, [0xB9'u8, 0x63, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBGUID_LIKE_DOS* = DEFINE_GUID(0xC8B521F7'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBGUID_LIKE_MAPI* = DEFINE_GUID(0xC8B521F9'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBGUID_LIKE_OFS* = DEFINE_GUID(0xC8B521F8'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBGUID_LIKE_SQL* = DEFINE_GUID(0xC8B521F6'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBGUID_MDX* = DEFINE_GUID(0xA07CCCD0'u32, 0x8148, 0x11D0, [0x87'u8, 0xBB, 0x00, 0xC0, 0x4F, 0xC3, 0x39, 0x42])
  DBGUID_ROW* = DEFINE_GUID(0xC8B522F7'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBGUID_ROWSET* = DEFINE_GUID(0xC8B522F6'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBGUID_SESSION* = DEFINE_GUID(0xC8B522F5'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBGUID_SQL* = DEFINE_GUID(0xC8B522D7'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBGUID_STREAM* = DEFINE_GUID(0xC8B522F9'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBOBJECT_CHARACTERSET* = DEFINE_GUID(0xC8B522ED'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBOBJECT_COLLATION* = DEFINE_GUID(0xC8B522EA'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBOBJECT_COLUMN* = DEFINE_GUID(0xC8B522E4'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBOBJECT_DATABASE* = DEFINE_GUID(0xC8B522E5'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBOBJECT_DOMAIN* = DEFINE_GUID(0xC8B522E9'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBOBJECT_PROCEDURE* = DEFINE_GUID(0xC8B522E6'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBOBJECT_SCHEMA* = DEFINE_GUID(0xC8B522E8'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBOBJECT_SCHEMAROWSET* = DEFINE_GUID(0xC8B522EC'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBOBJECT_TABLE* = DEFINE_GUID(0xC8B522E2'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBOBJECT_TRANSLATION* = DEFINE_GUID(0xC8B522EE'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBOBJECT_TRUSTEE* = DEFINE_GUID(0xC8B522EB'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBOBJECT_VIEW* = DEFINE_GUID(0xC8B522E7'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_ADSIBIND* = DEFINE_GUID(0x6DA66DC8'u32, 0xB7E8, 0x11D2, [0x9D'u8, 0x60, 0x00, 0xC0, 0x4F, 0x68, 0x93, 0x45])
  DBPROPSET_ADSISEARCH* = DEFINE_GUID(0xCFCFC928'u32, 0x9AA2, 0x11D0, [0xA7'u8, 0x9A, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0xA8])
  DBPROPSET_COLUMN* = DEFINE_GUID(0xC8B522B9'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_COLUMNALL* = DEFINE_GUID(0xC8B522F0'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_CONSTRAINTALL* = DEFINE_GUID(0xC8B522FA'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_DATASOURCE* = DEFINE_GUID(0xC8B522BA'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_DATASOURCEALL* = DEFINE_GUID(0xC8B522C0'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_DATASOURCEINFO* = DEFINE_GUID(0xC8B522BB'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_DATASOURCEINFOALL* = DEFINE_GUID(0xC8B522C1'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_DBINIT* = DEFINE_GUID(0xC8B522BC'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_DBINITALL* = DEFINE_GUID(0xC8B522CA'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_INDEX* = DEFINE_GUID(0xC8B522BD'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_INDEXALL* = DEFINE_GUID(0xC8B522F1'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_PROPERTIESINERROR* = DEFINE_GUID(0xC8B522D4'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_ROWSET* = DEFINE_GUID(0xC8B522BE'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_ROWSETALL* = DEFINE_GUID(0xC8B522C2'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_SESSION* = DEFINE_GUID(0xC8B522C6'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_SESSIONALL* = DEFINE_GUID(0xC8B522C7'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_STREAM* = DEFINE_GUID(0xC8B522FD'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_STREAMALL* = DEFINE_GUID(0xC8B522FE'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_TABLE* = DEFINE_GUID(0xC8B522BF'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_TABLEALL* = DEFINE_GUID(0xC8B522F2'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_TRUSTEE* = DEFINE_GUID(0xC8B522E1'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_TRUSTEEALL* = DEFINE_GUID(0xC8B522F3'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_VIEW* = DEFINE_GUID(0xC8B522DF'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBPROPSET_VIEWALL* = DEFINE_GUID(0xC8B522FC'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_ASSERTIONS* = DEFINE_GUID(0xC8B52210'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_CATALOGS* = DEFINE_GUID(0xC8B52211'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_CHARACTER_SETS* = DEFINE_GUID(0xC8B52212'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_CHECK_CONSTRAINTS* = DEFINE_GUID(0xC8B52215'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_CHECK_CONSTRAINTS_BY_TABLE* = DEFINE_GUID(0xC8B52301'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_COLLATIONS* = DEFINE_GUID(0xC8B52213'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_COLUMN_DOMAIN_USAGE* = DEFINE_GUID(0xC8B5221B'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_COLUMN_PRIVILEGES* = DEFINE_GUID(0xC8B52221'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_COLUMNS* = DEFINE_GUID(0xC8B52214'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_CONSTRAINT_COLUMN_USAGE* = DEFINE_GUID(0xC8B52216'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_CONSTRAINT_TABLE_USAGE* = DEFINE_GUID(0xC8B52217'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_FOREIGN_KEYS* = DEFINE_GUID(0xC8B522C4'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_INDEXES* = DEFINE_GUID(0xC8B5221E'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_KEY_COLUMN_USAGE* = DEFINE_GUID(0xC8B52218'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_PRIMARY_KEYS* = DEFINE_GUID(0xC8B522C5'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_PROCEDURE_COLUMNS* = DEFINE_GUID(0xC8B522C9'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_PROCEDURE_PARAMETERS* = DEFINE_GUID(0xC8B522B8'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_PROCEDURES* = DEFINE_GUID(0xC8B52224'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_PROVIDER_TYPES* = DEFINE_GUID(0xC8B5222C'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_REFERENTIAL_CONSTRAINTS* = DEFINE_GUID(0xC8B52219'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_SCHEMATA* = DEFINE_GUID(0xC8B52225'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_SQL_LANGUAGES* = DEFINE_GUID(0xC8B52226'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_STATISTICS* = DEFINE_GUID(0xC8B52227'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_TABLE_CONSTRAINTS* = DEFINE_GUID(0xC8B5221A'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_TABLE_PRIVILEGES* = DEFINE_GUID(0xC8B52222'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_TABLE_STATISTICS* = DEFINE_GUID(0xC8B522FF'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_TABLES* = DEFINE_GUID(0xC8B52229'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_TABLES_INFO* = DEFINE_GUID(0xC8B522E0'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_TRANSLATIONS* = DEFINE_GUID(0xC8B5222A'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_TRUSTEE* = DEFINE_GUID(0xC8B522EF'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_USAGE_PRIVILEGES* = DEFINE_GUID(0xC8B52223'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_VIEW_COLUMN_USAGE* = DEFINE_GUID(0xC8B5222E'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_VIEW_TABLE_USAGE* = DEFINE_GUID(0xC8B5222F'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DBSCHEMA_VIEWS* = DEFINE_GUID(0xC8B5222D'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  DDVPTYPE_BROOKTREE* = DEFINE_GUID(0x1352A560'u32, 0xDA61, 0x11CF, [0x9B'u8, 0x06, 0x00, 0xA0, 0xC9, 0x03, 0xA3, 0xB8])
  DDVPTYPE_CCIR656* = DEFINE_GUID(0xFCA326A0'u32, 0xDA60, 0x11CF, [0x9B'u8, 0x06, 0x00, 0xA0, 0xC9, 0x03, 0xA3, 0xB8])
  DDVPTYPE_E_HREFH_VREFL* = DEFINE_GUID(0x92783220'u32, 0xDA60, 0x11CF, [0x9B'u8, 0x06, 0x00, 0xA0, 0xC9, 0x03, 0xA3, 0xB8])
  DDVPTYPE_E_HREFL_VREFL* = DEFINE_GUID(0xE09C77E0'u32, 0xDA60, 0x11CF, [0x9B'u8, 0x06, 0x00, 0xA0, 0xC9, 0x03, 0xA3, 0xB8])
  DDVPTYPE_PHILIPS* = DEFINE_GUID(0x332CF160'u32, 0xDA61, 0x11CF, [0x9B'u8, 0x06, 0x00, 0xA0, 0xC9, 0x03, 0xA3, 0xB8])
  DIID_SearchAssistantEvents* = DEFINE_GUID(0x1611FDDA'u32, 0x445B, 0x11D2, [0x85'u8, 0xDE, 0x00, 0xC0, 0x4F, 0xA3, 0x5C, 0x89])
  DIID_DispCEventObj* = DEFINE_GUID(0x3050F558'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispDOMChildrenCollection* = DEFINE_GUID(0x3050F577'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTCAttachBehavior* = DEFINE_GUID(0x3050F583'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTCDefaultDispatch* = DEFINE_GUID(0x3050F573'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTCDescBehavior* = DEFINE_GUID(0x3050F57E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTCEventBehavior* = DEFINE_GUID(0x3050F574'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTCMethodBehavior* = DEFINE_GUID(0x3050F587'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTCPropertyBehavior* = DEFINE_GUID(0x3050F57F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLAnchorElement* = DEFINE_GUID(0x3050F502'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLAppBehavior* = DEFINE_GUID(0x3050F57C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLAreaElement* = DEFINE_GUID(0x3050F503'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLAreasCollection* = DEFINE_GUID(0x3050F56A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLAttributeCollection* = DEFINE_GUID(0x3050F56C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLBaseElement* = DEFINE_GUID(0x3050F518'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLBaseFontElement* = DEFINE_GUID(0x3050F504'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLBGsound* = DEFINE_GUID(0x3050F53C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLBlockElement* = DEFINE_GUID(0x3050F506'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLBody* = DEFINE_GUID(0x3050F507'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLBRElement* = DEFINE_GUID(0x3050F53A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLButtonElement* = DEFINE_GUID(0x3050F51F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLCommentElement* = DEFINE_GUID(0x3050F50A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLCurrentStyle* = DEFINE_GUID(0x3050F557'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLDDElement* = DEFINE_GUID(0x3050F50B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLDefaults* = DEFINE_GUID(0x3050F58C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLDivElement* = DEFINE_GUID(0x3050F50C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLDivPosition* = DEFINE_GUID(0x3050F50F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLDListElement* = DEFINE_GUID(0x3050F53B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLDocument* = DEFINE_GUID(0x3050F55F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLDOMAttribute* = DEFINE_GUID(0x3050F564'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLDOMImplementation* = DEFINE_GUID(0x3050F58F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLDOMTextNode* = DEFINE_GUID(0x3050F565'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLDTElement* = DEFINE_GUID(0x3050F50D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLElementCollection* = DEFINE_GUID(0x3050F56B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLEmbed* = DEFINE_GUID(0x3050F52E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLFieldSetElement* = DEFINE_GUID(0x3050F545'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLFontElement* = DEFINE_GUID(0x3050F512'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLFormElement* = DEFINE_GUID(0x3050F510'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLFrameBase* = DEFINE_GUID(0x3050F541'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLFrameElement* = DEFINE_GUID(0x3050F513'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLFrameSetSite* = DEFINE_GUID(0x3050F514'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLGenericElement* = DEFINE_GUID(0x3050F563'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLHeadElement* = DEFINE_GUID(0x3050F561'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLHeaderElement* = DEFINE_GUID(0x3050F515'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLHRElement* = DEFINE_GUID(0x3050F53D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLHtmlElement* = DEFINE_GUID(0x3050F560'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLIFrame* = DEFINE_GUID(0x3050F51B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLImg* = DEFINE_GUID(0x3050F51C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLInputElement* = DEFINE_GUID(0x3050F57D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLIsIndexElement* = DEFINE_GUID(0x3050F519'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLLabelElement* = DEFINE_GUID(0x3050F522'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLLegendElement* = DEFINE_GUID(0x3050F546'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLLIElement* = DEFINE_GUID(0x3050F523'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLLinkElement* = DEFINE_GUID(0x3050F524'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLListElement* = DEFINE_GUID(0x3050F525'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLMapElement* = DEFINE_GUID(0x3050F526'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLMarqueeElement* = DEFINE_GUID(0x3050F527'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLMetaElement* = DEFINE_GUID(0x3050F517'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLNextIdElement* = DEFINE_GUID(0x3050F51A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLNoShowElement* = DEFINE_GUID(0x3050F528'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLObjectElement* = DEFINE_GUID(0x3050F529'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLOListElement* = DEFINE_GUID(0x3050F52A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLOptionElement* = DEFINE_GUID(0x3050F52B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLParaElement* = DEFINE_GUID(0x3050F52C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLParamElement* = DEFINE_GUID(0x3050F590'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLPhraseElement* = DEFINE_GUID(0x3050F52D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLPopup* = DEFINE_GUID(0x3050F589'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLRenderStyle* = DEFINE_GUID(0x3050F58B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLRichtextElement* = DEFINE_GUID(0x3050F54D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLRuleStyle* = DEFINE_GUID(0x3050F55C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLScreen* = DEFINE_GUID(0x3050F591'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLScriptElement* = DEFINE_GUID(0x3050F530'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLSelectElement* = DEFINE_GUID(0x3050F531'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLSpanElement* = DEFINE_GUID(0x3050F548'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLSpanFlow* = DEFINE_GUID(0x3050F544'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLStyle* = DEFINE_GUID(0x3050F55A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLStyleElement* = DEFINE_GUID(0x3050F511'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLStyleSheet* = DEFINE_GUID(0x3050F58D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLTable* = DEFINE_GUID(0x3050F532'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLTableCaption* = DEFINE_GUID(0x3050F508'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLTableCell* = DEFINE_GUID(0x3050F536'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLTableCol* = DEFINE_GUID(0x3050F533'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLTableRow* = DEFINE_GUID(0x3050F535'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLTableSection* = DEFINE_GUID(0x3050F534'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLTextAreaElement* = DEFINE_GUID(0x3050F521'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLTextElement* = DEFINE_GUID(0x3050F537'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLTitleElement* = DEFINE_GUID(0x3050F516'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLUListElement* = DEFINE_GUID(0x3050F538'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLUnknownElement* = DEFINE_GUID(0x3050F539'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLWindow2* = DEFINE_GUID(0x3050F55D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispHTMLWindowProxy* = DEFINE_GUID(0x3050F55E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispIHTMLInputButtonElement* = DEFINE_GUID(0x3050F51E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispIHTMLInputFileElement* = DEFINE_GUID(0x3050F542'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispIHTMLInputImage* = DEFINE_GUID(0x3050F51D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispIHTMLInputTextElement* = DEFINE_GUID(0x3050F520'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DispIHTMLOptionButtonElement* = DEFINE_GUID(0x3050F509'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_DMigrationWizardAutoEvents* = DEFINE_GUID(0xD2AC137D'u32, 0xA6D8, 0x43B6, [0x98'u8, 0x79, 0xEA, 0x34, 0xB6, 0x7E, 0x18, 0x80])
  DIID_DSearchCommandEvents* = DEFINE_GUID(0x60890160'u32, 0x69F0, 0x11D1, [0xB7'u8, 0x58, 0x00, 0xA0, 0xC9, 0x05, 0x64, 0xFE])
  DIID_DShellFolderViewEvents* = DEFINE_GUID(0x62112AA2'u32, 0xEBE4, 0x11CF, [0xA5'u8, 0xFB, 0x00, 0x20, 0xAF, 0xE7, 0x29, 0x2D])
  DIID_DShellNameSpaceEvents* = DEFINE_GUID(0x55136806'u32, 0xB2DE, 0x11D1, [0xB9'u8, 0xF2, 0x00, 0xA0, 0xC9, 0x8B, 0xC5, 0x47])
  DIID_DShellWindowsEvents* = DEFINE_GUID(0xFE4106E0'u32, 0x399A, 0x11D0, [0xA4'u8, 0x8C, 0x00, 0xA0, 0xC9, 0x0A, 0x8F, 0x39])
  DIID_DWebBridgeEvents* = DEFINE_GUID(0xA6D897FF'u32, 0x0A95, 0x11D1, [0xB0'u8, 0xBA, 0x00, 0x60, 0x08, 0x16, 0x6E, 0x11])
  DIID_DWebBrowserEvents* = DEFINE_GUID(0xEAB22AC2'u32, 0x30C1, 0x11CF, [0xA7'u8, 0xEB, 0x00, 0x00, 0xC0, 0x5B, 0xAE, 0x0B])
  DIID_DWebBrowserEvents2* = DEFINE_GUID(0x34A715A0'u32, 0x6587, 0x11D0, [0x92'u8, 0x4A, 0x00, 0x20, 0xAF, 0xC7, 0xAC, 0x4D])
  DIID_HTMLAnchorEvents* = DEFINE_GUID(0x3050F29D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLAnchorEvents2* = DEFINE_GUID(0x3050F610'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLAreaEvents* = DEFINE_GUID(0x3050F366'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLAreaEvents2* = DEFINE_GUID(0x3050F611'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLButtonElementEvents* = DEFINE_GUID(0x3050F2B3'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLButtonElementEvents2* = DEFINE_GUID(0x3050F617'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLControlElementEvents* = DEFINE_GUID(0x3050F4EA'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLControlElementEvents2* = DEFINE_GUID(0x3050F612'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLDocumentEvents* = DEFINE_GUID(0x3050F260'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLDocumentEvents2* = DEFINE_GUID(0x3050F613'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLElementEvents* = DEFINE_GUID(0x3050F33C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLElementEvents2* = DEFINE_GUID(0x3050F60F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLFormElementEvents* = DEFINE_GUID(0x3050F364'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLFormElementEvents2* = DEFINE_GUID(0x3050F614'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLFrameSiteEvents* = DEFINE_GUID(0x3050F800'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLFrameSiteEvents2* = DEFINE_GUID(0x3050F7FF'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLImgEvents* = DEFINE_GUID(0x3050F25B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLImgEvents2* = DEFINE_GUID(0x3050F616'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLInputFileElementEvents* = DEFINE_GUID(0x3050F2AF'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLInputFileElementEvents2* = DEFINE_GUID(0x3050F61A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLInputImageEvents* = DEFINE_GUID(0x3050F2C3'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLInputImageEvents2* = DEFINE_GUID(0x3050F61B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLInputTextElementEvents* = DEFINE_GUID(0x3050F2A7'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLInputTextElementEvents2* = DEFINE_GUID(0x3050F618'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLLabelEvents* = DEFINE_GUID(0x3050F329'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLLabelEvents2* = DEFINE_GUID(0x3050F61C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLLinkElementEvents* = DEFINE_GUID(0x3050F3CC'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLLinkElementEvents2* = DEFINE_GUID(0x3050F61D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLMapEvents* = DEFINE_GUID(0x3050F3BA'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLMapEvents2* = DEFINE_GUID(0x3050F61E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLMarqueeElementEvents* = DEFINE_GUID(0x3050F2B8'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLMarqueeElementEvents2* = DEFINE_GUID(0x3050F61F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLNamespaceEvents* = DEFINE_GUID(0x3050F6BD'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLObjectElementEvents* = DEFINE_GUID(0x3050F3C4'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLObjectElementEvents2* = DEFINE_GUID(0x3050F620'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLOptionButtonElementEvents* = DEFINE_GUID(0x3050F2BD'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLOptionButtonElementEvents2* = DEFINE_GUID(0x3050F619'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLPersistEvents* = DEFINE_GUID(0x3050F4C7'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLScriptEvents* = DEFINE_GUID(0x3050F3E2'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLScriptEvents2* = DEFINE_GUID(0x3050F621'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLSelectElementEvents* = DEFINE_GUID(0x3050F302'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLSelectElementEvents2* = DEFINE_GUID(0x3050F622'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLStyleElementEvents* = DEFINE_GUID(0x3050F3CB'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLStyleElementEvents2* = DEFINE_GUID(0x3050F615'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLTableEvents* = DEFINE_GUID(0x3050F407'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLTableEvents2* = DEFINE_GUID(0x3050F623'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLTextContainerEvents* = DEFINE_GUID(0x1FF6AA72'u32, 0x5842, 0x11CF, [0xA7'u8, 0x07, 0x00, 0xAA, 0x00, 0xC0, 0x09, 0x8D])
  DIID_HTMLTextContainerEvents2* = DEFINE_GUID(0x3050F624'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_HTMLWindowEvents* = DEFINE_GUID(0x96A0A4E0'u32, 0xD062, 0x11CF, [0x94'u8, 0xB6, 0x00, 0xAA, 0x00, 0x60, 0x27, 0x5C])
  DIID_HTMLWindowEvents2* = DEFINE_GUID(0x3050F625'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_IRTCDispatchEventNotification* = DEFINE_GUID(0x176DDFBE'u32, 0xFEC0, 0x4D55, [0xBC'u8, 0x87, 0x84, 0xCF, 0xF1, 0xEF, 0x7F, 0x91])
  DIID_ISWbemSinkEvents* = DEFINE_GUID(0x75718CA0'u32, 0xF029, 0x11D1, [0xA1'u8, 0xAC, 0x00, 0xC0, 0x4F, 0xB6, 0xC2, 0x23])
  DIID_ITTAPIDispatchEventNotification* = DEFINE_GUID(0x9F34325B'u32, 0x7E62, 0x11D2, [0x94'u8, 0x57, 0x00, 0xC0, 0x4F, 0x8E, 0xC8, 0x88])
  DIID_LayoutRectEvents* = DEFINE_GUID(0x3050F674'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  DIID_XMLDOMDocumentEvents* = DEFINE_GUID(0x3EFAA427'u32, 0x272F, 0x11D2, [0x83'u8, 0x6F, 0x00, 0x00, 0xF8, 0x7A, 0x77, 0x82])
  DPAID_ComPort* = DEFINE_GUID(0xF2F0CE00'u32, 0xE0AF, 0x11CF, [0x9C'u8, 0x4E, 0x00, 0xA0, 0xC9, 0x05, 0x42, 0x5E])
  DPAID_INet* = DEFINE_GUID(0xC4A54DA0'u32, 0xE0AF, 0x11CF, [0x9C'u8, 0x4E, 0x00, 0xA0, 0xC9, 0x05, 0x42, 0x5E])
  DPAID_INetPort* = DEFINE_GUID(0xE4524541'u32, 0x8EA5, 0x11D1, [0x8A'u8, 0x96, 0x00, 0x60, 0x97, 0xB0, 0x14, 0x11])
  DPAID_INetW* = DEFINE_GUID(0xE63232A0'u32, 0x9DBF, 0x11D0, [0x9C'u8, 0xC1, 0x00, 0xA0, 0xC9, 0x05, 0x42, 0x5E])
  DPAID_LobbyProvider* = DEFINE_GUID(0x59B95640'u32, 0x9667, 0x11D0, [0xA7'u8, 0x7D, 0x00, 0x00, 0xF8, 0x03, 0xAB, 0xFC])
  DPAID_Modem* = DEFINE_GUID(0xF6DCC200'u32, 0xA2FE, 0x11D0, [0x9C'u8, 0x4F, 0x00, 0xA0, 0xC9, 0x05, 0x42, 0x5E])
  DPAID_ModemW* = DEFINE_GUID(0x01FD92E0'u32, 0xA2FF, 0x11D0, [0x9C'u8, 0x4F, 0x00, 0xA0, 0xC9, 0x05, 0x42, 0x5E])
  DPAID_Phone* = DEFINE_GUID(0x78EC89A0'u32, 0xE0AF, 0x11CF, [0x9C'u8, 0x4E, 0x00, 0xA0, 0xC9, 0x05, 0x42, 0x5E])
  DPAID_PhoneW* = DEFINE_GUID(0xBA5A7A70'u32, 0x9DBF, 0x11D0, [0x9C'u8, 0xC1, 0x00, 0xA0, 0xC9, 0x05, 0x42, 0x5E])
  DPAID_ServiceProvider* = DEFINE_GUID(0x07D916C0'u32, 0xE0AF, 0x11CF, [0x9C'u8, 0x4E, 0x00, 0xA0, 0xC9, 0x05, 0x42, 0x5E])
  DPAID_TotalSize* = DEFINE_GUID(0x1318F560'u32, 0x912C, 0x11D0, [0x9D'u8, 0xAA, 0x00, 0xA0, 0xC9, 0x0A, 0x43, 0xCB])
  DPLPROPERTY_LobbyGuid* = DEFINE_GUID(0xF56920A0'u32, 0xD218, 0x11D0, [0xBA'u8, 0x39, 0x00, 0xC0, 0x4F, 0xD7, 0xED, 0x67])
  DPLPROPERTY_MessagesSupported* = DEFINE_GUID(0x762CCDA1'u32, 0xD916, 0x11D0, [0xBA'u8, 0x39, 0x00, 0xC0, 0x4F, 0xD7, 0xED, 0x67])
  DPLPROPERTY_PlayerGuid* = DEFINE_GUID(0xB4319322'u32, 0xD20D, 0x11D0, [0xBA'u8, 0x39, 0x00, 0xC0, 0x4F, 0xD7, 0xED, 0x67])
  DPLPROPERTY_PlayerScore* = DEFINE_GUID(0x48784000'u32, 0xD219, 0x11D0, [0xBA'u8, 0x39, 0x00, 0xC0, 0x4F, 0xD7, 0xED, 0x67])
  DPSPGUID_IPX* = DEFINE_GUID(0x685BC400'u32, 0x9D2C, 0x11CF, [0xA9'u8, 0xCD, 0x00, 0xAA, 0x00, 0x68, 0x86, 0xE3])
  DPSPGUID_MODEM* = DEFINE_GUID(0x44EAA760'u32, 0xCB68, 0x11CF, [0x9C'u8, 0x4E, 0x00, 0xA0, 0xC9, 0x05, 0x42, 0x5E])
  DPSPGUID_SERIAL* = DEFINE_GUID(0x0F1D6860'u32, 0x88D9, 0x11CF, [0x9C'u8, 0x4E, 0x00, 0xA0, 0xC9, 0x05, 0x42, 0x5E])
  DPSPGUID_TCPIP* = DEFINE_GUID(0x36E95EE0'u32, 0x8577, 0x11CF, [0x96'u8, 0x0C, 0x00, 0x80, 0xC7, 0x53, 0x4E, 0x82])
  DS3DALG_HRTF_FULL* = DEFINE_GUID(0xC2413340'u32, 0x1C1B, 0x11D2, [0x94'u8, 0xF5, 0x00, 0xC0, 0x4F, 0xC2, 0x8A, 0xCA])
  DS3DALG_HRTF_LIGHT* = DEFINE_GUID(0xC2413342'u32, 0x1C1B, 0x11D2, [0x94'u8, 0xF5, 0x00, 0xC0, 0x4F, 0xC2, 0x8A, 0xCA])
  DS3DALG_NO_VIRTUALIZATION* = DEFINE_GUID(0xC241333F'u32, 0x1C1B, 0x11D2, [0x94'u8, 0xF5, 0x00, 0xC0, 0x4F, 0xC2, 0x8A, 0xCA])
  FLAGID_Internet* = DEFINE_GUID(0x96300DA0'u32, 0x2BAB, 0x11CF, [0xA2'u8, 0x29, 0x00, 0xAA, 0x00, 0x3D, 0x73, 0x52])
  FMTID_AudioSummaryInformation* = DEFINE_GUID(0x64440490'u32, 0x4C8B, 0x11D1, [0x8B'u8, 0x70, 0x08, 0x00, 0x36, 0xB1, 0x1A, 0x03])
  FMTID_Briefcase* = DEFINE_GUID(0x328D8B21'u32, 0x7729, 0x4BFC, [0x95'u8, 0x4C, 0x90, 0x2B, 0x32, 0x9D, 0x56, 0xB0])
  FMTID_DiscardableInformation* = DEFINE_GUID(0xD725EBB0'u32, 0xC9B8, 0x11D1, [0x89'u8, 0xBC, 0x00, 0x00, 0xF8, 0x04, 0xB0, 0x57])
  FMTID_Displaced* = DEFINE_GUID(0x9B174B33'u32, 0x40FF, 0x11D2, [0xA2'u8, 0x7E, 0x00, 0xC0, 0x4F, 0xC3, 0x08, 0x71])
  FMTID_DocSummaryInformation* = DEFINE_GUID(0xD5CDD502'u32, 0x2E9C, 0x101B, [0x93'u8, 0x97, 0x08, 0x00, 0x2B, 0x2C, 0xF9, 0xAE])
  FMTID_DRM* = DEFINE_GUID(0xAEAC19E4'u32, 0x89AE, 0x4508, [0xB9'u8, 0xB7, 0xBB, 0x86, 0x7A, 0xBE, 0xE2, 0xED])
  FMTID_ImageProperties* = DEFINE_GUID(0x14B81DA1'u32, 0x0135, 0x4D31, [0x96'u8, 0xD9, 0x6C, 0xBF, 0xC9, 0x67, 0x1A, 0x99])
  FMTID_ImageSummaryInformation* = DEFINE_GUID(0x6444048F'u32, 0x4C8B, 0x11D1, [0x8B'u8, 0x70, 0x08, 0x00, 0x36, 0xB1, 0x1A, 0x03])
  FMTID_InternetSite* = DEFINE_GUID(0x000214A1'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  FMTID_Intshcut* = DEFINE_GUID(0x000214A0'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  FMTID_MediaFileSummaryInformation* = DEFINE_GUID(0x64440492'u32, 0x4C8B, 0x11D1, [0x8B'u8, 0x70, 0x08, 0x00, 0x36, 0xB1, 0x1A, 0x03])
  FMTID_Misc* = DEFINE_GUID(0x9B174B34'u32, 0x40FF, 0x11D2, [0xA2'u8, 0x7E, 0x00, 0xC0, 0x4F, 0xC3, 0x08, 0x71])
  FMTID_MUSIC* = DEFINE_GUID(0x56A3372E'u32, 0xCE9C, 0x11D2, [0x9F'u8, 0x0E, 0x00, 0x60, 0x97, 0xC6, 0x86, 0xF6])
  FMTID_PropertyBag* = DEFINE_GUID(0x20001801'u32, 0x5DE6, 0x11D1, [0x8E'u8, 0x38, 0x00, 0xC0, 0x4F, 0xB9, 0x38, 0x6D])
  FMTID_Query* = DEFINE_GUID(0x49691C90'u32, 0x7E17, 0x101A, [0xA9'u8, 0x1C, 0x08, 0x00, 0x2B, 0x2E, 0xCD, 0xA9])
  FMTID_ShellDetails* = DEFINE_GUID(0x28636AA6'u32, 0x953D, 0x11D2, [0xB5'u8, 0xD6, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0xD0])
  FMTID_Storage* = DEFINE_GUID(0xB725F130'u32, 0x47EF, 0x101A, [0xA5'u8, 0xF1, 0x02, 0x60, 0x8C, 0x9E, 0xEB, 0xAC])
  FMTID_SummaryInformation* = DEFINE_GUID(0xF29F85E0'u32, 0x4FF9, 0x1068, [0xAB'u8, 0x91, 0x08, 0x00, 0x2B, 0x27, 0xB3, 0xD9])
  FMTID_UserDefinedProperties* = DEFINE_GUID(0xD5CDD505'u32, 0x2E9C, 0x101B, [0x93'u8, 0x97, 0x08, 0x00, 0x2B, 0x2C, 0xF9, 0xAE])
  FMTID_VideoSummaryInformation* = DEFINE_GUID(0x64440491'u32, 0x4C8B, 0x11D1, [0x8B'u8, 0x70, 0x08, 0x00, 0x36, 0xB1, 0x1A, 0x03])
  FMTID_Volume* = DEFINE_GUID(0x9B174B35'u32, 0x40FF, 0x11D2, [0xA2'u8, 0x7E, 0x00, 0xC0, 0x4F, 0xC3, 0x08, 0x71])
  FMTID_WebView* = DEFINE_GUID(0xF2275480'u32, 0xF782, 0x4291, [0xBD'u8, 0x94, 0xF1, 0x36, 0x93, 0x51, 0x3A, 0xEC])
  GUID_ACPI_CMOS_INTERFACE_STANDARD* = DEFINE_GUID(0x3A8D0384'u32, 0x6505, 0x40CA, [0xBC'u8, 0x39, 0x56, 0xC1, 0x5F, 0x8C, 0x5F, 0xED])
  GUID_ACPI_INTERFACE_STANDARD* = DEFINE_GUID(0xB091A08A'u32, 0xBA97, 0x11D0, [0xBD'u8, 0x14, 0x00, 0xAA, 0x00, 0xB7, 0xB3, 0x2A])
  GUID_ACPI_PORT_RANGES_INTERFACE_STAND* = DEFINE_GUID(0xF14F609B'u32, 0xCBBD, 0x4957, [0xA6'u8, 0x74, 0xBC, 0x00, 0x21, 0x3F, 0x1C, 0x97])
  GUID_ACPI_REGS_INTERFACE_STANDARD* = DEFINE_GUID(0x06141966'u32, 0x7245, 0x6369, [0x46'u8, 0x2E, 0x4E, 0x65, 0x6C, 0x73, 0x6F, 0x6E])
  GUID_ARBITER_INTERFACE_STANDARD* = DEFINE_GUID(0xE644F185'u32, 0x8C0E, 0x11D0, [0xBE'u8, 0xCF, 0x08, 0x00, 0x2B, 0xE2, 0x09, 0x2F])
  GUID_BUS_INTERFACE_STANDARD* = DEFINE_GUID(0x496B8280'u32, 0x6F25, 0x11D0, [0xBE'u8, 0xAF, 0x08, 0x00, 0x2B, 0xE2, 0x09, 0x2F])
  GUID_BUS_TYPE_1394* = DEFINE_GUID(0xF74E73EB'u32, 0x9AC5, 0x45EB, [0xBE'u8, 0x4D, 0x77, 0x2C, 0xC7, 0x1D, 0xDF, 0xB3])
  GUID_BUS_TYPE_AVC* = DEFINE_GUID(0xC06FF265'u32, 0xAE09, 0x48F0, [0x81'u8, 0x2C, 0x16, 0x75, 0x3D, 0x7C, 0xBA, 0x83])
  GUID_BUS_TYPE_DOT4PRT* = DEFINE_GUID(0x441EE001'u32, 0x4342, 0x11D5, [0xA1'u8, 0x84, 0x00, 0xC0, 0x4F, 0x60, 0x52, 0x4D])
  GUID_BUS_TYPE_EISA* = DEFINE_GUID(0xDDC35509'u32, 0xF3FC, 0x11D0, [0xA5'u8, 0x37, 0x00, 0x00, 0xF8, 0x75, 0x3E, 0xD1])
  GUID_BUS_TYPE_HID* = DEFINE_GUID(0xEEAF37D0'u32, 0x1963, 0x47C4, [0xAA'u8, 0x48, 0x72, 0x47, 0x6D, 0xB7, 0xCF, 0x49])
  GUID_BUS_TYPE_INTERNAL* = DEFINE_GUID(0x1530EA73'u32, 0x086B, 0x11D1, [0xA0'u8, 0x9F, 0x00, 0xC0, 0x4F, 0xC3, 0x40, 0xB1])
  GUID_BUS_TYPE_IRDA* = DEFINE_GUID(0x7AE17DC1'u32, 0xC944, 0x44D6, [0x88'u8, 0x1F, 0x4C, 0x2E, 0x61, 0x05, 0x3B, 0xC1])
  GUID_BUS_TYPE_ISAPNP* = DEFINE_GUID(0xE676F854'u32, 0xD87D, 0x11D0, [0x92'u8, 0xB2, 0x00, 0xA0, 0xC9, 0x05, 0x5F, 0xC5])
  GUID_BUS_TYPE_LPTENUM* = DEFINE_GUID(0xC4CA1000'u32, 0x2DDC, 0x11D5, [0xA1'u8, 0x7A, 0x00, 0xC0, 0x4F, 0x60, 0x52, 0x4D])
  GUID_BUS_TYPE_MCA* = DEFINE_GUID(0x1C75997A'u32, 0xDC33, 0x11D0, [0x92'u8, 0xB2, 0x00, 0xA0, 0xC9, 0x05, 0x5F, 0xC5])
  GUID_BUS_TYPE_PCI* = DEFINE_GUID(0xC8EBDFB0'u32, 0xB510, 0x11D0, [0x80'u8, 0xE5, 0x00, 0xA0, 0xC9, 0x25, 0x42, 0xE3])
  GUID_BUS_TYPE_PCMCIA* = DEFINE_GUID(0x09343630'u32, 0xAF9F, 0x11D0, [0x92'u8, 0xE9, 0x00, 0x00, 0xF8, 0x1E, 0x1B, 0x30])
  GUID_BUS_TYPE_SERENUM* = DEFINE_GUID(0x77114A87'u32, 0x8944, 0x11D1, [0xBD'u8, 0x90, 0x00, 0xA0, 0xC9, 0x06, 0xBE, 0x2D])
  GUID_BUS_TYPE_USB* = DEFINE_GUID(0x9D7DEBBC'u32, 0xC85D, 0x11D1, [0x9E'u8, 0xB4, 0x00, 0x60, 0x08, 0xC3, 0xA1, 0x9A])
  GUID_BUS_TYPE_USBPRINT* = DEFINE_GUID(0x441EE000'u32, 0x4342, 0x11D5, [0xA1'u8, 0x84, 0x00, 0xC0, 0x4F, 0x60, 0x52, 0x4D])
  GUID_Button* = DEFINE_GUID(0xA36D02F0'u32, 0xC9F3, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_CHECKVALUEEXCLUSIVE* = DEFINE_GUID(0x6650430C'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_ChordParam* = DEFINE_GUID(0xD2AC289E'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_Clear_All_Bands* = DEFINE_GUID(0xD2AC28AB'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_COLOR* = DEFINE_GUID(0x66504301'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_ColorControlCallbacks* = DEFINE_GUID(0xEFD60CC2'u32, 0x49E7, 0x11D0, [0x88'u8, 0x9D, 0x00, 0xAA, 0x00, 0xBB, 0xB7, 0x6A])
  GUID_CommandParam* = DEFINE_GUID(0xD2AC289D'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_CommandParam2* = DEFINE_GUID(0x28F97EF7'u32, 0x9538, 0x11D2, [0x97'u8, 0xA9, 0x00, 0xC0, 0x4F, 0xA3, 0x6E, 0x58])
  GUID_ConnectToDLSCollection* = DEFINE_GUID(0x1DB1AE6B'u32, 0xE92E, 0x11D1, [0xA8'u8, 0xC5, 0x00, 0xC0, 0x4F, 0xA3, 0x72, 0x6E])
  GUID_ConstantForce* = DEFINE_GUID(0x13541C20'u32, 0x8E33, 0x11D0, [0x9A'u8, 0xD0, 0x00, 0xA0, 0xC9, 0xA0, 0x6E, 0x35])
  GUID_CustomForce* = DEFINE_GUID(0x13541C2B'u32, 0x8E33, 0x11D0, [0x9A'u8, 0xD0, 0x00, 0xA0, 0xC9, 0xA0, 0x6E, 0x35])
  GUID_D3DCallbacks2* = DEFINE_GUID(0x0BA584E1'u32, 0x70B6, 0x11D0, [0x88'u8, 0x9D, 0x00, 0xAA, 0x00, 0xBB, 0xB7, 0x6A])
  GUID_D3DCallbacks3* = DEFINE_GUID(0xDDF41230'u32, 0xEC0A, 0x11D0, [0xA9'u8, 0xB6, 0x00, 0xAA, 0x00, 0xC0, 0x99, 0x3E])
  GUID_D3DExtendedCaps* = DEFINE_GUID(0x7DE41F80'u32, 0x9D93, 0x11D0, [0x89'u8, 0xAB, 0x00, 0xA0, 0xC9, 0x05, 0x41, 0x29])
  GUID_D3DParseUnknownCommandCallback* = DEFINE_GUID(0x2E04FFA0'u32, 0x98E4, 0x11D1, [0x8C'u8, 0xE1, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0xA8])
  GUID_Damper* = DEFINE_GUID(0x13541C28'u32, 0x8E33, 0x11D0, [0x9A'u8, 0xD0, 0x00, 0xA0, 0xC9, 0xA0, 0x6E, 0x35])
  GUID_DDMoreCaps* = DEFINE_GUID(0x880BAF30'u32, 0xB030, 0x11D0, [0x8E'u8, 0xA7, 0x00, 0x60, 0x97, 0x97, 0xEA, 0x5B])
  GUID_DDMoreSurfaceCaps* = DEFINE_GUID(0x3B8A0466'u32, 0xF269, 0x11D1, [0x88'u8, 0x0B, 0x00, 0xC0, 0x4F, 0xD9, 0x30, 0xC5])
  GUID_DDStereoMode* = DEFINE_GUID(0xF828169C'u32, 0xA8E8, 0x11D2, [0xA1'u8, 0xF2, 0x00, 0xA0, 0xC9, 0x83, 0xEA, 0xF6])
  GUID_DefaultGMCollection* = DEFINE_GUID(0xF17E8673'u32, 0xC3B4, 0x11D1, [0x87'u8, 0x0B, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_DEVCLASS_1394* = DEFINE_GUID(0x6BDD1FC1'u32, 0x810F, 0x11D0, [0xBE'u8, 0xC7, 0x08, 0x00, 0x2B, 0xE2, 0x09, 0x2F])
  GUID_DEVCLASS_1394DEBUG* = DEFINE_GUID(0x66F250D6'u32, 0x7801, 0x4A64, [0xB1'u8, 0x39, 0xEE, 0xA8, 0x0A, 0x45, 0x0B, 0x24])
  GUID_DEVCLASS_61883* = DEFINE_GUID(0x7EBEFBC0'u32, 0x3200, 0x11D2, [0xB4'u8, 0xC2, 0x00, 0xA0, 0xC9, 0x69, 0x7D, 0x07])
  GUID_DEVCLASS_ADAPTER* = DEFINE_GUID(0x4D36E964'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_APMSUPPORT* = DEFINE_GUID(0xD45B1C18'u32, 0xC8FA, 0x11D1, [0x9F'u8, 0x77, 0x00, 0x00, 0xF8, 0x05, 0xF5, 0x30])
  GUID_DEVCLASS_AVC* = DEFINE_GUID(0xC06FF265'u32, 0xAE09, 0x48F0, [0x81'u8, 0x2C, 0x16, 0x75, 0x3D, 0x7C, 0xBA, 0x83])
  GUID_DEVCLASS_BATTERY* = DEFINE_GUID(0x72631E54'u32, 0x78A4, 0x11D0, [0xBC'u8, 0xF7, 0x00, 0xAA, 0x00, 0xB7, 0xB3, 0x2A])
  GUID_DEVCLASS_BLUETOOTH* = DEFINE_GUID(0xE0CBF06C'u32, 0xCD8B, 0x4647, [0xBB'u8, 0x8A, 0x26, 0x3B, 0x43, 0xF0, 0xF9, 0x74])
  GUID_DEVCLASS_CDROM* = DEFINE_GUID(0x4D36E965'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_COMPUTER* = DEFINE_GUID(0x4D36E966'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_DECODER* = DEFINE_GUID(0x6BDD1FC2'u32, 0x810F, 0x11D0, [0xBE'u8, 0xC7, 0x08, 0x00, 0x2B, 0xE2, 0x09, 0x2F])
  GUID_DEVCLASS_DISKDRIVE* = DEFINE_GUID(0x4D36E967'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_DISPLAY* = DEFINE_GUID(0x4D36E968'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_DOT4* = DEFINE_GUID(0x48721B56'u32, 0x6795, 0x11D2, [0xB1'u8, 0xA8, 0x00, 0x80, 0xC7, 0x2E, 0x74, 0xA2])
  GUID_DEVCLASS_DOT4PRINT* = DEFINE_GUID(0x49CE6AC8'u32, 0x6F86, 0x11D2, [0xB1'u8, 0xE5, 0x00, 0x80, 0xC7, 0x2E, 0x74, 0xA2])
  GUID_DEVCLASS_ENUM1394* = DEFINE_GUID(0xC459DF55'u32, 0xDB08, 0x11D1, [0xB0'u8, 0x09, 0x00, 0xA0, 0xC9, 0x08, 0x1F, 0xF6])
  GUID_DEVCLASS_FDC* = DEFINE_GUID(0x4D36E969'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_FLOPPYDISK* = DEFINE_GUID(0x4D36E980'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_FSFILTER_ACTIVITYMONIT* = DEFINE_GUID(0xB86DFF51'u32, 0xA31E, 0x4BAC, [0xB3'u8, 0xCF, 0xE8, 0xCF, 0xE7, 0x5C, 0x9F, 0xC2])
  GUID_DEVCLASS_FSFILTER_ANTIVIRUS* = DEFINE_GUID(0xB1D1A169'u32, 0xC54F, 0x4379, [0x81'u8, 0xDB, 0xBE, 0xE7, 0xD8, 0x8D, 0x74, 0x54])
  GUID_DEVCLASS_FSFILTER_CFSMETADATASER* = DEFINE_GUID(0xCDCF0939'u32, 0xB75B, 0x4630, [0xBF'u8, 0x76, 0x80, 0xF7, 0xBA, 0x65, 0x58, 0x84])
  GUID_DEVCLASS_FSFILTER_COMPRESSION* = DEFINE_GUID(0xF3586BAF'u32, 0xB5AA, 0x49B5, [0x8D'u8, 0x6C, 0x05, 0x69, 0x28, 0x4C, 0x63, 0x9F])
  GUID_DEVCLASS_FSFILTER_CONTENTSCREEN* = DEFINE_GUID(0x3E3F0674'u32, 0xC83C, 0x4558, [0xBB'u8, 0x26, 0x98, 0x20, 0xE1, 0xEB, 0xA5, 0xC5])
  GUID_DEVCLASS_FSFILTER_CONTINUOUSBACK* = DEFINE_GUID(0x71AA14F8'u32, 0x6FAD, 0x4622, [0xAD'u8, 0x77, 0x92, 0xBB, 0x9D, 0x7E, 0x69, 0x47])
  GUID_DEVCLASS_FSFILTER_COPYPROTECTIO* = DEFINE_GUID(0x89786FF1'u32, 0x9C12, 0x402F, [0x9C'u8, 0x9E, 0x17, 0x75, 0x3C, 0x7F, 0x43, 0x75])
  GUID_DEVCLASS_FSFILTER_ENCRYPTION* = DEFINE_GUID(0xA0A701C0'u32, 0xA511, 0x42FF, [0xAA'u8, 0x6C, 0x06, 0xDC, 0x03, 0x95, 0x57, 0x6F])
  GUID_DEVCLASS_FSFILTER_HSM* = DEFINE_GUID(0xD546500A'u32, 0x2AEB, 0x45F6, [0x94'u8, 0x82, 0xF4, 0xB1, 0x79, 0x9C, 0x31, 0x77])
  GUID_DEVCLASS_FSFILTER_INFRASTRUCTUR* = DEFINE_GUID(0xE55FA6F9'u32, 0x128C, 0x4D04, [0xAB'u8, 0xAB, 0x63, 0x0C, 0x74, 0xB1, 0x45, 0x3A])
  GUID_DEVCLASS_FSFILTER_OPENFILEBACKU* = DEFINE_GUID(0xF8ECAFA6'u32, 0x66D1, 0x41A5, [0x89'u8, 0x9B, 0x66, 0x58, 0x5D, 0x72, 0x16, 0xB7])
  GUID_DEVCLASS_FSFILTER_PHYSICALQUOTAM* = DEFINE_GUID(0x6A0A8E78'u32, 0xBBA6, 0x4FC4, [0xA7'u8, 0x09, 0x1E, 0x33, 0xCD, 0x09, 0xD6, 0x7E])
  GUID_DEVCLASS_FSFILTER_QUOTAMANAGEME* = DEFINE_GUID(0x8503C911'u32, 0xA6C7, 0x4919, [0x8F'u8, 0x79, 0x50, 0x28, 0xF5, 0x86, 0x6B, 0x0C])
  GUID_DEVCLASS_FSFILTER_REPLICATION* = DEFINE_GUID(0x48D3EBC4'u32, 0x4CF8, 0x48FF, [0xB8'u8, 0x69, 0x9C, 0x68, 0xAD, 0x42, 0xEB, 0x9F])
  GUID_DEVCLASS_FSFILTER_SECURITYENHANC* = DEFINE_GUID(0xD02BC3DA'u32, 0x0C8E, 0x4945, [0x9B'u8, 0xD5, 0xF1, 0x88, 0x3C, 0x22, 0x6C, 0x8C])
  GUID_DEVCLASS_FSFILTER_SYSTEM* = DEFINE_GUID(0x5D1B9AAA'u32, 0x01E2, 0x46AF, [0x84'u8, 0x9F, 0x27, 0x2B, 0x3F, 0x32, 0x4C, 0x46])
  GUID_DEVCLASS_FSFILTER_SYSTEMRECOVER* = DEFINE_GUID(0x2DB15374'u32, 0x706E, 0x4131, [0xA0'u8, 0xC7, 0xD7, 0xC7, 0x8E, 0xB0, 0x28, 0x9A])
  GUID_DEVCLASS_FSFILTER_UNDELETE* = DEFINE_GUID(0xFE8F1572'u32, 0xC67A, 0x48C0, [0xBB'u8, 0xAC, 0x0B, 0x5C, 0x6D, 0x66, 0xCA, 0xFB])
  GUID_DEVCLASS_GPS* = DEFINE_GUID(0x6BDD1FC3'u32, 0x810F, 0x11D0, [0xBE'u8, 0xC7, 0x08, 0x00, 0x2B, 0xE2, 0x09, 0x2F])
  GUID_DEVCLASS_HDC* = DEFINE_GUID(0x4D36E96A'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_HIDCLASS* = DEFINE_GUID(0x745A17A0'u32, 0x74D3, 0x11D0, [0xB6'u8, 0xFE, 0x00, 0xA0, 0xC9, 0x0F, 0x57, 0xDA])
  GUID_DEVCLASS_IMAGE* = DEFINE_GUID(0x6BDD1FC6'u32, 0x810F, 0x11D0, [0xBE'u8, 0xC7, 0x08, 0x00, 0x2B, 0xE2, 0x09, 0x2F])
  GUID_DEVCLASS_INFRARED* = DEFINE_GUID(0x6BDD1FC5'u32, 0x810F, 0x11D0, [0xBE'u8, 0xC7, 0x08, 0x00, 0x2B, 0xE2, 0x09, 0x2F])
  GUID_DEVCLASS_KEYBOARD* = DEFINE_GUID(0x4D36E96B'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_LEGACYDRIVER* = DEFINE_GUID(0x8ECC055D'u32, 0x047F, 0x11D1, [0xA5'u8, 0x37, 0x00, 0x00, 0xF8, 0x75, 0x3E, 0xD1])
  GUID_DEVCLASS_MEDIA* = DEFINE_GUID(0x4D36E96C'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_MEDIUM_CHANGER* = DEFINE_GUID(0xCE5939AE'u32, 0xEBDE, 0x11D0, [0xB1'u8, 0x81, 0x00, 0x00, 0xF8, 0x75, 0x3E, 0xC4])
  GUID_DEVCLASS_MODEM* = DEFINE_GUID(0x4D36E96D'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_MONITOR* = DEFINE_GUID(0x4D36E96E'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_MOUSE* = DEFINE_GUID(0x4D36E96F'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_MTD* = DEFINE_GUID(0x4D36E970'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_MULTIFUNCTION* = DEFINE_GUID(0x4D36E971'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_MULTIPORTSERIAL* = DEFINE_GUID(0x50906CB8'u32, 0xBA12, 0x11D1, [0xBF'u8, 0x5D, 0x00, 0x00, 0xF8, 0x05, 0xF5, 0x30])
  GUID_DEVCLASS_NET* = DEFINE_GUID(0x4D36E972'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_NETCLIENT* = DEFINE_GUID(0x4D36E973'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_NETSERVICE* = DEFINE_GUID(0x4D36E974'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_NETTRANS* = DEFINE_GUID(0x4D36E975'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_NODRIVER* = DEFINE_GUID(0x4D36E976'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_PCMCIA* = DEFINE_GUID(0x4D36E977'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_PNPPRINTERS* = DEFINE_GUID(0x4658EE7E'u32, 0xF050, 0x11D1, [0xB6'u8, 0xBD, 0x00, 0xC0, 0x4F, 0xA3, 0x72, 0xA7])
  GUID_DEVCLASS_PORTS* = DEFINE_GUID(0x4D36E978'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_PRINTER* = DEFINE_GUID(0x4D36E979'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_PRINTERUPGRADE* = DEFINE_GUID(0x4D36E97A'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_PROCESSOR* = DEFINE_GUID(0x50127DC3'u32, 0x0F36, 0x415E, [0xA6'u8, 0xCC, 0x4C, 0xB3, 0xBE, 0x91, 0x0B, 0x65])
  GUID_DEVCLASS_SBP2* = DEFINE_GUID(0xD48179BE'u32, 0xEC20, 0x11D1, [0xB6'u8, 0xB8, 0x00, 0xC0, 0x4F, 0xA3, 0x72, 0xA7])
  GUID_DEVCLASS_SCSIADAPTER* = DEFINE_GUID(0x4D36E97B'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_SMARTCARDREADER* = DEFINE_GUID(0x50DD5230'u32, 0xBA8A, 0x11D1, [0xBF'u8, 0x5D, 0x00, 0x00, 0xF8, 0x05, 0xF5, 0x30])
  GUID_DEVCLASS_SOUND* = DEFINE_GUID(0x4D36E97C'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_SYSTEM* = DEFINE_GUID(0x4D36E97D'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_TAPEDRIVE* = DEFINE_GUID(0x6D807884'u32, 0x7D21, 0x11CF, [0x80'u8, 0x1C, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_UNKNOWN* = DEFINE_GUID(0x4D36E97E'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVCLASS_USB* = DEFINE_GUID(0x36FC9E60'u32, 0xC465, 0x11CF, [0x80'u8, 0x56, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_DEVCLASS_VOLUME* = DEFINE_GUID(0x71A27CDD'u32, 0x812A, 0x11D0, [0xBE'u8, 0xC7, 0x08, 0x00, 0x2B, 0xE2, 0x09, 0x2F])
  GUID_DEVCLASS_VOLUMESNAPSHOT* = DEFINE_GUID(0x533C5B84'u32, 0xEC70, 0x11D2, [0x95'u8, 0x05, 0x00, 0xC0, 0x4F, 0x79, 0xDE, 0xAF])
  GUID_DEVCLASS_WCEUSBS* = DEFINE_GUID(0x25DBCE51'u32, 0x6C8F, 0x4A72, [0x8A'u8, 0x6D, 0xB5, 0x4C, 0x2B, 0x4F, 0xC8, 0x35])
  GUID_DEVICE_INTERFACE_ARRIVAL* = DEFINE_GUID(0xCB3A4004'u32, 0x46F0, 0x11D0, [0xB0'u8, 0x8F, 0x00, 0x60, 0x97, 0x13, 0x05, 0x3F])
  GUID_DEVICE_INTERFACE_REMOVAL* = DEFINE_GUID(0xCB3A4005'u32, 0x46F0, 0x11D0, [0xB0'u8, 0x8F, 0x00, 0x60, 0x97, 0x13, 0x05, 0x3F])
  GUID_DEVINTERFACE_CDCHANGER* = DEFINE_GUID(0x53F56312'u32, 0xB6BF, 0x11D0, [0x94'u8, 0xF2, 0x00, 0xA0, 0xC9, 0x1E, 0xFB, 0x8B])
  GUID_DEVINTERFACE_CDROM* = DEFINE_GUID(0x53F56308'u32, 0xB6BF, 0x11D0, [0x94'u8, 0xF2, 0x00, 0xA0, 0xC9, 0x1E, 0xFB, 0x8B])
  GUID_DEVINTERFACE_COMPORT* = DEFINE_GUID(0x86E0D1E0'u32, 0x8089, 0x11D0, [0x9C'u8, 0xE4, 0x08, 0x00, 0x3E, 0x30, 0x1F, 0x73])
  GUID_DEVINTERFACE_DISK* = DEFINE_GUID(0x53F56307'u32, 0xB6BF, 0x11D0, [0x94'u8, 0xF2, 0x00, 0xA0, 0xC9, 0x1E, 0xFB, 0x8B])
  GUID_DEVINTERFACE_FLOPPY* = DEFINE_GUID(0x53F56311'u32, 0xB6BF, 0x11D0, [0x94'u8, 0xF2, 0x00, 0xA0, 0xC9, 0x1E, 0xFB, 0x8B])
  GUID_DEVINTERFACE_MEDIUMCHANGER* = DEFINE_GUID(0x53F56310'u32, 0xB6BF, 0x11D0, [0x94'u8, 0xF2, 0x00, 0xA0, 0xC9, 0x1E, 0xFB, 0x8B])
  GUID_DEVINTERFACE_PARTITION* = DEFINE_GUID(0x53F5630A'u32, 0xB6BF, 0x11D0, [0x94'u8, 0xF2, 0x00, 0xA0, 0xC9, 0x1E, 0xFB, 0x8B])
  GUID_DEVINTERFACE_SERENUM_BUS_ENUMERA* = DEFINE_GUID(0x4D36E978'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_DEVINTERFACE_STORAGEPORT* = DEFINE_GUID(0x2ACCFE60'u32, 0xC130, 0x11D2, [0xB0'u8, 0x82, 0x00, 0xA0, 0xC9, 0x1E, 0xFB, 0x8B])
  GUID_DEVINTERFACE_TAPE* = DEFINE_GUID(0x53F5630B'u32, 0xB6BF, 0x11D0, [0x94'u8, 0xF2, 0x00, 0xA0, 0xC9, 0x1E, 0xFB, 0x8B])
  GUID_DEVINTERFACE_VOLUME* = DEFINE_GUID(0x53F5630D'u32, 0xB6BF, 0x11D0, [0x94'u8, 0xF2, 0x00, 0xA0, 0xC9, 0x1E, 0xFB, 0x8B])
  GUID_DEVINTERFACE_WRITEONCEDISK* = DEFINE_GUID(0x53F5630C'u32, 0xB6BF, 0x11D0, [0x94'u8, 0xF2, 0x00, 0xA0, 0xC9, 0x1E, 0xFB, 0x8B])
  GUID_DirectDrawPaletteStream* = DEFINE_GUID(0x730C7FFC'u32, 0x5347, 0x11D1, [0x8C'u8, 0x4D, 0x00, 0xC0, 0x4F, 0xD9, 0x30, 0xC5])
  GUID_DirectDrawSurfaceStream* = DEFINE_GUID(0xE043BC46'u32, 0x5317, 0x11D1, [0x8C'u8, 0x4D, 0x00, 0xC0, 0x4F, 0xD9, 0x30, 0xC5])
  GUID_DirectMusicAllTypes* = DEFINE_GUID(0xD2AC2893'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_Disable_Auto_Download* = DEFINE_GUID(0xD2AC28AA'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_DisableTempo* = DEFINE_GUID(0x45FC707D'u32, 0x1DB4, 0x11D2, [0xBC'u8, 0xAC, 0x00, 0xA0, 0xC9, 0x22, 0xE6, 0xEB])
  GUID_DisableTimeSig* = DEFINE_GUID(0x45FC707B'u32, 0x1DB4, 0x11D2, [0xBC'u8, 0xAC, 0x00, 0xA0, 0xC9, 0x22, 0xE6, 0xEB])
  GUID_DMUS_PROP_DLS1* = DEFINE_GUID(0x178F2F27'u32, 0xC364, 0x11D1, [0xA7'u8, 0x60, 0x00, 0x00, 0xF8, 0x75, 0xAC, 0x12])
  GUID_DMUS_PROP_DLS2* = DEFINE_GUID(0xF14599E5'u32, 0x4689, 0x11D2, [0xAF'u8, 0xA6, 0x00, 0xAA, 0x00, 0x24, 0xD8, 0xB6])
  GUID_DMUS_PROP_Effects* = DEFINE_GUID(0xCDA8D611'u32, 0x684A, 0x11D2, [0x87'u8, 0x1E, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_DMUS_PROP_GM_Hardware* = DEFINE_GUID(0x178F2F24'u32, 0xC364, 0x11D1, [0xA7'u8, 0x60, 0x00, 0x00, 0xF8, 0x75, 0xAC, 0x12])
  GUID_DMUS_PROP_GS_Capable* = DEFINE_GUID(0x6496ABA2'u32, 0x61B0, 0x11D2, [0xAF'u8, 0xA6, 0x00, 0xAA, 0x00, 0x24, 0xD8, 0xB6])
  GUID_DMUS_PROP_GS_Hardware* = DEFINE_GUID(0x178F2F25'u32, 0xC364, 0x11D1, [0xA7'u8, 0x60, 0x00, 0x00, 0xF8, 0x75, 0xAC, 0x12])
  GUID_DMUS_PROP_INSTRUMENT2* = DEFINE_GUID(0x865FD372'u32, 0x9F67, 0x11D2, [0x87'u8, 0x2A, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_DMUS_PROP_LegacyCaps* = DEFINE_GUID(0xCFA7CDC2'u32, 0x00A1, 0x11D2, [0xAA'u8, 0xD5, 0x00, 0x00, 0xF8, 0x75, 0xAC, 0x12])
  GUID_DMUS_PROP_MemorySize* = DEFINE_GUID(0x178F2F28'u32, 0xC364, 0x11D1, [0xA7'u8, 0x60, 0x00, 0x00, 0xF8, 0x75, 0xAC, 0x12])
  GUID_DMUS_PROP_SampleMemorySize* = DEFINE_GUID(0x178F2F28'u32, 0xC364, 0x11D1, [0xA7'u8, 0x60, 0x00, 0x00, 0xF8, 0x75, 0xAC, 0x12])
  GUID_DMUS_PROP_SamplePlaybackRate* = DEFINE_GUID(0x2A91F713'u32, 0xA4BF, 0x11D2, [0xBB'u8, 0xDF, 0x00, 0x60, 0x08, 0x33, 0xDB, 0xD8])
  GUID_DMUS_PROP_SynthSink_DSOUND* = DEFINE_GUID(0x0AA97844'u32, 0xC877, 0x11D1, [0x87'u8, 0x0C, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_DMUS_PROP_SynthSink_WAVE* = DEFINE_GUID(0x0AA97845'u32, 0xC877, 0x11D1, [0x87'u8, 0x0C, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_DMUS_PROP_Volume* = DEFINE_GUID(0xFEDFAE25'u32, 0xE46E, 0x11D1, [0xAA'u8, 0xCE, 0x00, 0x00, 0xF8, 0x75, 0xAC, 0x12])
  GUID_DMUS_PROP_WavesReverb* = DEFINE_GUID(0x04CB5622'u32, 0x32E5, 0x11D2, [0xAF'u8, 0xA6, 0x00, 0xAA, 0x00, 0x24, 0xD8, 0xB6])
  GUID_DMUS_PROP_WriteLatency* = DEFINE_GUID(0x268A0FA0'u32, 0x60F2, 0x11D2, [0xAF'u8, 0xA6, 0x00, 0xAA, 0x00, 0x24, 0xD8, 0xB6])
  GUID_DMUS_PROP_WritePeriod* = DEFINE_GUID(0x268A0FA1'u32, 0x60F2, 0x11D2, [0xAF'u8, 0xA6, 0x00, 0xAA, 0x00, 0x24, 0xD8, 0xB6])
  GUID_DMUS_PROP_XG_Capable* = DEFINE_GUID(0x6496ABA1'u32, 0x61B0, 0x11D2, [0xAF'u8, 0xA6, 0x00, 0xAA, 0x00, 0x24, 0xD8, 0xB6])
  GUID_DMUS_PROP_XG_Hardware* = DEFINE_GUID(0x178F2F26'u32, 0xC364, 0x11D1, [0xA7'u8, 0x60, 0x00, 0x00, 0xF8, 0x75, 0xAC, 0x12])
  GUID_Download* = DEFINE_GUID(0xD2AC28A7'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_Enable_Auto_Download* = DEFINE_GUID(0xD2AC28A9'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_EnableTempo* = DEFINE_GUID(0x45FC707E'u32, 0x1DB4, 0x11D2, [0xBC'u8, 0xAC, 0x00, 0xA0, 0xC9, 0x22, 0xE6, 0xEB])
  GUID_EnableTimeSig* = DEFINE_GUID(0x45FC707C'u32, 0x1DB4, 0x11D2, [0xBC'u8, 0xAC, 0x00, 0xA0, 0xC9, 0x22, 0xE6, 0xEB])
  GUID_FONTBOLD* = DEFINE_GUID(0x6650430F'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_FONTITALIC* = DEFINE_GUID(0x66504310'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_FONTNAME* = DEFINE_GUID(0x6650430D'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_FONTSIZE* = DEFINE_GUID(0x6650430E'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_FONTSTRIKETHROUGH* = DEFINE_GUID(0x66504312'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_FONTUNDERSCORE* = DEFINE_GUID(0x66504311'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_Friction* = DEFINE_GUID(0x13541C2A'u32, 0x8E33, 0x11D0, [0x9A'u8, 0xD0, 0x00, 0xA0, 0xC9, 0xA0, 0x6E, 0x35])
  GUID_HANDLE* = DEFINE_GUID(0x66504313'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_HasPathProperties* = DEFINE_GUID(0x0002DE81'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  GUID_HIDClass* = DEFINE_GUID(0x745A17A0'u32, 0x74D3, 0x11D0, [0xB6'u8, 0xFE, 0x00, 0xA0, 0xC9, 0x0F, 0x57, 0xDA])
  GUID_HIMETRIC* = DEFINE_GUID(0x66504300'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_HWPROFILE_CHANGE_CANCELLED* = DEFINE_GUID(0xCB3A4002'u32, 0x46F0, 0x11D0, [0xB0'u8, 0x8F, 0x00, 0x60, 0x97, 0x13, 0x05, 0x3F])
  GUID_HWPROFILE_CHANGE_COMPLETE* = DEFINE_GUID(0xCB3A4003'u32, 0x46F0, 0x11D0, [0xB0'u8, 0x8F, 0x00, 0x60, 0x97, 0x13, 0x05, 0x3F])
  GUID_HWPROFILE_QUERY_CHANGE* = DEFINE_GUID(0xCB3A4001'u32, 0x46F0, 0x11D0, [0xB0'u8, 0x8F, 0x00, 0x60, 0x97, 0x13, 0x05, 0x3F])
  GUID_IDirectMusicBand* = DEFINE_GUID(0xD2AC28AC'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_IDirectMusicChordMap* = DEFINE_GUID(0xD2AC28AD'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_IDirectMusicStyle* = DEFINE_GUID(0xD2AC28A1'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_Inertia* = DEFINE_GUID(0x13541C29'u32, 0x8E33, 0x11D0, [0x9A'u8, 0xD0, 0x00, 0xA0, 0xC9, 0xA0, 0x6E, 0x35])
  GUID_INT_ROUTE_INTERFACE_STANDARD* = DEFINE_GUID(0x70941BF4'u32, 0x0073, 0x11D1, [0xA0'u8, 0x9E, 0x00, 0xC0, 0x4F, 0xC3, 0x40, 0xB1])
  GUID_Joystick* = DEFINE_GUID(0x6F1D2B70'u32, 0xD5A0, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_KernelCallbacks* = DEFINE_GUID(0x80863800'u32, 0x6B06, 0x11D0, [0x9B'u8, 0x06, 0x00, 0xA0, 0xC9, 0x03, 0xA3, 0xB8])
  GUID_KernelCaps* = DEFINE_GUID(0xFFAA7540'u32, 0x7AA8, 0x11D0, [0x9B'u8, 0x06, 0x00, 0xA0, 0xC9, 0x03, 0xA3, 0xB8])
  GUID_Key* = DEFINE_GUID(0x55728220'u32, 0xD33C, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_KeyboardClass* = DEFINE_GUID(0x4D36E96B'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_LEGACY_DEVICE_DETECTION_STANDAR* = DEFINE_GUID(0x50FEB0DE'u32, 0x596A, 0x11D2, [0xA5'u8, 0xB8, 0x00, 0x00, 0xF8, 0x1A, 0x46, 0x19])
  GUID_MediaClass* = DEFINE_GUID(0x4D36E96C'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_MF_ENUMERATION_INTERFACE* = DEFINE_GUID(0xAEB895F0'u32, 0x5586, 0x11D1, [0x8D'u8, 0x84, 0x00, 0xA0, 0xC9, 0x06, 0xB2, 0x44])
  GUID_Miscellaneous2Callbacks* = DEFINE_GUID(0x406B2F00'u32, 0x3E5A, 0x11D1, [0xB6'u8, 0x40, 0x00, 0xAA, 0x00, 0xA1, 0xF9, 0x6A])
  GUID_MiscellaneousCallbacks* = DEFINE_GUID(0xEFD60CC0'u32, 0x49E7, 0x11D0, [0x88'u8, 0x9D, 0x00, 0xAA, 0x00, 0xBB, 0xB7, 0x6A])
  GUID_MotionCompCallbacks* = DEFINE_GUID(0xB1122B40'u32, 0x5DA5, 0x11D1, [0x8F'u8, 0xCF, 0x00, 0xC0, 0x4F, 0xC2, 0x9B, 0x4E])
  GUID_MouseClass* = DEFINE_GUID(0x4D36E96F'u32, 0xE325, 0x11CE, [0xBF'u8, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18])
  GUID_MuteParam* = DEFINE_GUID(0xD2AC28AF'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_NDIS_802_11_ADD_WEP* = DEFINE_GUID(0x4307BFF0'u32, 0x2129, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_AUTHENTICATION_MODE* = DEFINE_GUID(0x43920A24'u32, 0x2129, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_BASIC_RATES* = DEFINE_GUID(0x4A198516'u32, 0x2068, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_BSSID* = DEFINE_GUID(0x2504B6C2'u32, 0x1FA5, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_BSSID_LIST* = DEFINE_GUID(0x69526F9A'u32, 0x2062, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_BSSID_LIST_SCAN* = DEFINE_GUID(0x0D9E01E1'u32, 0xBA70, 0x11D4, [0xB6'u8, 0x75, 0x00, 0x20, 0x48, 0x57, 0x03, 0x37])
  GUID_NDIS_802_11_CONFIGURATION* = DEFINE_GUID(0x4A4DF982'u32, 0x2068, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_DESIRED_RATES* = DEFINE_GUID(0x452EE08E'u32, 0x2536, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_DISASSOCIATE* = DEFINE_GUID(0x43671F40'u32, 0x2129, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_FRAGMENTATION_THRESH* = DEFINE_GUID(0x69AAA7C4'u32, 0x2062, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_INFRASTRUCTURE_MODE* = DEFINE_GUID(0x697D5A7E'u32, 0x2062, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_NETWORK_TYPE_IN_USE* = DEFINE_GUID(0x857E2326'u32, 0x2041, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_NETWORK_TYPES_SUPPOR* = DEFINE_GUID(0x8531D6E6'u32, 0x2041, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_NUMBER_OF_ANTENNAS* = DEFINE_GUID(0x01779336'u32, 0x2064, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_POWER_MODE* = DEFINE_GUID(0x85BE837C'u32, 0x2041, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_PRIVACY_FILTER* = DEFINE_GUID(0x6733C4E9'u32, 0x4792, 0x11D4, [0x97'u8, 0xF1, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_REMOVE_WEP* = DEFINE_GUID(0x433C345C'u32, 0x2129, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_RSSI* = DEFINE_GUID(0x1507DB16'u32, 0x2053, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_RSSI_TRIGGER* = DEFINE_GUID(0x155689B8'u32, 0x2053, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_RTS_THRESHOLD* = DEFINE_GUID(0x0134D07E'u32, 0x2064, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_RX_ANTENNA_SELECTED* = DEFINE_GUID(0x01AC07A2'u32, 0x2064, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_SSID* = DEFINE_GUID(0x7D2A90EA'u32, 0x2041, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_STATISTICS* = DEFINE_GUID(0x42BB73B0'u32, 0x2129, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_SUPPORTED_RATES* = DEFINE_GUID(0x49DB8722'u32, 0x2068, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_TX_ANTENNA_SELECTED* = DEFINE_GUID(0x01DBB74A'u32, 0x2064, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_TX_POWER_LEVEL* = DEFINE_GUID(0x11E6BA76'u32, 0x2053, 0x11D4, [0x97'u8, 0xEB, 0x00, 0xC0, 0x4F, 0x79, 0xC4, 0x03])
  GUID_NDIS_802_11_WEP_STATUS* = DEFINE_GUID(0xB027A21F'u32, 0x3CFA, 0x4125, [0x80'u8, 0x0B, 0x3F, 0x7A, 0x18, 0xFD, 0xDC, 0xDC])
  GUID_NDIS_802_3_CURRENT_ADDRESS* = DEFINE_GUID(0x44795700'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_802_3_MAC_OPTIONS* = DEFINE_GUID(0x44795703'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_802_3_MAXIMUM_LIST_SIZE* = DEFINE_GUID(0x44795702'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_802_3_MULTICAST_LIST* = DEFINE_GUID(0x44795701'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_802_3_PERMANENT_ADDRESS* = DEFINE_GUID(0x447956FF'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_802_3_RCV_ERROR_ALIGNMENT* = DEFINE_GUID(0x44795704'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_802_3_XMIT_MORE_COLLISIONS* = DEFINE_GUID(0x44795706'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_802_3_XMIT_ONE_COLLISION* = DEFINE_GUID(0x44795705'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_802_5_CURRENT_ADDRESS* = DEFINE_GUID(0x44795708'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_802_5_CURRENT_FUNCTIONAL* = DEFINE_GUID(0x44795709'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_802_5_CURRENT_GROUP* = DEFINE_GUID(0x4479570A'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_802_5_CURRENT_RING_STATE* = DEFINE_GUID(0xACF14032'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_802_5_CURRENT_RING_STATUS* = DEFINE_GUID(0x890A36EC'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_802_5_LAST_OPEN_STATUS* = DEFINE_GUID(0x4479570B'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_802_5_LINE_ERRORS* = DEFINE_GUID(0xACF14033'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_802_5_LOST_FRAMES* = DEFINE_GUID(0xACF14034'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_802_5_PERMANENT_ADDRESS* = DEFINE_GUID(0x44795707'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_ATM_HW_CURRENT_ADDRESS* = DEFINE_GUID(0x791AD1A1'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_ATM_MAX_AAL0_PACKET_SIZE* = DEFINE_GUID(0x791AD1A5'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_ATM_MAX_AAL1_PACKET_SIZE* = DEFINE_GUID(0x791AD1A6'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_ATM_MAX_AAL34_PACKET_SIZE* = DEFINE_GUID(0x791AD1A7'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_ATM_MAX_AAL5_PACKET_SIZE* = DEFINE_GUID(0x791AD191'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_ATM_MAX_ACTIVE_VCI_BITS* = DEFINE_GUID(0x791AD1A3'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_ATM_MAX_ACTIVE_VCS* = DEFINE_GUID(0x791AD1A2'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_ATM_MAX_ACTIVE_VPI_BITS* = DEFINE_GUID(0x791AD1A4'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_ATM_RCV_CELLS_DROPPED* = DEFINE_GUID(0x0A21480C'u32, 0xE35F, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_ATM_RCV_CELLS_OK* = DEFINE_GUID(0x0A21480A'u32, 0xE35F, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_ATM_SUPPORTED_AAL_TYPES* = DEFINE_GUID(0x791AD1A0'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_ATM_SUPPORTED_SERVICE_CATEG* = DEFINE_GUID(0x791AD19F'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_ATM_SUPPORTED_VC_RATES* = DEFINE_GUID(0x791AD19E'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_ATM_XMIT_CELLS_OK* = DEFINE_GUID(0x0A21480B'u32, 0xE35F, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_ENUMERATE_ADAPTER* = DEFINE_GUID(0x981F2D7F'u32, 0xB1F3, 0x11D0, [0x8D'u8, 0xD7, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_ENUMERATE_VC* = DEFINE_GUID(0x981F2D82'u32, 0xB1F3, 0x11D0, [0x8D'u8, 0xD7, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_FDDI_ATTACHMENT_TYPE* = DEFINE_GUID(0xACF1403D'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_FDDI_DOWNSTREAM_NODE_LONG* = DEFINE_GUID(0xACF1403F'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_FDDI_FRAME_ERRORS* = DEFINE_GUID(0xACF14040'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_FDDI_FRAMES_LOST* = DEFINE_GUID(0xACF14041'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_FDDI_LCONNECTION_STATE* = DEFINE_GUID(0xACF14045'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_FDDI_LCT_FAILURES* = DEFINE_GUID(0xACF14043'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_FDDI_LEM_REJECTS* = DEFINE_GUID(0xACF14044'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_FDDI_LONG_CURRENT_ADDR* = DEFINE_GUID(0xACF14036'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_FDDI_LONG_MAX_LIST_SIZE* = DEFINE_GUID(0xACF14038'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_FDDI_LONG_MULTICAST_LIST* = DEFINE_GUID(0xACF14037'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_FDDI_LONG_PERMANENT_ADDR* = DEFINE_GUID(0xACF14035'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_FDDI_RING_MGT_STATE* = DEFINE_GUID(0xACF14042'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_FDDI_SHORT_CURRENT_ADDR* = DEFINE_GUID(0xACF1403A'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_FDDI_SHORT_MAX_LIST_SIZE* = DEFINE_GUID(0xACF1403C'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_FDDI_SHORT_MULTICAST_LIST* = DEFINE_GUID(0xACF1403B'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_FDDI_SHORT_PERMANENT_ADDR* = DEFINE_GUID(0xACF14039'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_FDDI_UPSTREAM_NODE_LONG* = DEFINE_GUID(0xACF1403E'u32, 0xA61C, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_CO_DRIVER_VERSION* = DEFINE_GUID(0x791AD198'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_CO_HARDWARE_STATUS* = DEFINE_GUID(0x791AD192'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_CO_LINK_SPEED* = DEFINE_GUID(0x791AD195'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_CO_MAC_OPTIONS* = DEFINE_GUID(0x791AD19A'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_CO_MEDIA_CONNECT_STATU* = DEFINE_GUID(0x791AD19B'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_CO_MEDIA_IN_USE* = DEFINE_GUID(0x791AD194'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_CO_MEDIA_SUPPORTED* = DEFINE_GUID(0x791AD193'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_CO_MINIMUM_LINK_SPEED* = DEFINE_GUID(0x791AD19D'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_CO_RCV_PDUS_ERROR* = DEFINE_GUID(0x0A214808'u32, 0xE35F, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_CO_RCV_PDUS_NO_BUFFER* = DEFINE_GUID(0x0A214809'u32, 0xE35F, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_CO_RCV_PDUS_OK* = DEFINE_GUID(0x0A214806'u32, 0xE35F, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_CO_VENDOR_DESCRIPTION* = DEFINE_GUID(0x791AD197'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_CO_VENDOR_DRIVER_VERSI* = DEFINE_GUID(0x791AD19C'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_CO_VENDOR_ID* = DEFINE_GUID(0x791AD196'u32, 0xE35C, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_CO_XMIT_PDUS_ERROR* = DEFINE_GUID(0x0A214807'u32, 0xE35F, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_CO_XMIT_PDUS_OK* = DEFINE_GUID(0x0A214805'u32, 0xE35F, 0x11D0, [0x96'u8, 0x92, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_CURRENT_LOOKAHEAD* = DEFINE_GUID(0x5EC10361'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_CURRENT_PACKET_FILTER* = DEFINE_GUID(0x5EC10360'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_DRIVER_VERSION* = DEFINE_GUID(0x5EC10362'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_HARDWARE_STATUS* = DEFINE_GUID(0x5EC10354'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_LINK_SPEED* = DEFINE_GUID(0x5EC10359'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_MAC_OPTIONS* = DEFINE_GUID(0x5EC10365'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_MAXIMUM_FRAME_SIZE* = DEFINE_GUID(0x5EC10358'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_MAXIMUM_LOOKAHEAD* = DEFINE_GUID(0x5EC10357'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_MAXIMUM_SEND_PACKETS* = DEFINE_GUID(0x5EC10367'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_MAXIMUM_TOTAL_SIZE* = DEFINE_GUID(0x5EC10363'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_MEDIA_CONNECT_STATUS* = DEFINE_GUID(0x5EC10366'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_MEDIA_IN_USE* = DEFINE_GUID(0x5EC10356'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_MEDIA_SUPPORTED* = DEFINE_GUID(0x5EC10355'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_PHYSICAL_MEDIUM* = DEFINE_GUID(0x418CA16D'u32, 0x3937, 0x4208, [0x94'u8, 0x0A, 0xEC, 0x61, 0x96, 0x27, 0x80, 0x85])
  GUID_NDIS_GEN_RCV_ERROR* = DEFINE_GUID(0x447956FD'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_RCV_NO_BUFFER* = DEFINE_GUID(0x447956FE'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_RCV_OK* = DEFINE_GUID(0x447956FB'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_RECEIVE_BLOCK_SIZE* = DEFINE_GUID(0x5EC1035D'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_RECEIVE_BUFFER_SPACE* = DEFINE_GUID(0x5EC1035B'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_TRANSMIT_BLOCK_SIZE* = DEFINE_GUID(0x5EC1035C'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_TRANSMIT_BUFFER_SPACE* = DEFINE_GUID(0x5EC1035A'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_VENDOR_DESCRIPTION* = DEFINE_GUID(0x5EC1035F'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_VENDOR_DRIVER_VERSION* = DEFINE_GUID(0x447956F9'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_VENDOR_ID* = DEFINE_GUID(0x5EC1035E'u32, 0xA61A, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_VLAN_ID* = DEFINE_GUID(0x765DC702'u32, 0xC5E8, 0x4B67, [0x84'u8, 0x3B, 0x3F, 0x5A, 0x4F, 0xF2, 0x64, 0x8B])
  GUID_NDIS_GEN_XMIT_ERROR* = DEFINE_GUID(0x447956FC'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_GEN_XMIT_OK* = DEFINE_GUID(0x447956FA'u32, 0xA61B, 0x11D0, [0x8D'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_LAN_CLASS* = DEFINE_GUID(0xAD498944'u32, 0x762F, 0x11D0, [0x8D'u8, 0xCB, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_NOTIFY_ADAPTER_ARRIVAL* = DEFINE_GUID(0x981F2D81'u32, 0xB1F3, 0x11D0, [0x8D'u8, 0xD7, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_NOTIFY_ADAPTER_REMOVAL* = DEFINE_GUID(0x981F2D80'u32, 0xB1F3, 0x11D0, [0x8D'u8, 0xD7, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_NOTIFY_BIND* = DEFINE_GUID(0x5413531C'u32, 0xB1F3, 0x11D0, [0x8D'u8, 0xD7, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_NOTIFY_UNBIND* = DEFINE_GUID(0x6E3CE1EC'u32, 0xB1F3, 0x11D0, [0x8D'u8, 0xD7, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_NOTIFY_VC_ARRIVAL* = DEFINE_GUID(0x182F9E0C'u32, 0xB1F3, 0x11D0, [0x8D'u8, 0xD7, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_NOTIFY_VC_REMOVAL* = DEFINE_GUID(0x981F2D79'u32, 0xB1F3, 0x11D0, [0x8D'u8, 0xD7, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_STATUS_LINK_SPEED_CHANGE* = DEFINE_GUID(0x981F2D85'u32, 0xB1F3, 0x11D0, [0x8D'u8, 0xD7, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_STATUS_MEDIA_CONNECT* = DEFINE_GUID(0x981F2D7D'u32, 0xB1F3, 0x11D0, [0x8D'u8, 0xD7, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_STATUS_MEDIA_DISCONNECT* = DEFINE_GUID(0x981F2D7E'u32, 0xB1F3, 0x11D0, [0x8D'u8, 0xD7, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_STATUS_MEDIA_SPECIFIC_INDIC* = DEFINE_GUID(0x981F2D84'u32, 0xB1F3, 0x11D0, [0x8D'u8, 0xD7, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_STATUS_RESET_END* = DEFINE_GUID(0x981F2D77'u32, 0xB1F3, 0x11D0, [0x8D'u8, 0xD7, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_STATUS_RESET_START* = DEFINE_GUID(0x981F2D76'u32, 0xB1F3, 0x11D0, [0x8D'u8, 0xD7, 0x00, 0xC0, 0x4F, 0xC3, 0x35, 0x8C])
  GUID_NDIS_WAKE_ON_MAGIC_PACKET_ONLY* = DEFINE_GUID(0xA14F1C97'u32, 0x8839, 0x4F8A, [0x99'u8, 0x96, 0xA2, 0x89, 0x96, 0xEB, 0xBF, 0x1D])
  GUID_NETSHELL_PROPS* = DEFINE_GUID(0x2D15A9A1'u32, 0xA556, 0x4189, [0x91'u8, 0xAD, 0x02, 0x74, 0x58, 0xF1, 0x1A, 0x07])
  GUID_NonLocalVidMemCaps* = DEFINE_GUID(0x86C4FA80'u32, 0x8D84, 0x11D0, [0x94'u8, 0xE8, 0x00, 0xC0, 0x4F, 0xC3, 0x41, 0x37])
  GUID_NOTIFICATION_CHORD* = DEFINE_GUID(0xD2AC289B'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_NOTIFICATION_COMMAND* = DEFINE_GUID(0xD2AC289C'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_NOTIFICATION_MEASUREANDBEAT* = DEFINE_GUID(0xD2AC289A'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_NOTIFICATION_PERFORMANCE* = DEFINE_GUID(0x81F75BC5'u32, 0x4E5D, 0x11D2, [0xBC'u8, 0xC7, 0x00, 0xA0, 0xC9, 0x22, 0xE6, 0xEB])
  GUID_NOTIFICATION_SEGMENT* = DEFINE_GUID(0xD2AC2899'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_NULL* = DEFINE_GUID(0x00000000'u32, 0x0000, 0x0000, [0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
  GUID_OPTIONVALUEEXCLUSIVE* = DEFINE_GUID(0x6650430B'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_OptSurfaceKmodeInfo* = DEFINE_GUID(0xE05C8472'u32, 0x51D4, 0x11D1, [0x8C'u8, 0xCE, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0xA8])
  GUID_OptSurfaceUmodeInfo* = DEFINE_GUID(0x9D792804'u32, 0x5FA8, 0x11D1, [0x8C'u8, 0xD0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0xA8])
  GUID_PathProperty* = DEFINE_GUID(0x0002DE80'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  GUID_PCI_BUS_INTERFACE_STANDARD* = DEFINE_GUID(0x496B8281'u32, 0x6F25, 0x11D0, [0xBE'u8, 0xAF, 0x08, 0x00, 0x2B, 0xE2, 0x09, 0x2F])
  GUID_PCI_DEVICE_PRESENT_INTERFACE* = DEFINE_GUID(0xD1B82C26'u32, 0xBF49, 0x45EF, [0xB2'u8, 0x16, 0x71, 0xCB, 0xD7, 0x88, 0x9B, 0x57])
  GUID_PCMCIA_BUS_INTERFACE_STANDARD* = DEFINE_GUID(0x76173AF0'u32, 0xC504, 0x11D1, [0x94'u8, 0x7F, 0x00, 0xC0, 0x4F, 0xB9, 0x60, 0xEE])
  GUID_PerfAutoDownload* = DEFINE_GUID(0xFB09565B'u32, 0x3631, 0x11D2, [0xBC'u8, 0xB8, 0x00, 0xA0, 0xC9, 0x22, 0xE6, 0xEB])
  GUID_PerfMasterGrooveLevel* = DEFINE_GUID(0xD2AC28B2'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_PerfMasterTempo* = DEFINE_GUID(0xD2AC28B0'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_PerfMasterVolume* = DEFINE_GUID(0xD2AC28B1'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_PNP_CUSTOM_NOTIFICATION* = DEFINE_GUID(0xACA73F8E'u32, 0x8D23, 0x11D1, [0xAC'u8, 0x7D, 0x00, 0x00, 0xF8, 0x75, 0x71, 0xD0])
  GUID_PNP_POWER_NOTIFICATION* = DEFINE_GUID(0xC2CF0660'u32, 0xEB7A, 0x11D1, [0xBD'u8, 0x7F, 0x00, 0x00, 0xF8, 0x75, 0x71, 0xD0])
  GUID_POV* = DEFINE_GUID(0xA36D02F2'u32, 0xC9F3, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_POWER_DEVICE_ENABLE* = DEFINE_GUID(0x827C0A6F'u32, 0xFEB0, 0x11D0, [0xBD'u8, 0x26, 0x00, 0xAA, 0x00, 0xB7, 0xB3, 0x2A])
  GUID_POWER_DEVICE_TIMEOUTS* = DEFINE_GUID(0xA45DA735'u32, 0xFEB0, 0x11D0, [0xBD'u8, 0x26, 0x00, 0xAA, 0x00, 0xB7, 0xB3, 0x2A])
  GUID_POWER_DEVICE_WAKE_ENABLE* = DEFINE_GUID(0xA9546A82'u32, 0xFEB0, 0x11D0, [0xBD'u8, 0x26, 0x00, 0xAA, 0x00, 0xB7, 0xB3, 0x2A])
  GUID_QOS_BESTEFFORT_BANDWIDTH* = DEFINE_GUID(0xED885290'u32, 0x40EC, 0x11D1, [0x2C'u8, 0x91, 0x00, 0xAA, 0x00, 0x57, 0x49, 0x15])
  GUID_QOS_ENABLE_AVG_STATS* = DEFINE_GUID(0xBAFB6D11'u32, 0x27C4, 0x4801, [0xA4'u8, 0x6F, 0xEF, 0x80, 0x80, 0xC1, 0x88, 0xC8])
  GUID_QOS_ENABLE_WINDOW_ADJUSTMENT* = DEFINE_GUID(0xAA966725'u32, 0xD3E9, 0x4C55, [0xB3'u8, 0x35, 0x2A, 0x00, 0x27, 0x9A, 0x1E, 0x64])
  GUID_QOS_FLOW_8021P_CONFORMING* = DEFINE_GUID(0x08C1E013'u32, 0xFCD2, 0x11D2, [0xBE'u8, 0x1E, 0x00, 0xA0, 0xC9, 0x9E, 0xE6, 0x3B])
  GUID_QOS_FLOW_8021P_NONCONFORMING* = DEFINE_GUID(0x09023F91'u32, 0xFCD2, 0x11D2, [0xBE'u8, 0x1E, 0x00, 0xA0, 0xC9, 0x9E, 0xE6, 0x3B])
  GUID_QOS_FLOW_COUNT* = DEFINE_GUID(0x1147F880'u32, 0x40ED, 0x11D1, [0x2C'u8, 0x91, 0x00, 0xAA, 0x00, 0x57, 0x49, 0x15])
  GUID_QOS_FLOW_IP_CONFORMING* = DEFINE_GUID(0x07F99A8B'u32, 0xFCD2, 0x11D2, [0xBE'u8, 0x1E, 0x00, 0xA0, 0xC9, 0x9E, 0xE6, 0x3B])
  GUID_QOS_FLOW_IP_NONCONFORMING* = DEFINE_GUID(0x087A5987'u32, 0xFCD2, 0x11D2, [0xBE'u8, 0x1E, 0x00, 0xA0, 0xC9, 0x9E, 0xE6, 0x3B])
  GUID_QOS_FLOW_MODE* = DEFINE_GUID(0x5C82290A'u32, 0x515A, 0x11D2, [0x8E'u8, 0x58, 0x00, 0xC0, 0x4F, 0xC9, 0xBF, 0xCB])
  GUID_QOS_ISSLOW_FLOW* = DEFINE_GUID(0xABF273A4'u32, 0xEE07, 0x11D2, [0xBE'u8, 0x1B, 0x00, 0xA0, 0xC9, 0x9E, 0xE6, 0x3B])
  GUID_QOS_LATENCY* = DEFINE_GUID(0xFC408EF0'u32, 0x40EC, 0x11D1, [0x2C'u8, 0x91, 0x00, 0xAA, 0x00, 0x57, 0x49, 0x15])
  GUID_QOS_MAX_OUTSTANDING_SENDS* = DEFINE_GUID(0x161FFA86'u32, 0x6120, 0x11D1, [0x2C'u8, 0x91, 0x00, 0xAA, 0x00, 0x57, 0x49, 0x15])
  GUID_QOS_NON_BESTEFFORT_LIMIT* = DEFINE_GUID(0x185C44E0'u32, 0x40ED, 0x11D1, [0x2C'u8, 0x91, 0x00, 0xAA, 0x00, 0x57, 0x49, 0x15])
  GUID_QOS_REMAINING_BANDWIDTH* = DEFINE_GUID(0xC4C51720'u32, 0x40EC, 0x11D1, [0x2C'u8, 0x91, 0x00, 0xAA, 0x00, 0x57, 0x49, 0x15])
  GUID_QOS_STATISTICS_BUFFER* = DEFINE_GUID(0xBB2C0980'u32, 0xE900, 0x11D1, [0xB0'u8, 0x7E, 0x00, 0x80, 0xC7, 0x13, 0x82, 0xBF])
  GUID_QOS_TIMER_RESOLUTION* = DEFINE_GUID(0xBA10CC88'u32, 0xF13E, 0x11D2, [0xBE'u8, 0x1B, 0x00, 0xA0, 0xC9, 0x9E, 0xE6, 0x3B])
  GUID_RampForce* = DEFINE_GUID(0x13541C21'u32, 0x8E33, 0x11D0, [0x9A'u8, 0xD0, 0x00, 0xA0, 0xC9, 0xA0, 0x6E, 0x35])
  GUID_RhythmParam* = DEFINE_GUID(0xD2AC289F'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_RxAxis* = DEFINE_GUID(0xA36D02F4'u32, 0xC9F3, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_RyAxis* = DEFINE_GUID(0xA36D02F5'u32, 0xC9F3, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_RzAxis* = DEFINE_GUID(0xA36D02E3'u32, 0xC9F3, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_SawtoothDown* = DEFINE_GUID(0x13541C26'u32, 0x8E33, 0x11D0, [0x9A'u8, 0xD0, 0x00, 0xA0, 0xC9, 0xA0, 0x6E, 0x35])
  GUID_SawtoothUp* = DEFINE_GUID(0x13541C25'u32, 0x8E33, 0x11D0, [0x9A'u8, 0xD0, 0x00, 0xA0, 0xC9, 0xA0, 0x6E, 0x35])
  GUID_SeedVariations* = DEFINE_GUID(0x65B76FA5'u32, 0xFF37, 0x11D2, [0x81'u8, 0x4E, 0x00, 0xC0, 0x4F, 0xA3, 0x6E, 0x58])
  GUID_Sine* = DEFINE_GUID(0x13541C23'u32, 0x8E33, 0x11D0, [0x9A'u8, 0xD0, 0x00, 0xA0, 0xC9, 0xA0, 0x6E, 0x35])
  GUID_Slider* = DEFINE_GUID(0xA36D02E4'u32, 0xC9F3, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_Spring* = DEFINE_GUID(0x13541C27'u32, 0x8E33, 0x11D0, [0x9A'u8, 0xD0, 0x00, 0xA0, 0xC9, 0xA0, 0x6E, 0x35])
  GUID_Square* = DEFINE_GUID(0x13541C22'u32, 0x8E33, 0x11D0, [0x9A'u8, 0xD0, 0x00, 0xA0, 0xC9, 0xA0, 0x6E, 0x35])
  GUID_StandardMIDIFile* = DEFINE_GUID(0x06621075'u32, 0xE92E, 0x11D1, [0xA8'u8, 0xC5, 0x00, 0xC0, 0x4F, 0xA3, 0x72, 0x6E])
  GUID_SysKeyboard* = DEFINE_GUID(0x6F1D2B61'u32, 0xD5A0, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_SysKeyboardEm* = DEFINE_GUID(0x6F1D2B82'u32, 0xD5A0, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_SysKeyboardEm2* = DEFINE_GUID(0x6F1D2B83'u32, 0xD5A0, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_SysMouse* = DEFINE_GUID(0x6F1D2B60'u32, 0xD5A0, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_SysMouseEm* = DEFINE_GUID(0x6F1D2B80'u32, 0xD5A0, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_SysMouseEm2* = DEFINE_GUID(0x6F1D2B81'u32, 0xD5A0, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_TARGET_DEVICE_QUERY_REMOVE* = DEFINE_GUID(0xCB3A4006'u32, 0x46F0, 0x11D0, [0xB0'u8, 0x8F, 0x00, 0x60, 0x97, 0x13, 0x05, 0x3F])
  GUID_TARGET_DEVICE_REMOVE_CANCELLED* = DEFINE_GUID(0xCB3A4007'u32, 0x46F0, 0x11D0, [0xB0'u8, 0x8F, 0x00, 0x60, 0x97, 0x13, 0x05, 0x3F])
  GUID_TARGET_DEVICE_REMOVE_COMPLETE* = DEFINE_GUID(0xCB3A4008'u32, 0x46F0, 0x11D0, [0xB0'u8, 0x8F, 0x00, 0x60, 0x97, 0x13, 0x05, 0x3F])
  GUID_TempoParam* = DEFINE_GUID(0xD2AC28A5'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_TimeSignature* = DEFINE_GUID(0xD2AC28A4'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_TRANSLATOR_INTERFACE_STANDARD* = DEFINE_GUID(0x6C154A92'u32, 0xAACF, 0x11D0, [0x8D'u8, 0x2A, 0x00, 0xA0, 0xC9, 0x06, 0xB2, 0x44])
  GUID_Triangle* = DEFINE_GUID(0x13541C24'u32, 0x8E33, 0x11D0, [0x9A'u8, 0xD0, 0x00, 0xA0, 0xC9, 0xA0, 0x6E, 0x35])
  GUID_TRISTATE* = DEFINE_GUID(0x6650430A'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_Unknown* = DEFINE_GUID(0xA36D02F3'u32, 0xC9F3, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_Unload* = DEFINE_GUID(0xD2AC28A8'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  GUID_UserModeDriverInfo* = DEFINE_GUID(0xF0B0E8E2'u32, 0x5F97, 0x11D1, [0x8C'u8, 0xD0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0xA8])
  GUID_UserModeDriverPassword* = DEFINE_GUID(0x97F861B6'u32, 0x60A1, 0x11D1, [0x8C'u8, 0xD0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0xA8])
  GUID_VideoPortCallbacks* = DEFINE_GUID(0xEFD60CC1'u32, 0x49E7, 0x11D0, [0x88'u8, 0x9D, 0x00, 0xAA, 0x00, 0xBB, 0xB7, 0x6A])
  GUID_VideoPortCaps* = DEFINE_GUID(0xEFD60CC3'u32, 0x49E7, 0x11D0, [0x88'u8, 0x9D, 0x00, 0xAA, 0x00, 0xBB, 0xB7, 0x6A])
  GUID_XAxis* = DEFINE_GUID(0xA36D02E0'u32, 0xC9F3, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_XPOS* = DEFINE_GUID(0x66504306'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_XPOSPIXEL* = DEFINE_GUID(0x66504302'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_XSIZE* = DEFINE_GUID(0x66504308'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_XSIZEPIXEL* = DEFINE_GUID(0x66504304'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_YAxis* = DEFINE_GUID(0xA36D02E1'u32, 0xC9F3, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_YPOS* = DEFINE_GUID(0x66504307'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_YPOSPIXEL* = DEFINE_GUID(0x66504303'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_YSIZE* = DEFINE_GUID(0x66504309'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_YSIZEPIXEL* = DEFINE_GUID(0x66504305'u32, 0xBE0F, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  GUID_ZAxis* = DEFINE_GUID(0xA36D02E2'u32, 0xC9F3, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  GUID_ZPixelFormats* = DEFINE_GUID(0x93869880'u32, 0x36CF, 0x11D1, [0x9B'u8, 0x1B, 0x00, 0xAA, 0x00, 0xBB, 0xB8, 0xAE])
  IID_AsyncIAdviseSink* = DEFINE_GUID(0x00000150'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_AsyncIAdviseSink2* = DEFINE_GUID(0x00000151'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_AsyncIBackgroundCopyCallback* = DEFINE_GUID(0xCA29D251'u32, 0xB4BB, 0x4679, [0xA3'u8, 0xD9, 0xAE, 0x80, 0x06, 0x11, 0x9D, 0x54])
  IID_AsyncIClusCfgBaseCluster* = DEFINE_GUID(0xA8A5C614'u32, 0x2518, 0x47F5, [0x96'u8, 0xCA, 0xCA, 0xFA, 0x7F, 0xFB, 0xAF, 0x68])
  IID_AsyncIClusCfgCallback* = DEFINE_GUID(0xEBCE8945'u32, 0xAC69, 0x4B3A, [0x86'u8, 0x5D, 0xE2, 0xD4, 0xEB, 0x33, 0xE4, 0x1B])
  IID_AsyncIClusCfgClusterInfo* = DEFINE_GUID(0x8BDBA247'u32, 0x04F5, 0x4114, [0x83'u8, 0x7E, 0xB2, 0x63, 0x41, 0x2A, 0x4B, 0x64])
  IID_AsyncIClusCfgCredentials* = DEFINE_GUID(0x54AA9406'u32, 0xA409, 0x4B49, [0xB3'u8, 0x14, 0x5F, 0x0A, 0x0C, 0xE4, 0xC8, 0x8F])
  IID_AsyncIClusCfgEvictCleanup* = DEFINE_GUID(0x6FE3E362'u32, 0xD373, 0x4C5F, [0xA0'u8, 0xAF, 0x1D, 0xFE, 0x84, 0x93, 0xC6, 0x55])
  IID_AsyncIClusCfgInitialize* = DEFINE_GUID(0x2A0EB82E'u32, 0xF878, 0x492A, [0x95'u8, 0x1E, 0xAE, 0x00, 0x09, 0x18, 0xC4, 0xA6])
  IID_AsyncIClusCfgIPAddressInfo* = DEFINE_GUID(0xAAEAF0A5'u32, 0xE310, 0x4604, [0xA5'u8, 0x5E, 0x2F, 0x9D, 0xDC, 0x41, 0x57, 0xA9])
  IID_AsyncIClusCfgManagedResourceInfo* = DEFINE_GUID(0x73616028'u32, 0x1243, 0x4749, [0xAD'u8, 0x84, 0x0B, 0x5E, 0xB3, 0x58, 0xFF, 0xA0])
  IID_AsyncIClusCfgMemberSetChangeListe* = DEFINE_GUID(0x2B645350'u32, 0x2643, 0x4ABC, [0xA4'u8, 0xE5, 0x82, 0x4D, 0x88, 0x1B, 0x75, 0x82])
  IID_AsyncIClusCfgNetworkInfo* = DEFINE_GUID(0xED71FD2D'u32, 0xAD02, 0x4DFC, [0xB3'u8, 0x76, 0x5F, 0xFA, 0x5F, 0x5A, 0x7C, 0x2C])
  IID_AsyncIClusCfgNodeInfo* = DEFINE_GUID(0x4F3BB40B'u32, 0xDF27, 0x40A0, [0xB3'u8, 0x1A, 0xBA, 0x18, 0x32, 0x4C, 0xEB, 0x9D])
  IID_AsyncIClusCfgPartitionInfo* = DEFINE_GUID(0xEC1EBD9F'u32, 0x5866, 0x4846, [0x89'u8, 0x52, 0xEC, 0x36, 0xC3, 0x96, 0x1E, 0xEF])
  IID_AsyncIClusCfgResourceTypeCreate* = DEFINE_GUID(0x3AFCE3B9'u32, 0x5F3E, 0x4DDF, [0xA8'u8, 0xF4, 0x4B, 0x4F, 0xCB, 0xF2, 0x8F, 0x8F])
  IID_AsyncIClusCfgResourceTypeInfo* = DEFINE_GUID(0xC649A282'u32, 0xC847, 0x4F5C, [0x98'u8, 0x41, 0xD2, 0xF7, 0x3B, 0x5A, 0xA7, 0x1D])
  IID_AsyncIClusCfgServer* = DEFINE_GUID(0x2A1640AA'u32, 0x4561, 0x4A08, [0xB5'u8, 0xD9, 0x0A, 0xA3, 0x8C, 0x6B, 0xE6, 0x28])
  IID_AsyncIClusCfgStartupListener* = DEFINE_GUID(0xD282CAF0'u32, 0x2EDE, 0x4AB9, [0xA5'u8, 0xD5, 0xF7, 0xBD, 0xE3, 0xD2, 0x3F, 0x10])
  IID_AsyncIClusCfgStartupNotify* = DEFINE_GUID(0xC2B0D06A'u32, 0x6353, 0x4EE1, [0xB2'u8, 0x53, 0x6B, 0x0D, 0x75, 0xDB, 0x2C, 0xD3])
  IID_AsyncIEnumClusCfgIPAddresses* = DEFINE_GUID(0xBD5F35BA'u32, 0x0BC0, 0x455F, [0x92'u8, 0x6D, 0xC3, 0xD3, 0x56, 0x41, 0x94, 0x87])
  IID_AsyncIEnumClusCfgManagedResource* = DEFINE_GUID(0xB138483F'u32, 0x9695, 0x4FA6, [0xA9'u8, 0x8F, 0x0D, 0xE2, 0xFB, 0x35, 0x54, 0x49])
  IID_AsyncIEnumClusCfgNetworks* = DEFINE_GUID(0xF56B9B0D'u32, 0xE7B8, 0x49EC, [0xA8'u8, 0x43, 0x54, 0x75, 0x07, 0x6B, 0x94, 0x7D])
  IID_AsyncIEnumClusCfgPartitions* = DEFINE_GUID(0x4440BB6A'u32, 0xB0AC, 0x479D, [0xB5'u8, 0x34, 0x72, 0x65, 0xA3, 0x1D, 0x6C, 0x56])
  IID_AsyncIMultiQI* = DEFINE_GUID(0x000E0020'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_AsyncIPipeByte* = DEFINE_GUID(0xDB2F3ACB'u32, 0x2F86, 0x11D1, [0x8E'u8, 0x04, 0x00, 0xC0, 0x4F, 0xB9, 0x98, 0x9A])
  IID_AsyncIPipeDouble* = DEFINE_GUID(0xDB2F3ACF'u32, 0x2F86, 0x11D1, [0x8E'u8, 0x04, 0x00, 0xC0, 0x4F, 0xB9, 0x98, 0x9A])
  IID_AsyncIPipeLong* = DEFINE_GUID(0xDB2F3ACD'u32, 0x2F86, 0x11D1, [0x8E'u8, 0x04, 0x00, 0xC0, 0x4F, 0xB9, 0x98, 0x9A])
  IID_AsyncIUnknown* = DEFINE_GUID(0x000E0000'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_DFConstraint* = DEFINE_GUID(0x4A3DF050'u32, 0x23BD, 0x11D2, [0x93'u8, 0x9F, 0x00, 0xA0, 0xC9, 0x1E, 0xED, 0xBA])
  IID_DIEnumWbemClassObject* = DEFINE_GUID(0xCB7CA037'u32, 0xF729, 0x11D0, [0x9E'u8, 0x4D, 0x00, 0xC0, 0x4F, 0xC3, 0x24, 0xA8])
  IID_DIWbemCallResult* = DEFINE_GUID(0xCB7CA039'u32, 0xF729, 0x11D0, [0x9E'u8, 0x4D, 0x00, 0xC0, 0x4F, 0xC3, 0x24, 0xA8])
  IID_DIWbemClassObject* = DEFINE_GUID(0xCB7CA033'u32, 0xF729, 0x11D0, [0x9E'u8, 0x4D, 0x00, 0xC0, 0x4F, 0xC3, 0x24, 0xA8])
  IID_DIWbemContext* = DEFINE_GUID(0xCB7CA038'u32, 0xF729, 0x11D0, [0x9E'u8, 0x4D, 0x00, 0xC0, 0x4F, 0xC3, 0x24, 0xA8])
  IID_DIWbemLocator* = DEFINE_GUID(0xCB7CA035'u32, 0xF729, 0x11D0, [0x9E'u8, 0x4D, 0x00, 0xC0, 0x4F, 0xC3, 0x24, 0xA8])
  IID_DIWbemObjectSink* = DEFINE_GUID(0xCB7CA036'u32, 0xF729, 0x11D0, [0x9E'u8, 0x4D, 0x00, 0xC0, 0x4F, 0xC3, 0x24, 0xA8])
  IID_DIWbemQualifierSet* = DEFINE_GUID(0xCB7CA034'u32, 0xF729, 0x11D0, [0x9E'u8, 0x4D, 0x00, 0xC0, 0x4F, 0xC3, 0x24, 0xA8])
  IID_DIWbemServices* = DEFINE_GUID(0xCB7CA03A'u32, 0xF729, 0x11D0, [0x9E'u8, 0x4D, 0x00, 0xC0, 0x4F, 0xC3, 0x24, 0xA8])
  IID_Folder* = DEFINE_GUID(0xBBCBDE60'u32, 0xC3FF, 0x11CE, [0x83'u8, 0x50, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_Folder2* = DEFINE_GUID(0xF0D2D8EF'u32, 0x3890, 0x11D2, [0xBF'u8, 0x8B, 0x00, 0xC0, 0x4F, 0xB9, 0x36, 0x61])
  IID_Folder3* = DEFINE_GUID(0xA7AE5F64'u32, 0xC4D7, 0x4D7F, [0x93'u8, 0x07, 0x4D, 0x24, 0xEE, 0x54, 0xB8, 0x41])
  IID_FolderItem* = DEFINE_GUID(0xFAC32C80'u32, 0xCBE4, 0x11CE, [0x83'u8, 0x50, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_FolderItem2* = DEFINE_GUID(0xEDC817AA'u32, 0x92B8, 0x11D1, [0xB0'u8, 0x75, 0x00, 0xC0, 0x4F, 0xC3, 0x3A, 0xA5])
  IID_FolderItems* = DEFINE_GUID(0x744129E0'u32, 0xCBE5, 0x11CE, [0x83'u8, 0x50, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_FolderItems2* = DEFINE_GUID(0xC94F0AD0'u32, 0xF363, 0x11D2, [0xA3'u8, 0x27, 0x00, 0xC0, 0x4F, 0x8E, 0xEC, 0x7F])
  IID_FolderItems3* = DEFINE_GUID(0xEAA7C309'u32, 0xBBEC, 0x49D5, [0x82'u8, 0x1D, 0x64, 0xD9, 0x66, 0xCB, 0x66, 0x7F])
  IID_FolderItemVerb* = DEFINE_GUID(0x08EC3E00'u32, 0x50B0, 0x11CF, [0x96'u8, 0x0C, 0x00, 0x80, 0xC7, 0xF4, 0xEE, 0x85])
  IID_FolderItemVerbs* = DEFINE_GUID(0x1F8352C0'u32, 0x50B0, 0x11CF, [0x96'u8, 0x0C, 0x00, 0x80, 0xC7, 0xF4, 0xEE, 0x85])
  IID_IAccessControl* = DEFINE_GUID(0xEEDD23E0'u32, 0x8410, 0x11CE, [0xA1'u8, 0xC3, 0x08, 0x00, 0x2B, 0x2B, 0x8D, 0x8F])
  IID_IAccessible* = DEFINE_GUID(0x618736E0'u32, 0x3C3D, 0x11CF, [0x81'u8, 0x0C, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71])
  IID_IAccessibleHandler* = DEFINE_GUID(0x03022430'u32, 0xABC4, 0x11D0, [0xBD'u8, 0xE2, 0x00, 0xAA, 0x00, 0x1A, 0x19, 0x53])
  IID_IAccessor* = DEFINE_GUID(0x0C733A8C'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IAccIdentity* = DEFINE_GUID(0x7852B78D'u32, 0x1CFD, 0x41C1, [0xA6'u8, 0x15, 0x9C, 0x0C, 0x85, 0x96, 0x0B, 0x5F])
  IID_IAccountDiscovery* = DEFINE_GUID(0xFA202BBC'u32, 0x6ABE, 0x4C17, [0xB1'u8, 0x84, 0x57, 0x0B, 0x6C, 0xF2, 0x56, 0xA6])
  IID_IAccPropServer* = DEFINE_GUID(0x76C0DBBB'u32, 0x15E0, 0x4E7B, [0xB6'u8, 0x1B, 0x20, 0xEE, 0xEA, 0x20, 0x01, 0xE0])
  IID_IAccPropServices* = DEFINE_GUID(0x6E26E776'u32, 0x04F0, 0x495D, [0x80'u8, 0xE4, 0x33, 0x30, 0x35, 0x2E, 0x31, 0x69])
  IID_IACList* = DEFINE_GUID(0x77A130B0'u32, 0x94FD, 0x11D0, [0xA5'u8, 0x44, 0x00, 0xC0, 0x4F, 0xD7, 0xD0, 0x62])
  IID_IACList2* = DEFINE_GUID(0x470141A0'u32, 0x5186, 0x11D2, [0xBB'u8, 0xB6, 0x00, 0x60, 0x97, 0x7B, 0x46, 0x4C])
  IID_IActionProgress* = DEFINE_GUID(0x49FF1173'u32, 0xEADC, 0x446D, [0x92'u8, 0x85, 0x15, 0x64, 0x53, 0xA6, 0x43, 0x1C])
  IID_IActionProgressDialog* = DEFINE_GUID(0x49FF1172'u32, 0xEADC, 0x446D, [0x92'u8, 0x85, 0x15, 0x64, 0x53, 0xA6, 0x43, 0x1C])
  IID_IActiveDesktop* = DEFINE_GUID(0xF490EB00'u32, 0x1240, 0x11D1, [0x98'u8, 0x88, 0x00, 0x60, 0x97, 0xDE, 0xAC, 0xF9])
  IID_IActiveIME* = DEFINE_GUID(0x6FE20962'u32, 0xD077, 0x11D0, [0x8F'u8, 0xE7, 0x00, 0xAA, 0x00, 0x6B, 0xCC, 0x59])
  IID_IActiveIME2* = DEFINE_GUID(0xE1C4BF0E'u32, 0x2D53, 0x11D2, [0x93'u8, 0xE1, 0x00, 0x60, 0xB0, 0x67, 0xB8, 0x6E])
  IID_IActiveIMMApp* = DEFINE_GUID(0x08C0E040'u32, 0x62D1, 0x11D1, [0x93'u8, 0x26, 0x00, 0x60, 0xB0, 0x67, 0xB8, 0x6E])
  IID_IActiveIMMIME* = DEFINE_GUID(0x08C03411'u32, 0xF96B, 0x11D0, [0xA4'u8, 0x75, 0x00, 0xAA, 0x00, 0x6B, 0xCC, 0x59])
  IID_IActiveIMMMessagePumpOwner* = DEFINE_GUID(0xB5CF2CFA'u32, 0x8AEB, 0x11D1, [0x93'u8, 0x64, 0x00, 0x60, 0xB0, 0x67, 0xB8, 0x6E])
  IID_IActiveIMMRegistrar* = DEFINE_GUID(0xB3458082'u32, 0xBD00, 0x11D1, [0x93'u8, 0x9B, 0x00, 0x60, 0xB0, 0x67, 0xB8, 0x6E])
  IID_IActiveScript* = DEFINE_GUID(0xBB1A2AE1'u32, 0xA4F9, 0x11CF, [0x8F'u8, 0x20, 0x00, 0x80, 0x5F, 0x2C, 0xD0, 0x64])
  IID_IActiveScriptAuthor* = DEFINE_GUID(0x9C109DA0'u32, 0x7006, 0x11D1, [0xB3'u8, 0x6C, 0x00, 0xA0, 0xC9, 0x11, 0xE8, 0xB2])
  IID_IActiveScriptAuthorProcedure* = DEFINE_GUID(0x7E2D4B70'u32, 0xBD9A, 0x11D0, [0x93'u8, 0x36, 0x00, 0xA0, 0xC9, 0x0D, 0xCA, 0xA9])
  IID_IActiveScriptDebug* = DEFINE_GUID(0x51973C10'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IActiveScriptDebug32* = DEFINE_GUID(0x51973C10'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IActiveScriptDebug64* = DEFINE_GUID(0xBC437E23'u32, 0xF5B8, 0x47F4, [0xBB'u8, 0x79, 0x7D, 0x1C, 0xE5, 0x48, 0x3B, 0x86])
  IID_IActiveScriptEncode* = DEFINE_GUID(0xBB1A2AE3'u32, 0xA4F9, 0x11CF, [0x8F'u8, 0x20, 0x00, 0x80, 0x5F, 0x2C, 0xD0, 0x64])
  IID_IActiveScriptError* = DEFINE_GUID(0xEAE1BA61'u32, 0xA4ED, 0x11CF, [0x8F'u8, 0x20, 0x00, 0x80, 0x5F, 0x2C, 0xD0, 0x64])
  IID_IActiveScriptError64* = DEFINE_GUID(0xB21FB2A1'u32, 0x5B8F, 0x4963, [0x8C'u8, 0x21, 0x21, 0x45, 0x0F, 0x84, 0xED, 0x7F])
  IID_IActiveScriptErrorDebug* = DEFINE_GUID(0x51973C12'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IActiveScriptGarbageCollector* = DEFINE_GUID(0x6AA2C4A0'u32, 0x2B53, 0x11D4, [0xA2'u8, 0xA0, 0x00, 0x10, 0x4B, 0xD3, 0x50, 0x90])
  IID_IActiveScriptHostEncode* = DEFINE_GUID(0xBEE9B76E'u32, 0xCFE3, 0x11D1, [0xB7'u8, 0x47, 0x00, 0xC0, 0x4F, 0xC2, 0xB0, 0x85])
  IID_IActiveScriptParse* = DEFINE_GUID(0xBB1A2AE2'u32, 0xA4F9, 0x11CF, [0x8F'u8, 0x20, 0x00, 0x80, 0x5F, 0x2C, 0xD0, 0x64])
  IID_IActiveScriptParse32* = DEFINE_GUID(0xBB1A2AE2'u32, 0xA4F9, 0x11CF, [0x8F'u8, 0x20, 0x00, 0x80, 0x5F, 0x2C, 0xD0, 0x64])
  IID_IActiveScriptParse64* = DEFINE_GUID(0xC7EF7658'u32, 0xE1EE, 0x480E, [0x97'u8, 0xEA, 0xD5, 0x2C, 0xB4, 0xD7, 0x6D, 0x17])
  IID_IActiveScriptParseProcedure* = DEFINE_GUID(0xAA5B6A80'u32, 0xB834, 0x11D0, [0x93'u8, 0x2F, 0x00, 0xA0, 0xC9, 0x0D, 0xCA, 0xA9])
  IID_IActiveScriptParseProcedure2_32* = DEFINE_GUID(0x71EE5B20'u32, 0xFB04, 0x11D1, [0xB3'u8, 0xA8, 0x00, 0xA0, 0xC9, 0x11, 0xE8, 0xB2])
  IID_IActiveScriptParseProcedure2_64* = DEFINE_GUID(0xFE7C4271'u32, 0x210C, 0x448D, [0x9F'u8, 0x54, 0x76, 0xDA, 0xB7, 0x04, 0x7B, 0x28])
  IID_IActiveScriptParseProcedure32* = DEFINE_GUID(0xAA5B6A80'u32, 0xB834, 0x11D0, [0x93'u8, 0x2F, 0x00, 0xA0, 0xC9, 0x0D, 0xCA, 0xA9])
  IID_IActiveScriptParseProcedure64* = DEFINE_GUID(0xC64713B6'u32, 0xE029, 0x4CC5, [0x92'u8, 0x00, 0x43, 0x8B, 0x72, 0x89, 0x0B, 0x6A])
  IID_IActiveScriptParseProcedureOld* = DEFINE_GUID(0x1CFF0050'u32, 0x6FDD, 0x11D0, [0x93'u8, 0x28, 0x00, 0xA0, 0xC9, 0x0D, 0xCA, 0xA9])
  IID_IActiveScriptParseProcedureOld32* = DEFINE_GUID(0x1CFF0050'u32, 0x6FDD, 0x11D0, [0x93'u8, 0x28, 0x00, 0xA0, 0xC9, 0x0D, 0xCA, 0xA9])
  IID_IActiveScriptParseProcedureOld64* = DEFINE_GUID(0x21F57128'u32, 0x08C9, 0x4638, [0xBA'u8, 0x12, 0x22, 0xD1, 0x5D, 0x88, 0xDC, 0x5C])
  IID_IActiveScriptProperty* = DEFINE_GUID(0x4954E0D0'u32, 0xFBC7, 0x11D1, [0x84'u8, 0x10, 0x00, 0x60, 0x08, 0xC3, 0xFB, 0xFC])
  IID_IActiveScriptSIPInfo* = DEFINE_GUID(0x764651D0'u32, 0x38DE, 0x11D4, [0xA2'u8, 0xA3, 0x00, 0x10, 0x4B, 0xD3, 0x50, 0x90])
  IID_IActiveScriptSite* = DEFINE_GUID(0xDB01A1E3'u32, 0xA42B, 0x11CF, [0x8F'u8, 0x20, 0x00, 0x80, 0x5F, 0x2C, 0xD0, 0x64])
  IID_IActiveScriptSiteDebug32* = DEFINE_GUID(0x51973C11'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IActiveScriptSiteDebug64* = DEFINE_GUID(0xD6B96B0A'u32, 0x7463, 0x402C, [0x92'u8, 0xAC, 0x89, 0x98, 0x42, 0x26, 0x94, 0x2F])
  IID_IActiveScriptSiteInterruptPoll* = DEFINE_GUID(0x539698A0'u32, 0xCDCA, 0x11CF, [0xA5'u8, 0xEB, 0x00, 0xAA, 0x00, 0x47, 0xA0, 0x63])
  IID_IActiveScriptSiteWindow* = DEFINE_GUID(0xD10F6761'u32, 0x83E9, 0x11CF, [0x8F'u8, 0x20, 0x00, 0x80, 0x5F, 0x2C, 0xD0, 0x64])
  IID_IActiveScriptStats* = DEFINE_GUID(0xB8DA6310'u32, 0xE19B, 0x11D0, [0x93'u8, 0x3C, 0x00, 0xA0, 0xC9, 0x0D, 0xCA, 0xA9])
  IID_IActiveXSafetyProvider* = DEFINE_GUID(0x69FF5101'u32, 0xFC63, 0x11D0, [0x97'u8, 0xEB, 0x00, 0xAA, 0x00, 0x61, 0x53, 0x33])
  IID_IAdapterInfo* = DEFINE_GUID(0x480BF94A'u32, 0x09FD, 0x4F8A, [0xA3'u8, 0xE0, 0xB0, 0x70, 0x02, 0x82, 0xD8, 0x4D])
  IID_IAdapterNotificationSink* = DEFINE_GUID(0x44AB2DC3'u32, 0x23B2, 0x47DE, [0x82'u8, 0x28, 0x2E, 0x1C, 0xCE, 0xEB, 0x99, 0x11])
  IID_IAddEvents* = DEFINE_GUID(0xD710A6AE'u32, 0x3371, 0x11D1, [0xBE'u8, 0x5B, 0x00, 0xC0, 0x4F, 0xC9, 0xE2, 0xBB])
  IID_IAddressBarParser* = DEFINE_GUID(0xC9D81948'u32, 0x443A, 0x40C7, [0x94'u8, 0x5C, 0x5E, 0x17, 0x1B, 0x8C, 0x66, 0xB4])
  IID_IAddrExclusionControl* = DEFINE_GUID(0x00000148'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IAddrTrackingControl* = DEFINE_GUID(0x00000147'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IADs* = DEFINE_GUID(0xFD8256D0'u32, 0xFD15, 0x11CE, [0xAB'u8, 0xC4, 0x02, 0x60, 0x8C, 0x9E, 0x75, 0x53])
  IID_IADsAccessControlEntry* = DEFINE_GUID(0xB4F3A14C'u32, 0x9BDD, 0x11D0, [0x85'u8, 0x2C, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  IID_IADsAccessControlList* = DEFINE_GUID(0xB7EE91CC'u32, 0x9BDD, 0x11D0, [0x85'u8, 0x2C, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  IID_IADsAcePrivate* = DEFINE_GUID(0xFD145DF2'u32, 0xFD96, 0x4135, [0x9B'u8, 0x22, 0x68, 0xFF, 0x0F, 0x6B, 0xF5, 0xBB])
  IID_IADsAcl* = DEFINE_GUID(0x8452D3AB'u32, 0x0869, 0x11D1, [0xA3'u8, 0x77, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  IID_IADsADSystemInfo* = DEFINE_GUID(0x5BB11929'u32, 0xAFD1, 0x11D2, [0x9C'u8, 0xB9, 0x00, 0x00, 0xF8, 0x7A, 0x36, 0x9E])
  IID_IADsBackLink* = DEFINE_GUID(0xFD1302BD'u32, 0x4080, 0x11D1, [0xA3'u8, 0xAC, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  IID_IADsCaseIgnoreList* = DEFINE_GUID(0x7B66B533'u32, 0x4680, 0x11D1, [0xA3'u8, 0xB4, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  IID_IADsClass* = DEFINE_GUID(0xC8F93DD0'u32, 0x4AE0, 0x11CF, [0x9E'u8, 0x73, 0x00, 0xAA, 0x00, 0x4A, 0x56, 0x91])
  IID_IADsCollection* = DEFINE_GUID(0x72B945E0'u32, 0x253B, 0x11CF, [0xA9'u8, 0x88, 0x00, 0xAA, 0x00, 0x6B, 0xC1, 0x49])
  IID_IADsComputer* = DEFINE_GUID(0xEFE3CC70'u32, 0x1D9F, 0x11CF, [0xB1'u8, 0xF3, 0x02, 0x60, 0x8C, 0x9E, 0x75, 0x53])
  IID_IADsComputerOperations* = DEFINE_GUID(0xEF497680'u32, 0x1D9F, 0x11CF, [0xB1'u8, 0xF3, 0x02, 0x60, 0x8C, 0x9E, 0x75, 0x53])
  IID_IADsContainer* = DEFINE_GUID(0x001677D0'u32, 0xFD16, 0x11CE, [0xAB'u8, 0xC4, 0x02, 0x60, 0x8C, 0x9E, 0x75, 0x53])
  IID_IADsDeleteOps* = DEFINE_GUID(0xB2BD0902'u32, 0x8878, 0x11D1, [0x8C'u8, 0x21, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  IID_IADsDNWithBinary* = DEFINE_GUID(0x7E99C0A2'u32, 0xF935, 0x11D2, [0xBA'u8, 0x96, 0x00, 0xC0, 0x4F, 0xB6, 0xD0, 0xD1])
  IID_IADsDNWithString* = DEFINE_GUID(0x370DF02E'u32, 0xF934, 0x11D2, [0xBA'u8, 0x96, 0x00, 0xC0, 0x4F, 0xB6, 0xD0, 0xD1])
  IID_IADsDomain* = DEFINE_GUID(0x00E4C220'u32, 0xFD16, 0x11CE, [0xAB'u8, 0xC4, 0x02, 0x60, 0x8C, 0x9E, 0x75, 0x53])
  IID_IADsEmail* = DEFINE_GUID(0x97AF011A'u32, 0x478E, 0x11D1, [0xA3'u8, 0xB4, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  IID_IADsExtension* = DEFINE_GUID(0x3D35553C'u32, 0xD2B0, 0x11D1, [0xB1'u8, 0x7B, 0x00, 0x00, 0xF8, 0x75, 0x93, 0xA0])
  IID_IADsFaxNumber* = DEFINE_GUID(0xA910DEA9'u32, 0x4680, 0x11D1, [0xA3'u8, 0xB4, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  IID_IADsFileService* = DEFINE_GUID(0xA89D1900'u32, 0x31CA, 0x11CF, [0xA9'u8, 0x8A, 0x00, 0xAA, 0x00, 0x6B, 0xC1, 0x49])
  IID_IADsFileServiceOperations* = DEFINE_GUID(0xA02DED10'u32, 0x31CA, 0x11CF, [0xA9'u8, 0x8A, 0x00, 0xAA, 0x00, 0x6B, 0xC1, 0x49])
  IID_IADsFileShare* = DEFINE_GUID(0xEB6DCAF0'u32, 0x4B83, 0x11CF, [0xA9'u8, 0x95, 0x00, 0xAA, 0x00, 0x6B, 0xC1, 0x49])
  IID_IADsGroup* = DEFINE_GUID(0x27636B00'u32, 0x410F, 0x11CF, [0xB1'u8, 0xFF, 0x02, 0x60, 0x8C, 0x9E, 0x75, 0x53])
  IID_IADsHold* = DEFINE_GUID(0xB3EB3B37'u32, 0x4080, 0x11D1, [0xA3'u8, 0xAC, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  IID_IADsLargeInteger* = DEFINE_GUID(0x9068270B'u32, 0x0939, 0x11D1, [0x8B'u8, 0xE1, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  IID_IADsLocality* = DEFINE_GUID(0xA05E03A2'u32, 0xEFFE, 0x11CF, [0x8A'u8, 0xBC, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  IID_IADsMembers* = DEFINE_GUID(0x451A0030'u32, 0x72EC, 0x11CF, [0xB0'u8, 0x3B, 0x00, 0xAA, 0x00, 0x6E, 0x09, 0x75])
  IID_IADsNamespaces* = DEFINE_GUID(0x28B96BA0'u32, 0xB330, 0x11CF, [0xA9'u8, 0xAD, 0x00, 0xAA, 0x00, 0x6B, 0xC1, 0x49])
  IID_IADsNameTranslate* = DEFINE_GUID(0xB1B272A3'u32, 0x3625, 0x11D1, [0xA3'u8, 0xA4, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  IID_IADsNetAddress* = DEFINE_GUID(0xB21A50A9'u32, 0x4080, 0x11D1, [0xA3'u8, 0xAC, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  IID_IADsO* = DEFINE_GUID(0xA1CD2DC6'u32, 0xEFFE, 0x11CF, [0x8A'u8, 0xBC, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  IID_IADsObjectOptions* = DEFINE_GUID(0x46F14FDA'u32, 0x232B, 0x11D1, [0xA8'u8, 0x08, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0xA8])
  IID_IADsObjOptPrivate* = DEFINE_GUID(0x81CBB829'u32, 0x1867, 0x11D2, [0x92'u8, 0x20, 0x00, 0xC0, 0x4F, 0xB6, 0xD0, 0xD1])
  IID_IADsOctetList* = DEFINE_GUID(0x7B28B80F'u32, 0x4680, 0x11D1, [0xA3'u8, 0xB4, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  IID_IADsOpenDSObject* = DEFINE_GUID(0xDDF2891E'u32, 0x0F9C, 0x11D0, [0x8A'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  IID_IADsOU* = DEFINE_GUID(0xA2F733B8'u32, 0xEFFE, 0x11CF, [0x8A'u8, 0xBC, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  IID_IADsPath* = DEFINE_GUID(0xB287FCD5'u32, 0x4080, 0x11D1, [0xA3'u8, 0xAC, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  IID_IADsPathname* = DEFINE_GUID(0xD592AED4'u32, 0xF420, 0x11D0, [0xA3'u8, 0x6E, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  IID_IADsPathnameProvider* = DEFINE_GUID(0xAACD1D30'u32, 0x8BD0, 0x11D2, [0x92'u8, 0xA9, 0x00, 0xC0, 0x4F, 0x79, 0xF8, 0x34])
  IID_IADsPostalAddress* = DEFINE_GUID(0x7ADECF29'u32, 0x4680, 0x11D1, [0xA3'u8, 0xB4, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  IID_IADsPrintJob* = DEFINE_GUID(0x32FB6780'u32, 0x1ED0, 0x11CF, [0xA9'u8, 0x88, 0x00, 0xAA, 0x00, 0x6B, 0xC1, 0x49])
  IID_IADsPrintJobOperations* = DEFINE_GUID(0x9A52DB30'u32, 0x1ECF, 0x11CF, [0xA9'u8, 0x88, 0x00, 0xAA, 0x00, 0x6B, 0xC1, 0x49])
  IID_IADsPrintQueue* = DEFINE_GUID(0xB15160D0'u32, 0x1226, 0x11CF, [0xA9'u8, 0x85, 0x00, 0xAA, 0x00, 0x6B, 0xC1, 0x49])
  IID_IADsPrintQueueOperations* = DEFINE_GUID(0x124BE5C0'u32, 0x156E, 0x11CF, [0xA9'u8, 0x86, 0x00, 0xAA, 0x00, 0x6B, 0xC1, 0x49])
  IID_IADsProperty* = DEFINE_GUID(0xC8F93DD3'u32, 0x4AE0, 0x11CF, [0x9E'u8, 0x73, 0x00, 0xAA, 0x00, 0x4A, 0x56, 0x91])
  IID_IADsPropertyEntry* = DEFINE_GUID(0x05792C8E'u32, 0x941F, 0x11D0, [0x85'u8, 0x29, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  IID_IADsPropertyList* = DEFINE_GUID(0xC6F602B6'u32, 0x8F69, 0x11D0, [0x85'u8, 0x28, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  IID_IADsPropertyValue* = DEFINE_GUID(0x79FA9AD0'u32, 0xA97C, 0x11D0, [0x85'u8, 0x34, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  IID_IADsPropertyValue2* = DEFINE_GUID(0x306E831C'u32, 0x5BC7, 0x11D1, [0xA3'u8, 0xB8, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  IID_IADsReplicaPointer* = DEFINE_GUID(0xF60FB803'u32, 0x4080, 0x11D1, [0xA3'u8, 0xAC, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  IID_IADsResource* = DEFINE_GUID(0x34A05B20'u32, 0x4AAB, 0x11CF, [0xAE'u8, 0x2C, 0x00, 0xAA, 0x00, 0x6E, 0xBF, 0xB9])
  IID_IADsSearch* = DEFINE_GUID(0xC69F7780'u32, 0x4008, 0x11D0, [0xB9'u8, 0x4C, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0xA8])
  IID_IADsSecurityDescriptor* = DEFINE_GUID(0xB8C787CA'u32, 0x9BDD, 0x11D0, [0x85'u8, 0x2C, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  IID_IADsSecurityUtility* = DEFINE_GUID(0xA63251B2'u32, 0x5F21, 0x474B, [0xAB'u8, 0x52, 0x4A, 0x8E, 0xFA, 0xD1, 0x08, 0x95])
  IID_IADsService* = DEFINE_GUID(0x68AF66E0'u32, 0x31CA, 0x11CF, [0xA9'u8, 0x8A, 0x00, 0xAA, 0x00, 0x6B, 0xC1, 0x49])
  IID_IADsServiceOperations* = DEFINE_GUID(0x5D7B33F0'u32, 0x31CA, 0x11CF, [0xA9'u8, 0x8A, 0x00, 0xAA, 0x00, 0x6B, 0xC1, 0x49])
  IID_IADsSession* = DEFINE_GUID(0x398B7DA0'u32, 0x4AAB, 0x11CF, [0xAE'u8, 0x2C, 0x00, 0xAA, 0x00, 0x6E, 0xBF, 0xB9])
  IID_IADsSyntax* = DEFINE_GUID(0xC8F93DD2'u32, 0x4AE0, 0x11CF, [0x9E'u8, 0x73, 0x00, 0xAA, 0x00, 0x4A, 0x56, 0x91])
  IID_IADsTimestamp* = DEFINE_GUID(0xB2F5A901'u32, 0x4080, 0x11D1, [0xA3'u8, 0xAC, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  IID_IADsTypedName* = DEFINE_GUID(0xB371A349'u32, 0x4080, 0x11D1, [0xA3'u8, 0xAC, 0x00, 0xC0, 0x4F, 0xB9, 0x50, 0xDC])
  IID_IADsUmiHelperPrivate* = DEFINE_GUID(0x4FE243F0'u32, 0xAD89, 0x4CBC, [0x9B'u8, 0x14, 0x48, 0x61, 0x26, 0x44, 0x6A, 0xE0])
  IID_IADsUser* = DEFINE_GUID(0x3E37E320'u32, 0x17E2, 0x11CF, [0xAB'u8, 0xC4, 0x02, 0x60, 0x8C, 0x9E, 0x75, 0x53])
  IID_IADsValue* = DEFINE_GUID(0x1E3EF0AA'u32, 0xAEF5, 0x11D0, [0x85'u8, 0x37, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  IID_IADsWinNTSystemInfo* = DEFINE_GUID(0x6C6D65DC'u32, 0xAFD1, 0x11D2, [0x9C'u8, 0xB9, 0x00, 0x00, 0xF8, 0x7A, 0x36, 0x9E])
  IID_IAdviseSink* = DEFINE_GUID(0x0000010F'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IAdviseSink2* = DEFINE_GUID(0x00000125'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IAdviseSinkEx* = DEFINE_GUID(0x3AF24290'u32, 0x0C96, 0x11CE, [0xA0'u8, 0xCF, 0x00, 0xAA, 0x00, 0x60, 0x0A, 0xB8])
  IID_IAlertReport* = DEFINE_GUID(0x4E81DFE8'u32, 0x4CA0, 0x101A, [0x82'u8, 0x06, 0x08, 0x00, 0x2B, 0x2F, 0xC0, 0x9B])
  IID_IAlertTarget* = DEFINE_GUID(0x589B61C0'u32, 0x54E6, 0x11CE, [0x94'u8, 0xDD, 0x00, 0xAA, 0x00, 0x51, 0xE4, 0x0F])
  IID_IAlgSetup* = DEFINE_GUID(0xA779AF1A'u32, 0x009A, 0x4C44, [0xB9'u8, 0xF0, 0x8F, 0x0F, 0x4C, 0xF2, 0xAE, 0x49])
  IID_IAlterIndex* = DEFINE_GUID(0x0C733AA6'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IAlterTable* = DEFINE_GUID(0x0C733AA5'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IAnchorClick* = DEFINE_GUID(0x13D5413B'u32, 0x33B9, 0x11D2, [0x95'u8, 0xA7, 0x00, 0xC0, 0x4F, 0x8E, 0xCB, 0x02])
  IID_IAnimationComposer* = DEFINE_GUID(0x5459C83D'u32, 0x322B, 0x44B3, [0x8D'u8, 0xAA, 0x24, 0xC9, 0x47, 0xE7, 0xB2, 0x75])
  IID_IAnimationComposer2* = DEFINE_GUID(0x1A4F0E79'u32, 0x09CD, 0x47F3, [0xAF'u8, 0xF1, 0x48, 0x3B, 0xF3, 0xA2, 0x22, 0xDC])
  IID_IAnimationComposerFactory* = DEFINE_GUID(0xBEEB3233'u32, 0xF71F, 0x4683, [0x8B'u8, 0x05, 0x9A, 0x53, 0x14, 0xC9, 0x7D, 0xBC])
  IID_IAnimationComposerSite* = DEFINE_GUID(0x488FCB56'u32, 0x8FD6, 0x4CDA, [0xA0'u8, 0x6A, 0x5B, 0xB2, 0x32, 0x93, 0x0E, 0xCA])
  IID_IAnimationComposerSiteFactory* = DEFINE_GUID(0xB4EA5681'u32, 0xED72, 0x4EFE, [0xBB'u8, 0xD7, 0x7C, 0x47, 0xD1, 0x32, 0x56, 0x96])
  IID_IAnimationComposerSiteSink* = DEFINE_GUID(0x8EF76C64'u32, 0x71CD, 0x480F, [0x96'u8, 0xFC, 0xBA, 0x26, 0x96, 0xE6, 0x59, 0xBE])
  IID_IAnimationFragment* = DEFINE_GUID(0x319DFD88'u32, 0x0AC6, 0x4AB1, [0xA1'u8, 0x9F, 0x90, 0x22, 0x3B, 0xA2, 0xDA, 0x16])
  IID_IAnimationRoot* = DEFINE_GUID(0x29DF6387'u32, 0x30B4, 0x4A62, [0x89'u8, 0x1B, 0xA9, 0xC5, 0xBE, 0x37, 0xBE, 0x88])
  IID_IApplicationDebugger* = DEFINE_GUID(0x51973C2A'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IApplicationDebuggerUI* = DEFINE_GUID(0x51973C2B'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IApplicationGateway* = DEFINE_GUID(0x5134842B'u32, 0xFDCE, 0x485D, [0x93'u8, 0xCD, 0xDE, 0x16, 0x40, 0x64, 0x3B, 0xBE])
  IID_IApplicationGatewayServices* = DEFINE_GUID(0x5134842A'u32, 0xFDCE, 0x485D, [0x93'u8, 0xCD, 0xDE, 0x16, 0x40, 0x64, 0x3B, 0xBE])
  IID_IAppPublisher* = DEFINE_GUID(0x07250A10'u32, 0x9CF9, 0x11D1, [0x90'u8, 0x76, 0x00, 0x60, 0x08, 0x05, 0x93, 0x82])
  IID_IAsyncBindCtx* = DEFINE_GUID(0x79EAC9D4'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IAsyncManager* = DEFINE_GUID(0x0000002A'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IAsyncMoniker* = DEFINE_GUID(0x79EAC9D3'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IAsyncOperation* = DEFINE_GUID(0x3D8B0590'u32, 0xF691, 0x11D2, [0x8E'u8, 0xA9, 0x00, 0x60, 0x97, 0xDF, 0x5B, 0xD4])
  IID_IAsyncRpcChannelBuffer* = DEFINE_GUID(0xA5029FB6'u32, 0x3C34, 0x11D1, [0x9C'u8, 0x99, 0x00, 0xC0, 0x4F, 0xB9, 0x98, 0xAA])
  IID_IAttributesRaw* = DEFINE_GUID(0x6BC096A8'u32, 0x0CE6, 0x11D1, [0xBA'u8, 0xAE, 0x00, 0xC0, 0x4F, 0xC2, 0xE2, 0x0D])
  IID_IAuditControl* = DEFINE_GUID(0x1DA6292F'u32, 0xBC66, 0x11CE, [0xAA'u8, 0xE3, 0x00, 0xAA, 0x00, 0x4C, 0x27, 0x37])
  IID_IAuthenticate* = DEFINE_GUID(0x79EAC9D0'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IAutoComplete* = DEFINE_GUID(0x00BB2762'u32, 0x6A77, 0x11D0, [0xA5'u8, 0x35, 0x00, 0xC0, 0x4F, 0xD7, 0xD0, 0x62])
  IID_IAutoComplete2* = DEFINE_GUID(0xEAC04BC0'u32, 0x3791, 0x11D2, [0xBB'u8, 0x95, 0x00, 0x60, 0x97, 0x7B, 0x46, 0x4C])
  IID_IAutoCompleteDropDown* = DEFINE_GUID(0x3CD141F4'u32, 0x3C6A, 0x11D2, [0xBC'u8, 0xAA, 0x00, 0xC0, 0x4F, 0xD9, 0x29, 0xDB])
  IID_IAutoCompList* = DEFINE_GUID(0x00BB2760'u32, 0x6A77, 0x11D0, [0xA5'u8, 0x35, 0x00, 0xC0, 0x4F, 0xD7, 0xD0, 0x62])
  IID_IAutoDiscoveryProvider* = DEFINE_GUID(0x9DCF4A37'u32, 0x01DE, 0x4549, [0xA9'u8, 0xCB, 0x3A, 0xC3, 0x1E, 0xC2, 0x3C, 0x4F])
  IID_IBackgroundCopyCallback* = DEFINE_GUID(0x97EA99C7'u32, 0x0186, 0x4AD4, [0x8D'u8, 0xF9, 0xC5, 0xB4, 0xE0, 0xED, 0x6B, 0x22])
  IID_IBackgroundCopyCallback1* = DEFINE_GUID(0x084F6593'u32, 0x3800, 0x4E08, [0x9B'u8, 0x59, 0x99, 0xFA, 0x59, 0xAD, 0xDF, 0x82])
  IID_IBackgroundCopyError* = DEFINE_GUID(0x19C613A0'u32, 0xFCB8, 0x4F28, [0x81'u8, 0xAE, 0x89, 0x7C, 0x3D, 0x07, 0x8F, 0x81])
  IID_IBackgroundCopyFile* = DEFINE_GUID(0x01B7BD23'u32, 0xFB88, 0x4A77, [0x84'u8, 0x90, 0x58, 0x91, 0xD3, 0xE4, 0x65, 0x3A])
  IID_IBackgroundCopyGroup* = DEFINE_GUID(0x1DED80A7'u32, 0x53EA, 0x424F, [0x8A'u8, 0x04, 0x17, 0xFE, 0xA9, 0xAD, 0xC4, 0xF5])
  IID_IBackgroundCopyJob* = DEFINE_GUID(0x37668D37'u32, 0x507E, 0x4160, [0x93'u8, 0x16, 0x26, 0x30, 0x6D, 0x15, 0x0B, 0x12])
  IID_IBackgroundCopyJob1* = DEFINE_GUID(0x59F5553C'u32, 0x2031, 0x4629, [0xBB'u8, 0x18, 0x26, 0x45, 0xA6, 0x97, 0x09, 0x47])
  IID_IBackgroundCopyJob2* = DEFINE_GUID(0x54B50739'u32, 0x686F, 0x45EB, [0x9D'u8, 0xFF, 0xD6, 0xA9, 0xA0, 0xFA, 0xA9, 0xAF])
  IID_IBackgroundCopyManager* = DEFINE_GUID(0x5CE34C0D'u32, 0x0DC9, 0x4C1F, [0x89'u8, 0x7C, 0xDA, 0xA1, 0xB7, 0x8C, 0xEE, 0x7C])
  IID_IBackgroundCopyQMgr* = DEFINE_GUID(0x16F41C69'u32, 0x09F5, 0x41D2, [0x8C'u8, 0xD8, 0x3C, 0x08, 0xC4, 0x7B, 0xC8, 0xA8])
  IID_IBidiRequestSpl* = DEFINE_GUID(0x9C007000'u32, 0xFFA8, 0x44FF, [0xB2'u8, 0xB3, 0xAE, 0x91, 0x02, 0xC7, 0x4D, 0x4C])
  IID_IBindCtx* = DEFINE_GUID(0x0000000E'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IBindEventHandler* = DEFINE_GUID(0x63CDBCB0'u32, 0xC1B1, 0x11D0, [0x93'u8, 0x36, 0x00, 0xA0, 0xC9, 0x0D, 0xCA, 0xA9])
  IID_IBindHost* = DEFINE_GUID(0xFC4801A1'u32, 0x2BA9, 0x11CF, [0xA2'u8, 0x29, 0x00, 0xAA, 0x00, 0x3D, 0x73, 0x52])
  IID_IBinding* = DEFINE_GUID(0x79EAC9C0'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IBindProtocol* = DEFINE_GUID(0x79EAC9CD'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IBindResource* = DEFINE_GUID(0x0C733AB1'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IBindStatusCallback* = DEFINE_GUID(0x79EAC9C1'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IBindStatusCallbackHolder* = DEFINE_GUID(0x79EAC9CC'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IBindStatusCallbackMsg* = DEFINE_GUID(0x79EAC9D5'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IBitsTest1* = DEFINE_GUID(0x51A183DB'u32, 0x67E0, 0x4472, [0x86'u8, 0x02, 0x3D, 0xBC, 0x73, 0x0B, 0x7E, 0xF5])
  IID_IBlockFormats* = DEFINE_GUID(0x3050F830'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IBlockingLock* = DEFINE_GUID(0x30F3D47A'u32, 0x6447, 0x11D1, [0x8E'u8, 0x3C, 0x00, 0xC0, 0x4F, 0xB9, 0x38, 0x6D])
  IID_IBoundObject* = DEFINE_GUID(0x9BFBBC00'u32, 0xEFF1, 0x101A, [0x84'u8, 0xED, 0x00, 0xAA, 0x00, 0x34, 0x1D, 0x07])
  IID_IBoundObjectSite* = DEFINE_GUID(0x9BFBBC01'u32, 0xEFF1, 0x101A, [0x84'u8, 0xED, 0x00, 0xAA, 0x00, 0x34, 0x1D, 0x07])
  IID_IBriefcaseStg* = DEFINE_GUID(0x8BCE1FA1'u32, 0x0921, 0x101B, [0xB1'u8, 0xFF, 0x00, 0xDD, 0x01, 0x0C, 0xCC, 0x48])
  IID_IBurnEngine* = DEFINE_GUID(0x520CCA66'u32, 0x51A5, 0x11D3, [0x91'u8, 0x44, 0x00, 0x10, 0x4B, 0xA1, 0x1C, 0x5E])
  IID_ICallFactory* = DEFINE_GUID(0x1C733A30'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ICallFrame* = DEFINE_GUID(0xD573B4B0'u32, 0x894E, 0x11D2, [0xB8'u8, 0xB6, 0x00, 0xC0, 0x4F, 0xB9, 0x61, 0x8A])
  IID_ICallFrameEvents* = DEFINE_GUID(0xFD5E0843'u32, 0xFC91, 0x11D0, [0x97'u8, 0xD7, 0x00, 0xC0, 0x4F, 0xB9, 0x61, 0x8A])
  IID_ICallFrameWalker* = DEFINE_GUID(0x08B23919'u32, 0x392D, 0x11D2, [0xB8'u8, 0xA4, 0x00, 0xC0, 0x4F, 0xB9, 0x61, 0x8A])
  IID_ICallIndirect* = DEFINE_GUID(0xD573B4B1'u32, 0x894E, 0x11D2, [0xB8'u8, 0xB6, 0x00, 0xC0, 0x4F, 0xB9, 0x61, 0x8A])
  IID_ICallInterceptor* = DEFINE_GUID(0x60C7CA75'u32, 0x896D, 0x11D2, [0xB8'u8, 0xB6, 0x00, 0xC0, 0x4F, 0xB9, 0x61, 0x8A])
  IID_ICallUnmarshal* = DEFINE_GUID(0x5333B003'u32, 0x2E42, 0x11D2, [0xB8'u8, 0x9D, 0x00, 0xC0, 0x4F, 0xB9, 0x61, 0x8A])
  IID_ICancelMethodCalls* = DEFINE_GUID(0x00000029'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ICatalogFileInfo* = DEFINE_GUID(0x711C7600'u32, 0x6B48, 0x11D1, [0xB4'u8, 0x03, 0x00, 0xAA, 0x00, 0xB9, 0x2A, 0xF1])
  IID_ICategorizer* = DEFINE_GUID(0xA3B14589'u32, 0x9174, 0x49A8, [0x89'u8, 0xA3, 0x06, 0xA1, 0xAE, 0x2B, 0x9B, 0xA7])
  IID_ICategoryProvider* = DEFINE_GUID(0x9AF64809'u32, 0x5864, 0x4C26, [0xA7'u8, 0x20, 0xC1, 0xF7, 0x8C, 0x08, 0x6E, 0xE3])
  IID_ICatInformation* = DEFINE_GUID(0x0002E013'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ICatRegister* = DEFINE_GUID(0x0002E012'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ICDBurn* = DEFINE_GUID(0x3D73A659'u32, 0xE5D0, 0x4D42, [0xAF'u8, 0xC0, 0x51, 0x21, 0xBA, 0x42, 0x5C, 0x8D])
  IID_ICEnroll* = DEFINE_GUID(0x43F8F288'u32, 0x7A20, 0x11D0, [0x8F'u8, 0x06, 0x00, 0xC0, 0x4F, 0xC2, 0x95, 0xE1])
  IID_ICEnroll2* = DEFINE_GUID(0x704CA730'u32, 0xC90B, 0x11D1, [0x9B'u8, 0xEC, 0x00, 0xC0, 0x4F, 0xC2, 0x95, 0xE1])
  IID_ICEnroll3* = DEFINE_GUID(0xC28C2D95'u32, 0xB7DE, 0x11D2, [0xA4'u8, 0x21, 0x00, 0xC0, 0x4F, 0x79, 0xFE, 0x8E])
  IID_ICEnroll4* = DEFINE_GUID(0xC1F1188A'u32, 0x2EB5, 0x4A80, [0x84'u8, 0x1B, 0x7E, 0x72, 0x9A, 0x35, 0x6D, 0x90])
  IID_IChannelHook* = DEFINE_GUID(0x1008C4A0'u32, 0x7613, 0x11CF, [0x9A'u8, 0xF1, 0x00, 0x20, 0xAF, 0x6E, 0x72, 0xF4])
  IID_IChannelMgr* = DEFINE_GUID(0x85BD8E82'u32, 0x0FBA, 0x11D1, [0x90'u8, 0xC3, 0x00, 0xC0, 0x4F, 0xC2, 0xF5, 0x68])
  IID_IChapteredRowset* = DEFINE_GUID(0x0C733A93'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ICheckBox* = DEFINE_GUID(0x3050F685'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ICiAdmin* = DEFINE_GUID(0xAE67C7D8'u32, 0x85D3, 0x11D0, [0x8C'u8, 0x45, 0x00, 0xC0, 0x4F, 0xC2, 0xDB, 0x8D])
  IID_ICiAdminParams* = DEFINE_GUID(0xA82D48C6'u32, 0x3F0F, 0x11D0, [0x8C'u8, 0x91, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiCAdviseStatus* = DEFINE_GUID(0xCA05734A'u32, 0x1218, 0x11D3, [0xAE'u8, 0x7A, 0x00, 0xC0, 0x4F, 0x72, 0xF8, 0x31])
  IID_ICiCDeferredPropRetriever* = DEFINE_GUID(0xC273AF70'u32, 0x6D72, 0x11D0, [0x8D'u8, 0x64, 0x00, 0xA0, 0xC9, 0x08, 0xDB, 0xF1])
  IID_ICiCDocName* = DEFINE_GUID(0x76615076'u32, 0x3C2B, 0x11D0, [0x8C'u8, 0x90, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiCDocNameToWorkidTranslator* = DEFINE_GUID(0x25FC3F54'u32, 0x3CB4, 0x11D0, [0x8C'u8, 0x90, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiCDocNameToWorkidTranslatorEx* = DEFINE_GUID(0x7BBA76E6'u32, 0xA0E3, 0x11D2, [0xBC'u8, 0x5D, 0x00, 0xC0, 0x4F, 0xA3, 0x54, 0xBA])
  IID_ICiCDocStore* = DEFINE_GUID(0x46625468'u32, 0x3C32, 0x11D0, [0x8C'u8, 0x90, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiCDocStoreEx* = DEFINE_GUID(0xF98282A7'u32, 0xFA72, 0x11D1, [0x97'u8, 0x98, 0x00, 0xC0, 0x4F, 0xC2, 0xF4, 0x10])
  IID_ICiCDocStoreLocator* = DEFINE_GUID(0x97EE7C06'u32, 0x5908, 0x11D0, [0x8C'u8, 0x9B, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiCEventLogItem* = DEFINE_GUID(0x44CC886A'u32, 0x4314, 0x11D0, [0x8C'u8, 0x91, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiCFilterClient* = DEFINE_GUID(0xA1E0BCB6'u32, 0x3C24, 0x11D0, [0x8C'u8, 0x90, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiCFilterStatus* = DEFINE_GUID(0xBC5F3D60'u32, 0x8BBC, 0x11D1, [0x8F'u8, 0x73, 0x00, 0xA0, 0xC9, 0x19, 0x17, 0xF5])
  IID_ICiCIndexNotificationStatus* = DEFINE_GUID(0x5FFF3840'u32, 0x8E76, 0x11D0, [0x8D'u8, 0x69, 0x00, 0xA0, 0xC9, 0x08, 0xDB, 0xF1])
  IID_ICiCLangRes* = DEFINE_GUID(0x914C2E6C'u32, 0x43FE, 0x11D0, [0x8C'u8, 0x91, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiControl* = DEFINE_GUID(0x63DEB7F4'u32, 0x3CCB, 0x11D0, [0x8C'u8, 0x90, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiCOpenedDoc* = DEFINE_GUID(0x151EDFBE'u32, 0x3C2F, 0x11D0, [0x8C'u8, 0x90, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiCPropertyStorage* = DEFINE_GUID(0x4C46225A'u32, 0x3CB5, 0x11D0, [0x8C'u8, 0x90, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiCPropRetriever* = DEFINE_GUID(0x77D9B2DA'u32, 0x4401, 0x11D0, [0x8C'u8, 0x91, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiCQueryNotification* = DEFINE_GUID(0x0A9E9F6C'u32, 0x3CE2, 0x11D0, [0x8C'u8, 0x90, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiCQuerySession* = DEFINE_GUID(0xAE461FD6'u32, 0x4E1D, 0x11D0, [0x8C'u8, 0x94, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiCResourceMonitor* = DEFINE_GUID(0xF700FF8E'u32, 0x20EE, 0x11D2, [0x80'u8, 0xF7, 0x00, 0xC0, 0x4F, 0xA3, 0x54, 0xBA])
  IID_ICiCScope* = DEFINE_GUID(0x1021C882'u32, 0x3CC0, 0x11D0, [0x8C'u8, 0x90, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiCScopeChecker* = DEFINE_GUID(0x7D820C9C'u32, 0x3CBC, 0x11D0, [0x8C'u8, 0x90, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiCScopeEnumerator* = DEFINE_GUID(0xCF8505EA'u32, 0x3CCA, 0x11D0, [0x8C'u8, 0x90, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiCSecurityChecker* = DEFINE_GUID(0xCA130CF4'u32, 0x3CC2, 0x11D0, [0x8C'u8, 0x90, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiCUserSecurity* = DEFINE_GUID(0x5D01D9CE'u32, 0x3CC2, 0x11D0, [0x8C'u8, 0x90, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiDocChangeNotifySink* = DEFINE_GUID(0x8BFA1386'u32, 0x3CE5, 0x11D0, [0x8C'u8, 0x90, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiEnumWorkids* = DEFINE_GUID(0x77900150'u32, 0xA09C, 0x11D0, [0xA8'u8, 0x0D, 0x00, 0xA0, 0xC9, 0x06, 0x24, 0x1A])
  IID_ICiFrameworkQuery* = DEFINE_GUID(0xAE67C7D9'u32, 0x85D3, 0x11D0, [0x8C'u8, 0x45, 0x00, 0xC0, 0x4F, 0xC2, 0xDB, 0x8D])
  IID_ICiIndexNotification* = DEFINE_GUID(0x4F2CD6E0'u32, 0x8E74, 0x11D0, [0x8D'u8, 0x69, 0x00, 0xA0, 0xC9, 0x08, 0xDB, 0xF1])
  IID_ICiIndexNotificationEntry* = DEFINE_GUID(0x210769D0'u32, 0x8E75, 0x11D0, [0x8D'u8, 0x69, 0x00, 0xA0, 0xC9, 0x08, 0xDB, 0xF1])
  IID_ICiISearchCreator* = DEFINE_GUID(0x7DC07FA0'u32, 0x902E, 0x11D0, [0xA8'u8, 0x0C, 0x00, 0xA0, 0xC9, 0x06, 0x24, 0x1A])
  IID_ICiManager* = DEFINE_GUID(0xCF0FCF56'u32, 0x3CCE, 0x11D0, [0x8C'u8, 0x90, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiPersistIncrFile* = DEFINE_GUID(0x31B311E2'u32, 0x4498, 0x11D0, [0x8C'u8, 0x91, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_ICiQueryPropertyMapper* = DEFINE_GUID(0xD2333EB0'u32, 0x756B, 0x11D0, [0x8D'u8, 0x66, 0x00, 0xA0, 0xC9, 0x08, 0xDB, 0xF1])
  IID_ICiStartup* = DEFINE_GUID(0x68232CB8'u32, 0x3CCC, 0x11D0, [0x8C'u8, 0x90, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_IClassActivator* = DEFINE_GUID(0x00000140'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IClassFactory* = DEFINE_GUID(0x00000001'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IClassFactory2* = DEFINE_GUID(0xB196B28F'u32, 0xBAB4, 0x101A, [0xB6'u8, 0x9C, 0x00, 0xAA, 0x00, 0x34, 0x1D, 0x07])
  IID_IClassFactoryEx* = DEFINE_GUID(0x342D1EA0'u32, 0xAE25, 0x11D1, [0x89'u8, 0xC5, 0x00, 0x60, 0x08, 0xC3, 0xFB, 0xFC])
  IID_IClientCaps* = DEFINE_GUID(0x7E8BC44D'u32, 0xAEFF, 0x11D1, [0x89'u8, 0xC2, 0x00, 0xC0, 0x4F, 0xB6, 0xBF, 0xC4])
  IID_IClientSecurity* = DEFINE_GUID(0x0000013D'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IClusCfgAsyncEvictCleanup* = DEFINE_GUID(0x52C80B95'u32, 0xC1AD, 0x4240, [0x8D'u8, 0x89, 0x72, 0xE9, 0xFA, 0x84, 0x02, 0x5E])
  IID_IClusCfgBaseCluster* = DEFINE_GUID(0xA8A5C613'u32, 0x2518, 0x47F5, [0x96'u8, 0xCA, 0xCA, 0xFA, 0x7F, 0xFB, 0xAF, 0x68])
  IID_IClusCfgCallback* = DEFINE_GUID(0x238DCA63'u32, 0xE2EF, 0x4F32, [0xA2'u8, 0x4D, 0xAC, 0xBF, 0x97, 0x5B, 0xE8, 0x42])
  IID_IClusCfgCapabilities* = DEFINE_GUID(0xD94AB253'u32, 0x36C7, 0x41C1, [0xB5'u8, 0x2E, 0x26, 0xB4, 0x51, 0x97, 0x5C, 0x8D])
  IID_IClusCfgClusterConnection* = DEFINE_GUID(0xCE6EF90C'u32, 0x3602, 0x41E7, [0x95'u8, 0xBD, 0xAA, 0xFD, 0x37, 0xA6, 0x76, 0xDF])
  IID_IClusCfgClusterInfo* = DEFINE_GUID(0x85B4BBC0'u32, 0xDDC4, 0x4AE7, [0x82'u8, 0x68, 0xF4, 0x85, 0x0B, 0xB2, 0xA6, 0xEE])
  IID_IClusCfgCredentials* = DEFINE_GUID(0x54AA9406'u32, 0xA409, 0x4B49, [0xB3'u8, 0x14, 0x5F, 0x0A, 0x0C, 0xE4, 0xC8, 0x8E])
  IID_IClusCfgEvictCleanup* = DEFINE_GUID(0x6FE3E361'u32, 0xD373, 0x4C5F, [0xA0'u8, 0xAF, 0x1D, 0xFE, 0x84, 0x93, 0xC6, 0x55])
  IID_IClusCfgGroupCfg* = DEFINE_GUID(0xDCB6D3D2'u32, 0xA55F, 0x49E5, [0xA6'u8, 0x4A, 0x0C, 0xCF, 0xEB, 0x01, 0xED, 0x3A])
  IID_IClusCfgInitialize* = DEFINE_GUID(0x2A0EB82D'u32, 0xF878, 0x492A, [0x95'u8, 0x1E, 0xAE, 0x00, 0x09, 0x18, 0xC4, 0xA6])
  IID_IClusCfgIPAddressInfo* = DEFINE_GUID(0xAAEAF0A5'u32, 0xE310, 0x4604, [0xA5'u8, 0x5E, 0x2F, 0x9D, 0xDC, 0x41, 0x57, 0xA8])
  IID_IClusCfgManagedResourceCfg* = DEFINE_GUID(0x60300A0F'u32, 0x77E1, 0x440C, [0xBD'u8, 0x94, 0x6B, 0xFB, 0x0D, 0xBF, 0xDB, 0x3A])
  IID_IClusCfgManagedResourceInfo* = DEFINE_GUID(0xE0324847'u32, 0x1520, 0x41B0, [0xB9'u8, 0x60, 0x54, 0x19, 0x8D, 0xA5, 0xF8, 0xAF])
  IID_IClusCfgMemberSetChangeListener* = DEFINE_GUID(0x2B64534F'u32, 0x2643, 0x4ABC, [0xA4'u8, 0xE5, 0x82, 0x4D, 0x88, 0x1B, 0x75, 0x82])
  IID_IClusCfgNetworkInfo* = DEFINE_GUID(0x19FC7580'u32, 0x950A, 0x44A6, [0x96'u8, 0x6E, 0x74, 0xB1, 0x4B, 0x20, 0x91, 0x8F])
  IID_IClusCfgNodeInfo* = DEFINE_GUID(0xE4B5FA15'u32, 0xDD07, 0x439E, [0xA6'u8, 0x23, 0x88, 0x23, 0x52, 0x4E, 0x3D, 0x19])
  IID_IClusCfgPartitionInfo* = DEFINE_GUID(0xEC1EBD9F'u32, 0x5866, 0x4846, [0x89'u8, 0x52, 0xEC, 0x36, 0xC3, 0x96, 0x1E, 0xEE])
  IID_IClusCfgPollingCallback* = DEFINE_GUID(0xC72DB1FD'u32, 0x51A2, 0x43E6, [0xB7'u8, 0x08, 0xD9, 0xDB, 0x7D, 0xA7, 0x96, 0x30])
  IID_IClusCfgPollingCallbackInfo* = DEFINE_GUID(0x2AF55DA7'u32, 0xCB6F, 0x40DE, [0xBB'u8, 0x11, 0x66, 0x73, 0x46, 0x4B, 0x2C, 0x54])
  IID_IClusCfgResourceCreate* = DEFINE_GUID(0x0647B41A'u32, 0xC777, 0x443C, [0x94'u8, 0x32, 0x02, 0xCC, 0xCF, 0x4F, 0xF4, 0x43])
  IID_IClusCfgResourcePostCreate* = DEFINE_GUID(0x72A9BF54'u32, 0x13B6, 0x451F, [0x91'u8, 0x0D, 0x69, 0x13, 0xEB, 0xF0, 0x25, 0xAB])
  IID_IClusCfgResourcePreCreate* = DEFINE_GUID(0x4240F6A1'u32, 0x9D49, 0x427E, [0x8F'u8, 0x3D, 0x09, 0x38, 0x4E, 0x1F, 0x59, 0xE4])
  IID_IClusCfgResourceTypeCreate* = DEFINE_GUID(0x3AFCE3B8'u32, 0x5F3E, 0x4DDF, [0xA8'u8, 0xF4, 0x4B, 0x4F, 0xCB, 0xF2, 0x8F, 0x8F])
  IID_IClusCfgResourceTypeInfo* = DEFINE_GUID(0xC649A281'u32, 0xC847, 0x4F5C, [0x98'u8, 0x41, 0xD2, 0xF7, 0x3B, 0x5A, 0xA7, 0x1D])
  IID_IClusCfgResTypeServicesInitializ* = DEFINE_GUID(0x6E109698'u32, 0xDFC4, 0x4471, [0xAC'u8, 0xE1, 0x04, 0x14, 0x93, 0x1B, 0x3B, 0xB3])
  IID_IClusCfgServer* = DEFINE_GUID(0x4C06EAE6'u32, 0x990E, 0x4051, [0x8A'u8, 0xA1, 0xAD, 0x4B, 0x4E, 0xAE, 0x9C, 0xAF])
  IID_IClusCfgSetCredentials* = DEFINE_GUID(0x58E6E5B9'u32, 0x4788, 0x4D9A, [0x82'u8, 0x55, 0x1E, 0x27, 0x4E, 0x5D, 0xCC, 0xB0])
  IID_IClusCfgStartupListener* = DEFINE_GUID(0xD282CAEF'u32, 0x2EDE, 0x4AB9, [0xA5'u8, 0xD5, 0xF7, 0xBD, 0xE3, 0xD2, 0x3F, 0x0F])
  IID_IClusCfgStartupNotify* = DEFINE_GUID(0xC2B0D069'u32, 0x6353, 0x4EE1, [0xB2'u8, 0x53, 0x6B, 0x0D, 0x75, 0xDB, 0x2C, 0xD3])
  IID_IClusCfgVerify* = DEFINE_GUID(0xD47BBEEC'u32, 0x2286, 0x4514, [0xAA'u8, 0x90, 0x7E, 0x88, 0xBD, 0x0F, 0xE5, 0x43])
  IID_IClusCfgWizard* = DEFINE_GUID(0x2EB57A3B'u32, 0xDA8D, 0x4B56, [0x97'u8, 0xCF, 0xA3, 0x19, 0x1B, 0xF8, 0xFD, 0x5B])
  IID_IClusterApplicationWizard* = DEFINE_GUID(0x24F97151'u32, 0x6689, 0x11D1, [0x9A'u8, 0xA7, 0x00, 0xC0, 0x4F, 0xB9, 0x3A, 0x80])
  IID_ICodeInstall* = DEFINE_GUID(0x79EAC9D1'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IColumnMapper* = DEFINE_GUID(0x0B63E37A'u32, 0x9CCC, 0x11D0, [0xBC'u8, 0xDB, 0x00, 0x80, 0x5F, 0xCC, 0xCE, 0x04])
  IID_IColumnMapperCreator* = DEFINE_GUID(0x0B63E37B'u32, 0x9CCC, 0x11D0, [0xBC'u8, 0xDB, 0x00, 0x80, 0x5F, 0xCC, 0xCE, 0x04])
  IID_IColumnProvider* = DEFINE_GUID(0xE8025004'u32, 0x1C42, 0x11D2, [0xBE'u8, 0x2C, 0x00, 0xA0, 0xC9, 0xA8, 0x3D, 0xA1])
  IID_IColumnsInfo* = DEFINE_GUID(0x0C733A11'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IColumnsInfo2* = DEFINE_GUID(0x0C733AB8'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IColumnsRowset* = DEFINE_GUID(0x0C733A10'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ICombobox* = DEFINE_GUID(0x3050F677'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ICommand* = DEFINE_GUID(0x0C733A63'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ICommandCost* = DEFINE_GUID(0x0C733A4E'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ICommandPersist* = DEFINE_GUID(0x0C733AA7'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ICommandPrepare* = DEFINE_GUID(0x0C733A26'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ICommandProperties* = DEFINE_GUID(0x0C733A79'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ICommandStream* = DEFINE_GUID(0x0C733ABF'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ICommandText* = DEFINE_GUID(0x0C733A27'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ICommandTree* = DEFINE_GUID(0x0C733A87'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ICommandValidate* = DEFINE_GUID(0x0C733A18'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ICommandWithParameters* = DEFINE_GUID(0x0C733A64'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ICommDlgBrowser* = DEFINE_GUID(0x000214F1'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ICommDlgBrowser2* = DEFINE_GUID(0x10339516'u32, 0x2894, 0x11D2, [0x90'u8, 0x39, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x3E])
  IID_ICommonQuery* = DEFINE_GUID(0xAB50DEC0'u32, 0x6F1D, 0x11D0, [0xA1'u8, 0xC4, 0x00, 0xAA, 0x00, 0xC1, 0x6E, 0x65])
  IID_IComThreadingInfo* = DEFINE_GUID(0x000001CE'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IConfigurationConnection* = DEFINE_GUID(0xDDAD8191'u32, 0x66C5, 0x4A30, [0xA4'u8, 0xDF, 0xCB, 0x6C, 0x21, 0x67, 0x04, 0xCA])
  IID_IConnectionInfo* = DEFINE_GUID(0x15182CE3'u32, 0x82D7, 0x473F, [0x92'u8, 0xDE, 0x70, 0x6E, 0x2B, 0xCE, 0xA9, 0x02])
  IID_IConnectionManager* = DEFINE_GUID(0xC0017768'u32, 0x1BF3, 0x4352, [0x8D'u8, 0x6C, 0x3A, 0x8C, 0x1D, 0x0F, 0xB4, 0x77])
  IID_IConnectionPoint* = DEFINE_GUID(0xB196B286'u32, 0xBAB4, 0x101A, [0xB6'u8, 0x9C, 0x00, 0xAA, 0x00, 0x34, 0x1D, 0x07])
  IID_IConnectionPointContainer* = DEFINE_GUID(0xB196B284'u32, 0xBAB4, 0x101A, [0xB6'u8, 0x9C, 0x00, 0xAA, 0x00, 0x34, 0x1D, 0x07])
  IID_IContextCallback* = DEFINE_GUID(0x000001DA'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IContextMenu* = DEFINE_GUID(0x000214E4'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IContextMenu2* = DEFINE_GUID(0x000214F4'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IContextMenu3* = DEFINE_GUID(0xBCFCE0A0'u32, 0xEC17, 0x11D0, [0x8D'u8, 0x10, 0x00, 0xA0, 0xC9, 0x0F, 0x27, 0x19])
  IID_IContinue* = DEFINE_GUID(0x0000012A'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IContinueCallback* = DEFINE_GUID(0xB722BCCA'u32, 0x4E68, 0x101B, [0xA2'u8, 0xBC, 0x00, 0xAA, 0x00, 0x40, 0x47, 0x70])
  IID_IConvertType* = DEFINE_GUID(0x0C733A88'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ICrBarn* = DEFINE_GUID(0x276A2EE0'u32, 0x0B5D, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  IID_ICrBarn2* = DEFINE_GUID(0xB66A7A1B'u32, 0x8FC6, 0x448C, [0xA2'u8, 0xEB, 0x3C, 0x55, 0x95, 0x74, 0x78, 0xA1])
  IID_ICrBlinds* = DEFINE_GUID(0x5AF5C340'u32, 0x0BA9, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  IID_ICrBlinds2* = DEFINE_GUID(0x7059D403'u32, 0x599A, 0x4264, [0x81'u8, 0x40, 0x64, 0x1E, 0xB8, 0xAE, 0x1F, 0x64])
  IID_ICrBlur* = DEFINE_GUID(0x9F7C7827'u32, 0xE87A, 0x11D1, [0x81'u8, 0xE0, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  IID_ICreateErrorInfo* = DEFINE_GUID(0x22F03340'u32, 0x547D, 0x101B, [0x8E'u8, 0x65, 0x08, 0x00, 0x2B, 0x2B, 0xD1, 0x19])
  IID_ICreateRow* = DEFINE_GUID(0x0C733AB2'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ICreateTypeInfo* = DEFINE_GUID(0x00020405'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ICreateTypeInfo2* = DEFINE_GUID(0x0002040E'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ICreateTypeLib* = DEFINE_GUID(0x00020406'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ICreateTypeLib2* = DEFINE_GUID(0x0002040F'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ICrEmboss* = DEFINE_GUID(0xE4ACFB80'u32, 0x053E, 0x11D2, [0x81'u8, 0xEA, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  IID_ICrEngrave* = DEFINE_GUID(0xE4ACFB7F'u32, 0x053E, 0x11D2, [0x81'u8, 0xEA, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  IID_ICrInset* = DEFINE_GUID(0x05C5EE20'u32, 0x0BA6, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  IID_ICrIris* = DEFINE_GUID(0x3F69F350'u32, 0x0379, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  IID_ICrIris2* = DEFINE_GUID(0xF7B06961'u32, 0xBA8C, 0x4970, [0x91'u8, 0x8B, 0x1C, 0x60, 0xCB, 0x9F, 0xF1, 0x80])
  IID_ICrRadialWipe* = DEFINE_GUID(0x424B71AE'u32, 0x0695, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  IID_ICrSlide* = DEFINE_GUID(0x810E402E'u32, 0x056B, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  IID_ICrSpiral* = DEFINE_GUID(0x0DE527A0'u32, 0x0C7E, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  IID_ICrStretch* = DEFINE_GUID(0x6684AF00'u32, 0x0A87, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  IID_ICrWheel* = DEFINE_GUID(0x3943DE80'u32, 0x1464, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  IID_ICrZigzag* = DEFINE_GUID(0x4E5A64A0'u32, 0x0C8B, 0x11D2, [0xA4'u8, 0x84, 0x00, 0xC0, 0x4F, 0x8E, 0xFB, 0x69])
  IID_ICSSFilter* = DEFINE_GUID(0x3050F3EC'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ICSSFilterDispatch* = DEFINE_GUID(0x9519152B'u32, 0x9484, 0x4A6C, [0xB6'u8, 0xA7, 0x4F, 0x25, 0xE9, 0x2D, 0x6C, 0x6B])
  IID_ICSSFilterSite* = DEFINE_GUID(0x3050F3ED'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ICurrentWorkingDirectory* = DEFINE_GUID(0x91956D21'u32, 0x9276, 0x11D1, [0x92'u8, 0x1A, 0x00, 0x60, 0x97, 0xDF, 0x5B, 0xD4])
  IID_ICursor* = DEFINE_GUID(0x9F6AA700'u32, 0xD188, 0x11CD, [0xAD'u8, 0x48, 0x00, 0xAA, 0x00, 0x3C, 0x9C, 0xB6])
  IID_ICursorFind* = DEFINE_GUID(0xE01D7850'u32, 0xD188, 0x11CD, [0xAD'u8, 0x48, 0x00, 0xAA, 0x00, 0x3C, 0x9C, 0xB6])
  IID_ICursorMove* = DEFINE_GUID(0xACFF0690'u32, 0xD188, 0x11CD, [0xAD'u8, 0x48, 0x00, 0xAA, 0x00, 0x3C, 0x9C, 0xB6])
  IID_ICursorScroll* = DEFINE_GUID(0xBB87E420'u32, 0xD188, 0x11CD, [0xAD'u8, 0x48, 0x00, 0xAA, 0x00, 0x3C, 0x9C, 0xB6])
  IID_ICursorUpdateARow* = DEFINE_GUID(0xD14216A0'u32, 0xD188, 0x11CD, [0xAD'u8, 0x48, 0x00, 0xAA, 0x00, 0x3C, 0x9C, 0xB6])
  IID_ICustomDoc* = DEFINE_GUID(0x3050F3F0'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ICustomRatingHelper* = DEFINE_GUID(0xD0D9842D'u32, 0xE211, 0x4B2C, [0x88'u8, 0xDC, 0xBC, 0x72, 0x93, 0x42, 0xDF, 0xCB])
  IID_IDA2Array* = DEFINE_GUID(0x2A8F0B06'u32, 0xBE2B, 0x11D1, [0xB2'u8, 0x19, 0x00, 0xC0, 0x4F, 0xC2, 0xA0, 0xCA])
  IID_IDA2Behavior* = DEFINE_GUID(0xC46C1BF0'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDA2Event* = DEFINE_GUID(0x69B5BC70'u32, 0x9B19, 0x11D0, [0x9B'u8, 0x60, 0x00, 0xC0, 0x4F, 0xC2, 0xF5, 0x1D])
  IID_IDA2FontStyle* = DEFINE_GUID(0x283807B5'u32, 0x2C60, 0x11D0, [0xA3'u8, 0x1D, 0x00, 0xAA, 0x00, 0xB9, 0x2C, 0x03])
  IID_IDA2Geometry* = DEFINE_GUID(0x4A933702'u32, 0xE36F, 0x11D0, [0x9B'u8, 0x99, 0x00, 0xC0, 0x4F, 0xC2, 0xF5, 0x1D])
  IID_IDA2Image* = DEFINE_GUID(0x45393DF0'u32, 0x54B9, 0x11CF, [0x92'u8, 0xA2, 0x00, 0xAA, 0x00, 0xB8, 0xA7, 0x33])
  IID_IDA2LineStyle* = DEFINE_GUID(0x2AE71568'u32, 0x4B34, 0x11D1, [0xB1'u8, 0xE3, 0x00, 0xC0, 0x4F, 0xC2, 0xA0, 0xCA])
  IID_IDA2Statics* = DEFINE_GUID(0xD17506C2'u32, 0x6B26, 0x11D0, [0x89'u8, 0x14, 0x00, 0xC0, 0x4F, 0xC2, 0xA0, 0xCA])
  IID_IDA2View* = DEFINE_GUID(0x5F00F545'u32, 0xDF18, 0x11D1, [0xAB'u8, 0x6F, 0x00, 0xC0, 0x4F, 0xD9, 0x2B, 0x6B])
  IID_IDA2ViewerControl* = DEFINE_GUID(0xC46C1BEF'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDA2ViewerControlWindowed* = DEFINE_GUID(0xC46C1BED'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDAArray* = DEFINE_GUID(0xFA261CF0'u32, 0xC44E, 0x11D1, [0x9B'u8, 0xE4, 0x00, 0xC0, 0x4F, 0xC2, 0xF5, 0x1D])
  IID_IDABbox2* = DEFINE_GUID(0xBA8B033E'u32, 0x1E91, 0x11D1, [0x88'u8, 0x09, 0x00, 0xC0, 0x4F, 0xC2, 0x9D, 0x46])
  IID_IDABbox3* = DEFINE_GUID(0x0E41257B'u32, 0x812D, 0x11D0, [0x9B'u8, 0x4A, 0x00, 0xC0, 0x4F, 0xC2, 0xF5, 0x1D])
  IID_IDABehavior* = DEFINE_GUID(0x5DFB2651'u32, 0x9668, 0x11D0, [0xB1'u8, 0x7B, 0x00, 0xC0, 0x4F, 0xC2, 0xA0, 0xCA])
  IID_IDABoolean* = DEFINE_GUID(0xC46C1BDA'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDABvrHook* = DEFINE_GUID(0x50B4791F'u32, 0x4731, 0x11D0, [0x89'u8, 0x12, 0x00, 0xC0, 0x4F, 0xC2, 0xA0, 0xCA])
  IID_IDACamera* = DEFINE_GUID(0xC46C1BCA'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDAColor* = DEFINE_GUID(0xC46C1BDC'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDADashStyle* = DEFINE_GUID(0xF3E1B522'u32, 0xD8A6, 0x11D1, [0x9B'u8, 0xE5, 0x00, 0xC0, 0x4F, 0xC2, 0xF5, 0x1D])
  IID_IDADrawingSurface* = DEFINE_GUID(0xC46C1BF4'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDADXTransformResult* = DEFINE_GUID(0xAF868305'u32, 0xAB0B, 0x11D0, [0x87'u8, 0x6A, 0x00, 0xC0, 0x4F, 0xC2, 0x9D, 0x46])
  IID_IDAEndStyle* = DEFINE_GUID(0xB6FFC24C'u32, 0x7E13, 0x11D0, [0x9B'u8, 0x47, 0x00, 0xC0, 0x4F, 0xC2, 0xF5, 0x1D])
  IID_IDAEvent* = DEFINE_GUID(0xC46C1BCE'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDAFontStyle* = DEFINE_GUID(0xC46C1BC1'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDAGeometry* = DEFINE_GUID(0xC46C1BCC'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDAImage* = DEFINE_GUID(0xC46C1BC4'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDAImport* = DEFINE_GUID(0xC46C1BEE'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDAImportationResult* = DEFINE_GUID(0xB90E5258'u32, 0x574A, 0x11D1, [0x8E'u8, 0x7B, 0x00, 0xC0, 0x4F, 0xC2, 0x9D, 0x46])
  IID_IDAJoinStyle* = DEFINE_GUID(0xA3034056'u32, 0xEC1C, 0x11D1, [0x9B'u8, 0xE8, 0x00, 0xC0, 0x4F, 0xC2, 0xF5, 0x1D])
  IID_IDALineStyle* = DEFINE_GUID(0x69AD90EF'u32, 0x1C20, 0x11D1, [0x88'u8, 0x01, 0x00, 0xC0, 0x4F, 0xC2, 0x9D, 0x46])
  IID_IDAMatte* = DEFINE_GUID(0xC46C1BE4'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDAMicrophone* = DEFINE_GUID(0xC46C1BD8'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDAModifiableBehavior* = DEFINE_GUID(0xC46C1BEC'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDAMontage* = DEFINE_GUID(0xC46C1BC8'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDANumber* = DEFINE_GUID(0xD17506C3'u32, 0x6B26, 0x11D0, [0x89'u8, 0x14, 0x00, 0xC0, 0x4F, 0xC2, 0xA0, 0xCA])
  IID_IDAPair* = DEFINE_GUID(0x542FB453'u32, 0x5003, 0x11CF, [0x92'u8, 0xA2, 0x00, 0xAA, 0x00, 0xB8, 0xA7, 0x33])
  IID_IDAPath2* = DEFINE_GUID(0xC46C1BD0'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDAPickableResult* = DEFINE_GUID(0xC46C1BDE'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDAPoint2* = DEFINE_GUID(0x9CDE7341'u32, 0x3C20, 0x11D0, [0xA3'u8, 0x30, 0x00, 0xAA, 0x00, 0xB9, 0x2C, 0x03])
  IID_IDAPoint3* = DEFINE_GUID(0xC46C1BD6'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDAPreferences* = DEFINE_GUID(0xB90E525A'u32, 0x574A, 0x11D1, [0x8E'u8, 0x7B, 0x00, 0xC0, 0x4F, 0xC2, 0x9D, 0x46])
  IID_IDASite* = DEFINE_GUID(0xB90E5259'u32, 0x574A, 0x11D1, [0x8E'u8, 0x7B, 0x00, 0xC0, 0x4F, 0xC2, 0x9D, 0x46])
  IID_IDASound* = DEFINE_GUID(0xC46C1BE6'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDAStatics* = DEFINE_GUID(0x5DFB2650'u32, 0x9668, 0x11D0, [0xB1'u8, 0x7B, 0x00, 0xC0, 0x4F, 0xC2, 0xA0, 0xCA])
  IID_IDAString* = DEFINE_GUID(0xC46C1BD2'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDataAdviseHolder* = DEFINE_GUID(0x00000110'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IDataChannel* = DEFINE_GUID(0xAD42D12A'u32, 0x4AD0, 0x4856, [0x91'u8, 0x9E, 0xE8, 0x54, 0xC9, 0x1D, 0x18, 0x56])
  IID_IDataConvert* = DEFINE_GUID(0x0C733A8D'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IDataFilter* = DEFINE_GUID(0x69D14C80'u32, 0xC18E, 0x11D0, [0xA9'u8, 0xCE, 0x00, 0x60, 0x97, 0x94, 0x23, 0x11])
  IID_IDataObject* = DEFINE_GUID(0x0000010E'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IDATransform2* = DEFINE_GUID(0xC46C1BD4'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDATransform3* = DEFINE_GUID(0xC46C1BE0'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDATuple* = DEFINE_GUID(0x542FB452'u32, 0x5003, 0x11CF, [0x92'u8, 0xA2, 0x00, 0xAA, 0x00, 0xB8, 0xA7, 0x33])
  IID_IDAUntilNotifier* = DEFINE_GUID(0x25B0F91C'u32, 0xD23D, 0x11D0, [0x9B'u8, 0x85, 0x00, 0xC0, 0x4F, 0xC2, 0xF5, 0x1D])
  IID_IDAUserData* = DEFINE_GUID(0xBACD4D86'u32, 0x4A4F, 0x11D1, [0x9B'u8, 0xC8, 0x00, 0xC0, 0x4F, 0xC2, 0xF5, 0x1D])
  IID_IDAVector2* = DEFINE_GUID(0xC46C1BC6'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDAVector3* = DEFINE_GUID(0xC46C1BE2'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDAView* = DEFINE_GUID(0xAF868304'u32, 0xAB0B, 0x11D0, [0x87'u8, 0x6A, 0x00, 0xC0, 0x4F, 0xC2, 0x9D, 0x46])
  IID_IDAViewerControl* = DEFINE_GUID(0xC46C1BDD'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDAViewerControlWindowed* = DEFINE_GUID(0xC46C1BCD'u32, 0x3C52, 0x11D0, [0x92'u8, 0x00, 0x84, 0x8C, 0x1D, 0x00, 0x00, 0x00])
  IID_IDAViewSite* = DEFINE_GUID(0xBCBB1F75'u32, 0xE384, 0x11D0, [0x9B'u8, 0x99, 0x00, 0xC0, 0x4F, 0xC2, 0xF5, 0x1D])
  IID_IDBAsynchNotify* = DEFINE_GUID(0x0C733A96'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IDBAsynchStatus* = DEFINE_GUID(0x0C733A95'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IDBBinderProperties* = DEFINE_GUID(0x0C733AB3'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IDBCreateCommand* = DEFINE_GUID(0x0C733A1D'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IDBCreateSession* = DEFINE_GUID(0x0C733A5D'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IDBDataSourceAdmin* = DEFINE_GUID(0x0C733A7A'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IDBInfo* = DEFINE_GUID(0x0C733A89'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IDBInitialize* = DEFINE_GUID(0x0C733A8B'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IDBProperties* = DEFINE_GUID(0x0C733A8A'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IDBSchemaCommand* = DEFINE_GUID(0x0C733A50'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IDBSchemaRowset* = DEFINE_GUID(0x0C733A7B'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IDCInfo* = DEFINE_GUID(0x0C733A9C'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IDDVideoAcceleratorContainer* = DEFINE_GUID(0xACA12120'u32, 0x3356, 0x11D1, [0x8F'u8, 0xCF, 0x00, 0xC0, 0x4F, 0xC2, 0x9B, 0x4E])
  IID_IDDVideoPortContainer* = DEFINE_GUID(0x6C142760'u32, 0xA733, 0x11CE, [0xA5'u8, 0x21, 0x00, 0x20, 0xAF, 0x0B, 0xE5, 0x60])
  IID_IDebug* = DEFINE_GUID(0x00000123'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IDebugApplication* = DEFINE_GUID(0x51973C32'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugApplication32* = DEFINE_GUID(0x51973C32'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugApplication64* = DEFINE_GUID(0x4DEDC754'u32, 0x04C7, 0x4F10, [0x9E'u8, 0x60, 0x16, 0xA3, 0x90, 0xFE, 0x6E, 0x62])
  IID_IDebugApplicationEx* = DEFINE_GUID(0x51973C00'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugApplicationNode* = DEFINE_GUID(0x51973C34'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugApplicationNodeEvents* = DEFINE_GUID(0x51973C35'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugApplicationThread* = DEFINE_GUID(0x51973C38'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugApplicationThread64* = DEFINE_GUID(0x9DAC5886'u32, 0xDBAD, 0x456D, [0x9D'u8, 0xEE, 0x5D, 0xEC, 0x39, 0xAB, 0x3D, 0xDA])
  IID_IDebugAsyncOperation* = DEFINE_GUID(0x51973C1B'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugAsyncOperationCallBack* = DEFINE_GUID(0x51973C1C'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugCodeContext* = DEFINE_GUID(0x51973C13'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugCookie* = DEFINE_GUID(0x51973C39'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugDocument* = DEFINE_GUID(0x51973C21'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugDocumentContext* = DEFINE_GUID(0x51973C28'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugDocumentHelper32* = DEFINE_GUID(0x51973C26'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugDocumentHelper64* = DEFINE_GUID(0xC4C7363C'u32, 0x20FD, 0x47F9, [0xBD'u8, 0x82, 0x48, 0x55, 0xE0, 0x15, 0x08, 0x71])
  IID_IDebugDocumentHelperEx* = DEFINE_GUID(0x51973C02'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugDocumentHost* = DEFINE_GUID(0x51973C27'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugDocumentInfo* = DEFINE_GUID(0x51973C1F'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugDocumentProvider* = DEFINE_GUID(0x51973C20'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugDocumentText* = DEFINE_GUID(0x51973C22'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugDocumentTextAuthor* = DEFINE_GUID(0x51973C24'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugDocumentTextEvents* = DEFINE_GUID(0x51973C23'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugDocumentTextExternalAuthor* = DEFINE_GUID(0x51973C25'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugExpression* = DEFINE_GUID(0x51973C14'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugExpressionCallBack* = DEFINE_GUID(0x51973C16'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugExpressionContext* = DEFINE_GUID(0x51973C15'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugExtendedProperty* = DEFINE_GUID(0x51973C52'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugFormatter* = DEFINE_GUID(0x51973C05'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugHelper* = DEFINE_GUID(0x51973C3F'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugHelperEx* = DEFINE_GUID(0x51973C08'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugOut* = DEFINE_GUID(0xC733E4F1'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  IID_IDebugProperty* = DEFINE_GUID(0x51973C50'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugPropertyEnumType_All* = DEFINE_GUID(0x51973C55'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugPropertyEnumType_Arguments* = DEFINE_GUID(0x51973C57'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugPropertyEnumType_Locals* = DEFINE_GUID(0x51973C56'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugPropertyEnumType_LocalsPlus* = DEFINE_GUID(0x51973C58'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugPropertyEnumType_Registers* = DEFINE_GUID(0x51973C59'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugRegister* = DEFINE_GUID(0xC733E4F0'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  IID_IDebugSessionProvider* = DEFINE_GUID(0x51973C29'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugSessionProviderEx* = DEFINE_GUID(0x51973C09'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugSetValueCallback* = DEFINE_GUID(0x51973C06'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugStackFrame* = DEFINE_GUID(0x51973C17'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugStackFrameSniffer* = DEFINE_GUID(0x51973C18'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugStackFrameSnifferEx* = DEFINE_GUID(0x51973C19'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugStackFrameSnifferEx32* = DEFINE_GUID(0x51973C19'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugStackFrameSnifferEx64* = DEFINE_GUID(0x8CD12AF4'u32, 0x49C1, 0x4D52, [0x8D'u8, 0x8A, 0xC1, 0x46, 0xF4, 0x75, 0x81, 0xAA])
  IID_IDebugStream* = DEFINE_GUID(0x00000124'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IDebugSyncOperation* = DEFINE_GUID(0x51973C1A'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugThreadCall* = DEFINE_GUID(0x51973C36'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugThreadCall32* = DEFINE_GUID(0x51973C36'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IDebugThreadCall64* = DEFINE_GUID(0xCB3FA335'u32, 0xE979, 0x42FD, [0x9F'u8, 0xCF, 0xA7, 0x54, 0x6A, 0x0F, 0x39, 0x05])
  IID_IDelaydC* = DEFINE_GUID(0xBFF9C030'u32, 0xB58F, 0x11CE, [0xB5'u8, 0xB0, 0x00, 0xAA, 0x00, 0x6C, 0xB3, 0x7D])
  IID_IDelayedRelease* = DEFINE_GUID(0x000214ED'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IDelegateFolder* = DEFINE_GUID(0xADD8BA80'u32, 0x002B, 0x11D0, [0x8F'u8, 0x0F, 0x00, 0xC0, 0x4F, 0xD7, 0xD0, 0x62])
  IID_IDeskBand* = DEFINE_GUID(0xEB0FE172'u32, 0x1A3A, 0x11D0, [0x89'u8, 0xB3, 0x00, 0xA0, 0xC9, 0x0A, 0x90, 0xAC])
  IID_IDeviceRect* = DEFINE_GUID(0x3050F6D5'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IDfReserved1* = DEFINE_GUID(0x00000013'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IDfReserved2* = DEFINE_GUID(0x00000014'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IDfReserved3* = DEFINE_GUID(0x00000015'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IDialBranding* = DEFINE_GUID(0x8AECAFA9'u32, 0x4306, 0x43CC, [0x8C'u8, 0x5A, 0x76, 0x5F, 0x29, 0x79, 0xCC, 0x16])
  IID_IDialEngine* = DEFINE_GUID(0x39FD782B'u32, 0x7905, 0x40D5, [0x91'u8, 0x48, 0x3C, 0x9B, 0x19, 0x04, 0x23, 0xD5])
  IID_IDialEventSink* = DEFINE_GUID(0x2D86F4FF'u32, 0x6E2D, 0x4488, [0xB2'u8, 0xE9, 0x69, 0x34, 0xAF, 0xD4, 0x1B, 0xEA])
  IID_IDifferencing* = DEFINE_GUID(0x994F0AF0'u32, 0x2977, 0x11CE, [0xBB'u8, 0x80, 0x08, 0x00, 0x2B, 0x36, 0xB2, 0xB0])
  IID_IDirect3D* = DEFINE_GUID(0x3BBA0080'u32, 0x2421, 0x11CF, [0xA3'u8, 0x1A, 0x00, 0xAA, 0x00, 0xB9, 0x33, 0x56])
  IID_IDirect3D2* = DEFINE_GUID(0x6AAE1EC1'u32, 0x662A, 0x11D0, [0x88'u8, 0x9D, 0x00, 0xAA, 0x00, 0xBB, 0xB7, 0x6A])
  IID_IDirect3D3* = DEFINE_GUID(0xBB223240'u32, 0xE72B, 0x11D0, [0xA9'u8, 0xB4, 0x00, 0xAA, 0x00, 0xC0, 0x99, 0x3E])
  IID_IDirect3D7* = DEFINE_GUID(0xF5049E77'u32, 0x4861, 0x11D2, [0xA4'u8, 0x07, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0xA8])
  IID_IDirect3DDevice* = DEFINE_GUID(0x64108800'u32, 0x957D, 0x11D0, [0x89'u8, 0xAB, 0x00, 0xA0, 0xC9, 0x05, 0x41, 0x29])
  IID_IDirect3DDevice2* = DEFINE_GUID(0x93281501'u32, 0x8CF8, 0x11D0, [0x89'u8, 0xAB, 0x00, 0xA0, 0xC9, 0x05, 0x41, 0x29])
  IID_IDirect3DDevice3* = DEFINE_GUID(0xB0AB3B60'u32, 0x33D7, 0x11D1, [0xA9'u8, 0x81, 0x00, 0xC0, 0x4F, 0xD7, 0xB1, 0x74])
  IID_IDirect3DDevice7* = DEFINE_GUID(0xF5049E79'u32, 0x4861, 0x11D2, [0xA4'u8, 0x07, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0xA8])
  IID_IDirect3DExecuteBuffer* = DEFINE_GUID(0x4417C145'u32, 0x33AD, 0x11CF, [0x81'u8, 0x6F, 0x00, 0x00, 0xC0, 0x20, 0x15, 0x6E])
  IID_IDirect3DHALDevice* = DEFINE_GUID(0x84E63DE0'u32, 0x46AA, 0x11CF, [0x81'u8, 0x6F, 0x00, 0x00, 0xC0, 0x20, 0x15, 0x6E])
  IID_IDirect3DLight* = DEFINE_GUID(0x4417C142'u32, 0x33AD, 0x11CF, [0x81'u8, 0x6F, 0x00, 0x00, 0xC0, 0x20, 0x15, 0x6E])
  IID_IDirect3DMaterial* = DEFINE_GUID(0x4417C144'u32, 0x33AD, 0x11CF, [0x81'u8, 0x6F, 0x00, 0x00, 0xC0, 0x20, 0x15, 0x6E])
  IID_IDirect3DMaterial2* = DEFINE_GUID(0x93281503'u32, 0x8CF8, 0x11D0, [0x89'u8, 0xAB, 0x00, 0xA0, 0xC9, 0x05, 0x41, 0x29])
  IID_IDirect3DMaterial3* = DEFINE_GUID(0xCA9C46F4'u32, 0xD3C5, 0x11D1, [0xB7'u8, 0x5A, 0x00, 0x60, 0x08, 0x52, 0xB3, 0x12])
  IID_IDirect3DMMXDevice* = DEFINE_GUID(0x881949A1'u32, 0xD6F3, 0x11D0, [0x89'u8, 0xAB, 0x00, 0xA0, 0xC9, 0x05, 0x41, 0x29])
  IID_IDirect3DNullDevice* = DEFINE_GUID(0x8767DF22'u32, 0xBACC, 0x11D1, [0x89'u8, 0x69, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0xA8])
  IID_IDirect3DRampDevice* = DEFINE_GUID(0xF2086B20'u32, 0x259F, 0x11CF, [0xA3'u8, 0x1A, 0x00, 0xAA, 0x00, 0xB9, 0x33, 0x56])
  IID_IDirect3DRefDevice* = DEFINE_GUID(0x50936643'u32, 0x13E9, 0x11D1, [0x89'u8, 0xAA, 0x00, 0xA0, 0xC9, 0x05, 0x41, 0x29])
  IID_IDirect3DRGBDevice* = DEFINE_GUID(0xA4665C60'u32, 0x2673, 0x11CF, [0xA3'u8, 0x1A, 0x00, 0xAA, 0x00, 0xB9, 0x33, 0x56])
  IID_IDirect3DRM* = DEFINE_GUID(0x2BC49361'u32, 0x8327, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRM2* = DEFINE_GUID(0x4516ECC8'u32, 0x8F20, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  IID_IDirect3DRM3* = DEFINE_GUID(0x4516EC83'u32, 0x8F20, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  IID_IDirect3DRMAnimation* = DEFINE_GUID(0xEB16CB0D'u32, 0xD271, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMAnimation2* = DEFINE_GUID(0xFF6B7F77'u32, 0xA40E, 0x11D1, [0x91'u8, 0xF9, 0x00, 0x00, 0xF8, 0x75, 0x8E, 0x66])
  IID_IDirect3DRMAnimationArray* = DEFINE_GUID(0xD5F1CAE0'u32, 0x4BD7, 0x11D1, [0xB9'u8, 0x74, 0x00, 0x60, 0x08, 0x3E, 0x45, 0xF3])
  IID_IDirect3DRMAnimationSet* = DEFINE_GUID(0xEB16CB0E'u32, 0xD271, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMAnimationSet2* = DEFINE_GUID(0xFF6B7F79'u32, 0xA40E, 0x11D1, [0x91'u8, 0xF9, 0x00, 0x00, 0xF8, 0x75, 0x8E, 0x66])
  IID_IDirect3DRMClippedVisual* = DEFINE_GUID(0x5434E733'u32, 0x6D66, 0x11D1, [0xBB'u8, 0x0B, 0x00, 0x00, 0xF8, 0x75, 0x86, 0x5A])
  IID_IDirect3DRMDevice* = DEFINE_GUID(0xE9E19280'u32, 0x6E05, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMDevice2* = DEFINE_GUID(0x4516EC78'u32, 0x8F20, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  IID_IDirect3DRMDevice3* = DEFINE_GUID(0x549F498B'u32, 0xBFEB, 0x11D1, [0x8E'u8, 0xD8, 0x00, 0xA0, 0xC9, 0x67, 0xA4, 0x82])
  IID_IDirect3DRMDeviceArray* = DEFINE_GUID(0xEB16CB10'u32, 0xD271, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMFace* = DEFINE_GUID(0xEB16CB07'u32, 0xD271, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMFace2* = DEFINE_GUID(0x4516EC81'u32, 0x8F20, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  IID_IDirect3DRMFaceArray* = DEFINE_GUID(0xEB16CB17'u32, 0xD271, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMFrame* = DEFINE_GUID(0xEB16CB03'u32, 0xD271, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMFrame2* = DEFINE_GUID(0xC3DFBD60'u32, 0x3988, 0x11D0, [0x9E'u8, 0xC2, 0x00, 0x00, 0xC0, 0x29, 0x1A, 0xC3])
  IID_IDirect3DRMFrame3* = DEFINE_GUID(0xFF6B7F70'u32, 0xA40E, 0x11D1, [0x91'u8, 0xF9, 0x00, 0x00, 0xF8, 0x75, 0x8E, 0x66])
  IID_IDirect3DRMFrameArray* = DEFINE_GUID(0xEB16CB12'u32, 0xD271, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMInterpolator* = DEFINE_GUID(0x242F6BC1'u32, 0x3849, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  IID_IDirect3DRMLight* = DEFINE_GUID(0xEB16CB08'u32, 0xD271, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMLightArray* = DEFINE_GUID(0xEB16CB14'u32, 0xD271, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMMaterial* = DEFINE_GUID(0xEB16CB0B'u32, 0xD271, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMMaterial2* = DEFINE_GUID(0xFF6B7F75'u32, 0xA40E, 0x11D1, [0x91'u8, 0xF9, 0x00, 0x00, 0xF8, 0x75, 0x8E, 0x66])
  IID_IDirect3DRMMesh* = DEFINE_GUID(0xA3A80D01'u32, 0x6E12, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMMeshBuilder* = DEFINE_GUID(0xA3A80D02'u32, 0x6E12, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMMeshBuilder2* = DEFINE_GUID(0x4516EC77'u32, 0x8F20, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  IID_IDirect3DRMMeshBuilder3* = DEFINE_GUID(0x4516EC82'u32, 0x8F20, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  IID_IDirect3DRMObject* = DEFINE_GUID(0xEB16CB00'u32, 0xD271, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMObject2* = DEFINE_GUID(0x4516EC7C'u32, 0x8F20, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  IID_IDirect3DRMObjectArray* = DEFINE_GUID(0x242F6BC2'u32, 0x3849, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  IID_IDirect3DRMPicked2Array* = DEFINE_GUID(0x4516EC7B'u32, 0x8F20, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  IID_IDirect3DRMPickedArray* = DEFINE_GUID(0xEB16CB16'u32, 0xD271, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMProgressiveMesh* = DEFINE_GUID(0x4516EC79'u32, 0x8F20, 0x11D0, [0x9B'u8, 0x6D, 0x00, 0x00, 0xC0, 0x78, 0x1B, 0xC3])
  IID_IDirect3DRMShadow* = DEFINE_GUID(0xAF359780'u32, 0x6BA3, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMShadow2* = DEFINE_GUID(0x86B44E25'u32, 0x9C82, 0x11D1, [0xBB'u8, 0x0B, 0x00, 0xA0, 0xC9, 0x81, 0xA0, 0xA6])
  IID_IDirect3DRMTexture* = DEFINE_GUID(0xEB16CB09'u32, 0xD271, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMTexture2* = DEFINE_GUID(0x120F30C0'u32, 0x1629, 0x11D0, [0x94'u8, 0x1C, 0x00, 0x80, 0xC8, 0x0C, 0xFA, 0x7B])
  IID_IDirect3DRMTexture3* = DEFINE_GUID(0xFF6B7F73'u32, 0xA40E, 0x11D1, [0x91'u8, 0xF9, 0x00, 0x00, 0xF8, 0x75, 0x8E, 0x66])
  IID_IDirect3DRMUserVisual* = DEFINE_GUID(0x59163DE0'u32, 0x6D43, 0x11CF, [0xAC'u8, 0x4A, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMViewport* = DEFINE_GUID(0xEB16CB02'u32, 0xD271, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMViewport2* = DEFINE_GUID(0x4A1B1BE6'u32, 0xBFED, 0x11D1, [0x8E'u8, 0xD8, 0x00, 0xA0, 0xC9, 0x67, 0xA4, 0x82])
  IID_IDirect3DRMViewportArray* = DEFINE_GUID(0xEB16CB11'u32, 0xD271, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMVisual* = DEFINE_GUID(0xEB16CB04'u32, 0xD271, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMVisualArray* = DEFINE_GUID(0xEB16CB13'u32, 0xD271, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMWinDevice* = DEFINE_GUID(0xC5016CC0'u32, 0xD273, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DRMWrap* = DEFINE_GUID(0xEB16CB0A'u32, 0xD271, 0x11CE, [0xAC'u8, 0x48, 0x00, 0x00, 0xC0, 0x38, 0x25, 0xA1])
  IID_IDirect3DTexture* = DEFINE_GUID(0x2CDCD9E0'u32, 0x25A0, 0x11CF, [0xA3'u8, 0x1A, 0x00, 0xAA, 0x00, 0xB9, 0x33, 0x56])
  IID_IDirect3DTexture2* = DEFINE_GUID(0x93281502'u32, 0x8CF8, 0x11D0, [0x89'u8, 0xAB, 0x00, 0xA0, 0xC9, 0x05, 0x41, 0x29])
  IID_IDirect3DTnLHalDevice* = DEFINE_GUID(0xF5049E78'u32, 0x4861, 0x11D2, [0xA4'u8, 0x07, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0xA8])
  IID_IDirect3DVertexBuffer* = DEFINE_GUID(0x7A503555'u32, 0x4A83, 0x11D1, [0xA5'u8, 0xDB, 0x00, 0xA0, 0xC9, 0x03, 0x67, 0xF8])
  IID_IDirect3DVertexBuffer7* = DEFINE_GUID(0xF5049E7D'u32, 0x4861, 0x11D2, [0xA4'u8, 0x07, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0xA8])
  IID_IDirect3DViewport* = DEFINE_GUID(0x4417C146'u32, 0x33AD, 0x11CF, [0x81'u8, 0x6F, 0x00, 0x00, 0xC0, 0x20, 0x15, 0x6E])
  IID_IDirect3DViewport2* = DEFINE_GUID(0x93281500'u32, 0x8CF8, 0x11D0, [0x89'u8, 0xAB, 0x00, 0xA0, 0xC9, 0x05, 0x41, 0x29])
  IID_IDirect3DViewport3* = DEFINE_GUID(0xB0AB3B61'u32, 0x33D7, 0x11D1, [0xA9'u8, 0x81, 0x00, 0xC0, 0x4F, 0xD7, 0xB1, 0x74])
  IID_IDirectDraw* = DEFINE_GUID(0x6C14DB80'u32, 0xA733, 0x11CE, [0xA5'u8, 0x21, 0x00, 0x20, 0xAF, 0x0B, 0xE5, 0x60])
  IID_IDirectDraw2* = DEFINE_GUID(0xB3A6F3E0'u32, 0x2B43, 0x11CF, [0xA2'u8, 0xDE, 0x00, 0xAA, 0x00, 0xB9, 0x33, 0x56])
  IID_IDirectDraw4* = DEFINE_GUID(0x9C59509A'u32, 0x39BD, 0x11D1, [0x8C'u8, 0x4A, 0x00, 0xC0, 0x4F, 0xD9, 0x30, 0xC5])
  IID_IDirectDraw7* = DEFINE_GUID(0x15E65EC0'u32, 0x3B9C, 0x11D2, [0xB9'u8, 0x2F, 0x00, 0x60, 0x97, 0x97, 0xEA, 0x5B])
  IID_IDirectDrawClipper* = DEFINE_GUID(0x6C14DB85'u32, 0xA733, 0x11CE, [0xA5'u8, 0x21, 0x00, 0x20, 0xAF, 0x0B, 0xE5, 0x60])
  IID_IDirectDrawColorControl* = DEFINE_GUID(0x4B9F0EE0'u32, 0x0D7E, 0x11D0, [0x9B'u8, 0x06, 0x00, 0xA0, 0xC9, 0x03, 0xA3, 0xB8])
  IID_IDirectDrawFactory2* = DEFINE_GUID(0x89B2C488'u32, 0x4AF4, 0x11D1, [0x8C'u8, 0x4C, 0x00, 0xC0, 0x4F, 0xD9, 0x30, 0xC5])
  IID_IDirectDrawGammaControl* = DEFINE_GUID(0x69C11C3E'u32, 0xB46B, 0x11D1, [0xAD'u8, 0x7A, 0x00, 0xC0, 0x4F, 0xC2, 0x9B, 0x4E])
  IID_IDirectDrawKernel* = DEFINE_GUID(0x8D56C120'u32, 0x6A08, 0x11D0, [0x9B'u8, 0x06, 0x00, 0xA0, 0xC9, 0x03, 0xA3, 0xB8])
  IID_IDirectDrawOptSurface* = DEFINE_GUID(0x51191F1E'u32, 0x4F2B, 0x11D1, [0x8C'u8, 0xC3, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0xA8])
  IID_IDirectDrawPalette* = DEFINE_GUID(0x6C14DB84'u32, 0xA733, 0x11CE, [0xA5'u8, 0x21, 0x00, 0x20, 0xAF, 0x0B, 0xE5, 0x60])
  IID_IDirectDrawPalette2* = DEFINE_GUID(0xC03C477E'u32, 0x6519, 0x11D1, [0x8C'u8, 0x52, 0x00, 0xC0, 0x4F, 0xD9, 0x30, 0xC5])
  IID_IDirectDrawSurface* = DEFINE_GUID(0x6C14DB81'u32, 0xA733, 0x11CE, [0xA5'u8, 0x21, 0x00, 0x20, 0xAF, 0x0B, 0xE5, 0x60])
  IID_IDirectDrawSurface2* = DEFINE_GUID(0x57805885'u32, 0x6EEC, 0x11CF, [0x94'u8, 0x41, 0xA8, 0x23, 0x03, 0xC1, 0x0E, 0x27])
  IID_IDirectDrawSurface3* = DEFINE_GUID(0xDA044E00'u32, 0x69B2, 0x11D0, [0xA1'u8, 0xD5, 0x00, 0xAA, 0x00, 0xB8, 0xDF, 0xBB])
  IID_IDirectDrawSurface4* = DEFINE_GUID(0x0B2B8630'u32, 0xAD35, 0x11D0, [0x8E'u8, 0xA6, 0x00, 0x60, 0x97, 0x97, 0xEA, 0x5B])
  IID_IDirectDrawSurface7* = DEFINE_GUID(0x06675A80'u32, 0x3B9B, 0x11D2, [0xB9'u8, 0x2F, 0x00, 0x60, 0x97, 0x97, 0xEA, 0x5B])
  IID_IDirectDrawSurfaceKernel* = DEFINE_GUID(0x60755DA0'u32, 0x6A40, 0x11D0, [0x9B'u8, 0x06, 0x00, 0xA0, 0xC9, 0x03, 0xA3, 0xB8])
  IID_IDirectDrawVideoAccelerator* = DEFINE_GUID(0xC9B2D740'u32, 0x3356, 0x11D1, [0x8F'u8, 0xCF, 0x00, 0xC0, 0x4F, 0xC2, 0x9B, 0x4E])
  IID_IDirectDrawVideoPort* = DEFINE_GUID(0xB36D93E0'u32, 0x2B43, 0x11CF, [0xA2'u8, 0xDE, 0x00, 0xAA, 0x00, 0xB9, 0x33, 0x56])
  IID_IDirectInput2A* = DEFINE_GUID(0x5944E662'u32, 0xAA8A, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_IDirectInput2W* = DEFINE_GUID(0x5944E663'u32, 0xAA8A, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_IDirectInput7A* = DEFINE_GUID(0x9A4CB684'u32, 0x236D, 0x11D3, [0x8E'u8, 0x9D, 0x00, 0xC0, 0x4F, 0x68, 0x44, 0xAE])
  IID_IDirectInput7W* = DEFINE_GUID(0x9A4CB685'u32, 0x236D, 0x11D3, [0x8E'u8, 0x9D, 0x00, 0xC0, 0x4F, 0x68, 0x44, 0xAE])
  IID_IDirectInputA* = DEFINE_GUID(0x89521360'u32, 0xAA8A, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_IDirectInputDevice2A* = DEFINE_GUID(0x5944E682'u32, 0xC92E, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_IDirectInputDevice2W* = DEFINE_GUID(0x5944E683'u32, 0xC92E, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_IDirectInputDevice7A* = DEFINE_GUID(0x57D7C6BC'u32, 0x2356, 0x11D3, [0x8E'u8, 0x9D, 0x00, 0xC0, 0x4F, 0x68, 0x44, 0xAE])
  IID_IDirectInputDevice7W* = DEFINE_GUID(0x57D7C6BD'u32, 0x2356, 0x11D3, [0x8E'u8, 0x9D, 0x00, 0xC0, 0x4F, 0x68, 0x44, 0xAE])
  IID_IDirectInputDeviceA* = DEFINE_GUID(0x5944E680'u32, 0xC92E, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_IDirectInputDeviceW* = DEFINE_GUID(0x5944E681'u32, 0xC92E, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_IDirectInputEffect* = DEFINE_GUID(0xE7E1F7C0'u32, 0x88D2, 0x11D0, [0x9A'u8, 0xD0, 0x00, 0xA0, 0xC9, 0xA0, 0x6E, 0x35])
  IID_IDirectInputEffectDriver* = DEFINE_GUID(0x02538130'u32, 0x898F, 0x11D0, [0x9A'u8, 0xD0, 0x00, 0xA0, 0xC9, 0xA0, 0x6E, 0x35])
  IID_IDirectInputJoyConfig* = DEFINE_GUID(0x1DE12AB1'u32, 0xC9F5, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_IDirectInputPIDDriver* = DEFINE_GUID(0xEEC6993A'u32, 0xB3FD, 0x11D2, [0xA9'u8, 0x16, 0x00, 0xC0, 0x4F, 0xB9, 0x86, 0x38])
  IID_IDirectInputW* = DEFINE_GUID(0x89521361'u32, 0xAA8A, 0x11CF, [0xBF'u8, 0xC7, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_IDirectMusic* = DEFINE_GUID(0x6536115A'u32, 0x7B2D, 0x11D2, [0xBA'u8, 0x18, 0x00, 0x00, 0xF8, 0x75, 0xAC, 0x12])
  IID_IDirectMusic2* = DEFINE_GUID(0x6FC2CAE1'u32, 0xBC78, 0x11D2, [0xAF'u8, 0xA6, 0x00, 0xAA, 0x00, 0x24, 0xD8, 0xB6])
  IID_IDirectMusicBand* = DEFINE_GUID(0xD2AC28C0'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  IID_IDirectMusicBuffer* = DEFINE_GUID(0xD2AC2878'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  IID_IDirectMusicChordMap* = DEFINE_GUID(0xD2AC28BE'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  IID_IDirectMusicCollection* = DEFINE_GUID(0xD2AC287C'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  IID_IDirectMusicComposer* = DEFINE_GUID(0xD2AC28BF'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  IID_IDirectMusicDownload* = DEFINE_GUID(0xD2AC287B'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  IID_IDirectMusicDownloadedInstrument* = DEFINE_GUID(0xD2AC287E'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  IID_IDirectMusicGetLoader* = DEFINE_GUID(0x68A04844'u32, 0xD13D, 0x11D1, [0xAF'u8, 0xA6, 0x00, 0xAA, 0x00, 0x24, 0xD8, 0xB6])
  IID_IDirectMusicGraph* = DEFINE_GUID(0x2BEFC277'u32, 0x5497, 0x11D2, [0xBC'u8, 0xCB, 0x00, 0xA0, 0xC9, 0x22, 0xE6, 0xEB])
  IID_IDirectMusicInstrument* = DEFINE_GUID(0xD2AC287D'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  IID_IDirectMusicLoader* = DEFINE_GUID(0x2FFAACA2'u32, 0x5DCA, 0x11D2, [0xAF'u8, 0xA6, 0x00, 0xAA, 0x00, 0x24, 0xD8, 0xB6])
  IID_IDirectMusicObject* = DEFINE_GUID(0xD2AC28B5'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  IID_IDirectMusicPerformance* = DEFINE_GUID(0x07D43D03'u32, 0x6523, 0x11D2, [0x87'u8, 0x1D, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  IID_IDirectMusicPerformance2* = DEFINE_GUID(0x6FC2CAE0'u32, 0xBC78, 0x11D2, [0xAF'u8, 0xA6, 0x00, 0xAA, 0x00, 0x24, 0xD8, 0xB6])
  IID_IDirectMusicPort* = DEFINE_GUID(0x08F2D8C9'u32, 0x37C2, 0x11D2, [0xB9'u8, 0xF9, 0x00, 0x00, 0xF8, 0x75, 0xAC, 0x12])
  IID_IDirectMusicPortDownload* = DEFINE_GUID(0xD2AC287A'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  IID_IDirectMusicSegment* = DEFINE_GUID(0xF96029A2'u32, 0x4282, 0x11D2, [0x87'u8, 0x17, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  IID_IDirectMusicSegment2* = DEFINE_GUID(0xD38894D1'u32, 0xC052, 0x11D2, [0x87'u8, 0x2F, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  IID_IDirectMusicSegmentState* = DEFINE_GUID(0xA3AFDCC7'u32, 0xD3EE, 0x11D1, [0xBC'u8, 0x8D, 0x00, 0xA0, 0xC9, 0x22, 0xE6, 0xEB])
  IID_IDirectMusicStyle* = DEFINE_GUID(0xD2AC28BD'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  IID_IDirectMusicThru* = DEFINE_GUID(0xCED153E7'u32, 0x3606, 0x11D2, [0xB9'u8, 0xF9, 0x00, 0x00, 0xF8, 0x75, 0xAC, 0x12])
  IID_IDirectMusicTool* = DEFINE_GUID(0xD2AC28BA'u32, 0xB39B, 0x11D1, [0x87'u8, 0x04, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  IID_IDirectMusicTrack* = DEFINE_GUID(0xF96029A1'u32, 0x4282, 0x11D2, [0x87'u8, 0x17, 0x00, 0x60, 0x08, 0x93, 0xB1, 0xBD])
  IID_IDirectoryObject* = DEFINE_GUID(0xE798DE2C'u32, 0x22E4, 0x11D0, [0x84'u8, 0xFE, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  IID_IDirectorySchemaMgmt* = DEFINE_GUID(0x75DB3B9C'u32, 0xA4D8, 0x11D0, [0xA7'u8, 0x9C, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0xA8])
  IID_IDirectorySearch* = DEFINE_GUID(0x109BA8EC'u32, 0x92F0, 0x11D0, [0xA7'u8, 0x90, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0xA8])
  IID_IDirectPlay* = DEFINE_GUID(0x5454E9A0'u32, 0xDB65, 0x11CE, [0x92'u8, 0x1C, 0x00, 0xAA, 0x00, 0x6C, 0x49, 0x72])
  IID_IDirectPlay2* = DEFINE_GUID(0x2B74F7C0'u32, 0x9154, 0x11CF, [0xA9'u8, 0xCD, 0x00, 0xAA, 0x00, 0x68, 0x86, 0xE3])
  IID_IDirectPlay2A* = DEFINE_GUID(0x9D460580'u32, 0xA822, 0x11CF, [0x96'u8, 0x0C, 0x00, 0x80, 0xC7, 0x53, 0x4E, 0x82])
  IID_IDirectPlay3* = DEFINE_GUID(0x133EFE40'u32, 0x32DC, 0x11D0, [0x9C'u8, 0xFB, 0x00, 0xA0, 0xC9, 0x0A, 0x43, 0xCB])
  IID_IDirectPlay3A* = DEFINE_GUID(0x133EFE41'u32, 0x32DC, 0x11D0, [0x9C'u8, 0xFB, 0x00, 0xA0, 0xC9, 0x0A, 0x43, 0xCB])
  IID_IDirectPlay4* = DEFINE_GUID(0x0AB1C530'u32, 0x4745, 0x11D1, [0xA7'u8, 0xA1, 0x00, 0x00, 0xF8, 0x03, 0xAB, 0xFC])
  IID_IDirectPlay4A* = DEFINE_GUID(0x0AB1C531'u32, 0x4745, 0x11D1, [0xA7'u8, 0xA1, 0x00, 0x00, 0xF8, 0x03, 0xAB, 0xFC])
  IID_IDirectPlayLobby* = DEFINE_GUID(0xAF465C71'u32, 0x9588, 0x11CF, [0xA0'u8, 0x20, 0x00, 0xAA, 0x00, 0x61, 0x57, 0xAC])
  IID_IDirectPlayLobby2* = DEFINE_GUID(0x0194C220'u32, 0xA303, 0x11D0, [0x9C'u8, 0x4F, 0x00, 0xA0, 0xC9, 0x05, 0x42, 0x5E])
  IID_IDirectPlayLobby2A* = DEFINE_GUID(0x1BB4AF80'u32, 0xA303, 0x11D0, [0x9C'u8, 0x4F, 0x00, 0xA0, 0xC9, 0x05, 0x42, 0x5E])
  IID_IDirectPlayLobby3* = DEFINE_GUID(0x2DB72490'u32, 0x652C, 0x11D1, [0xA7'u8, 0xA8, 0x00, 0x00, 0xF8, 0x03, 0xAB, 0xFC])
  IID_IDirectPlayLobby3A* = DEFINE_GUID(0x2DB72491'u32, 0x652C, 0x11D1, [0xA7'u8, 0xA8, 0x00, 0x00, 0xF8, 0x03, 0xAB, 0xFC])
  IID_IDirectPlayLobbyA* = DEFINE_GUID(0x26C66A70'u32, 0xB367, 0x11CF, [0xA0'u8, 0x24, 0x00, 0xAA, 0x00, 0x61, 0x57, 0xAC])
  IID_IDirectSound* = DEFINE_GUID(0x279AFA83'u32, 0x4981, 0x11CE, [0xA5'u8, 0x21, 0x00, 0x20, 0xAF, 0x0B, 0xE5, 0x60])
  IID_IDirectSound3DBuffer* = DEFINE_GUID(0x279AFA86'u32, 0x4981, 0x11CE, [0xA5'u8, 0x21, 0x00, 0x20, 0xAF, 0x0B, 0xE5, 0x60])
  IID_IDirectSound3DListener* = DEFINE_GUID(0x279AFA84'u32, 0x4981, 0x11CE, [0xA5'u8, 0x21, 0x00, 0x20, 0xAF, 0x0B, 0xE5, 0x60])
  IID_IDirectSoundBuffer* = DEFINE_GUID(0x279AFA85'u32, 0x4981, 0x11CE, [0xA5'u8, 0x21, 0x00, 0x20, 0xAF, 0x0B, 0xE5, 0x60])
  IID_IDirectSoundCapture* = DEFINE_GUID(0xB0210781'u32, 0x89CD, 0x11D0, [0xAF'u8, 0x08, 0x00, 0xA0, 0xC9, 0x25, 0xCD, 0x16])
  IID_IDirectSoundCaptureBuffer* = DEFINE_GUID(0xB0210782'u32, 0x89CD, 0x11D0, [0xAF'u8, 0x08, 0x00, 0xA0, 0xC9, 0x25, 0xCD, 0x16])
  IID_IDirectSoundNotify* = DEFINE_GUID(0xB0210783'u32, 0x89CD, 0x11D0, [0xAF'u8, 0x08, 0x00, 0xA0, 0xC9, 0x25, 0xCD, 0x16])
  IID_IDirectWriterLock* = DEFINE_GUID(0x0E6D4D92'u32, 0x6738, 0x11CF, [0x96'u8, 0x08, 0x00, 0xAA, 0x00, 0x68, 0x0D, 0xB4])
  IID_IDirectXFile* = DEFINE_GUID(0x3D82AB40'u32, 0x62DA, 0x11CF, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  IID_IDirectXFileBinary* = DEFINE_GUID(0x3D82AB46'u32, 0x62DA, 0x11CF, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  IID_IDirectXFileData* = DEFINE_GUID(0x3D82AB44'u32, 0x62DA, 0x11CF, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  IID_IDirectXFileDataReference* = DEFINE_GUID(0x3D82AB45'u32, 0x62DA, 0x11CF, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  IID_IDirectXFileEnumObject* = DEFINE_GUID(0x3D82AB41'u32, 0x62DA, 0x11CF, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  IID_IDirectXFileObject* = DEFINE_GUID(0x3D82AB43'u32, 0x62DA, 0x11CF, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  IID_IDirectXFileSaveObject* = DEFINE_GUID(0x3D82AB42'u32, 0x62DA, 0x11CF, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  IID_IDiscardableBrowserProperty* = DEFINE_GUID(0x49C3DE7C'u32, 0xD329, 0x11D0, [0xAB'u8, 0x73, 0x00, 0xC0, 0x4F, 0xC3, 0x3E, 0x80])
  IID_IDiscMaster* = DEFINE_GUID(0x520CCA62'u32, 0x51A5, 0x11D3, [0x91'u8, 0x44, 0x00, 0x10, 0x4B, 0xA1, 0x1C, 0x5E])
  IID_IDiscMasterProgressEvents* = DEFINE_GUID(0xEC9E51C1'u32, 0x4E5D, 0x11D3, [0x91'u8, 0x44, 0x00, 0x10, 0x4B, 0xA1, 0x1C, 0x5E])
  IID_IDiscRecorder* = DEFINE_GUID(0x85AC9776'u32, 0xCA88, 0x4CF2, [0x89'u8, 0x4E, 0x09, 0x59, 0x8C, 0x07, 0x8A, 0x41])
  IID_IDiscStash* = DEFINE_GUID(0x520CCA64'u32, 0x51A5, 0x11D3, [0x91'u8, 0x44, 0x00, 0x10, 0x4B, 0xA1, 0x1C, 0x5E])
  IID_IDispatch* = DEFINE_GUID(0x00020400'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IDispatchEx* = DEFINE_GUID(0xA6EF9860'u32, 0xC720, 0x11D0, [0x93'u8, 0x37, 0x00, 0xA0, 0xC9, 0x0D, 0xCA, 0xA9])
  IID_IDispError* = DEFINE_GUID(0xA6EF9861'u32, 0xC720, 0x11D0, [0x93'u8, 0x37, 0x00, 0xA0, 0xC9, 0x0D, 0xCA, 0xA9])
  IID_IDisplayPointer* = DEFINE_GUID(0x3050F69E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IDisplayServices* = DEFINE_GUID(0x3050F69D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IDithererImpl* = DEFINE_GUID(0x7C48E840'u32, 0x3910, 0x11D0, [0x86'u8, 0xFC, 0x00, 0xA0, 0xC9, 0x13, 0xF7, 0x50])
  IID_IDocHostShowUI* = DEFINE_GUID(0xC4D244B0'u32, 0xD43E, 0x11CF, [0x89'u8, 0x3B, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x1A])
  IID_IDocHostUIHandler* = DEFINE_GUID(0xBD3F23C0'u32, 0xD43E, 0x11CF, [0x89'u8, 0x3B, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x1A])
  IID_IDocHostUIHandler2* = DEFINE_GUID(0x3050F6D0'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IDockingWindow* = DEFINE_GUID(0x012DD920'u32, 0x7B26, 0x11D0, [0x8C'u8, 0xA9, 0x00, 0xA0, 0xC9, 0x2D, 0xBF, 0xE8])
  IID_IDockingWindowFrame* = DEFINE_GUID(0x47D2657A'u32, 0x7B27, 0x11D0, [0x8C'u8, 0xA9, 0x00, 0xA0, 0xC9, 0x2D, 0xBF, 0xE8])
  IID_IDockingWindowSite* = DEFINE_GUID(0x2A342FC2'u32, 0x7B26, 0x11D0, [0x8C'u8, 0xA9, 0x00, 0xA0, 0xC9, 0x2D, 0xBF, 0xE8])
  IID_IDoTask* = DEFINE_GUID(0x0230C9F8'u32, 0xEE7F, 0x4307, [0x98'u8, 0xDB, 0x72, 0x6E, 0xBC, 0xAE, 0x55, 0xD6])
  IID_IDownloadBehavior* = DEFINE_GUID(0x3050F5BD'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IDownloadManager* = DEFINE_GUID(0x988934A4'u32, 0x064B, 0x11D3, [0xBB'u8, 0x80, 0x00, 0x10, 0x4B, 0x35, 0xE7, 0xF9])
  IID_IDownloadNotify* = DEFINE_GUID(0xCAEB5D28'u32, 0xAE4C, 0x11D1, [0xBA'u8, 0x40, 0x00, 0xC0, 0x4F, 0xB9, 0x2D, 0x79])
  IID_IDragSourceHelper* = DEFINE_GUID(0xDE5BF786'u32, 0x477A, 0x11D2, [0x83'u8, 0x9D, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0xD0])
  IID_IDropSource* = DEFINE_GUID(0x00000121'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IDropTarget* = DEFINE_GUID(0x00000122'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IDropTargetHelper* = DEFINE_GUID(0x4657278B'u32, 0x411B, 0x11D2, [0x83'u8, 0x9A, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0xD0])
  IID_IDsBrowseDomainTree* = DEFINE_GUID(0x7CABCF1E'u32, 0x78F5, 0x11D2, [0x96'u8, 0x0C, 0x00, 0xC0, 0x4F, 0xA3, 0x1A, 0x86])
  IID_IDsQueryColumnHandler* = DEFINE_GUID(0xC072999E'u32, 0xFA49, 0x11D1, [0xA0'u8, 0xAF, 0x00, 0xC0, 0x4F, 0xA3, 0x1A, 0x86])
  IID_IDummy* = DEFINE_GUID(0x0D7CA54A'u32, 0xD252, 0x4FCB, [0x91'u8, 0x04, 0xF6, 0xDD, 0xD3, 0x10, 0xB3, 0xF9])
  IID_IDummyHICONIncluder* = DEFINE_GUID(0x947990DE'u32, 0xCC28, 0x11D2, [0xA0'u8, 0xF7, 0x00, 0x80, 0x5F, 0x85, 0x8F, 0xB1])
  IID_IDX2D* = DEFINE_GUID(0x9EFD02A9'u32, 0xA996, 0x11D1, [0x81'u8, 0xC9, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  IID_IDX2DDebug* = DEFINE_GUID(0x03BB2457'u32, 0xA279, 0x11D1, [0x81'u8, 0xC6, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  IID_IDXARGBReadPtr* = DEFINE_GUID(0xEAAAC2D6'u32, 0xC290, 0x11D1, [0x90'u8, 0x5D, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXARGBReadWritePtr* = DEFINE_GUID(0xEAAAC2D7'u32, 0xC290, 0x11D1, [0x90'u8, 0x5D, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXARGBSurfaceInit* = DEFINE_GUID(0x9EA3B63A'u32, 0xC37D, 0x11D1, [0x90'u8, 0x5E, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXBaseObject* = DEFINE_GUID(0x17B59B2B'u32, 0x9CC8, 0x11D1, [0x90'u8, 0x53, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXBasicImage* = DEFINE_GUID(0x16B280C7'u32, 0xEE70, 0x11D1, [0x90'u8, 0x66, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXDCLock* = DEFINE_GUID(0x0F619456'u32, 0xCF39, 0x11D1, [0x90'u8, 0x5E, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXDLUTBuilder* = DEFINE_GUID(0x73068231'u32, 0x35EE, 0x11D1, [0x81'u8, 0xA1, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  IID_IDXDMapper* = DEFINE_GUID(0x7FD9088B'u32, 0x35ED, 0x11D1, [0x81'u8, 0xA1, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  IID_IDXEffect* = DEFINE_GUID(0xE31FB81B'u32, 0x1335, 0x11D1, [0x81'u8, 0x89, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  IID_IDXGradient* = DEFINE_GUID(0xB2024B51'u32, 0xEE77, 0x11D1, [0x90'u8, 0x66, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXGradient2* = DEFINE_GUID(0xD0EF2A80'u32, 0x61DC, 0x11D2, [0xB2'u8, 0xEB, 0x00, 0xA0, 0xC9, 0x36, 0xB2, 0x12])
  IID_IDXLookupTable* = DEFINE_GUID(0x01BAFC7F'u32, 0x9E63, 0x11D1, [0x90'u8, 0x53, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXLUTBuilder* = DEFINE_GUID(0xF4370FC1'u32, 0xCADB, 0x11D0, [0xB5'u8, 0x2C, 0x00, 0xA0, 0xC9, 0x05, 0x43, 0x73])
  IID_IDXMapper* = DEFINE_GUID(0x555278E5'u32, 0x05DB, 0x11D1, [0x88'u8, 0x3A, 0x3C, 0x8B, 0x00, 0xC1, 0x00, 0x00])
  IID_IDXPixelate* = DEFINE_GUID(0xD33E180F'u32, 0xFBE9, 0x11D1, [0x90'u8, 0x6A, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXRasterizer* = DEFINE_GUID(0x9EA3B635'u32, 0xC37D, 0x11D1, [0x90'u8, 0x5E, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXRawSurface* = DEFINE_GUID(0x09756C8A'u32, 0xD96A, 0x11D1, [0x90'u8, 0x62, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXSurface* = DEFINE_GUID(0xB39FD73F'u32, 0xE139, 0x11D1, [0x90'u8, 0x65, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXSurfaceFactory* = DEFINE_GUID(0x144946F5'u32, 0xC4D4, 0x11D1, [0x81'u8, 0xD1, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  IID_IDXSurfaceInit* = DEFINE_GUID(0x9EA3B639'u32, 0xC37D, 0x11D1, [0x90'u8, 0x5E, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXSurfaceModifier* = DEFINE_GUID(0x9EA3B637'u32, 0xC37D, 0x11D1, [0x90'u8, 0x5E, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXSurfacePick* = DEFINE_GUID(0x30A5FB79'u32, 0xE11F, 0x11D1, [0x90'u8, 0x64, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXTAlpha* = DEFINE_GUID(0x1D4637E0'u32, 0x383C, 0x11D2, [0x95'u8, 0x2A, 0x00, 0xC0, 0x4F, 0xA3, 0x4F, 0x05])
  IID_IDXTAlphaImageLoader* = DEFINE_GUID(0xA5F2D3E8'u32, 0x7A7E, 0x48E5, [0xBC'u8, 0x75, 0x40, 0x79, 0x0B, 0xE4, 0xA9, 0x41])
  IID_IDXTaskManager* = DEFINE_GUID(0x254DBBC1'u32, 0xF922, 0x11D0, [0x88'u8, 0x3A, 0x3C, 0x8B, 0x00, 0xC1, 0x00, 0x00])
  IID_IDXTBindHost* = DEFINE_GUID(0xD26BCE55'u32, 0xE9DC, 0x11D1, [0x90'u8, 0x66, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXTCheckerBoard* = DEFINE_GUID(0xAD3C2576'u32, 0x117C, 0x4510, [0x84'u8, 0xDD, 0xB6, 0x68, 0x97, 0x1D, 0xCF, 0xD1])
  IID_IDXTChroma* = DEFINE_GUID(0x1D4637E2'u32, 0x383C, 0x11D2, [0x95'u8, 0x2A, 0x00, 0xC0, 0x4F, 0xA3, 0x4F, 0x05])
  IID_IDXTClipOrigin* = DEFINE_GUID(0xEE1663D8'u32, 0x0988, 0x4C48, [0x9F'u8, 0xD6, 0xDB, 0x44, 0x50, 0x88, 0x56, 0x68])
  IID_IDXTComposite* = DEFINE_GUID(0x9A43A843'u32, 0x0831, 0x11D1, [0x81'u8, 0x7F, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  IID_IDXTConvolution* = DEFINE_GUID(0x7BA7F8AF'u32, 0xE5EA, 0x11D1, [0x81'u8, 0xDD, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  IID_IDXTDropShadow* = DEFINE_GUID(0x1D4637E3'u32, 0x383C, 0x11D2, [0x95'u8, 0x2A, 0x00, 0xC0, 0x4F, 0xA3, 0x4F, 0x05])
  IID_IDXTFade* = DEFINE_GUID(0x16B280C4'u32, 0xEE70, 0x11D1, [0x90'u8, 0x66, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXTFilter* = DEFINE_GUID(0x6187E5A2'u32, 0xA445, 0x4608, [0x8F'u8, 0xC0, 0xBE, 0x7A, 0x6C, 0x8D, 0xB3, 0x86])
  IID_IDXTFilterBehavior* = DEFINE_GUID(0x14D7DDDD'u32, 0xACA2, 0x4E45, [0x95'u8, 0x04, 0x38, 0x08, 0xAB, 0xEB, 0x4F, 0x92])
  IID_IDXTFilterBehaviorSite* = DEFINE_GUID(0x909B23C2'u32, 0x9018, 0x499F, [0xA8'u8, 0x6D, 0x4E, 0x7D, 0xA9, 0x37, 0xE9, 0x31])
  IID_IDXTFilterCollection* = DEFINE_GUID(0x22B07B33'u32, 0x8BFB, 0x49D4, [0x9B'u8, 0x90, 0x09, 0x38, 0x37, 0x0C, 0x90, 0x19])
  IID_IDXTFilterController* = DEFINE_GUID(0x5CF315F2'u32, 0x273D, 0x47B6, [0xB9'u8, 0xED, 0xF7, 0x5D, 0xC3, 0xB0, 0x15, 0x0B])
  IID_IDXTGlow* = DEFINE_GUID(0x1D4637E4'u32, 0x383C, 0x11D2, [0x95'u8, 0x2A, 0x00, 0xC0, 0x4F, 0xA3, 0x4F, 0x05])
  IID_IDXTGradientD* = DEFINE_GUID(0x623E2881'u32, 0xFC0E, 0x11D1, [0x9A'u8, 0x77, 0x00, 0x00, 0xF8, 0x75, 0x6A, 0x10])
  IID_IDXTGridSize* = DEFINE_GUID(0xD6BBE91E'u32, 0xFF60, 0x11D2, [0x8F'u8, 0x6E, 0x00, 0xA0, 0xC9, 0x69, 0x72, 0x74])
  IID_IDXTICMFilter* = DEFINE_GUID(0x734321ED'u32, 0x1E7B, 0x4E1C, [0xBB'u8, 0xFA, 0x89, 0xC8, 0x19, 0x80, 0x0E, 0x2F])
  IID_IDXTLabel* = DEFINE_GUID(0xC0C17F0E'u32, 0xAE41, 0x11D1, [0x9A'u8, 0x3B, 0x00, 0x00, 0xF8, 0x75, 0x6A, 0x10])
  IID_IDXTLight* = DEFINE_GUID(0xF9EFBEC1'u32, 0x4302, 0x11D2, [0x95'u8, 0x2A, 0x00, 0xC0, 0x4F, 0xA3, 0x4F, 0x05])
  IID_IDXTMask* = DEFINE_GUID(0xA1067146'u32, 0xB063, 0x47D7, [0xA5'u8, 0x4A, 0x2C, 0x23, 0x09, 0xE9, 0x88, 0x9D])
  IID_IDXTMatrix* = DEFINE_GUID(0xAC66A493'u32, 0x0F0C, 0x4C76, [0x82'u8, 0x5C, 0x9D, 0x68, 0xBE, 0xDE, 0x91, 0x88])
  IID_IDXTMetaBurnFilm* = DEFINE_GUID(0x107045D0'u32, 0x06E0, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  IID_IDXTMetaCenterPeel* = DEFINE_GUID(0xAA0D4D0B'u32, 0x06A3, 0x11D2, [0x8F'u8, 0x98, 0x00, 0xC0, 0x4F, 0xB9, 0x2E, 0xB7])
  IID_IDXTMetaColorFade* = DEFINE_GUID(0x2A54C907'u32, 0x07AA, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  IID_IDXTMetaFlowMotion* = DEFINE_GUID(0x2A54C90A'u32, 0x07AA, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  IID_IDXTMetaGriddler* = DEFINE_GUID(0x2A54C910'u32, 0x07AA, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  IID_IDXTMetaGriddler2* = DEFINE_GUID(0x2A54C912'u32, 0x07AA, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  IID_IDXTMetaJaws* = DEFINE_GUID(0x2A54C903'u32, 0x07AA, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  IID_IDXTMetaLightWipe* = DEFINE_GUID(0x107045C7'u32, 0x06E0, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  IID_IDXTMetaLiquid* = DEFINE_GUID(0xAA0D4D09'u32, 0x06A3, 0x11D2, [0x8F'u8, 0x98, 0x00, 0xC0, 0x4F, 0xB9, 0x2E, 0xB7])
  IID_IDXTMetaPageTurn* = DEFINE_GUID(0xAA0D4D07'u32, 0x06A3, 0x11D2, [0x8F'u8, 0x98, 0x00, 0xC0, 0x4F, 0xB9, 0x2E, 0xB7])
  IID_IDXTMetaPeelPiece* = DEFINE_GUID(0xAA0D4D0F'u32, 0x06A3, 0x11D2, [0x8F'u8, 0x98, 0x00, 0xC0, 0x4F, 0xB9, 0x2E, 0xB7])
  IID_IDXTMetaPeelSmall* = DEFINE_GUID(0xAA0D4D0D'u32, 0x06A3, 0x11D2, [0x8F'u8, 0x98, 0x00, 0xC0, 0x4F, 0xB9, 0x2E, 0xB7])
  IID_IDXTMetaPeelSplit* = DEFINE_GUID(0xAA0D4D11'u32, 0x06A3, 0x11D2, [0x8F'u8, 0x98, 0x00, 0xC0, 0x4F, 0xB9, 0x2E, 0xB7])
  IID_IDXTMetaRadialScaleWipe* = DEFINE_GUID(0x107045C9'u32, 0x06E0, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  IID_IDXTMetaRipple* = DEFINE_GUID(0xAA0D4D02'u32, 0x06A3, 0x11D2, [0x8F'u8, 0x98, 0x00, 0xC0, 0x4F, 0xB9, 0x2E, 0xB7])
  IID_IDXTMetaRoll* = DEFINE_GUID(0x9C61F46D'u32, 0x0530, 0x11D2, [0x8F'u8, 0x98, 0x00, 0xC0, 0x4F, 0xB9, 0x2E, 0xB7])
  IID_IDXTMetaThreshold* = DEFINE_GUID(0x2A54C914'u32, 0x07AA, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  IID_IDXTMetaTwister* = DEFINE_GUID(0x107045CE'u32, 0x06E0, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  IID_IDXTMetaVacuum* = DEFINE_GUID(0x2A54C90C'u32, 0x07AA, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  IID_IDXTMetaWater* = DEFINE_GUID(0x107045C4'u32, 0x06E0, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  IID_IDXTMetaWhiteOut* = DEFINE_GUID(0x107045CB'u32, 0x06E0, 0x11D2, [0x8D'u8, 0x6D, 0x00, 0xC0, 0x4F, 0x8E, 0xF8, 0xE0])
  IID_IDXTMetaWormHole* = DEFINE_GUID(0x0E6AE021'u32, 0x0C83, 0x11D2, [0x8C'u8, 0xD4, 0x00, 0x10, 0x4B, 0xC7, 0x5D, 0x9A])
  IID_IDXTMotionBlur* = DEFINE_GUID(0x089057BE'u32, 0xD3F5, 0x4A2C, [0xB1'u8, 0x0A, 0xA5, 0x13, 0x01, 0x84, 0xA0, 0xF7])
  IID_IDXTRandomBars* = DEFINE_GUID(0x8A6D2022'u32, 0x4A8F, 0x4EB9, [0xBB'u8, 0x25, 0xAA, 0x05, 0x20, 0x1F, 0x9C, 0x84])
  IID_IDXTransform* = DEFINE_GUID(0x30A5FB78'u32, 0xE11F, 0x11D1, [0x90'u8, 0x64, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXTransformFactory* = DEFINE_GUID(0x6A950B2B'u32, 0xA971, 0x11D1, [0x81'u8, 0xC8, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  IID_IDXTRedirect* = DEFINE_GUID(0x02F5140B'u32, 0x626F, 0x4019, [0x9C'u8, 0x9E, 0x2D, 0xAA, 0x1E, 0x93, 0xE8, 0xFC])
  IID_IDXTRedirectFilterInit* = DEFINE_GUID(0xD1A57094'u32, 0x21F7, 0x4E6C, [0x93'u8, 0xE5, 0xF5, 0xF7, 0x7F, 0x74, 0x82, 0x93])
  IID_IDXTRevealTrans* = DEFINE_GUID(0xB8095006'u32, 0xA128, 0x464B, [0x8B'u8, 0x2D, 0x90, 0x58, 0x0A, 0xEE, 0x2B, 0x05])
  IID_IDXTScale* = DEFINE_GUID(0xB39FD742'u32, 0xE139, 0x11D1, [0x90'u8, 0x65, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXTScaleOutput* = DEFINE_GUID(0xB2024B50'u32, 0xEE77, 0x11D1, [0x90'u8, 0x66, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0x9D])
  IID_IDXTShadow* = DEFINE_GUID(0x1D4637E6'u32, 0x383C, 0x11D2, [0x95'u8, 0x2A, 0x00, 0xC0, 0x4F, 0xA3, 0x4F, 0x05])
  IID_IDXTStrips* = DEFINE_GUID(0xA83C9B5C'u32, 0xFB11, 0x4AF5, [0x8F'u8, 0x65, 0xD0, 0x3F, 0x15, 0x1D, 0x3E, 0xD5])
  IID_IDXTWave* = DEFINE_GUID(0x1D4637E7'u32, 0x383C, 0x11D2, [0x95'u8, 0x2A, 0x00, 0xC0, 0x4F, 0xA3, 0x4F, 0x05])
  IID_IDXTWipe* = DEFINE_GUID(0xAF279B2F'u32, 0x86EB, 0x11D1, [0x81'u8, 0xBF, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  IID_IDXTWipe2* = DEFINE_GUID(0xE1FF8091'u32, 0x442B, 0x4801, [0x88'u8, 0xB6, 0x2B, 0x47, 0xB1, 0x61, 0x1F, 0xD2])
  IID_IDynamicPortMapping* = DEFINE_GUID(0x4FC80282'u32, 0x23B6, 0x4378, [0x9A'u8, 0x27, 0xCD, 0x8F, 0x17, 0xC9, 0x40, 0x0C])
  IID_IDynamicPortMappingCollection* = DEFINE_GUID(0xB60DE00F'u32, 0x156E, 0x4E8D, [0x9E'u8, 0xC1, 0x3A, 0x23, 0x42, 0xC1, 0x08, 0x99])
  IID_IEditDebugServices* = DEFINE_GUID(0x3050F60B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementAdorner* = DEFINE_GUID(0x3050F607'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementBehavior* = DEFINE_GUID(0x3050F425'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementBehaviorCategory* = DEFINE_GUID(0x3050F4ED'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementBehaviorFactory* = DEFINE_GUID(0x3050F429'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementBehaviorFocus* = DEFINE_GUID(0x3050F6B6'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementBehaviorLayout* = DEFINE_GUID(0x3050F6BA'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementBehaviorLayout2* = DEFINE_GUID(0x3050F846'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementBehaviorRender* = DEFINE_GUID(0x3050F4AA'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementBehaviorSite* = DEFINE_GUID(0x3050F427'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementBehaviorSiteCategory* = DEFINE_GUID(0x3050F4EE'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementBehaviorSiteLayout* = DEFINE_GUID(0x3050F6B7'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementBehaviorSiteLayout2* = DEFINE_GUID(0x3050F847'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementBehaviorSiteOM* = DEFINE_GUID(0x3050F489'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementBehaviorSiteOM2* = DEFINE_GUID(0x3050F659'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementBehaviorSiteRender* = DEFINE_GUID(0x3050F4A7'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementBehaviorSubmit* = DEFINE_GUID(0x3050F646'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementBehaviorUI* = DEFINE_GUID(0x3050F4BF'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementNamespace* = DEFINE_GUID(0x3050F671'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementNamespaceFactory* = DEFINE_GUID(0x3050F672'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementNamespaceFactory2* = DEFINE_GUID(0x3050F805'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementNamespaceFactoryCallback* = DEFINE_GUID(0x3050F7FD'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementNamespacePrivate* = DEFINE_GUID(0x3050F7FF'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementNamespaceTable* = DEFINE_GUID(0x3050F670'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IElementSegment* = DEFINE_GUID(0x3050F68F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IEmptyVolumeCache* = DEFINE_GUID(0x8FCE5227'u32, 0x04DA, 0x11D1, [0xA0'u8, 0x04, 0x00, 0x80, 0x5F, 0x8A, 0xBE, 0x06])
  IID_IEmptyVolumeCache2* = DEFINE_GUID(0x02B7E3BA'u32, 0x4DB3, 0x11D2, [0xB2'u8, 0xD9, 0x00, 0xC0, 0x4F, 0x8E, 0xEC, 0x8C])
  IID_IEmptyVolumeCacheCallBack* = DEFINE_GUID(0x6E793361'u32, 0x73C6, 0x11D0, [0x84'u8, 0x69, 0x00, 0xAA, 0x00, 0x44, 0x29, 0x01])
  IID_IEncodingFilterFactory* = DEFINE_GUID(0x70BDDE00'u32, 0xC18E, 0x11D0, [0xA9'u8, 0xCE, 0x00, 0x60, 0x97, 0x94, 0x23, 0x11])
  IID_IEnroll* = DEFINE_GUID(0xACAA7838'u32, 0x4585, 0x11D1, [0xAB'u8, 0x57, 0x00, 0xC0, 0x4F, 0xC2, 0x95, 0xE1])
  IID_IEnroll2* = DEFINE_GUID(0xC080E199'u32, 0xB7DF, 0x11D2, [0xA4'u8, 0x21, 0x00, 0xC0, 0x4F, 0x79, 0xFE, 0x8E])
  IID_IEnroll4* = DEFINE_GUID(0xF8053FE5'u32, 0x78F4, 0x448F, [0xA0'u8, 0xDB, 0x41, 0xD6, 0x1B, 0x73, 0x44, 0x6B])
  IID_IEntryID* = DEFINE_GUID(0xE4D19810'u32, 0xD188, 0x11CD, [0xAD'u8, 0x48, 0x00, 0xAA, 0x00, 0x3C, 0x9C, 0xB6])
  IID_IEnumACDGroup* = DEFINE_GUID(0x5AFC3157'u32, 0x4BCC, 0x11D1, [0xBF'u8, 0x80, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_IEnumACString* = DEFINE_GUID(0x8E74C210'u32, 0xCF9D, 0x4EAF, [0xA4'u8, 0x03, 0x73, 0x56, 0x42, 0x8F, 0x0A, 0x5A])
  IID_IEnumAdapterInfo* = DEFINE_GUID(0xA23F9D11'u32, 0x714C, 0x41FE, [0x84'u8, 0x71, 0xFF, 0xB1, 0x9B, 0xC2, 0x84, 0x54])
  IID_IEnumAddress* = DEFINE_GUID(0x1666FCA1'u32, 0x9363, 0x11D0, [0x83'u8, 0x5C, 0x00, 0xAA, 0x00, 0x3C, 0xCA, 0xBD])
  IID_IEnumAgent* = DEFINE_GUID(0x5AFC314D'u32, 0x4BCC, 0x11D1, [0xBF'u8, 0x80, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_IEnumAgentHandler* = DEFINE_GUID(0x587E8C28'u32, 0x9802, 0x11D1, [0xA0'u8, 0xA4, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_IEnumAgentSession* = DEFINE_GUID(0x5AFC314E'u32, 0x4BCC, 0x11D1, [0xBF'u8, 0x80, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_IEnumBackgroundCopyFiles* = DEFINE_GUID(0xCA51E165'u32, 0xC365, 0x424C, [0x8D'u8, 0x41, 0x24, 0xAA, 0xA4, 0xFF, 0x3C, 0x40])
  IID_IEnumBackgroundCopyGroups* = DEFINE_GUID(0xD993E603'u32, 0x4AA4, 0x47C5, [0x86'u8, 0x65, 0xC2, 0x0D, 0x39, 0xC2, 0xBA, 0x4F])
  IID_IEnumBackgroundCopyJobs* = DEFINE_GUID(0x1AF4F612'u32, 0x3B71, 0x466F, [0x8F'u8, 0x58, 0x7B, 0x6F, 0x73, 0xAC, 0x57, 0xAD])
  IID_IEnumBackgroundCopyJobs1* = DEFINE_GUID(0x8BAEBA9D'u32, 0x8F1C, 0x42C4, [0xB8'u8, 0x2C, 0x09, 0xAE, 0x79, 0x98, 0x0D, 0x25])
  IID_IEnumBstr* = DEFINE_GUID(0x35372049'u32, 0x0BC6, 0x11D2, [0xA0'u8, 0x33, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_IEnumCall* = DEFINE_GUID(0xAE269CF6'u32, 0x935E, 0x11D0, [0x83'u8, 0x5C, 0x00, 0xAA, 0x00, 0x3C, 0xCA, 0xBD])
  IID_IEnumCallback* = DEFINE_GUID(0x00000108'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IEnumCallHub* = DEFINE_GUID(0xA3C15450'u32, 0x5B92, 0x11D1, [0x8F'u8, 0x4E, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_IEnumCallingCard* = DEFINE_GUID(0x0C4D8F02'u32, 0x8DDB, 0x11D1, [0xA0'u8, 0x9E, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_IEnumCATEGORYINFO* = DEFINE_GUID(0x0002E011'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IEnumChannels* = DEFINE_GUID(0xA4C65425'u32, 0x0F82, 0x11D1, [0x90'u8, 0xC3, 0x00, 0xC0, 0x4F, 0xC2, 0xF5, 0x68])
  IID_IEnumClusCfgIPAddresses* = DEFINE_GUID(0xBD5F35BA'u32, 0x0BC0, 0x455F, [0x92'u8, 0x6D, 0xC3, 0xD3, 0x56, 0x41, 0x94, 0x86])
  IID_IEnumClusCfgManagedResources* = DEFINE_GUID(0x7DBE11EB'u32, 0xA5DF, 0x4534, [0xAB'u8, 0xF6, 0x8B, 0xAC, 0x7B, 0x53, 0xFC, 0x95])
  IID_IEnumClusCfgNetworks* = DEFINE_GUID(0xCF3FAED8'u32, 0x1322, 0x4BCB, [0x99'u8, 0x23, 0xB5, 0xB7, 0x45, 0xA6, 0x9E, 0x36])
  IID_IEnumClusCfgPartitions* = DEFINE_GUID(0x4440BB6A'u32, 0xB0AC, 0x479D, [0xB5'u8, 0x34, 0x72, 0x65, 0xA3, 0x1D, 0x6C, 0x55])
  IID_IEnumCodePage* = DEFINE_GUID(0x275C23E3'u32, 0x3747, 0x11D0, [0x9F'u8, 0xEA, 0x00, 0xAA, 0x00, 0x3F, 0x86, 0x46])
  IID_IEnumConnectionPoints* = DEFINE_GUID(0xB196B285'u32, 0xBAB4, 0x101A, [0xB6'u8, 0x9C, 0x00, 0xAA, 0x00, 0x34, 0x1D, 0x07])
  IID_IEnumConnections* = DEFINE_GUID(0xB196B287'u32, 0xBAB4, 0x101A, [0xB6'u8, 0x9C, 0x00, 0xAA, 0x00, 0x34, 0x1D, 0x07])
  IID_IEnumCookies* = DEFINE_GUID(0x5E3E482E'u32, 0x3C22, 0x482C, [0xB6'u8, 0x64, 0x69, 0x30, 0x51, 0xAD, 0x0A, 0x5D])
  IID_IEnumDebugApplicationNodes* = DEFINE_GUID(0x51973C3A'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IEnumDebugCodeContexts* = DEFINE_GUID(0x51973C1D'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IEnumDebugExpressionContexts* = DEFINE_GUID(0x51973C40'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IEnumDebugExtendedPropertyInfo* = DEFINE_GUID(0x51973C53'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IEnumDebugPropertyInfo* = DEFINE_GUID(0x51973C51'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IEnumDebugStackFrames* = DEFINE_GUID(0x51973C1E'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IEnumDebugStackFrames64* = DEFINE_GUID(0x0DC38853'u32, 0xC1B0, 0x4176, [0xA9'u8, 0x84, 0xB2, 0x98, 0x36, 0x10, 0x27, 0xAF])
  IID_IEnumDialableAddrs* = DEFINE_GUID(0x34621D70'u32, 0x6CFF, 0x11D1, [0xAF'u8, 0xF7, 0x00, 0xC0, 0x4F, 0xC3, 0x1F, 0xEE])
  IID_IEnumDirectory* = DEFINE_GUID(0x34621D6D'u32, 0x6CFF, 0x11D1, [0xAF'u8, 0xF7, 0x00, 0xC0, 0x4F, 0xC3, 0x1F, 0xEE])
  IID_IEnumDirectoryObject* = DEFINE_GUID(0x06C9B64A'u32, 0x306D, 0x11D1, [0x97'u8, 0x74, 0x00, 0xC0, 0x4F, 0xD9, 0x1A, 0xC0])
  IID_IEnumDiscMasterFormats* = DEFINE_GUID(0xDDF445E1'u32, 0x54BA, 0x11D3, [0x91'u8, 0x44, 0x00, 0x10, 0x4B, 0xA1, 0x1C, 0x5E])
  IID_IEnumDiscRecorders* = DEFINE_GUID(0x9B1921E1'u32, 0x54AC, 0x11D3, [0x91'u8, 0x44, 0x00, 0x10, 0x4B, 0xA1, 0x1C, 0x5E])
  IID_IEnumExtraSearch* = DEFINE_GUID(0x0E700BE1'u32, 0x9DB6, 0x11D1, [0xA1'u8, 0xCE, 0x00, 0xC0, 0x4F, 0xD7, 0x5D, 0x13])
  IID_IEnumFORMATETC* = DEFINE_GUID(0x00000103'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IEnumGeneric* = DEFINE_GUID(0x00000106'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IEnumGUID* = DEFINE_GUID(0x0002E000'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IEnumHLITEM* = DEFINE_GUID(0x79EAC9C6'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IEnumHNetApplicationProtocols* = DEFINE_GUID(0x85D18B7B'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IEnumHNetBridgedConnections* = DEFINE_GUID(0x85D18B7D'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IEnumHNetBridges* = DEFINE_GUID(0x85D18B77'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IEnumHNetFirewalledConnections* = DEFINE_GUID(0x85D18B78'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IEnumHNetIcsPrivateConnections* = DEFINE_GUID(0x85D18B7A'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IEnumHNetIcsPublicConnections* = DEFINE_GUID(0x85D18B79'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IEnumHNetPortMappingBindings* = DEFINE_GUID(0x85D18B81'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IEnumHNetPortMappingProtocols* = DEFINE_GUID(0x85D18B7C'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IEnumHolder* = DEFINE_GUID(0x00000107'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IEnumIDList* = DEFINE_GUID(0x000214F2'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IEnumInputContext* = DEFINE_GUID(0x09B5EAB0'u32, 0xF997, 0x11D1, [0x93'u8, 0xD4, 0x00, 0x60, 0xB0, 0x67, 0xB8, 0x6E])
  IID_IEnumItemProperties* = DEFINE_GUID(0xF72C8D96'u32, 0x6DBD, 0x11D1, [0xA1'u8, 0xE8, 0x00, 0xC0, 0x4F, 0xC2, 0xFB, 0xE1])
  IID_IEnumLocation* = DEFINE_GUID(0x0C4D8F01'u32, 0x8DDB, 0x11D1, [0xA0'u8, 0x9E, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_IEnumMcastScope* = DEFINE_GUID(0xDF0DAF09'u32, 0xA289, 0x11D1, [0x86'u8, 0x97, 0x00, 0x60, 0x08, 0xB0, 0xE5, 0xD2])
  IID_IEnumMedia* = DEFINE_GUID(0xCA8397BE'u32, 0x2FA4, 0x11D1, [0x97'u8, 0x74, 0x00, 0xC0, 0x4F, 0xD9, 0x1A, 0xC0])
  IID_IEnumMoniker* = DEFINE_GUID(0x00000102'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IEnumNetCfgBindingInterface* = DEFINE_GUID(0xC0E8AE90'u32, 0x306E, 0x11D1, [0xAA'u8, 0xCF, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_IEnumNetCfgBindingPath* = DEFINE_GUID(0xC0E8AE91'u32, 0x306E, 0x11D1, [0xAA'u8, 0xCF, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_IEnumNetCfgComponent* = DEFINE_GUID(0xC0E8AE92'u32, 0x306E, 0x11D1, [0xAA'u8, 0xCF, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_IEnumNetConnection* = DEFINE_GUID(0xC08956A0'u32, 0x1CD3, 0x11D1, [0xB1'u8, 0xC5, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_IEnumNetSharingEveryConnection* = DEFINE_GUID(0xC08956B8'u32, 0x1CD3, 0x11D1, [0xB1'u8, 0xC5, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_IEnumNetSharingPortMapping* = DEFINE_GUID(0xC08956B0'u32, 0x1CD3, 0x11D1, [0xB1'u8, 0xC5, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_IEnumNetSharingPrivateConnection* = DEFINE_GUID(0xC08956B5'u32, 0x1CD3, 0x11D1, [0xB1'u8, 0xC5, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_IEnumNetSharingPublicConnection* = DEFINE_GUID(0xC08956B4'u32, 0x1CD3, 0x11D1, [0xB1'u8, 0xC5, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_IEnumNodes* = DEFINE_GUID(0xC477E363'u32, 0xAF0A, 0x4203, [0xA6'u8, 0x04, 0x45, 0xCD, 0x60, 0x7D, 0xD7, 0x10])
  IID_IEnumNotification* = DEFINE_GUID(0xC733E4A8'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  IID_IEnumNotificationSinkItem* = DEFINE_GUID(0xC733E4AA'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  IID_IEnumOleDocumentViews* = DEFINE_GUID(0xB722BCC8'u32, 0x4E68, 0x101B, [0xA2'u8, 0xBC, 0x00, 0xAA, 0x00, 0x40, 0x47, 0x70])
  IID_IEnumOleUndoUnits* = DEFINE_GUID(0xB3E7C340'u32, 0xEF97, 0x11CE, [0x9B'u8, 0xC9, 0x00, 0xAA, 0x00, 0x60, 0x8E, 0x01])
  IID_IEnumOLEVERB* = DEFINE_GUID(0x00000104'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IEnumParticipant* = DEFINE_GUID(0x0A91B56C'u32, 0x5A35, 0x11D2, [0x95'u8, 0xA0, 0x00, 0xA0, 0x24, 0x4D, 0x22, 0x98])
  IID_IEnumPhone* = DEFINE_GUID(0xF15B7669'u32, 0x4780, 0x4595, [0x8C'u8, 0x89, 0xFB, 0x36, 0x9C, 0x8C, 0xF7, 0xAA])
  IID_IEnumPluggableSuperclassInfo* = DEFINE_GUID(0xE9586A80'u32, 0x89E6, 0x4CFF, [0x93'u8, 0x1D, 0x47, 0x8D, 0x57, 0x51, 0xF4, 0xC0])
  IID_IEnumPluggableTerminalClassInfo* = DEFINE_GUID(0x4567450C'u32, 0xDBEE, 0x4E3F, [0xAA'u8, 0xF5, 0x37, 0xBF, 0x9E, 0xBF, 0x5E, 0x29])
  IID_IEnumPrivacyRecords* = DEFINE_GUID(0x3050F844'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IEnumPropertyMap* = DEFINE_GUID(0xC733E4A1'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  IID_IEnumPublishedApps* = DEFINE_GUID(0x0B124F8C'u32, 0x91F0, 0x11D1, [0xB8'u8, 0xB5, 0x00, 0x60, 0x08, 0x05, 0x93, 0x82])
  IID_IEnumQueue* = DEFINE_GUID(0x5AFC3158'u32, 0x4BCC, 0x11D1, [0xBF'u8, 0x80, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_IEnumRegisterWordA* = DEFINE_GUID(0x08C03412'u32, 0xF96B, 0x11D0, [0xA4'u8, 0x75, 0x00, 0xAA, 0x00, 0x6B, 0xCC, 0x59])
  IID_IEnumRegisterWordW* = DEFINE_GUID(0x4955DD31'u32, 0xB159, 0x11D0, [0x8F'u8, 0xCF, 0x00, 0xAA, 0x00, 0x6B, 0xCC, 0x59])
  IID_IEnumRemoteDebugApplications* = DEFINE_GUID(0x51973C3B'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IEnumRemoteDebugApplicationThrea* = DEFINE_GUID(0x51973C3C'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IEnumRfc1766* = DEFINE_GUID(0x3DC39D1D'u32, 0xC030, 0x11D0, [0xB8'u8, 0x1B, 0x00, 0xC0, 0x4F, 0xC9, 0xB3, 0x1F])
  IID_IEnumScheduleGroup* = DEFINE_GUID(0xC733E4A9'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  IID_IEnumScript* = DEFINE_GUID(0xAE5F1430'u32, 0x388B, 0x11D2, [0x83'u8, 0x80, 0x00, 0xC0, 0x4F, 0x8F, 0x5D, 0xA1])
  IID_IEnumSTATDATA* = DEFINE_GUID(0x00000105'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IEnumSTATPROPBAG* = DEFINE_GUID(0x20021801'u32, 0x5DE6, 0x11D1, [0x8E'u8, 0x38, 0x00, 0xC0, 0x4F, 0xB9, 0x38, 0x6D])
  IID_IEnumSTATPROPSETSTG* = DEFINE_GUID(0x0000013B'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IEnumSTATPROPSTG* = DEFINE_GUID(0x00000139'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IEnumSTATSTG* = DEFINE_GUID(0x0000000D'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IEnumSTATURL* = DEFINE_GUID(0x3C374A42'u32, 0xBAE4, 0x11CF, [0xBF'u8, 0x7D, 0x00, 0xAA, 0x00, 0x69, 0x46, 0xEE])
  IID_IEnumStream* = DEFINE_GUID(0xEE3BD606'u32, 0x3868, 0x11D2, [0xA0'u8, 0x45, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_IEnumString* = DEFINE_GUID(0x00000101'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IEnumSubscription* = DEFINE_GUID(0xF72C8D97'u32, 0x6DBD, 0x11D1, [0xA1'u8, 0xE8, 0x00, 0xC0, 0x4F, 0xC2, 0xFB, 0xE1])
  IID_IEnumSubStream* = DEFINE_GUID(0xEE3BD609'u32, 0x3868, 0x11D2, [0xA0'u8, 0x45, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_IEnumSyncItems* = DEFINE_GUID(0xF0E1589A'u32, 0xA700, 0x11D1, [0x98'u8, 0x31, 0x00, 0xC0, 0x4F, 0xD9, 0x10, 0xDD])
  IID_IEnumSyncSchedules* = DEFINE_GUID(0xF0E15898'u32, 0xA700, 0x11D1, [0x98'u8, 0x31, 0x00, 0xC0, 0x4F, 0xD9, 0x10, 0xDD])
  IID_IEnumTerminal* = DEFINE_GUID(0xAE269CF4'u32, 0x935E, 0x11D0, [0x83'u8, 0x5C, 0x00, 0xAA, 0x00, 0x3C, 0xCA, 0xBD])
  IID_IEnumTerminalClass* = DEFINE_GUID(0xAE269CF5'u32, 0x935E, 0x11D0, [0x83'u8, 0x5C, 0x00, 0xAA, 0x00, 0x3C, 0xCA, 0xBD])
  IID_IEnumTime* = DEFINE_GUID(0x9055322E'u32, 0x2FA8, 0x11D1, [0x97'u8, 0x74, 0x00, 0xC0, 0x4F, 0xD9, 0x1A, 0xC0])
  IID_IEnumTravelLogEntry* = DEFINE_GUID(0x7EBFDD85'u32, 0xAD18, 0x11D3, [0xA4'u8, 0xC5, 0x00, 0xC0, 0x4F, 0x72, 0xD6, 0xB8])
  IID_IEnumUnknown* = DEFINE_GUID(0x00000100'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IEnumVARIANT* = DEFINE_GUID(0x00020404'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IEnumWbemClassObject* = DEFINE_GUID(0x027947E1'u32, 0xD731, 0x11CE, [0xA3'u8, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01])
  IID_IErrorInfo* = DEFINE_GUID(0x1CF2B120'u32, 0x547D, 0x101B, [0x8E'u8, 0x65, 0x08, 0x00, 0x2B, 0x2B, 0xD1, 0x19])
  IID_IErrorLog* = DEFINE_GUID(0x3127CA40'u32, 0x446E, 0x11CE, [0x81'u8, 0x35, 0x00, 0xAA, 0x00, 0x4B, 0xB8, 0x51])
  IID_IErrorLookup* = DEFINE_GUID(0x0C733A66'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IErrorRecords* = DEFINE_GUID(0x0C733A67'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IESP* = DEFINE_GUID(0xE99A04AA'u32, 0xAB95, 0x11D0, [0xBE'u8, 0x96, 0x00, 0xA0, 0xC9, 0x49, 0x89, 0xDE])
  IID_IExtendObjectManager* = DEFINE_GUID(0xCA7BB0B9'u32, 0x700C, 0x4DC5, [0x99'u8, 0x1E, 0x75, 0xF9, 0xE6, 0x5E, 0xE9, 0x75])
  IID_IExtensionServices* = DEFINE_GUID(0x79EAC9CB'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IExternalConnection* = DEFINE_GUID(0x00000019'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IExtractIconA* = DEFINE_GUID(0x000214EB'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IExtractIconW* = DEFINE_GUID(0x000214FA'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IExtractImage* = DEFINE_GUID(0xBB2E617C'u32, 0x0920, 0x11D1, [0x9A'u8, 0x0B, 0x00, 0xC0, 0x4F, 0xC2, 0xD6, 0xC1])
  IID_IExtractImage2* = DEFINE_GUID(0x953BB1EE'u32, 0x93B4, 0x11D1, [0x98'u8, 0xA3, 0x00, 0xC0, 0x4F, 0xB6, 0x87, 0xDA])
  IID_IFileSearchBand* = DEFINE_GUID(0x2D91EEA1'u32, 0x9932, 0x11D2, [0xBE'u8, 0x86, 0x00, 0xA0, 0xC9, 0xA8, 0x3D, 0xA1])
  IID_IFileSystemBindData* = DEFINE_GUID(0x01E18D10'u32, 0x4D8B, 0x11D2, [0x85'u8, 0x5D, 0x00, 0x60, 0x08, 0x05, 0x93, 0x67])
  IID_IFileViewerA* = DEFINE_GUID(0x000214F0'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IFileViewerSite* = DEFINE_GUID(0x000214F3'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IFileViewerW* = DEFINE_GUID(0x000214F8'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IFillLockBytes* = DEFINE_GUID(0x99CAF010'u32, 0x415E, 0x11CF, [0x88'u8, 0x14, 0x00, 0xAA, 0x00, 0xB5, 0x69, 0xF5])
  IID_IFilter* = DEFINE_GUID(0x89BCB740'u32, 0x6119, 0x101A, [0xBC'u8, 0xB7, 0x00, 0xDD, 0x01, 0x06, 0x55, 0xAF])
  IID_IFilterAnimationInfo* = DEFINE_GUID(0x02E29300'u32, 0xC758, 0x49B4, [0x9E'u8, 0x11, 0xC5, 0x8B, 0xFE, 0x90, 0x55, 0x8B])
  IID_IFilterStatus* = DEFINE_GUID(0xF4EB8260'u32, 0x8DDA, 0x11D1, [0xB3'u8, 0xAA, 0x00, 0xA0, 0xC9, 0x06, 0x37, 0x96])
  IID_IFolderFilter* = DEFINE_GUID(0x9CC22886'u32, 0xDC8E, 0x11D2, [0xB1'u8, 0xD0, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x3E])
  IID_IFolderFilterSite* = DEFINE_GUID(0xC0A651F5'u32, 0xB48B, 0x11D2, [0xB5'u8, 0xED, 0x00, 0x60, 0x97, 0xC6, 0x86, 0xF6])
  IID_IFolderView* = DEFINE_GUID(0xCDE725B0'u32, 0xCCC9, 0x4519, [0x91'u8, 0x7E, 0x32, 0x5D, 0x72, 0xFA, 0xB4, 0xCE])
  IID_IFolderViewHost* = DEFINE_GUID(0x1EA58F02'u32, 0xD55A, 0x411D, [0xB0'u8, 0x9E, 0x9E, 0x65, 0xAC, 0x21, 0x60, 0x5B])
  IID_IFolderViewOC* = DEFINE_GUID(0x9BA05970'u32, 0xF6A8, 0x11CF, [0xA4'u8, 0x42, 0x00, 0xA0, 0xC9, 0x0A, 0x8F, 0x39])
  IID_IFont* = DEFINE_GUID(0xBEF6E002'u32, 0xA874, 0x101A, [0x8B'u8, 0xBA, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  IID_IFontDisp* = DEFINE_GUID(0xBEF6E003'u32, 0xA874, 0x101A, [0x8B'u8, 0xBA, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  IID_IFontEventsDisp* = DEFINE_GUID(0x4EF6100A'u32, 0xAF88, 0x11D0, [0x98'u8, 0x46, 0x00, 0xC0, 0x4F, 0xC2, 0x99, 0x93])
  IID_IFontNames* = DEFINE_GUID(0x3050F839'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IForegroundTransfer* = DEFINE_GUID(0x00000145'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IFsCiAdmin* = DEFINE_GUID(0x75398C30'u32, 0x7A26, 0x11D0, [0xA8'u8, 0x0A, 0x00, 0xA0, 0xC9, 0x06, 0x24, 0x1A])
  IID_IGatherData* = DEFINE_GUID(0x65318F4A'u32, 0xB63C, 0x4E21, [0xAD'u8, 0xDC, 0xBD, 0xCF, 0xB9, 0x69, 0xE1, 0x81])
  IID_IGetClusterDataInfo* = DEFINE_GUID(0x97DEDE51'u32, 0xFC6B, 0x11CF, [0xB5'u8, 0xF5, 0x00, 0xA0, 0xC9, 0x0A, 0xB5, 0x05])
  IID_IGetClusterGroupInfo* = DEFINE_GUID(0x97DEDE54'u32, 0xFC6B, 0x11CF, [0xB5'u8, 0xF5, 0x00, 0xA0, 0xC9, 0x0A, 0xB5, 0x05])
  IID_IGetClusterNetInterfaceInfo* = DEFINE_GUID(0x97DEDE57'u32, 0xFC6B, 0x11CF, [0xB5'u8, 0xF5, 0x00, 0xA0, 0xC9, 0x0A, 0xB5, 0x05])
  IID_IGetClusterNetworkInfo* = DEFINE_GUID(0x97DEDE56'u32, 0xFC6B, 0x11CF, [0xB5'u8, 0xF5, 0x00, 0xA0, 0xC9, 0x0A, 0xB5, 0x05])
  IID_IGetClusterNodeInfo* = DEFINE_GUID(0x97DEDE53'u32, 0xFC6B, 0x11CF, [0xB5'u8, 0xF5, 0x00, 0xA0, 0xC9, 0x0A, 0xB5, 0x05])
  IID_IGetClusterObjectInfo* = DEFINE_GUID(0x97DEDE52'u32, 0xFC6B, 0x11CF, [0xB5'u8, 0xF5, 0x00, 0xA0, 0xC9, 0x0A, 0xB5, 0x05])
  IID_IGetClusterResourceInfo* = DEFINE_GUID(0x97DEDE55'u32, 0xFC6B, 0x11CF, [0xB5'u8, 0xF5, 0x00, 0xA0, 0xC9, 0x0A, 0xB5, 0x05])
  IID_IGetClusterUIInfo* = DEFINE_GUID(0x97DEDE50'u32, 0xFC6B, 0x11CF, [0xB5'u8, 0xF5, 0x00, 0xA0, 0xC9, 0x0A, 0xB5, 0x05])
  IID_IGetDataSource* = DEFINE_GUID(0x0C733A75'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IGetRow* = DEFINE_GUID(0x0C733AAF'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IGetSession* = DEFINE_GUID(0x0C733ABA'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IGetSourceRow* = DEFINE_GUID(0x0C733ABB'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IGlobalInterfaceTable* = DEFINE_GUID(0x00000146'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IH26XEncodeOptions* = DEFINE_GUID(0x65698D40'u32, 0x282D, 0x11D0, [0x88'u8, 0x00, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_IH26XEncoderControl* = DEFINE_GUID(0xF9B78AA1'u32, 0xEA12, 0x11CF, [0x9F'u8, 0xEC, 0x00, 0xAA, 0x00, 0xA5, 0x9F, 0x69])
  IID_IH26XRTPControl* = DEFINE_GUID(0x1FC3F2C0'u32, 0x2BFD, 0x11D0, [0x88'u8, 0x00, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_IH26XSnapshot* = DEFINE_GUID(0x3CB194A0'u32, 0x10AA, 0x11D0, [0x88'u8, 0x00, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_IH26XVideoEffects* = DEFINE_GUID(0x21555140'u32, 0x9C2B, 0x11CF, [0x90'u8, 0xFA, 0x00, 0xAA, 0x00, 0xA7, 0x29, 0xEA])
  IID_IH323LineEx* = DEFINE_GUID(0x44CF6A9D'u32, 0xCB40, 0x4BBC, [0xB2'u8, 0xD3, 0xB6, 0xAA, 0x93, 0x32, 0x2C, 0x71])
  IID_IHeaderFooter* = DEFINE_GUID(0x3050F6CE'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHighlightRenderingServices* = DEFINE_GUID(0x3050F606'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHighlightSegment* = DEFINE_GUID(0x3050F690'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHlink* = DEFINE_GUID(0x79EAC9C3'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IHlinkBrowseContext* = DEFINE_GUID(0x79EAC9C7'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IHlinkFrame* = DEFINE_GUID(0x79EAC9C5'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IHlinkSite* = DEFINE_GUID(0x79EAC9C2'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IHlinkTarget* = DEFINE_GUID(0x79EAC9C4'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IHNetApplicationProtocol* = DEFINE_GUID(0x85D18B7F'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IHNetBridge* = DEFINE_GUID(0x85D18B75'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IHNetBridgedConnection* = DEFINE_GUID(0x85D18B76'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IHNetBridgeSettings* = DEFINE_GUID(0x85D18B6D'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IHNetCfgMgr* = DEFINE_GUID(0x85D18B6C'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IHNetConnection* = DEFINE_GUID(0x85D18B71'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IHNetFirewalledConnection* = DEFINE_GUID(0x85D18B72'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IHNetFirewallSettings* = DEFINE_GUID(0x85D18B6E'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IHNetIcsPrivateConnection* = DEFINE_GUID(0x85D18B74'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IHNetIcsPublicConnection* = DEFINE_GUID(0x85D18B73'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IHNetIcsSettings* = DEFINE_GUID(0x85D18B6F'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IHNetPortMappingBinding* = DEFINE_GUID(0x85D18B80'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IHNetPortMappingProtocol* = DEFINE_GUID(0x85D18B7E'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IHNetProtocolSettings* = DEFINE_GUID(0x85D18B70'u32, 0x3032, 0x11D4, [0x93'u8, 0x48, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x71])
  IID_IHomePage* = DEFINE_GUID(0x766BF2AF'u32, 0xD650, 0x11D1, [0x98'u8, 0x11, 0x00, 0xC0, 0x4F, 0xC3, 0x1D, 0x2E])
  IID_IHostBehaviorInit* = DEFINE_GUID(0x3050F842'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHostDialogHelper* = DEFINE_GUID(0x53DEC138'u32, 0xA51E, 0x11D2, [0x86'u8, 0x1E, 0x00, 0xC0, 0x4F, 0xA3, 0x5C, 0x89])
  IID_IHTCAttachBehavior* = DEFINE_GUID(0x3050F5F4'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTCAttachBehavior2* = DEFINE_GUID(0x3050F7EB'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTCDefaultDispatch* = DEFINE_GUID(0x3050F4FD'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTCDescBehavior* = DEFINE_GUID(0x3050F5DC'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTCEventBehavior* = DEFINE_GUID(0x3050F4FF'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTCMethodBehavior* = DEFINE_GUID(0x3050F631'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTCPropertyBehavior* = DEFINE_GUID(0x3050F5DF'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLAnchorElement* = DEFINE_GUID(0x3050F1DA'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLAnchorElement2* = DEFINE_GUID(0x3050F825'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLAppBehavior* = DEFINE_GUID(0x3050F5CA'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLAppBehavior2* = DEFINE_GUID(0x3050F5C9'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLAppBehavior3* = DEFINE_GUID(0x3050F5CD'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHtmlArea* = DEFINE_GUID(0x3050F64E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLAreaElement* = DEFINE_GUID(0x3050F265'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLAreasCollection* = DEFINE_GUID(0x3050F383'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLAreasCollection2* = DEFINE_GUID(0x3050F5EC'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLAreasCollection3* = DEFINE_GUID(0x3050F837'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLAttributeCollection* = DEFINE_GUID(0x3050F4C3'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLAttributeCollection2* = DEFINE_GUID(0x3050F80A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLBaseElement* = DEFINE_GUID(0x3050F204'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLBaseFontElement* = DEFINE_GUID(0x3050F202'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLBGsound* = DEFINE_GUID(0x3050F369'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLBlockElement* = DEFINE_GUID(0x3050F208'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLBlockElement2* = DEFINE_GUID(0x3050F823'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLBodyElement* = DEFINE_GUID(0x3050F1D8'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLBodyElement2* = DEFINE_GUID(0x3050F5C5'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLBookmarkCollection* = DEFINE_GUID(0x3050F4CE'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLBRElement* = DEFINE_GUID(0x3050F1F0'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLButtonElement* = DEFINE_GUID(0x3050F2BB'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLCaret* = DEFINE_GUID(0x3050F604'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLChangeLog* = DEFINE_GUID(0x3050F649'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLChangePlayback* = DEFINE_GUID(0x3050F6E0'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLChangeSink* = DEFINE_GUID(0x3050F64A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLCommentElement* = DEFINE_GUID(0x3050F20C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLCommentElement2* = DEFINE_GUID(0x3050F813'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLComputedStyle* = DEFINE_GUID(0x3050F6C3'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLControlElement* = DEFINE_GUID(0x3050F4E9'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLControlRange* = DEFINE_GUID(0x3050F29C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLControlRange2* = DEFINE_GUID(0x3050F65E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLCurrentStyle* = DEFINE_GUID(0x3050F3DB'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLCurrentStyle2* = DEFINE_GUID(0x3050F658'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLCurrentStyle3* = DEFINE_GUID(0x3050F818'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDatabinding* = DEFINE_GUID(0x3050F3F2'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDataTransfer* = DEFINE_GUID(0x3050F4B3'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDDElement* = DEFINE_GUID(0x3050F1F2'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDialog* = DEFINE_GUID(0x3050F216'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDialog2* = DEFINE_GUID(0x3050F5E0'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDialog3* = DEFINE_GUID(0x3050F388'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDivElement* = DEFINE_GUID(0x3050F200'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDivPosition* = DEFINE_GUID(0x3050F212'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHtmlDlgSafeHelper* = DEFINE_GUID(0x3050F81A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDListElement* = DEFINE_GUID(0x3050F1F1'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDocument* = DEFINE_GUID(0x626FC520'u32, 0xA41E, 0x11CF, [0xA7'u8, 0x31, 0x00, 0xA0, 0xC9, 0x08, 0x26, 0x37])
  IID_IHTMLDocument2* = DEFINE_GUID(0x332C4425'u32, 0x26CB, 0x11D0, [0xB4'u8, 0x83, 0x00, 0xC0, 0x4F, 0xD9, 0x01, 0x19])
  IID_IHTMLDocument3* = DEFINE_GUID(0x3050F485'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDocument4* = DEFINE_GUID(0x3050F69A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDocument5* = DEFINE_GUID(0x3050F80C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDOMAttribute* = DEFINE_GUID(0x3050F4B0'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDOMAttribute2* = DEFINE_GUID(0x3050F810'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDOMChildrenCollection* = DEFINE_GUID(0x3050F5AB'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDOMImplementation* = DEFINE_GUID(0x3050F80D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDOMNode* = DEFINE_GUID(0x3050F5DA'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDOMNode2* = DEFINE_GUID(0x3050F80B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDOMTextNode* = DEFINE_GUID(0x3050F4B1'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDOMTextNode2* = DEFINE_GUID(0x3050F809'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDTElement* = DEFINE_GUID(0x3050F1F3'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLDXTransform* = DEFINE_GUID(0x30E2AB7D'u32, 0x4FDD, 0x4159, [0xB7'u8, 0xEA, 0xDC, 0x72, 0x2B, 0xF4, 0xAD, 0xE5])
  IID_IHTMLEditDesigner* = DEFINE_GUID(0x3050F662'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLEditHost* = DEFINE_GUID(0x3050F6A0'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLEditHost2* = DEFINE_GUID(0x3050F848'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0D])
  IID_IHTMLEditingServices* = DEFINE_GUID(0x3050F7FB'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLEditor* = DEFINE_GUID(0x3050F7FA'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLEditServices* = DEFINE_GUID(0x3050F663'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLEditServices2* = DEFINE_GUID(0x3050F812'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLElement* = DEFINE_GUID(0x3050F1FF'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLElement2* = DEFINE_GUID(0x3050F434'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLElement3* = DEFINE_GUID(0x3050F673'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLElement4* = DEFINE_GUID(0x3050F80F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLElementCollection* = DEFINE_GUID(0x3050F21F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLElementCollection2* = DEFINE_GUID(0x3050F5EE'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLElementCollection3* = DEFINE_GUID(0x3050F835'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLElementDefaults* = DEFINE_GUID(0x3050F6C9'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLElementRender* = DEFINE_GUID(0x3050F669'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLEmbedElement* = DEFINE_GUID(0x3050F25F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLEventObj* = DEFINE_GUID(0x3050F32D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLEventObj2* = DEFINE_GUID(0x3050F48B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLEventObj3* = DEFINE_GUID(0x3050F680'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLEventObj4* = DEFINE_GUID(0x3050F814'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLFieldSetElement* = DEFINE_GUID(0x3050F3E7'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLFieldSetElement2* = DEFINE_GUID(0x3050F833'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLFilterPainter* = DEFINE_GUID(0x3050F6DE'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLFilterPaintSite* = DEFINE_GUID(0x3050F6D3'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLFiltersCollection* = DEFINE_GUID(0x3050F3EE'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLFontElement* = DEFINE_GUID(0x3050F1D9'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLFontNamesCollection* = DEFINE_GUID(0x3050F376'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLFontSizesCollection* = DEFINE_GUID(0x3050F377'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLFormElement* = DEFINE_GUID(0x3050F1F7'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLFormElement2* = DEFINE_GUID(0x3050F4F6'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLFormElement3* = DEFINE_GUID(0x3050F836'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLFrameBase* = DEFINE_GUID(0x3050F311'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLFrameBase2* = DEFINE_GUID(0x3050F6DB'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLFrameBase3* = DEFINE_GUID(0x3050F82E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLFrameElement* = DEFINE_GUID(0x3050F313'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLFrameElement2* = DEFINE_GUID(0x3050F7F5'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLFramesCollection2* = DEFINE_GUID(0x332C4426'u32, 0x26CB, 0x11D0, [0xB4'u8, 0x83, 0x00, 0xC0, 0x4F, 0xD9, 0x01, 0x19])
  IID_IHTMLFrameSetElement* = DEFINE_GUID(0x3050F319'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLFrameSetElement2* = DEFINE_GUID(0x3050F5C6'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLGenericElement* = DEFINE_GUID(0x3050F4B7'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLHeadElement* = DEFINE_GUID(0x3050F81D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLHeaderElement* = DEFINE_GUID(0x3050F1F6'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLHRElement* = DEFINE_GUID(0x3050F1F4'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLHtmlElement* = DEFINE_GUID(0x3050F81C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLIFrameElement* = DEFINE_GUID(0x3050F315'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLIFrameElement2* = DEFINE_GUID(0x3050F4E6'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLImageElementFactory* = DEFINE_GUID(0x3050F38E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLImgElement* = DEFINE_GUID(0x3050F240'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLImgElement2* = DEFINE_GUID(0x3050F826'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLInputButtonElement* = DEFINE_GUID(0x3050F2B2'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLInputElement* = DEFINE_GUID(0x3050F5D2'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLInputElement2* = DEFINE_GUID(0x3050F821'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLInputFileElement* = DEFINE_GUID(0x3050F2AD'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLInputHiddenElement* = DEFINE_GUID(0x3050F2A4'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLInputImage* = DEFINE_GUID(0x3050F2C2'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLInputTextElement* = DEFINE_GUID(0x3050F2A6'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLIPrintCollection* = DEFINE_GUID(0x3050F6B5'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLIsIndexElement* = DEFINE_GUID(0x3050F206'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLIsIndexElement2* = DEFINE_GUID(0x3050F82F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLLabelElement* = DEFINE_GUID(0x3050F32A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLLabelElement2* = DEFINE_GUID(0x3050F832'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLLegendElement* = DEFINE_GUID(0x3050F3EA'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLLegendElement2* = DEFINE_GUID(0x3050F834'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLLIElement* = DEFINE_GUID(0x3050F1E0'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLLinkElement* = DEFINE_GUID(0x3050F205'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLLinkElement2* = DEFINE_GUID(0x3050F4E5'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLLinkElement3* = DEFINE_GUID(0x3050F81E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLListElement* = DEFINE_GUID(0x3050F20E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLListElement2* = DEFINE_GUID(0x3050F822'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHtmlLoadOptions* = DEFINE_GUID(0xA71A0808'u32, 0x0F88, 0x11D1, [0xBA'u8, 0x19, 0x00, 0xC0, 0x4F, 0xD9, 0x12, 0xD0])
  IID_IHTMLLocation* = DEFINE_GUID(0x163BB1E0'u32, 0x6E00, 0x11CF, [0x83'u8, 0x7A, 0x48, 0xDC, 0x04, 0xC1, 0x00, 0x00])
  IID_IHTMLMapElement* = DEFINE_GUID(0x3050F266'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLMarqueeElement* = DEFINE_GUID(0x3050F2B5'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLMetaElement* = DEFINE_GUID(0x3050F203'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLMetaElement2* = DEFINE_GUID(0x3050F81F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLMimeTypesCollection* = DEFINE_GUID(0x3050F3FC'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLModelessInit* = DEFINE_GUID(0x3050F5E4'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLNamespace* = DEFINE_GUID(0x3050F6BB'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLNamespaceCollection* = DEFINE_GUID(0x3050F6B8'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLNextIdElement* = DEFINE_GUID(0x3050F207'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLNoShowElement* = DEFINE_GUID(0x3050F38A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLObjectElement* = DEFINE_GUID(0x3050F24F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLObjectElement2* = DEFINE_GUID(0x3050F4CD'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLObjectElement3* = DEFINE_GUID(0x3050F827'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLOListElement* = DEFINE_GUID(0x3050F1DE'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLOMWindowServices* = DEFINE_GUID(0x3050F5FC'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLOpsProfile* = DEFINE_GUID(0x3050F401'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLOptionButtonElement* = DEFINE_GUID(0x3050F2BC'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLOptionElement* = DEFINE_GUID(0x3050F211'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLOptionElement2* = DEFINE_GUID(0x3050F697'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLOptionElement3* = DEFINE_GUID(0x3050F820'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLOptionElementFactory* = DEFINE_GUID(0x3050F38C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLOptionsHolder* = DEFINE_GUID(0x3050F378'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLPainter* = DEFINE_GUID(0x3050F6A6'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLPainterEventInfo* = DEFINE_GUID(0x3050F6DF'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLPainterOverlay* = DEFINE_GUID(0x3050F7E3'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLPaintSite* = DEFINE_GUID(0x3050F6A7'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLParaElement* = DEFINE_GUID(0x3050F1F5'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLParamElement* = DEFINE_GUID(0x3050F83D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLPersistData* = DEFINE_GUID(0x3050F4C5'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLPersistDataOM* = DEFINE_GUID(0x3050F4C0'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLPhraseElement* = DEFINE_GUID(0x3050F20A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLPhraseElement2* = DEFINE_GUID(0x3050F824'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLPluginsCollection* = DEFINE_GUID(0x3050F3FD'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLPopup* = DEFINE_GUID(0x3050F666'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLPrivateWindow* = DEFINE_GUID(0x3050F6DC'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLPrivateWindow2* = DEFINE_GUID(0x3050F7E5'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLPrivateWindow3* = DEFINE_GUID(0x3050F840'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLRect* = DEFINE_GUID(0x3050F4A3'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLRectCollection* = DEFINE_GUID(0x3050F4A4'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLRenderStyle* = DEFINE_GUID(0x3050F6AE'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLRuleStyle* = DEFINE_GUID(0x3050F3CF'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLRuleStyle2* = DEFINE_GUID(0x3050F4AC'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLRuleStyle3* = DEFINE_GUID(0x3050F657'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLRuleStyle4* = DEFINE_GUID(0x3050F817'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLScreen* = DEFINE_GUID(0x3050F35C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLScreen2* = DEFINE_GUID(0x3050F84A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLScriptElement* = DEFINE_GUID(0x3050F28B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLScriptElement2* = DEFINE_GUID(0x3050F828'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLSelectElement* = DEFINE_GUID(0x3050F244'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLSelectElement2* = DEFINE_GUID(0x3050F5ED'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLSelectElement3* = DEFINE_GUID(0x3050F687'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLSelectElement4* = DEFINE_GUID(0x3050F838'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLSelectionObject* = DEFINE_GUID(0x3050F25A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLSelectionObject2* = DEFINE_GUID(0x3050F7EC'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLSpanElement* = DEFINE_GUID(0x3050F3F3'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLSpanFlow* = DEFINE_GUID(0x3050F3E5'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLStyle* = DEFINE_GUID(0x3050F25E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLStyle2* = DEFINE_GUID(0x3050F4A2'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLStyle3* = DEFINE_GUID(0x3050F656'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLStyle4* = DEFINE_GUID(0x3050F816'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLStyleElement* = DEFINE_GUID(0x3050F375'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLStyleFontFace* = DEFINE_GUID(0x3050F3D5'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLStyleSheet* = DEFINE_GUID(0x3050F2E3'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLStyleSheet2* = DEFINE_GUID(0x3050F3D1'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLStyleSheetPage* = DEFINE_GUID(0x3050F7EE'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLStyleSheetPagesCollection* = DEFINE_GUID(0x3050F7F0'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLStyleSheetRule* = DEFINE_GUID(0x3050F357'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLStyleSheetRulesCollection* = DEFINE_GUID(0x3050F2E5'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLStyleSheetsCollection* = DEFINE_GUID(0x3050F37E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLSubmitData* = DEFINE_GUID(0x3050F645'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTable* = DEFINE_GUID(0x3050F21E'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTable2* = DEFINE_GUID(0x3050F4AD'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTable3* = DEFINE_GUID(0x3050F829'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTableCaption* = DEFINE_GUID(0x3050F2EB'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTableCell* = DEFINE_GUID(0x3050F23D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTableCell2* = DEFINE_GUID(0x3050F82D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTableCol* = DEFINE_GUID(0x3050F23A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTableCol2* = DEFINE_GUID(0x3050F82A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTableRow* = DEFINE_GUID(0x3050F23C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTableRow2* = DEFINE_GUID(0x3050F4A1'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTableRow3* = DEFINE_GUID(0x3050F82C'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTableRowMetrics* = DEFINE_GUID(0x3050F413'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTableSection* = DEFINE_GUID(0x3050F23B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTableSection2* = DEFINE_GUID(0x3050F5C7'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTableSection3* = DEFINE_GUID(0x3050F82B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTextAreaElement* = DEFINE_GUID(0x3050F2AA'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTextContainer* = DEFINE_GUID(0x3050F230'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTextElement* = DEFINE_GUID(0x3050F218'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTextRangeMetrics* = DEFINE_GUID(0x3050F40B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTextRangeMetrics2* = DEFINE_GUID(0x3050F4A6'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTitleElement* = DEFINE_GUID(0x3050F322'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTxtRange* = DEFINE_GUID(0x3050F220'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLTxtRangeCollection* = DEFINE_GUID(0x3050F7ED'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLUListElement* = DEFINE_GUID(0x3050F1DD'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLUniqueName* = DEFINE_GUID(0x3050F4D0'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLUnknownElement* = DEFINE_GUID(0x3050F209'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLUrnCollection* = DEFINE_GUID(0x3050F5E2'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLUserDataOM* = DEFINE_GUID(0x3050F48F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLViewFilter* = DEFINE_GUID(0x3050F2F1'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLViewFilterSite* = DEFINE_GUID(0x3050F2F4'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLWindow2* = DEFINE_GUID(0x332C4427'u32, 0x26CB, 0x11D0, [0xB4'u8, 0x83, 0x00, 0xC0, 0x4F, 0xD9, 0x01, 0x19])
  IID_IHTMLWindow3* = DEFINE_GUID(0x3050F4AE'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHTMLWindow4* = DEFINE_GUID(0x3050F6CF'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IHttpNegotiate* = DEFINE_GUID(0x79EAC9D2'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IHttpNegotiate2* = DEFINE_GUID(0x4F9F9FCB'u32, 0xE0F4, 0x48EB, [0xB7'u8, 0xAB, 0xFA, 0x2E, 0xA9, 0x36, 0x5C, 0xB4])
  IID_IHttpSecurity* = DEFINE_GUID(0x79EAC9D7'u32, 0xBAFA, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IHWEventHandler* = DEFINE_GUID(0xC1FB73D0'u32, 0xEC3A, 0x4BA2, [0xB5'u8, 0x12, 0x8C, 0xDB, 0x91, 0x87, 0xB6, 0xD1])
  IID_IImageDecodeEventSink* = DEFINE_GUID(0xBAA342A0'u32, 0x2DED, 0x11D0, [0x86'u8, 0xF4, 0x00, 0xA0, 0xC9, 0x13, 0xF7, 0x50])
  IID_IImageDecodeFilter* = DEFINE_GUID(0xA3CCEDF3'u32, 0x2DE2, 0x11D0, [0x86'u8, 0xF4, 0x00, 0xA0, 0xC9, 0x13, 0xF7, 0x50])
  IID_IImageList* = DEFINE_GUID(0x46EB5926'u32, 0x582E, 0x4017, [0x9F'u8, 0xDF, 0xE8, 0x99, 0x8D, 0xAA, 0x09, 0x50])
  IID_IIMEServices* = DEFINE_GUID(0x3050F6CA'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IImgCtx* = DEFINE_GUID(0x3050F3D7'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IIndexDefinition* = DEFINE_GUID(0x0C733A68'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IInputObject* = DEFINE_GUID(0x68284FAA'u32, 0x6A48, 0x11D0, [0x8C'u8, 0x78, 0x00, 0xC0, 0x4F, 0xD9, 0x18, 0xB4])
  IID_IInputObjectSite* = DEFINE_GUID(0xF1DB8392'u32, 0x7331, 0x11D0, [0x8C'u8, 0x99, 0x00, 0xA0, 0xC9, 0x2D, 0xBF, 0xE8])
  IID_IIntDitherer* = DEFINE_GUID(0x06670CA0'u32, 0xECEF, 0x11D0, [0xAA'u8, 0xE7, 0x00, 0xC0, 0x4F, 0xC9, 0xB3, 0x04])
  IID_IIntelliForms* = DEFINE_GUID(0x9B9F68E6'u32, 0x1AAA, 0x11D2, [0xBC'u8, 0xA5, 0x00, 0xC0, 0x4F, 0xD9, 0x29, 0xDB])
  IID_IInterfaceRelated* = DEFINE_GUID(0xD1FB5A79'u32, 0x7706, 0x11D1, [0xAD'u8, 0xBA, 0x00, 0xC0, 0x4F, 0xC2, 0xAD, 0xC0])
  IID_IInternalMoniker* = DEFINE_GUID(0x00000011'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IInternalUnknown* = DEFINE_GUID(0x00000021'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IInternet* = DEFINE_GUID(0x79EAC9E0'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IInternetBindInfo* = DEFINE_GUID(0x79EAC9E1'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IInternetConnectionDevice* = DEFINE_GUID(0x04DF6137'u32, 0x5610, 0x11D4, [0x9E'u8, 0xC8, 0x00, 0xB0, 0xD0, 0x22, 0xDD, 0x1F])
  IID_IInternetConnectionDeviceClient* = DEFINE_GUID(0x04DF6139'u32, 0x5610, 0x11D4, [0x9E'u8, 0xC8, 0x00, 0xB0, 0xD0, 0x22, 0xDD, 0x1F])
  IID_IInternetConnectionDeviceSharedCo* = DEFINE_GUID(0x04DF6138'u32, 0x5610, 0x11D4, [0x9E'u8, 0xC8, 0x00, 0xB0, 0xD0, 0x22, 0xDD, 0x1F])
  IID_IInternetHostSecurityManager* = DEFINE_GUID(0x3AF280B6'u32, 0xCB3F, 0x11D0, [0x89'u8, 0x1E, 0x00, 0xC0, 0x4F, 0xB6, 0xBF, 0xC4])
  IID_IInternetPriority* = DEFINE_GUID(0x79EAC9EB'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IInternetProtocol* = DEFINE_GUID(0x79EAC9E4'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IInternetProtocolInfo* = DEFINE_GUID(0x79EAC9EC'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IInternetProtocolRoot* = DEFINE_GUID(0x79EAC9E3'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IInternetProtocolSink* = DEFINE_GUID(0x79EAC9E5'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IInternetProtocolSinkStackable* = DEFINE_GUID(0x79EAC9F0'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IInternetSecurityManager* = DEFINE_GUID(0x79EAC9EE'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IInternetSecurityMgrSite* = DEFINE_GUID(0x79EAC9ED'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IInternetSession* = DEFINE_GUID(0x79EAC9E7'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IInternetThreadSwitch* = DEFINE_GUID(0x79EAC9E8'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IInternetZoneManager* = DEFINE_GUID(0x79EAC9EF'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IIpxAdapterInfo* = DEFINE_GUID(0x98133270'u32, 0x4B20, 0x11D1, [0xAB'u8, 0x01, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_IItemNameLimits* = DEFINE_GUID(0x1DF0D7F1'u32, 0xB267, 0x4D28, [0x8B'u8, 0x10, 0x12, 0xE2, 0x32, 0x02, 0xA5, 0xC4])
  IID_IJolietDiscMaster* = DEFINE_GUID(0xE3BC42CE'u32, 0x4E5C, 0x11D3, [0x91'u8, 0x44, 0x00, 0x10, 0x4B, 0xA1, 0x1C, 0x5E])
  IID_IKeyFrameControl* = DEFINE_GUID(0xC3341386'u32, 0xAF91, 0x4EF9, [0x83'u8, 0xB6, 0xBE, 0x37, 0x62, 0xE4, 0x2E, 0xCB])
  IID_IKsControl* = DEFINE_GUID(0x28F54685'u32, 0x06FD, 0x11D2, [0xB2'u8, 0x7A, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96])
  IID_IKsPropertySet* = DEFINE_GUID(0x31EFAC30'u32, 0x515C, 0x11D0, [0xA9'u8, 0xAA, 0x00, 0xAA, 0x00, 0x61, 0xBE, 0x93])
  IID_ILayoutRect* = DEFINE_GUID(0x3050F665'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ILayoutStorage* = DEFINE_GUID(0x0E6D4D90'u32, 0x6738, 0x11CF, [0x96'u8, 0x08, 0x00, 0xAA, 0x00, 0x68, 0x0D, 0xB4])
  IID_ILineInfo* = DEFINE_GUID(0x3050F7E2'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ILocalMachine* = DEFINE_GUID(0x60664CAF'u32, 0xAF0D, 0x1005, [0xA3'u8, 0x00, 0x5C, 0x7D, 0x25, 0xFF, 0x22, 0xA0])
  IID_ILockBytes* = DEFINE_GUID(0x0000000A'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ILogger* = DEFINE_GUID(0xD9598418'u32, 0x304E, 0x4F94, [0xB6'u8, 0xA1, 0xE6, 0x42, 0xFE, 0x95, 0xED, 0x57])
  IID_ILogManager* = DEFINE_GUID(0x4759DC11'u32, 0x8DA0, 0x4261, [0xBB'u8, 0xFB, 0xEC, 0x32, 0x19, 0x11, 0xD1, 0xC9])
  IID_ILogonEnumUsers* = DEFINE_GUID(0x60664CAF'u32, 0xAF0D, 0x1004, [0xA3'u8, 0x00, 0x5C, 0x7D, 0x25, 0xFF, 0x22, 0xA0])
  IID_ILogonStatusHost* = DEFINE_GUID(0x60664CAF'u32, 0xAF0D, 0x1007, [0xA3'u8, 0x00, 0x5C, 0x7D, 0x25, 0xFF, 0x22, 0xA0])
  IID_ILogonUser* = DEFINE_GUID(0x60664CAF'u32, 0xAF0D, 0x1003, [0xA3'u8, 0x00, 0x5C, 0x7D, 0x25, 0xFF, 0x22, 0xA0])
  IID_IMachineDebugManager* = DEFINE_GUID(0x51973C2C'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IMachineDebugManagerCookie* = DEFINE_GUID(0x51973C2D'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IMachineDebugManagerEvents* = DEFINE_GUID(0x51973C2E'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IMailAutoDiscovery* = DEFINE_GUID(0x80402DEE'u32, 0xB114, 0x4D32, [0xB4'u8, 0x4E, 0x82, 0xFD, 0x82, 0x34, 0xC9, 0x2A])
  IID_IMailProtocolADEntry* = DEFINE_GUID(0x40EF8C68'u32, 0xD554, 0x47ED, [0xAA'u8, 0x37, 0xE5, 0xFB, 0x6B, 0xC9, 0x10, 0x75])
  IID_IMalloc* = DEFINE_GUID(0x00000002'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IMallocSpy* = DEFINE_GUID(0x0000001D'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IMapMIMEToCLSID* = DEFINE_GUID(0xD9E89500'u32, 0x30FA, 0x11D0, [0xB7'u8, 0x24, 0x00, 0xAA, 0x00, 0x6C, 0x1A, 0x01])
  IID_IMarkupContainer* = DEFINE_GUID(0x3050F5F9'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IMarkupContainer2* = DEFINE_GUID(0x3050F648'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IMarkupPointer* = DEFINE_GUID(0x3050F49F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IMarkupPointer2* = DEFINE_GUID(0x3050F675'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IMarkupServices* = DEFINE_GUID(0x3050F4A0'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IMarkupServices2* = DEFINE_GUID(0x3050F682'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IMarkupTextFrags* = DEFINE_GUID(0x3050F5FA'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IMarshal* = DEFINE_GUID(0x00000003'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IMarshal2* = DEFINE_GUID(0x000001CF'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IMcastAddressAllocation* = DEFINE_GUID(0xDF0DAEF1'u32, 0xA289, 0x11D1, [0x86'u8, 0x97, 0x00, 0x60, 0x08, 0xB0, 0xE5, 0xD2])
  IID_IMcastLeaseInfo* = DEFINE_GUID(0xDF0DAEFD'u32, 0xA289, 0x11D1, [0x86'u8, 0x97, 0x00, 0x60, 0x08, 0xB0, 0xE5, 0xD2])
  IID_IMcastScope* = DEFINE_GUID(0xDF0DAEF4'u32, 0xA289, 0x11D1, [0x86'u8, 0x97, 0x00, 0x60, 0x08, 0xB0, 0xE5, 0xD2])
  IID_IMDDataset* = DEFINE_GUID(0xA07CCCD1'u32, 0x8148, 0x11D0, [0x87'u8, 0xBB, 0x00, 0xC0, 0x4F, 0xC3, 0x39, 0x42])
  IID_IMDFind* = DEFINE_GUID(0xA07CCCD2'u32, 0x8148, 0x11D0, [0x87'u8, 0xBB, 0x00, 0xC0, 0x4F, 0xC3, 0x39, 0x42])
  IID_IMDRangeRowset* = DEFINE_GUID(0x0C733AA0'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IMessageFilter* = DEFINE_GUID(0x00000016'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IMigrationWizardAuto* = DEFINE_GUID(0xCE20DAB9'u32, 0xB353, 0x469B, [0x8B'u8, 0x4D, 0x6D, 0xBB, 0x3A, 0x7B, 0xA0, 0x16])
  IID_IMimeInfo* = DEFINE_GUID(0xF77459A0'u32, 0xBF9A, 0x11CF, [0xBA'u8, 0x4E, 0x00, 0xC0, 0x4F, 0xD7, 0x08, 0x16])
  IID_IMLangCodePages* = DEFINE_GUID(0x359F3443'u32, 0xBD4A, 0x11D0, [0xB1'u8, 0x88, 0x00, 0xAA, 0x00, 0x38, 0xC9, 0x69])
  IID_IMLangConvertCharset* = DEFINE_GUID(0xD66D6F98'u32, 0xCDAA, 0x11D0, [0xB8'u8, 0x22, 0x00, 0xC0, 0x4F, 0xC9, 0xB3, 0x1F])
  IID_IMLangFontLink* = DEFINE_GUID(0x359F3441'u32, 0xBD4A, 0x11D0, [0xB1'u8, 0x88, 0x00, 0xAA, 0x00, 0x38, 0xC9, 0x69])
  IID_IMLangFontLink2* = DEFINE_GUID(0xDCCFC162'u32, 0x2B38, 0x11D2, [0xB7'u8, 0xEC, 0x00, 0xC0, 0x4F, 0x8F, 0x5D, 0x9A])
  IID_IMLangLineBreakConsole* = DEFINE_GUID(0xF5BE2EE1'u32, 0xBFD7, 0x11D0, [0xB1'u8, 0x88, 0x00, 0xAA, 0x00, 0x38, 0xC9, 0x69])
  IID_IMLangString* = DEFINE_GUID(0xC04D65CE'u32, 0xB70D, 0x11D0, [0xB1'u8, 0x88, 0x00, 0xAA, 0x00, 0x38, 0xC9, 0x69])
  IID_IMLangStringAStr* = DEFINE_GUID(0xC04D65D2'u32, 0xB70D, 0x11D0, [0xB1'u8, 0x88, 0x00, 0xAA, 0x00, 0x38, 0xC9, 0x69])
  IID_IMLangStringBufA* = DEFINE_GUID(0xD24ACD23'u32, 0xBA72, 0x11D0, [0xB1'u8, 0x88, 0x00, 0xAA, 0x00, 0x38, 0xC9, 0x69])
  IID_IMLangStringBufW* = DEFINE_GUID(0xD24ACD21'u32, 0xBA72, 0x11D0, [0xB1'u8, 0x88, 0x00, 0xAA, 0x00, 0x38, 0xC9, 0x69])
  IID_IMLangStringWStr* = DEFINE_GUID(0xC04D65D0'u32, 0xB70D, 0x11D0, [0xB1'u8, 0x88, 0x00, 0xAA, 0x00, 0x38, 0xC9, 0x69])
  IID_IMofCompiler* = DEFINE_GUID(0x6DAF974E'u32, 0x2E37, 0x11D2, [0xAE'u8, 0xC9, 0x00, 0xC0, 0x4F, 0xB6, 0x88, 0x20])
  IID_IMoniker* = DEFINE_GUID(0x0000000F'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IMonikerProp* = DEFINE_GUID(0xA5CA5F7F'u32, 0x1847, 0x4D87, [0x9C'u8, 0x5B, 0x91, 0x85, 0x09, 0xF7, 0x51, 0x1D])
  IID_IMountedVolume* = DEFINE_GUID(0x12518492'u32, 0x00B2, 0x11D2, [0x9F'u8, 0xA5, 0x9E, 0x34, 0x20, 0x52, 0x41, 0x53])
  IID_IMulticastControl* = DEFINE_GUID(0x410FA507'u32, 0x4DC6, 0x415A, [0x90'u8, 0x14, 0x63, 0x38, 0x75, 0xD5, 0x40, 0x6E])
  IID_IMultiLanguage* = DEFINE_GUID(0x275C23E1'u32, 0x3747, 0x11D0, [0x9F'u8, 0xEA, 0x00, 0xAA, 0x00, 0x3F, 0x86, 0x46])
  IID_IMultiLanguage2* = DEFINE_GUID(0xDCCFC164'u32, 0x2B38, 0x11D2, [0xB7'u8, 0xEC, 0x00, 0xC0, 0x4F, 0x8F, 0x5D, 0x9A])
  IID_IMultiLanguage3* = DEFINE_GUID(0x4E5868AB'u32, 0xB157, 0x4623, [0x9A'u8, 0xCC, 0x6A, 0x1D, 0x9C, 0xAE, 0xBE, 0x04])
  IID_IMultiplePropertyAccess* = DEFINE_GUID(0xEC81FEDE'u32, 0xD432, 0x11CE, [0x92'u8, 0x44, 0x00, 0x20, 0xAF, 0x6E, 0x72, 0xDB])
  IID_IMultipleResults* = DEFINE_GUID(0x0C733A90'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IMultiQI* = DEFINE_GUID(0x00000020'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_INamedPropertyBag* = DEFINE_GUID(0xFB700430'u32, 0x952C, 0x11D1, [0x94'u8, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
  IID_INATEventManager* = DEFINE_GUID(0x624BD588'u32, 0x9060, 0x4109, [0xB0'u8, 0xB0, 0x1A, 0xDB, 0xBC, 0xAC, 0x32, 0xDF])
  IID_INATExternalIPAddressCallback* = DEFINE_GUID(0x9C416740'u32, 0xA34E, 0x446F, [0xBA'u8, 0x06, 0xAB, 0xD0, 0x4C, 0x31, 0x49, 0xAE])
  IID_INATNumberOfEntriesCallback* = DEFINE_GUID(0xC83A0A74'u32, 0x91EE, 0x41B6, [0xB6'u8, 0x7A, 0x67, 0xE0, 0xF0, 0x0B, 0xBD, 0x78])
  IID_INetCfg* = DEFINE_GUID(0xC0E8AE93'u32, 0x306E, 0x11D1, [0xAA'u8, 0xCF, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetCfgBindingInterface* = DEFINE_GUID(0xC0E8AE94'u32, 0x306E, 0x11D1, [0xAA'u8, 0xCF, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetCfgBindingPath* = DEFINE_GUID(0xC0E8AE96'u32, 0x306E, 0x11D1, [0xAA'u8, 0xCF, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetCfgClass* = DEFINE_GUID(0xC0E8AE97'u32, 0x306E, 0x11D1, [0xAA'u8, 0xCF, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetCfgClassSetup* = DEFINE_GUID(0xC0E8AE9D'u32, 0x306E, 0x11D1, [0xAA'u8, 0xCF, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetCfgComponent* = DEFINE_GUID(0xC0E8AE99'u32, 0x306E, 0x11D1, [0xAA'u8, 0xCF, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetCfgComponentBindings* = DEFINE_GUID(0xC0E8AE9E'u32, 0x306E, 0x11D1, [0xAA'u8, 0xCF, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetCfgComponentControl* = DEFINE_GUID(0x932238DF'u32, 0xBEA1, 0x11D0, [0x92'u8, 0x98, 0x00, 0xC0, 0x4F, 0xC9, 0x9D, 0xCF])
  IID_INetCfgComponentNotifyBinding* = DEFINE_GUID(0x932238E1'u32, 0xBEA1, 0x11D0, [0x92'u8, 0x98, 0x00, 0xC0, 0x4F, 0xC9, 0x9D, 0xCF])
  IID_INetCfgComponentNotifyGlobal* = DEFINE_GUID(0x932238E2'u32, 0xBEA1, 0x11D0, [0x92'u8, 0x98, 0x00, 0xC0, 0x4F, 0xC9, 0x9D, 0xCF])
  IID_INetCfgComponentPrivate* = DEFINE_GUID(0x98133273'u32, 0x4B20, 0x11D1, [0xAB'u8, 0x01, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetCfgComponentPropertyUi* = DEFINE_GUID(0x932238E0'u32, 0xBEA1, 0x11D0, [0x92'u8, 0x98, 0x00, 0xC0, 0x4F, 0xC9, 0x9D, 0xCF])
  IID_INetCfgComponentSetup* = DEFINE_GUID(0x932238E3'u32, 0xBEA1, 0x11D0, [0x92'u8, 0x98, 0x00, 0xC0, 0x4F, 0xC9, 0x9D, 0xCF])
  IID_INetCfgComponentSysPrep* = DEFINE_GUID(0xC0E8AE9A'u32, 0x306E, 0x11D1, [0xAA'u8, 0xCF, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetCfgComponentUpperEdge* = DEFINE_GUID(0x932238E4'u32, 0xBEA1, 0x11D0, [0x92'u8, 0x98, 0x00, 0xC0, 0x4F, 0xC9, 0x9D, 0xCF])
  IID_INetCfgInternalSetup* = DEFINE_GUID(0x98133276'u32, 0x4B20, 0x11D1, [0xAB'u8, 0x01, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetCfgLock* = DEFINE_GUID(0xC0E8AE9F'u32, 0x306E, 0x11D1, [0xAA'u8, 0xCF, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetCfgPnpReconfigCallback* = DEFINE_GUID(0x8D84BD35'u32, 0xE227, 0x11D2, [0xB7'u8, 0x00, 0x00, 0xA0, 0xC9, 0x8A, 0x6A, 0x85])
  IID_INetCfgSpecialCase* = DEFINE_GUID(0xC0E8AE95'u32, 0x306E, 0x11D1, [0xAA'u8, 0xCF, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetCfgSysPrep* = DEFINE_GUID(0xC0E8AE98'u32, 0x306E, 0x11D1, [0xAA'u8, 0xCF, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnection* = DEFINE_GUID(0xC08956A1'u32, 0x1CD3, 0x11D1, [0xB1'u8, 0xC5, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnection2* = DEFINE_GUID(0xFAEDCF6A'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnectionBrandingInfo* = DEFINE_GUID(0xFAEDCF5B'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnectionCMUtil* = DEFINE_GUID(0xFAEDCF60'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnectionCommonUi* = DEFINE_GUID(0xC08956A5'u32, 0x1CD3, 0x11D1, [0xB1'u8, 0xC5, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnectionConnectUi* = DEFINE_GUID(0xC08956A3'u32, 0x1CD3, 0x11D1, [0xB1'u8, 0xC5, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnectionHNetUtil* = DEFINE_GUID(0xFAEDCF64'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnectionManager* = DEFINE_GUID(0xC08956A2'u32, 0x1CD3, 0x11D1, [0xB1'u8, 0xC5, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnectionManager2* = DEFINE_GUID(0xFAEDCF69'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnectionManagerDebug* = DEFINE_GUID(0xFAEDCF5D'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnectionManagerEvents* = DEFINE_GUID(0xC08956BA'u32, 0x1CD3, 0x11D1, [0xB1'u8, 0xC5, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnectionNotifySink* = DEFINE_GUID(0xFAEDCF5C'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnectionPropertyUi* = DEFINE_GUID(0xC08956A4'u32, 0x1CD3, 0x11D1, [0xB1'u8, 0xC5, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnectionPropertyUi2* = DEFINE_GUID(0xC08956B9'u32, 0x1CD3, 0x11D1, [0xB1'u8, 0xC5, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnectionProps* = DEFINE_GUID(0xF4277C95'u32, 0xCE5B, 0x463D, [0x81'u8, 0x67, 0x56, 0x62, 0xD9, 0xBC, 0xAA, 0x72])
  IID_INetConnectionRefresh* = DEFINE_GUID(0xFAEDCF5F'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnectionSysTray* = DEFINE_GUID(0xFAEDCF65'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnectionUiLock* = DEFINE_GUID(0xFAEDCF50'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnectionUiUtilities* = DEFINE_GUID(0xFAEDCF5E'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnectionWizardUi* = DEFINE_GUID(0xFAEDCF51'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetConnectionWizardUiContext* = DEFINE_GUID(0xFAEDCF52'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetCrawler* = DEFINE_GUID(0x49C929EE'u32, 0xA1B7, 0x4C58, [0xB5'u8, 0x39, 0xE6, 0x3B, 0xE3, 0x92, 0xB6, 0xF3])
  IID_INetDefaultConnection* = DEFINE_GUID(0xFAEDCF66'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetInboundConnection* = DEFINE_GUID(0xFAEDCF53'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetInstallQueue* = DEFINE_GUID(0x98133274'u32, 0x4B20, 0x11D1, [0xAB'u8, 0x01, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetLanConnection* = DEFINE_GUID(0xFAEDCF54'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetLanConnectionUiInfo* = DEFINE_GUID(0xC08956A6'u32, 0x1CD3, 0x11D1, [0xB1'u8, 0xC5, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetLanConnectionWizardUi* = DEFINE_GUID(0xFAEDCF56'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetMachinePolicies* = DEFINE_GUID(0xFAEDCF68'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetRasConnection* = DEFINE_GUID(0xFAEDCF57'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetRasConnectionIpUiInfo* = DEFINE_GUID(0xFAEDCF58'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetSharedAccessConnection* = DEFINE_GUID(0xFAEDCF55'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetSharingConfiguration* = DEFINE_GUID(0xC08956B6'u32, 0x1CD3, 0x11D1, [0xB1'u8, 0xC5, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetSharingEveryConnectionCollect* = DEFINE_GUID(0x33C4643C'u32, 0x7811, 0x46FA, [0xA8'u8, 0x9A, 0x76, 0x85, 0x97, 0xBD, 0x72, 0x23])
  IID_INetSharingManager* = DEFINE_GUID(0xC08956B7'u32, 0x1CD3, 0x11D1, [0xB1'u8, 0xC5, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetSharingPortMapping* = DEFINE_GUID(0xC08956B1'u32, 0x1CD3, 0x11D1, [0xB1'u8, 0xC5, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_INetSharingPortMappingCollection* = DEFINE_GUID(0x02E4A2DE'u32, 0xDA20, 0x4E34, [0x89'u8, 0xC8, 0xAC, 0x22, 0x27, 0x5A, 0x01, 0x0B])
  IID_INetSharingPortMappingProps* = DEFINE_GUID(0x24B7E9B5'u32, 0xE38F, 0x4685, [0x85'u8, 0x1B, 0x00, 0x89, 0x2C, 0xF5, 0xF9, 0x40])
  IID_INetSharingPrivateConnectionColle* = DEFINE_GUID(0x38AE69E0'u32, 0x4409, 0x402A, [0xA2'u8, 0xCB, 0xE9, 0x65, 0xC7, 0x27, 0xF8, 0x40])
  IID_INetSharingPublicConnectionCollec* = DEFINE_GUID(0x7D7A6355'u32, 0xF372, 0x4971, [0xA1'u8, 0x49, 0xBF, 0xC9, 0x27, 0xBE, 0x76, 0x2A])
  IID_INewShortcutHookA* = DEFINE_GUID(0x000214E1'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_INewShortcutHookW* = DEFINE_GUID(0x000214F7'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_INewWDEvents* = DEFINE_GUID(0x0751C551'u32, 0x7568, 0x41C9, [0x8E'u8, 0x5B, 0xE2, 0x2E, 0x38, 0x91, 0x92, 0x36])
  IID_INotification* = DEFINE_GUID(0xC733E4A3'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  IID_INotificationHelper* = DEFINE_GUID(0xC733E4AB'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  IID_INotificationManager* = DEFINE_GUID(0x95531501'u32, 0x8782, 0x4845, [0x90'u8, 0x1D, 0x31, 0x2F, 0x36, 0xBA, 0x6C, 0x6E])
  IID_INotificationMgr* = DEFINE_GUID(0xC733E4A4'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  IID_INotificationPing* = DEFINE_GUID(0xC733E4AC'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  IID_INotificationProcessMgr0* = DEFINE_GUID(0xC733E4AE'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  IID_INotificationReport* = DEFINE_GUID(0xC733E4A7'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  IID_INotificationRunning* = DEFINE_GUID(0xC733E4AD'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  IID_INotificationSink* = DEFINE_GUID(0xC733E4A5'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  IID_INotifyDBEvents* = DEFINE_GUID(0xDB526CC0'u32, 0xD188, 0x11CD, [0xAD'u8, 0x48, 0x00, 0xAA, 0x00, 0x3C, 0x9C, 0xB6])
  IID_INotifyReplica* = DEFINE_GUID(0x99180163'u32, 0xDA16, 0x101A, [0x93'u8, 0x5C, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_INotifyUI* = DEFINE_GUID(0xE5E8D401'u32, 0x1A37, 0x4FBF, [0x88'u8, 0x0C, 0x82, 0x6C, 0xC8, 0x95, 0x16, 0xFD])
  IID_IObjectAccessControl* = DEFINE_GUID(0x0C733AA3'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IObjectIdentity* = DEFINE_GUID(0xCA04B7E6'u32, 0x0D21, 0x11D1, [0x8C'u8, 0xC5, 0x00, 0xC0, 0x4F, 0xC2, 0xB0, 0x85])
  IID_IObjectManager* = DEFINE_GUID(0xD51351DF'u32, 0x6394, 0x4236, [0x97'u8, 0x83, 0x65, 0xED, 0x05, 0x63, 0x10, 0x68])
  IID_IObjectSafety* = DEFINE_GUID(0xCB5BDC81'u32, 0x93C1, 0x11CF, [0x8F'u8, 0x20, 0x00, 0x80, 0x5F, 0x2C, 0xD0, 0x64])
  IID_IObjectWithSite* = DEFINE_GUID(0xFC4801A3'u32, 0x2BA9, 0x11CF, [0xA2'u8, 0x29, 0x00, 0xAA, 0x00, 0x3D, 0x73, 0x52])
  IID_IObjMgr* = DEFINE_GUID(0x00BB2761'u32, 0x6A77, 0x11D0, [0xA5'u8, 0x35, 0x00, 0xC0, 0x4F, 0xD7, 0xD0, 0x62])
  IID_IOInet* = DEFINE_GUID(0x79EAC9E0'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IOInetBindClient* = DEFINE_GUID(0x79EAC9E2'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IOInetBindInfo* = DEFINE_GUID(0x79EAC9E1'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IOInetCache* = DEFINE_GUID(0x79EAC9EA'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IOInetPriority* = DEFINE_GUID(0x79EAC9EB'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IOInetProtocol* = DEFINE_GUID(0x79EAC9E4'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IOInetProtocolInfo* = DEFINE_GUID(0x79EAC9EC'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IOInetProtocolRoot* = DEFINE_GUID(0x79EAC9E3'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IOInetProtocolSink* = DEFINE_GUID(0x79EAC9E5'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IOInetSession* = DEFINE_GUID(0x79EAC967'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IOInetThreadSwitch* = DEFINE_GUID(0x79EAC968'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IOldSyncMgrRegister* = DEFINE_GUID(0x894D8C55'u32, 0xBDDF, 0x11D1, [0xB8'u8, 0x5D, 0x00, 0xC0, 0x4F, 0xB9, 0x39, 0x81])
  IID_IOldSyncMgrSynchronize* = DEFINE_GUID(0x6295DF28'u32, 0x35EE, 0x11D1, [0x87'u8, 0x07, 0x00, 0xC0, 0x4F, 0xD9, 0x33, 0x27])
  IID_IOldSyncMgrSynchronizeCallback* = DEFINE_GUID(0x6295DF29'u32, 0x35EE, 0x11D1, [0x87'u8, 0x07, 0x00, 0xC0, 0x4F, 0xD9, 0x33, 0x27])
  IID_IOleAdviseHolder* = DEFINE_GUID(0x00000111'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IOleCache* = DEFINE_GUID(0x0000011E'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IOleCache2* = DEFINE_GUID(0x00000128'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IOleCacheControl* = DEFINE_GUID(0x00000129'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IOleClientSite* = DEFINE_GUID(0x00000118'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IOleCommandTarget* = DEFINE_GUID(0xB722BCCB'u32, 0x4E68, 0x101B, [0xA2'u8, 0xBC, 0x00, 0xAA, 0x00, 0x40, 0x47, 0x70])
  IID_IOleContainer* = DEFINE_GUID(0x0000011B'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IOleControl* = DEFINE_GUID(0xB196B288'u32, 0xBAB4, 0x101A, [0xB6'u8, 0x9C, 0x00, 0xAA, 0x00, 0x34, 0x1D, 0x07])
  IID_IOleControlSite* = DEFINE_GUID(0xB196B289'u32, 0xBAB4, 0x101A, [0xB6'u8, 0x9C, 0x00, 0xAA, 0x00, 0x34, 0x1D, 0x07])
  IID_IOleDocument* = DEFINE_GUID(0xB722BCC5'u32, 0x4E68, 0x101B, [0xA2'u8, 0xBC, 0x00, 0xAA, 0x00, 0x40, 0x47, 0x70])
  IID_IOleDocumentSite* = DEFINE_GUID(0xB722BCC7'u32, 0x4E68, 0x101B, [0xA2'u8, 0xBC, 0x00, 0xAA, 0x00, 0x40, 0x47, 0x70])
  IID_IOleDocumentView* = DEFINE_GUID(0xB722BCC6'u32, 0x4E68, 0x101B, [0xA2'u8, 0xBC, 0x00, 0xAA, 0x00, 0x40, 0x47, 0x70])
  IID_IOleInPlaceActiveObject* = DEFINE_GUID(0x00000117'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IOleInPlaceFrame* = DEFINE_GUID(0x00000116'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IOleInPlaceObject* = DEFINE_GUID(0x00000113'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IOleInPlaceObjectWindowless* = DEFINE_GUID(0x1C2056CC'u32, 0x5EF4, 0x101B, [0x8B'u8, 0xC8, 0x00, 0xAA, 0x00, 0x3E, 0x3B, 0x29])
  IID_IOleInPlaceSite* = DEFINE_GUID(0x00000119'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IOleInPlaceSiteEx* = DEFINE_GUID(0x9C2CAD80'u32, 0x3424, 0x11CF, [0xB6'u8, 0x70, 0x00, 0xAA, 0x00, 0x4C, 0xD6, 0xD8])
  IID_IOleInPlaceSiteWindowless* = DEFINE_GUID(0x922EADA0'u32, 0x3424, 0x11CF, [0xB6'u8, 0x70, 0x00, 0xAA, 0x00, 0x4C, 0xD6, 0xD8])
  IID_IOleInPlaceUIWindow* = DEFINE_GUID(0x00000115'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IOleItemContainer* = DEFINE_GUID(0x0000011C'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IOleLink* = DEFINE_GUID(0x0000011D'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IOleManager* = DEFINE_GUID(0x0000011F'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IOleObject* = DEFINE_GUID(0x00000112'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IOleParentUndoUnit* = DEFINE_GUID(0xA1FAF330'u32, 0xEF97, 0x11CE, [0x9B'u8, 0xC9, 0x00, 0xAA, 0x00, 0x60, 0x8E, 0x01])
  IID_IOlePresObj* = DEFINE_GUID(0x00000120'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IOleUndoManager* = DEFINE_GUID(0xD001F200'u32, 0xEF97, 0x11CE, [0x9B'u8, 0xC9, 0x00, 0xAA, 0x00, 0x60, 0x8E, 0x01])
  IID_IOleUndoUnit* = DEFINE_GUID(0x894AD3B0'u32, 0xEF97, 0x11CE, [0x9B'u8, 0xC9, 0x00, 0xAA, 0x00, 0x60, 0x8E, 0x01])
  IID_IOleWindow* = DEFINE_GUID(0x00000114'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IOmHistory* = DEFINE_GUID(0xFECEAAA2'u32, 0x8405, 0x11CF, [0x8B'u8, 0xA1, 0x00, 0xAA, 0x00, 0x47, 0x6D, 0xA6])
  IID_IOmNavigator* = DEFINE_GUID(0xFECEAAA5'u32, 0x8405, 0x11CF, [0x8B'u8, 0xA1, 0x00, 0xAA, 0x00, 0x47, 0x6D, 0xA6])
  IID_IOpaqueDataInfo* = DEFINE_GUID(0x000001A9'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IOpenRowset* = DEFINE_GUID(0x0C733A69'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IOplockStorage* = DEFINE_GUID(0x8D19C834'u32, 0x8879, 0x11D1, [0x83'u8, 0xE9, 0x00, 0xC0, 0x4F, 0xC2, 0xC6, 0xD4])
  IID_IOpsProfileSimple* = DEFINE_GUID(0x7DD1362C'u32, 0x28B6, 0x11D2, [0xBC'u8, 0xA7, 0x00, 0xC0, 0x4F, 0xD9, 0x29, 0xDB])
  IID_IOptionArray* = DEFINE_GUID(0x22B6D492'u32, 0x0F88, 0x11D1, [0xBA'u8, 0x19, 0x00, 0xC0, 0x4F, 0xD9, 0x12, 0xD0])
  IID_IOverlappedCompletion* = DEFINE_GUID(0x521A28F0'u32, 0xE40B, 0x11CE, [0xB2'u8, 0xC9, 0x00, 0xAA, 0x00, 0x68, 0x09, 0x37])
  IID_IOverlappedStream* = DEFINE_GUID(0x49384070'u32, 0xE40A, 0x11CE, [0xB2'u8, 0xC9, 0x00, 0xAA, 0x00, 0x68, 0x09, 0x37])
  IID_IParentRowset* = DEFINE_GUID(0x0C733AAA'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IParseDisplayName* = DEFINE_GUID(0x0000011A'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IParser* = DEFINE_GUID(0x186442B0'u32, 0x472E, 0x11D1, [0x89'u8, 0x52, 0x00, 0xC0, 0x4F, 0xD6, 0x11, 0xD7])
  IID_IParserSession* = DEFINE_GUID(0x186442B1'u32, 0x472E, 0x11D1, [0x89'u8, 0x52, 0x00, 0xC0, 0x4F, 0xD6, 0x11, 0xD7])
  IID_IParserTreeProperties* = DEFINE_GUID(0x186442B2'u32, 0x472E, 0x11D1, [0x89'u8, 0x52, 0x00, 0xC0, 0x4F, 0xD6, 0x11, 0xD7])
  IID_IParserVerify* = DEFINE_GUID(0x186442B3'u32, 0x472E, 0x11D1, [0x89'u8, 0x52, 0x00, 0xC0, 0x4F, 0xD6, 0x11, 0xD7])
  IID_IPassportClientServices* = DEFINE_GUID(0xB30F7305'u32, 0x5967, 0x45D1, [0xB7'u8, 0xBC, 0xD6, 0xEB, 0x71, 0x63, 0xD7, 0x70])
  IID_IPeerFactory* = DEFINE_GUID(0x6663F9D3'u32, 0xB482, 0x11D1, [0x89'u8, 0xC6, 0x00, 0xC0, 0x4F, 0xB6, 0xBF, 0xC4])
  IID_IPendingProxyConnection* = DEFINE_GUID(0xB68E5043'u32, 0x3E3D, 0x4CC2, [0xB9'u8, 0xC1, 0x5F, 0x8F, 0x88, 0xFE, 0xE8, 0x1C])
  IID_IPerPropertyBrowsing* = DEFINE_GUID(0x376BD3AA'u32, 0x3845, 0x101B, [0x84'u8, 0xED, 0x08, 0x00, 0x2B, 0x2E, 0xC7, 0x13])
  IID_IPerPropertyBrowsing2* = DEFINE_GUID(0x51973C54'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IPersist* = DEFINE_GUID(0x0000010C'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IPersistentDataChannel* = DEFINE_GUID(0xA180E934'u32, 0xD92A, 0x415D, [0x91'u8, 0x44, 0x75, 0x9F, 0x80, 0x54, 0xE8, 0xF6])
  IID_IPersistFile* = DEFINE_GUID(0x0000010B'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IPersistFolder* = DEFINE_GUID(0x000214EA'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IPersistFolder2* = DEFINE_GUID(0x1AC3D9F0'u32, 0x175C, 0x11D1, [0x95'u8, 0xBE, 0x00, 0x60, 0x97, 0x97, 0xEA, 0x4F])
  IID_IPersistFolder3* = DEFINE_GUID(0xCEF04FDF'u32, 0xFE72, 0x11D2, [0x87'u8, 0xA5, 0x00, 0xC0, 0x4F, 0x68, 0x37, 0xCF])
  IID_IPersistHistory* = DEFINE_GUID(0x91A565C1'u32, 0xE38F, 0x11D0, [0x94'u8, 0xBF, 0x00, 0xA0, 0xC9, 0x05, 0x5C, 0xBF])
  IID_IPersistIDList* = DEFINE_GUID(0x1079ACFC'u32, 0x29BD, 0x11D3, [0x8E'u8, 0x0D, 0x00, 0xC0, 0x4F, 0x68, 0x37, 0xD5])
  IID_IPersistMemory* = DEFINE_GUID(0xBD1AE5E0'u32, 0xA6AE, 0x11CE, [0xBD'u8, 0x37, 0x50, 0x42, 0x00, 0xC1, 0x00, 0x00])
  IID_IPersistMoniker* = DEFINE_GUID(0x79EAC9C9'u32, 0xBAF9, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IPersistNetConnection* = DEFINE_GUID(0xFAEDCF59'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_IPersistPropertyBag* = DEFINE_GUID(0x37D84F60'u32, 0x42CB, 0x11CE, [0x81'u8, 0x35, 0x00, 0xAA, 0x00, 0x4B, 0xB8, 0x51])
  IID_IPersistPropertyBag2* = DEFINE_GUID(0x22F55881'u32, 0x280B, 0x11D0, [0xA8'u8, 0xA9, 0x00, 0xA0, 0xC9, 0x0C, 0x20, 0x04])
  IID_IPersistQuery* = DEFINE_GUID(0x1A3114B8'u32, 0xA62E, 0x11D0, [0xA6'u8, 0xC5, 0x00, 0xA0, 0xC9, 0x06, 0xAF, 0x45])
  IID_IPersistStorage* = DEFINE_GUID(0x0000010A'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IPersistStream* = DEFINE_GUID(0x00000109'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IPersistStreamInit* = DEFINE_GUID(0x7FD52380'u32, 0x4E07, 0x101B, [0xAE'u8, 0x2D, 0x08, 0x00, 0x2B, 0x2E, 0xC7, 0x13])
  IID_IPhraseSink* = DEFINE_GUID(0xCC906FF0'u32, 0xC058, 0x101A, [0xB5'u8, 0x54, 0x08, 0x00, 0x2B, 0x33, 0xB0, 0xE6])
  IID_IPicture* = DEFINE_GUID(0x7BF80980'u32, 0xBF32, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  IID_IPictureDisp* = DEFINE_GUID(0x7BF80981'u32, 0xBF32, 0x101A, [0x8B'u8, 0xBB, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  IID_IPipeByte* = DEFINE_GUID(0xDB2F3ACA'u32, 0x2F86, 0x11D1, [0x8E'u8, 0x04, 0x00, 0xC0, 0x4F, 0xB9, 0x98, 0x9A])
  IID_IPipeDouble* = DEFINE_GUID(0xDB2F3ACE'u32, 0x2F86, 0x11D1, [0x8E'u8, 0x04, 0x00, 0xC0, 0x4F, 0xB9, 0x98, 0x9A])
  IID_IPipeLong* = DEFINE_GUID(0xDB2F3ACC'u32, 0x2F86, 0x11D1, [0x8E'u8, 0x04, 0x00, 0xC0, 0x4F, 0xB9, 0x98, 0x9A])
  IID_IPointerInactive* = DEFINE_GUID(0x55980BA0'u32, 0x35AA, 0x11CF, [0xB6'u8, 0x71, 0x00, 0xAA, 0x00, 0x4C, 0xD6, 0xD8])
  IID_IPrimaryControlChannel* = DEFINE_GUID(0x1A2E8B62'u32, 0x9012, 0x4BE6, [0x84'u8, 0xAE, 0x32, 0xBD, 0x66, 0xBA, 0x65, 0x7A])
  IID_IPrint* = DEFINE_GUID(0xB722BCC9'u32, 0x4E68, 0x101B, [0xA2'u8, 0xBC, 0x00, 0xAA, 0x00, 0x40, 0x47, 0x70])
  IID_IPrintDialogCallback* = DEFINE_GUID(0x5852A2C3'u32, 0x6530, 0x11D1, [0xB6'u8, 0xA3, 0x00, 0x00, 0xF8, 0x75, 0x7B, 0xF9])
  IID_IPrintDialogServices* = DEFINE_GUID(0x509AAEDA'u32, 0x5639, 0x11D1, [0xB6'u8, 0xA1, 0x00, 0x00, 0xF8, 0x75, 0x7B, 0xF9])
  IID_IPrivacyServices* = DEFINE_GUID(0x3050F84B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IPrivateDispatch* = DEFINE_GUID(0x86AB4BBE'u32, 0x65F6, 0x11D1, [0x8C'u8, 0x13, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  IID_IPrivateUnknown* = DEFINE_GUID(0x89126BAB'u32, 0x6EAD, 0x11D1, [0x8C'u8, 0x18, 0x00, 0xC0, 0x4F, 0xD8, 0xD5, 0x03])
  IID_IPrivSyncMgrSynchronizeInvoke* = DEFINE_GUID(0x6295DF2E'u32, 0x35EE, 0x11D1, [0x87'u8, 0x07, 0x00, 0xC0, 0x4F, 0xD9, 0x33, 0x27])
  IID_IProcessDebugManager* = DEFINE_GUID(0x51973C2F'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IProcessDebugManager32* = DEFINE_GUID(0x51973C2F'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IProcessDebugManager64* = DEFINE_GUID(0x56B9FC1C'u32, 0x63A9, 0x4CC1, [0xAC'u8, 0x21, 0x08, 0x7D, 0x69, 0xA1, 0x7F, 0xAB])
  IID_IProcessInitControl* = DEFINE_GUID(0x72380D55'u32, 0x8D2B, 0x43A3, [0x85'u8, 0x13, 0x2B, 0x6E, 0xF3, 0x14, 0x34, 0xE9])
  IID_IProfferService* = DEFINE_GUID(0xCB728B20'u32, 0xF786, 0x11CE, [0x92'u8, 0xAD, 0x00, 0xAA, 0x00, 0xA7, 0x4C, 0xD0])
  IID_IProgressDialog* = DEFINE_GUID(0xEBBC7C04'u32, 0x315E, 0x11D2, [0xB6'u8, 0x2F, 0x00, 0x60, 0x97, 0xDF, 0x5B, 0xD4])
  IID_IProgressNotify* = DEFINE_GUID(0xA9D758A0'u32, 0x4617, 0x11CF, [0x95'u8, 0xFC, 0x00, 0xAA, 0x00, 0x68, 0x0D, 0xB4])
  IID_IProgSink* = DEFINE_GUID(0x3050F371'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IPropertyBag* = DEFINE_GUID(0x55272A00'u32, 0x42CB, 0x11CE, [0x81'u8, 0x35, 0x00, 0xAA, 0x00, 0x4B, 0xB8, 0x51])
  IID_IPropertyBag2* = DEFINE_GUID(0x22F55882'u32, 0x280B, 0x11D0, [0xA8'u8, 0xA9, 0x00, 0xA0, 0xC9, 0x0C, 0x20, 0x04])
  IID_IPropertyBagEx* = DEFINE_GUID(0x20011801'u32, 0x5DE6, 0x11D1, [0x8E'u8, 0x38, 0x00, 0xC0, 0x4F, 0xB9, 0x38, 0x6D])
  IID_IPropertyFrame* = DEFINE_GUID(0xB196B28A'u32, 0xBAB4, 0x101A, [0xB6'u8, 0x9C, 0x00, 0xAA, 0x00, 0x34, 0x1D, 0x07])
  IID_IPropertyMap* = DEFINE_GUID(0xC733E4A2'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  IID_IPropertyMapper* = DEFINE_GUID(0xB324B226'u32, 0x41A0, 0x11D0, [0x8C'u8, 0x91, 0x00, 0x20, 0xAF, 0x1D, 0x74, 0x0E])
  IID_IPropertyNotifySink* = DEFINE_GUID(0x9BFBBC02'u32, 0xEFF1, 0x101A, [0x84'u8, 0xED, 0x00, 0xAA, 0x00, 0x34, 0x1D, 0x07])
  IID_IPropertyPage* = DEFINE_GUID(0xB196B28D'u32, 0xBAB4, 0x101A, [0xB6'u8, 0x9C, 0x00, 0xAA, 0x00, 0x34, 0x1D, 0x07])
  IID_IPropertyPage2* = DEFINE_GUID(0x01E44665'u32, 0x24AC, 0x101B, [0x84'u8, 0xED, 0x08, 0x00, 0x2B, 0x2E, 0xC7, 0x13])
  IID_IPropertyPageSite* = DEFINE_GUID(0xB196B28C'u32, 0xBAB4, 0x101A, [0xB6'u8, 0x9C, 0x00, 0xAA, 0x00, 0x34, 0x1D, 0x07])
  IID_IPropertySetContainer* = DEFINE_GUID(0xB4FFAE60'u32, 0xA7CA, 0x11CD, [0xB5'u8, 0x8B, 0x00, 0x00, 0x6B, 0x82, 0x91, 0x56])
  IID_IPropertySetStorage* = DEFINE_GUID(0x0000013A'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IPropertyStorage* = DEFINE_GUID(0x00000138'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IPropertyUI* = DEFINE_GUID(0x757A7D9F'u32, 0x919A, 0x4118, [0x99'u8, 0xD7, 0xDB, 0xB2, 0x08, 0xC8, 0xCC, 0x66])
  IID_IPropSheetPage* = DEFINE_GUID(0x000214F6'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IProvideClassInfo* = DEFINE_GUID(0xB196B283'u32, 0xBAB4, 0x101A, [0xB6'u8, 0x9C, 0x00, 0xAA, 0x00, 0x34, 0x1D, 0x07])
  IID_IProvideClassInfo2* = DEFINE_GUID(0xA6BC3AC0'u32, 0xDBAA, 0x11CE, [0x9D'u8, 0xE3, 0x00, 0xAA, 0x00, 0x4B, 0xB8, 0x51])
  IID_IProvideExpressionContexts* = DEFINE_GUID(0x51973C41'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IProvideMoniker* = DEFINE_GUID(0x0C733A4D'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IProvideMultipleClassInfo* = DEFINE_GUID(0xA7ABA9C1'u32, 0x8983, 0x11CF, [0x8F'u8, 0x20, 0x00, 0x80, 0x5F, 0x2C, 0xD0, 0x64])
  IID_IProxy* = DEFINE_GUID(0x00000027'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IProxyManager* = DEFINE_GUID(0x00000008'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IPSFactory* = DEFINE_GUID(0x00000009'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IPSFactoryBuffer* = DEFINE_GUID(0xD5F569D0'u32, 0x593B, 0x101A, [0xB5'u8, 0x69, 0x08, 0x00, 0x2B, 0x2D, 0xBF, 0x7A])
  IID_IPublishedApp* = DEFINE_GUID(0x1BC752E0'u32, 0x9046, 0x11D1, [0xB8'u8, 0xB3, 0x00, 0x60, 0x08, 0x05, 0x93, 0x82])
  IID_IPublishingWizard* = DEFINE_GUID(0xAA9198BB'u32, 0xCCEC, 0x472D, [0xBE'u8, 0xED, 0x19, 0xA4, 0xF6, 0x73, 0x3F, 0x7A])
  IID_IQualityControl* = DEFINE_GUID(0x6BC096AB'u32, 0x0CE6, 0x11D1, [0xBA'u8, 0xAE, 0x00, 0xC0, 0x4F, 0xC2, 0xE2, 0x0D])
  IID_IQuery* = DEFINE_GUID(0x0C733A51'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IQueryAssociations* = DEFINE_GUID(0xC46CA590'u32, 0x3C3F, 0x11D2, [0xBE'u8, 0xE6, 0x00, 0x00, 0xF8, 0x05, 0xCA, 0x57])
  IID_IQueryCancelAutoPlay* = DEFINE_GUID(0xDDEFE873'u32, 0x6997, 0x4E68, [0xBE'u8, 0x26, 0x39, 0xB6, 0x33, 0xAD, 0xBE, 0x12])
  IID_IQueryContinue* = DEFINE_GUID(0x7307055C'u32, 0xB24A, 0x486B, [0x9F'u8, 0x25, 0x16, 0x3E, 0x59, 0x7A, 0x28, 0xA9])
  IID_IQueryForm* = DEFINE_GUID(0x8CFCEE30'u32, 0x39BD, 0x11D0, [0xB8'u8, 0xD1, 0x00, 0xA0, 0x24, 0xAB, 0x2D, 0xBB])
  IID_IQueryFrame* = DEFINE_GUID(0x7E8C7C20'u32, 0x7C9D, 0x11D0, [0x91'u8, 0x3F, 0x00, 0xAA, 0x00, 0xC1, 0x6E, 0x65])
  IID_IQueryHandler* = DEFINE_GUID(0xA60CC73F'u32, 0xE0FC, 0x11D0, [0x97'u8, 0x50, 0x00, 0xA0, 0xC9, 0x06, 0xAF, 0x45])
  IID_IQueryInfo* = DEFINE_GUID(0x00021500'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IQuickActivate* = DEFINE_GUID(0xCF51ED10'u32, 0x62FE, 0x11CF, [0xBF'u8, 0x86, 0x00, 0xA0, 0xC9, 0x03, 0x48, 0x36])
  IID_IRadioButton* = DEFINE_GUID(0x3050F69B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IRatingNotification* = DEFINE_GUID(0x639447BD'u32, 0xB2D3, 0x44B9, [0x9F'u8, 0xB0, 0x51, 0x0F, 0x23, 0xCB, 0x45, 0xE4])
  IID_IReadData* = DEFINE_GUID(0x0C733A6A'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IReadEvents* = DEFINE_GUID(0xF64AEFDE'u32, 0x3376, 0x11D1, [0xBE'u8, 0x5B, 0x00, 0xC0, 0x4F, 0xC9, 0xE2, 0xBB])
  IID_IRecalcEngine* = DEFINE_GUID(0x3050F496'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IRecalcHost* = DEFINE_GUID(0x3050F497'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IRecalcHostDebug* = DEFINE_GUID(0x3050F5F7'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IRecalcProperty* = DEFINE_GUID(0x3050F5D6'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IReconcilableObject* = DEFINE_GUID(0x99180162'u32, 0xDA16, 0x101A, [0x93'u8, 0x5C, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_IReconcileInitiator* = DEFINE_GUID(0x99180161'u32, 0xDA16, 0x101A, [0x93'u8, 0x5C, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_IRecordInfo* = DEFINE_GUID(0x0000002F'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IRedbookDiscMaster* = DEFINE_GUID(0xE3BC42CD'u32, 0x4E5C, 0x11D3, [0x91'u8, 0x44, 0x00, 0x10, 0x4B, 0xA1, 0x1C, 0x5E])
  IID_IReferenceClock* = DEFINE_GUID(0x56A86897'u32, 0x0AD4, 0x11CE, [0xB0'u8, 0x3A, 0x00, 0x20, 0xAF, 0x0B, 0xA7, 0x70])
  IID_IRegisterProvider* = DEFINE_GUID(0x0C733AB9'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRegisterVirusScanEngine* = DEFINE_GUID(0x0825E060'u32, 0xB961, 0x11CF, [0xAA'u8, 0xFA, 0x00, 0xAA, 0x00, 0xB6, 0x01, 0x5C])
  IID_IReleaseMarshalBuffers* = DEFINE_GUID(0xEB0CB9E8'u32, 0x7996, 0x11D2, [0x87'u8, 0x2E, 0x00, 0x00, 0xF8, 0x08, 0x08, 0x59])
  IID_IRemoteCallBack* = DEFINE_GUID(0x8947C648'u32, 0x3833, 0x11D1, [0x86'u8, 0x82, 0x00, 0xC0, 0x4F, 0xBF, 0xE1, 0x71])
  IID_IRemoteComputer* = DEFINE_GUID(0x000214FE'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IRemoteDebugApplication* = DEFINE_GUID(0x51973C30'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IRemoteDebugApplicationEvents* = DEFINE_GUID(0x51973C33'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IRemoteDebugApplicationEx* = DEFINE_GUID(0x51973C01'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IRemoteDebugApplicationThread* = DEFINE_GUID(0x51973C37'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_IRemoteDebugApplicationThreadEx* = DEFINE_GUID(0xB9B32B0C'u32, 0x9147, 0x11D1, [0x94'u8, 0xEA, 0x00, 0xC0, 0x4F, 0xA3, 0x02, 0xA1])
  IID_IRemoteDelaydC* = DEFINE_GUID(0x394540A0'u32, 0x6FCF, 0x11D0, [0xAC'u8, 0xE0, 0x00, 0x00, 0xF8, 0x01, 0x14, 0xD3])
  IID_IRemoteESP* = DEFINE_GUID(0xE99A04AB'u32, 0xAB95, 0x11D0, [0xBE'u8, 0x96, 0x00, 0xA0, 0xC9, 0x49, 0x89, 0xDE])
  IID_IRemoteFinder* = DEFINE_GUID(0x944AD532'u32, 0xB09D, 0x11CE, [0xB5'u8, 0x9C, 0x00, 0xAA, 0x00, 0x6C, 0xB3, 0x7D])
  IID_IRemoteStats* = DEFINE_GUID(0x944AD531'u32, 0xB09D, 0x11CE, [0xB5'u8, 0x9C, 0x00, 0xAA, 0x00, 0x6C, 0xB3, 0x7D])
  IID_IRequest* = DEFINE_GUID(0x6BC096A7'u32, 0x0CE6, 0x11D1, [0xBA'u8, 0xAE, 0x00, 0xC0, 0x4F, 0xC2, 0xE2, 0x0D])
  IID_IRequestHandler* = DEFINE_GUID(0x6BC096AA'u32, 0x0CE6, 0x11D1, [0xBA'u8, 0xAE, 0x00, 0xC0, 0x4F, 0xC2, 0xE2, 0x0D])
  IID_IRequestSource* = DEFINE_GUID(0x6BC096A9'u32, 0x0CE6, 0x11D1, [0xBA'u8, 0xAE, 0x00, 0xC0, 0x4F, 0xC2, 0xE2, 0x0D])
  IID_IRequestState* = DEFINE_GUID(0x6BC096BA'u32, 0x0CE6, 0x11D1, [0xBA'u8, 0xAE, 0x00, 0xC0, 0x4F, 0xC2, 0xE2, 0x0D])
  IID_IResolveShellLink* = DEFINE_GUID(0x5CD52983'u32, 0x9449, 0x11D2, [0x96'u8, 0x3A, 0x00, 0xC0, 0x4F, 0x79, 0xAD, 0xF0])
  IID_IRichEditOle* = DEFINE_GUID(0x00020D00'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IRichEditOleCallback* = DEFINE_GUID(0x00020D03'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IRootStorage* = DEFINE_GUID(0x00000012'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IROTData* = DEFINE_GUID(0xF29F6BC0'u32, 0x5021, 0x11CE, [0xAA'u8, 0x15, 0x00, 0x00, 0x69, 0x01, 0x29, 0x3F])
  IID_IRow* = DEFINE_GUID(0x0C733AB4'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowChange* = DEFINE_GUID(0x0C733AB5'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowInfo* = DEFINE_GUID(0x0C733AC1'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowPosition* = DEFINE_GUID(0x0C733A94'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowPositionChange* = DEFINE_GUID(0x0997A571'u32, 0x126E, 0x11D0, [0x9F'u8, 0x8A, 0x00, 0xA0, 0xC9, 0xA0, 0x63, 0x1E])
  IID_IRowSchemaChange* = DEFINE_GUID(0x0C733AAE'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowset* = DEFINE_GUID(0x0C733A7C'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetAsynch* = DEFINE_GUID(0x0C733A0F'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetBookmark* = DEFINE_GUID(0x0C733AC2'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetChange* = DEFINE_GUID(0x0C733A05'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetChapterMember* = DEFINE_GUID(0x0C733AA8'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetCopyRows* = DEFINE_GUID(0x0C733A6B'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetCurrentIndex* = DEFINE_GUID(0x0C733ABD'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetExactScroll* = DEFINE_GUID(0x0C733A7F'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetFind* = DEFINE_GUID(0x0C733A9D'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetIdentity* = DEFINE_GUID(0x0C733A09'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetIndex* = DEFINE_GUID(0x0C733A82'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetInfo* = DEFINE_GUID(0x0C733A55'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetKeys* = DEFINE_GUID(0x0C733A12'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetLocate* = DEFINE_GUID(0x0C733A7D'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetNewRowAfter* = DEFINE_GUID(0x0C733A71'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetNextRowset* = DEFINE_GUID(0x0C733A72'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetNotify* = DEFINE_GUID(0x0C733A83'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetQueryStatus* = DEFINE_GUID(0xA7AC77ED'u32, 0xF8D7, 0x11CE, [0xA7'u8, 0x98, 0x00, 0x20, 0xF8, 0x00, 0x80, 0x24])
  IID_IRowsetRefresh* = DEFINE_GUID(0x0C733AA9'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetResynch* = DEFINE_GUID(0x0C733A84'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetScroll* = DEFINE_GUID(0x0C733A7E'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetUpdate* = DEFINE_GUID(0x0C733A6D'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetView* = DEFINE_GUID(0x0C733A99'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetWatchAll* = DEFINE_GUID(0x0C733A73'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetWatchNotify* = DEFINE_GUID(0x0C733A44'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetWatchRegion* = DEFINE_GUID(0x0C733A45'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRowsetWithParameters* = DEFINE_GUID(0x0C733A6E'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IRpcChannel* = DEFINE_GUID(0x00000004'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IRpcChannelBuffer* = DEFINE_GUID(0xD5F56B60'u32, 0x593B, 0x101A, [0xB5'u8, 0x69, 0x08, 0x00, 0x2B, 0x2D, 0xBF, 0x7A])
  IID_IRpcChannelBuffer2* = DEFINE_GUID(0x594F31D0'u32, 0x7F19, 0x11D0, [0xB1'u8, 0x94, 0x00, 0xA0, 0xC9, 0x0D, 0xC8, 0xBF])
  IID_IRpcChannelBuffer3* = DEFINE_GUID(0x25B15600'u32, 0x0115, 0x11D0, [0xBF'u8, 0x0D, 0x00, 0xAA, 0x00, 0xB8, 0xDF, 0xD2])
  IID_IRpcHelper* = DEFINE_GUID(0x00000149'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IRpcOptions* = DEFINE_GUID(0x00000144'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IRpcProxy* = DEFINE_GUID(0x00000007'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IRpcProxyBuffer* = DEFINE_GUID(0xD5F56A34'u32, 0x593B, 0x101A, [0xB5'u8, 0x69, 0x08, 0x00, 0x2B, 0x2D, 0xBF, 0x7A])
  IID_IRpcStub* = DEFINE_GUID(0x00000005'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IRpcStubBuffer* = DEFINE_GUID(0xD5F56AFC'u32, 0x593B, 0x101A, [0xB5'u8, 0x69, 0x08, 0x00, 0x2B, 0x2D, 0xBF, 0x7A])
  IID_IRpcSyntaxNegotiate* = DEFINE_GUID(0x58A08519'u32, 0x24C8, 0x4935, [0xB4'u8, 0x82, 0x3F, 0xD8, 0x23, 0x33, 0x3A, 0x4F])
  IID_IRTC* = DEFINE_GUID(0x4811EA40'u32, 0xB582, 0x11CE, [0xB5'u8, 0xAF, 0x00, 0xAA, 0x00, 0x6C, 0xB3, 0x7D])
  IID_IRTCBuddy* = DEFINE_GUID(0xFCB136C8'u32, 0x7B90, 0x4E0C, [0xBE'u8, 0xFE, 0x56, 0xED, 0xF0, 0xBA, 0x6F, 0x1C])
  IID_IRTCBuddyEvent* = DEFINE_GUID(0xF36D755D'u32, 0x17E6, 0x404E, [0x95'u8, 0x4F, 0x0F, 0xC0, 0x75, 0x74, 0xC7, 0x8D])
  IID_IRTCClient* = DEFINE_GUID(0x07829E45'u32, 0x9A34, 0x408E, [0xA0'u8, 0x11, 0xBD, 0xDF, 0x13, 0x48, 0x7C, 0xD1])
  IID_IRTCClientEvent* = DEFINE_GUID(0x2B493B7A'u32, 0x3CBA, 0x4170, [0x9C'u8, 0x8B, 0x76, 0xA9, 0xDA, 0xCD, 0xD6, 0x44])
  IID_IRTCClientPresence* = DEFINE_GUID(0x11C3CBCC'u32, 0x0744, 0x42D1, [0x96'u8, 0x8A, 0x51, 0xAA, 0x1B, 0xB2, 0x74, 0xC6])
  IID_IRTCClientProvisioning* = DEFINE_GUID(0xB9F5CF06'u32, 0x65B9, 0x4A80, [0xA0'u8, 0xE6, 0x73, 0xCA, 0xE3, 0xEF, 0x38, 0x22])
  IID_IRTCCollection* = DEFINE_GUID(0xEC7C8096'u32, 0xB918, 0x4044, [0x94'u8, 0xF1, 0xE4, 0xFB, 0xA0, 0x36, 0x1D, 0x5C])
  IID_IRTCEnumBuddies* = DEFINE_GUID(0xF7296917'u32, 0x5569, 0x4B3B, [0xB3'u8, 0xAF, 0x98, 0xD1, 0x14, 0x4B, 0x2B, 0x87])
  IID_IRTCEnumParticipants* = DEFINE_GUID(0xFCD56F29'u32, 0x4A4F, 0x41B2, [0xBA'u8, 0x5C, 0xF5, 0xBC, 0xCC, 0x06, 0x0B, 0xF6])
  IID_IRTCEnumProfiles* = DEFINE_GUID(0x29B7C41C'u32, 0xED82, 0x4BCA, [0x84'u8, 0xAD, 0x39, 0xD5, 0x10, 0x1B, 0x58, 0xE3])
  IID_IRTCEnumWatchers* = DEFINE_GUID(0xA87D55D7'u32, 0xDB74, 0x4ED1, [0x9C'u8, 0xA4, 0x77, 0xA0, 0xE4, 0x1B, 0x41, 0x3E])
  IID_IRTCEventNotification* = DEFINE_GUID(0x13FA24C7'u32, 0x5748, 0x4B21, [0x91'u8, 0xF5, 0x73, 0x97, 0x60, 0x9C, 0xE7, 0x47])
  IID_IRTCIntensityEvent* = DEFINE_GUID(0x4C23BF51'u32, 0x390C, 0x4992, [0xA4'u8, 0x1D, 0x41, 0xEE, 0xC0, 0x5B, 0x2A, 0x4B])
  IID_IRTCMediaEvent* = DEFINE_GUID(0x099944FB'u32, 0xBCDA, 0x453E, [0x8C'u8, 0x41, 0xE1, 0x3D, 0xA2, 0xAD, 0xF7, 0xF3])
  IID_IRTCMessagingEvent* = DEFINE_GUID(0xD3609541'u32, 0x1B29, 0x4DE5, [0xA4'u8, 0xAD, 0x5A, 0xEB, 0xAF, 0x31, 0x95, 0x12])
  IID_IRTCParticipant* = DEFINE_GUID(0xAE86ADD5'u32, 0x26B1, 0x4414, [0xAF'u8, 0x1D, 0xB9, 0x4C, 0xD9, 0x38, 0xD7, 0x39])
  IID_IRTCParticipantStateChangeEvent* = DEFINE_GUID(0x09BCB597'u32, 0xF0FA, 0x48F9, [0xB4'u8, 0x20, 0x46, 0x8C, 0xEA, 0x7F, 0xDE, 0x04])
  IID_IRTCPresenceContact* = DEFINE_GUID(0x8B22F92C'u32, 0xCD90, 0x42DB, [0xA7'u8, 0x33, 0x21, 0x22, 0x05, 0xC3, 0xE3, 0xDF])
  IID_IRTCProfile* = DEFINE_GUID(0xD07ECA9E'u32, 0x4062, 0x4DD4, [0x9E'u8, 0x7D, 0x72, 0x2A, 0x49, 0xBA, 0x73, 0x03])
  IID_IRTCProfileEvent* = DEFINE_GUID(0xD6D5AB3B'u32, 0x770E, 0x43E8, [0x80'u8, 0x0A, 0x79, 0xB0, 0x62, 0x39, 0x5F, 0xCA])
  IID_IRTCRegistrationStateChangeEvent* = DEFINE_GUID(0x62D0991B'u32, 0x50AB, 0x4F02, [0xB9'u8, 0x48, 0xCA, 0x94, 0xF2, 0x6F, 0x8F, 0x95])
  IID_IRTCSession* = DEFINE_GUID(0x387C8086'u32, 0x99BE, 0x42FB, [0x99'u8, 0x73, 0x7C, 0x0F, 0xC0, 0xCA, 0x9F, 0xA8])
  IID_IRTCSessionOperationCompleteEven* = DEFINE_GUID(0xA6BFF4C0'u32, 0xF7C8, 0x4D3C, [0x9A'u8, 0x41, 0x35, 0x50, 0xF7, 0x8A, 0x95, 0xB0])
  IID_IRTCSessionStateChangeEvent* = DEFINE_GUID(0xB5BAD703'u32, 0x5952, 0x48B3, [0x93'u8, 0x21, 0x7F, 0x45, 0x00, 0x52, 0x15, 0x06])
  IID_IRTCWatcher* = DEFINE_GUID(0xC7CEDAD8'u32, 0x346B, 0x4D1B, [0xAC'u8, 0x02, 0xA2, 0x08, 0x8D, 0xF9, 0xBE, 0x4F])
  IID_IRTCWatcherEvent* = DEFINE_GUID(0xF30D7261'u32, 0x587A, 0x424F, [0x82'u8, 0x2C, 0x31, 0x27, 0x88, 0xF4, 0x35, 0x48])
  IID_IRunnableObject* = DEFINE_GUID(0x00000126'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IRunnableTask* = DEFINE_GUID(0x85788D00'u32, 0x6807, 0x11D0, [0xB8'u8, 0x10, 0x00, 0xC0, 0x4F, 0xD7, 0x06, 0xEC])
  IID_IRunningObjectTable* = DEFINE_GUID(0x00000010'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IScheduleGroup* = DEFINE_GUID(0xC733E4A6'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  IID_IScopedOperations* = DEFINE_GUID(0x0C733AB0'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IScriptEntry* = DEFINE_GUID(0x0AEE2A95'u32, 0xBCBB, 0x11D0, [0x8C'u8, 0x72, 0x00, 0xC0, 0x4F, 0xC2, 0xB0, 0x85])
  IID_IScriptErrorList* = DEFINE_GUID(0xF3470F24'u32, 0x15FD, 0x11D2, [0xBB'u8, 0x2E, 0x00, 0x80, 0x5F, 0xF7, 0xEF, 0xCA])
  IID_IScriptNode* = DEFINE_GUID(0x0AEE2A94'u32, 0xBCBB, 0x11D0, [0x8C'u8, 0x72, 0x00, 0xC0, 0x4F, 0xC2, 0xB0, 0x85])
  IID_IScriptScriptlet* = DEFINE_GUID(0x0AEE2A96'u32, 0xBCBB, 0x11D0, [0x8C'u8, 0x72, 0x00, 0xC0, 0x4F, 0xC2, 0xB0, 0x85])
  IID_IScrollBar* = DEFINE_GUID(0x3050F689'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ISdo* = DEFINE_GUID(0x56BC53DE'u32, 0x96DB, 0x11D1, [0xBF'u8, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
  IID_ISdoCollection* = DEFINE_GUID(0x56BC53E2'u32, 0x96DB, 0x11D1, [0xBF'u8, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
  IID_ISdoDictionaryOld* = DEFINE_GUID(0xD432E5F4'u32, 0x53D8, 0x11D2, [0x9A'u8, 0x3A, 0x00, 0xC0, 0x4F, 0xB9, 0x98, 0xAC])
  IID_ISdoMachine* = DEFINE_GUID(0x479F6E75'u32, 0x49A2, 0x11D2, [0x8E'u8, 0xCA, 0x00, 0xC0, 0x4F, 0xC2, 0xF5, 0x19])
  IID_ISdoServiceControl* = DEFINE_GUID(0x479F6E74'u32, 0x49A2, 0x11D2, [0x8E'u8, 0xCA, 0x00, 0xC0, 0x4F, 0xC2, 0xF5, 0x19])
  IID_ISearch* = DEFINE_GUID(0xBA9239A4'u32, 0x3DD5, 0x11D2, [0xBF'u8, 0x8B, 0x00, 0xC0, 0x4F, 0xB9, 0x36, 0x61])
  IID_ISearchAssistantOC* = DEFINE_GUID(0x72423E8F'u32, 0x8011, 0x11D2, [0xBE'u8, 0x79, 0x00, 0xA0, 0xC9, 0xA8, 0x3D, 0xA1])
  IID_ISearchAssistantOC2* = DEFINE_GUID(0x72423E8F'u32, 0x8011, 0x11D2, [0xBE'u8, 0x79, 0x00, 0xA0, 0xC9, 0xA8, 0x3D, 0xA2])
  IID_ISearchAssistantOC3* = DEFINE_GUID(0x72423E8F'u32, 0x8011, 0x11D2, [0xBE'u8, 0x79, 0x00, 0xA0, 0xC9, 0xA8, 0x3D, 0xA3])
  IID_ISearchCommandExt* = DEFINE_GUID(0x1D2EFD50'u32, 0x75CE, 0x11D1, [0xB7'u8, 0x5A, 0x00, 0xA0, 0xC9, 0x05, 0x64, 0xFE])
  IID_ISearchContext* = DEFINE_GUID(0x09F656A2'u32, 0x41AF, 0x480C, [0x88'u8, 0xF7, 0x16, 0xCC, 0x0D, 0x16, 0x46, 0x15])
  IID_ISearches* = DEFINE_GUID(0x47C922A2'u32, 0x3DD5, 0x11D2, [0xBF'u8, 0x8B, 0x00, 0xC0, 0x4F, 0xB9, 0x36, 0x61])
  IID_ISearchQueryHits* = DEFINE_GUID(0xED8CE7E0'u32, 0x106C, 0x11CE, [0x84'u8, 0xE2, 0x00, 0xAA, 0x00, 0x4B, 0x99, 0x86])
  IID_ISecondaryControlChannel* = DEFINE_GUID(0xA23F9D10'u32, 0x714C, 0x41FE, [0x84'u8, 0x71, 0xFF, 0xB1, 0x9B, 0xC2, 0x84, 0x54])
  IID_ISecureUrlHost* = DEFINE_GUID(0xC81984C4'u32, 0x74C8, 0x11D2, [0xBA'u8, 0xA9, 0x00, 0xC0, 0x4F, 0xC2, 0x04, 0x0E])
  IID_ISecurityInfo* = DEFINE_GUID(0x0C733AA4'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ISegment* = DEFINE_GUID(0x3050F683'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ISegmentList* = DEFINE_GUID(0x3050F605'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ISegmentListIterator* = DEFINE_GUID(0x3050F692'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ISelectionObject2* = DEFINE_GUID(0x3050F7FC'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ISelectionServices* = DEFINE_GUID(0x3050F684'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ISelectionServicesListener* = DEFINE_GUID(0x3050F699'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ISensLogon* = DEFINE_GUID(0xD597BAB3'u32, 0x5B9F, 0x11D1, [0x8D'u8, 0xD2, 0x00, 0xAA, 0x00, 0x4A, 0xBD, 0x5E])
  IID_ISensLogon2* = DEFINE_GUID(0xD597BAB4'u32, 0x5B9F, 0x11D1, [0x8D'u8, 0xD2, 0x00, 0xAA, 0x00, 0x4A, 0xBD, 0x5E])
  IID_ISensNetwork* = DEFINE_GUID(0xD597BAB1'u32, 0x5B9F, 0x11D1, [0x8D'u8, 0xD2, 0x00, 0xAA, 0x00, 0x4A, 0xBD, 0x5E])
  IID_ISensOnNow* = DEFINE_GUID(0xD597BAB2'u32, 0x5B9F, 0x11D1, [0x8D'u8, 0xD2, 0x00, 0xAA, 0x00, 0x4A, 0xBD, 0x5E])
  IID_ISequenceNumber* = DEFINE_GUID(0x3050F6C1'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ISequentialStream* = DEFINE_GUID(0x0C733A30'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IServerSecurity* = DEFINE_GUID(0x0000013E'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IServiceProvider* = DEFINE_GUID(0x6D5140C1'u32, 0x7436, 0x11CE, [0x80'u8, 0x34, 0x00, 0xAA, 0x00, 0x60, 0x09, 0xFA])
  IID_ISessionProperties* = DEFINE_GUID(0x0C733A85'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ISetNextStatement* = DEFINE_GUID(0x51973C03'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_ISharedAccessBeacon* = DEFINE_GUID(0xFAEDCF6B'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_ISharedAccessBeaconFinder* = DEFINE_GUID(0xFAEDCF67'u32, 0x31FE, 0x11D1, [0xAA'u8, 0xD2, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_IShellApp* = DEFINE_GUID(0xA3E14960'u32, 0x935F, 0x11D1, [0xB8'u8, 0xB8, 0x00, 0x60, 0x08, 0x05, 0x93, 0x82])
  IID_IShellBrowser* = DEFINE_GUID(0x000214E2'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IShellChangeNotify* = DEFINE_GUID(0xD82BE2B1'u32, 0x5764, 0x11D0, [0xA9'u8, 0x6E, 0x00, 0xC0, 0x4F, 0xD7, 0x05, 0xA2])
  IID_IShellCopyHookA* = DEFINE_GUID(0x000214EF'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IShellCopyHookW* = DEFINE_GUID(0x000214FC'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IShellDetails* = DEFINE_GUID(0x000214EC'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IShellDetails3* = DEFINE_GUID(0xD2A105C0'u32, 0x87D5, 0x11D1, [0x83'u8, 0x91, 0x00, 0x00, 0xF8, 0x04, 0x61, 0xCF])
  IID_IShellDispatch* = DEFINE_GUID(0xD8F015C0'u32, 0xC278, 0x11CE, [0xA4'u8, 0x9E, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_IShellDispatch2* = DEFINE_GUID(0xA4C6892C'u32, 0x3BA9, 0x11D2, [0x9D'u8, 0xEA, 0x00, 0xC0, 0x4F, 0xB1, 0x61, 0x62])
  IID_IShellDispatch3* = DEFINE_GUID(0x177160CA'u32, 0xBB5A, 0x411C, [0x84'u8, 0x1D, 0xBD, 0x38, 0xFA, 0xCD, 0xEA, 0xA0])
  IID_IShellDispatch4* = DEFINE_GUID(0xEFD84B2D'u32, 0x4BCF, 0x4298, [0xBE'u8, 0x25, 0xEB, 0x54, 0x2A, 0x59, 0xFB, 0xDA])
  IID_IShellExecuteHookA* = DEFINE_GUID(0x000214F5'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IShellExecuteHookW* = DEFINE_GUID(0x000214FB'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IShellExtInit* = DEFINE_GUID(0x000214E8'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IShellFavoritesNameSpace* = DEFINE_GUID(0x55136804'u32, 0xB2DE, 0x11D1, [0xB9'u8, 0xF2, 0x00, 0xA0, 0xC9, 0x8B, 0xC5, 0x47])
  IID_IShellFolder* = DEFINE_GUID(0x000214E6'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IShellFolder2* = DEFINE_GUID(0x93F2F68C'u32, 0x1D1B, 0x11D3, [0xA3'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x79, 0xAB, 0xD1])
  IID_IShellFolderViewCB* = DEFINE_GUID(0x2047E320'u32, 0xF2A9, 0x11CE, [0xAE'u8, 0x65, 0x08, 0x00, 0x2B, 0x2E, 0x12, 0x62])
  IID_IShellFolderViewDual* = DEFINE_GUID(0xE7A1AF80'u32, 0x4D96, 0x11CF, [0x96'u8, 0x0C, 0x00, 0x80, 0xC7, 0xF4, 0xEE, 0x85])
  IID_IShellFolderViewDual2* = DEFINE_GUID(0x31C147B6'u32, 0x0ADE, 0x4A3C, [0xB5'u8, 0x14, 0xDD, 0xF9, 0x32, 0xEF, 0x6D, 0x17])
  IID_IShellIcon* = DEFINE_GUID(0x000214E5'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IShellIconOverlay* = DEFINE_GUID(0x7D688A70'u32, 0xC613, 0x11D0, [0x99'u8, 0x9B, 0x00, 0xC0, 0x4F, 0xD6, 0x55, 0xE1])
  IID_IShellIconOverlayIdentifier* = DEFINE_GUID(0x0C6C4200'u32, 0xC589, 0x11D0, [0x99'u8, 0x9A, 0x00, 0xC0, 0x4F, 0xD6, 0x55, 0xE1])
  IID_IShellImageData* = DEFINE_GUID(0xBFDEEC12'u32, 0x8040, 0x4403, [0xA5'u8, 0xEA, 0x9E, 0x07, 0xDA, 0xFC, 0xF5, 0x30])
  IID_IShellImageDataAbort* = DEFINE_GUID(0x53FB8E58'u32, 0x50C0, 0x4003, [0xB4'u8, 0xAA, 0x0C, 0x8D, 0xF2, 0x8E, 0x7F, 0x3A])
  IID_IShellImageDataFactory* = DEFINE_GUID(0x9BE8ED5C'u32, 0xEDAB, 0x4D75, [0x90'u8, 0xF3, 0xBD, 0x5B, 0xDB, 0xB2, 0x1C, 0x82])
  IID_IShellLinkA* = DEFINE_GUID(0x000214EE'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IShellLinkDataList* = DEFINE_GUID(0x45E2B4AE'u32, 0xB1C3, 0x11D0, [0xB9'u8, 0x2F, 0x00, 0xA0, 0xC9, 0x03, 0x12, 0xE1])
  IID_IShellLinkDual* = DEFINE_GUID(0x88A05C00'u32, 0xF000, 0x11CE, [0x83'u8, 0x50, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00])
  IID_IShellLinkDual2* = DEFINE_GUID(0x317EE249'u32, 0xF12E, 0x11D2, [0xB1'u8, 0xE4, 0x00, 0xC0, 0x4F, 0x8E, 0xEB, 0x3E])
  IID_IShellLinkW* = DEFINE_GUID(0x000214F9'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IShellNameSpace* = DEFINE_GUID(0xE572D3C9'u32, 0x37BE, 0x4AE2, [0x82'u8, 0x5D, 0xD5, 0x21, 0x76, 0x3E, 0x31, 0x08])
  IID_IShellPropSheetExt* = DEFINE_GUID(0x000214E9'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IShellUIHelper* = DEFINE_GUID(0x729FE2F8'u32, 0x1EA8, 0x11D1, [0x8F'u8, 0x85, 0x00, 0xC0, 0x4F, 0xC2, 0xFB, 0xE1])
  IID_IShellView* = DEFINE_GUID(0x000214E3'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IShellView2* = DEFINE_GUID(0x88E39E80'u32, 0x3578, 0x11CF, [0xAE'u8, 0x69, 0x08, 0x00, 0x2B, 0x2E, 0x12, 0x62])
  IID_IShellWindows* = DEFINE_GUID(0x85CB6900'u32, 0x4D95, 0x11CF, [0x96'u8, 0x0C, 0x00, 0x80, 0xC7, 0xF4, 0xEE, 0x85])
  IID_ISimpleCommandCreator* = DEFINE_GUID(0x5E341AB7'u32, 0x02D0, 0x11D1, [0x90'u8, 0x0C, 0x00, 0xA0, 0xC9, 0x06, 0x37, 0x96])
  IID_ISimpleConnectionPoint* = DEFINE_GUID(0x51973C3E'u32, 0xCB0C, 0x11D0, [0xB5'u8, 0xC9, 0x00, 0xA0, 0x24, 0x4A, 0x0E, 0x7A])
  IID_ISimpleFrameSite* = DEFINE_GUID(0x742B0E01'u32, 0x14E6, 0x101B, [0x91'u8, 0x4E, 0x00, 0xAA, 0x00, 0x30, 0x0C, 0xAB])
  IID_ISliderBar* = DEFINE_GUID(0x3050F68D'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ISniffStream* = DEFINE_GUID(0x4EF17940'u32, 0x30E0, 0x11D0, [0xB7'u8, 0x24, 0x00, 0xAA, 0x00, 0x6C, 0x1A, 0x01])
  IID_ISOAPRequest* = DEFINE_GUID(0xAD194525'u32, 0x6E01, 0x4BCA, [0x92'u8, 0x9C, 0x23, 0xC7, 0x38, 0x33, 0x36, 0xAF])
  IID_ISoftDistExt* = DEFINE_GUID(0xB15B8DC1'u32, 0xC7E1, 0x11D0, [0x86'u8, 0x80, 0x00, 0xAA, 0x00, 0xBD, 0xCB, 0x71])
  IID_ISourcesRowset* = DEFINE_GUID(0x0C733A1E'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ISpecialSystemProperties* = DEFINE_GUID(0x000001B9'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ISpecifyPropertyPages* = DEFINE_GUID(0xB196B28B'u32, 0xBAB4, 0x101A, [0xB6'u8, 0x9C, 0x00, 0xAA, 0x00, 0x34, 0x1D, 0x07])
  IID_ISpinButton* = DEFINE_GUID(0x3050F68B'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ISQLErrorInfo* = DEFINE_GUID(0x0C733A74'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IStandardActivator* = DEFINE_GUID(0x000001B8'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IStandardInfo* = DEFINE_GUID(0xF1D9C1A5'u32, 0x9589, 0x40DD, [0xB6'u8, 0x3D, 0x9B, 0xB0, 0xB3, 0x8A, 0x10, 0x22])
  IID_IStaticPortMapping* = DEFINE_GUID(0x6F10711F'u32, 0x729B, 0x41E5, [0x93'u8, 0xB8, 0xF2, 0x1D, 0x0F, 0x81, 0x8D, 0xF1])
  IID_IStaticPortMappingCollection* = DEFINE_GUID(0xCD1F3E77'u32, 0x66D6, 0x4664, [0x82'u8, 0xC7, 0x36, 0xDB, 0xB6, 0x41, 0xD0, 0xF1])
  IID_IStats* = DEFINE_GUID(0x944AD530'u32, 0xB09D, 0x11CE, [0xB5'u8, 0x9C, 0x00, 0xAA, 0x00, 0x6C, 0xB3, 0x7D])
  IID_IStdMarshalInfo* = DEFINE_GUID(0x00000018'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IStemmer* = DEFINE_GUID(0xEFBAF140'u32, 0x7F42, 0x11CE, [0xBE'u8, 0x57, 0x00, 0xAA, 0x00, 0x51, 0xFE, 0x20])
  IID_IStemSink* = DEFINE_GUID(0xFE77C330'u32, 0x7F42, 0x11CE, [0xBE'u8, 0x57, 0x00, 0xAA, 0x00, 0x51, 0xFE, 0x20])
  IID_IStorage* = DEFINE_GUID(0x0000000B'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IStream* = DEFINE_GUID(0x0000000C'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IStub* = DEFINE_GUID(0x00000026'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IStubManager* = DEFINE_GUID(0x00000006'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ISubDivisionProvider* = DEFINE_GUID(0x3050F4D2'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ISubscriptionAgentControl* = DEFINE_GUID(0xA89E8FF0'u32, 0x70F4, 0x11D1, [0xBC'u8, 0x7F, 0x00, 0xC0, 0x4F, 0xD9, 0x29, 0xDB])
  IID_ISubscriptionAgentEvents* = DEFINE_GUID(0xA89E8FF1'u32, 0x70F4, 0x11D1, [0xBC'u8, 0x7F, 0x00, 0xC0, 0x4F, 0xD9, 0x29, 0xDB])
  IID_ISubscriptionAgentShellExt* = DEFINE_GUID(0x81B184BA'u32, 0xB302, 0x11D1, [0x85'u8, 0x52, 0x00, 0xC0, 0x4F, 0xA3, 0x5C, 0x89])
  IID_ISubscriptionItem* = DEFINE_GUID(0xA97559F8'u32, 0x6C4A, 0x11D1, [0xA1'u8, 0xE8, 0x00, 0xC0, 0x4F, 0xC2, 0xFB, 0xE1])
  IID_ISubscriptionMgr* = DEFINE_GUID(0x085FB2C0'u32, 0x0DF8, 0x11D1, [0x8F'u8, 0x4B, 0x00, 0xA0, 0xC9, 0x05, 0x41, 0x3F])
  IID_ISubscriptionMgr2* = DEFINE_GUID(0x614BC270'u32, 0xAEDF, 0x11D1, [0xA1'u8, 0xF9, 0x00, 0xC0, 0x4F, 0xC2, 0xFB, 0xE1])
  IID_ISubscriptionMgrPriv* = DEFINE_GUID(0xD66B399E'u32, 0xAF1D, 0x11D1, [0xA1'u8, 0xF9, 0x00, 0xC0, 0x4F, 0xC2, 0xFB, 0xE1])
  IID_ISubscriptionThrottler* = DEFINE_GUID(0x1E9B00E4'u32, 0x9846, 0x11D1, [0xA1'u8, 0xEE, 0x00, 0xC0, 0x4F, 0xC2, 0xFB, 0xE1])
  IID_ISupportErrorInfo* = DEFINE_GUID(0xDF0B3D60'u32, 0x548F, 0x101B, [0x8E'u8, 0x65, 0x08, 0x00, 0x2B, 0x2B, 0xD1, 0x19])
  IID_ISurrogate* = DEFINE_GUID(0x00000022'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ISWbemDateTime* = DEFINE_GUID(0x5E97458A'u32, 0xCF77, 0x11D3, [0xB3'u8, 0x8F, 0x00, 0x10, 0x5A, 0x1F, 0x47, 0x3A])
  IID_ISWbemEventSource* = DEFINE_GUID(0x27D54D92'u32, 0x0EBE, 0x11D2, [0x8B'u8, 0x22, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  IID_ISWbemLastError* = DEFINE_GUID(0xD962DB84'u32, 0xD4BB, 0x11D1, [0x8B'u8, 0x09, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  IID_ISWbemLocator* = DEFINE_GUID(0x76A6415B'u32, 0xCB41, 0x11D1, [0x8B'u8, 0x02, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  IID_ISWbemMethod* = DEFINE_GUID(0x422E8E90'u32, 0xD955, 0x11D1, [0x8B'u8, 0x09, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  IID_ISWbemMethodSet* = DEFINE_GUID(0xC93BA292'u32, 0xD955, 0x11D1, [0x8B'u8, 0x09, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  IID_ISWbemNamedValue* = DEFINE_GUID(0x76A64164'u32, 0xCB41, 0x11D1, [0x8B'u8, 0x02, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  IID_ISWbemNamedValueSet* = DEFINE_GUID(0xCF2376EA'u32, 0xCE8C, 0x11D1, [0x8B'u8, 0x05, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  IID_ISWbemObject* = DEFINE_GUID(0x76A6415A'u32, 0xCB41, 0x11D1, [0x8B'u8, 0x02, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  IID_ISWbemObjectEx* = DEFINE_GUID(0x269AD56A'u32, 0x8A67, 0x4129, [0xBC'u8, 0x8C, 0x05, 0x06, 0xDC, 0xFE, 0x98, 0x80])
  IID_ISWbemObjectPath* = DEFINE_GUID(0x5791BC27'u32, 0xCE9C, 0x11D1, [0x97'u8, 0xBF, 0x00, 0x00, 0xF8, 0x1E, 0x84, 0x9C])
  IID_ISWbemObjectSet* = DEFINE_GUID(0x76A6415F'u32, 0xCB41, 0x11D1, [0x8B'u8, 0x02, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  IID_ISWbemPrivilege* = DEFINE_GUID(0x26EE67BD'u32, 0x5804, 0x11D2, [0x8B'u8, 0x4A, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  IID_ISWbemPrivilegeSet* = DEFINE_GUID(0x26EE67BF'u32, 0x5804, 0x11D2, [0x8B'u8, 0x4A, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  IID_ISWbemProperty* = DEFINE_GUID(0x1A388F98'u32, 0xD4BA, 0x11D1, [0x8B'u8, 0x09, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  IID_ISWbemPropertySet* = DEFINE_GUID(0xDEA0A7B2'u32, 0xD4BA, 0x11D1, [0x8B'u8, 0x09, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  IID_ISWbemQualifier* = DEFINE_GUID(0x79B05932'u32, 0xD3B7, 0x11D1, [0x8B'u8, 0x06, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  IID_ISWbemQualifierSet* = DEFINE_GUID(0x9B16ED16'u32, 0xD3DF, 0x11D1, [0x8B'u8, 0x08, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  IID_ISWbemRefreshableItem* = DEFINE_GUID(0x5AD4BF92'u32, 0xDAAB, 0x11D3, [0xB3'u8, 0x8F, 0x00, 0x10, 0x5A, 0x1F, 0x47, 0x3A])
  IID_ISWbemRefresher* = DEFINE_GUID(0x14D8250E'u32, 0xD9C2, 0x11D3, [0xB3'u8, 0x8F, 0x00, 0x10, 0x5A, 0x1F, 0x47, 0x3A])
  IID_ISWbemSecurity* = DEFINE_GUID(0xB54D66E6'u32, 0x2287, 0x11D2, [0x8B'u8, 0x33, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  IID_ISWbemServices* = DEFINE_GUID(0x76A6415C'u32, 0xCB41, 0x11D1, [0x8B'u8, 0x02, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  IID_ISWbemServicesEx* = DEFINE_GUID(0xD2F68443'u32, 0x85DC, 0x427E, [0x91'u8, 0xD8, 0x36, 0x65, 0x54, 0xCC, 0x75, 0x4C])
  IID_ISWbemSink* = DEFINE_GUID(0x75718C9F'u32, 0xF029, 0x11D1, [0xA1'u8, 0xAC, 0x00, 0xC0, 0x4F, 0xB6, 0xC2, 0x23])
  IID_ISynchronize* = DEFINE_GUID(0x00000030'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ISynchronizeContainer* = DEFINE_GUID(0x00000033'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ISynchronizedCallBack* = DEFINE_GUID(0x74C26041'u32, 0x70D1, 0x11D1, [0xB7'u8, 0x5A, 0x00, 0xA0, 0xC9, 0x05, 0x64, 0xFE])
  IID_ISynchronizeEvent* = DEFINE_GUID(0x00000032'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ISynchronizeHandle* = DEFINE_GUID(0x00000031'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ISynchronizeMutex* = DEFINE_GUID(0x00000025'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ISyncMgrEnumItems* = DEFINE_GUID(0x6295DF2A'u32, 0x35EE, 0x11D1, [0x87'u8, 0x07, 0x00, 0xC0, 0x4F, 0xD9, 0x33, 0x27])
  IID_ISyncMgrRegisterCSC* = DEFINE_GUID(0x47681A61'u32, 0xBC74, 0x11D2, [0xB5'u8, 0xC5, 0x00, 0xC0, 0x4F, 0xB9, 0x39, 0x81])
  IID_ISyncMgrSynchronizeInvoke* = DEFINE_GUID(0x6295DF2C'u32, 0x35EE, 0x11D1, [0x87'u8, 0x07, 0x00, 0xC0, 0x4F, 0xD9, 0x33, 0x27])
  IID_ISyncSchedule* = DEFINE_GUID(0xF0E15899'u32, 0xA700, 0x11D1, [0x98'u8, 0x31, 0x00, 0xC0, 0x4F, 0xD9, 0x10, 0xDD])
  IID_ISyncScheduleMgr* = DEFINE_GUID(0xF0E15897'u32, 0xA700, 0x11D1, [0x98'u8, 0x31, 0x00, 0xC0, 0x4F, 0xD9, 0x10, 0xDD])
  IID_ISyncSchedulep* = DEFINE_GUID(0xF0E1589B'u32, 0xA700, 0x11D1, [0x98'u8, 0x31, 0x00, 0xC0, 0x4F, 0xD9, 0x10, 0xDD])
  IID_ITableCreation* = DEFINE_GUID(0x0C733ABC'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ITableDefinition* = DEFINE_GUID(0x0C733A86'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ITableDefinitionWithConstraints* = DEFINE_GUID(0x0C733AAB'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ITableRename* = DEFINE_GUID(0x0C733A77'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ITACDGroup* = DEFINE_GUID(0x5AFC3148'u32, 0x4BCC, 0x11D1, [0xBF'u8, 0x80, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_ITACDGroupEvent* = DEFINE_GUID(0x297F3032'u32, 0xBD11, 0x11D1, [0xA0'u8, 0xA7, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_ITAddress* = DEFINE_GUID(0xB1EFC386'u32, 0x9355, 0x11D0, [0x83'u8, 0x5C, 0x00, 0xAA, 0x00, 0x3C, 0xCA, 0xBD])
  IID_ITAddress2* = DEFINE_GUID(0xB0AE5D9B'u32, 0xBE51, 0x46C9, [0xB0'u8, 0xF7, 0xDF, 0xA8, 0xA2, 0x2A, 0x8B, 0xC4])
  IID_ITAddressCapabilities* = DEFINE_GUID(0x8DF232F5'u32, 0x821B, 0x11D1, [0xBB'u8, 0x5C, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITAddressDeviceSpecificEvent* = DEFINE_GUID(0x3ACB216B'u32, 0x40BD, 0x487A, [0x86'u8, 0x72, 0x5C, 0xE7, 0x7B, 0xD7, 0xE3, 0xA3])
  IID_ITAddressEvent* = DEFINE_GUID(0x831CE2D1'u32, 0x83B5, 0x11D1, [0xBB'u8, 0x5C, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITAddressTranslation* = DEFINE_GUID(0x0C4D8F03'u32, 0x8DDB, 0x11D1, [0xA0'u8, 0x9E, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_ITAddressTranslationInfo* = DEFINE_GUID(0xAFC15945'u32, 0x8D40, 0x11D1, [0xA0'u8, 0x9E, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_ITAgent* = DEFINE_GUID(0x5770ECE5'u32, 0x4B27, 0x11D1, [0xBF'u8, 0x80, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_ITAgentEvent* = DEFINE_GUID(0x5AFC314A'u32, 0x4BCC, 0x11D1, [0xBF'u8, 0x80, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_ITAgentHandler* = DEFINE_GUID(0x587E8C22'u32, 0x9802, 0x11D1, [0xA0'u8, 0xA4, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_ITAgentHandlerEvent* = DEFINE_GUID(0x297F3034'u32, 0xBD11, 0x11D1, [0xA0'u8, 0xA7, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_ITAgentSession* = DEFINE_GUID(0x5AFC3147'u32, 0x4BCC, 0x11D1, [0xBF'u8, 0x80, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_ITAgentSessionEvent* = DEFINE_GUID(0x5AFC314B'u32, 0x4BCC, 0x11D1, [0xBF'u8, 0x80, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_ITAllocatorProperties* = DEFINE_GUID(0xC1BC3C90'u32, 0xBCFE, 0x11D1, [0x97'u8, 0x45, 0x00, 0xC0, 0x4F, 0xD9, 0x1A, 0xC0])
  IID_ITAMMediaFormat* = DEFINE_GUID(0x0364EB00'u32, 0x4A77, 0x11D1, [0xA6'u8, 0x71, 0x00, 0x60, 0x97, 0xC9, 0xA2, 0xE8])
  IID_ITargetContainer* = DEFINE_GUID(0x7847EC01'u32, 0x2BEC, 0x11D0, [0x82'u8, 0xB4, 0x00, 0xA0, 0xC9, 0x0C, 0x29, 0xC5])
  IID_ITargetEmbedding* = DEFINE_GUID(0x548793C0'u32, 0x9E74, 0x11CF, [0x96'u8, 0x55, 0x00, 0xA0, 0xC9, 0x03, 0x49, 0x23])
  IID_ITargetFrame* = DEFINE_GUID(0xD5F78C80'u32, 0x5252, 0x11CF, [0x90'u8, 0xFA, 0x00, 0xAA, 0x00, 0x42, 0x10, 0x6E])
  IID_ITargetFrame2* = DEFINE_GUID(0x86D52E11'u32, 0x94A8, 0x11D0, [0x82'u8, 0xAF, 0x00, 0xC0, 0x4F, 0xD5, 0xAE, 0x38])
  IID_ITargetFramePriv* = DEFINE_GUID(0x9216E421'u32, 0x2BF5, 0x11D0, [0x82'u8, 0xB4, 0x00, 0xA0, 0xC9, 0x0C, 0x29, 0xC5])
  IID_ITargetNotify* = DEFINE_GUID(0x863A99A0'u32, 0x21BC, 0x11D0, [0x82'u8, 0xB4, 0x00, 0xA0, 0xC9, 0x0C, 0x29, 0xC5])
  IID_ITargetNotify2* = DEFINE_GUID(0x3050F6B1'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ITaskAnalyzeCluster* = DEFINE_GUID(0x795737A1'u32, 0xE13A, 0x45EB, [0x8D'u8, 0xFD, 0x81, 0x85, 0xC4, 0xB7, 0xAD, 0x4E])
  IID_ITaskbarList* = DEFINE_GUID(0x56FDF342'u32, 0xFD6D, 0x11D0, [0x95'u8, 0x8A, 0x00, 0x60, 0x97, 0xC9, 0xA0, 0x90])
  IID_ITaskbarList2* = DEFINE_GUID(0x602D4995'u32, 0xB13A, 0x429B, [0xA6'u8, 0x6E, 0x19, 0x35, 0xE4, 0x4F, 0x43, 0x17])
  IID_ITaskCommitClusterChanges* = DEFINE_GUID(0x1BF12DDE'u32, 0xF8B0, 0x49B1, [0xA4'u8, 0x58, 0x67, 0x47, 0xDB, 0x78, 0x8A, 0x47])
  IID_ITaskCompareAndPushInformation* = DEFINE_GUID(0xD4F1C2AF'u32, 0xB370, 0x49DE, [0x87'u8, 0x68, 0x40, 0x10, 0xB5, 0x68, 0x63, 0x6C])
  IID_ITaskGatherClusterInfo* = DEFINE_GUID(0xE167965C'u32, 0xC5D6, 0x493C, [0xA3'u8, 0x43, 0x4C, 0x10, 0x5C, 0x01, 0xDD, 0xE7])
  IID_ITaskGatherInformation* = DEFINE_GUID(0xB9AAF3F8'u32, 0x238E, 0x4993, [0xBA'u8, 0x31, 0x14, 0x85, 0x98, 0x04, 0xF9, 0x2C])
  IID_ITaskGatherNodeInfo* = DEFINE_GUID(0xF19A2E01'u32, 0x2CB3, 0x47B4, [0x8F'u8, 0x5D, 0xB9, 0x77, 0x17, 0x6B, 0x45, 0xC8])
  IID_ITaskGetDomains* = DEFINE_GUID(0xDFCB4ACD'u32, 0xC4DB, 0x4DB4, [0x8E'u8, 0xBB, 0x1D, 0xD0, 0x7A, 0x9D, 0x5B, 0x82])
  IID_ITaskGetDomainsCallback* = DEFINE_GUID(0x85402E44'u32, 0x6834, 0x41DF, [0x85'u8, 0x90, 0x01, 0x82, 0x7D, 0x12, 0x4E, 0x1B])
  IID_ITaskLoginDomain* = DEFINE_GUID(0x76AD8E51'u32, 0x53C3, 0x4347, [0x89'u8, 0x5D, 0x6C, 0x30, 0xF4, 0x13, 0x93, 0x74])
  IID_ITaskLoginDomainCallback* = DEFINE_GUID(0xEFAF3C43'u32, 0x7A8F, 0x469B, [0xB8'u8, 0xBB, 0xC8, 0x0C, 0x57, 0x47, 0xCE, 0x05])
  IID_ITaskManager* = DEFINE_GUID(0x16116694'u32, 0xDFC5, 0x470B, [0xAC'u8, 0x12, 0x46, 0xFB, 0xB0, 0x1C, 0xEF, 0x10])
  IID_ITaskPollingCallback* = DEFINE_GUID(0x49E92395'u32, 0x66AF, 0x4ADD, [0xA4'u8, 0x1E, 0x43, 0x51, 0x2C, 0xB5, 0x19, 0xB3])
  IID_ITaskVerifyIPAddress* = DEFINE_GUID(0x0C95E1B1'u32, 0x0CFF, 0x4740, [0x8A'u8, 0xBD, 0x69, 0x91, 0x2D, 0x10, 0x5B, 0xD1])
  IID_ITASRTerminalEvent* = DEFINE_GUID(0xEE016A02'u32, 0x4FA9, 0x467C, [0x93'u8, 0x3F, 0x5A, 0x15, 0xB1, 0x23, 0x77, 0xD7])
  IID_ITAttributeList* = DEFINE_GUID(0x5037FB82'u32, 0xCAE9, 0x11D0, [0x8D'u8, 0x58, 0x00, 0xC0, 0x4F, 0xD9, 0x1A, 0xC0])
  IID_ITAudioDeviceControl* = DEFINE_GUID(0x6C0AB6C5'u32, 0x21E3, 0x11D3, [0xA5'u8, 0x77, 0x00, 0xC0, 0x4F, 0x8E, 0xF6, 0xE3])
  IID_ITAudioSettings* = DEFINE_GUID(0x6C0AB6C6'u32, 0x21E3, 0x11D3, [0xA5'u8, 0x77, 0x00, 0xC0, 0x4F, 0x8E, 0xF6, 0xE3])
  IID_ITAutomatedPhoneControl* = DEFINE_GUID(0x1EE1AF0E'u32, 0x6159, 0x4A61, [0xB7'u8, 0x9B, 0x6A, 0x4B, 0xA3, 0xFC, 0x9D, 0xFC])
  IID_ITBasicAudioTerminal* = DEFINE_GUID(0xB1EFC38D'u32, 0x9355, 0x11D0, [0x83'u8, 0x5C, 0x00, 0xAA, 0x00, 0x3C, 0xCA, 0xBD])
  IID_ITBasicCallControl* = DEFINE_GUID(0xB1EFC389'u32, 0x9355, 0x11D0, [0x83'u8, 0x5C, 0x00, 0xAA, 0x00, 0x3C, 0xCA, 0xBD])
  IID_ITBasicCallControl2* = DEFINE_GUID(0x161A4A56'u32, 0x1E99, 0x4B3F, [0xA4'u8, 0x6A, 0x16, 0x8F, 0x38, 0xA5, 0xEE, 0x4C])
  IID_ITCallHub* = DEFINE_GUID(0xA3C1544E'u32, 0x5B92, 0x11D1, [0x8F'u8, 0x4E, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITCallHubEvent* = DEFINE_GUID(0xA3C15451'u32, 0x5B92, 0x11D1, [0x8F'u8, 0x4E, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITCallInfo* = DEFINE_GUID(0x350F85D1'u32, 0x1227, 0x11D3, [0x83'u8, 0xD4, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITCallInfo2* = DEFINE_GUID(0x94D70CA6'u32, 0x7AB0, 0x4DAA, [0x81'u8, 0xCA, 0xB8, 0xF8, 0x64, 0x3F, 0xAE, 0xC1])
  IID_ITCallInfoChangeEvent* = DEFINE_GUID(0x5D4B65F9'u32, 0xE51C, 0x11D1, [0xA0'u8, 0x2F, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITCallingCard* = DEFINE_GUID(0x0C4D8F00'u32, 0x8DDB, 0x11D1, [0xA0'u8, 0x9E, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_ITCallMediaEvent* = DEFINE_GUID(0xFF36B87F'u32, 0xEC3A, 0x11D0, [0x8E'u8, 0xE4, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITCallNotificationEvent* = DEFINE_GUID(0x895801DF'u32, 0x3DD6, 0x11D1, [0x8F'u8, 0x30, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITCallQualityControl* = DEFINE_GUID(0xFE1D8AE0'u32, 0xEDC4, 0x49B5, [0x8F'u8, 0x8C, 0x4D, 0xE4, 0x0F, 0x9C, 0xDF, 0xAF])
  IID_ITCallStateEvent* = DEFINE_GUID(0x62F47097'u32, 0x95C9, 0x11D0, [0x83'u8, 0x5D, 0x00, 0xAA, 0x00, 0x3C, 0xCA, 0xBD])
  IID_ITCollection* = DEFINE_GUID(0x5EC5ACF2'u32, 0x9C02, 0x11D0, [0x83'u8, 0x62, 0x00, 0xAA, 0x00, 0x3C, 0xCA, 0xBD])
  IID_ITCollection2* = DEFINE_GUID(0xE6DDDDA5'u32, 0xA6D3, 0x48FF, [0x87'u8, 0x37, 0xD3, 0x2F, 0xC4, 0xD9, 0x54, 0x77])
  IID_ITConferenceBlob* = DEFINE_GUID(0xC259D7AA'u32, 0xC8AB, 0x11D0, [0x8D'u8, 0x58, 0x00, 0xC0, 0x4F, 0xD9, 0x1A, 0xC0])
  IID_ITConnection* = DEFINE_GUID(0x8FA381D4'u32, 0xC8C2, 0x11D0, [0x8D'u8, 0x58, 0x00, 0xC0, 0x4F, 0xD9, 0x1A, 0xC0])
  IID_ITcpipProperties* = DEFINE_GUID(0x98133271'u32, 0x4B20, 0x11D1, [0xAB'u8, 0x01, 0x00, 0x80, 0x5F, 0xC1, 0x27, 0x0E])
  IID_ITCustomTone* = DEFINE_GUID(0x357AD764'u32, 0xB3C6, 0x4B2A, [0x8F'u8, 0xA5, 0x07, 0x22, 0x82, 0x7A, 0x92, 0x54])
  IID_ITDetectTone* = DEFINE_GUID(0x961F79BD'u32, 0x3097, 0x49DF, [0xA1'u8, 0xD6, 0x90, 0x9B, 0x77, 0xE8, 0x9C, 0xA0])
  IID_ITDigitDetectionEvent* = DEFINE_GUID(0x80D3BFAC'u32, 0x57D9, 0x11D2, [0xA0'u8, 0x4A, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITDigitGenerationEvent* = DEFINE_GUID(0x80D3BFAD'u32, 0x57D9, 0x11D2, [0xA0'u8, 0x4A, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITDigitsGatheredEvent* = DEFINE_GUID(0xE52EC4C1'u32, 0xCBA3, 0x441A, [0x9E'u8, 0x6A, 0x93, 0xCB, 0x90, 0x9E, 0x97, 0x24])
  IID_ITDirectory* = DEFINE_GUID(0x34621D6C'u32, 0x6CFF, 0x11D1, [0xAF'u8, 0xF7, 0x00, 0xC0, 0x4F, 0xC3, 0x1F, 0xEE])
  IID_ITDirectoryObject* = DEFINE_GUID(0x34621D6E'u32, 0x6CFF, 0x11D1, [0xAF'u8, 0xF7, 0x00, 0xC0, 0x4F, 0xC3, 0x1F, 0xEE])
  IID_ITDirectoryObjectConference* = DEFINE_GUID(0xF1029E5D'u32, 0xCB5B, 0x11D0, [0x8D'u8, 0x59, 0x00, 0xC0, 0x4F, 0xD9, 0x1A, 0xC0])
  IID_ITDirectoryObjectUser* = DEFINE_GUID(0x34621D6F'u32, 0x6CFF, 0x11D1, [0xAF'u8, 0xF7, 0x00, 0xC0, 0x4F, 0xC3, 0x1F, 0xEE])
  IID_ITDispatchMapper* = DEFINE_GUID(0xE9225295'u32, 0xC759, 0x11D1, [0xA0'u8, 0x2B, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITemplatePrinter* = DEFINE_GUID(0x3050F6B4'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ITemplatePrinter2* = DEFINE_GUID(0x3050F83F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ITFileTerminalEvent* = DEFINE_GUID(0xE4A7FBAC'u32, 0x8C17, 0x4427, [0x9F'u8, 0x55, 0x9F, 0x58, 0x9A, 0xC8, 0xAF, 0x00])
  IID_ITFileTrack* = DEFINE_GUID(0x31CA6EA9'u32, 0xC08A, 0x4BEA, [0x88'u8, 0x11, 0x8E, 0x9C, 0x1B, 0xA3, 0xEA, 0x3A])
  IID_ITfLangBarAddIn* = DEFINE_GUID(0xC9ADDAC3'u32, 0x15CB, 0x4957, [0xB9'u8, 0x3C, 0xDB, 0x08, 0x73, 0xFF, 0x98, 0xBB])
  IID_ITFormatControl* = DEFINE_GUID(0x6C0AB6C1'u32, 0x21E3, 0x11D3, [0xA5'u8, 0x77, 0x00, 0xC0, 0x4F, 0x8E, 0xF6, 0xE3])
  IID_ITForwardInformation* = DEFINE_GUID(0x449F659E'u32, 0x88A3, 0x11D1, [0xBB'u8, 0x5D, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITForwardInformation2* = DEFINE_GUID(0x5229B4ED'u32, 0xB260, 0x4382, [0x8E'u8, 0x1A, 0x5D, 0xF3, 0xA8, 0xA4, 0xCC, 0xC0])
  IID_ITfSpeechUIServer* = DEFINE_GUID(0x90E9A944'u32, 0x9244, 0x489F, [0xA7'u8, 0x8F, 0xDE, 0x67, 0xAF, 0xC0, 0x13, 0xA7])
  IID_IThumbnailCapture* = DEFINE_GUID(0x4EA39266'u32, 0x7211, 0x409F, [0xB6'u8, 0x22, 0xF6, 0x3D, 0xBD, 0x16, 0xC5, 0x33])
  IID_IThumbnailExtractor* = DEFINE_GUID(0x969DC708'u32, 0x5C76, 0x11D1, [0x8D'u8, 0x86, 0x00, 0x00, 0xF8, 0x04, 0xB0, 0x57])
  IID_ITILSConfig* = DEFINE_GUID(0x34621D72'u32, 0x6CFF, 0x11D1, [0xAF'u8, 0xF7, 0x00, 0xC0, 0x4F, 0xC3, 0x1F, 0xEE])
  IID_ITIMEActiveElementCollection* = DEFINE_GUID(0x403E2540'u32, 0x4520, 0x11D3, [0x93'u8, 0xAB, 0x00, 0xA0, 0xC9, 0x67, 0xA4, 0x38])
  IID_ITimeAndNoticeControl* = DEFINE_GUID(0xBC0BF6AE'u32, 0x8878, 0x11D1, [0x83'u8, 0xE9, 0x00, 0xC0, 0x4F, 0xC2, 0xC6, 0xD4])
  IID_ITIMEAnimationElement* = DEFINE_GUID(0xA74F14B1'u32, 0xB6A2, 0x430A, [0xA5'u8, 0xE8, 0x1F, 0x4E, 0x53, 0xF7, 0x10, 0xFE])
  IID_ITIMEAnimationElement2* = DEFINE_GUID(0x29CE8661'u32, 0xBD43, 0x421A, [0xB6'u8, 0x16, 0xE9, 0xB3, 0x1F, 0x33, 0xA5, 0x72])
  IID_ITIMEBodyElement* = DEFINE_GUID(0x8C90E348'u32, 0xEC0A, 0x4229, [0x90'u8, 0xB0, 0xE5, 0x7D, 0x2C, 0xA4, 0x5C, 0xCB])
  IID_ITIMEDMusicPlayerObject* = DEFINE_GUID(0x407954F5'u32, 0x2BAB, 0x4CFA, [0x95'u8, 0x4D, 0x24, 0x9F, 0x9F, 0xCE, 0x43, 0xA1])
  IID_ITIMEDVDPlayerObject* = DEFINE_GUID(0x3AF7AB68'u32, 0x4F29, 0x462C, [0xAA'u8, 0x6E, 0x58, 0x72, 0x44, 0x88, 0x99, 0xE3])
  IID_ITIMEElement* = DEFINE_GUID(0x1C2EF64E'u32, 0xF07D, 0x4338, [0x97'u8, 0x71, 0x91, 0x54, 0x49, 0x1C, 0xD8, 0xB9])
  IID_ITIMEElementCollection* = DEFINE_GUID(0x50ABC224'u32, 0x6D53, 0x4F83, [0x91'u8, 0x35, 0x24, 0x40, 0xA4, 0x1B, 0x7B, 0xC8])
  IID_ITIMEFactory* = DEFINE_GUID(0xCD51E446'u32, 0x3006, 0x434F, [0x90'u8, 0xE2, 0xE3, 0x7E, 0x8F, 0xB8, 0xCA, 0x8F])
  IID_ITIMEMediaElement* = DEFINE_GUID(0x47A6972F'u32, 0xAE65, 0x4A6B, [0xAE'u8, 0x63, 0xD0, 0xC1, 0xD5, 0x30, 0x7B, 0x58])
  IID_ITIMEMediaElement2* = DEFINE_GUID(0x9EE29400'u32, 0x7EE6, 0x453A, [0x85'u8, 0xB3, 0x4E, 0xC2, 0x8E, 0x03, 0x05, 0xB4])
  IID_ITIMEMediaPlayer* = DEFINE_GUID(0xEA4A95BE'u32, 0xACC9, 0x4BF0, [0x85'u8, 0xA4, 0x1B, 0xF3, 0xC5, 0x1E, 0x43, 0x1C])
  IID_ITIMEMediaPlayerAudio* = DEFINE_GUID(0xFFAACFDA'u32, 0xB374, 0x4F22, [0xAC'u8, 0x9A, 0xC5, 0xBB, 0x94, 0x37, 0xCB, 0x56])
  IID_ITIMEMediaPlayerControl* = DEFINE_GUID(0x897A99E7'u32, 0xF386, 0x45C8, [0xB5'u8, 0x1B, 0x3A, 0x25, 0xBB, 0xCB, 0xBA, 0x69])
  IID_ITIMEMediaPlayerNetwork* = DEFINE_GUID(0xB9987FCA'u32, 0x7FBB, 0x4015, [0xBD'u8, 0x3D, 0x74, 0x18, 0x60, 0x55, 0x14, 0xDA])
  IID_ITIMEMediaPlayerSite* = DEFINE_GUID(0xBF0571ED'u32, 0x344F, 0x4F58, [0x82'u8, 0xC7, 0x74, 0x31, 0xED, 0x0F, 0xD8, 0x34])
  IID_ITIMEPlayItem* = DEFINE_GUID(0x2A6096D9'u32, 0x2CE0, 0x47DC, [0xA8'u8, 0x13, 0x90, 0x99, 0xA2, 0x46, 0x63, 0x09])
  IID_ITIMEPlayItem2* = DEFINE_GUID(0x4262CD38'u32, 0x6BDC, 0x40A4, [0xBC'u8, 0x50, 0x4C, 0xC5, 0x03, 0x66, 0xE7, 0x02])
  IID_ITIMEPlayList* = DEFINE_GUID(0xE9B75B62'u32, 0xDD97, 0x4B19, [0x8F'u8, 0xD9, 0x96, 0x46, 0x29, 0x29, 0x52, 0xE0])
  IID_ITimer* = DEFINE_GUID(0x3050F360'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ITimerService* = DEFINE_GUID(0x3050F35F'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ITimerSink* = DEFINE_GUID(0x3050F361'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ITIMEState* = DEFINE_GUID(0xDD5EC62A'u32, 0x9D77, 0x4573, [0x80'u8, 0xA8, 0x75, 0x85, 0x94, 0xE6, 0x9C, 0xEA])
  IID_ITIMETransitionElement* = DEFINE_GUID(0xF383D66F'u32, 0x5E68, 0x4FC2, [0xB6'u8, 0x41, 0x03, 0x67, 0x2B, 0x54, 0x3A, 0x49])
  IID_ITLegacyAddressMediaControl* = DEFINE_GUID(0xAB493640'u32, 0x4C0B, 0x11D2, [0xA0'u8, 0x46, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITLegacyAddressMediaControl2* = DEFINE_GUID(0xB0EE512B'u32, 0xA531, 0x409E, [0x9D'u8, 0xD9, 0x40, 0x99, 0xFE, 0x86, 0xC7, 0x38])
  IID_ITLegacyCallMediaControl* = DEFINE_GUID(0xD624582F'u32, 0xCC23, 0x4436, [0xB8'u8, 0xA5, 0x47, 0xC6, 0x25, 0xC8, 0x04, 0x5D])
  IID_ITLegacyCallMediaControl2* = DEFINE_GUID(0x57CA332D'u32, 0x7BC2, 0x44F1, [0xA6'u8, 0x0C, 0x93, 0x6F, 0xE8, 0xD7, 0xCE, 0x73])
  IID_ITLegacyWaveSupport* = DEFINE_GUID(0x207823EA'u32, 0xE252, 0x11D2, [0xB7'u8, 0x7E, 0x00, 0x80, 0xC7, 0x13, 0x53, 0x81])
  IID_ITLocalParticipant* = DEFINE_GUID(0x39CBF055'u32, 0xF77A, 0x11D2, [0xA8'u8, 0x24, 0x00, 0xC0, 0x4F, 0x8E, 0xF6, 0xE3])
  IID_ITLocationInfo* = DEFINE_GUID(0x0C4D8EFF'u32, 0x8DDB, 0x11D1, [0xA0'u8, 0x9E, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_ITMedia* = DEFINE_GUID(0x0CC1F053'u32, 0xCAEB, 0x11D0, [0x8D'u8, 0x58, 0x00, 0xC0, 0x4F, 0xD9, 0x1A, 0xC0])
  IID_ITMediaCollection* = DEFINE_GUID(0x6A8E16A2'u32, 0x0ABC, 0x11D1, [0x97'u8, 0x6D, 0x00, 0xC0, 0x4F, 0xD9, 0x1A, 0xC0])
  IID_ITMediaControl* = DEFINE_GUID(0xC445DDE8'u32, 0x5199, 0x4BC7, [0x98'u8, 0x07, 0x5F, 0xFB, 0x92, 0xE4, 0x2E, 0x09])
  IID_ITMediaPlayback* = DEFINE_GUID(0x627E8AE6'u32, 0xAE4C, 0x4A69, [0xBB'u8, 0x63, 0x2A, 0xD6, 0x25, 0x40, 0x4B, 0x77])
  IID_ITMediaRecord* = DEFINE_GUID(0xF5DD4592'u32, 0x5476, 0x4CC1, [0x9D'u8, 0x4D, 0xFA, 0xD3, 0xEE, 0xFE, 0x7D, 0xB2])
  IID_ITMediaSupport* = DEFINE_GUID(0xB1EFC384'u32, 0x9355, 0x11D0, [0x83'u8, 0x5C, 0x00, 0xAA, 0x00, 0x3C, 0xCA, 0xBD])
  IID_ITMSPAddress* = DEFINE_GUID(0xEE3BD600'u32, 0x3868, 0x11D2, [0xA0'u8, 0x45, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITMultiTrackTerminal* = DEFINE_GUID(0xFE040091'u32, 0xADE8, 0x4072, [0x95'u8, 0xC9, 0xBF, 0x7D, 0xE8, 0xC5, 0x4B, 0x44])
  IID_ITParticipant* = DEFINE_GUID(0x5899B820'u32, 0x5A34, 0x11D2, [0x95'u8, 0xA0, 0x00, 0xA0, 0x24, 0x4D, 0x22, 0x98])
  IID_ITParticipantControl* = DEFINE_GUID(0xD2EE6684'u32, 0x5A34, 0x11D2, [0x95'u8, 0xA0, 0x00, 0xA0, 0x24, 0x4D, 0x22, 0x98])
  IID_ITParticipantEvent* = DEFINE_GUID(0x8BB35070'u32, 0x2DAD, 0x11D3, [0xA5'u8, 0x80, 0x00, 0xC0, 0x4F, 0x8E, 0xF6, 0xE3])
  IID_ITParticipantSubStreamControl* = DEFINE_GUID(0x2C679108'u32, 0x5A35, 0x11D2, [0x95'u8, 0xA0, 0x00, 0xA0, 0x24, 0x4D, 0x22, 0x98])
  IID_ITPhone* = DEFINE_GUID(0x09D48DB4'u32, 0x10CC, 0x4388, [0x9D'u8, 0xE7, 0xA8, 0x46, 0x56, 0x18, 0x97, 0x5A])
  IID_ITPhoneDeviceSpecificEvent* = DEFINE_GUID(0x63FFB2A6'u32, 0x872B, 0x4CD3, [0xA5'u8, 0x01, 0x32, 0x6E, 0x8F, 0xB4, 0x0A, 0xF7])
  IID_ITPhoneEvent* = DEFINE_GUID(0x8F942DD8'u32, 0x64ED, 0x4AAF, [0xA7'u8, 0x7D, 0xB2, 0x3D, 0xB0, 0x83, 0x7E, 0xAD])
  IID_ITPluggableTerminalClassInfo* = DEFINE_GUID(0x41757F4A'u32, 0xCF09, 0x4B34, [0xBC'u8, 0x96, 0x0A, 0x79, 0xD2, 0x39, 0x00, 0x76])
  IID_ITPluggableTerminalClassRegistrat* = DEFINE_GUID(0x924A3723'u32, 0xA00B, 0x4F5F, [0x9F'u8, 0xEE, 0x8E, 0x9A, 0xEB, 0x9E, 0x82, 0xAA])
  IID_ITPluggableTerminalEventSink* = DEFINE_GUID(0x6E0887BE'u32, 0xBA1A, 0x492E, [0xBD'u8, 0x10, 0x40, 0x20, 0xEC, 0x5E, 0x33, 0xE0])
  IID_ITPluggableTerminalEventSinkRegis* = DEFINE_GUID(0xF7115709'u32, 0xA216, 0x4957, [0xA7'u8, 0x59, 0x06, 0x0A, 0xB3, 0x2A, 0x90, 0xD1])
  IID_ITPluggableTerminalInitializatio* = DEFINE_GUID(0xAED6483C'u32, 0x3304, 0x11D2, [0x86'u8, 0xF1, 0x00, 0x60, 0x08, 0xB0, 0xE5, 0xD2])
  IID_ITPluggableTerminalSuperclassInf* = DEFINE_GUID(0x6D54E42C'u32, 0x4625, 0x4359, [0xA6'u8, 0xF7, 0x63, 0x19, 0x99, 0x10, 0x7E, 0x05])
  IID_ITPluggableTerminalSuperclassRegi* = DEFINE_GUID(0x60D3C08A'u32, 0xC13E, 0x4195, [0x9A'u8, 0xB0, 0x8D, 0xE7, 0x68, 0x09, 0x0F, 0x25])
  IID_ITPrivateEvent* = DEFINE_GUID(0x0E269CD0'u32, 0x10D4, 0x4121, [0x9C'u8, 0x22, 0x9C, 0x85, 0xD6, 0x25, 0x65, 0x0D])
  IID_ITQOSApplicationID* = DEFINE_GUID(0xE8C89D27'u32, 0xA3BD, 0x47D5, [0xA6'u8, 0xFC, 0xD2, 0xAE, 0x40, 0xCD, 0xBC, 0x6E])
  IID_ITQOSEvent* = DEFINE_GUID(0xCFA3357C'u32, 0xAD77, 0x11D1, [0xBB'u8, 0x68, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITQueue* = DEFINE_GUID(0x5AFC3149'u32, 0x4BCC, 0x11D1, [0xBF'u8, 0x80, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_ITQueueEvent* = DEFINE_GUID(0x297F3033'u32, 0xBD11, 0x11D1, [0xA0'u8, 0xA7, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_ITrackFile* = DEFINE_GUID(0x8790C948'u32, 0xA30B, 0x11D0, [0x8C'u8, 0xAB, 0x00, 0xC0, 0x4F, 0xD9, 0x0F, 0x85])
  IID_ITransaction* = DEFINE_GUID(0x0FB15084'u32, 0xAF41, 0x11CE, [0xBD'u8, 0x2B, 0x20, 0x4C, 0x4F, 0x4F, 0x50, 0x20])
  IID_ITransaction2* = DEFINE_GUID(0x34021548'u32, 0x0065, 0x11D3, [0xBA'u8, 0xC1, 0x00, 0xC0, 0x4F, 0x79, 0x7B, 0xE2])
  IID_ITransactionCloner* = DEFINE_GUID(0x02656950'u32, 0x2152, 0x11D0, [0x94'u8, 0x4C, 0x00, 0xA0, 0xC9, 0x05, 0x41, 0x6E])
  IID_ITransactionDispenser* = DEFINE_GUID(0x3A6AD9E1'u32, 0x23B9, 0x11CF, [0xAD'u8, 0x60, 0x00, 0xAA, 0x00, 0xA7, 0x4C, 0xCD])
  IID_ITransactionJoin* = DEFINE_GUID(0x0C733A5E'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ITransactionLocal* = DEFINE_GUID(0x0C733A5F'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ITransactionObject* = DEFINE_GUID(0x0C733A60'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ITransactionOptions* = DEFINE_GUID(0x3A6AD9E0'u32, 0x23B9, 0x11CF, [0xAD'u8, 0x60, 0x00, 0xAA, 0x00, 0xA7, 0x4C, 0xCD])
  IID_ITransactionOutcomeEvents* = DEFINE_GUID(0x3A6AD9E2'u32, 0x23B9, 0x11CF, [0xAD'u8, 0x60, 0x00, 0xAA, 0x00, 0xA7, 0x4C, 0xCD])
  IID_ITransmt* = DEFINE_GUID(0xB3C9F150'u32, 0xB593, 0x11CE, [0xB5'u8, 0xB0, 0x00, 0xAA, 0x00, 0x6C, 0xB3, 0x7D])
  IID_ITravelEntry* = DEFINE_GUID(0xF46EDB3B'u32, 0xBC2F, 0x11D0, [0x94'u8, 0x12, 0x00, 0xAA, 0x00, 0xA3, 0xEB, 0xD3])
  IID_ITravelLog* = DEFINE_GUID(0x66A9CB08'u32, 0x4802, 0x11D2, [0xA5'u8, 0x61, 0x00, 0xA0, 0xC9, 0x2D, 0xBF, 0xE8])
  IID_ITravelLogClient* = DEFINE_GUID(0x3050F67A'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ITravelLogClient2* = DEFINE_GUID(0x0AD364CE'u32, 0xADCB, 0x11D3, [0x82'u8, 0x69, 0x00, 0x80, 0x5F, 0xC7, 0x32, 0xC0])
  IID_ITravelLogEntry* = DEFINE_GUID(0x7EBFDD87'u32, 0xAD18, 0x11D3, [0xA4'u8, 0xC5, 0x00, 0xC0, 0x4F, 0x72, 0xD6, 0xB8])
  IID_ITravelLogEx* = DEFINE_GUID(0x3050F679'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_ITravelLogStg* = DEFINE_GUID(0x7EBFDD80'u32, 0xAD18, 0x11D3, [0xA4'u8, 0xC5, 0x00, 0xC0, 0x4F, 0x72, 0xD6, 0xB8])
  IID_ITRendezvous* = DEFINE_GUID(0x34621D6B'u32, 0x6CFF, 0x11D1, [0xAF'u8, 0xF7, 0x00, 0xC0, 0x4F, 0xC3, 0x1F, 0xEE])
  IID_ITRequest* = DEFINE_GUID(0xAC48FFDF'u32, 0xF8C4, 0x11D1, [0xA0'u8, 0x30, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITRequestEvent* = DEFINE_GUID(0xAC48FFDE'u32, 0xF8C4, 0x11D1, [0xA0'u8, 0x30, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITridentEventSink* = DEFINE_GUID(0x1DC9CA50'u32, 0x06EF, 0x11D2, [0x84'u8, 0x15, 0x00, 0x60, 0x08, 0xC3, 0xFB, 0xFC])
  IID_ITrkForceOwnership* = DEFINE_GUID(0xA2531F44'u32, 0xC67D, 0x11D0, [0x8C'u8, 0xB1, 0x00, 0xC0, 0x4F, 0xD9, 0x0F, 0x85])
  IID_ITrkRestoreNotify* = DEFINE_GUID(0xD0056F6B'u32, 0xE2A0, 0x11D0, [0xB1'u8, 0xC2, 0x00, 0xC0, 0x4F, 0xB9, 0x38, 0x6D])
  IID_ITrkRestoreParser* = DEFINE_GUID(0x755939E3'u32, 0xE381, 0x11D0, [0xB1'u8, 0xC5, 0x00, 0xC0, 0x4F, 0xB9, 0x38, 0x6D])
  IID_ITrusteeAdmin* = DEFINE_GUID(0x0C733AA1'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ITrusteeGroupAdmin* = DEFINE_GUID(0x0C733AA2'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_ITScriptableAudioFormat* = DEFINE_GUID(0xB87658BD'u32, 0x3C59, 0x4F64, [0xBE'u8, 0x74, 0xAE, 0xDE, 0x3E, 0x86, 0xA8, 0x1E])
  IID_ITSdp* = DEFINE_GUID(0x9B2719D8'u32, 0xB696, 0x11D0, [0xA4'u8, 0x89, 0x00, 0xC0, 0x4F, 0xD9, 0x1A, 0xC0])
  IID_ITStaticAudioTerminal* = DEFINE_GUID(0xA86B7871'u32, 0xD14C, 0x48E6, [0x92'u8, 0x2E, 0xA8, 0xD1, 0x5F, 0x98, 0x48, 0x00])
  IID_ITStream* = DEFINE_GUID(0xEE3BD605'u32, 0x3868, 0x11D2, [0xA0'u8, 0x45, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITStreamControl* = DEFINE_GUID(0xEE3BD604'u32, 0x3868, 0x11D2, [0xA0'u8, 0x45, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITStreamQualityControl* = DEFINE_GUID(0x6C0AB6C2'u32, 0x21E3, 0x11D3, [0xA5'u8, 0x77, 0x00, 0xC0, 0x4F, 0x8E, 0xF6, 0xE3])
  IID_ITSubStream* = DEFINE_GUID(0xEE3BD608'u32, 0x3868, 0x11D2, [0xA0'u8, 0x45, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITSubStreamControl* = DEFINE_GUID(0xEE3BD607'u32, 0x3868, 0x11D2, [0xA0'u8, 0x45, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITTAPI* = DEFINE_GUID(0xB1EFC382'u32, 0x9355, 0x11D0, [0x83'u8, 0x5C, 0x00, 0xAA, 0x00, 0x3C, 0xCA, 0xBD])
  IID_ITTAPI2* = DEFINE_GUID(0x54FBDC8C'u32, 0xD90F, 0x4DAD, [0x96'u8, 0x95, 0xB3, 0x73, 0x09, 0x7F, 0x09, 0x4B])
  IID_ITTAPICallCenter* = DEFINE_GUID(0x5AFC3154'u32, 0x4BCC, 0x11D1, [0xBF'u8, 0x80, 0x00, 0x80, 0x5F, 0xC1, 0x47, 0xD3])
  IID_ITTAPIEventNotification* = DEFINE_GUID(0xEDDB9426'u32, 0x3B91, 0x11D1, [0x8F'u8, 0x30, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITTAPIObjectEvent* = DEFINE_GUID(0xF4854D48'u32, 0x937A, 0x11D1, [0xBB'u8, 0x58, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  IID_ITTAPIObjectEvent2* = DEFINE_GUID(0x359DDA6E'u32, 0x68CE, 0x4383, [0xBF'u8, 0x0B, 0x16, 0x91, 0x33, 0xC4, 0x1B, 0x46])
  IID_ITTerminal* = DEFINE_GUID(0xB1EFC38A'u32, 0x9355, 0x11D0, [0x83'u8, 0x5C, 0x00, 0xAA, 0x00, 0x3C, 0xCA, 0xBD])
  IID_ITTerminalControl* = DEFINE_GUID(0xAED6483B'u32, 0x3304, 0x11D2, [0x86'u8, 0xF1, 0x00, 0x60, 0x08, 0xB0, 0xE5, 0xD2])
  IID_ITTerminalManager* = DEFINE_GUID(0x7170F2DE'u32, 0x9BE3, 0x11D0, [0xA0'u8, 0x09, 0x00, 0xAA, 0x00, 0xB6, 0x05, 0xA4])
  IID_ITTerminalManager2* = DEFINE_GUID(0xBB33DEC6'u32, 0xB2C7, 0x46E6, [0x9E'u8, 0xD1, 0x49, 0x8B, 0x91, 0xFA, 0x85, 0xAC])
  IID_ITTerminalSupport* = DEFINE_GUID(0xB1EFC385'u32, 0x9355, 0x11D0, [0x83'u8, 0x5C, 0x00, 0xAA, 0x00, 0x3C, 0xCA, 0xBD])
  IID_ITTerminalSupport2* = DEFINE_GUID(0xF3EB39BC'u32, 0x1B1F, 0x4E99, [0xA0'u8, 0xC0, 0x56, 0x30, 0x5C, 0x4D, 0xD5, 0x91])
  IID_ITTime* = DEFINE_GUID(0x2652BB78'u32, 0x1516, 0x11D1, [0x97'u8, 0x71, 0x00, 0xC0, 0x4F, 0xD9, 0x1A, 0xC0])
  IID_ITTimeCollection* = DEFINE_GUID(0x0CC1F04F'u32, 0xCAEB, 0x11D0, [0x8D'u8, 0x58, 0x00, 0xC0, 0x4F, 0xD9, 0x1A, 0xC0])
  IID_ITToneDetectionEvent* = DEFINE_GUID(0x407E0FAF'u32, 0xD047, 0x4753, [0xB0'u8, 0xC6, 0x8E, 0x06, 0x03, 0x73, 0xFE, 0xCD])
  IID_ITToneTerminalEvent* = DEFINE_GUID(0xE6F56009'u32, 0x611F, 0x4945, [0xBB'u8, 0xD2, 0x2D, 0x0C, 0xE5, 0x61, 0x20, 0x56])
  IID_ITTTSTerminalEvent* = DEFINE_GUID(0xD964788F'u32, 0x95A5, 0x461D, [0xAB'u8, 0x0C, 0xB9, 0x90, 0x0A, 0x6C, 0x27, 0x13])
  IID_ITypeChangeEvents* = DEFINE_GUID(0x00020410'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ITypeComp* = DEFINE_GUID(0x00020403'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ITypeFactory* = DEFINE_GUID(0x0000002E'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ITypeInfo* = DEFINE_GUID(0x00020401'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ITypeInfo2* = DEFINE_GUID(0x00020412'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ITypeLib* = DEFINE_GUID(0x00020402'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ITypeLib2* = DEFINE_GUID(0x00020411'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_ITypeMarshal* = DEFINE_GUID(0x0000002D'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IUmiADSIPrivate* = DEFINE_GUID(0xCFCECB01'u32, 0x3123, 0x4926, [0xB5'u8, 0xE3, 0x62, 0x78, 0x08, 0x27, 0x26, 0x43])
  IID_IUniformResourceLocatorA* = DEFINE_GUID(0xFBF23B80'u32, 0xE3F0, 0x101B, [0x84'u8, 0x88, 0x00, 0xAA, 0x00, 0x3E, 0x56, 0xF8])
  IID_IUniformResourceLocatorW* = DEFINE_GUID(0xCABB0DA0'u32, 0xDA57, 0x11CF, [0x99'u8, 0x74, 0x00, 0x20, 0xAF, 0xD7, 0x97, 0x62])
  IID_IUnknown* = DEFINE_GUID(0x00000000'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IUnsecuredApartment* = DEFINE_GUID(0x1CFABA8C'u32, 0x1523, 0x11D1, [0xAD'u8, 0x79, 0x00, 0xC0, 0x4F, 0xD8, 0xFD, 0xFF])
  IID_IUPnPDescriptionDocument* = DEFINE_GUID(0x11D1C1B2'u32, 0x7DAA, 0x4C9E, [0x95'u8, 0x95, 0x7F, 0x82, 0xED, 0x20, 0x6D, 0x1E])
  IID_IUPnPDescriptionDocumentCallback* = DEFINE_GUID(0x77394C69'u32, 0x5486, 0x40D6, [0x9B'u8, 0xC3, 0x49, 0x91, 0x98, 0x3E, 0x02, 0xDA])
  IID_IUPnPDevice* = DEFINE_GUID(0x3D44D0D1'u32, 0x98C9, 0x4889, [0xAC'u8, 0xD1, 0xF9, 0xD6, 0x74, 0xBF, 0x22, 0x21])
  IID_IUPnPDeviceControl* = DEFINE_GUID(0x204810BA'u32, 0x73B2, 0x11D4, [0xBF'u8, 0x42, 0x00, 0xB0, 0xD0, 0x11, 0x8B, 0x56])
  IID_IUPnPDeviceDocumentAccess* = DEFINE_GUID(0xE7772804'u32, 0x3287, 0x418E, [0x90'u8, 0x72, 0xCF, 0x2B, 0x47, 0x23, 0x89, 0x81])
  IID_IUPnPDeviceFinder* = DEFINE_GUID(0xADDA3D55'u32, 0x6F72, 0x4319, [0xBF'u8, 0xF9, 0x18, 0x60, 0x0A, 0x53, 0x9B, 0x10])
  IID_IUPnPDeviceFinderAddCallbackWithI* = DEFINE_GUID(0x983DFC0B'u32, 0x1796, 0x44DF, [0x89'u8, 0x75, 0xCA, 0x54, 0x5B, 0x62, 0x0E, 0xE5])
  IID_IUPnPDeviceFinderCallback* = DEFINE_GUID(0x415A984A'u32, 0x88B3, 0x49F3, [0x92'u8, 0xAF, 0x05, 0x08, 0xBE, 0xDF, 0x0D, 0x6C])
  IID_IUPnPDeviceHostICSSupport* = DEFINE_GUID(0x3FFC5AE5'u32, 0xA66B, 0x499C, [0xA1'u8, 0x80, 0xC7, 0x39, 0x3D, 0xB6, 0xBA, 0x8D])
  IID_IUPnPDeviceHostSetup* = DEFINE_GUID(0x6BD34909'u32, 0x54E7, 0x4FBF, [0x85'u8, 0x62, 0x7B, 0x89, 0x70, 0x9A, 0x58, 0x9A])
  IID_IUPnPDeviceProvider* = DEFINE_GUID(0x204810B8'u32, 0x73B2, 0x11D4, [0xBF'u8, 0x42, 0x00, 0xB0, 0xD0, 0x11, 0x8B, 0x56])
  IID_IUPnPDevices* = DEFINE_GUID(0xFDBC0C73'u32, 0xBDA3, 0x4C66, [0xAC'u8, 0x4F, 0xF2, 0xD9, 0x6F, 0xDA, 0xD6, 0x8C])
  IID_IUPnPEventSink* = DEFINE_GUID(0x204810B4'u32, 0x73B2, 0x11D4, [0xBF'u8, 0x42, 0x00, 0xB0, 0xD0, 0x11, 0x8B, 0x56])
  IID_IUPnPEventSource* = DEFINE_GUID(0x204810B5'u32, 0x73B2, 0x11D4, [0xBF'u8, 0x42, 0x00, 0xB0, 0xD0, 0x11, 0x8B, 0x56])
  IID_IUPnPNAT* = DEFINE_GUID(0xB171C812'u32, 0xCC76, 0x485A, [0x94'u8, 0xD8, 0xB6, 0xB3, 0xA2, 0x79, 0x4E, 0x99])
  IID_IUPnPPrivateCallbackHelper* = DEFINE_GUID(0x8DCC8327'u32, 0xDBE9, 0x48E6, [0x84'u8, 0x6C, 0x33, 0x72, 0x58, 0x65, 0xD5, 0x0C])
  IID_IUPnPPrivateDocumentCallbackHelp* = DEFINE_GUID(0x19432A8E'u32, 0x4A32, 0x4860, [0xB8'u8, 0xFB, 0x95, 0xB1, 0x11, 0x7C, 0xD4, 0xE5])
  IID_IUPnPPrivateServiceHelper2* = DEFINE_GUID(0x340F4076'u32, 0x6856, 0x48F9, [0xB3'u8, 0xC4, 0x97, 0xB9, 0x1B, 0x68, 0xD7, 0x7E])
  IID_IUPnPRegistrar* = DEFINE_GUID(0x204810B6'u32, 0x73B2, 0x11D4, [0xBF'u8, 0x42, 0x00, 0xB0, 0xD0, 0x11, 0x8B, 0x56])
  IID_IUPnPReregistrar* = DEFINE_GUID(0x204810B7'u32, 0x73B2, 0x11D4, [0xBF'u8, 0x42, 0x00, 0xB0, 0xD0, 0x11, 0x8B, 0x56])
  IID_IUPnPService* = DEFINE_GUID(0xA295019C'u32, 0xDC65, 0x47DD, [0x90'u8, 0xDC, 0x7F, 0xE9, 0x18, 0xA1, 0xAB, 0x44])
  IID_IUPnPServiceCallback* = DEFINE_GUID(0x31FADCA9'u32, 0xAB73, 0x464B, [0xB6'u8, 0x7D, 0x5C, 0x1D, 0x0F, 0x83, 0xC8, 0xB8])
  IID_IUPnPServiceCallbackPrivate* = DEFINE_GUID(0x24EA2515'u32, 0xF612, 0x4528, [0xBA'u8, 0x82, 0x7B, 0xD3, 0xDB, 0xBA, 0xD3, 0x03])
  IID_IUPnPServices* = DEFINE_GUID(0x3F8C8E9E'u32, 0x9A7A, 0x4DC8, [0xBC'u8, 0x41, 0xFF, 0x31, 0xFA, 0x37, 0x49, 0x56])
  IID_IUrlHistoryNotify* = DEFINE_GUID(0xBC40BEC1'u32, 0xC493, 0x11D0, [0x83'u8, 0x1B, 0x00, 0xC0, 0x4F, 0xD5, 0xAE, 0x38])
  IID_IUrlHistoryStg* = DEFINE_GUID(0x3C374A41'u32, 0xBAE4, 0x11CF, [0xBF'u8, 0x7D, 0x00, 0xAA, 0x00, 0x69, 0x46, 0xEE])
  IID_IUrlHistoryStg2* = DEFINE_GUID(0xAFA0DC11'u32, 0xC313, 0x11D0, [0x83'u8, 0x1A, 0x00, 0xC0, 0x4F, 0xD5, 0xAE, 0x38])
  IID_IUrlMon* = DEFINE_GUID(0x00000026'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IURLSearchHook* = DEFINE_GUID(0xAC60F6A0'u32, 0x0FD9, 0x11D0, [0x99'u8, 0xCB, 0x00, 0xC0, 0x4F, 0xD6, 0x44, 0x97])
  IID_IURLSearchHook2* = DEFINE_GUID(0x5EE44DA4'u32, 0x6D32, 0x46E3, [0x86'u8, 0xBC, 0x07, 0x54, 0x0D, 0xED, 0xD0, 0xE0])
  IID_IUrlTrackingStg* = DEFINE_GUID(0xF2F8CBB3'u32, 0xB040, 0x11D0, [0xBB'u8, 0x16, 0x00, 0xC0, 0x4F, 0xB6, 0x6F, 0x63])
  IID_IUserEventTimer* = DEFINE_GUID(0x0F504B94'u32, 0x6E42, 0x42E6, [0x99'u8, 0xE0, 0xE2, 0x0F, 0xAF, 0xE5, 0x2A, 0xB4])
  IID_IUserEventTimerCallback* = DEFINE_GUID(0xE9EAD8E6'u32, 0x2A25, 0x410E, [0x9B'u8, 0x58, 0xA9, 0xFB, 0xEF, 0x1D, 0xD1, 0xA2])
  IID_IUserNotification* = DEFINE_GUID(0xBA9711BA'u32, 0x5893, 0x4787, [0xA7'u8, 0xE1, 0x41, 0x27, 0x71, 0x51, 0x55, 0x0B])
  IID_IUtilityButton* = DEFINE_GUID(0x3050F6AF'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  IID_IVariantChangeType* = DEFINE_GUID(0xA6EF9862'u32, 0xC720, 0x11D0, [0x93'u8, 0x37, 0x00, 0xA0, 0xC9, 0x0D, 0xCA, 0xA9])
  IID_IVersionHost* = DEFINE_GUID(0x667115AC'u32, 0xDC02, 0x11D1, [0xBA'u8, 0x57, 0x00, 0xC0, 0x4F, 0xC2, 0x04, 0x0E])
  IID_IVersionVector* = DEFINE_GUID(0x4EB01410'u32, 0xDB1A, 0x11D1, [0xBA'u8, 0x53, 0x00, 0xC0, 0x4F, 0xC2, 0x04, 0x0E])
  IID_IViewChapter* = DEFINE_GUID(0x0C733A98'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IViewFilter* = DEFINE_GUID(0x0C733A9B'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IViewObject* = DEFINE_GUID(0x0000010D'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IViewObject2* = DEFINE_GUID(0x00000127'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IViewObjectEx* = DEFINE_GUID(0x3AF24292'u32, 0x0C96, 0x11CE, [0xA0'u8, 0xCF, 0x00, 0xAA, 0x00, 0x60, 0x0A, 0xB8])
  IID_IViewRowset* = DEFINE_GUID(0x0C733A97'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IViewSort* = DEFINE_GUID(0x0C733A9A'u32, 0x2A1C, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  IID_IVirusScanEngine* = DEFINE_GUID(0x083DB180'u32, 0xB4A8, 0x11CF, [0xAA'u8, 0xFA, 0x00, 0xAA, 0x00, 0xB6, 0x01, 0x5C])
  IID_IVirusScanner* = DEFINE_GUID(0x4589BEE0'u32, 0xB4B1, 0x11CF, [0xAA'u8, 0xFA, 0x00, 0xAA, 0x00, 0xB6, 0x01, 0x5C])
  IID_IWaitMultiple* = DEFINE_GUID(0x0000002B'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IWbemAddressResolution* = DEFINE_GUID(0xF7CE2E12'u32, 0x8C90, 0x11D1, [0x9E'u8, 0x7B, 0x00, 0xC0, 0x4F, 0xC3, 0x24, 0xA8])
  IID_IWbemBackupRestore* = DEFINE_GUID(0xC49E32C7'u32, 0xBC8B, 0x11D2, [0x85'u8, 0xD4, 0x00, 0x10, 0x5A, 0x1F, 0x83, 0x04])
  IID_IWbemBackupRestoreEx* = DEFINE_GUID(0xA359DEC5'u32, 0xE813, 0x4834, [0x8A'u8, 0x2A, 0xBA, 0x7F, 0x1D, 0x77, 0x7D, 0x76])
  IID_IWbemCallResult* = DEFINE_GUID(0x44ACA675'u32, 0xE8FC, 0x11D0, [0xA0'u8, 0x7C, 0x00, 0xC0, 0x4F, 0xB6, 0x88, 0x20])
  IID_IWbemCallStatus* = DEFINE_GUID(0x4212DC47'u32, 0x142E, 0x4C6C, [0xBC'u8, 0x49, 0x6C, 0xA2, 0x32, 0xDD, 0x09, 0x59])
  IID_IWbemClassObject* = DEFINE_GUID(0xDC12A681'u32, 0x737F, 0x11CF, [0x88'u8, 0x4D, 0x00, 0xAA, 0x00, 0x4B, 0x2E, 0x24])
  IID_IWbemClientConnectionTransport* = DEFINE_GUID(0xA889C72A'u32, 0xFCC1, 0x4A9E, [0xAF'u8, 0x61, 0xED, 0x07, 0x13, 0x33, 0xFB, 0x5B])
  IID_IWbemClientTransport* = DEFINE_GUID(0xF7CE2E11'u32, 0x8C90, 0x11D1, [0x9E'u8, 0x7B, 0x00, 0xC0, 0x4F, 0xC3, 0x24, 0xA8])
  IID_IWbemConfigure* = DEFINE_GUID(0x9A368276'u32, 0x26CF, 0x11D0, [0xAD'u8, 0x3C, 0x00, 0xC0, 0x4F, 0xD8, 0xFD, 0xFF])
  IID_IWbemConfigureRefresher* = DEFINE_GUID(0x49353C92'u32, 0x516B, 0x11D1, [0xAE'u8, 0xA6, 0x00, 0xC0, 0x4F, 0xB6, 0x88, 0x20])
  IID_IWbemConnectorLogin* = DEFINE_GUID(0xD8EC9CB1'u32, 0xB135, 0x4F10, [0x8B'u8, 0x1B, 0xC7, 0x18, 0x8B, 0xB0, 0xD1, 0x86])
  IID_IWbemConstructClassObject* = DEFINE_GUID(0x9EF76194'u32, 0x70D5, 0x11D1, [0xAD'u8, 0x90, 0x00, 0xC0, 0x4F, 0xD8, 0xFD, 0xFF])
  IID_IWbemContext* = DEFINE_GUID(0x44ACA674'u32, 0xE8FC, 0x11D0, [0xA0'u8, 0x7C, 0x00, 0xC0, 0x4F, 0xB6, 0x88, 0x20])
  IID_IWbemDecoupledBasicEventProvider* = DEFINE_GUID(0x86336D20'u32, 0xCA11, 0x4786, [0x9E'u8, 0xF1, 0xBC, 0x8A, 0x94, 0x6B, 0x42, 0xFC])
  IID_IWbemDecoupledEventSink* = DEFINE_GUID(0xCD94EBF2'u32, 0xE622, 0x11D2, [0x9C'u8, 0xB3, 0x00, 0x10, 0x5A, 0x1F, 0x48, 0x01])
  IID_IWbemDecoupledRegistrar* = DEFINE_GUID(0x1005CBCF'u32, 0xE64F, 0x4646, [0xBC'u8, 0xD3, 0x3A, 0x08, 0x9D, 0x8A, 0x84, 0xB4])
  IID_IWbemEventConsumerProvider* = DEFINE_GUID(0xE246107A'u32, 0xB06E, 0x11D0, [0xAD'u8, 0x61, 0x00, 0xC0, 0x4F, 0xD8, 0xFD, 0xFF])
  IID_IWbemEventConsumerProviderEx* = DEFINE_GUID(0x17CF534A'u32, 0xD8A3, 0x4AD0, [0xAC'u8, 0x92, 0x5E, 0x3D, 0x01, 0x71, 0x71, 0x51])
  IID_IWbemEventProvider* = DEFINE_GUID(0xE245105B'u32, 0xB06E, 0x11D0, [0xAD'u8, 0x61, 0x00, 0xC0, 0x4F, 0xD8, 0xFD, 0xFF])
  IID_IWbemEventProviderQuerySink* = DEFINE_GUID(0x580ACAF8'u32, 0xFA1C, 0x11D0, [0xAD'u8, 0x72, 0x00, 0xC0, 0x4F, 0xD8, 0xFD, 0xFF])
  IID_IWbemEventProviderSecurity* = DEFINE_GUID(0x631F7D96'u32, 0xD993, 0x11D2, [0xB3'u8, 0x39, 0x00, 0x10, 0x5A, 0x1F, 0x4A, 0xAF])
  IID_IWbemEventSink* = DEFINE_GUID(0x3AE0080A'u32, 0x7E3A, 0x4366, [0xBF'u8, 0x89, 0x0F, 0xEE, 0xDC, 0x93, 0x16, 0x59])
  IID_IWbemHiPerfEnum* = DEFINE_GUID(0x2705C288'u32, 0x79AE, 0x11D2, [0xB3'u8, 0x48, 0x00, 0x10, 0x5A, 0x1F, 0x81, 0x77])
  IID_IWbemHiPerfProvider* = DEFINE_GUID(0x49353C93'u32, 0x516B, 0x11D1, [0xAE'u8, 0xA6, 0x00, 0xC0, 0x4F, 0xB6, 0x88, 0x20])
  IID_IWbemLevel1Login* = DEFINE_GUID(0xF309AD18'u32, 0xD86A, 0x11D0, [0xA0'u8, 0x75, 0x00, 0xC0, 0x4F, 0xB6, 0x88, 0x20])
  IID_IWbemLocator* = DEFINE_GUID(0xDC12A687'u32, 0x737F, 0x11CF, [0x88'u8, 0x4D, 0x00, 0xAA, 0x00, 0x4B, 0x2E, 0x24])
  IID_IWbemObjectAccess* = DEFINE_GUID(0x49353C9A'u32, 0x516B, 0x11D1, [0xAE'u8, 0xA6, 0x00, 0xC0, 0x4F, 0xB6, 0x88, 0x20])
  IID_IWbemObjectSink* = DEFINE_GUID(0x7C857801'u32, 0x7381, 0x11CF, [0x88'u8, 0x4D, 0x00, 0xAA, 0x00, 0x4B, 0x2E, 0x24])
  IID_IWbemObjectTextSrc* = DEFINE_GUID(0xBFBF883A'u32, 0xCAD7, 0x11D3, [0xA1'u8, 0x1B, 0x00, 0x10, 0x5A, 0x1F, 0x51, 0x5A])
  IID_IWbemPath* = DEFINE_GUID(0x3BC15AF2'u32, 0x736C, 0x477E, [0x9E'u8, 0x51, 0x23, 0x8A, 0xF8, 0x66, 0x7D, 0xCC])
  IID_IWbemPathKeyList* = DEFINE_GUID(0x9AE62877'u32, 0x7544, 0x4BB0, [0xAA'u8, 0x26, 0xA1, 0x38, 0x24, 0x65, 0x9E, 0xD6])
  IID_IWbemPropertyProvider* = DEFINE_GUID(0xCE61E841'u32, 0x65BC, 0x11D0, [0xB6'u8, 0xBD, 0x00, 0xAA, 0x00, 0x32, 0x40, 0xC7])
  IID_IWbemProviderIdentity* = DEFINE_GUID(0x631F7D97'u32, 0xD993, 0x11D2, [0xB3'u8, 0x39, 0x00, 0x10, 0x5A, 0x1F, 0x4A, 0xAF])
  IID_IWbemProviderInit* = DEFINE_GUID(0x1BE41572'u32, 0x91DD, 0x11D1, [0xAE'u8, 0xB2, 0x00, 0xC0, 0x4F, 0xB6, 0x88, 0x20])
  IID_IWbemProviderInitSink* = DEFINE_GUID(0x1BE41571'u32, 0x91DD, 0x11D1, [0xAE'u8, 0xB2, 0x00, 0xC0, 0x4F, 0xB6, 0x88, 0x20])
  IID_IWbemQualifierSet* = DEFINE_GUID(0xDC12A680'u32, 0x737F, 0x11CF, [0x88'u8, 0x4D, 0x00, 0xAA, 0x00, 0x4B, 0x2E, 0x24])
  IID_IWbemQuery* = DEFINE_GUID(0x81166F58'u32, 0xDD98, 0x11D3, [0xA1'u8, 0x20, 0x00, 0x10, 0x5A, 0x1F, 0x51, 0x5A])
  IID_IWbemRawSdAccessor* = DEFINE_GUID(0xC1E2D759'u32, 0xCABD, 0x11D3, [0xA1'u8, 0x1B, 0x00, 0x10, 0x5A, 0x1F, 0x51, 0x5A])
  IID_IWbemRefresher* = DEFINE_GUID(0x49353C99'u32, 0x516B, 0x11D1, [0xAE'u8, 0xA6, 0x00, 0xC0, 0x4F, 0xB6, 0x88, 0x20])
  IID_IWbemServices* = DEFINE_GUID(0x9556DC99'u32, 0x828C, 0x11CF, [0xA3'u8, 0x7E, 0x00, 0xAA, 0x00, 0x32, 0x40, 0xC7])
  IID_IWbemShutdown* = DEFINE_GUID(0xB7B31DF9'u32, 0xD515, 0x11D3, [0xA1'u8, 0x1C, 0x00, 0x10, 0x5A, 0x1F, 0x51, 0x5A])
  IID_IWbemStatusCodeText* = DEFINE_GUID(0xEB87E1BC'u32, 0x3233, 0x11D2, [0xAE'u8, 0xC9, 0x00, 0xC0, 0x4F, 0xB6, 0x88, 0x20])
  IID_IWbemTransport* = DEFINE_GUID(0x553FE584'u32, 0x2156, 0x11D0, [0xB6'u8, 0xAE, 0x00, 0xAA, 0x00, 0x32, 0x40, 0xC7])
  IID_IWbemUnboundObjectSink* = DEFINE_GUID(0xE246107B'u32, 0xB06E, 0x11D0, [0xAD'u8, 0x61, 0x00, 0xC0, 0x4F, 0xD8, 0xFD, 0xFF])
  IID_IWBScriptControl* = DEFINE_GUID(0xA5170870'u32, 0x0CF8, 0x11D1, [0x8B'u8, 0x91, 0x00, 0x80, 0xC7, 0x44, 0xF3, 0x89])
  IID_IWCContextMenuCallback* = DEFINE_GUID(0x97DEDE64'u32, 0xFC6B, 0x11CF, [0xB5'u8, 0xF5, 0x00, 0xA0, 0xC9, 0x0A, 0xB5, 0x05])
  IID_IWCPropertySheetCallback* = DEFINE_GUID(0x97DEDE60'u32, 0xFC6B, 0x11CF, [0xB5'u8, 0xF5, 0x00, 0xA0, 0xC9, 0x0A, 0xB5, 0x05])
  IID_IWCWizard97Callback* = DEFINE_GUID(0x97DEDE67'u32, 0xFC6B, 0x11CF, [0xB5'u8, 0xF5, 0x00, 0xA0, 0xC9, 0x0A, 0xB5, 0x05])
  IID_IWCWizardCallback* = DEFINE_GUID(0x97DEDE62'u32, 0xFC6B, 0x11CF, [0xB5'u8, 0xF5, 0x00, 0xA0, 0xC9, 0x0A, 0xB5, 0x05])
  IID_IWebBridge* = DEFINE_GUID(0xAE24FDAD'u32, 0x03C6, 0x11D1, [0x8B'u8, 0x76, 0x00, 0x80, 0xC7, 0x44, 0xF3, 0x89])
  IID_IWebBrowser* = DEFINE_GUID(0xEAB22AC1'u32, 0x30C1, 0x11CF, [0xA7'u8, 0xEB, 0x00, 0x00, 0xC0, 0x5B, 0xAE, 0x0B])
  IID_IWebBrowser2* = DEFINE_GUID(0xD30C1661'u32, 0xCDAF, 0x11D0, [0x8A'u8, 0x3E, 0x00, 0xC0, 0x4F, 0xC9, 0xE2, 0x6E])
  IID_IWebBrowserApp* = DEFINE_GUID(0x0002DF05'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  IID_IWebWizardExtension* = DEFINE_GUID(0x0E6B3F66'u32, 0x98D1, 0x48C0, [0xA2'u8, 0x22, 0xFB, 0xDE, 0x74, 0xE2, 0xFB, 0xC5])
  IID_IWebWizardHost* = DEFINE_GUID(0x18BCC359'u32, 0x4990, 0x4BFB, [0xB9'u8, 0x51, 0x3C, 0x83, 0x70, 0x2B, 0xE5, 0xF9])
  IID_IWEExtendContextMenu* = DEFINE_GUID(0x97DEDE65'u32, 0xFC6B, 0x11CF, [0xB5'u8, 0xF5, 0x00, 0xA0, 0xC9, 0x0A, 0xB5, 0x05])
  IID_IWEExtendPropertySheet* = DEFINE_GUID(0x97DEDE61'u32, 0xFC6B, 0x11CF, [0xB5'u8, 0xF5, 0x00, 0xA0, 0xC9, 0x0A, 0xB5, 0x05])
  IID_IWEExtendWizard* = DEFINE_GUID(0x97DEDE63'u32, 0xFC6B, 0x11CF, [0xB5'u8, 0xF5, 0x00, 0xA0, 0xC9, 0x0A, 0xB5, 0x05])
  IID_IWEExtendWizard97* = DEFINE_GUID(0x97DEDE68'u32, 0xFC6B, 0x11CF, [0xB5'u8, 0xF5, 0x00, 0xA0, 0xC9, 0x0A, 0xB5, 0x05])
  IID_IWEInvokeCommand* = DEFINE_GUID(0x97DEDE66'u32, 0xFC6B, 0x11CF, [0xB5'u8, 0xF5, 0x00, 0xA0, 0xC9, 0x0A, 0xB5, 0x05])
  IID_Iwfolders* = DEFINE_GUID(0xBAE31F98'u32, 0x1B81, 0x11D2, [0xA9'u8, 0x7A, 0x00, 0xC0, 0x4F, 0x8E, 0xCB, 0x02])
  IID_IWindowForBindingUI* = DEFINE_GUID(0x79EAC9D5'u32, 0xBAFA, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IWinInetHttpInfo* = DEFINE_GUID(0x79EAC9D8'u32, 0xBAFA, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IWinInetInfo* = DEFINE_GUID(0x79EAC9D6'u32, 0xBAFA, 0x11CE, [0x8C'u8, 0x82, 0x00, 0xAA, 0x00, 0x4B, 0xA9, 0x0B])
  IID_IWizardExtension* = DEFINE_GUID(0xC02EA696'u32, 0x86CC, 0x491E, [0x9B'u8, 0x23, 0x74, 0x39, 0x4A, 0x04, 0x44, 0xA8])
  IID_IWizardSite* = DEFINE_GUID(0x88960F5B'u32, 0x422F, 0x4E7B, [0x80'u8, 0x13, 0x73, 0x41, 0x53, 0x81, 0xC3, 0xC3])
  IID_IWMIExtension* = DEFINE_GUID(0xADC1F06E'u32, 0x5C7E, 0x11D2, [0x8B'u8, 0x74, 0x00, 0x10, 0x4B, 0x2A, 0xFB, 0x41])
  IID_IWordBreaker* = DEFINE_GUID(0xD53552C8'u32, 0x77E3, 0x101A, [0xB5'u8, 0x52, 0x08, 0x00, 0x2B, 0x33, 0xB0, 0xE6])
  IID_IWordSink* = DEFINE_GUID(0xCC907054'u32, 0xC058, 0x101A, [0xB5'u8, 0x54, 0x08, 0x00, 0x2B, 0x33, 0xB0, 0xE6])
  IID_IWrappedProtocol* = DEFINE_GUID(0x53C84785'u32, 0x8425, 0x4DC5, [0x97'u8, 0x1B, 0xE5, 0x8D, 0x9C, 0x19, 0xF9, 0xB6])
  IID_IXMLAttribute* = DEFINE_GUID(0xD4D4A0FC'u32, 0x3B73, 0x11D1, [0xB2'u8, 0xB4, 0x00, 0xC0, 0x4F, 0xB9, 0x25, 0x96])
  IID_IXMLDocument* = DEFINE_GUID(0xF52E2B61'u32, 0x18A1, 0x11D1, [0xB1'u8, 0x05, 0x00, 0x80, 0x5F, 0x49, 0x91, 0x6B])
  IID_IXMLDocument2* = DEFINE_GUID(0x2B8DE2FE'u32, 0x8D2D, 0x11D1, [0xB2'u8, 0xFC, 0x00, 0xC0, 0x4F, 0xD9, 0x15, 0xA9])
  IID_IXMLDOMAttribute* = DEFINE_GUID(0x2933BF85'u32, 0x7B36, 0x11D2, [0xB2'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x98, 0x3E, 0x60])
  IID_IXMLDOMCDATASection* = DEFINE_GUID(0x2933BF8A'u32, 0x7B36, 0x11D2, [0xB2'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x98, 0x3E, 0x60])
  IID_IXMLDOMCharacterData* = DEFINE_GUID(0x2933BF84'u32, 0x7B36, 0x11D2, [0xB2'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x98, 0x3E, 0x60])
  IID_IXMLDOMComment* = DEFINE_GUID(0x2933BF88'u32, 0x7B36, 0x11D2, [0xB2'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x98, 0x3E, 0x60])
  IID_IXMLDOMDocument* = DEFINE_GUID(0x2933BF81'u32, 0x7B36, 0x11D2, [0xB2'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x98, 0x3E, 0x60])
  IID_IXMLDOMDocumentFragment* = DEFINE_GUID(0x3EFAA413'u32, 0x272F, 0x11D2, [0x83'u8, 0x6F, 0x00, 0x00, 0xF8, 0x7A, 0x77, 0x82])
  IID_IXMLDOMDocumentType* = DEFINE_GUID(0x2933BF8B'u32, 0x7B36, 0x11D2, [0xB2'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x98, 0x3E, 0x60])
  IID_IXMLDOMElement* = DEFINE_GUID(0x2933BF86'u32, 0x7B36, 0x11D2, [0xB2'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x98, 0x3E, 0x60])
  IID_IXMLDOMEntity* = DEFINE_GUID(0x2933BF8D'u32, 0x7B36, 0x11D2, [0xB2'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x98, 0x3E, 0x60])
  IID_IXMLDOMEntityReference* = DEFINE_GUID(0x2933BF8E'u32, 0x7B36, 0x11D2, [0xB2'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x98, 0x3E, 0x60])
  IID_IXMLDOMImplementation* = DEFINE_GUID(0x2933BF8F'u32, 0x7B36, 0x11D2, [0xB2'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x98, 0x3E, 0x60])
  IID_IXMLDOMNamedNodeMap* = DEFINE_GUID(0x2933BF83'u32, 0x7B36, 0x11D2, [0xB2'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x98, 0x3E, 0x60])
  IID_IXMLDOMNode* = DEFINE_GUID(0x2933BF80'u32, 0x7B36, 0x11D2, [0xB2'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x98, 0x3E, 0x60])
  IID_IXMLDOMNodeList* = DEFINE_GUID(0x2933BF82'u32, 0x7B36, 0x11D2, [0xB2'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x98, 0x3E, 0x60])
  IID_IXMLDOMNotation* = DEFINE_GUID(0x2933BF8C'u32, 0x7B36, 0x11D2, [0xB2'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x98, 0x3E, 0x60])
  IID_IXMLDOMParseError* = DEFINE_GUID(0x3EFAA426'u32, 0x272F, 0x11D2, [0x83'u8, 0x6F, 0x00, 0x00, 0xF8, 0x7A, 0x77, 0x82])
  IID_IXMLDOMProcessingInstruction* = DEFINE_GUID(0x2933BF89'u32, 0x7B36, 0x11D2, [0xB2'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x98, 0x3E, 0x60])
  IID_IXMLDOMText* = DEFINE_GUID(0x2933BF87'u32, 0x7B36, 0x11D2, [0xB2'u8, 0x0E, 0x00, 0xC0, 0x4F, 0x98, 0x3E, 0x60])
  IID_IXMLDSOControl* = DEFINE_GUID(0x310AFA62'u32, 0x0575, 0x11D2, [0x9C'u8, 0xA9, 0x00, 0x60, 0xB0, 0xEC, 0x3D, 0x39])
  IID_IXMLElement* = DEFINE_GUID(0x3F7F31AC'u32, 0xE15F, 0x11D0, [0x9C'u8, 0x25, 0x00, 0xC0, 0x4F, 0xC9, 0x9C, 0x8E])
  IID_IXMLElement2* = DEFINE_GUID(0x2B8DE2FF'u32, 0x8D2D, 0x11D1, [0xB2'u8, 0xFC, 0x00, 0xC0, 0x4F, 0xD9, 0x15, 0xA9])
  IID_IXMLElementCollection* = DEFINE_GUID(0x65725580'u32, 0x9B5D, 0x11D0, [0x9B'u8, 0xFE, 0x00, 0xC0, 0x4F, 0xC9, 0x9C, 0x8E])
  IID_IXMLError* = DEFINE_GUID(0x948C5AD3'u32, 0xC58D, 0x11D0, [0x9C'u8, 0x0B, 0x00, 0xC0, 0x4F, 0xC9, 0x9C, 0x8E])
  IID_IXMLGenericParse* = DEFINE_GUID(0xE4E23071'u32, 0x4D07, 0x11D2, [0xAE'u8, 0x76, 0x00, 0x80, 0xC7, 0x3B, 0xC1, 0x99])
  IID_IXMLHttpRequest* = DEFINE_GUID(0xED8C108D'u32, 0x4349, 0x11D2, [0x91'u8, 0xA4, 0x00, 0xC0, 0x4F, 0x79, 0x69, 0xE8])
  IID_IXMLNodeFactory* = DEFINE_GUID(0xD242361F'u32, 0x51A0, 0x11D2, [0x9C'u8, 0xAF, 0x00, 0x60, 0xB0, 0xEC, 0x3D, 0x39])
  IID_IXMLNodeSource* = DEFINE_GUID(0xD242361D'u32, 0x51A0, 0x11D2, [0x9C'u8, 0xAF, 0x00, 0x60, 0xB0, 0xEC, 0x3D, 0x39])
  IID_IXMLParser* = DEFINE_GUID(0xD242361E'u32, 0x51A0, 0x11D2, [0x9C'u8, 0xAF, 0x00, 0x60, 0xB0, 0xEC, 0x3D, 0x39])
  IID_IXTLRuntime* = DEFINE_GUID(0x3EFAA425'u32, 0x272F, 0x11D2, [0x83'u8, 0x6F, 0x00, 0x00, 0xF8, 0x7A, 0x77, 0x82])
  IID_StdOle* = DEFINE_GUID(0x00020430'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  KSDATAFORMAT_SUBTYPE_DIRECTMUSIC* = DEFINE_GUID(0x1A82F8BC'u32, 0x3F8B, 0x11D2, [0xB7'u8, 0x74, 0x00, 0x60, 0x08, 0x33, 0x16, 0xC1])
  KSDATAFORMAT_SUBTYPE_MIDI* = DEFINE_GUID(0x1D262760'u32, 0xE957, 0x11CF, [0xA5'u8, 0xD6, 0x28, 0xDB, 0x04, 0xC1, 0x00, 0x00])
  LIBID_Accessibility* = DEFINE_GUID(0x1EA4DBF0'u32, 0x3C3B, 0x11CF, [0x81'u8, 0x0C, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71])
  LIBID_ActiveIMM* = DEFINE_GUID(0x4955DD30'u32, 0xB159, 0x11D0, [0x8F'u8, 0xCF, 0x00, 0xAA, 0x00, 0x6B, 0xCC, 0x59])
  LIBID_ADs* = DEFINE_GUID(0x97D25DB0'u32, 0x0363, 0x11CF, [0xAB'u8, 0xC4, 0x02, 0x60, 0x8C, 0x9E, 0x75, 0x53])
  LIBID_ALGLib* = DEFINE_GUID(0xB6D1D098'u32, 0xE235, 0x4B99, [0xBA'u8, 0x98, 0x7C, 0x62, 0x4F, 0xD8, 0x75, 0xDB])
  LIBID_AutoDiscovery* = DEFINE_GUID(0x4EAFB888'u32, 0x81CB, 0x4EBA, [0xBA'u8, 0xC9, 0xDA, 0x25, 0x4E, 0x57, 0x21, 0xF1])
  LIBID_BackgroundCopyManager* = DEFINE_GUID(0x1DEEB74F'u32, 0x7915, 0x4560, [0xB5'u8, 0x58, 0x91, 0x8C, 0x83, 0xF1, 0x76, 0xA6])
  LIBID_BackgroundCopyManager1_5* = DEFINE_GUID(0xEA9319EA'u32, 0xC628, 0x480F, [0x83'u8, 0x31, 0x76, 0x8F, 0xAC, 0x39, 0x7E, 0x4E])
  LIBID_BackgroundCopyQMgr* = DEFINE_GUID(0xF5B26DCB'u32, 0xB37E, 0x4D7C, [0xAE'u8, 0x7A, 0x1C, 0xB3, 0xFB, 0xEB, 0x18, 0x3E])
  LIBID_CHANNELMGR* = DEFINE_GUID(0x4804F2E0'u32, 0xD16E, 0x11D0, [0x80'u8, 0x2B, 0x00, 0xC0, 0x4F, 0xD7, 0x5D, 0x13])
  LIBID_CLADMWIZLib* = DEFINE_GUID(0x24F97140'u32, 0x6689, 0x11D1, [0x9A'u8, 0xA7, 0x00, 0xC0, 0x4F, 0xB9, 0x3A, 0x80])
  LIBID_ClusCfgWizard* = DEFINE_GUID(0x6D01FEDC'u32, 0x8D34, 0x4728, [0xAD'u8, 0x0B, 0xB3, 0xA2, 0x1A, 0x10, 0x3B, 0x42])
  LIBID_CommonControlObjects* = DEFINE_GUID(0xBCADA15B'u32, 0xB428, 0x420C, [0x8D'u8, 0x28, 0x02, 0x35, 0x90, 0x92, 0x4C, 0x9F])
  LIBID_DirectAnimation* = DEFINE_GUID(0xBCBB1F74'u32, 0xE384, 0x11D0, [0x9B'u8, 0x99, 0x00, 0xC0, 0x4F, 0xC2, 0xF5, 0x1D])
  LIBID_DWbemServices_v3* = DEFINE_GUID(0xCB7CA031'u32, 0xF729, 0x11D0, [0x9E'u8, 0x4D, 0x00, 0xC0, 0x4F, 0xC3, 0x24, 0xA8])
  LIBID_DXTMSFTLib* = DEFINE_GUID(0x5E77EB03'u32, 0x937C, 0x11D1, [0xB0'u8, 0x47, 0x00, 0xAA, 0x00, 0x3B, 0x60, 0x61])
  LIBID_DXTRANSLib* = DEFINE_GUID(0x54314D1D'u32, 0x35FE, 0x11D1, [0x81'u8, 0xA1, 0x00, 0x00, 0xF8, 0x75, 0x57, 0xDB])
  LIBID_DXTRANSPLib* = DEFINE_GUID(0x527A4DA4'u32, 0x7F2C, 0x11D2, [0xB1'u8, 0x2D, 0x00, 0x00, 0xF8, 0x1F, 0x59, 0x95])
  LIBID_EventQLib* = DEFINE_GUID(0xA70080F2'u32, 0x403B, 0x11D1, [0x88'u8, 0x36, 0x00, 0xA0, 0xC9, 0x49, 0xAC, 0x67])
  LIBID_IASPolicyLib* = DEFINE_GUID(0x6BC096A5'u32, 0x0CE6, 0x11D1, [0xBA'u8, 0xAE, 0x00, 0xC0, 0x4F, 0xC2, 0xE2, 0x0D])
  LIBID_IEXTagLib* = DEFINE_GUID(0x7E8BC440'u32, 0xAEFF, 0x11D1, [0x89'u8, 0xC2, 0x00, 0xC0, 0x4F, 0xB6, 0xBF, 0xC4])
  LIBID_IMAPILib* = DEFINE_GUID(0xC49F2184'u32, 0x50A7, 0x11D3, [0x91'u8, 0x44, 0x00, 0x10, 0x4B, 0xA1, 0x1C, 0x5E])
  LIBID_ImgUtilLib* = DEFINE_GUID(0xCF790840'u32, 0x2DC4, 0x11D0, [0xB7'u8, 0x24, 0x00, 0xAA, 0x00, 0x6C, 0x1A, 0x01])
  LIBID_ITRKADMNLib* = DEFINE_GUID(0xA2531F35'u32, 0xC67D, 0x11D0, [0x8C'u8, 0xB1, 0x00, 0xC0, 0x4F, 0xD9, 0x0F, 0x85])
  LIBID_McastLib* = DEFINE_GUID(0x64217CC0'u32, 0xA285, 0x11D1, [0x86'u8, 0x97, 0x00, 0x60, 0x08, 0xB0, 0xE5, 0xD2])
  LIBID_MSHTML* = DEFINE_GUID(0x3050F1C5'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  LIBID_MSHTMLINTERNAL* = DEFINE_GUID(0x3050F7E1'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  LIBID_MSTIME* = DEFINE_GUID(0x87C96271'u32, 0xADDB, 0x4745, [0xB2'u8, 0xE8, 0xDF, 0x88, 0xA8, 0x47, 0x2F, 0xD1])
  LIBID_MSXML* = DEFINE_GUID(0xD63E0CE2'u32, 0xA0A2, 0x11D0, [0x9C'u8, 0x02, 0x00, 0xC0, 0x4F, 0xC9, 0x9C, 0x8E])
  LIBID_MultiLanguage* = DEFINE_GUID(0x275C23E0'u32, 0x3747, 0x11D0, [0x9F'u8, 0xEA, 0x00, 0xAA, 0x00, 0x3F, 0x86, 0x46])
  LIBID_NATUPNPLib* = DEFINE_GUID(0x1C565858'u32, 0xF302, 0x471E, [0xB4'u8, 0x09, 0xF1, 0x80, 0xAA, 0x4A, 0xBE, 0xC6])
  LIBID_NETCONLib* = DEFINE_GUID(0x43E734CA'u32, 0x043D, 0x4A70, [0x9A'u8, 0x2C, 0xA8, 0xF2, 0x54, 0x06, 0x3D, 0x91])
  LIBID_PassiveSink* = DEFINE_GUID(0xE002EEEF'u32, 0xE6EA, 0x11D2, [0x9C'u8, 0xB3, 0x00, 0x10, 0x5A, 0x1F, 0x48, 0x01])
  LIBID_ProcessDebugManagerLib* = DEFINE_GUID(0x78A51821'u32, 0x51F4, 0x11D0, [0x8F'u8, 0x20, 0x00, 0x80, 0x5F, 0x2C, 0xD0, 0x64])
  LIBID_RENDLib* = DEFINE_GUID(0xF1029E4D'u32, 0xCB5B, 0x11D0, [0x8D'u8, 0x59, 0x00, 0xC0, 0x4F, 0xD9, 0x1A, 0xC0])
  LIBID_RTCCORELib* = DEFINE_GUID(0xCD260094'u32, 0xDE10, 0x4AEE, [0xAC'u8, 0x73, 0xEF, 0x87, 0xF6, 0xE1, 0x26, 0x83])
  LIBID_SDOIASLib* = DEFINE_GUID(0x81DDF732'u32, 0x4AA8, 0x4A35, [0xBD'u8, 0xFF, 0x8B, 0x42, 0xEF, 0xE7, 0xC6, 0x24])
  LIBID_SDPBLBLib* = DEFINE_GUID(0xC259D79A'u32, 0xC8AB, 0x11D0, [0x8D'u8, 0x58, 0x00, 0xC0, 0x4F, 0xD9, 0x1A, 0xC0])
  LIBID_SensEvents* = DEFINE_GUID(0xD597DEED'u32, 0x5B9F, 0x11D1, [0x8D'u8, 0xD2, 0x00, 0xAA, 0x00, 0x4A, 0xBD, 0x5E])
  LIBID_SHDocVw* = DEFINE_GUID(0xEAB22AC0'u32, 0x30C1, 0x11CF, [0xA7'u8, 0xEB, 0x00, 0x00, 0xC0, 0x5B, 0xAE, 0x0B])
  LIBID_Shell32* = DEFINE_GUID(0x50A7E9B0'u32, 0x70EF, 0x11D1, [0xB7'u8, 0x5A, 0x00, 0xA0, 0xC9, 0x05, 0x64, 0xFE])
  LIBID_ShellImageData* = DEFINE_GUID(0x0B8AFF06'u32, 0x8DF0, 0x4F13, [0x8E'u8, 0x25, 0x25, 0xB2, 0x31, 0x9C, 0x43, 0x6A])
  LIBID_ShellObjects* = DEFINE_GUID(0x50A7E9B1'u32, 0x70EF, 0x11D1, [0xB7'u8, 0x5A, 0x00, 0xA0, 0xC9, 0x05, 0x64, 0xFE])
  LIBID_SHGINALib* = DEFINE_GUID(0x0A055C02'u32, 0xBABE, 0x4480, [0xBB'u8, 0x7B, 0xA8, 0xEC, 0x72, 0x3C, 0xE9, 0xC0])
  LIBID_SubscriptionMgr* = DEFINE_GUID(0xC54FD88A'u32, 0xFFA1, 0x11D0, [0xBC'u8, 0x5E, 0x00, 0xC0, 0x4F, 0xD9, 0x29, 0xDB])
  LIBID_TAPI3Lib* = DEFINE_GUID(0x21D6D480'u32, 0xA88B, 0x11D0, [0x83'u8, 0xDD, 0x00, 0xAA, 0x00, 0x3C, 0xCA, 0xBD])
  LIBID_TERMMGRLib* = DEFINE_GUID(0x28DCD85B'u32, 0xACA4, 0x11D0, [0xA0'u8, 0x28, 0x00, 0xAA, 0x00, 0xB6, 0x05, 0xA4])
  LIBID_UPnPHostLib* = DEFINE_GUID(0x204810B3'u32, 0x73B2, 0x11D4, [0xBF'u8, 0x42, 0x00, 0xB0, 0xD0, 0x11, 0x8B, 0x56])
  LIBID_UPNPLib* = DEFINE_GUID(0xDB3442A7'u32, 0xA2E9, 0x4A59, [0x9C'u8, 0xB5, 0xF5, 0xC1, 0xA5, 0xD9, 0x01, 0xE5])
  LIBID_VIRUSSCAN* = DEFINE_GUID(0x5F47DB70'u32, 0xD9FE, 0x11D0, [0x95'u8, 0x64, 0x00, 0x60, 0x97, 0x97, 0xEA, 0x4F])
  LIBID_WbemClient_v1* = DEFINE_GUID(0x7EC196FE'u32, 0x7005, 0x11D1, [0xAD'u8, 0x90, 0x00, 0xC0, 0x4F, 0xD8, 0xFD, 0xFF])
  LIBID_WbemProviders_v1* = DEFINE_GUID(0x092DF710'u32, 0x7010, 0x11D1, [0xAD'u8, 0x90, 0x00, 0xC0, 0x4F, 0xD8, 0xFD, 0xFF])
  LIBID_WbemScripting* = DEFINE_GUID(0x565783C6'u32, 0xCB41, 0x11D1, [0x8B'u8, 0x02, 0x00, 0x60, 0x08, 0x06, 0xD9, 0xB6])
  LIBID_WbemTransports_v1* = DEFINE_GUID(0x027947F3'u32, 0xD731, 0x11CE, [0xA3'u8, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01])
  LIBID_WbemUtilities_v1* = DEFINE_GUID(0x226C9290'u32, 0xDD96, 0x11D3, [0xA1'u8, 0x20, 0x00, 0x10, 0x5A, 0x1F, 0x51, 0x5A])
  LIBID_WebCheck* = DEFINE_GUID(0x10BD2E25'u32, 0xF235, 0x11CF, [0xB5'u8, 0xDD, 0x00, 0xA0, 0xC9, 0x03, 0x48, 0xEC])
  LIBID_WMIEXTENSIONLib* = DEFINE_GUID(0xE503D000'u32, 0x5C7F, 0x11D2, [0x8B'u8, 0x74, 0x00, 0x10, 0x4B, 0x2A, 0xFB, 0x41])
  LIBID_XENROLLLib* = DEFINE_GUID(0x43F8F27B'u32, 0x7A20, 0x11D0, [0x8F'u8, 0x06, 0x00, 0xC0, 0x4F, 0xC2, 0x95, 0xE1])
  LIBID_XMLPSR* = DEFINE_GUID(0xD242361C'u32, 0x51A0, 0x11D2, [0x9C'u8, 0xAF, 0x00, 0x60, 0xB0, 0xEC, 0x3D, 0x39])
  MDGUID_MDX* = DEFINE_GUID(0xA07CCCD0'u32, 0x8148, 0x11D0, [0x87'u8, 0xBB, 0x00, 0xC0, 0x4F, 0xC3, 0x39, 0x42])
  MDSCHEMA_ACTIONS* = DEFINE_GUID(0xA07CCD08'u32, 0x8148, 0x11D0, [0x87'u8, 0xBB, 0x00, 0xC0, 0x4F, 0xC3, 0x39, 0x42])
  MDSCHEMA_COMMANDS* = DEFINE_GUID(0xA07CCD09'u32, 0x8148, 0x11D0, [0x87'u8, 0xBB, 0x00, 0xC0, 0x4F, 0xC3, 0x39, 0x42])
  MDSCHEMA_CUBES* = DEFINE_GUID(0xC8B522D8'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  MDSCHEMA_DIMENSIONS* = DEFINE_GUID(0xC8B522D9'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  MDSCHEMA_FUNCTIONS* = DEFINE_GUID(0xA07CCD07'u32, 0x8148, 0x11D0, [0x87'u8, 0xBB, 0x00, 0xC0, 0x4F, 0xC3, 0x39, 0x42])
  MDSCHEMA_HIERARCHIES* = DEFINE_GUID(0xC8B522DA'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  MDSCHEMA_LEVELS* = DEFINE_GUID(0xC8B522DB'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  MDSCHEMA_MEASURES* = DEFINE_GUID(0xC8B522DC'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  MDSCHEMA_MEMBERS* = DEFINE_GUID(0xC8B522DE'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  MDSCHEMA_PROPERTIES* = DEFINE_GUID(0xC8B522DD'u32, 0x5CF3, 0x11CE, [0xAD'u8, 0xE5, 0x00, 0xAA, 0x00, 0x44, 0x77, 0x3D])
  MDSCHEMA_SETS* = DEFINE_GUID(0xA07CCD0B'u32, 0x8148, 0x11D0, [0x87'u8, 0xBB, 0x00, 0xC0, 0x4F, 0xC3, 0x39, 0x42])
  NAMEDTIMER_DRAW* = DEFINE_GUID(0x3050F362'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  NOTFCOOKIE_SCHEDULE_GROUP_DAILY* = DEFINE_GUID(0xD34F18B0'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTFCOOKIE_SCHEDULE_GROUP_MANUAL* = DEFINE_GUID(0xD34F18B3'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTFCOOKIE_SCHEDULE_GROUP_MONTHLY* = DEFINE_GUID(0xD34F18B2'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTFCOOKIE_SCHEDULE_GROUP_WEEKLY* = DEFINE_GUID(0xD34F18B1'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_11* = DEFINE_GUID(0xD34F17FB'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_12* = DEFINE_GUID(0xD34F17FC'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_13* = DEFINE_GUID(0xD34F17FD'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_14* = DEFINE_GUID(0xD34F17FE'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_15* = DEFINE_GUID(0xD34F17FF'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_AGENT_INIT* = DEFINE_GUID(0x1E4A7390'u32, 0xC70B, 0x11D0, [0x95'u8, 0xF8, 0x00, 0xA0, 0xC9, 0x03, 0x48, 0xEC])
  NOTIFICATIONTYPE_AGENT_START* = DEFINE_GUID(0xD34F17EC'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_ALERT* = DEFINE_GUID(0xD34F17E3'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_ANOUNCMENT* = DEFINE_GUID(0xD34F17E1'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_BEGIN_REPORT* = DEFINE_GUID(0xD34F17EE'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_CONFIG_CHANGED* = DEFINE_GUID(0xD34F17F2'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_CONNECT_TO_INTERNET* = DEFINE_GUID(0xD34F17F0'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_d* = DEFINE_GUID(0xD34F17F8'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_DISCONNECT_FROM_INTE* = DEFINE_GUID(0xD34F17F1'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_e* = DEFINE_GUID(0xD34F17F9'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_END_REPORT* = DEFINE_GUID(0xD34F17EF'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_f* = DEFINE_GUID(0xD34F17FA'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_GROUP_DONE* = DEFINE_GUID(0xD34F1885'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_GROUP_RESTART* = DEFINE_GUID(0xD34F1884'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_GROUP_START* = DEFINE_GUID(0xD34F1883'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_i6* = DEFINE_GUID(0xD34F1886'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_i7* = DEFINE_GUID(0xD34F1887'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_i8* = DEFINE_GUID(0xD34F1888'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_i9* = DEFINE_GUID(0xD34F1889'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_iA* = DEFINE_GUID(0xD34F188A'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_iB* = DEFINE_GUID(0xD34F188B'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_iC* = DEFINE_GUID(0xD34F188C'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_iD* = DEFINE_GUID(0xD34F188D'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_iE* = DEFINE_GUID(0xD34F188E'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_iF* = DEFINE_GUID(0xD34F188F'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_INET_IDLE* = DEFINE_GUID(0xD34F17E4'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_INET_OFFLINE* = DEFINE_GUID(0xD34F17E5'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_INET_ONLINE* = DEFINE_GUID(0xD34F17E6'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_ITEM_DONE* = DEFINE_GUID(0xD34F1882'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_ITEM_RESTART* = DEFINE_GUID(0xD34F1881'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_ITEM_START* = DEFINE_GUID(0xD34F1880'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_NULL* = DEFINE_GUID(0xD34F17E0'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_PROGRESS_REPORT* = DEFINE_GUID(0xD34F17F3'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_START_0* = DEFINE_GUID(0xD34F1800'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_START_1* = DEFINE_GUID(0xD34F1801'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_START_2* = DEFINE_GUID(0xD34F1802'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_START_3* = DEFINE_GUID(0xD34F1803'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_START_4* = DEFINE_GUID(0xD34F1804'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_START_5* = DEFINE_GUID(0xD34F1805'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_START_6* = DEFINE_GUID(0xD34F1806'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_START_7* = DEFINE_GUID(0xD34F1807'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_START_8* = DEFINE_GUID(0xD34F1808'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_START_9* = DEFINE_GUID(0xD34F1809'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_START_A* = DEFINE_GUID(0xD34F180A'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_START_B* = DEFINE_GUID(0xD34F180B'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_START_C* = DEFINE_GUID(0xD34F180C'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_START_D* = DEFINE_GUID(0xD34F180D'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_START_E* = DEFINE_GUID(0xD34F180E'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_START_F* = DEFINE_GUID(0xD34F180F'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_TASK* = DEFINE_GUID(0xD34F17E2'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_TASKS_ABORT* = DEFINE_GUID(0xD34F17E9'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_TASKS_COMPLETED* = DEFINE_GUID(0xD34F17EA'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_TASKS_ERROR* = DEFINE_GUID(0xD34F17F7'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_TASKS_PROGRESS* = DEFINE_GUID(0xD34F17EB'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_TASKS_RESUME* = DEFINE_GUID(0xD34F17E8'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_TASKS_STARTED* = DEFINE_GUID(0xD34F17F6'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_TASKS_SUSPEND* = DEFINE_GUID(0xD34F17E7'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_USER_IDLE_BEGIN* = DEFINE_GUID(0xD34F17F4'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  NOTIFICATIONTYPE_USER_IDLE_END* = DEFINE_GUID(0xD34F17F5'u32, 0x576E, 0x11D0, [0xB2'u8, 0x8C, 0x00, 0xC0, 0x4F, 0xD7, 0xCD, 0x22])
  OLE_DATAPATH_ALLIMAGE* = DEFINE_GUID(0x0002DE0E'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_ALLMM* = DEFINE_GUID(0x0002DE18'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_ALLTEXT* = DEFINE_GUID(0x0002DE1E'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_ANSITEXT* = DEFINE_GUID(0x0002DE19'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_AVI* = DEFINE_GUID(0x0002DE0F'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_BASICAUDIO* = DEFINE_GUID(0x0002DE12'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_BIFF* = DEFINE_GUID(0x0002DE21'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_BMP* = DEFINE_GUID(0x0002DE01'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_CGM* = DEFINE_GUID(0x0002DE0B'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_COMMONIMAGE* = DEFINE_GUID(0x0002DE0D'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_DIB* = DEFINE_GUID(0x0002DE02'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_DIF* = DEFINE_GUID(0x0002DE1F'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_ENHMF* = DEFINE_GUID(0x0002DE04'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_EPS* = DEFINE_GUID(0x0002DE0C'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_GIF* = DEFINE_GUID(0x0002DE05'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_HTML* = DEFINE_GUID(0x0002DE1C'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_JPEG* = DEFINE_GUID(0x0002DE06'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_MIDI* = DEFINE_GUID(0x0002DE13'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_MPEG* = DEFINE_GUID(0x0002DE10'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_PALETTE* = DEFINE_GUID(0x0002DE22'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_PCX* = DEFINE_GUID(0x0002DE09'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_PENDATA* = DEFINE_GUID(0x0002DE23'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_PICT* = DEFINE_GUID(0x0002DE0A'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_POSTSCRIPT* = DEFINE_GUID(0x0002DE1D'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_QUICKTIME* = DEFINE_GUID(0x0002DE11'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_RIFF* = DEFINE_GUID(0x0002DE15'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_RTF* = DEFINE_GUID(0x0002DE1B'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_SOUND* = DEFINE_GUID(0x0002DE16'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_SYLK* = DEFINE_GUID(0x0002DE20'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_TIFF* = DEFINE_GUID(0x0002DE07'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_UNICODE* = DEFINE_GUID(0x0002DE1A'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_VIDEO* = DEFINE_GUID(0x0002DE17'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_WAV* = DEFINE_GUID(0x0002DE14'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_WMF* = DEFINE_GUID(0x0002DE03'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLE_DATAPATH_XBM* = DEFINE_GUID(0x0002DE08'u32, 0x0000, 0x0000, [0xC0'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])
  OLEDB_SVC_DSLPropertyPages* = DEFINE_GUID(0x51740C02'u32, 0x7E8E, 0x11D2, [0xA0'u8, 0x2D, 0x00, 0xC0, 0x4F, 0xA3, 0x73, 0x48])
  PSGUID_QUERY* = DEFINE_GUID(0x49691C90'u32, 0x7E17, 0x101A, [0xA9'u8, 0x1C, 0x08, 0x00, 0x2B, 0x2E, 0xCD, 0xA9])
  RESCLASSTYPE_IPAddress* = DEFINE_GUID(0x57A80E0F'u32, 0x6F18, 0x458B, [0xA7'u8, 0x2A, 0xD1, 0x17, 0x0C, 0x47, 0x93, 0x90])
  RESCLASSTYPE_NetworkName* = DEFINE_GUID(0xBBA69EB9'u32, 0xF5D0, 0x487B, [0x92'u8, 0xAE, 0x1B, 0xA1, 0x0F, 0x39, 0x21, 0x58])
  RESCLASSTYPE_StorageDevice* = DEFINE_GUID(0x12453A47'u32, 0x8C5E, 0x4837, [0xBA'u8, 0xC6, 0xB2, 0x54, 0xB8, 0xF2, 0x64, 0xCC])
  RESTYPE_ClusterIPAddress* = DEFINE_GUID(0xE50DF832'u32, 0x477C, 0x440C, [0xB7'u8, 0xA3, 0x38, 0x23, 0xA6, 0xEF, 0x6C, 0xCB])
  RESTYPE_ClusterNetName* = DEFINE_GUID(0xB2897CCF'u32, 0x8D2C, 0x4BC1, [0xB4'u8, 0x96, 0x6E, 0x2B, 0xC7, 0xA0, 0xBB, 0x38])
  RESTYPE_ClusterQuorumDisk* = DEFINE_GUID(0xD9DDFB80'u32, 0x0BDC, 0x40D4, [0xB3'u8, 0x96, 0x1A, 0xFD, 0x77, 0xDD, 0xD1, 0x9C])
  RESTYPE_GenericScript* = DEFINE_GUID(0xF372184D'u32, 0xDFDB, 0x4370, [0xA0'u8, 0x05, 0xE1, 0xEF, 0x30, 0x1B, 0x23, 0xA4])
  RESTYPE_IPAddress* = DEFINE_GUID(0xE61ADE71'u32, 0xC79A, 0x4FDA, [0xB1'u8, 0xDB, 0xA9, 0xB8, 0xD2, 0x0C, 0x8B, 0x14])
  RESTYPE_LocalQuorum* = DEFINE_GUID(0xF004656D'u32, 0x5B48, 0x4580, [0xA1'u8, 0xF4, 0xC3, 0xEC, 0x14, 0x98, 0x3D, 0x1E])
  RESTYPE_MajorityNodeSet* = DEFINE_GUID(0x56BFAE11'u32, 0xD2F7, 0x4F4F, [0x99'u8, 0x52, 0x55, 0xAF, 0x19, 0xBA, 0xC3, 0xE9])
  RESTYPE_NetworkName* = DEFINE_GUID(0xC1D2FE1E'u32, 0xD332, 0x445F, [0x8D'u8, 0xA1, 0x12, 0xE5, 0xE2, 0xD3, 0x7C, 0xBF])
  RESTYPE_PhysicalDisk* = DEFINE_GUID(0xCC558763'u32, 0x3386, 0x42EF, [0xB1'u8, 0x50, 0xBE, 0x79, 0x33, 0x44, 0xD4, 0x5F])
  SID_CtxQueryAssociations* = DEFINE_GUID(0xFAADFC40'u32, 0xB777, 0x4B69, [0xAA'u8, 0x81, 0x77, 0x03, 0x5E, 0xF0, 0xE6, 0xE8])
  SID_SContainerDispatch* = DEFINE_GUID(0xB722BE00'u32, 0x4E68, 0x101B, [0xA2'u8, 0xBC, 0x00, 0xAA, 0x00, 0x40, 0x47, 0x70])
  SID_SDataPathBrowser* = DEFINE_GUID(0xFC4801A5'u32, 0x2BA9, 0x11CF, [0xA2'u8, 0x29, 0x00, 0xAA, 0x00, 0x3D, 0x73, 0x52])
  SID_SGetViewFromViewDual* = DEFINE_GUID(0x889A935D'u32, 0x971E, 0x4B12, [0xB9'u8, 0x0C, 0x24, 0xDF, 0xC9, 0xE1, 0xE5, 0xE8])
  SID_SHTMLEditServices* = DEFINE_GUID(0x3050F7F9'u32, 0x98B5, 0x11CF, [0xBB'u8, 0x82, 0x00, 0xAA, 0x00, 0xBD, 0xCE, 0x0B])
  SID_STopLevelBrowser* = DEFINE_GUID(0x4C96BE40'u32, 0x915C, 0x11CF, [0x99'u8, 0xD3, 0x00, 0xAA, 0x00, 0x4A, 0xE8, 0x37])
  SID_STopWindow* = DEFINE_GUID(0x49E1B500'u32, 0x4636, 0x11D3, [0x97'u8, 0xF7, 0x00, 0xC0, 0x4F, 0x45, 0xD0, 0xB3])
  SID_SVersionHost* = DEFINE_GUID(0x371EA634'u32, 0xDC5C, 0x11D1, [0xBA'u8, 0x57, 0x00, 0xC0, 0x4F, 0xC2, 0x04, 0x0E])
  TAPIMEDIATYPE_Audio* = DEFINE_GUID(0x028ED8C2'u32, 0xDC7A, 0x11D0, [0x8E'u8, 0xD3, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  TAPIMEDIATYPE_DataModem* = DEFINE_GUID(0x028ED8C6'u32, 0xDC7A, 0x11D0, [0x8E'u8, 0xD3, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  TAPIMEDIATYPE_G3Fax* = DEFINE_GUID(0x028ED8C7'u32, 0xDC7A, 0x11D0, [0x8E'u8, 0xD3, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  TAPIMEDIATYPE_Video* = DEFINE_GUID(0x028ED8C4'u32, 0xDC7A, 0x11D0, [0x8E'u8, 0xD3, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  TAPIPROTOCOL_H323* = DEFINE_GUID(0x831CE2D7'u32, 0x83B5, 0x11D1, [0xBB'u8, 0x5C, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  TAPIPROTOCOL_Multicast* = DEFINE_GUID(0x831CE2D8'u32, 0x83B5, 0x11D1, [0xBB'u8, 0x5C, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  TAPIPROTOCOL_PSTN* = DEFINE_GUID(0x831CE2D6'u32, 0x83B5, 0x11D1, [0xBB'u8, 0x5C, 0x00, 0xC0, 0x4F, 0xB6, 0x80, 0x9F])
  TASK_AnalyzeCluster* = DEFINE_GUID(0x3140B5A6'u32, 0x9AFA, 0x4588, [0x8C'u8, 0xA0, 0x9B, 0xE8, 0xF8, 0xB6, 0x15, 0x06])
  TASK_CommitClusterChanges* = DEFINE_GUID(0x2D03030B'u32, 0xF084, 0x4807, [0xBB'u8, 0xAC, 0x94, 0x26, 0x9E, 0x50, 0xB5, 0x6F])
  TASKID_Major_Check_Cluster_Feasibili* = DEFINE_GUID(0xEBC8AEFF'u32, 0x10C3, 0x4D5B, [0xAC'u8, 0x17, 0xFC, 0x0F, 0x4C, 0x38, 0x71, 0xB7])
  TASKID_Major_Check_Node_Feasibility* = DEFINE_GUID(0xCC5E57B1'u32, 0x4520, 0x4672, [0xB4'u8, 0xBA, 0xA2, 0x88, 0xEC, 0x42, 0x94, 0x6E])
  TASKID_Major_Checking_For_Existing_Cl* = DEFINE_GUID(0xB8453B8F'u32, 0x92FD, 0x4350, [0xA6'u8, 0xD9, 0x55, 0x1F, 0xD0, 0x18, 0xB7, 0x91])
  TASKID_Major_Client_And_Server_Log* = DEFINE_GUID(0xCD36919C'u32, 0x9F31, 0x46B4, [0xA2'u8, 0x9D, 0xAC, 0x87, 0xF4, 0xE6, 0xCC, 0x93])
  TASKID_Major_Client_Log* = DEFINE_GUID(0x64ECA0EA'u32, 0x9CB6, 0x4324, [0x97'u8, 0x02, 0xDF, 0x15, 0xC6, 0x96, 0xC3, 0x0A])
  TASKID_Major_Configure_Cluster_Servic* = DEFINE_GUID(0x7C5F0774'u32, 0x1611, 0x42B5, [0xAF'u8, 0x3C, 0x6E, 0x12, 0x4A, 0xC4, 0xD3, 0x6B])
  TASKID_Major_Configure_Resource_Type* = DEFINE_GUID(0x6D47AF1F'u32, 0x7F17, 0x4B80, [0x8F'u8, 0xAB, 0x3A, 0x2D, 0x19, 0xB1, 0x23, 0x3D])
  TASKID_Major_Configure_Resources* = DEFINE_GUID(0x411BCDEC'u32, 0x69D3, 0x4485, [0x8D'u8, 0x5D, 0xE1, 0x9E, 0xE7, 0x7A, 0x6D, 0xD4])
  TASKID_Major_Establish_Connection* = DEFINE_GUID(0x93C32F99'u32, 0x39CA, 0x4D38, [0x9D'u8, 0x7F, 0x27, 0x07, 0xCA, 0x0E, 0xAF, 0x46])
  TASKID_Major_Find_Devices* = DEFINE_GUID(0x036BF567'u32, 0x2377, 0x4BB3, [0x8A'u8, 0xE1, 0xE4, 0x10, 0x4E, 0x2E, 0xB3, 0xC5])
  TASKID_Major_Reanalyze* = DEFINE_GUID(0xE25968DA'u32, 0x9C7B, 0x42DB, [0xAD'u8, 0xA9, 0xBC, 0x4E, 0x34, 0xF1, 0x7E, 0x6E])
  TASKID_Major_Server_Log* = DEFINE_GUID(0x05AA0768'u32, 0x5F49, 0x49CD, [0xAF'u8, 0xDC, 0x96, 0xF9, 0xD5, 0x18, 0x02, 0xD4])
  TASKID_Minor_Update_Progress* = DEFINE_GUID(0x2362D3DA'u32, 0xA6A4, 0x4551, [0xB8'u8, 0x46, 0x7B, 0xB3, 0xA1, 0x36, 0x5F, 0x56])
  TID_D3DRMAnimation* = DEFINE_GUID(0x3D82AB4F'u32, 0x62DA, 0x11CF, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  TID_D3DRMAnimationKey* = DEFINE_GUID(0x10DD46A8'u32, 0x775B, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMAnimationOptions* = DEFINE_GUID(0xE2BF56C0'u32, 0x840F, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMAnimationSet* = DEFINE_GUID(0x3D82AB50'u32, 0x62DA, 0x11CF, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  TID_D3DRMAppData* = DEFINE_GUID(0xE5745280'u32, 0xB24F, 0x11CF, [0x9D'u8, 0xD5, 0x00, 0xAA, 0x00, 0xA7, 0x1A, 0x2F])
  TID_D3DRMBoolean* = DEFINE_GUID(0x537DA6A0'u32, 0xCA37, 0x11D0, [0x94'u8, 0x1C, 0x00, 0x80, 0xC8, 0x0C, 0xFA, 0x7B])
  TID_D3DRMBoolean2d* = DEFINE_GUID(0x4885AE63'u32, 0x78E8, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMCamera* = DEFINE_GUID(0x3D82AB51'u32, 0x62DA, 0x11CF, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  TID_D3DRMColorRGB* = DEFINE_GUID(0xD3E16E81'u32, 0x7835, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMColorRGBA* = DEFINE_GUID(0x35FF44E0'u32, 0x6C7C, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMCoords2d* = DEFINE_GUID(0xF6F23F44'u32, 0x7686, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMExternalVisual* = DEFINE_GUID(0x98116AA0'u32, 0xBDBA, 0x11D1, [0x82'u8, 0xC0, 0x00, 0xA0, 0xC9, 0x69, 0x72, 0x71])
  TID_D3DRMFloatKeys* = DEFINE_GUID(0x10DD46A9'u32, 0x775B, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMFrame* = DEFINE_GUID(0x3D82AB46'u32, 0x62DA, 0x11CF, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  TID_D3DRMFramePosition* = DEFINE_GUID(0xE2BF56C1'u32, 0x840F, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMFrameRotation* = DEFINE_GUID(0xE2BF56C3'u32, 0x840F, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMFrameTransformMatrix* = DEFINE_GUID(0xF6F23F41'u32, 0x7686, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMFrameVelocity* = DEFINE_GUID(0xE2BF56C2'u32, 0x840F, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMGuid* = DEFINE_GUID(0xA42790E0'u32, 0x7810, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMIndexedColor* = DEFINE_GUID(0x1630B820'u32, 0x7842, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMInfo* = DEFINE_GUID(0x2B957100'u32, 0x9E9A, 0x11CF, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  TID_D3DRMInlineData* = DEFINE_GUID(0x3A23EEA0'u32, 0x94B1, 0x11D0, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  TID_D3DRMLight* = DEFINE_GUID(0x3D82AB4A'u32, 0x62DA, 0x11CF, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  TID_D3DRMLightAttenuation* = DEFINE_GUID(0xA8A98BA0'u32, 0xC5E5, 0x11CF, [0xB9'u8, 0x41, 0x00, 0x80, 0xC8, 0x0C, 0xFA, 0x7B])
  TID_D3DRMLightPenumbra* = DEFINE_GUID(0xAED22741'u32, 0xB31F, 0x11CF, [0x9D'u8, 0xD5, 0x00, 0xAA, 0x00, 0xA7, 0x1A, 0x2F])
  TID_D3DRMLightRange* = DEFINE_GUID(0xAED22742'u32, 0xB31F, 0x11CF, [0x9D'u8, 0xD5, 0x00, 0xAA, 0x00, 0xA7, 0x1A, 0x2F])
  TID_D3DRMLightUmbra* = DEFINE_GUID(0xAED22740'u32, 0xB31F, 0x11CF, [0x9D'u8, 0xD5, 0x00, 0xAA, 0x00, 0xA7, 0x1A, 0x2F])
  TID_D3DRMMaterial* = DEFINE_GUID(0x3D82AB4D'u32, 0x62DA, 0x11CF, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  TID_D3DRMMaterialAmbientColor* = DEFINE_GUID(0x01411840'u32, 0x7786, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMMaterialArray* = DEFINE_GUID(0x35FF44E1'u32, 0x6C7C, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMMaterialDiffuseColor* = DEFINE_GUID(0x01411841'u32, 0x7786, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMMaterialEmissiveColor* = DEFINE_GUID(0xD3E16E80'u32, 0x7835, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMMaterialPower* = DEFINE_GUID(0x01411843'u32, 0x7786, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMMaterialSpecularColor* = DEFINE_GUID(0x01411842'u32, 0x7786, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMMaterialWrap* = DEFINE_GUID(0x4885AE60'u32, 0x78E8, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMMatrix4x4* = DEFINE_GUID(0xF6F23F45'u32, 0x7686, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMMesh* = DEFINE_GUID(0x3D82AB44'u32, 0x62DA, 0x11CF, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  TID_D3DRMMeshFace* = DEFINE_GUID(0x3D82AB5F'u32, 0x62DA, 0x11CF, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  TID_D3DRMMeshFaceWraps* = DEFINE_GUID(0xED1EC5C0'u32, 0xC0A8, 0x11D0, [0x94'u8, 0x1C, 0x00, 0x80, 0xC8, 0x0C, 0xFA, 0x7B])
  TID_D3DRMMeshMaterialList* = DEFINE_GUID(0xF6F23F42'u32, 0x7686, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMMeshNormals* = DEFINE_GUID(0xF6F23F43'u32, 0x7686, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMMeshTextureCoords* = DEFINE_GUID(0xF6F23F40'u32, 0x7686, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMMeshVertexColors* = DEFINE_GUID(0x1630B821'u32, 0x7842, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMProgressiveMesh* = DEFINE_GUID(0x8A63C360'u32, 0x997D, 0x11D0, [0x94'u8, 0x1C, 0x00, 0x80, 0xC8, 0x0C, 0xFA, 0x7B])
  TID_D3DRMPropertyBag* = DEFINE_GUID(0x7F0F21E1'u32, 0xBFE1, 0x11D1, [0x82'u8, 0xC0, 0x00, 0xA0, 0xC9, 0x69, 0x72, 0x71])
  TID_D3DRMRightHanded* = DEFINE_GUID(0x7F5D5EA0'u32, 0xD53A, 0x11D1, [0x82'u8, 0xC0, 0x00, 0xA0, 0xC9, 0x69, 0x72, 0x71])
  TID_D3DRMStringProperty* = DEFINE_GUID(0x7F0F21E0'u32, 0xBFE1, 0x11D1, [0x82'u8, 0xC0, 0x00, 0xA0, 0xC9, 0x69, 0x72, 0x71])
  TID_D3DRMTextureFilename* = DEFINE_GUID(0xA42790E1'u32, 0x7810, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMTextureReference* = DEFINE_GUID(0xA42790E2'u32, 0x7810, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMTimedFloatKeys* = DEFINE_GUID(0xF406B180'u32, 0x7B3B, 0x11CF, [0x8F'u8, 0x52, 0x00, 0x40, 0x33, 0x35, 0x94, 0xA3])
  TID_D3DRMUrl* = DEFINE_GUID(0x3A23EEA1'u32, 0x94B1, 0x11D0, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  TID_D3DRMVector* = DEFINE_GUID(0x3D82AB5E'u32, 0x62DA, 0x11CF, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])
  TID_DXFILEHeader* = DEFINE_GUID(0x3D82AB43'u32, 0x62DA, 0x11CF, [0xAB'u8, 0x39, 0x00, 0x20, 0xAF, 0x71, 0xE4, 0x33])

when not defined(winansi):
  const
    IID_IDirectInput2* = IID_IDirectInput2W
    IID_IDirectInput7* = IID_IDirectInput7W
    IID_IDirectInput* = IID_IDirectInputW
    IID_IDirectInputDevice2* = IID_IDirectInputDevice2W
    IID_IDirectInputDevice7* = IID_IDirectInputDevice7W
    IID_IDirectInputDevice* = IID_IDirectInputDeviceW
    IID_IEnumRegisterWord* = IID_IEnumRegisterWordW
    IID_IExtractIcon* = IID_IExtractIconW
    IID_IFileViewer* = IID_IFileViewerW
    IID_IMLangStringBuf* = IID_IMLangStringBufW
    IID_INewShortcutHook* = IID_INewShortcutHookW
    IID_IShellCopyHook* = IID_IShellCopyHookW
    IID_IShellExecuteHook* = IID_IShellExecuteHookW
    IID_IShellLink* = IID_IShellLinkW
    IID_IUniformResourceLocator  * = IID_IUniformResourceLocatorW
else:
  const
    IID_IDirectInput2* = IID_IDirectInput2A
    IID_IDirectInput7* = IID_IDirectInput7A
    IID_IDirectInput* = IID_IDirectInputA
    IID_IDirectInputDevice2* = IID_IDirectInputDevice2A
    IID_IDirectInputDevice7* = IID_IDirectInputDevice7A
    IID_IDirectInputDevice* = IID_IDirectInputDeviceA
    IID_IEnumRegisterWord* = IID_IEnumRegisterWordA
    IID_IExtractIcon* = IID_IExtractIconA
    IID_IFileViewer* = IID_IFileViewerA
    IID_IMLangStringBuf* = IID_IMLangStringBufA
    IID_INewShortcutHook* = IID_INewShortcutHookA
    IID_IShellCopyHook* = IID_IShellCopyHookA
    IID_IShellExecuteHook* = IID_IShellExecuteHookA
    IID_IShellLink* = IID_IShellLinkA
    IID_IUniformResourceLocator* = IID_IUniformResourceLocatorA

# objcore/wtypes.nim

const
  IID_NULL* = GUID_NULL
  CLSID_NULL* = GUID_NULL
  ROTFLAGS_REGISTRATIONKEEPSALIVE* = 0x01
  ROTFLAGS_ALLOWANYCLIENT* = 0x02
  CLSCTX_INPROC_SERVER* = 1
  CLSCTX_INPROC_HANDLER* = 2
  CLSCTX_LOCAL_SERVER* = 4
  CLSCTX_INPROC_SERVER16* = 8
  CLSCTX_REMOTE_SERVER* = 16
  DVASPECT_CONTENT* = 1
  DVASPECT_THUMBNAIL* = 2
  DVASPECT_ICON* = 4
  DVASPECT_DOCPRINT* = 8
  DVASPECT_OPAQUE* = 16
  DVASPECT_TRANSPARENT* = 32
  # STATFLAG* = enum
  STATFLAG_DEFAULT* = 0
  STATFLAG_NONAME* = 1
  # MEMCTX* = enum
  MEMCTX_SAME* = -2
  MEMCTX_UNKNOWN* = -1
  MEMCTX_LOCAL* = 0
  MEMCTX_TASK* = 1
  MEMCTX_SHARED* = 2
  MEMCTX_MACSYSTEM* = 3
  # MSHCTX* = enum
  MSHCTX_LOCAL* = 0
  MSHCTX_NOSHAREDMEM* = 1
  MSHCTX_DIFFERENTMACHINE* = 2
  MSHCTX_INPROC* = 3
  MSHCTX_CROSSCTX* = 4
  # MSHLFLAGS* = enum
  MSHLFLAGS_NORMAL* = 0
  MSHLFLAGS_TABLESTRONG* = 1
  MSHLFLAGS_TABLEWEAK* = 2
  # STGC* = enum
  STGC_DEFAULT* = 0
  STGC_OVERWRITE* = 1
  STGC_ONLYIFCURRENT* = 2
  STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE* = 3
  # STGMOVE* = enum
  STGMOVE_MOVE* = 0
  STGMOVE_COPY* = 1
  STGMOVE_SHALLOWCOPY* = 2
  # VARENUM* = enum
  VT_EMPTY* = 0
  VT_NULL* = 1
  VT_I2* = 2
  VT_I4* = 3
  VT_R4* = 4
  VT_R8* = 5
  VT_CY* = 6
  VT_DATE* = 7
  VT_BSTR* = 8
  VT_DISPATCH* = 9
  VT_ERROR* = 10
  VT_BOOL* = 11
  VT_VARIANT* = 12
  VT_UNKNOWN* = 13
  VT_DECIMAL* = 14
  VT_I1* = 16
  VT_UI1* = 17
  VT_UI2* = 18
  VT_UI4* = 19
  VT_I8* = 20
  VT_UI8* = 21
  VT_INT* = 22
  VT_UINT* = 23
  VT_VOID* = 24
  VT_HRESULT* = 25
  VT_PTR* = 26
  VT_SAFEARRAY* = 27
  VT_CARRAY* = 28
  VT_USERDEFINED* = 29
  VT_LPSTR* = 30
  VT_LPWSTR* = 31
  VT_RECORD* = 36
  VT_INT_PTR* = 37
  VT_UINT_PTR* = 38
  VT_FILETIME* = 64
  VT_BLOB* = 65
  VT_STREAM* = 66
  VT_STORAGE* = 67
  VT_STREAMED_OBJECT* = 68
  VT_STORED_OBJECT* = 69
  VT_BLOB_OBJECT* = 70
  VT_CF* = 71
  VT_CLSID* = 72
  VT_BSTR_BLOB* = 0xfff
  VT_VECTOR* = 0x1000
  VT_ARRAY* = 0x2000
  VT_BYREF* = 0x4000
  VT_RESERVED* = 0x8000
  VT_ILLEGAL* = 0xffff

type
  hyper = int64
  BLOB* {.final, pure.} = object
    cbSize*: ULONG
    pBlobData*: ptr BYTE
  PBLOB* = ptr BLOB
  LPBLOB* = ptr BLOB
  STATFLAG* = int32
  MEMCTX* = int32
  MSHCTX* = int32
  MSHLFLAGS* = int32
  FLAGGED_WORD_BLOB* {.final, pure.} = object
    fFlags*: uint32
    clSize*: uint32
    asData*: array[1, uint16]
  OLECHAR* = WCHAR
  LPOLESTR* = LPWSTR
  LPCOLESTR* = LPCWSTR
  VARTYPE* = uint16
  VARIANT_BOOL* = int16
  # _VARIANT_BOOL* = VARIANT_BOOL

const
  VARIANT_TRUE* = -1.VARIANT_BOOL
  VARIANT_FALSE* = 0.VARIANT_BOOL

type
  BSTR* = distinct ptr OLECHAR # BSTR is not the same with ptr WCHAR
  wireBSTR* = ptr FLAGGED_WORD_BLOB
  LPBSTR* = ptr BSTR
  HCONTEXT* = HANDLE
  HMETAFILEPICT* = HANDLE
  CY_STRUCT1* {.final, pure.} = object
    Lo*: uint32
    Hi*: int32
  CY* {.final, union, pure.} = object
    s1*: CY_STRUCT1
    int64*: LONGLONG
  DATE* = float64
  BSTRBLOB* {.final, pure.} = object
    cbSize*: ULONG
    pData*: PBYTE
  LPBSTRBLOB* = ptr BSTRBLOB
  CLIPDATA* {.final, pure.} = object
    cbSize*: ULONG
    ulClipFmt*: int32
    pClipData*: PBYTE
  STGC* = int32
  STGMOVE* = int32
  VARENUM* = int32

const
    VT_ILLEGALMASKED* = 0xfff
    VT_TYPEMASK* = 0xfff

type
  BYTE_SIZEDARR* {.final, pure.} = object
    clSize*: uint32
    pData*: ptr int8
  WORD_SIZEDARR* {.final, pure.} = object
    clSize*: uint32
    pData*: ptr uint16
  DWORD_SIZEDARR* {.final, pure.} = object
    clSize*: uint32
    pData*: ptr uint32
  HYPER_SIZEDARR* {.final, pure.} = object
    clSize*: uint32
    pData*: ptr hyper
  DOUBLE* = float64
  DECIMAL_UNION2_STRUCT1* {.final, pure.} = object
    Lo32*: ULONG
    Mid32*: ULONG
  DECIMAL_UNION2* {.final, union, pure.} = object
    s1*: DECIMAL_UNION2_STRUCT1
    Lo64*: ULONGLONG
  DECIMAL_UNION1_STRUCT1* {.final, pure.} = object
    scale*: uint8
    sign*: uint8
  DECIMAL_UNION1* {.final, union, pure.} = object
    s1*: DECIMAL_UNION1_STRUCT1
    signscale*: USHORT
  DECIMAL* {.final, pure.} = object
    wReserved*: USHORT
    u1*: DECIMAL_UNION1
    Hi32*: ULONG
    u2*: DECIMAL_UNION2

proc `Lo=`*(self: var CY, x: uint32) = self.s1.Lo = x
proc Lo*(self: CY): uint32 = self.s1.Lo
proc `Hi=`*(self: var CY, x: int32) = self.s1.Hi = x
proc Hi*(self: CY): int32 = self.s1.Hi
proc `scale=`*(self: var DECIMAL, x: uint8) = self.u1.s1.scale = x
proc scale*(self: DECIMAL): uint8 = self.u1.s1.scale
proc `sign=`*(self: var DECIMAL, x: uint8) = self.u1.s1.sign = x
proc sign*(self: DECIMAL): uint8 = self.u1.s1.sign
proc `signscale=`*(self: var DECIMAL, x: USHORT) = self.u1.signscale = x
proc signscale*(self: DECIMAL): USHORT = self.u1.signscale
proc `Lo32=`*(self: var DECIMAL, x: ULONG) = self.u2.s1.Lo32 = x
proc Lo32*(self: DECIMAL): ULONG = self.u2.s1.Lo32
proc `Mid32=`*(self: var DECIMAL, x: ULONG) = self.u2.s1.Mid32 = x
proc Mid32*(self: DECIMAL): ULONG = self.u2.s1.Mid32
proc `Lo64=`*(self: var DECIMAL, x: ULONGLONG) = self.u2.Lo64 = x
proc Lo64*(self: DECIMAL): ULONGLONG = self.u2.Lo64

proc setZero*(self: var DECIMAL) =
  self.Lo64 = 0
  self.Hi32 = 0
  self.signscale = 0

# objcore/wtypesbase.nim

type
  BYTE_BLOB* {.final, pure.} = object
    clSize*: ULONG
    abData*: array[1, byte]
  UP_BYTE_BLOB* = ptr BYTE_BLOB
  WORD_BLOB* {.final, pure.} = object
    clSize*: ULONG
    asData*: array[1, cushort]
  UP_WORD_BLOB* = ptr WORD_BLOB
  DWORD_BLOB* {.final, pure.} = object
    clSize*: ULONG
    alData*: array[1, ULONG]
  UP_DWORD_BLOB* = ptr DWORD_BLOB
  FLAGGED_BYTE_BLOB* {.final, pure.} = object
    fFlags*: ULONG
    clSize*: ULONG
    abData*: array[1, byte]
  UP_FLAGGED_BYTE_BLOB* = ptr FLAGGED_BYTE_BLOB

# objcore/unknwn.nim

type
  MIDL_user_allocate* = proc(P1: SIZE_T): pointer
  MIDL_user_free* = proc(P1: pointer): void
  IUnknown* {.pure.} = object
    lpVtbl*: ptr IUnknownVtbl
  IUnknownVtbl* {.pure, inheritable.} = object
    QueryInterface*: proc(self: ptr IUnknown, riid: ptr IID, pvObject: ptr pointer): HRESULT {.stdcall.}
    AddRef*: proc(self: ptr IUnknown): ULONG {.stdcall.}
    Release*: proc(self: ptr IUnknown): ULONG {.stdcall.}
  LPUNKNOWN* = ptr IUnknown
  IClassFactory* {.pure.} = object
    lpVtbl*: ptr IClassFactoryVtbl
  IClassFactoryVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CreateInstance*: proc(self: ptr IClassFactory, UnkOuter: ptr IUnknown, riid: ptr IID, pvObject: ptr pointer): HRESULT {.stdcall.}
    LockServer*: proc(self: ptr IClassFactory, fLock: BOOL): HRESULT {.stdcall.}
  LPCLASSFACTORY* = ptr IClassFactory

converter winim_converter_IUnknown*(x: ptr IUnknown): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IUnknown, riid: ptr IID, pvObject: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, riid, pvObject)
proc AddRef*(self: ptr IUnknown): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IUnknown): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
converter winim_converter_IClassFactory*(x: ptr IClassFactory): ptr IUnknown = cast[ptr IUnknown](x)
proc CreateInstance*(self: ptr IClassFactory, UnkOuter: ptr IUnknown, riid: ptr IID, pvObject: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.CreateInstance(self, UnkOuter, riid, pvObject)
proc LockServer*(self: ptr IClassFactory, fLock: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.LockServer(self, fLock)

# objcore/comcat.nim

const
  CATID_NULL* = GUID_NULL
  IID_IEnumCATID* = IID_IEnumGUID
  IID_IEnumCLSID* = IID_IEnumGUID

type
  LPENUMGUID* = ptr IEnumGUID
  IEnumGUID* {.pure.} = object
    lpVtbl*: ptr IEnumGUIDVtbl
  IEnumGUIDVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumGUID, P1: ULONG, P2: ptr GUID, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumGUID, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumGUID): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumGUID, P1: ptr LPENUMGUID): HRESULT {.stdcall.}
  CATID* = GUID
  REFCATID* = REFGUID
  CATEGORYINFO* {.final, pure.} = object
    catid*: CATID
    lcid*: LCID
    szDescription*: array[128, OLECHAR]
  LPCATEGORYINFO* = ptr CATEGORYINFO
  IEnumCATID* = IEnumGUID
  LPENUMCATID* = LPENUMGUID
  IEnumCLSID* = IEnumGUID
  LPENUMCLSID* = LPENUMGUID
  ICatInformation* {.pure.} = object
    lpVtbl*: ptr ICatInformationVtbl
  ICatInformationVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    EnumCategories*: proc(self: ptr ICatInformation, P1: LCID, P2: ptr LPENUMCATEGORYINFO): HRESULT {.stdcall.}
    GetCategoryDesc*: proc(self: ptr ICatInformation, P1: REFCATID, P2: LCID, P3: ptr PWCHAR): HRESULT {.stdcall.}
    EnumClassesOfCategories*: proc(self: ptr ICatInformation, P1: ULONG, P2: ptr CATID, P3: ULONG, P4: ptr CATID, P5: ptr LPENUMCLSID): HRESULT {.stdcall.}
    IsClassOfCategories*: proc(self: ptr ICatInformation, P1: REFCLSID, P2: ULONG, P3: ptr CATID, P4: ULONG, P5: ptr CATID): HRESULT {.stdcall.}
    EnumImplCategoriesOfClass*: proc(self: ptr ICatInformation, P1: REFCLSID, P2: ptr LPENUMCATID): HRESULT {.stdcall.}
    EnumReqCategoriesOfClass*: proc(self: ptr ICatInformation, P1: REFCLSID, P2: ptr LPENUMCATID): HRESULT {.stdcall.}
  LPCATINFORMATION* = ptr ICatInformation
  ICatRegister* {.pure.} = object
    lpVtbl*: ptr ICatRegisterVtbl
  ICatRegisterVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    RegisterCategories*: proc(self: ptr ICatRegister, P1: ULONG, P2: ptr CATEGORYINFO): HRESULT {.stdcall.}
    UnRegisterCategories*: proc(self: ptr ICatRegister, P1: ULONG, P2: ptr CATID): HRESULT {.stdcall.}
    RegisterClassImplCategories*: proc(self: ptr ICatRegister, P1: REFCLSID, P2: ULONG, P3: ptr CATID): HRESULT {.stdcall.}
    UnRegisterClassImplCategories*: proc(self: ptr ICatRegister, P1: REFCLSID, P2: ULONG, P3: ptr CATID): HRESULT {.stdcall.}
    RegisterClassReqCategories*: proc(self: ptr ICatRegister, P1: REFCLSID, P2: ULONG, P3: ptr CATID): HRESULT {.stdcall.}
    UnRegisterClassReqCategories*: proc(self: ptr ICatRegister, P1: REFCLSID, P2: ULONG, P3: ptr CATID): HRESULT {.stdcall.}
  LPCATREGISTER* = ptr ICatRegister
  IEnumCATEGORYINFO* {.pure.} = object
    lpVtbl*: ptr IEnumCATEGORYINFOVtbl
  IEnumCATEGORYINFOVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumCATEGORYINFO, P1: ULONG, P2: ptr CATEGORYINFO, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumCATEGORYINFO, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumCATEGORYINFO): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumCATEGORYINFO, P1: ptr LPENUMCATEGORYINFO): HRESULT {.stdcall.}
  LPENUMCATEGORYINFO* = ptr IEnumCATEGORYINFO

converter winim_converter_IEnumGUID*(x: ptr IEnumGUID): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumGUID, P1: ULONG, P2: ptr GUID, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumGUID, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumGUID): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumGUID, P1: ptr LPENUMGUID): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_ICatInformation*(x: ptr ICatInformation): ptr IUnknown = cast[ptr IUnknown](x)
proc EnumCategories*(self: ptr ICatInformation, P1: LCID, P2: ptr LPENUMCATEGORYINFO): HRESULT {.inline, discardable.} = self.lpVtbl.EnumCategories(self, P1, P2)
proc GetCategoryDesc*(self: ptr ICatInformation, P1: REFCATID, P2: LCID, P3: ptr PWCHAR): HRESULT {.inline, discardable.} = self.lpVtbl.GetCategoryDesc(self, P1, P2, P3)
proc EnumClassesOfCategories*(self: ptr ICatInformation, P1: ULONG, P2: ptr CATID, P3: ULONG, P4: ptr CATID, P5: ptr LPENUMCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.EnumClassesOfCategories(self, P1, P2, P3, P4, P5)
proc IsClassOfCategories*(self: ptr ICatInformation, P1: REFCLSID, P2: ULONG, P3: ptr CATID, P4: ULONG, P5: ptr CATID): HRESULT {.inline, discardable.} = self.lpVtbl.IsClassOfCategories(self, P1, P2, P3, P4, P5)
proc EnumImplCategoriesOfClass*(self: ptr ICatInformation, P1: REFCLSID, P2: ptr LPENUMCATID): HRESULT {.inline, discardable.} = self.lpVtbl.EnumImplCategoriesOfClass(self, P1, P2)
proc EnumReqCategoriesOfClass*(self: ptr ICatInformation, P1: REFCLSID, P2: ptr LPENUMCATID): HRESULT {.inline, discardable.} = self.lpVtbl.EnumReqCategoriesOfClass(self, P1, P2)
converter winim_converter_ICatRegister*(x: ptr ICatRegister): ptr IUnknown = cast[ptr IUnknown](x)
proc RegisterCategories*(self: ptr ICatRegister, P1: ULONG, P2: ptr CATEGORYINFO): HRESULT {.inline, discardable.} = self.lpVtbl.RegisterCategories(self, P1, P2)
proc UnRegisterCategories*(self: ptr ICatRegister, P1: ULONG, P2: ptr CATID): HRESULT {.inline, discardable.} = self.lpVtbl.UnRegisterCategories(self, P1, P2)
proc RegisterClassImplCategories*(self: ptr ICatRegister, P1: REFCLSID, P2: ULONG, P3: ptr CATID): HRESULT {.inline, discardable.} = self.lpVtbl.RegisterClassImplCategories(self, P1, P2, P3)
proc UnRegisterClassImplCategories*(self: ptr ICatRegister, P1: REFCLSID, P2: ULONG, P3: ptr CATID): HRESULT {.inline, discardable.} = self.lpVtbl.UnRegisterClassImplCategories(self, P1, P2, P3)
proc RegisterClassReqCategories*(self: ptr ICatRegister, P1: REFCLSID, P2: ULONG, P3: ptr CATID): HRESULT {.inline, discardable.} = self.lpVtbl.RegisterClassReqCategories(self, P1, P2, P3)
proc UnRegisterClassReqCategories*(self: ptr ICatRegister, P1: REFCLSID, P2: ULONG, P3: ptr CATID): HRESULT {.inline, discardable.} = self.lpVtbl.UnRegisterClassReqCategories(self, P1, P2, P3)
converter winim_converter_IEnumCATEGORYINFO*(x: ptr IEnumCATEGORYINFO): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumCATEGORYINFO, P1: ULONG, P2: ptr CATEGORYINFO, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumCATEGORYINFO, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumCATEGORYINFO): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumCATEGORYINFO, P1: ptr LPENUMCATEGORYINFO): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)

# objcore/objidl.nim
const
  # STGTY* = enum
  STGTY_STORAGE* = 1
  STGTY_STREAM* = 2
  STGTY_LOCKBYTES* = 3
  STGTY_PROPERTY* = 4
  # STREAM_SEEK* = enum
  STREAM_SEEK_SET* = 0
  STREAM_SEEK_CUR* = 1
  STREAM_SEEK_END* = 2
  # CALLTYPE* = enum
  CALLTYPE_TOPLEVEL* = 1
  CALLTYPE_NESTED* = 2
  CALLTYPE_ASYNC* = 3
  CALLTYPE_TOPLEVEL_CALLPENDING* = 4
  CALLTYPE_ASYNC_CALLPENDING* = 5
  # PENDINGTYPE* = enum
  PENDINGTYPE_TOPLEVEL* = 1
  PENDINGTYPE_NESTED* = 2
  # PENDINGMSG* = enum
  PENDINGMSG_CANCELCALL* = 0
  PENDINGMSG_WAITNOPROCESS* = 1
  PENDINGMSG_WAITDEFPROCESS* = 2
  # DATADIR* = enum
  DATADIR_GET* = 1
  DATADIR_SET* = 2
  # EXTCONN* = enum
  EXTCONN_STRONG* = 1
  EXTCONN_WEAK* = 2
  EXTCONN_CALLABLE* = 4
  # BIND_FLAGS* = enum
  BIND_MAYBOTHERUSER* = 1
  BIND_JUSTTESTEXISTENCE* = 2
  # LOCKTYPE* = enum
  LOCK_WRITE* = 1
  LOCK_EXCLUSIVE* = 2
  LOCK_ONLYONCE* = 4
  # MKSYS* = enum
  MKSYS_NONE* = 0
  MKSYS_GENERICCOMPOSITE* = 1
  MKSYS_FILEMONIKER* = 2
  MKSYS_ANTIMONIKER* = 3
  MKSYS_ITEMMONIKER* = 4
  MKSYS_POINTERMONIKER* = 5
  # MKREDUCE* = enum
  MKRREDUCE_ALL* = 0
  MKRREDUCE_THROUGHUSER* = 65536
  MKRREDUCE_TOUSER* = 131072
  MKRREDUCE_ONE* = 196608
  # ADVF* = enum
  ADVF_NODATA* = 1
  ADVF_PRIMEFIRST* = 2
  ADVF_ONLYONCE* = 4
  ADVFCACHE_NOHANDLER* = 8
  ADVFCACHE_FORCEBUILTIN* = 16
  ADVFCACHE_ONSAVE* = 32
  ADVF_DATAONSTOP* = 64
  # TYMED* = enum
  TYMED_NULL* = 0
  TYMED_HGLOBAL* = 1
  TYMED_FILE* = 2
  TYMED_ISTREAM* = 4
  TYMED_ISTORAGE* = 8
  TYMED_GDI* = 16
  TYMED_MFPICT* = 32
  TYMED_ENHMF* = 64
  # SERVERCALL* = enum
  SERVERCALL_ISHANDLED* = 0
  SERVERCALL_REJECTED* = 1
  SERVERCALL_RETRYLATER* = 2
  # PROPSETFLAG* = enum
  PROPSETFLAG_DEFAULT* = 0
  PROPSETFLAG_NONSIMPLE* = 1
  PROPSETFLAG_ANSI* = 2
  PROPSETFLAG_UNBUFFERED* = 4
  # EOLE_AUTHENTICATION_CAPABILITIES* = enum
  EOAC_NONE* = 0
  EOAC_MUTUAL_AUTH* = 0x1
  EOAC_SECURE_REFS* = 0x2
  EOAC_ACCESS_CONTROL* = 0x4
  EOAC_APPID* = 0x8
  EOAC_DYNAMIC* = 0x10
  EOAC_STATIC_CLOAKING* = 0x20
  EOAC_DYNAMIC_CLOAKING* = 0x40
  EOAC_ANY_AUTHORITY* = 0x80
  EOAC_MAKE_FULLSIC* = 0x100
  EOAC_REQUIRE_FULLSIC* = 0x200
  EOAC_AUTO_IMPERSONATE* = 0x400
  EOAC_DEFAULT* = 0x800
  EOAC_DISABLE_AAA* = 0x1000
  EOAC_NO_CUSTOM_MARSHAL* = 0x2000

const
  COLE_DEFAULT_PRINCIPAL* = cast[ptr OLECHAR](-1)
  COLE_DEFAULT_AUTHINFO* = cast[pointer](-1)

type
  # move from objfwd to here
  LPSTREAM* = ptr IStream
  LPMARSHAL* = ptr IMarshal
  LPMONIKER* = ptr IMoniker
  LPMALLOC* = ptr IMalloc
  LPMALLOCSPY* = ptr IMallocSpy
  LPMESSAGEFILTER* = ptr IMessageFilter
  LPPERSIST* = ptr IPersist
  LPPERSISTSTREAM* = ptr IPersistStream
  LPRUNNINGOBJECTTABLE* = ptr IRunningObjectTable
  LPBINDCTX* = ptr IBindCtx
  LPBC* = ptr IBindCtx
  LPADVISESINK* = ptr IAdviseSink
  LPADVISESINK2* = ptr IAdviseSink2
  LPDATAOBJECT* = ptr IDataObject
  LPDATAADVISEHOLDER* = ptr IDataAdviseHolder
  LPENUMMONIKER* = ptr IEnumMoniker
  LPENUMFORMATETC* = ptr IEnumFORMATETC
  LPENUMSTATDATA* = ptr IEnumSTATDATA
  LPENUMSTATSTG* = ptr IEnumSTATSTG
  LPENUMSTATPROPSTG* = ptr IEnumSTATPROPSTG
  LPENUMSTRING* = ptr IEnumString
  LPENUMUNKNOWN* = ptr IEnumUnknown
  LPSTORAGE* = ptr IStorage
  LPPERSISTSTORAGE* = ptr IPersistStorage
  LPLOCKBYTES* = ptr ILockBytes
  LPSTDMARSHALINFO* = ptr IStdMarshalInfo
  LPEXTERNALCONNECTION* = ptr IExternalConnection
  LPRUNNABLEOBJECT* = ptr IRunnableObject
  LPROTDATA* = ptr IROTData
  LPPERSISTFILE* = ptr IPersistFile
  LPROOTSTORAGE* = ptr IRootStorage
  LPRPCCHANNELBUFFER* = ptr IRpcChannelBuffer
  LPRPCPROXYBUFFER* = ptr IRpcProxyBuffer
  LPRPCSTUBBUFFER* = ptr IRpcStubBuffer
  LPPROPERTYSTORAGE* = ptr IPropertyStorage
  LPENUMSTATPROPSETSTG* = ptr IEnumSTATPROPSETSTG
  LPPROPERTYSETSTORAGE* = ptr IPropertySetStorage
  LPCLIENTSECURITY* = ptr IClientSecurity
  LPSERVERSECURITY* = ptr IServerSecurity
  LPCLASSACTIVATOR* = ptr IClassActivator
  LPFILLLOCKBYTES* = ptr IFillLockBytes
  LPPROGRESSNOTIFY* = ptr IProgressNotify
  LPLAYOUTSTORAGE* = ptr ILayoutStorage

  RPC_AUTH_IDENTITY_HANDLE* = HANDLE
  RPC_AUTHZ_HANDLE* = HANDLE
  STATSTG* {.final, pure.} = object
    pwcsName*: LPOLESTR
    TYPE*: DWORD
    cbSize*: ULARGE_INTEGER
    mtime*: FILETIME
    ctime*: FILETIME
    atime*: FILETIME
    grfMode*: DWORD
    grfLocksSupported*: DWORD
    clsid*: CLSID
    grfStateBits*: DWORD
    reserved*: DWORD
  STGTY* = int32
  STREAM_SEEK* = int32
  INTERFACEINFO* {.final, pure.} = object
    pUnk*: LPUNKNOWN
    iid*: IID
    wMethod*: WORD
  LPINTERFACEINFO* = ptr INTERFACEINFO
  CALLTYPE* = int32
  PENDINGTYPE* = int32
  PENDINGMSG* = int32
  SNB* = ptr ptr OLECHAR
  DATADIR* = int32
  CLIPFORMAT* = WORD
  LPCLIPFORMAT* = ptr CLIPFORMAT
  DVTARGETDEVICE* {.final, pure.} = object
    tdSize*: DWORD
    tdDriverNameOffset*: WORD
    tdDeviceNameOffset*: WORD
    tdPortNameOffset*: WORD
    tdExtDevmodeOffset*: WORD
    tdData*: array[1, BYTE]
  FORMATETC* {.final, pure.} = object
    cfFormat*: CLIPFORMAT
    ptd*: ptr DVTARGETDEVICE
    dwAspect*: DWORD
    lindex*: LONG
    tymed*: DWORD
  LPFORMATETC* = ptr FORMATETC
  RemSTGMEDIUM* {.final, pure.} = object
    tymed*: DWORD
    dwHandleType*: DWORD
    pData*: ULONG
    pUnkForRelease*: uint32
    cbData*: uint32
    data*: array[1, BYTE]
  HLITEM* {.final, pure.} = object
    uHLID*: ULONG
    pwzFriendlyName*: LPWSTR
  STATPROPSETSTG* {.final, pure.} = object
    fmtid*: FMTID
    clsid*: CLSID
    grfFlags*: DWORD
    mtime*: FILETIME
    ctime*: FILETIME
    atime*: FILETIME
  EXTCONN* = int32
  MULTI_QI* {.final, pure.} = object
    pIID: ptr IID
    pItf*: IUnknown
    hr*: HRESULT
  AUTH_IDENTITY* {.final, pure.} = object
    User*: ptr USHORT
    UserLength*: ULONG
    Domain*: ptr USHORT
    DomainLength*: ULONG
    Password*: ptr USHORT
    PasswordLength*: ULONG
    Flags*: ULONG
  COAUTHINFO* {.final, pure.} = object
    dwAuthnSvc*: DWORD
    dwAuthzSvc*: DWORD
    pwszServerPrincName*: LPWSTR
    dwAuthnLevel*: DWORD
    dwImpersonationLevel*: DWORD
    pAuthIdentityData*: ptr AUTH_IDENTITY
    dwCapabilities*: DWORD
  COSERVERINFO* {.final, pure.} = object
    dwReserved1*: DWORD
    pwszName*: LPWSTR
    pAuthInfo*: ptr COAUTHINFO
    dwReserved2*: DWORD
  BIND_OPTS* {.final, pure.} = object
    cbStruct*: DWORD
    grfFlags*: DWORD
    grfMode*: DWORD
    dwTickCountDeadline*: DWORD
  LPBIND_OPTS* = ptr BIND_OPTS
  BIND_OPTS2* {.final, pure.} = object
    cbStruct*: DWORD
    grfFlags*: DWORD
    grfMode*: DWORD
    dwTickCountDeadline*: DWORD
    dwTrackFlags*: DWORD
    dwClassContext*: DWORD
    locale*: LCID
    pServerInfo*: ptr COSERVERINFO
  LPBIND_OPTS2* = ptr BIND_OPTS2
  BIND_FLAGS* = int32
  STGMEDIUM_UNION1* {.final, union, pure.} = object
    hBitmap*: HBITMAP
    hMetaFilePict*: PVOID
    hEnhMetaFile*: HENHMETAFILE
    hGlobal*: HGLOBAL
    lpszFileName*: LPWSTR
    pstm*: LPSTREAM
    pstg*: LPSTORAGE
  STGMEDIUM* {.final, pure.} = object
    tymed*: DWORD
    u1*: STGMEDIUM_UNION1
    pUnkForRelease*: LPUNKNOWN
  LPSTGMEDIUM* = ptr STGMEDIUM
  LOCKTYPE* = int32
  RPCOLEDATAREP* = uint32
  RPCOLEMESSAGE* {.final, pure.} = object
    reserved1*: PVOID
    dataRepresentation*: RPCOLEDATAREP
    Buffer*: PVOID
    cbBuffer*: ULONG
    iMethod*: ULONG
    reserved2*: array[5, PVOID]
    rpcFlags*: ULONG
  PRPCOLEMESSAGE* = ptr RPCOLEMESSAGE
  MKSYS* = int32
  MKREDUCE* = int32
  RemSNB* {.final, pure.} = object
    ulCntStr*: uint32
    ulCntChar*: uint32
    rgString*: array[1, OLECHAR]
  ADVF* = int32
  TYMED* = int32
  SERVERCALL* = int32
  CAUB* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr uint8
  CAI* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr int16
  CAUI* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr USHORT
  CAL* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr int32
  CAUL* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr ULONG
  CAFLT* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr float32
  CADBL* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr float64
  CACY* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr CY
  CADATE* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr DATE
  CABSTR* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr BSTR
  CABSTRBLOB* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr BSTRBLOB
  CABOOL* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr VARIANT_BOOL
  CASCODE* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr SCODE
  CAH* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr LARGE_INTEGER
  CAUH* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr ULARGE_INTEGER
  CALPSTR* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr LPSTR
  CALPWSTR* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr LPWSTR
  CAFILETIME* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr FILETIME
  CACLIPDATA* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr CLIPDATA
  CACLSID* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr CLSID
  LPPROPVARIANT* = ptr PROPVARIANT
  CAPROPVARIANT* {.final, pure.} = object
    cElems*: ULONG
    pElems*: LPPROPVARIANT
  PROPVARIANT_UNION1* {.final, union, pure.} = object
    cVal*: CHAR
    bVal*: UCHAR
    iVal*: int16
    uiVal*: USHORT
    boolVal*: VARIANT_BOOL
    lVal*: int32
    ulVal*: ULONG
    fltVal*: float32
    scode*: SCODE
    hVal*: LARGE_INTEGER
    uhVal*: ULARGE_INTEGER
    dblVal*: float64
    cyVal*: CY
    date*: DATE
    filetime*: FILETIME
    puuid*: ptr CLSID
    blob*: BLOB
    pclipdata*: ptr CLIPDATA
    pStream*: LPSTREAM
    pStorage*: LPSTORAGE
    bstrVal*: BSTR
    bstrblobVal*: BSTRBLOB
    pszVal*: LPSTR
    pwszVal*: LPWSTR
    caub*: CAUB
    cai*: CAI
    caui*: CAUI
    cabool*: CABOOL
    cal*: CAL
    caul*: CAUL
    caflt*: CAFLT
    cascode*: CASCODE
    cah*: CAH
    cauh*: CAUH
    cadbl*: CADBL
    cacy*: CACY
    cadate*: CADATE
    cafiletime*: CAFILETIME
    cauuid*: CACLSID
    caclipdata*: CACLIPDATA
    cabstr*: CABSTR
    cabstrblob*: CABSTRBLOB
    calpstr*: CALPSTR
    calpwstr*: CALPWSTR
    capropvar*: CAPROPVARIANT
  PROPVARIANT* {.final, pure.} = object
    vt*: VARTYPE
    wReserved1*: WORD
    wReserved2*: WORD
    wReserved3*: WORD
    u1*: PROPVARIANT_UNION1
  PROPSPEC_UNION1* {.final, union, pure.} = object
    propid*: PROPID
    lpwstr*: LPOLESTR
  PROPSPEC* {.final, pure.} = object
    ulKind*: ULONG
    u1*: PROPSPEC_UNION1
  STATPROPSTG* {.final, pure.} = object
    lpwstrName*: LPOLESTR
    propid*: PROPID
    vt*: VARTYPE
  PROPSETFLAG* = int32
  STORAGELAYOUT* {.final, pure.} = object
    LayoutType*: DWORD
    pwcsElementName*: ptr OLECHAR
    cOffset*: LARGE_INTEGER
    cBytes*: LARGE_INTEGER
  SOLE_AUTHENTICATION_SERVICE* {.final, pure.} = object
    dwAuthnSvc*: DWORD
    dwAuthzSvc*: DWORD
    pPrincipalName*: ptr OLECHAR
    hr*: HRESULT
  EOLE_AUTHENTICATION_CAPABILITIES* = int32
  SOLE_AUTHENTICATION_INFO* {.final, pure.} = object
    dwAuthnSvc*: DWORD
    dwAuthzSvc*: DWORD
    pAuthInfo*: pointer
  SOLE_AUTHENTICATION_LIST* {.final, pure.} = object
    cAuthInfo*: DWORD
    aAuthInfo*: ptr SOLE_AUTHENTICATION_INFO
  IEnumFORMATETC* {.pure.} = object
    lpVtbl*: ptr IEnumFORMATETCVtbl
  IEnumFORMATETCVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumFORMATETC, P1: ULONG, P2: ptr FORMATETC, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumFORMATETC, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumFORMATETC): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumFORMATETC, P1: ptr ptr IEnumFORMATETC): HRESULT {.stdcall.}
  IEnumHLITEM* {.pure.} = object
    lpVtbl*: ptr IEnumHLITEMVtbl
  IEnumHLITEMVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumHLITEM, P1: ULONG, P2: ptr HLITEM, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumHLITEM, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumHLITEM): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumHLITEM, P1: ptr ptr IEnumHLITEM): HRESULT {.stdcall.}
  IEnumSTATDATA* {.pure.} = object
    lpVtbl*: ptr IEnumSTATDATAVtbl
  IEnumSTATDATAVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumSTATDATA, P1: ULONG, P2: ptr STATDATA, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumSTATDATA, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumSTATDATA): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumSTATDATA, P1: ptr ptr IEnumSTATDATA): HRESULT {.stdcall.}
  IEnumSTATPROPSETSTG* {.pure.} = object
    lpVtbl*: ptr IEnumSTATPROPSETSTGVtbl
  IEnumSTATPROPSETSTGVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumSTATPROPSETSTG, P1: ULONG, P2: ptr STATPROPSETSTG, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumSTATPROPSETSTG, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumSTATPROPSETSTG): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumSTATPROPSETSTG, P1: ptr ptr IEnumSTATPROPSETSTG): HRESULT {.stdcall.}
  IEnumSTATPROPSTG* {.pure.} = object
    lpVtbl*: ptr IEnumSTATPROPSTGVtbl
  IEnumSTATPROPSTGVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumSTATPROPSTG, P1: ULONG, P2: ptr STATPROPSTG, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumSTATPROPSTG, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumSTATPROPSTG): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumSTATPROPSTG, P1: ptr ptr IEnumSTATPROPSTG): HRESULT {.stdcall.}
  IEnumSTATSTG* {.pure.} = object
    lpVtbl*: ptr IEnumSTATSTGVtbl
  IEnumSTATSTGVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumSTATSTG, P1: ULONG, P2: ptr STATSTG, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumSTATSTG, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumSTATSTG): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumSTATSTG, P1: ptr ptr IEnumSTATSTG): HRESULT {.stdcall.}
  IEnumString* {.pure.} = object
    lpVtbl*: ptr IEnumStringVtbl
  IEnumStringVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumString, P1: ULONG, P2: ptr LPOLESTR, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumString, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumString): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumString, P1: ptr ptr IEnumString): HRESULT {.stdcall.}
  IEnumMoniker* {.pure.} = object
    lpVtbl*: ptr IEnumMonikerVtbl
  IEnumMonikerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumMoniker, P1: ULONG, P2: ptr IMoniker, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumMoniker, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumMoniker): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumMoniker, P1: ptr ptr IEnumMoniker): HRESULT {.stdcall.}
  IEnumUnknown* {.pure.} = object
    lpVtbl*: ptr IEnumUnknownVtbl
  IEnumUnknownVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumUnknown, P1: ULONG, P2: ptr IUnknown, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumUnknown, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumUnknown): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumUnknown, P1: ptr ptr IEnumUnknown): HRESULT {.stdcall.}
  ISequentialStream* {.pure.} = object
    lpVtbl*: ptr ISequentialStreamVtbl
  ISequentialStreamVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Read*: proc(self: ptr ISequentialStream, P1: pointer, P2: ULONG, P3: ptr ULONG): HRESULT {.stdcall.}
    Write*: proc(self: ptr ISequentialStream, P1: pointer, P2: ULONG, P3: ptr ULONG): HRESULT {.stdcall.}
  IStream* {.pure.} = object
    lpVtbl*: ptr IStreamVtbl
  IStreamVtbl* {.pure, inheritable.} = object of ISequentialStreamVtbl
    Seek*: proc(self: ptr IStream, P1: LARGE_INTEGER, P2: DWORD, P3: ptr ULARGE_INTEGER): HRESULT {.stdcall.}
    SetSize*: proc(self: ptr IStream, P1: ULARGE_INTEGER): HRESULT {.stdcall.}
    CopyTo*: proc(self: ptr IStream, P1: IStream, P2: ULARGE_INTEGER, P3: ptr ULARGE_INTEGER, P4: ptr ULARGE_INTEGER): HRESULT {.stdcall.}
    Commit*: proc(self: ptr IStream, P1: DWORD): HRESULT {.stdcall.}
    Revert*: proc(self: ptr IStream): HRESULT {.stdcall.}
    LockRegion*: proc(self: ptr IStream, P1: ULARGE_INTEGER, P2: ULARGE_INTEGER, P3: DWORD): HRESULT {.stdcall.}
    UnlockRegion*: proc(self: ptr IStream, P1: ULARGE_INTEGER, P2: ULARGE_INTEGER, P3: DWORD): HRESULT {.stdcall.}
    Stat*: proc(self: ptr IStream, P1: ptr STATSTG, P2: DWORD): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IStream, P1: ptr LPSTREAM): HRESULT {.stdcall.}
  IMarshal* {.pure.} = object
    lpVtbl*: ptr IMarshalVtbl
  IMarshalVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetUnmarshalClass*: proc(self: ptr IMarshal, P1: REFIID, P2: PVOID, P3: DWORD, P4: PVOID, P5: DWORD, P6: ptr CLSID): HRESULT {.stdcall.}
    GetMarshalSizeMax*: proc(self: ptr IMarshal, P1: REFIID, P2: PVOID, P3: DWORD, P4: PVOID, P5: PDWORD, P6: ptr ULONG): HRESULT {.stdcall.}
    MarshalInterface*: proc(self: ptr IMarshal, P1: IStream, P2: REFIID, P3: PVOID, P4: DWORD, P5: PVOID, P6: DWORD): HRESULT {.stdcall.}
    UnmarshalInterface*: proc(self: ptr IMarshal, P1: IStream, P2: REFIID, P3: ptr pointer): HRESULT {.stdcall.}
    ReleaseMarshalData*: proc(self: ptr IMarshal, P1: IStream): HRESULT {.stdcall.}
    DisconnectObject*: proc(self: ptr IMarshal, P1: DWORD): HRESULT {.stdcall.}
  IStdMarshalInfo* {.pure.} = object
    lpVtbl*: ptr IStdMarshalInfoVtbl
  IStdMarshalInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetClassForHandler*: proc(self: ptr IStdMarshalInfo, P1: DWORD, P2: PVOID, P3: ptr CLSID): HRESULT {.stdcall.}
  IMalloc* {.pure.} = object
    lpVtbl*: ptr IMallocVtbl
  IMallocVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Alloc*: proc(self: ptr IMalloc, P1: ULONG): pointer {.stdcall.}
    Realloc*: proc(self: ptr IMalloc, P1: pointer, P2: ULONG): pointer {.stdcall.}
    Free*: proc(self: ptr IMalloc, P1: pointer): void {.stdcall.}
    GetSize*: proc(self: ptr IMalloc, P1: pointer): ULONG {.stdcall.}
    DidAlloc*: proc(self: ptr IMalloc, P1: pointer): int32 {.stdcall.}
    HeapMinimize*: proc(self: ptr IMalloc): void {.stdcall.}
  IMallocSpy* {.pure.} = object
    lpVtbl*: ptr IMallocSpyVtbl
  IMallocSpyVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    PreAlloc*: proc(self: ptr IMallocSpy, P1: ULONG): ULONG {.stdcall.}
    PostAlloc*: proc(self: ptr IMallocSpy, P1: pointer): pointer {.stdcall.}
    PreFree*: proc(self: ptr IMallocSpy, P1: pointer, P2: BOOL): pointer {.stdcall.}
    PostFree*: proc(self: ptr IMallocSpy, P1: BOOL): void {.stdcall.}
    PreRealloc*: proc(self: ptr IMallocSpy, P1: pointer, P2: ULONG, P3: ptr pointer, P4: BOOL): ULONG {.stdcall.}
    PostRealloc*: proc(self: ptr IMallocSpy, P1: pointer, P2: BOOL): pointer {.stdcall.}
    PreGetSize*: proc(self: ptr IMallocSpy, P1: pointer, P2: BOOL): pointer {.stdcall.}
    PostGetSize*: proc(self: ptr IMallocSpy, P1: ULONG, P2: BOOL): ULONG {.stdcall.}
    PreDidAlloc*: proc(self: ptr IMallocSpy, P1: pointer, P2: BOOL): pointer {.stdcall.}
    PostDidAlloc*: proc(self: ptr IMallocSpy, P1: pointer, P2: BOOL, P3: int32): int32 {.stdcall.}
    PreHeapMinimize*: proc(self: ptr IMallocSpy): void {.stdcall.}
    PostHeapMinimize*: proc(self: ptr IMallocSpy): void {.stdcall.}
  IMessageFilter* {.pure.} = object
    lpVtbl*: ptr IMessageFilterVtbl
  IMessageFilterVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    HandleInComingCall*: proc(self: ptr IMessageFilter, P1: DWORD, P2: HTASK, P3: DWORD, P4: LPINTERFACEINFO): DWORD {.stdcall.}
    RetryRejectedCall*: proc(self: ptr IMessageFilter, P1: HTASK, P2: DWORD, P3: DWORD): DWORD {.stdcall.}
    MessagePending*: proc(self: ptr IMessageFilter, P1: HTASK, P2: DWORD, P3: DWORD): DWORD {.stdcall.}
  IPersist* {.pure.} = object
    lpVtbl*: ptr IPersistVtbl
  IPersistVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetClassID*: proc(self: ptr IPersist, P1: ptr CLSID): HRESULT {.stdcall.}
  IPersistStream* {.pure.} = object
    lpVtbl*: ptr IPersistStreamVtbl
  IPersistStreamVtbl* {.pure, inheritable.} = object of IPersistVtbl
    IsDirty*: proc(self: ptr IPersistStream): HRESULT {.stdcall.}
    Load*: proc(self: ptr IPersistStream, P1: ptr IStream): HRESULT {.stdcall.}
    Save*: proc(self: ptr IPersistStream, P1: ptr IStream, P2: BOOL): HRESULT {.stdcall.}
    GetSizeMax*: proc(self: ptr IPersistStream, P1: PULARGE_INTEGER): HRESULT {.stdcall.}
  IRunningObjectTable* {.pure.} = object
    lpVtbl*: ptr IRunningObjectTableVtbl
  IRunningObjectTableVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Register*: proc(self: ptr IRunningObjectTable, P1: DWORD, P2: LPUNKNOWN, P3: LPMONIKER, P4: PDWORD): HRESULT {.stdcall.}
    Revoke*: proc(self: ptr IRunningObjectTable, P1: DWORD): HRESULT {.stdcall.}
    IsRunning*: proc(self: ptr IRunningObjectTable, P1: LPMONIKER): HRESULT {.stdcall.}
    GetObject*: proc(self: ptr IRunningObjectTable, P1: LPMONIKER, P2: ptr LPUNKNOWN): HRESULT {.stdcall.}
    NoteChangeTime*: proc(self: ptr IRunningObjectTable, P1: DWORD, P2: LPFILETIME): HRESULT {.stdcall.}
    GetTimeOfLastChange*: proc(self: ptr IRunningObjectTable, P1: LPMONIKER, P2: LPFILETIME): HRESULT {.stdcall.}
    EnumRunning*: proc(self: ptr IRunningObjectTable, P1: ptr ptr IEnumMoniker): HRESULT {.stdcall.}
  IBindCtx* {.pure.} = object
    lpVtbl*: ptr IBindCtxVtbl
  IBindCtxVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    RegisterObjectBound*: proc(self: ptr IBindCtx, P1: LPUNKNOWN): HRESULT {.stdcall.}
    RevokeObjectBound*: proc(self: ptr IBindCtx, P1: LPUNKNOWN): HRESULT {.stdcall.}
    ReleaseBoundObjects*: proc(self: ptr IBindCtx): HRESULT {.stdcall.}
    SetBindOptions*: proc(self: ptr IBindCtx, P1: LPBIND_OPTS): HRESULT {.stdcall.}
    GetBindOptions*: proc(self: ptr IBindCtx, P1: LPBIND_OPTS): HRESULT {.stdcall.}
    GetRunningObjectTable*: proc(self: ptr IBindCtx, P1: ptr ptr IRunningObjectTable): HRESULT {.stdcall.}
    RegisterObjectParam*: proc(self: ptr IBindCtx, P1: LPOLESTR, P2: ptr IUnknown): HRESULT {.stdcall.}
    GetObjectParam*: proc(self: ptr IBindCtx, P1: LPOLESTR, P2: ptr ptr IUnknown): HRESULT {.stdcall.}
    EnumObjectParam*: proc(self: ptr IBindCtx, P1: ptr ptr IEnumString): HRESULT {.stdcall.}
    RevokeObjectParam*: proc(self: ptr IBindCtx, P1: LPOLESTR): HRESULT {.stdcall.}
  IMoniker* {.pure.} = object
    lpVtbl*: ptr IMonikerVtbl
  IMonikerVtbl* {.pure, inheritable.} = object of IPersistStreamVtbl
    BindToObject*: proc(self: ptr IMoniker, P1: ptr IBindCtx, P2: ptr IMoniker, P3: REFIID, P4: ptr PVOID): HRESULT {.stdcall.}
    BindToStorage*: proc(self: ptr IMoniker, P1: ptr IBindCtx, P2: ptr IMoniker, P3: REFIID, P4: ptr PVOID): HRESULT {.stdcall.}
    Reduce*: proc(self: ptr IMoniker, P1: ptr IBindCtx, P2: DWORD, P3: ptr ptr IMoniker, P4: ptr ptr IMoniker): HRESULT {.stdcall.}
    ComposeWith*: proc(self: ptr IMoniker, P1: ptr IMoniker, P2: BOOL, P3: ptr ptr IMoniker): HRESULT {.stdcall.}
    Enum*: proc(self: ptr IMoniker, P1: BOOL, P2: ptr ptr IEnumMoniker): HRESULT {.stdcall.}
    IsEqual*: proc(self: ptr IMoniker, P1: ptr IMoniker): HRESULT {.stdcall.}
    Hash*: proc(self: ptr IMoniker, P1: PDWORD): HRESULT {.stdcall.}
    IsRunning*: proc(self: ptr IMoniker, P1: ptr IBindCtx, P2: ptr IMoniker, P3: ptr IMoniker): HRESULT {.stdcall.}
    GetTimeOfLastChange*: proc(self: ptr IMoniker, P1: ptr IBindCtx, P2: ptr IMoniker, P3: LPFILETIME): HRESULT {.stdcall.}
    Inverse*: proc(self: ptr IMoniker, P1: ptr ptr IMoniker): HRESULT {.stdcall.}
    CommonPrefixWith*: proc(self: ptr IMoniker, P1: ptr IMoniker, P2: ptr ptr IMoniker): HRESULT {.stdcall.}
    RelativePathTo*: proc(self: ptr IMoniker, P1: ptr IMoniker, P2: ptr ptr IMoniker): HRESULT {.stdcall.}
    GetDisplayName*: proc(self: ptr IMoniker, P1: ptr IBindCtx, P2: ptr IMoniker, P3: ptr LPOLESTR): HRESULT {.stdcall.}
    ParseDisplayName*: proc(self: ptr IMoniker, P1: ptr IBindCtx, P2: ptr IMoniker, P3: LPOLESTR, P4: ptr ULONG, P5: ptr ptr IMoniker): HRESULT {.stdcall.}
    IsSystemMoniker*: proc(self: ptr IMoniker, P1: PDWORD): HRESULT {.stdcall.}
  IPersistStorage* {.pure.} = object
    lpVtbl*: ptr IPersistStorageVtbl
  IPersistStorageVtbl* {.pure, inheritable.} = object of IPersistVtbl
    IsDirty*: proc(self: ptr IPersistStorage): HRESULT {.stdcall.}
    InitNew*: proc(self: ptr IPersistStorage, P1: LPSTORAGE): HRESULT {.stdcall.}
    Load*: proc(self: ptr IPersistStorage, P1: LPSTORAGE): HRESULT {.stdcall.}
    Save*: proc(self: ptr IPersistStorage, P1: LPSTORAGE, P2: BOOL): HRESULT {.stdcall.}
    SaveCompleted*: proc(self: ptr IPersistStorage, P1: LPSTORAGE): HRESULT {.stdcall.}
    HandsOffStorage*: proc(self: ptr IPersistStorage): HRESULT {.stdcall.}
  IPersistFile* {.pure.} = object
    lpVtbl*: ptr IPersistFileVtbl
  IPersistFileVtbl* {.pure, inheritable.} = object of IPersistVtbl
    IsDirty*: proc(self: ptr IPersistFile): HRESULT {.stdcall.}
    Load*: proc(self: ptr IPersistFile, P1: LPCOLESTR, P2: DWORD): HRESULT {.stdcall.}
    Save*: proc(self: ptr IPersistFile, P1: LPCOLESTR, P2: BOOL): HRESULT {.stdcall.}
    SaveCompleted*: proc(self: ptr IPersistFile, P1: LPCOLESTR): HRESULT {.stdcall.}
    GetCurFile*: proc(self: ptr IPersistFile, P1: ptr LPOLESTR): HRESULT {.stdcall.}
  IAdviseSink* {.pure.} = object
    lpVtbl*: ptr IAdviseSinkVtbl
  IAdviseSinkVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnDataChange*: proc(self: ptr IAdviseSink, P1: ptr FORMATETC, P2: ptr STGMEDIUM): void {.stdcall.}
    OnViewChange*: proc(self: ptr IAdviseSink, P1: DWORD, P2: LONG): void {.stdcall.}
    OnRename*: proc(self: ptr IAdviseSink, P1: ptr IMoniker): void {.stdcall.}
    OnSave*: proc(self: ptr IAdviseSink): void {.stdcall.}
    OnClose*: proc(self: ptr IAdviseSink): void {.stdcall.}
  IAdviseSink2* {.pure.} = object
    lpVtbl*: ptr IAdviseSink2Vtbl
  IAdviseSink2Vtbl* {.pure, inheritable.} = object of IAdviseSinkVtbl
    OnLinkSrcChange*: proc(self: ptr IAdviseSink2, P1: ptr IMoniker): void {.stdcall.}
  IDataObject* {.pure.} = object
    lpVtbl*: ptr IDataObjectVtbl
  IDataObjectVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetData*: proc(self: ptr IDataObject, P1: ptr FORMATETC, P2: ptr STGMEDIUM): HRESULT {.stdcall.}
    GetDataHere*: proc(self: ptr IDataObject, P1: ptr FORMATETC, P2: ptr STGMEDIUM): HRESULT {.stdcall.}
    QueryGetData*: proc(self: ptr IDataObject, P1: ptr FORMATETC): HRESULT {.stdcall.}
    GetCanonicalFormatEtc*: proc(self: ptr IDataObject, P1: ptr FORMATETC, P2: ptr FORMATETC): HRESULT {.stdcall.}
    SetData*: proc(self: ptr IDataObject, P1: ptr FORMATETC, P2: ptr STGMEDIUM, P3: BOOL): HRESULT {.stdcall.}
    EnumFormatEtc*: proc(self: ptr IDataObject, P1: DWORD, P2: ptr ptr IEnumFORMATETC): HRESULT {.stdcall.}
    DAdvise*: proc(self: ptr IDataObject, P1: ptr FORMATETC, P2: DWORD, P3: ptr IAdviseSink, P4: PDWORD): HRESULT {.stdcall.}
    DUnadvise*: proc(self: ptr IDataObject, P1: DWORD): HRESULT {.stdcall.}
    EnumDAdvise*: proc(self: ptr IDataObject, P1: ptr ptr IEnumSTATDATA): HRESULT {.stdcall.}
  IDataAdviseHolder* {.pure.} = object
    lpVtbl*: ptr IDataAdviseHolderVtbl
  IDataAdviseHolderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Advise*: proc(self: ptr IDataAdviseHolder, P1: ptr IDataObject, P2: ptr FORMATETC, P3: DWORD, P4: ptr IAdviseSink, P5: PDWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr IDataAdviseHolder, P1: DWORD): HRESULT {.stdcall.}
    EnumAdvise*: proc(self: ptr IDataAdviseHolder, P1: ptr ptr IEnumSTATDATA): HRESULT {.stdcall.}
    SendOnDataChange*: proc(self: ptr IDataAdviseHolder, P1: ptr IDataObject, P2: DWORD, P3: DWORD): HRESULT {.stdcall.}
  IStorage* {.pure.} = object
    lpVtbl*: ptr IStorageVtbl
  IStorageVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CreateStream*: proc(self: ptr IStorage, P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: DWORD, P5: ptr IStream): HRESULT {.stdcall.}
    OpenStream*: proc(self: ptr IStorage, P1: LPCWSTR, P2: PVOID, P3: DWORD, P4: DWORD, P5: ptr IStream): HRESULT {.stdcall.}
    CreateStorage*: proc(self: ptr IStorage, P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: DWORD, P5: ptr IStorage): HRESULT {.stdcall.}
    OpenStorage*: proc(self: ptr IStorage, P1: LPCWSTR, P2: IStorage, P3: DWORD, P4: SNB, P5: DWORD, P6: ptr IStorage): HRESULT {.stdcall.}
    CopyTo*: proc(self: ptr IStorage, P1: DWORD, P2: ptr IID, P3: SNB, P4: IStorage): HRESULT {.stdcall.}
    MoveElementTo*: proc(self: ptr IStorage, P1: LPCWSTR, P2: IStorage, P3: LPCWSTR, P4: DWORD): HRESULT {.stdcall.}
    Commit*: proc(self: ptr IStorage, P1: DWORD): HRESULT {.stdcall.}
    Revert*: proc(self: ptr IStorage): HRESULT {.stdcall.}
    EnumElements*: proc(self: ptr IStorage, P1: DWORD, P2: PVOID, P3: DWORD, P4: ptr IEnumSTATSTG): HRESULT {.stdcall.}
    DestroyElement*: proc(self: ptr IStorage, P1: LPCWSTR): HRESULT {.stdcall.}
    RenameElement*: proc(self: ptr IStorage, P1: LPCWSTR, P2: LPCWSTR): HRESULT {.stdcall.}
    SetElementTimes*: proc(self: ptr IStorage, P1: LPCWSTR, P2: ptr FILETIME, P3: ptr FILETIME, P4: ptr FILETIME): HRESULT {.stdcall.}
    SetClass*: proc(self: ptr IStorage, P1: REFCLSID): HRESULT {.stdcall.}
    SetStateBits*: proc(self: ptr IStorage, P1: DWORD, P2: DWORD): HRESULT {.stdcall.}
    Stat*: proc(self: ptr IStorage, P1: ptr STATSTG, P2: DWORD): HRESULT {.stdcall.}
  IRootStorage* {.pure.} = object
    lpVtbl*: ptr IRootStorageVtbl
  IRootStorageVtbl* {.pure, inheritable.} = object of IPersistVtbl
    SwitchToFile*: proc(self: ptr IRootStorage, P1: LPOLESTR): HRESULT {.stdcall.}
  IRpcChannelBuffer* {.pure.} = object
    lpVtbl*: ptr IRpcChannelBufferVtbl
  IRpcChannelBufferVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetBuffer*: proc(self: ptr IRpcChannelBuffer, P1: ptr RPCOLEMESSAGE, P2: REFIID): HRESULT {.stdcall.}
    SendReceive*: proc(self: ptr IRpcChannelBuffer, P1: ptr RPCOLEMESSAGE, P2: PULONG): HRESULT {.stdcall.}
    FreeBuffer*: proc(self: ptr IRpcChannelBuffer, P1: ptr RPCOLEMESSAGE): HRESULT {.stdcall.}
    GetDestCtx*: proc(self: ptr IRpcChannelBuffer, P1: PDWORD, P2: ptr PVOID): HRESULT {.stdcall.}
    IsConnected*: proc(self: ptr IRpcChannelBuffer): HRESULT {.stdcall.}
  IRpcProxyBuffer* {.pure.} = object
    lpVtbl*: ptr IRpcProxyBufferVtbl
  IRpcProxyBufferVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Connect*: proc(self: ptr IRpcProxyBuffer, P1: ptr IRpcChannelBuffer): HRESULT {.stdcall.}
    Disconnect*: proc(self: ptr IRpcProxyBuffer): void {.stdcall.}
  IRpcStubBuffer* {.pure.} = object
    lpVtbl*: ptr IRpcStubBufferVtbl
  IRpcStubBufferVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Connect*: proc(self: ptr IRpcStubBuffer, P1: LPUNKNOWN): HRESULT {.stdcall.}
    Disconnect*: proc(self: ptr IRpcStubBuffer): void {.stdcall.}
    Invoke*: proc(self: ptr IRpcStubBuffer, P1: ptr RPCOLEMESSAGE, P2: LPRPCSTUBBUFFER): HRESULT {.stdcall.}
    IsIIDSupported*: proc(self: ptr IRpcStubBuffer, P1: REFIID): LPRPCSTUBBUFFER {.stdcall.}
    CountRefs*: proc(self: ptr IRpcStubBuffer): ULONG {.stdcall.}
    DebugServerQueryInterface*: proc(self: ptr IRpcStubBuffer, P1: ptr PVOID): HRESULT {.stdcall.}
    DebugServerRelease*: proc(self: ptr IRpcStubBuffer, P1: PVOID): HRESULT {.stdcall.}
  IPSFactoryBuffer* {.pure.} = object
    lpVtbl*: ptr IPSFactoryBufferVtbl
  IPSFactoryBufferVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CreateProxy*: proc(self: ptr IPSFactoryBuffer, P1: LPUNKNOWN, P2: REFIID, P3: ptr LPRPCPROXYBUFFER, P4: ptr PVOID): HRESULT {.stdcall.}
    CreateStub*: proc(self: ptr IPSFactoryBuffer, P1: REFIID, P2: LPUNKNOWN, P3: ptr LPRPCSTUBBUFFER): HRESULT {.stdcall.}
  LPPSFACTORYBUFFER* = ptr IPSFactoryBuffer
  ILockBytes* {.pure.} = object
    lpVtbl*: ptr ILockBytesVtbl
  ILockBytesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ReadAt*: proc(self: ptr ILockBytes, P1: ULARGE_INTEGER, P2: PVOID, P3: ULONG, P4: ptr ULONG): HRESULT {.stdcall.}
    WriteAt*: proc(self: ptr ILockBytes, P1: ULARGE_INTEGER, P2: PCVOID, P3: ULONG, P4: ptr ULONG): HRESULT {.stdcall.}
    Flush*: proc(self: ptr ILockBytes): HRESULT {.stdcall.}
    SetSize*: proc(self: ptr ILockBytes, P1: ULARGE_INTEGER): HRESULT {.stdcall.}
    LockRegion*: proc(self: ptr ILockBytes, P1: ULARGE_INTEGER, P2: ULARGE_INTEGER, P3: DWORD): HRESULT {.stdcall.}
    UnlockRegion*: proc(self: ptr ILockBytes, P1: ULARGE_INTEGER, P2: ULARGE_INTEGER, P3: DWORD): HRESULT {.stdcall.}
    Stat*: proc(self: ptr ILockBytes, P1: ptr STATSTG, P2: DWORD): HRESULT {.stdcall.}
  IExternalConnection* {.pure.} = object
    lpVtbl*: ptr IExternalConnectionVtbl
  IExternalConnectionVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AddConnection*: proc(self: ptr IExternalConnection, P1: DWORD, P2: DWORD): HRESULT {.stdcall.}
    ReleaseConnection*: proc(self: ptr IExternalConnection, P1: DWORD, P2: DWORD, P3: BOOL): HRESULT {.stdcall.}
  IRunnableObject* {.pure.} = object
    lpVtbl*: ptr IRunnableObjectVtbl
  IRunnableObjectVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetRunningClass*: proc(self: ptr IRunnableObject, P1: LPCLSID): HRESULT {.stdcall.}
    Run*: proc(self: ptr IRunnableObject, P1: LPBC): HRESULT {.stdcall.}
    IsRunning*: proc(self: ptr IRunnableObject): BOOL {.stdcall.}
    LockRunning*: proc(self: ptr IRunnableObject, P1: BOOL, P2: BOOL): HRESULT {.stdcall.}
    SetContainedObject*: proc(self: ptr IRunnableObject, P1: BOOL): HRESULT {.stdcall.}
  IROTData* {.pure.} = object
    lpVtbl*: ptr IROTDataVtbl
  IROTDataVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetComparisonData*: proc(self: ptr IROTData, P1: PVOID, P2: ULONG, P3: PULONG): HRESULT {.stdcall.}
  IChannelHook* {.pure.} = object
    lpVtbl*: ptr IChannelHookVtbl
  IChannelHookVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ClientGetSize*: proc(self: ptr IChannelHook, P1: REFGUID, P2: REFIID, P3: PULONG): void {.stdcall.}
    ClientFillBuffer*: proc(self: ptr IChannelHook, P1: REFGUID, P2: REFIID, P3: PULONG, P4: PVOID): void {.stdcall.}
    ClientNotify*: proc(self: ptr IChannelHook, P1: REFGUID, P2: REFIID, P3: ULONG, P4: PVOID, P5: DWORD, P6: HRESULT): void {.stdcall.}
    ServerNotify*: proc(self: ptr IChannelHook, P1: REFGUID, P2: REFIID, P3: ULONG, P4: PVOID, P5: DWORD): void {.stdcall.}
    ServerGetSize*: proc(self: ptr IChannelHook, P1: REFGUID, P2: REFIID, P3: HRESULT, P4: PULONG): void {.stdcall.}
    ServerFillBuffer*: proc(self: ptr IChannelHook, P1: REFGUID, P2: REFIID, P3: PULONG, P4: PVOID, P5: HRESULT): void {.stdcall.}
  IPropertyStorage* {.pure.} = object
    lpVtbl*: ptr IPropertyStorageVtbl
  IPropertyStorageVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ReadMultiple*: proc(self: ptr IPropertyStorage, P1: ULONG, P2: ptr PROPSPEC, P3: ptr PROPVARIANT): HRESULT {.stdcall.}
    WriteMultiple*: proc(self: ptr IPropertyStorage, P1: ULONG, P2: ptr PROPSPEC, P3: ptr PROPVARIANT, P4: PROPID): HRESULT {.stdcall.}
    DeleteMultiple*: proc(self: ptr IPropertyStorage, P1: ULONG, P2: ptr PROPSPEC): HRESULT {.stdcall.}
    ReadPropertyNames*: proc(self: ptr IPropertyStorage, P1: ULONG, P2: ptr PROPID, P3: ptr LPWSTR): HRESULT {.stdcall.}
    WritePropertyNames*: proc(self: ptr IPropertyStorage, P1: ULONG, P2: ptr PROPID, P3: ptr LPWSTR): HRESULT {.stdcall.}
    DeletePropertyNames*: proc(self: ptr IPropertyStorage, P1: ULONG, P2: ptr PROPID): HRESULT {.stdcall.}
    SetClass*: proc(self: ptr IPropertyStorage, P1: REFCLSID): HRESULT {.stdcall.}
    Commit*: proc(self: ptr IPropertyStorage, P1: DWORD): HRESULT {.stdcall.}
    Revert*: proc(self: ptr IPropertyStorage): HRESULT {.stdcall.}
    Enum*: proc(self: ptr IPropertyStorage, P1: ptr ptr IEnumSTATPROPSTG): HRESULT {.stdcall.}
    Stat*: proc(self: ptr IPropertyStorage, P1: ptr STATPROPSTG): HRESULT {.stdcall.}
    SetTimes*: proc(self: ptr IPropertyStorage, P1: ptr FILETIME, P2: ptr FILETIME, P3: ptr FILETIME): HRESULT {.stdcall.}
  IPropertySetStorage* {.pure.} = object
    lpVtbl*: ptr IPropertySetStorageVtbl
  IPropertySetStorageVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Create*: proc(self: ptr IPropertySetStorage, P1: REFFMTID, P2: ptr CLSID, P3: DWORD, P4: DWORD, P5: ptr LPPROPERTYSTORAGE): HRESULT {.stdcall.}
    Open*: proc(self: ptr IPropertySetStorage, P1: REFFMTID, P2: DWORD, P3: ptr LPPROPERTYSTORAGE): HRESULT {.stdcall.}
    Delete*: proc(self: ptr IPropertySetStorage, P1: REFFMTID): HRESULT {.stdcall.}
    Enum*: proc(self: ptr IPropertySetStorage, P1: ptr ptr IEnumSTATPROPSETSTG): HRESULT {.stdcall.}
  IClientSecurity* {.pure.} = object
    lpVtbl*: ptr IClientSecurityVtbl
  IClientSecurityVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    QueryBlanket*: proc(self: ptr IClientSecurity, P1: PVOID, P2: PDWORD, P3: PDWORD, P4: ptr ptr OLECHAR, P5: PDWORD, P6: PDWORD, P7: ptr ptr RPC_AUTH_IDENTITY_HANDLE, P8: ptr PDWORD): HRESULT {.stdcall.}
    SetBlanket*: proc(self: ptr IClientSecurity, P1: PVOID, P2: DWORD, P3: DWORD, P4: LPWSTR, P5: DWORD, P6: DWORD, P7: ptr RPC_AUTH_IDENTITY_HANDLE, P8: DWORD): HRESULT {.stdcall.}
    CopyProxy*: proc(self: ptr IClientSecurity, P1: LPUNKNOWN, P2: ptr LPUNKNOWN): HRESULT {.stdcall.}
  IServerSecurity* {.pure.} = object
    lpVtbl*: ptr IServerSecurityVtbl
  IServerSecurityVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    QueryBlanket*: proc(self: ptr IServerSecurity, P1: PDWORD, P2: PDWORD, P3: ptr ptr OLECHAR, P4: PDWORD, P5: PDWORD, P6: ptr RPC_AUTHZ_HANDLE, P7: ptr PDWORD): HRESULT {.stdcall.}
    ImpersonateClient*: proc(self: ptr IServerSecurity): HRESULT {.stdcall.}
    RevertToSelf*: proc(self: ptr IServerSecurity): HRESULT {.stdcall.}
    IsImpersonating*: proc(self: ptr IServerSecurity): HRESULT {.stdcall.}
  IClassActivator* {.pure.} = object
    lpVtbl*: ptr IClassActivatorVtbl
  IClassActivatorVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetClassObject*: proc(self: ptr IClassActivator, P1: REFCLSID, P2: DWORD, P3: LCID, P4: REFIID, P5: ptr PVOID): HRESULT {.stdcall.}
  IFillLockBytes* {.pure.} = object
    lpVtbl*: ptr IFillLockBytesVtbl
  IFillLockBytesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    FillAppend*: proc(self: ptr IFillLockBytes, P1: pointer, P2: ULONG, P3: PULONG): HRESULT {.stdcall.}
    FillAt*: proc(self: ptr IFillLockBytes, P1: ULARGE_INTEGER, P2: pointer, P3: ULONG, P4: PULONG): HRESULT {.stdcall.}
    SetFillSize*: proc(self: ptr IFillLockBytes, P1: ULARGE_INTEGER): HRESULT {.stdcall.}
    Terminate*: proc(self: ptr IFillLockBytes, P1: BOOL): HRESULT {.stdcall.}
  IProgressNotify* {.pure.} = object
    lpVtbl*: ptr IProgressNotifyVtbl
  IProgressNotifyVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnProgress*: proc(self: ptr IProgressNotify, P1: DWORD, P2: DWORD, P3: BOOL, P4: BOOL): HRESULT {.stdcall.}
  ILayoutStorage* {.pure.} = object
    lpVtbl*: ptr ILayoutStorageVtbl
  ILayoutStorageVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    LayoutScript*: proc(self: ptr ILayoutStorage, P1: ptr STORAGELAYOUT, P2: DWORD, P3: DWORD): HRESULT {.stdcall.}
    BeginMonitor*: proc(self: ptr ILayoutStorage): HRESULT {.stdcall.}
    EndMonitor*: proc(self: ptr ILayoutStorage): HRESULT {.stdcall.}
    ReLayoutDocfile*: proc(self: ptr ILayoutStorage, P1: ptr OLECHAR): HRESULT {.stdcall.}
  IGlobalInterfaceTable* {.pure.} = object
    lpVtbl*: ptr IGlobalInterfaceTableVtbl
  IGlobalInterfaceTableVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    RegisterInterfaceInGlobal*: proc(self: ptr IGlobalInterfaceTable, P1: ptr IUnknown, P2: REFIID, P3: ptr DWORD): HRESULT {.stdcall.}
    RevokeInterfaceFromGlobal*: proc(self: ptr IGlobalInterfaceTable, P1: DWORD): HRESULT {.stdcall.}
    GetInterfaceFromGlobal*: proc(self: ptr IGlobalInterfaceTable, P1: DWORD, P2: REFIID, P3: ptr pointer): HRESULT {.stdcall.}
  STATDATA* {.final, pure.} = object
    formatetc*: FORMATETC
    grfAdvf*: DWORD
    pAdvSink*: ptr IAdviseSink
    dwConnection*: DWORD

converter winim_converter_IEnumFORMATETC*(x: ptr IEnumFORMATETC): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumFORMATETC, P1: ULONG, P2: ptr FORMATETC, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumFORMATETC, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumFORMATETC): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumFORMATETC, P1: ptr ptr IEnumFORMATETC): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IEnumHLITEM*(x: ptr IEnumHLITEM): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumHLITEM, P1: ULONG, P2: ptr HLITEM, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumHLITEM, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumHLITEM): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumHLITEM, P1: ptr ptr IEnumHLITEM): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IEnumSTATDATA*(x: ptr IEnumSTATDATA): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumSTATDATA, P1: ULONG, P2: ptr STATDATA, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumSTATDATA, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumSTATDATA): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumSTATDATA, P1: ptr ptr IEnumSTATDATA): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IEnumSTATPROPSETSTG*(x: ptr IEnumSTATPROPSETSTG): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumSTATPROPSETSTG, P1: ULONG, P2: ptr STATPROPSETSTG, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumSTATPROPSETSTG, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumSTATPROPSETSTG): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumSTATPROPSETSTG, P1: ptr ptr IEnumSTATPROPSETSTG): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IEnumSTATPROPSTG*(x: ptr IEnumSTATPROPSTG): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumSTATPROPSTG, P1: ULONG, P2: ptr STATPROPSTG, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumSTATPROPSTG, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumSTATPROPSTG): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumSTATPROPSTG, P1: ptr ptr IEnumSTATPROPSTG): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IEnumSTATSTG*(x: ptr IEnumSTATSTG): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumSTATSTG, P1: ULONG, P2: ptr STATSTG, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumSTATSTG, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumSTATSTG): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumSTATSTG, P1: ptr ptr IEnumSTATSTG): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IEnumString*(x: ptr IEnumString): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumString, P1: ULONG, P2: ptr LPOLESTR, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumString, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumString): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumString, P1: ptr ptr IEnumString): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IEnumMoniker*(x: ptr IEnumMoniker): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumMoniker, P1: ULONG, P2: ptr IMoniker, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumMoniker, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumMoniker): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumMoniker, P1: ptr ptr IEnumMoniker): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IEnumUnknown*(x: ptr IEnumUnknown): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumUnknown, P1: ULONG, P2: ptr IUnknown, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumUnknown, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumUnknown, P1: ptr ptr IEnumUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_ISequentialStream*(x: ptr ISequentialStream): ptr IUnknown = cast[ptr IUnknown](x)
proc Read*(self: ptr ISequentialStream, P1: pointer, P2: ULONG, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Read(self, P1, P2, P3)
proc Write*(self: ptr ISequentialStream, P1: pointer, P2: ULONG, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Write(self, P1, P2, P3)
converter winim_converter_IStream*(x: ptr IStream): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IStream*(x: ptr IStream): ptr ISequentialStream = cast[ptr ISequentialStream](x)
proc Seek*(self: ptr IStream, P1: LARGE_INTEGER, P2: DWORD, P3: ptr ULARGE_INTEGER): HRESULT {.inline, discardable.} = self.lpVtbl.Seek(self, P1, P2, P3)
proc SetSize*(self: ptr IStream, P1: ULARGE_INTEGER): HRESULT {.inline, discardable.} = self.lpVtbl.SetSize(self, P1)
proc CopyTo*(self: ptr IStream, P1: IStream, P2: ULARGE_INTEGER, P3: ptr ULARGE_INTEGER, P4: ptr ULARGE_INTEGER): HRESULT {.inline, discardable.} = self.lpVtbl.CopyTo(self, P1, P2, P3, P4)
proc Commit*(self: ptr IStream, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Commit(self, P1)
proc Revert*(self: ptr IStream): HRESULT {.inline, discardable.} = self.lpVtbl.Revert(self)
proc LockRegion*(self: ptr IStream, P1: ULARGE_INTEGER, P2: ULARGE_INTEGER, P3: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.LockRegion(self, P1, P2, P3)
proc UnlockRegion*(self: ptr IStream, P1: ULARGE_INTEGER, P2: ULARGE_INTEGER, P3: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.UnlockRegion(self, P1, P2, P3)
proc Stat*(self: ptr IStream, P1: ptr STATSTG, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Stat(self, P1, P2)
proc Clone*(self: ptr IStream, P1: ptr LPSTREAM): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IMarshal*(x: ptr IMarshal): ptr IUnknown = cast[ptr IUnknown](x)
proc GetUnmarshalClass*(self: ptr IMarshal, P1: REFIID, P2: PVOID, P3: DWORD, P4: PVOID, P5: DWORD, P6: ptr CLSID): HRESULT {.inline, discardable.} = self.lpVtbl.GetUnmarshalClass(self, P1, P2, P3, P4, P5, P6)
proc GetMarshalSizeMax*(self: ptr IMarshal, P1: REFIID, P2: PVOID, P3: DWORD, P4: PVOID, P5: PDWORD, P6: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetMarshalSizeMax(self, P1, P2, P3, P4, P5, P6)
proc MarshalInterface*(self: ptr IMarshal, P1: IStream, P2: REFIID, P3: PVOID, P4: DWORD, P5: PVOID, P6: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.MarshalInterface(self, P1, P2, P3, P4, P5, P6)
proc UnmarshalInterface*(self: ptr IMarshal, P1: IStream, P2: REFIID, P3: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.UnmarshalInterface(self, P1, P2, P3)
proc ReleaseMarshalData*(self: ptr IMarshal, P1: IStream): HRESULT {.inline, discardable.} = self.lpVtbl.ReleaseMarshalData(self, P1)
proc DisconnectObject*(self: ptr IMarshal, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.DisconnectObject(self, P1)
converter winim_converter_IStdMarshalInfo*(x: ptr IStdMarshalInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc GetClassForHandler*(self: ptr IStdMarshalInfo, P1: DWORD, P2: PVOID, P3: ptr CLSID): HRESULT {.inline, discardable.} = self.lpVtbl.GetClassForHandler(self, P1, P2, P3)
converter winim_converter_IMalloc*(x: ptr IMalloc): ptr IUnknown = cast[ptr IUnknown](x)
proc Alloc*(self: ptr IMalloc, P1: ULONG): pointer {.inline, discardable.} = self.lpVtbl.Alloc(self, P1)
proc Realloc*(self: ptr IMalloc, P1: pointer, P2: ULONG): pointer {.inline, discardable.} = self.lpVtbl.Realloc(self, P1, P2)
proc Free*(self: ptr IMalloc, P1: pointer): void {.inline, discardable.} = self.lpVtbl.Free(self, P1)
proc GetSize*(self: ptr IMalloc, P1: pointer): ULONG {.inline, discardable.} = self.lpVtbl.GetSize(self, P1)
proc DidAlloc*(self: ptr IMalloc, P1: pointer): int32 {.inline, discardable.} = self.lpVtbl.DidAlloc(self, P1)
proc HeapMinimize*(self: ptr IMalloc): void {.inline, discardable.} = self.lpVtbl.HeapMinimize(self)
converter winim_converter_IMallocSpy*(x: ptr IMallocSpy): ptr IUnknown = cast[ptr IUnknown](x)
proc PreAlloc*(self: ptr IMallocSpy, P1: ULONG): ULONG {.inline, discardable.} = self.lpVtbl.PreAlloc(self, P1)
proc PostAlloc*(self: ptr IMallocSpy, P1: pointer): pointer {.inline, discardable.} = self.lpVtbl.PostAlloc(self, P1)
proc PreFree*(self: ptr IMallocSpy, P1: pointer, P2: BOOL): pointer {.inline, discardable.} = self.lpVtbl.PreFree(self, P1, P2)
proc PostFree*(self: ptr IMallocSpy, P1: BOOL): void {.inline, discardable.} = self.lpVtbl.PostFree(self, P1)
proc PreRealloc*(self: ptr IMallocSpy, P1: pointer, P2: ULONG, P3: ptr pointer, P4: BOOL): ULONG {.inline, discardable.} = self.lpVtbl.PreRealloc(self, P1, P2, P3, P4)
proc PostRealloc*(self: ptr IMallocSpy, P1: pointer, P2: BOOL): pointer {.inline, discardable.} = self.lpVtbl.PostRealloc(self, P1, P2)
proc PreGetSize*(self: ptr IMallocSpy, P1: pointer, P2: BOOL): pointer {.inline, discardable.} = self.lpVtbl.PreGetSize(self, P1, P2)
proc PostGetSize*(self: ptr IMallocSpy, P1: ULONG, P2: BOOL): ULONG {.inline, discardable.} = self.lpVtbl.PostGetSize(self, P1, P2)
proc PreDidAlloc*(self: ptr IMallocSpy, P1: pointer, P2: BOOL): pointer {.inline, discardable.} = self.lpVtbl.PreDidAlloc(self, P1, P2)
proc PostDidAlloc*(self: ptr IMallocSpy, P1: pointer, P2: BOOL, P3: int32): int32 {.inline, discardable.} = self.lpVtbl.PostDidAlloc(self, P1, P2, P3)
proc PreHeapMinimize*(self: ptr IMallocSpy): void {.inline, discardable.} = self.lpVtbl.PreHeapMinimize(self)
proc PostHeapMinimize*(self: ptr IMallocSpy): void {.inline, discardable.} = self.lpVtbl.PostHeapMinimize(self)
converter winim_converter_IMessageFilter*(x: ptr IMessageFilter): ptr IUnknown = cast[ptr IUnknown](x)
proc HandleInComingCall*(self: ptr IMessageFilter, P1: DWORD, P2: HTASK, P3: DWORD, P4: LPINTERFACEINFO): DWORD {.inline, discardable.} = self.lpVtbl.HandleInComingCall(self, P1, P2, P3, P4)
proc RetryRejectedCall*(self: ptr IMessageFilter, P1: HTASK, P2: DWORD, P3: DWORD): DWORD {.inline, discardable.} = self.lpVtbl.RetryRejectedCall(self, P1, P2, P3)
proc MessagePending*(self: ptr IMessageFilter, P1: HTASK, P2: DWORD, P3: DWORD): DWORD {.inline, discardable.} = self.lpVtbl.MessagePending(self, P1, P2, P3)
converter winim_converter_IPersist*(x: ptr IPersist): ptr IUnknown = cast[ptr IUnknown](x)
proc GetClassID*(self: ptr IPersist, P1: ptr CLSID): HRESULT {.inline, discardable.} = self.lpVtbl.GetClassID(self, P1)
converter winim_converter_IPersistStream*(x: ptr IPersistStream): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistStream*(x: ptr IPersistStream): ptr IPersist = cast[ptr IPersist](x)
proc IsDirty*(self: ptr IPersistStream): HRESULT {.inline, discardable.} = self.lpVtbl.IsDirty(self)
proc Load*(self: ptr IPersistStream, P1: ptr IStream): HRESULT {.inline, discardable.} = self.lpVtbl.Load(self, P1)
proc Save*(self: ptr IPersistStream, P1: ptr IStream, P2: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Save(self, P1, P2)
proc GetSizeMax*(self: ptr IPersistStream, P1: PULARGE_INTEGER): HRESULT {.inline, discardable.} = self.lpVtbl.GetSizeMax(self, P1)
converter winim_converter_IRunningObjectTable*(x: ptr IRunningObjectTable): ptr IUnknown = cast[ptr IUnknown](x)
proc Register*(self: ptr IRunningObjectTable, P1: DWORD, P2: LPUNKNOWN, P3: LPMONIKER, P4: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Register(self, P1, P2, P3, P4)
proc Revoke*(self: ptr IRunningObjectTable, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Revoke(self, P1)
proc IsRunning*(self: ptr IRunningObjectTable, P1: LPMONIKER): HRESULT {.inline, discardable.} = self.lpVtbl.IsRunning(self, P1)
proc GetObject*(self: ptr IRunningObjectTable, P1: LPMONIKER, P2: ptr LPUNKNOWN): HRESULT {.inline, discardable.} = self.lpVtbl.GetObject(self, P1, P2)
proc NoteChangeTime*(self: ptr IRunningObjectTable, P1: DWORD, P2: LPFILETIME): HRESULT {.inline, discardable.} = self.lpVtbl.NoteChangeTime(self, P1, P2)
proc GetTimeOfLastChange*(self: ptr IRunningObjectTable, P1: LPMONIKER, P2: LPFILETIME): HRESULT {.inline, discardable.} = self.lpVtbl.GetTimeOfLastChange(self, P1, P2)
proc EnumRunning*(self: ptr IRunningObjectTable, P1: ptr ptr IEnumMoniker): HRESULT {.inline, discardable.} = self.lpVtbl.EnumRunning(self, P1)
converter winim_converter_IBindCtx*(x: ptr IBindCtx): ptr IUnknown = cast[ptr IUnknown](x)
proc RegisterObjectBound*(self: ptr IBindCtx, P1: LPUNKNOWN): HRESULT {.inline, discardable.} = self.lpVtbl.RegisterObjectBound(self, P1)
proc RevokeObjectBound*(self: ptr IBindCtx, P1: LPUNKNOWN): HRESULT {.inline, discardable.} = self.lpVtbl.RevokeObjectBound(self, P1)
proc ReleaseBoundObjects*(self: ptr IBindCtx): HRESULT {.inline, discardable.} = self.lpVtbl.ReleaseBoundObjects(self)
proc SetBindOptions*(self: ptr IBindCtx, P1: LPBIND_OPTS): HRESULT {.inline, discardable.} = self.lpVtbl.SetBindOptions(self, P1)
proc GetBindOptions*(self: ptr IBindCtx, P1: LPBIND_OPTS): HRESULT {.inline, discardable.} = self.lpVtbl.GetBindOptions(self, P1)
proc GetRunningObjectTable*(self: ptr IBindCtx, P1: ptr ptr IRunningObjectTable): HRESULT {.inline, discardable.} = self.lpVtbl.GetRunningObjectTable(self, P1)
proc RegisterObjectParam*(self: ptr IBindCtx, P1: LPOLESTR, P2: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.RegisterObjectParam(self, P1, P2)
proc GetObjectParam*(self: ptr IBindCtx, P1: LPOLESTR, P2: ptr ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.GetObjectParam(self, P1, P2)
proc EnumObjectParam*(self: ptr IBindCtx, P1: ptr ptr IEnumString): HRESULT {.inline, discardable.} = self.lpVtbl.EnumObjectParam(self, P1)
proc RevokeObjectParam*(self: ptr IBindCtx, P1: LPOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.RevokeObjectParam(self, P1)
converter winim_converter_IMoniker*(x: ptr IMoniker): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IMoniker*(x: ptr IMoniker): ptr IPersistStream = cast[ptr IPersistStream](x)
converter winim_converter_IMoniker*(x: ptr IMoniker): ptr IPersist = cast[ptr IPersist](x)
proc BindToObject*(self: ptr IMoniker, P1: ptr IBindCtx, P2: ptr IMoniker, P3: REFIID, P4: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.BindToObject(self, P1, P2, P3, P4)
proc BindToStorage*(self: ptr IMoniker, P1: ptr IBindCtx, P2: ptr IMoniker, P3: REFIID, P4: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.BindToStorage(self, P1, P2, P3, P4)
proc Reduce*(self: ptr IMoniker, P1: ptr IBindCtx, P2: DWORD, P3: ptr ptr IMoniker, P4: ptr ptr IMoniker): HRESULT {.inline, discardable.} = self.lpVtbl.Reduce(self, P1, P2, P3, P4)
proc ComposeWith*(self: ptr IMoniker, P1: ptr IMoniker, P2: BOOL, P3: ptr ptr IMoniker): HRESULT {.inline, discardable.} = self.lpVtbl.ComposeWith(self, P1, P2, P3)
proc Enum*(self: ptr IMoniker, P1: BOOL, P2: ptr ptr IEnumMoniker): HRESULT {.inline, discardable.} = self.lpVtbl.Enum(self, P1, P2)
proc IsEqual*(self: ptr IMoniker, P1: ptr IMoniker): HRESULT {.inline, discardable.} = self.lpVtbl.IsEqual(self, P1)
proc Hash*(self: ptr IMoniker, P1: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Hash(self, P1)
proc IsRunning*(self: ptr IMoniker, P1: ptr IBindCtx, P2: ptr IMoniker, P3: ptr IMoniker): HRESULT {.inline, discardable.} = self.lpVtbl.IsRunning(self, P1, P2, P3)
proc GetTimeOfLastChange*(self: ptr IMoniker, P1: ptr IBindCtx, P2: ptr IMoniker, P3: LPFILETIME): HRESULT {.inline, discardable.} = self.lpVtbl.GetTimeOfLastChange(self, P1, P2, P3)
proc Inverse*(self: ptr IMoniker, P1: ptr ptr IMoniker): HRESULT {.inline, discardable.} = self.lpVtbl.Inverse(self, P1)
proc CommonPrefixWith*(self: ptr IMoniker, P1: ptr IMoniker, P2: ptr ptr IMoniker): HRESULT {.inline, discardable.} = self.lpVtbl.CommonPrefixWith(self, P1, P2)
proc RelativePathTo*(self: ptr IMoniker, P1: ptr IMoniker, P2: ptr ptr IMoniker): HRESULT {.inline, discardable.} = self.lpVtbl.RelativePathTo(self, P1, P2)
proc GetDisplayName*(self: ptr IMoniker, P1: ptr IBindCtx, P2: ptr IMoniker, P3: ptr LPOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDisplayName(self, P1, P2, P3)
proc ParseDisplayName*(self: ptr IMoniker, P1: ptr IBindCtx, P2: ptr IMoniker, P3: LPOLESTR, P4: ptr ULONG, P5: ptr ptr IMoniker): HRESULT {.inline, discardable.} = self.lpVtbl.ParseDisplayName(self, P1, P2, P3, P4, P5)
proc IsSystemMoniker*(self: ptr IMoniker, P1: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.IsSystemMoniker(self, P1)
converter winim_converter_IPersistStorage*(x: ptr IPersistStorage): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistStorage*(x: ptr IPersistStorage): ptr IPersist = cast[ptr IPersist](x)
proc IsDirty*(self: ptr IPersistStorage): HRESULT {.inline, discardable.} = self.lpVtbl.IsDirty(self)
proc InitNew*(self: ptr IPersistStorage, P1: LPSTORAGE): HRESULT {.inline, discardable.} = self.lpVtbl.InitNew(self, P1)
proc Load*(self: ptr IPersistStorage, P1: LPSTORAGE): HRESULT {.inline, discardable.} = self.lpVtbl.Load(self, P1)
proc Save*(self: ptr IPersistStorage, P1: LPSTORAGE, P2: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Save(self, P1, P2)
proc SaveCompleted*(self: ptr IPersistStorage, P1: LPSTORAGE): HRESULT {.inline, discardable.} = self.lpVtbl.SaveCompleted(self, P1)
proc HandsOffStorage*(self: ptr IPersistStorage): HRESULT {.inline, discardable.} = self.lpVtbl.HandsOffStorage(self)
converter winim_converter_IPersistFile*(x: ptr IPersistFile): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistFile*(x: ptr IPersistFile): ptr IPersist = cast[ptr IPersist](x)
proc IsDirty*(self: ptr IPersistFile): HRESULT {.inline, discardable.} = self.lpVtbl.IsDirty(self)
proc Load*(self: ptr IPersistFile, P1: LPCOLESTR, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Load(self, P1, P2)
proc Save*(self: ptr IPersistFile, P1: LPCOLESTR, P2: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Save(self, P1, P2)
proc SaveCompleted*(self: ptr IPersistFile, P1: LPCOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.SaveCompleted(self, P1)
proc GetCurFile*(self: ptr IPersistFile, P1: ptr LPOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurFile(self, P1)
converter winim_converter_IAdviseSink*(x: ptr IAdviseSink): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IAdviseSink, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IAdviseSink): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IAdviseSink): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc OnDataChange*(self: ptr IAdviseSink, P1: ptr FORMATETC, P2: ptr STGMEDIUM): void {.inline, discardable.} = self.lpVtbl.OnDataChange(self, P1, P2)
proc OnViewChange*(self: ptr IAdviseSink, P1: DWORD, P2: LONG): void {.inline, discardable.} = self.lpVtbl.OnViewChange(self, P1, P2)
proc OnRename*(self: ptr IAdviseSink, P1: ptr IMoniker): void {.inline, discardable.} = self.lpVtbl.OnRename(self, P1)
proc OnSave*(self: ptr IAdviseSink): void {.inline, discardable.} = self.lpVtbl.OnSave(self)
proc OnClose*(self: ptr IAdviseSink): void {.inline, discardable.} = self.lpVtbl.OnClose(self)
converter winim_converter_IAdviseSink2*(x: ptr IAdviseSink2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IAdviseSink2*(x: ptr IAdviseSink2): ptr IAdviseSink = cast[ptr IAdviseSink](x)
proc OnLinkSrcChange*(self: ptr IAdviseSink2, P1: ptr IMoniker): void {.inline, discardable.} = self.lpVtbl.OnLinkSrcChange(self, P1)
converter winim_converter_IDataObject*(x: ptr IDataObject): ptr IUnknown = cast[ptr IUnknown](x)
proc GetData*(self: ptr IDataObject, P1: ptr FORMATETC, P2: ptr STGMEDIUM): HRESULT {.inline, discardable.} = self.lpVtbl.GetData(self, P1, P2)
proc GetDataHere*(self: ptr IDataObject, P1: ptr FORMATETC, P2: ptr STGMEDIUM): HRESULT {.inline, discardable.} = self.lpVtbl.GetDataHere(self, P1, P2)
proc QueryGetData*(self: ptr IDataObject, P1: ptr FORMATETC): HRESULT {.inline, discardable.} = self.lpVtbl.QueryGetData(self, P1)
proc GetCanonicalFormatEtc*(self: ptr IDataObject, P1: ptr FORMATETC, P2: ptr FORMATETC): HRESULT {.inline, discardable.} = self.lpVtbl.GetCanonicalFormatEtc(self, P1, P2)
proc SetData*(self: ptr IDataObject, P1: ptr FORMATETC, P2: ptr STGMEDIUM, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetData(self, P1, P2, P3)
proc EnumFormatEtc*(self: ptr IDataObject, P1: DWORD, P2: ptr ptr IEnumFORMATETC): HRESULT {.inline, discardable.} = self.lpVtbl.EnumFormatEtc(self, P1, P2)
proc DAdvise*(self: ptr IDataObject, P1: ptr FORMATETC, P2: DWORD, P3: ptr IAdviseSink, P4: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.DAdvise(self, P1, P2, P3, P4)
proc DUnadvise*(self: ptr IDataObject, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.DUnadvise(self, P1)
proc EnumDAdvise*(self: ptr IDataObject, P1: ptr ptr IEnumSTATDATA): HRESULT {.inline, discardable.} = self.lpVtbl.EnumDAdvise(self, P1)
converter winim_converter_IDataAdviseHolder*(x: ptr IDataAdviseHolder): ptr IUnknown = cast[ptr IUnknown](x)
proc Advise*(self: ptr IDataAdviseHolder, P1: ptr IDataObject, P2: ptr FORMATETC, P3: DWORD, P4: ptr IAdviseSink, P5: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, P1, P2, P3, P4, P5)
proc Unadvise*(self: ptr IDataAdviseHolder, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, P1)
proc EnumAdvise*(self: ptr IDataAdviseHolder, P1: ptr ptr IEnumSTATDATA): HRESULT {.inline, discardable.} = self.lpVtbl.EnumAdvise(self, P1)
proc SendOnDataChange*(self: ptr IDataAdviseHolder, P1: ptr IDataObject, P2: DWORD, P3: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SendOnDataChange(self, P1, P2, P3)
converter winim_converter_IStorage*(x: ptr IStorage): ptr IUnknown = cast[ptr IUnknown](x)
proc CreateStream*(self: ptr IStorage, P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: DWORD, P5: ptr IStream): HRESULT {.inline, discardable.} = self.lpVtbl.CreateStream(self, P1, P2, P3, P4, P5)
proc OpenStream*(self: ptr IStorage, P1: LPCWSTR, P2: PVOID, P3: DWORD, P4: DWORD, P5: ptr IStream): HRESULT {.inline, discardable.} = self.lpVtbl.OpenStream(self, P1, P2, P3, P4, P5)
proc CreateStorage*(self: ptr IStorage, P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: DWORD, P5: ptr IStorage): HRESULT {.inline, discardable.} = self.lpVtbl.CreateStorage(self, P1, P2, P3, P4, P5)
proc OpenStorage*(self: ptr IStorage, P1: LPCWSTR, P2: IStorage, P3: DWORD, P4: SNB, P5: DWORD, P6: ptr IStorage): HRESULT {.inline, discardable.} = self.lpVtbl.OpenStorage(self, P1, P2, P3, P4, P5, P6)
proc CopyTo*(self: ptr IStorage, P1: DWORD, P2: ptr IID, P3: SNB, P4: IStorage): HRESULT {.inline, discardable.} = self.lpVtbl.CopyTo(self, P1, P2, P3, P4)
proc MoveElementTo*(self: ptr IStorage, P1: LPCWSTR, P2: IStorage, P3: LPCWSTR, P4: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.MoveElementTo(self, P1, P2, P3, P4)
proc Commit*(self: ptr IStorage, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Commit(self, P1)
proc Revert*(self: ptr IStorage): HRESULT {.inline, discardable.} = self.lpVtbl.Revert(self)
proc EnumElements*(self: ptr IStorage, P1: DWORD, P2: PVOID, P3: DWORD, P4: ptr IEnumSTATSTG): HRESULT {.inline, discardable.} = self.lpVtbl.EnumElements(self, P1, P2, P3, P4)
proc DestroyElement*(self: ptr IStorage, P1: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.DestroyElement(self, P1)
proc RenameElement*(self: ptr IStorage, P1: LPCWSTR, P2: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.RenameElement(self, P1, P2)
proc SetElementTimes*(self: ptr IStorage, P1: LPCWSTR, P2: ptr FILETIME, P3: ptr FILETIME, P4: ptr FILETIME): HRESULT {.inline, discardable.} = self.lpVtbl.SetElementTimes(self, P1, P2, P3, P4)
proc SetClass*(self: ptr IStorage, P1: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.SetClass(self, P1)
proc SetStateBits*(self: ptr IStorage, P1: DWORD, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetStateBits(self, P1, P2)
proc Stat*(self: ptr IStorage, P1: ptr STATSTG, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Stat(self, P1, P2)
converter winim_converter_IRootStorage*(x: ptr IRootStorage): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IRootStorage*(x: ptr IRootStorage): ptr IPersist = cast[ptr IPersist](x)
proc QueryInterface*(self: ptr IRootStorage, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IRootStorage): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IRootStorage): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc SwitchToFile*(self: ptr IRootStorage, P1: LPOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.SwitchToFile(self, P1)
converter winim_converter_IRpcChannelBuffer*(x: ptr IRpcChannelBuffer): ptr IUnknown = cast[ptr IUnknown](x)
proc GetBuffer*(self: ptr IRpcChannelBuffer, P1: ptr RPCOLEMESSAGE, P2: REFIID): HRESULT {.inline, discardable.} = self.lpVtbl.GetBuffer(self, P1, P2)
proc SendReceive*(self: ptr IRpcChannelBuffer, P1: ptr RPCOLEMESSAGE, P2: PULONG): HRESULT {.inline, discardable.} = self.lpVtbl.SendReceive(self, P1, P2)
proc FreeBuffer*(self: ptr IRpcChannelBuffer, P1: ptr RPCOLEMESSAGE): HRESULT {.inline, discardable.} = self.lpVtbl.FreeBuffer(self, P1)
proc GetDestCtx*(self: ptr IRpcChannelBuffer, P1: PDWORD, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.GetDestCtx(self, P1, P2)
proc IsConnected*(self: ptr IRpcChannelBuffer): HRESULT {.inline, discardable.} = self.lpVtbl.IsConnected(self)
converter winim_converter_IRpcProxyBuffer*(x: ptr IRpcProxyBuffer): ptr IUnknown = cast[ptr IUnknown](x)
proc Connect*(self: ptr IRpcProxyBuffer, P1: ptr IRpcChannelBuffer): HRESULT {.inline, discardable.} = self.lpVtbl.Connect(self, P1)
proc Disconnect*(self: ptr IRpcProxyBuffer): void {.inline, discardable.} = self.lpVtbl.Disconnect(self)
converter winim_converter_IRpcStubBuffer*(x: ptr IRpcStubBuffer): ptr IUnknown = cast[ptr IUnknown](x)
proc Connect*(self: ptr IRpcStubBuffer, P1: LPUNKNOWN): HRESULT {.inline, discardable.} = self.lpVtbl.Connect(self, P1)
proc Disconnect*(self: ptr IRpcStubBuffer): void {.inline, discardable.} = self.lpVtbl.Disconnect(self)
proc Invoke*(self: ptr IRpcStubBuffer, P1: ptr RPCOLEMESSAGE, P2: LPRPCSTUBBUFFER): HRESULT {.inline, discardable.} = self.lpVtbl.Invoke(self, P1, P2)
proc IsIIDSupported*(self: ptr IRpcStubBuffer, P1: REFIID): LPRPCSTUBBUFFER {.inline, discardable.} = self.lpVtbl.IsIIDSupported(self, P1)
proc CountRefs*(self: ptr IRpcStubBuffer): ULONG {.inline, discardable.} = self.lpVtbl.CountRefs(self)
proc DebugServerQueryInterface*(self: ptr IRpcStubBuffer, P1: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.DebugServerQueryInterface(self, P1)
proc DebugServerRelease*(self: ptr IRpcStubBuffer, P1: PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.DebugServerRelease(self, P1)
converter winim_converter_IPSFactoryBuffer*(x: ptr IPSFactoryBuffer): ptr IUnknown = cast[ptr IUnknown](x)
proc CreateProxy*(self: ptr IPSFactoryBuffer, P1: LPUNKNOWN, P2: REFIID, P3: ptr LPRPCPROXYBUFFER, P4: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.CreateProxy(self, P1, P2, P3, P4)
proc CreateStub*(self: ptr IPSFactoryBuffer, P1: REFIID, P2: LPUNKNOWN, P3: ptr LPRPCSTUBBUFFER): HRESULT {.inline, discardable.} = self.lpVtbl.CreateStub(self, P1, P2, P3)
converter winim_converter_ILockBytes*(x: ptr ILockBytes): ptr IUnknown = cast[ptr IUnknown](x)
proc ReadAt*(self: ptr ILockBytes, P1: ULARGE_INTEGER, P2: PVOID, P3: ULONG, P4: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.ReadAt(self, P1, P2, P3, P4)
proc WriteAt*(self: ptr ILockBytes, P1: ULARGE_INTEGER, P2: PCVOID, P3: ULONG, P4: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.WriteAt(self, P1, P2, P3, P4)
proc Flush*(self: ptr ILockBytes): HRESULT {.inline, discardable.} = self.lpVtbl.Flush(self)
proc SetSize*(self: ptr ILockBytes, P1: ULARGE_INTEGER): HRESULT {.inline, discardable.} = self.lpVtbl.SetSize(self, P1)
proc LockRegion*(self: ptr ILockBytes, P1: ULARGE_INTEGER, P2: ULARGE_INTEGER, P3: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.LockRegion(self, P1, P2, P3)
proc UnlockRegion*(self: ptr ILockBytes, P1: ULARGE_INTEGER, P2: ULARGE_INTEGER, P3: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.UnlockRegion(self, P1, P2, P3)
proc Stat*(self: ptr ILockBytes, P1: ptr STATSTG, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Stat(self, P1, P2)
converter winim_converter_IExternalConnection*(x: ptr IExternalConnection): ptr IUnknown = cast[ptr IUnknown](x)
proc AddConnection*(self: ptr IExternalConnection, P1: DWORD, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.AddConnection(self, P1, P2)
proc ReleaseConnection*(self: ptr IExternalConnection, P1: DWORD, P2: DWORD, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ReleaseConnection(self, P1, P2, P3)
converter winim_converter_IRunnableObject*(x: ptr IRunnableObject): ptr IUnknown = cast[ptr IUnknown](x)
proc GetRunningClass*(self: ptr IRunnableObject, P1: LPCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.GetRunningClass(self, P1)
proc Run*(self: ptr IRunnableObject, P1: LPBC): HRESULT {.inline, discardable.} = self.lpVtbl.Run(self, P1)
proc IsRunning*(self: ptr IRunnableObject): BOOL {.inline, discardable.} = self.lpVtbl.IsRunning(self)
proc LockRunning*(self: ptr IRunnableObject, P1: BOOL, P2: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.LockRunning(self, P1, P2)
proc SetContainedObject*(self: ptr IRunnableObject, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetContainedObject(self, P1)
converter winim_converter_IROTData*(x: ptr IROTData): ptr IUnknown = cast[ptr IUnknown](x)
proc GetComparisonData*(self: ptr IROTData, P1: PVOID, P2: ULONG, P3: PULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetComparisonData(self, P1, P2, P3)
converter winim_converter_IChannelHook*(x: ptr IChannelHook): ptr IUnknown = cast[ptr IUnknown](x)
proc ClientGetSize*(self: ptr IChannelHook, P1: REFGUID, P2: REFIID, P3: PULONG): void {.inline, discardable.} = self.lpVtbl.ClientGetSize(self, P1, P2, P3)
proc ClientFillBuffer*(self: ptr IChannelHook, P1: REFGUID, P2: REFIID, P3: PULONG, P4: PVOID): void {.inline, discardable.} = self.lpVtbl.ClientFillBuffer(self, P1, P2, P3, P4)
proc ClientNotify*(self: ptr IChannelHook, P1: REFGUID, P2: REFIID, P3: ULONG, P4: PVOID, P5: DWORD, P6: HRESULT): void {.inline, discardable.} = self.lpVtbl.ClientNotify(self, P1, P2, P3, P4, P5, P6)
proc ServerNotify*(self: ptr IChannelHook, P1: REFGUID, P2: REFIID, P3: ULONG, P4: PVOID, P5: DWORD): void {.inline, discardable.} = self.lpVtbl.ServerNotify(self, P1, P2, P3, P4, P5)
proc ServerGetSize*(self: ptr IChannelHook, P1: REFGUID, P2: REFIID, P3: HRESULT, P4: PULONG): void {.inline, discardable.} = self.lpVtbl.ServerGetSize(self, P1, P2, P3, P4)
proc ServerFillBuffer*(self: ptr IChannelHook, P1: REFGUID, P2: REFIID, P3: PULONG, P4: PVOID, P5: HRESULT): void {.inline, discardable.} = self.lpVtbl.ServerFillBuffer(self, P1, P2, P3, P4, P5)
converter winim_converter_IPropertyStorage*(x: ptr IPropertyStorage): ptr IUnknown = cast[ptr IUnknown](x)
proc ReadMultiple*(self: ptr IPropertyStorage, P1: ULONG, P2: ptr PROPSPEC, P3: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.ReadMultiple(self, P1, P2, P3)
proc WriteMultiple*(self: ptr IPropertyStorage, P1: ULONG, P2: ptr PROPSPEC, P3: ptr PROPVARIANT, P4: PROPID): HRESULT {.inline, discardable.} = self.lpVtbl.WriteMultiple(self, P1, P2, P3, P4)
proc DeleteMultiple*(self: ptr IPropertyStorage, P1: ULONG, P2: ptr PROPSPEC): HRESULT {.inline, discardable.} = self.lpVtbl.DeleteMultiple(self, P1, P2)
proc ReadPropertyNames*(self: ptr IPropertyStorage, P1: ULONG, P2: ptr PROPID, P3: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.ReadPropertyNames(self, P1, P2, P3)
proc WritePropertyNames*(self: ptr IPropertyStorage, P1: ULONG, P2: ptr PROPID, P3: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.WritePropertyNames(self, P1, P2, P3)
proc DeletePropertyNames*(self: ptr IPropertyStorage, P1: ULONG, P2: ptr PROPID): HRESULT {.inline, discardable.} = self.lpVtbl.DeletePropertyNames(self, P1, P2)
proc SetClass*(self: ptr IPropertyStorage, P1: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.SetClass(self, P1)
proc Commit*(self: ptr IPropertyStorage, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Commit(self, P1)
proc Revert*(self: ptr IPropertyStorage): HRESULT {.inline, discardable.} = self.lpVtbl.Revert(self)
proc Enum*(self: ptr IPropertyStorage, P1: ptr ptr IEnumSTATPROPSTG): HRESULT {.inline, discardable.} = self.lpVtbl.Enum(self, P1)
proc Stat*(self: ptr IPropertyStorage, P1: ptr STATPROPSTG): HRESULT {.inline, discardable.} = self.lpVtbl.Stat(self, P1)
proc SetTimes*(self: ptr IPropertyStorage, P1: ptr FILETIME, P2: ptr FILETIME, P3: ptr FILETIME): HRESULT {.inline, discardable.} = self.lpVtbl.SetTimes(self, P1, P2, P3)
converter winim_converter_IPropertySetStorage*(x: ptr IPropertySetStorage): ptr IUnknown = cast[ptr IUnknown](x)
proc Create*(self: ptr IPropertySetStorage, P1: REFFMTID, P2: ptr CLSID, P3: DWORD, P4: DWORD, P5: ptr LPPROPERTYSTORAGE): HRESULT {.inline, discardable.} = self.lpVtbl.Create(self, P1, P2, P3, P4, P5)
proc Open*(self: ptr IPropertySetStorage, P1: REFFMTID, P2: DWORD, P3: ptr LPPROPERTYSTORAGE): HRESULT {.inline, discardable.} = self.lpVtbl.Open(self, P1, P2, P3)
proc Delete*(self: ptr IPropertySetStorage, P1: REFFMTID): HRESULT {.inline, discardable.} = self.lpVtbl.Delete(self, P1)
proc Enum*(self: ptr IPropertySetStorage, P1: ptr ptr IEnumSTATPROPSETSTG): HRESULT {.inline, discardable.} = self.lpVtbl.Enum(self, P1)
converter winim_converter_IClientSecurity*(x: ptr IClientSecurity): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryBlanket*(self: ptr IClientSecurity, P1: PVOID, P2: PDWORD, P3: PDWORD, P4: ptr ptr OLECHAR, P5: PDWORD, P6: PDWORD, P7: ptr ptr RPC_AUTH_IDENTITY_HANDLE, P8: ptr PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.QueryBlanket(self, P1, P2, P3, P4, P5, P6, P7, P8)
proc SetBlanket*(self: ptr IClientSecurity, P1: PVOID, P2: DWORD, P3: DWORD, P4: LPWSTR, P5: DWORD, P6: DWORD, P7: ptr RPC_AUTH_IDENTITY_HANDLE, P8: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetBlanket(self, P1, P2, P3, P4, P5, P6, P7, P8)
proc CopyProxy*(self: ptr IClientSecurity, P1: LPUNKNOWN, P2: ptr LPUNKNOWN): HRESULT {.inline, discardable.} = self.lpVtbl.CopyProxy(self, P1, P2)
converter winim_converter_IServerSecurity*(x: ptr IServerSecurity): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryBlanket*(self: ptr IServerSecurity, P1: PDWORD, P2: PDWORD, P3: ptr ptr OLECHAR, P4: PDWORD, P5: PDWORD, P6: ptr RPC_AUTHZ_HANDLE, P7: ptr PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.QueryBlanket(self, P1, P2, P3, P4, P5, P6, P7)
proc ImpersonateClient*(self: ptr IServerSecurity): HRESULT {.inline, discardable.} = self.lpVtbl.ImpersonateClient(self)
proc RevertToSelf*(self: ptr IServerSecurity): HRESULT {.inline, discardable.} = self.lpVtbl.RevertToSelf(self)
proc IsImpersonating*(self: ptr IServerSecurity): HRESULT {.inline, discardable.} = self.lpVtbl.IsImpersonating(self)
converter winim_converter_IClassActivator*(x: ptr IClassActivator): ptr IUnknown = cast[ptr IUnknown](x)
proc GetClassObject*(self: ptr IClassActivator, P1: REFCLSID, P2: DWORD, P3: LCID, P4: REFIID, P5: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.GetClassObject(self, P1, P2, P3, P4, P5)
converter winim_converter_IFillLockBytes*(x: ptr IFillLockBytes): ptr IUnknown = cast[ptr IUnknown](x)
proc FillAppend*(self: ptr IFillLockBytes, P1: pointer, P2: ULONG, P3: PULONG): HRESULT {.inline, discardable.} = self.lpVtbl.FillAppend(self, P1, P2, P3)
proc FillAt*(self: ptr IFillLockBytes, P1: ULARGE_INTEGER, P2: pointer, P3: ULONG, P4: PULONG): HRESULT {.inline, discardable.} = self.lpVtbl.FillAt(self, P1, P2, P3, P4)
proc SetFillSize*(self: ptr IFillLockBytes, P1: ULARGE_INTEGER): HRESULT {.inline, discardable.} = self.lpVtbl.SetFillSize(self, P1)
proc Terminate*(self: ptr IFillLockBytes, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Terminate(self, P1)
converter winim_converter_IProgressNotify*(x: ptr IProgressNotify): ptr IUnknown = cast[ptr IUnknown](x)
proc OnProgress*(self: ptr IProgressNotify, P1: DWORD, P2: DWORD, P3: BOOL, P4: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnProgress(self, P1, P2, P3, P4)
converter winim_converter_ILayoutStorage*(x: ptr ILayoutStorage): ptr IUnknown = cast[ptr IUnknown](x)
proc LayoutScript*(self: ptr ILayoutStorage, P1: ptr STORAGELAYOUT, P2: DWORD, P3: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.LayoutScript(self, P1, P2, P3)
proc BeginMonitor*(self: ptr ILayoutStorage): HRESULT {.inline, discardable.} = self.lpVtbl.BeginMonitor(self)
proc EndMonitor*(self: ptr ILayoutStorage): HRESULT {.inline, discardable.} = self.lpVtbl.EndMonitor(self)
proc ReLayoutDocfile*(self: ptr ILayoutStorage, P1: ptr OLECHAR): HRESULT {.inline, discardable.} = self.lpVtbl.ReLayoutDocfile(self, P1)
converter winim_converter_IGlobalInterfaceTable*(x: ptr IGlobalInterfaceTable): ptr IUnknown = cast[ptr IUnknown](x)
proc RegisterInterfaceInGlobal*(self: ptr IGlobalInterfaceTable, P1: ptr IUnknown, P2: REFIID, P3: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.RegisterInterfaceInGlobal(self, P1, P2, P3)
proc RevokeInterfaceFromGlobal*(self: ptr IGlobalInterfaceTable, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.RevokeInterfaceFromGlobal(self, P1)
proc GetInterfaceFromGlobal*(self: ptr IGlobalInterfaceTable, P1: DWORD, P2: REFIID, P3: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetInterfaceFromGlobal(self, P1, P2, P3)

proc `hBitmap=`*(self: var STGMEDIUM, x: HBITMAP) = self.u1.hBitmap = x
proc hBitmap*(self: STGMEDIUM): HBITMAP = self.u1.hBitmap
proc `hMetaFilePict=`*(self: var STGMEDIUM, x: PVOID) = self.u1.hMetaFilePict = x
proc hMetaFilePict*(self: STGMEDIUM): PVOID = self.u1.hMetaFilePict
proc `hEnhMetaFile=`*(self: var STGMEDIUM, x: HENHMETAFILE) = self.u1.hEnhMetaFile = x
proc hEnhMetaFile*(self: STGMEDIUM): HENHMETAFILE = self.u1.hEnhMetaFile
proc `hGlobal=`*(self: var STGMEDIUM, x: HGLOBAL) = self.u1.hGlobal = x
proc hGlobal*(self: STGMEDIUM): HGLOBAL = self.u1.hGlobal
proc `lpszFileName=`*(self: var STGMEDIUM, x: LPWSTR) = self.u1.lpszFileName = x
proc lpszFileName*(self: STGMEDIUM): LPWSTR = self.u1.lpszFileName
proc `pstm=`*(self: var STGMEDIUM, x: LPSTREAM) = self.u1.pstm = x
proc pstm*(self: STGMEDIUM): LPSTREAM = self.u1.pstm
proc `pstg=`*(self: var STGMEDIUM, x: LPSTORAGE) = self.u1.pstg = x
proc pstg*(self: STGMEDIUM): LPSTORAGE = self.u1.pstg
proc `cVal=`*(self: var PROPVARIANT, x: CHAR) = self.u1.cVal = x
proc cVal*(self: PROPVARIANT): CHAR = self.u1.cVal
proc `bVal=`*(self: var PROPVARIANT, x: UCHAR) = self.u1.bVal = x
proc bVal*(self: PROPVARIANT): UCHAR = self.u1.bVal
proc `iVal=`*(self: var PROPVARIANT, x: int16) = self.u1.iVal = x
proc iVal*(self: PROPVARIANT): int16 = self.u1.iVal
proc `uiVal=`*(self: var PROPVARIANT, x: USHORT) = self.u1.uiVal = x
proc uiVal*(self: PROPVARIANT): USHORT = self.u1.uiVal
proc `boolVal=`*(self: var PROPVARIANT, x: VARIANT_BOOL) = self.u1.boolVal = x
proc boolVal*(self: PROPVARIANT): VARIANT_BOOL = self.u1.boolVal
proc `lVal=`*(self: var PROPVARIANT, x: int32) = self.u1.lVal = x
proc lVal*(self: PROPVARIANT): int32 = self.u1.lVal
proc `ulVal=`*(self: var PROPVARIANT, x: ULONG) = self.u1.ulVal = x
proc ulVal*(self: PROPVARIANT): ULONG = self.u1.ulVal
proc `fltVal=`*(self: var PROPVARIANT, x: float32) = self.u1.fltVal = x
proc fltVal*(self: PROPVARIANT): float32 = self.u1.fltVal
proc `scode=`*(self: var PROPVARIANT, x: SCODE) = self.u1.scode = x
proc scode*(self: PROPVARIANT): SCODE = self.u1.scode
proc `hVal=`*(self: var PROPVARIANT, x: LARGE_INTEGER) = self.u1.hVal = x
proc hVal*(self: PROPVARIANT): LARGE_INTEGER = self.u1.hVal
proc `uhVal=`*(self: var PROPVARIANT, x: ULARGE_INTEGER) = self.u1.uhVal = x
proc uhVal*(self: PROPVARIANT): ULARGE_INTEGER = self.u1.uhVal
proc `dblVal=`*(self: var PROPVARIANT, x: float64) = self.u1.dblVal = x
proc dblVal*(self: PROPVARIANT): float64 = self.u1.dblVal
proc `cyVal=`*(self: var PROPVARIANT, x: CY) = self.u1.cyVal = x
proc cyVal*(self: PROPVARIANT): CY = self.u1.cyVal
proc `date=`*(self: var PROPVARIANT, x: DATE) = self.u1.date = x
proc date*(self: PROPVARIANT): DATE = self.u1.date
proc `filetime=`*(self: var PROPVARIANT, x: FILETIME) = self.u1.filetime = x
proc filetime*(self: PROPVARIANT): FILETIME = self.u1.filetime
proc `puuid=`*(self: var PROPVARIANT, x: ptr CLSID) = self.u1.puuid = x
proc puuid*(self: PROPVARIANT): ptr CLSID = self.u1.puuid
proc `blob=`*(self: var PROPVARIANT, x: BLOB) = self.u1.blob = x
proc blob*(self: PROPVARIANT): BLOB = self.u1.blob
proc `pclipdata=`*(self: var PROPVARIANT, x: ptr CLIPDATA) = self.u1.pclipdata = x
proc pclipdata*(self: PROPVARIANT): ptr CLIPDATA = self.u1.pclipdata
proc `pStream=`*(self: var PROPVARIANT, x: LPSTREAM) = self.u1.pStream = x
proc pStream*(self: PROPVARIANT): LPSTREAM = self.u1.pStream
proc `pStorage=`*(self: var PROPVARIANT, x: LPSTORAGE) = self.u1.pStorage = x
proc pStorage*(self: PROPVARIANT): LPSTORAGE = self.u1.pStorage
proc `bstrVal=`*(self: var PROPVARIANT, x: BSTR) = self.u1.bstrVal = x
proc bstrVal*(self: PROPVARIANT): BSTR = self.u1.bstrVal
proc `bstrblobVal=`*(self: var PROPVARIANT, x: BSTRBLOB) = self.u1.bstrblobVal = x
proc bstrblobVal*(self: PROPVARIANT): BSTRBLOB = self.u1.bstrblobVal
proc `pszVal=`*(self: var PROPVARIANT, x: LPSTR) = self.u1.pszVal = x
proc pszVal*(self: PROPVARIANT): LPSTR = self.u1.pszVal
proc `pwszVal=`*(self: var PROPVARIANT, x: LPWSTR) = self.u1.pwszVal = x
proc pwszVal*(self: PROPVARIANT): LPWSTR = self.u1.pwszVal
proc `caub=`*(self: var PROPVARIANT, x: CAUB) = self.u1.caub = x
proc caub*(self: PROPVARIANT): CAUB = self.u1.caub
proc `cai=`*(self: var PROPVARIANT, x: CAI) = self.u1.cai = x
proc cai*(self: PROPVARIANT): CAI = self.u1.cai
proc `caui=`*(self: var PROPVARIANT, x: CAUI) = self.u1.caui = x
proc caui*(self: PROPVARIANT): CAUI = self.u1.caui
proc `cabool=`*(self: var PROPVARIANT, x: CABOOL) = self.u1.cabool = x
proc cabool*(self: PROPVARIANT): CABOOL = self.u1.cabool
proc `cal=`*(self: var PROPVARIANT, x: CAL) = self.u1.cal = x
proc cal*(self: PROPVARIANT): CAL = self.u1.cal
proc `caul=`*(self: var PROPVARIANT, x: CAUL) = self.u1.caul = x
proc caul*(self: PROPVARIANT): CAUL = self.u1.caul
proc `caflt=`*(self: var PROPVARIANT, x: CAFLT) = self.u1.caflt = x
proc caflt*(self: PROPVARIANT): CAFLT = self.u1.caflt
proc `cascode=`*(self: var PROPVARIANT, x: CASCODE) = self.u1.cascode = x
proc cascode*(self: PROPVARIANT): CASCODE = self.u1.cascode
proc `cah=`*(self: var PROPVARIANT, x: CAH) = self.u1.cah = x
proc cah*(self: PROPVARIANT): CAH = self.u1.cah
proc `cauh=`*(self: var PROPVARIANT, x: CAUH) = self.u1.cauh = x
proc cauh*(self: PROPVARIANT): CAUH = self.u1.cauh
proc `cadbl=`*(self: var PROPVARIANT, x: CADBL) = self.u1.cadbl = x
proc cadbl*(self: PROPVARIANT): CADBL = self.u1.cadbl
proc `cacy=`*(self: var PROPVARIANT, x: CACY) = self.u1.cacy = x
proc cacy*(self: PROPVARIANT): CACY = self.u1.cacy
proc `cadate=`*(self: var PROPVARIANT, x: CADATE) = self.u1.cadate = x
proc cadate*(self: PROPVARIANT): CADATE = self.u1.cadate
proc `cafiletime=`*(self: var PROPVARIANT, x: CAFILETIME) = self.u1.cafiletime = x
proc cafiletime*(self: PROPVARIANT): CAFILETIME = self.u1.cafiletime
proc `cauuid=`*(self: var PROPVARIANT, x: CACLSID) = self.u1.cauuid = x
proc cauuid*(self: PROPVARIANT): CACLSID = self.u1.cauuid
proc `caclipdata=`*(self: var PROPVARIANT, x: CACLIPDATA) = self.u1.caclipdata = x
proc caclipdata*(self: PROPVARIANT): CACLIPDATA = self.u1.caclipdata
proc `cabstr=`*(self: var PROPVARIANT, x: CABSTR) = self.u1.cabstr = x
proc cabstr*(self: PROPVARIANT): CABSTR = self.u1.cabstr
proc `cabstrblob=`*(self: var PROPVARIANT, x: CABSTRBLOB) = self.u1.cabstrblob = x
proc cabstrblob*(self: PROPVARIANT): CABSTRBLOB = self.u1.cabstrblob
proc `calpstr=`*(self: var PROPVARIANT, x: CALPSTR) = self.u1.calpstr = x
proc calpstr*(self: PROPVARIANT): CALPSTR = self.u1.calpstr
proc `calpwstr=`*(self: var PROPVARIANT, x: CALPWSTR) = self.u1.calpwstr = x
proc calpwstr*(self: PROPVARIANT): CALPWSTR = self.u1.calpwstr
proc `capropvar=`*(self: var PROPVARIANT, x: CAPROPVARIANT) = self.u1.capropvar = x
proc capropvar*(self: PROPVARIANT): CAPROPVARIANT = self.u1.capropvar
proc `propid=`*(self: var PROPSPEC, x: PROPID) = self.u1.propid = x
proc propid*(self: PROPSPEC): PROPID = self.u1.propid
proc `lpwstr=`*(self: var PROPSPEC, x: LPOLESTR) = self.u1.lpwstr = x
proc lpwstr*(self: PROPSPEC): LPOLESTR = self.u1.lpwstr

# objcore/objbase.nim
const
  # COINIT* = enum
  COINIT_MULTITHREADED* = 0
  COINIT_APARTMENTTHREADED* = 2
  COINIT_DISABLE_OLE1DDE* = 4
  COINIT_SPEED_OVER_MEMORY* = 8
  # STGFMT* = enum
  STGFMT_STORAGE* = 0
  STGFMT_FILE* = 3
  STGFMT_ANY* = 4
  STGFMT_DOCFILE* = 5
  # REGCLS* = enum
  REGCLS_SINGLEUSE* = 0
  REGCLS_MULTIPLEUSE* = 1
  REGCLS_MULTI_SEPARATE* = 2
  # STDMSHLFLAGS* = enum
  SMEXF_SERVER* = 1
  SMEXF_HANDLER* = 2

const
  CLSCTX_ALL* = CLSCTX_INPROC_SERVER or CLSCTX_INPROC_HANDLER or CLSCTX_LOCAL_SERVER
  CLSCTX_INPROC* = CLSCTX_INPROC_SERVER or CLSCTX_INPROC_HANDLER
  CLSCTX_SERVER* = CLSCTX_INPROC_SERVER or CLSCTX_LOCAL_SERVER or CLSCTX_REMOTE_SERVER
  MARSHALINTERFACE_MIN* = 500
  CWCSTORAGENAME* = 32
  STGM_DIRECT* = 0
  STGM_TRANSACTED* = 0x10000
  STGM_SIMPLE* = 0x8000000
  STGM_READ* = 0
  STGM_WRITE* = 1
  STGM_READWRITE* = 2
  STGM_SHARE_DENY_NONE* = 0x40
  STGM_SHARE_DENY_READ* = 0x30
  STGM_SHARE_DENY_WRITE* = 0x20
  STGM_SHARE_EXCLUSIVE* = 0x10
  STGM_PRIORITY* = 0x40000
  STGM_DELETEONRELEASE* = 0x4000000
  STGM_NOSCRATCH* = 0x100000
  STGM_CREATE* = 0x1000
  STGM_CONVERT* = 0x20000
  STGM_NOSNAPSHOT* = 0x200000
  STGM_FAILIFTHERE* = 0
  ASYNC_MODE_COMPATIBILITY* = 1
  ASYNC_MODE_DEFAULT* = 0
  STGTY_REPEAT* = 256
  STG_TOEND* = -1
  STG_LAYOUT_SEQUENTIAL* = 0
  STG_LAYOUT_INTERLEAVED* = 1
  COM_RIGHTS_EXECUTE* = 1
  COM_RIGHTS_SAFE_FOR_SCRIPTING* = 2
  STGOPTIONS_VERSION* = 2

type
  STGFMT* = int32
  STGOPTIONS* {.final, pure.} = object
    usVersion*: USHORT
    reserved*: USHORT
    ulSectorSize*: ULONG
    pwcsTemplateFile*: ptr WCHAR
  REGCLS* = int32

proc IsEqualGUID*(rguid1: REFGUID, rguid2: REFGUID): BOOL {.winapi, dynlib: "ole32", importc.}
proc IsEqualIID*(rguid1: REFGUID, rguid2: REFGUID): BOOL {.winapi, dynlib: "ole32", importc: "IsEqualGUID".}
proc IsEqualCLSID*(rguid1: REFGUID, rguid2: REFGUID): BOOL {.winapi, dynlib: "ole32", importc: "IsEqualGUID".}

type
  STDMSHLFLAGS* = int32

type
  LPFNGETCLASSOBJECT* = proc (P1: REFCLSID, P2: REFIID, P3: ptr PVOID): HRESULT {.stdcall.}
  LPFNCANUNLOADNOW* = proc (): HRESULT {.stdcall.}

proc CoBuildVersion*(): DWORD {.winapi, dynlib: "ole32", importc.}
proc CoInitialize*(P1: PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoInitializeEx*(P1: LPVOID, P2: DWORD): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoUninitialize*(): void {.winapi, dynlib: "ole32", importc.}
proc CoGetMalloc*(P1: DWORD, P2: ptr LPMALLOC): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoGetCurrentProcess*(): DWORD {.winapi, dynlib: "ole32", importc.}
proc CoRegisterMallocSpy*(P1: LPMALLOCSPY): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoRevokeMallocSpy*(): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoCreateStandardMalloc*(P1: DWORD, P2: ptr ptr IMalloc): HRESULT {.winapi, dynlib: "ole32", importc.}
proc DebugCoGetRpcFault*(): ULONG {.winapi, dynlib: "ole32", importc.}
proc DebugCoSetRpcFault*(P1: ULONG): void {.winapi, dynlib: "ole32", importc.}
proc CoGetClassObject*(P1: REFCLSID, P2: DWORD, P3: ptr COSERVERINFO, P4: REFIID, P5: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoRegisterClassObject*(P1: REFCLSID, P2: LPUNKNOWN, P3: DWORD, P4: DWORD, P5: PDWORD): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoRevokeClassObject*(P1: DWORD): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoGetMarshalSizeMax*(P1: ptr ULONG, P2: REFIID, P3: LPUNKNOWN, P4: DWORD, P5: PVOID, P6: DWORD): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoMarshalInterface*(P1: LPSTREAM, P2: REFIID, P3: LPUNKNOWN, P4: DWORD, P5: PVOID, P6: DWORD): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoUnmarshalInterface*(P1: LPSTREAM, P2: REFIID, P3: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoMarshalHresult*(P1: LPSTREAM, P2: HRESULT): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoUnmarshalHresult*(P1: LPSTREAM, P2: ptr HRESULT): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoReleaseMarshalData*(P1: LPSTREAM): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoDisconnectObject*(P1: LPUNKNOWN, P2: DWORD): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoLockObjectExternal*(P1: LPUNKNOWN, P2: BOOL, P3: BOOL): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoGetStandardMarshal*(P1: REFIID, P2: LPUNKNOWN, P3: DWORD, P4: PVOID, P5: DWORD, P6: ptr LPMARSHAL): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoGetStdMarshalEx*(P1: LPUNKNOWN, P2: DWORD, P3: ptr LPUNKNOWN): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoIsHandlerConnected*(P1: LPUNKNOWN): BOOL {.winapi, dynlib: "ole32", importc.}
proc CoHasStrongExternalConnections*(P1: LPUNKNOWN): BOOL {.winapi, dynlib: "ole32", importc.}
proc CoMarshalInterThreadInterfaceInStream*(P1: REFIID, P2: LPUNKNOWN, P3: ptr LPSTREAM): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoGetInterfaceAndReleaseStream*(P1: LPSTREAM, P2: REFIID, P3: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoCreateFreeThreadedMarshaler*(P1: LPUNKNOWN, P2: ptr LPUNKNOWN): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoLoadLibrary*(P1: LPOLESTR, P2: BOOL): HINSTANCE {.winapi, dynlib: "ole32", importc.}
proc CoFreeLibrary*(P1: HINSTANCE): void {.winapi, dynlib: "ole32", importc.}
proc CoFreeAllLibraries*(): void {.winapi, dynlib: "ole32", importc.}
proc CoFreeUnusedLibraries*(): void {.winapi, dynlib: "ole32", importc.}
proc CoCreateInstance*(P1: REFCLSID, P2: LPUNKNOWN, P3: DWORD, P4: REFIID, P5: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoCreateInstanceEx*(P1: REFCLSID, P2: ptr IUnknown, P3: DWORD, P4: ptr COSERVERINFO, P5: DWORD, P6: ptr MULTI_QI): HRESULT {.winapi, dynlib: "ole32", importc.}
proc StringFromCLSID*(P1: REFCLSID, P2: ptr LPOLESTR): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CLSIDFromString*(P1: LPOLESTR, P2: LPCLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc StringFromIID*(P1: REFIID, P2: ptr LPOLESTR): HRESULT {.winapi, dynlib: "ole32", importc.}
proc IIDFromString*(P1: LPOLESTR, P2: LPIID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoIsOle1Class*(P1: REFCLSID): BOOL {.winapi, dynlib: "ole32", importc.}
proc ProgIDFromCLSID*(P1: REFCLSID, P2: ptr LPOLESTR): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CLSIDFromProgID*(P1: LPCOLESTR, P2: LPCLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc StringFromGUID2*(P1: REFGUID, P2: LPOLESTR, P3: int32): int32 {.winapi, dynlib: "ole32", importc.}
proc CoCreateGuid*(P1: ptr GUID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoFileTimeToDosDateTime*(P1: ptr FILETIME, P2: LPWORD, P3: LPWORD): BOOL {.winapi, dynlib: "ole32", importc.}
proc CoDosDateTimeToFileTime*(P1: WORD, P2: WORD, P3: ptr FILETIME): BOOL {.winapi, dynlib: "ole32", importc.}
proc CoFileTimeNow*(P1: ptr FILETIME): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoRegisterMessageFilter*(P1: LPMESSAGEFILTER, P2: ptr LPMESSAGEFILTER): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoGetTreatAsClass*(P1: REFCLSID, P2: LPCLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoTreatAsClass*(P1: REFCLSID, P2: REFCLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc DllGetClassObject*(P1: REFCLSID, P2: REFIID, P3: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc DllCanUnloadNow*(): HRESULT {.winapi, dynlib: "wininet", importc.}
proc CoTaskMemAlloc*(P1: ULONG): PVOID {.winapi, dynlib: "ole32", importc.}
proc CoTaskMemRealloc*(P1: PVOID, P2: ULONG): PVOID {.winapi, dynlib: "ole32", importc.}
proc CoTaskMemFree*(P1: PVOID): void {.winapi, dynlib: "ole32", importc.}
proc CreateDataAdviseHolder*(P1: ptr LPDATAADVISEHOLDER): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CreateDataCache*(P1: LPUNKNOWN, P2: REFCLSID, P3: REFIID, P4: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc StgCreateDocfile*(P1: ptr OLECHAR, P2: DWORD, P3: DWORD, P4: ptr ptr IStorage): HRESULT {.winapi, dynlib: "ole32", importc.}
proc StgCreateDocfileOnILockBytes*(P1: ptr ILockBytes, P2: DWORD, P3: DWORD, P4: ptr ptr IStorage): HRESULT {.winapi, dynlib: "ole32", importc.}
proc StgOpenStorage*(P1: ptr OLECHAR, P2: IStorage, P3: DWORD, P4: SNB, P5: DWORD, P6: ptr IStorage): HRESULT {.winapi, dynlib: "ole32", importc.}
proc StgOpenStorageOnILockBytes*(P1: ptr ILockBytes, P2: ptr IStorage, P3: DWORD, P4: SNB, P5: DWORD, P6: ptr ptr IStorage): HRESULT {.winapi, dynlib: "ole32", importc.}
proc StgIsStorageFile*(P1: ptr OLECHAR): HRESULT {.winapi, dynlib: "ole32", importc.}
proc StgIsStorageILockBytes*(P1: ptr ILockBytes): HRESULT {.winapi, dynlib: "ole32", importc.}
proc StgSetTimes*(P1: ptr OLECHAR, P2: ptr FILETIME, P3: ptr FILETIME, P4: ptr FILETIME): HRESULT {.winapi, dynlib: "ole32", importc.}
proc StgCreateStorageEx*(P1: ptr WCHAR, P2: DWORD, P3: DWORD, P4: DWORD, P5: ptr STGOPTIONS, P6: pointer, P7: REFIID, P8: ptr pointer): HRESULT {.winapi, dynlib: "ole32", importc.}
proc StgOpenStorageEx*(P1: ptr WCHAR, P2: DWORD, P3: DWORD, P4: DWORD, P5: ptr STGOPTIONS, P6: pointer, P7: REFIID, P8: ptr pointer): HRESULT {.winapi, dynlib: "ole32", importc.}
proc BindMoniker*(P1: LPMONIKER, P2: DWORD, P3: REFIID, P4: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoGetObject*(P1: LPCWSTR, P2: ptr BIND_OPTS, P3: REFIID, P4: ptr pointer): HRESULT {.winapi, dynlib: "ole32", importc.}
proc MkParseDisplayName*(P1: LPBC, P2: LPCOLESTR, P3: ptr ULONG, P4: ptr LPMONIKER): HRESULT {.winapi, dynlib: "ole32", importc.}
proc MonikerRelativePathTo*(P1: LPMONIKER, P2: LPMONIKER, P3: ptr LPMONIKER, P4: BOOL): HRESULT {.winapi, dynlib: "ole32", importc.}
proc MonikerCommonPrefixWith*(P1: LPMONIKER, P2: LPMONIKER, P3: ptr LPMONIKER): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CreateBindCtx*(P1: DWORD, P2: ptr LPBC): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CreateGenericComposite*(P1: LPMONIKER, P2: LPMONIKER, P3: ptr LPMONIKER): HRESULT {.winapi, dynlib: "ole32", importc.}
proc GetClassFile*(P1: LPCOLESTR, P2: ptr CLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CreateFileMoniker*(P1: LPCOLESTR, P2: ptr LPMONIKER): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CreateItemMoniker*(P1: LPCOLESTR, P2: LPCOLESTR, P3: ptr LPMONIKER): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CreateAntiMoniker*(P1: ptr LPMONIKER): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CreatePointerMoniker*(P1: LPUNKNOWN, P2: ptr LPMONIKER): HRESULT {.winapi, dynlib: "ole32", importc.}
proc GetRunningObjectTable*(P1: DWORD, P2: ptr LPRUNNINGOBJECTTABLE): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoInitializeSecurity*(P1: PSECURITY_DESCRIPTOR, P2: LONG, P3: ptr SOLE_AUTHENTICATION_SERVICE, P4: pointer, P5: DWORD, P6: DWORD, P7: pointer, P8: DWORD, P9: pointer): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoGetCallContext*(P1: REFIID, P2: ptr pointer): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoQueryProxyBlanket*(P1: ptr IUnknown, P2: ptr DWORD, P3: ptr DWORD, P4: ptr ptr OLECHAR, P5: ptr DWORD, P6: ptr DWORD, P7: ptr RPC_AUTH_IDENTITY_HANDLE, P8: ptr DWORD): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoSetProxyBlanket*(P1: ptr IUnknown, P2: DWORD, P3: DWORD, P4: ptr OLECHAR, P5: DWORD, P6: DWORD, P7: RPC_AUTH_IDENTITY_HANDLE, P8: DWORD): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoCopyProxy*(P1: ptr IUnknown, P2: ptr ptr IUnknown): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoQueryClientBlanket*(P1: ptr DWORD, P2: ptr DWORD, P3: ptr ptr OLECHAR, P4: ptr DWORD, P5: ptr DWORD, P6: ptr RPC_AUTHZ_HANDLE, P7: ptr DWORD): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoImpersonateClient*(): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoRevertToSelf*(): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoQueryAuthenticationServices*(P1: ptr DWORD, P2: ptr ptr SOLE_AUTHENTICATION_SERVICE): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoSwitchCallContext*(P1: ptr IUnknown, P2: ptr ptr IUnknown): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoGetInstanceFromFile*(P1: ptr COSERVERINFO, P2: ptr CLSID, P3: ptr IUnknown, P4: DWORD, P5: DWORD, P6: ptr OLECHAR, P7: DWORD, P8: ptr MULTI_QI): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoGetInstanceFromIStorage*(P1: ptr COSERVERINFO, P2: ptr CLSID, P3: ptr IUnknown, P4: DWORD, P5: ptr IStorage, P6: DWORD, P7: ptr MULTI_QI): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoAddRefServerProcess*(): ULONG {.winapi, dynlib: "ole32", importc.}
proc CoReleaseServerProcess*(): ULONG {.winapi, dynlib: "ole32", importc.}
proc CoResumeClassObjects*(): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoSuspendClassObjects*(): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoGetPSClsid*(P1: REFIID, P2: ptr CLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CoRegisterPSClsid*(P1: REFIID, P2: REFCLSID): HRESULT {.winapi, dynlib: "ole32", importc.}

# objcore/oleidl.nim
const
  # OLECLOSE* = enum
  OLECLOSE_SAVEIFDIRTY* = 0
  OLECLOSE_NOSAVE* = 1
  OLECLOSE_PROMPTSAVE* = 2
  # BINDSPEED* = enum
  BINDSPEED_INDEFINITE* = 1
  BINDSPEED_MODERATE* = 2
  BINDSPEED_IMMEDIATE* = 3
  # OLEWHICHMK* = enum
  OLEWHICHMK_CONTAINER* = 1
  OLEWHICHMK_OBJREL* = 2
  OLEWHICHMK_OBJFULL* = 3
  # OLEGETMONIKER* = enum
  OLEGETMONIKER_ONLYIFTHERE* = 1
  OLEGETMONIKER_FORCEASSIGN* = 2
  OLEGETMONIKER_UNASSIGN* = 3
  OLEGETMONIKER_TEMPFORUSER* = 4
  # USERCLASSTYPE* = enum
  USERCLASSTYPE_FULL* = 1
  USERCLASSTYPE_SHORT* = 2
  USERCLASSTYPE_APPNAME* = 3
  # DROPEFFECT* = enum
  DROPEFFECT_SCROLL* = 0x80000000'i32
  DROPEFFECT_NONE* = 0
  DROPEFFECT_COPY* = 1
  DROPEFFECT_MOVE* = 2
  DROPEFFECT_LINK* = 4

const
  MK_ALT* = 32

type
  BINDSPEED* = int32
  OLEWHICHMK* = int32
  OLEGETMONIKER* = int32
  USERCLASSTYPE* = int32
  DROPEFFECT* = int32
  OLEMENUGROUPWIDTHS* {.final, pure.} = object
    width*: array[6, LONG]
  LPOLEMENUGROUPWIDTHS* = ptr OLEMENUGROUPWIDTHS
  HOLEMENU* = HGLOBAL
  OLEVERB* {.final, pure.} = object
    lVerb*: LONG
    lpszVerbName*: LPWSTR
    fuFlags*: DWORD
    grfAttribs*: DWORD
  LPOLEVERB* = ptr OLEVERB
  BORDERWIDTHS* = RECT
  LPBORDERWIDTHS* = LPRECT
  LPCBORDERWIDTHS* = LPCRECT
  OLEINPLACEFRAMEINFO* {.final, pure.} = object
    cb*: UINT
    fMDIApp*: BOOL
    hwndFrame*: HWND
    haccel*: HACCEL
    cAccelEntries*: UINT
  LPOLEINPLACEFRAMEINFO* = ptr OLEINPLACEFRAMEINFO
  IEnumOLEVERB* {.pure.} = object
    lpVtbl*: ptr IEnumOLEVERBVtbl
  IEnumOLEVERBVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumOLEVERB, P1: ULONG, P2: ptr OLEVERB, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumOLEVERB, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumOLEVERB): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumOLEVERB, P1: ptr ptr IEnumOLEVERB): HRESULT {.stdcall.}
  LPENUMOLEVERB* = ptr IEnumOLEVERB
  IParseDisplayName* {.pure.} = object
    lpVtbl*: ptr IParseDisplayNameVtbl
  IParseDisplayNameVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ParseDisplayName*: proc(self: ptr IParseDisplayName, P1: ptr IBindCtx, P2: LPOLESTR, P3: ptr ULONG, P4: ptr ptr IMoniker): HRESULT {.stdcall.}
  LPPARSEDISPLAYNAME* = ptr IParseDisplayName
  IOleContainer* {.pure.} = object
    lpVtbl*: ptr IOleContainerVtbl
  IOleContainerVtbl* {.pure, inheritable.} = object of IParseDisplayNameVtbl
    EnumObjects*: proc(self: ptr IOleContainer, P1: DWORD, P2: ptr ptr IEnumUnknown): HRESULT {.stdcall.}
    LockContainer*: proc(self: ptr IOleContainer, P1: BOOL): HRESULT {.stdcall.}
  LPOLECONTAINER* = ptr IOleContainer
  IOleItemContainer* {.pure.} = object
    lpVtbl*: ptr IOleItemContainerVtbl
  IOleItemContainerVtbl* {.pure, inheritable.} = object of IOleContainerVtbl
    GetObject*: proc(self: ptr IOleItemContainer, P1: LPOLESTR, P2: DWORD, P3: ptr IBindCtx, P4: REFIID, P5: ptr pointer): HRESULT {.stdcall.}
    GetObjectStorage*: proc(self: ptr IOleItemContainer, P1: LPOLESTR, P2: ptr IBindCtx, P3: REFIID, P4: ptr pointer): HRESULT {.stdcall.}
    IsRunning*: proc(self: ptr IOleItemContainer, P1: LPOLESTR): HRESULT {.stdcall.}
  IOleClientSite* {.pure.} = object
    lpVtbl*: ptr IOleClientSiteVtbl
  IOleClientSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SaveObject*: proc(self: ptr IOleClientSite): HRESULT {.stdcall.}
    GetMoniker*: proc(self: ptr IOleClientSite, P1: DWORD, P2: DWORD, P3: ptr LPMONIKER): HRESULT {.stdcall.}
    GetContainer*: proc(self: ptr IOleClientSite, P1: ptr LPOLECONTAINER): HRESULT {.stdcall.}
    ShowObject*: proc(self: ptr IOleClientSite): HRESULT {.stdcall.}
    OnShowWindow*: proc(self: ptr IOleClientSite, P1: BOOL): HRESULT {.stdcall.}
    RequestNewObjectLayout*: proc(self: ptr IOleClientSite): HRESULT {.stdcall.}
  LPOLECLIENTSITE* = ptr IOleClientSite
  IOleObject* {.pure.} = object
    lpVtbl*: ptr IOleObjectVtbl
  IOleObjectVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetClientSite*: proc(self: ptr IOleObject, P1: LPOLECLIENTSITE): HRESULT {.stdcall.}
    GetClientSite*: proc(self: ptr IOleObject, P1: ptr LPOLECLIENTSITE): HRESULT {.stdcall.}
    SetHostNames*: proc(self: ptr IOleObject, P1: LPCOLESTR, P2: LPCOLESTR): HRESULT {.stdcall.}
    Close*: proc(self: ptr IOleObject, P1: DWORD): HRESULT {.stdcall.}
    SetMoniker*: proc(self: ptr IOleObject, P1: DWORD, P2: LPMONIKER): HRESULT {.stdcall.}
    GetMoniker*: proc(self: ptr IOleObject, P1: DWORD, P2: DWORD, P3: ptr LPMONIKER): HRESULT {.stdcall.}
    InitFromData*: proc(self: ptr IOleObject, P1: LPDATAOBJECT, P2: BOOL, P3: DWORD): HRESULT {.stdcall.}
    GetClipboardData*: proc(self: ptr IOleObject, P1: DWORD, P2: ptr LPDATAOBJECT): HRESULT {.stdcall.}
    DoVerb*: proc(self: ptr IOleObject, P1: LONG, P2: LPMSG, P3: LPOLECLIENTSITE, P4: LONG, P5: HWND, P6: LPCRECT): HRESULT {.stdcall.}
    EnumVerbs*: proc(self: ptr IOleObject, P1: ptr LPENUMOLEVERB): HRESULT {.stdcall.}
    Update*: proc(self: ptr IOleObject): HRESULT {.stdcall.}
    IsUpToDate*: proc(self: ptr IOleObject): HRESULT {.stdcall.}
    GetUserClassID*: proc(self: ptr IOleObject, P1: LPCLSID): HRESULT {.stdcall.}
    GetUserType*: proc(self: ptr IOleObject, P1: DWORD, P2: ptr LPOLESTR): HRESULT {.stdcall.}
    SetExtent*: proc(self: ptr IOleObject, P1: DWORD, P2: ptr SIZEL): HRESULT {.stdcall.}
    GetExtent*: proc(self: ptr IOleObject, P1: DWORD, P2: ptr SIZEL): HRESULT {.stdcall.}
    Advise*: proc(self: ptr IOleObject, P1: LPADVISESINK, P2: PDWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr IOleObject, P1: DWORD): HRESULT {.stdcall.}
    EnumAdvise*: proc(self: ptr IOleObject, P1: ptr LPENUMSTATDATA): HRESULT {.stdcall.}
    GetMiscStatus*: proc(self: ptr IOleObject, P1: DWORD, P2: PDWORD): HRESULT {.stdcall.}
    SetColorScheme*: proc(self: ptr IOleObject, P1: LPLOGPALETTE): HRESULT {.stdcall.}
  LPOLEOBJECT* = ptr IOleObject
  IOleWindow* {.pure.} = object
    lpVtbl*: ptr IOleWindowVtbl
  IOleWindowVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetWindow*: proc(self: ptr IOleWindow, P1: ptr HWND): HRESULT {.stdcall.}
    ContextSensitiveHelp*: proc(self: ptr IOleWindow, P1: BOOL): HRESULT {.stdcall.}
  LPOLEWINDOW* = ptr IOleWindow
  IOleInPlaceUIWindow* {.pure.} = object
    lpVtbl*: ptr IOleInPlaceUIWindowVtbl
  IOleInPlaceUIWindowVtbl* {.pure, inheritable.} = object of IOleWindowVtbl
    GetBorder*: proc(self: ptr IOleInPlaceUIWindow, P1: LPRECT): HRESULT {.stdcall.}
    RequestBorderSpace*: proc(self: ptr IOleInPlaceUIWindow, P1: LPCBORDERWIDTHS): HRESULT {.stdcall.}
    SetBorderSpace*: proc(self: ptr IOleInPlaceUIWindow, P1: LPCBORDERWIDTHS): HRESULT {.stdcall.}
    SetActiveObject*: proc(self: ptr IOleInPlaceUIWindow, P1: LPOLEINPLACEACTIVEOBJECT, P2: LPCOLESTR): HRESULT {.stdcall.}
  LPOLEINPLACEUIWINDOW* = ptr IOleInPlaceUIWindow
  IOleInPlaceObject* {.pure.} = object
    lpVtbl*: ptr IOleInPlaceObjectVtbl
  IOleInPlaceObjectVtbl* {.pure, inheritable.} = object of IOleWindowVtbl
    InPlaceDeactivate*: proc(self: ptr IOleInPlaceObject): HRESULT {.stdcall.}
    UIDeactivate*: proc(self: ptr IOleInPlaceObject): HRESULT {.stdcall.}
    SetObjectRects*: proc(self: ptr IOleInPlaceObject, P1: LPCRECT, P2: LPCRECT): HRESULT {.stdcall.}
    ReactivateAndUndo*: proc(self: ptr IOleInPlaceObject): HRESULT {.stdcall.}
  IOleInPlaceActiveObject* {.pure.} = object
    lpVtbl*: ptr IOleInPlaceActiveObjectVtbl
  IOleInPlaceActiveObjectVtbl* {.pure, inheritable.} = object of IOleWindowVtbl
    TranslateAccelerator*: proc(self: ptr IOleInPlaceActiveObject, P1: LPMSG): HRESULT {.stdcall.}
    OnFrameWindowActivate*: proc(self: ptr IOleInPlaceActiveObject, P1: BOOL): HRESULT {.stdcall.}
    OnDocWindowActivate*: proc(self: ptr IOleInPlaceActiveObject, P1: BOOL): HRESULT {.stdcall.}
    ResizeBorder*: proc(self: ptr IOleInPlaceActiveObject, P1: LPCRECT, P2: LPOLEINPLACEUIWINDOW, P3: BOOL): HRESULT {.stdcall.}
    EnableModeless*: proc(self: ptr IOleInPlaceActiveObject, P1: BOOL): HRESULT {.stdcall.}
  LPOLEINPLACEACTIVEOBJECT* = ptr IOleInPlaceActiveObject
  IOleInPlaceFrame* {.pure.} = object
    lpVtbl*: ptr IOleInPlaceFrameVtbl
  IOleInPlaceFrameVtbl* {.pure, inheritable.} = object of IOleInPlaceUIWindowVtbl
    InsertMenus*: proc(self: ptr IOleInPlaceFrame, P1: HMENU, P2: LPOLEMENUGROUPWIDTHS): HRESULT {.stdcall.}
    SetMenu*: proc(self: ptr IOleInPlaceFrame, P1: HMENU, P2: HOLEMENU, P3: HWND): HRESULT {.stdcall.}
    RemoveMenus*: proc(self: ptr IOleInPlaceFrame, P1: HMENU): HRESULT {.stdcall.}
    SetStatusText*: proc(self: ptr IOleInPlaceFrame, P1: LPCOLESTR): HRESULT {.stdcall.}
    EnableModeless*: proc(self: ptr IOleInPlaceFrame, P1: BOOL): HRESULT {.stdcall.}
    TranslateAccelerator*: proc(self: ptr IOleInPlaceFrame, P1: LPMSG, P2: WORD): HRESULT {.stdcall.}
  LPOLEINPLACEFRAME* = ptr IOleInPlaceFrame
  IOleInPlaceSite* {.pure.} = object
    lpVtbl*: ptr IOleInPlaceSiteVtbl
  IOleInPlaceSiteVtbl* {.pure, inheritable.} = object of IOleWindowVtbl
    CanInPlaceActivate*: proc(self: ptr IOleInPlaceSite): HRESULT {.stdcall.}
    OnInPlaceActivate*: proc(self: ptr IOleInPlaceSite): HRESULT {.stdcall.}
    OnUIActivate*: proc(self: ptr IOleInPlaceSite): HRESULT {.stdcall.}
    GetWindowContext*: proc(self: ptr IOleInPlaceSite, P1: ptr IOleInPlaceFrame, P2: ptr IOleInPlaceUIWindow, P3: LPRECT, P4: LPRECT, P5: LPOLEINPLACEFRAMEINFO): HRESULT {.stdcall.}
    Scroll*: proc(self: ptr IOleInPlaceSite, P1: SIZE): HRESULT {.stdcall.}
    OnUIDeactivate*: proc(self: ptr IOleInPlaceSite, P1: BOOL): HRESULT {.stdcall.}
    OnInPlaceDeactivate*: proc(self: ptr IOleInPlaceSite): HRESULT {.stdcall.}
    DiscardUndoState*: proc(self: ptr IOleInPlaceSite): HRESULT {.stdcall.}
    DeactivateAndUndo*: proc(self: ptr IOleInPlaceSite): HRESULT {.stdcall.}
    OnPosRectChange*: proc(self: ptr IOleInPlaceSite, P1: LPCRECT): HRESULT {.stdcall.}
  IOleAdviseHolder* {.pure.} = object
    lpVtbl*: ptr IOleAdviseHolderVtbl
  IOleAdviseHolderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Advise*: proc(self: ptr IOleAdviseHolder, P1: LPADVISESINK, P2: PDWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr IOleAdviseHolder, P1: DWORD): HRESULT {.stdcall.}
    EnumAdvise*: proc(self: ptr IOleAdviseHolder, P1: ptr LPENUMSTATDATA): HRESULT {.stdcall.}
    SendOnRename*: proc(self: ptr IOleAdviseHolder, P1: LPMONIKER): HRESULT {.stdcall.}
    SendOnSave*: proc(self: ptr IOleAdviseHolder): HRESULT {.stdcall.}
    SendOnClose*: proc(self: ptr IOleAdviseHolder): HRESULT {.stdcall.}
  LPOLEADVISEHOLDER* = ptr IOleAdviseHolder
  IDropSource* {.pure.} = object
    lpVtbl*: ptr IDropSourceVtbl
  IDropSourceVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    QueryContinueDrag*: proc(self: ptr IDropSource, P1: BOOL, P2: DWORD): HRESULT {.stdcall.}
    GiveFeedback*: proc(self: ptr IDropSource, P1: DWORD): HRESULT {.stdcall.}
  LPDROPSOURCE* = ptr IDropSource
  IDropTarget* {.pure.} = object
    lpVtbl*: ptr IDropTargetVtbl
  IDropTargetVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    DragEnter*: proc(self: ptr IDropTarget, P1: LPDATAOBJECT, P2: DWORD, P3: POINTL, P4: PDWORD): HRESULT {.stdcall.}
    DragOver*: proc(self: ptr IDropTarget, P1: DWORD, P2: POINTL, P3: PDWORD): HRESULT {.stdcall.}
    DragLeave*: proc(self: ptr IDropTarget): HRESULT {.stdcall.}
    Drop*: proc(self: ptr IDropTarget, P1: LPDATAOBJECT, P2: DWORD, P3: POINTL, P4: PDWORD): HRESULT {.stdcall.}
  LPDROPTARGET* = ptr IDropTarget

type
  IView_pfncont* = proc (P1: DWORD): BOOL {.stdcall.}

type
  IViewObject* {.pure.} = object
    lpVtbl*: ptr IViewObjectVtbl
  IViewObjectVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Draw*: proc(self: ptr IViewObject, P1: DWORD, P2: LONG, P3: PVOID, P4: ptr DVTARGETDEVICE, P5: HDC, P6: HDC, P7: LPCRECTL, P8: LPCRECTL, pfnContinue: IView_pfncont, P10: DWORD): HRESULT {.stdcall.}
    GetColorSet*: proc(self: ptr IViewObject, P1: DWORD, P2: LONG, P3: PVOID, P4: ptr DVTARGETDEVICE, P5: HDC, P6: ptr LPLOGPALETTE): HRESULT {.stdcall.}
    Freeze*: proc(self: ptr IViewObject, P1: DWORD, P2: LONG, P3: PVOID, P4: PDWORD): HRESULT {.stdcall.}
    Unfreeze*: proc(self: ptr IViewObject, P1: DWORD): HRESULT {.stdcall.}
    SetAdvise*: proc(self: ptr IViewObject, P1: DWORD, P2: DWORD, P3: ptr IAdviseSink): HRESULT {.stdcall.}
    GetAdvise*: proc(self: ptr IViewObject, P1: PDWORD, P2: PDWORD, P3: ptr ptr IAdviseSink): HRESULT {.stdcall.}
  LPVIEWOBJECT* = ptr IViewObject
  IViewObject2* {.pure.} = object
    lpVtbl*: ptr IViewObject2Vtbl
  IViewObject2Vtbl* {.pure, inheritable.} = object of IViewObjectVtbl
    GetExtent*: proc(self: ptr IViewObject2, P1: DWORD, P2: LONG, P3: ptr DVTARGETDEVICE, P4: LPSIZEL): HRESULT {.stdcall.}
  LPVIEWOBJECT2* = ptr IViewObject2
  IOleCache* {.pure.} = object
    lpVtbl*: ptr IOleCacheVtbl
  IOleCacheVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Cache*: proc(self: ptr IOleCache, P1: ptr FORMATETC, P2: DWORD, P3: ptr DWORD): HRESULT {.stdcall.}
    Uncache*: proc(self: ptr IOleCache, P1: DWORD): HRESULT {.stdcall.}
    EnumCache*: proc(self: ptr IOleCache, P1: ptr ptr IEnumSTATDATA): HRESULT {.stdcall.}
    InitCache*: proc(self: ptr IOleCache, P1: LPDATAOBJECT): HRESULT {.stdcall.}
    SetData*: proc(self: ptr IOleCache, P1: ptr FORMATETC, P2: ptr STGMEDIUM, P3: BOOL): HRESULT {.stdcall.}
  LPOLECACHE* = ptr IOleCache
  IOleCache2* {.pure.} = object
    lpVtbl*: ptr IOleCache2Vtbl
  IOleCache2Vtbl* {.pure, inheritable.} = object of IOleCacheVtbl
    UpdateCache*: proc(self: ptr IOleCache2, P1: LPDATAOBJECT, P2: DWORD, P3: LPVOID): HRESULT {.stdcall.}
    DiscardCache*: proc(self: ptr IOleCache2, P1: DWORD): HRESULT {.stdcall.}
  LPOLECACHE2* = ptr IOleCache2
  IOleCacheControl* {.pure.} = object
    lpVtbl*: ptr IOleCacheControlVtbl
  IOleCacheControlVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnRun*: proc(self: ptr IOleCacheControl, P1: LPDATAOBJECT): HRESULT {.stdcall.}
    OnStop*: proc(self: ptr IOleCacheControl): HRESULT {.stdcall.}
  LPOLECACHECONTROL* = ptr IOleCacheControl

converter winim_converter_IEnumOLEVERB*(x: ptr IEnumOLEVERB): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumOLEVERB, P1: ULONG, P2: ptr OLEVERB, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumOLEVERB, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumOLEVERB): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumOLEVERB, P1: ptr ptr IEnumOLEVERB): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IParseDisplayName*(x: ptr IParseDisplayName): ptr IUnknown = cast[ptr IUnknown](x)
proc ParseDisplayName*(self: ptr IParseDisplayName, P1: ptr IBindCtx, P2: LPOLESTR, P3: ptr ULONG, P4: ptr ptr IMoniker): HRESULT {.inline, discardable.} = self.lpVtbl.ParseDisplayName(self, P1, P2, P3, P4)
converter winim_converter_IOleContainer*(x: ptr IOleContainer): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOleContainer*(x: ptr IOleContainer): ptr IParseDisplayName = cast[ptr IParseDisplayName](x)
proc EnumObjects*(self: ptr IOleContainer, P1: DWORD, P2: ptr ptr IEnumUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.EnumObjects(self, P1, P2)
proc LockContainer*(self: ptr IOleContainer, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.LockContainer(self, P1)
converter winim_converter_IOleItemContainer*(x: ptr IOleItemContainer): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOleItemContainer*(x: ptr IOleItemContainer): ptr IOleContainer = cast[ptr IOleContainer](x)
converter winim_converter_IOleItemContainer*(x: ptr IOleItemContainer): ptr IParseDisplayName = cast[ptr IParseDisplayName](x)
proc GetObject*(self: ptr IOleItemContainer, P1: LPOLESTR, P2: DWORD, P3: ptr IBindCtx, P4: REFIID, P5: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetObject(self, P1, P2, P3, P4, P5)
proc GetObjectStorage*(self: ptr IOleItemContainer, P1: LPOLESTR, P2: ptr IBindCtx, P3: REFIID, P4: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetObjectStorage(self, P1, P2, P3, P4)
proc IsRunning*(self: ptr IOleItemContainer, P1: LPOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.IsRunning(self, P1)
converter winim_converter_IOleClientSite*(x: ptr IOleClientSite): ptr IUnknown = cast[ptr IUnknown](x)
proc SaveObject*(self: ptr IOleClientSite): HRESULT {.inline, discardable.} = self.lpVtbl.SaveObject(self)
proc GetMoniker*(self: ptr IOleClientSite, P1: DWORD, P2: DWORD, P3: ptr LPMONIKER): HRESULT {.inline, discardable.} = self.lpVtbl.GetMoniker(self, P1, P2, P3)
proc GetContainer*(self: ptr IOleClientSite, P1: ptr LPOLECONTAINER): HRESULT {.inline, discardable.} = self.lpVtbl.GetContainer(self, P1)
proc ShowObject*(self: ptr IOleClientSite): HRESULT {.inline, discardable.} = self.lpVtbl.ShowObject(self)
proc OnShowWindow*(self: ptr IOleClientSite, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnShowWindow(self, P1)
proc RequestNewObjectLayout*(self: ptr IOleClientSite): HRESULT {.inline, discardable.} = self.lpVtbl.RequestNewObjectLayout(self)
converter winim_converter_IOleObject*(x: ptr IOleObject): ptr IUnknown = cast[ptr IUnknown](x)
proc SetClientSite*(self: ptr IOleObject, P1: LPOLECLIENTSITE): HRESULT {.inline, discardable.} = self.lpVtbl.SetClientSite(self, P1)
proc GetClientSite*(self: ptr IOleObject, P1: ptr LPOLECLIENTSITE): HRESULT {.inline, discardable.} = self.lpVtbl.GetClientSite(self, P1)
proc SetHostNames*(self: ptr IOleObject, P1: LPCOLESTR, P2: LPCOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetHostNames(self, P1, P2)
proc Close*(self: ptr IOleObject, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Close(self, P1)
proc SetMoniker*(self: ptr IOleObject, P1: DWORD, P2: LPMONIKER): HRESULT {.inline, discardable.} = self.lpVtbl.SetMoniker(self, P1, P2)
proc GetMoniker*(self: ptr IOleObject, P1: DWORD, P2: DWORD, P3: ptr LPMONIKER): HRESULT {.inline, discardable.} = self.lpVtbl.GetMoniker(self, P1, P2, P3)
proc InitFromData*(self: ptr IOleObject, P1: LPDATAOBJECT, P2: BOOL, P3: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.InitFromData(self, P1, P2, P3)
proc GetClipboardData*(self: ptr IOleObject, P1: DWORD, P2: ptr LPDATAOBJECT): HRESULT {.inline, discardable.} = self.lpVtbl.GetClipboardData(self, P1, P2)
proc DoVerb*(self: ptr IOleObject, P1: LONG, P2: LPMSG, P3: LPOLECLIENTSITE, P4: LONG, P5: HWND, P6: LPCRECT): HRESULT {.inline, discardable.} = self.lpVtbl.DoVerb(self, P1, P2, P3, P4, P5, P6)
proc EnumVerbs*(self: ptr IOleObject, P1: ptr LPENUMOLEVERB): HRESULT {.inline, discardable.} = self.lpVtbl.EnumVerbs(self, P1)
proc Update*(self: ptr IOleObject): HRESULT {.inline, discardable.} = self.lpVtbl.Update(self)
proc IsUpToDate*(self: ptr IOleObject): HRESULT {.inline, discardable.} = self.lpVtbl.IsUpToDate(self)
proc GetUserClassID*(self: ptr IOleObject, P1: LPCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.GetUserClassID(self, P1)
proc GetUserType*(self: ptr IOleObject, P1: DWORD, P2: ptr LPOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetUserType(self, P1, P2)
proc SetExtent*(self: ptr IOleObject, P1: DWORD, P2: ptr SIZEL): HRESULT {.inline, discardable.} = self.lpVtbl.SetExtent(self, P1, P2)
proc GetExtent*(self: ptr IOleObject, P1: DWORD, P2: ptr SIZEL): HRESULT {.inline, discardable.} = self.lpVtbl.GetExtent(self, P1, P2)
proc Advise*(self: ptr IOleObject, P1: LPADVISESINK, P2: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, P1, P2)
proc Unadvise*(self: ptr IOleObject, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, P1)
proc EnumAdvise*(self: ptr IOleObject, P1: ptr LPENUMSTATDATA): HRESULT {.inline, discardable.} = self.lpVtbl.EnumAdvise(self, P1)
proc GetMiscStatus*(self: ptr IOleObject, P1: DWORD, P2: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetMiscStatus(self, P1, P2)
proc SetColorScheme*(self: ptr IOleObject, P1: LPLOGPALETTE): HRESULT {.inline, discardable.} = self.lpVtbl.SetColorScheme(self, P1)
converter winim_converter_IOleWindow*(x: ptr IOleWindow): ptr IUnknown = cast[ptr IUnknown](x)
proc GetWindow*(self: ptr IOleWindow, P1: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.GetWindow(self, P1)
proc ContextSensitiveHelp*(self: ptr IOleWindow, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ContextSensitiveHelp(self, P1)
converter winim_converter_IOleInPlaceUIWindow*(x: ptr IOleInPlaceUIWindow): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOleInPlaceUIWindow*(x: ptr IOleInPlaceUIWindow): ptr IOleWindow = cast[ptr IOleWindow](x)
proc GetBorder*(self: ptr IOleInPlaceUIWindow, P1: LPRECT): HRESULT {.inline, discardable.} = self.lpVtbl.GetBorder(self, P1)
proc RequestBorderSpace*(self: ptr IOleInPlaceUIWindow, P1: LPCBORDERWIDTHS): HRESULT {.inline, discardable.} = self.lpVtbl.RequestBorderSpace(self, P1)
proc SetBorderSpace*(self: ptr IOleInPlaceUIWindow, P1: LPCBORDERWIDTHS): HRESULT {.inline, discardable.} = self.lpVtbl.SetBorderSpace(self, P1)
proc SetActiveObject*(self: ptr IOleInPlaceUIWindow, P1: LPOLEINPLACEACTIVEOBJECT, P2: LPCOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetActiveObject(self, P1, P2)
converter winim_converter_IOleInPlaceObject*(x: ptr IOleInPlaceObject): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOleInPlaceObject*(x: ptr IOleInPlaceObject): ptr IOleWindow = cast[ptr IOleWindow](x)
proc InPlaceDeactivate*(self: ptr IOleInPlaceObject): HRESULT {.inline, discardable.} = self.lpVtbl.InPlaceDeactivate(self)
proc UIDeactivate*(self: ptr IOleInPlaceObject): HRESULT {.inline, discardable.} = self.lpVtbl.UIDeactivate(self)
proc SetObjectRects*(self: ptr IOleInPlaceObject, P1: LPCRECT, P2: LPCRECT): HRESULT {.inline, discardable.} = self.lpVtbl.SetObjectRects(self, P1, P2)
proc ReactivateAndUndo*(self: ptr IOleInPlaceObject): HRESULT {.inline, discardable.} = self.lpVtbl.ReactivateAndUndo(self)
converter winim_converter_IOleInPlaceActiveObject*(x: ptr IOleInPlaceActiveObject): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOleInPlaceActiveObject*(x: ptr IOleInPlaceActiveObject): ptr IOleWindow = cast[ptr IOleWindow](x)
proc TranslateAccelerator*(self: ptr IOleInPlaceActiveObject, P1: LPMSG): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAccelerator(self, P1)
proc OnFrameWindowActivate*(self: ptr IOleInPlaceActiveObject, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnFrameWindowActivate(self, P1)
proc OnDocWindowActivate*(self: ptr IOleInPlaceActiveObject, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnDocWindowActivate(self, P1)
proc ResizeBorder*(self: ptr IOleInPlaceActiveObject, P1: LPCRECT, P2: LPOLEINPLACEUIWINDOW, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ResizeBorder(self, P1, P2, P3)
proc EnableModeless*(self: ptr IOleInPlaceActiveObject, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.EnableModeless(self, P1)
converter winim_converter_IOleInPlaceFrame*(x: ptr IOleInPlaceFrame): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOleInPlaceFrame*(x: ptr IOleInPlaceFrame): ptr IOleInPlaceUIWindow = cast[ptr IOleInPlaceUIWindow](x)
converter winim_converter_IOleInPlaceFrame*(x: ptr IOleInPlaceFrame): ptr IOleWindow = cast[ptr IOleWindow](x)
proc InsertMenus*(self: ptr IOleInPlaceFrame, P1: HMENU, P2: LPOLEMENUGROUPWIDTHS): HRESULT {.inline, discardable.} = self.lpVtbl.InsertMenus(self, P1, P2)
proc SetMenu*(self: ptr IOleInPlaceFrame, P1: HMENU, P2: HOLEMENU, P3: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.SetMenu(self, P1, P2, P3)
proc RemoveMenus*(self: ptr IOleInPlaceFrame, P1: HMENU): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveMenus(self, P1)
proc SetStatusText*(self: ptr IOleInPlaceFrame, P1: LPCOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetStatusText(self, P1)
proc EnableModeless*(self: ptr IOleInPlaceFrame, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.EnableModeless(self, P1)
proc TranslateAccelerator*(self: ptr IOleInPlaceFrame, P1: LPMSG, P2: WORD): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAccelerator(self, P1, P2)
converter winim_converter_IOleInPlaceSite*(x: ptr IOleInPlaceSite): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOleInPlaceSite*(x: ptr IOleInPlaceSite): ptr IOleWindow = cast[ptr IOleWindow](x)
proc CanInPlaceActivate*(self: ptr IOleInPlaceSite): HRESULT {.inline, discardable.} = self.lpVtbl.CanInPlaceActivate(self)
proc OnInPlaceActivate*(self: ptr IOleInPlaceSite): HRESULT {.inline, discardable.} = self.lpVtbl.OnInPlaceActivate(self)
proc OnUIActivate*(self: ptr IOleInPlaceSite): HRESULT {.inline, discardable.} = self.lpVtbl.OnUIActivate(self)
proc GetWindowContext*(self: ptr IOleInPlaceSite, P1: ptr IOleInPlaceFrame, P2: ptr IOleInPlaceUIWindow, P3: LPRECT, P4: LPRECT, P5: LPOLEINPLACEFRAMEINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetWindowContext(self, P1, P2, P3, P4, P5)
proc Scroll*(self: ptr IOleInPlaceSite, P1: SIZE): HRESULT {.inline, discardable.} = self.lpVtbl.Scroll(self, P1)
proc OnUIDeactivate*(self: ptr IOleInPlaceSite, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnUIDeactivate(self, P1)
proc OnInPlaceDeactivate*(self: ptr IOleInPlaceSite): HRESULT {.inline, discardable.} = self.lpVtbl.OnInPlaceDeactivate(self)
proc DiscardUndoState*(self: ptr IOleInPlaceSite): HRESULT {.inline, discardable.} = self.lpVtbl.DiscardUndoState(self)
proc DeactivateAndUndo*(self: ptr IOleInPlaceSite): HRESULT {.inline, discardable.} = self.lpVtbl.DeactivateAndUndo(self)
proc OnPosRectChange*(self: ptr IOleInPlaceSite, P1: LPCRECT): HRESULT {.inline, discardable.} = self.lpVtbl.OnPosRectChange(self, P1)
converter winim_converter_IOleAdviseHolder*(x: ptr IOleAdviseHolder): ptr IUnknown = cast[ptr IUnknown](x)
proc Advise*(self: ptr IOleAdviseHolder, P1: LPADVISESINK, P2: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, P1, P2)
proc Unadvise*(self: ptr IOleAdviseHolder, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, P1)
proc EnumAdvise*(self: ptr IOleAdviseHolder, P1: ptr LPENUMSTATDATA): HRESULT {.inline, discardable.} = self.lpVtbl.EnumAdvise(self, P1)
proc SendOnRename*(self: ptr IOleAdviseHolder, P1: LPMONIKER): HRESULT {.inline, discardable.} = self.lpVtbl.SendOnRename(self, P1)
proc SendOnSave*(self: ptr IOleAdviseHolder): HRESULT {.inline, discardable.} = self.lpVtbl.SendOnSave(self)
proc SendOnClose*(self: ptr IOleAdviseHolder): HRESULT {.inline, discardable.} = self.lpVtbl.SendOnClose(self)
converter winim_converter_IDropSource*(x: ptr IDropSource): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryContinueDrag*(self: ptr IDropSource, P1: BOOL, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.QueryContinueDrag(self, P1, P2)
proc GiveFeedback*(self: ptr IDropSource, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GiveFeedback(self, P1)
converter winim_converter_IDropTarget*(x: ptr IDropTarget): ptr IUnknown = cast[ptr IUnknown](x)
proc DragEnter*(self: ptr IDropTarget, P1: LPDATAOBJECT, P2: DWORD, P3: POINTL, P4: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.DragEnter(self, P1, P2, P3, P4)
proc DragOver*(self: ptr IDropTarget, P1: DWORD, P2: POINTL, P3: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.DragOver(self, P1, P2, P3)
proc DragLeave*(self: ptr IDropTarget): HRESULT {.inline, discardable.} = self.lpVtbl.DragLeave(self)
proc Drop*(self: ptr IDropTarget, P1: LPDATAOBJECT, P2: DWORD, P3: POINTL, P4: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Drop(self, P1, P2, P3, P4)
converter winim_converter_IViewObject*(x: ptr IViewObject): ptr IUnknown = cast[ptr IUnknown](x)
proc Draw*(self: ptr IViewObject, P1: DWORD, P2: LONG, P3: PVOID, P4: ptr DVTARGETDEVICE, P5: HDC, P6: HDC, P7: LPCRECTL, P8: LPCRECTL, pfnContinue: IView_pfncont, P10: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Draw(self, P1, P2, P3, P4, P5, P6, P7, P8, pfnContinue, P10)
proc GetColorSet*(self: ptr IViewObject, P1: DWORD, P2: LONG, P3: PVOID, P4: ptr DVTARGETDEVICE, P5: HDC, P6: ptr LPLOGPALETTE): HRESULT {.inline, discardable.} = self.lpVtbl.GetColorSet(self, P1, P2, P3, P4, P5, P6)
proc Freeze*(self: ptr IViewObject, P1: DWORD, P2: LONG, P3: PVOID, P4: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Freeze(self, P1, P2, P3, P4)
proc Unfreeze*(self: ptr IViewObject, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unfreeze(self, P1)
proc SetAdvise*(self: ptr IViewObject, P1: DWORD, P2: DWORD, P3: ptr IAdviseSink): HRESULT {.inline, discardable.} = self.lpVtbl.SetAdvise(self, P1, P2, P3)
proc GetAdvise*(self: ptr IViewObject, P1: PDWORD, P2: PDWORD, P3: ptr ptr IAdviseSink): HRESULT {.inline, discardable.} = self.lpVtbl.GetAdvise(self, P1, P2, P3)
converter winim_converter_IViewObject2*(x: ptr IViewObject2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IViewObject2*(x: ptr IViewObject2): ptr IViewObject = cast[ptr IViewObject](x)
proc GetExtent*(self: ptr IViewObject2, P1: DWORD, P2: LONG, P3: ptr DVTARGETDEVICE, P4: LPSIZEL): HRESULT {.inline, discardable.} = self.lpVtbl.GetExtent(self, P1, P2, P3, P4)
converter winim_converter_IOleCache*(x: ptr IOleCache): ptr IUnknown = cast[ptr IUnknown](x)
proc Cache*(self: ptr IOleCache, P1: ptr FORMATETC, P2: DWORD, P3: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Cache(self, P1, P2, P3)
proc Uncache*(self: ptr IOleCache, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Uncache(self, P1)
proc EnumCache*(self: ptr IOleCache, P1: ptr ptr IEnumSTATDATA): HRESULT {.inline, discardable.} = self.lpVtbl.EnumCache(self, P1)
proc InitCache*(self: ptr IOleCache, P1: LPDATAOBJECT): HRESULT {.inline, discardable.} = self.lpVtbl.InitCache(self, P1)
proc SetData*(self: ptr IOleCache, P1: ptr FORMATETC, P2: ptr STGMEDIUM, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetData(self, P1, P2, P3)
converter winim_converter_IOleCache2*(x: ptr IOleCache2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOleCache2*(x: ptr IOleCache2): ptr IOleCache = cast[ptr IOleCache](x)
proc UpdateCache*(self: ptr IOleCache2, P1: LPDATAOBJECT, P2: DWORD, P3: LPVOID): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateCache(self, P1, P2, P3)
proc DiscardCache*(self: ptr IOleCache2, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.DiscardCache(self, P1)
converter winim_converter_IOleCacheControl*(x: ptr IOleCacheControl): ptr IUnknown = cast[ptr IUnknown](x)
proc OnRun*(self: ptr IOleCacheControl, P1: LPDATAOBJECT): HRESULT {.inline, discardable.} = self.lpVtbl.OnRun(self, P1)
proc OnStop*(self: ptr IOleCacheControl): HRESULT {.inline, discardable.} = self.lpVtbl.OnStop(self)

# objcore/oaidl.nim

const
  # LIBFLAGS* = enum
  LIBFLAG_FRESTRICTED* = 1
  LIBFLAG_FCONTROL* = 2
  LIBFLAG_FHIDDEN* = 4
  LIBFLAG_FHASDISKIMAGE* = 8
  # TYPEFLAGS* = enum
  TYPEFLAG_FAPPOBJECT* = 1
  TYPEFLAG_FCANCREATE* = 2
  TYPEFLAG_FLICENSED* = 4
  TYPEFLAG_FPREDECLID* = 8
  TYPEFLAG_FHIDDEN* = 16
  TYPEFLAG_FCONTROL* = 32
  TYPEFLAG_FDUAL* = 64
  TYPEFLAG_FNONEXTENSIBLE* = 128
  TYPEFLAG_FOLEAUTOMATION* = 256
  TYPEFLAG_FRESTRICTED* = 512
  TYPEFLAG_FAGGREGATABLE* = 1024
  TYPEFLAG_FREPLACEABLE* = 2048
  TYPEFLAG_FDISPATCHABLE* = 4096
  TYPEFLAG_FREVERSEBIND* = 8192
  # FUNCFLAGS* = enum
  FUNCFLAG_FRESTRICTED* = 1
  FUNCFLAG_FSOURCE* = 2
  FUNCFLAG_FBINDABLE* = 4
  FUNCFLAG_FREQUESTEDIT* = 8
  FUNCFLAG_FDISPLAYBIND* = 16
  FUNCFLAG_FDEFAULTBIND* = 32
  FUNCFLAG_FHIDDEN* = 64
  FUNCFLAG_FUSESGETLASTERROR* = 128
  FUNCFLAG_FDEFAULTCOLLELEM* = 256
  FUNCFLAG_FUIDEFAULT* = 512
  FUNCFLAG_FNONBROWSABLE* = 1024
  FUNCFLAG_FREPLACEABLE* = 2048
  FUNCFLAG_FIMMEDIATEBIND* = 4096
  # VARFLAGS* = enum
  VARFLAG_FREADONLY* = 1
  VARFLAG_FSOURCE* = 2
  VARFLAG_FBINDABLE* = 4
  VARFLAG_FREQUESTEDIT* = 8
  VARFLAG_FDISPLAYBIND* = 16
  VARFLAG_FDEFAULTBIND* = 32
  VARFLAG_FHIDDEN* = 64
  VARFLAG_FRESTRICTED* = 128
  VARFLAG_FDEFAULTCOLLELEM* = 256
  VARFLAG_FUIDEFAULT* = 512
  VARFLAG_FNONBROWSABLE* = 1024
  VARFLAG_FREPLACEABLE* = 2048
  VARFLAG_FIMMEDIATEBIND* = 4096
  #* SYSKIND* = enum
  SYS_WIN16* = 0
  SYS_WIN32* = 2
  SYS_MAC* = 2
#* SF_TYPE* = enum
  SF_I2* = VT_I2
  SF_I4* = VT_I4
  SF_BSTR* = VT_BSTR
  SF_DISPATCH* = VT_DISPATCH
  SF_ERROR* = VT_ERROR
  SF_VARIANT* = VT_VARIANT
  SF_UNKNOWN* = VT_UNKNOWN
  SF_I1* = VT_I1
  SF_I8* = VT_I8
#* TYPEKIND* = enum
  TKIND_ENUM* = 0
  TKIND_RECORD* = 1
  TKIND_MODULE* = 2
  TKIND_INTERFACE* = 3
  TKIND_DISPATCH* = 4
  TKIND_COCLASS* = 5
  TKIND_ALIAS* = 6
  TKIND_UNION* = 7
  TKIND_MAX* = 8
#* CALLCONV* = enum
  CC_FASTCALL* = 0
  CC_CDECL* = 1
  CC_MSCPASCAL* = 2
  CC_PASCAL* = CC_MSCPASCAL
  CC_MACPASCAL* = 0
  CC_STDCALL* = 1
  CC_FPFASTCALL* = 2
  CC_SYSCALL* = 3
  CC_MPWCDECL* = 4
  CC_MPWPASCAL* = 5
  CC_MAX* = CC_MPWPASCAL
#* FUNCKIND* = enum
  FUNC_VIRTUAL* = 0
  FUNC_PUREVIRTUAL* = 1
  FUNC_NONVIRTUAL* = 2
  FUNC_STATIC* = 3
  FUNC_DISPATCH* = 4
#* INVOKEKIND* = enum
  INVOKE_FUNC* = 1
  INVOKE_PROPERTYGET* = 2
  INVOKE_PROPERTYPUT* = 4
  INVOKE_PROPERTYPUTREF* = 8
#* VARKIND* = enum
  VAR_PERINSTANCE* = 0
  VAR_STATIC* = 1
  VAR_CONST* = 2
  VAR_DISPATCH* = 3
#* DESCKIND* = enum
  DESCKIND_NONE* = 0
  DESCKIND_FUNCDESC* = 1
  DESCKIND_VARDESC* = 2
  DESCKIND_TYPECOMP* = 3
  DESCKIND_IMPLICITAPPOBJ* = 4
  DESCKIND_MAX* = 5

const
  DISPID_UNKNOWN* = -1
  DISPID_VALUE* = 0
  DISPID_PROPERTYPUT* = -3
  DISPID_NEWENUM* = -4
  DISPID_EVALUATE* = -5
  DISPID_CONSTRUCTOR* = -6
  DISPID_DESTRUCTOR* = -7
  DISPID_COLLECT* = -8
  FADF_AUTO* = 1
  FADF_STATIC* = 2
  FADF_EMBEDDED* = 4
  FADF_FIXEDSIZE* = 16
  FADF_RECORD* = 32
  FADF_HAVEIID* = 64
  FADF_HAVEVARTYPE* = 128
  FADF_BSTR* = 256
  FADF_UNKNOWN* = 512
  FADF_DISPATCH* = 1024
  FADF_VARIANT* = 2048
  FADF_RESERVED* = 0xf0e8
  FADF_DATADELETED* = 0x1000
  FADF_CREATEVECTOR* = 0x2000
  PARAMFLAG_NONE* = 0
  PARAMFLAG_FIN* = 1
  PARAMFLAG_FOUT* = 2
  PARAMFLAG_FLCID* = 4
  PARAMFLAG_FRETVAL* = 8
  PARAMFLAG_FOPT* = 16
  PARAMFLAG_FHASDEFAULT* = 32
  IDLFLAG_NONE* = PARAMFLAG_NONE
  IDLFLAG_FIN* = PARAMFLAG_FIN
  IDLFLAG_FOUT* = PARAMFLAG_FOUT
  IDLFLAG_FLCID* = PARAMFLAG_FLCID
  IDLFLAG_FRETVAL* = PARAMFLAG_FRETVAL
  IMPLTYPEFLAG_FDEFAULT* = 1
  IMPLTYPEFLAG_FSOURCE* = 2
  IMPLTYPEFLAG_FRESTRICTED* = 4
  IMPLTYPEFLAG_FDEFAULTVTABLE* = 8

type
  SYSKIND* = int32
  TLIBATTR* {.final, pure.} = object
    guid*: GUID
    lcid*: LCID
    syskind*: SYSKIND
    wMajorVerNum*: WORD
    wMinorVerNum*: WORD
    wLibFlags*: WORD
  LPTLIBATTR* = ptr TLIBATTR
  CURRENCY* = CY
  SAFEARRAYBOUND* {.final, pure.} = object
    cElements*: ULONG
    lLbound*: LONG
  LPSAFEARRAYBOUND* = ptr SAFEARRAYBOUND
  SAFEARR_BSTR* {.final, pure.} = object
    Size*: ULONG
    aBstr*: ptr wireBSTR
  SAFEARR_UNKNOWN* {.final, pure.} = object
    Size*: ULONG
    apUnknown*: ptr ptr IUnknown
  SAFEARR_DISPATCH* {.final, pure.} = object
    Size*: ULONG
    apDispatch*: ptr LPDISPATCH
  SAFEARR_VARIANT* {.final, pure.} = object
    Size*: ULONG
    aVariant*: ptr wireVARIANT
  SF_TYPE* = int32
  wireBRECORD* {.final, pure.} = object
    fFlags*: ULONG
    clSize*: ULONG
    pRecInfo*: ptr LPRECORDINFO
    pRecord*: ptr int8
  # wireBRECORD* = ptr wireBRECORD
  SAFEARR_BRECORD* {.final, pure.} = object
    Size*: ULONG
    aRecord*: ptr wireBRECORD
  SAFEARR_HAVEIID* {.final, pure.} = object
    Size*: ULONG
    apUnknown*: ptr ptr IUnknown
    iid*: IID
  SAFEARRAYUNION_u* {.final, union, pure.} = object
    BstrStr*: SAFEARR_BSTR
    UnknownStr*: SAFEARR_UNKNOWN
    DispatchStr*: SAFEARR_DISPATCH
    VariantStr*: SAFEARR_VARIANT
    RecordStr*: SAFEARR_BRECORD
    HaveIidStr*: SAFEARR_HAVEIID
    ByteStr*: BYTE_SIZEDARR
    WordStr*: WORD_SIZEDARR
    LongStr*: DWORD_SIZEDARR
    HyperStr*: HYPER_SIZEDARR
  SAFEARRAYUNION* {.final, pure.} = object
    sfType*: ULONG
    u*: SAFEARRAYUNION_u
  wireSAFEARRAY* {.final, pure.} = object
    cDims*: USHORT
    fFeatures*: USHORT
    cbElements*: ULONG
    cLocks*: ULONG
    uArrayStructs*: SAFEARRAYUNION
    rgsabound*: array[1, SAFEARRAYBOUND]
  # wireSAFEARRAY* = ptr _wireSAFEARRAY
  wirePSAFEARRAY* = ptr wireSAFEARRAY
  SAFEARRAY* {.final, pure.} = object
    cDims*: USHORT
    fFeatures*: USHORT
    cbElements*: ULONG
    cLocks*: ULONG
    pvData*: PVOID
    rgsabound*: array[1, SAFEARRAYBOUND]
  LPSAFEARRAY* = ptr SAFEARRAY
  VARIANT_UNION1_STRUCT1_UNION1_STRUCT1* {.final, pure.} = object
    pvRecord*: PVOID
    pRecInfo*: IRecordInfo
  VARIANT_UNION1_STRUCT1_UNION1* {.final, union, pure.} = object
    lVal*: int32
    llVal*: LONGLONG
    bVal*: uint8
    iVal*: int16
    fltVal*: float32
    dblVal*: float64
    boolVal*: VARIANT_BOOL
    scode*: SCODE
    cyVal*: CY
    date*: DATE
    bstrVal*: BSTR
    punkVal*: ptr IUnknown
    pdispVal*: ptr IDispatch
    parray*: ptr SAFEARRAY
    pbVal*: ptr uint8
    piVal*: ptr int16
    plVal*: ptr int32
    pfltVal*: ptr float32
    pdblVal*: ptr float64
    pboolVal*: ptr VARIANT_BOOL
    pbool*: ptr VARIANT_BOOL
    pscode*: ptr SCODE
    pcyVal*: ptr CY
    pdate*: ptr DATE
    pbstrVal*: ptr BSTR
    ppunkVal*: ptr ptr IUnknown
    ppdispVal*: ptr ptr IDispatch
    pparray*: ptr ptr SAFEARRAY
    pvarVal*: ptr VARIANT
    byref*: pointer
    cVal*: CHAR
    uiVal*: USHORT
    ulVal*: ULONG
    ullVal*: ULONGLONG
    intVal*: INT
    uintVal*: UINT
    pdecVal*: ptr DECIMAL
    pcVal*: ptr CHAR
    puiVal*: ptr USHORT
    pulVal*: ptr ULONG
    pintVal*: ptr INT
    puintVal*: ptr UINT
    s1*: VARIANT_UNION1_STRUCT1_UNION1_STRUCT1
  VARIANT_UNION1_STRUCT1* {.final, pure.} = object
    vt*: VARTYPE
    wReserved1*: WORD
    wReserved2*: WORD
    wReserved3*: WORD
    u1*: VARIANT_UNION1_STRUCT1_UNION1
  VARIANT_UNION1* {.final, union, pure.} = object
    s1*: VARIANT_UNION1_STRUCT1
    decVal*: DECIMAL
  VARIANT* {.final, pure.} = object
    u1*: VARIANT_UNION1
  LPVARIANT* = ptr VARIANT
  VARIANTARG* = VARIANT
  LPVARIANTARG* = ptr VARIANT
  wireVARIANT_UNION1* {.final, union, pure.} = object
    lVal*: LONG
    llVal*: LONGLONG
    bVal*: BYTE
    iVal*: SHORT
    fltVal*: FLOAT
    dblVal*: DOUBLE
    boolVal*: VARIANT_BOOL
    scode*: SCODE
    cyVal*: CY
    date*: DATE
    bstrVal*: wireBSTR
    punkVal*: ptr IUnknown
    pdispVal*: LPDISPATCH
    parray*: wirePSAFEARRAY
    brecVal*: wireBRECORD
    pbVal*: ptr BYTE
    piVal*: ptr SHORT
    plVal*: ptr LONG
    pfltVal*: ptr FLOAT
    pdblVal*: ptr DOUBLE
    pboolVal*: ptr VARIANT_BOOL
    pscode*: ptr SCODE
    pcyVal*: ptr CY
    pdate*: ptr DATE
    pbstrVal*: ptr wireBSTR
    ppunkVal*: ptr ptr IUnknown
    ppdispVal*: ptr LPDISPATCH
    pparray*: ptr wirePSAFEARRAY
    pvarVal*: ptr wireVARIANT
    cVal*: CHAR
    uiVal*: USHORT
    ulVal*: ULONG
    ullVal*: ULONGLONG
    intVal*: INT
    uintVal*: UINT
    decVal*: DECIMAL
    pdecVal*: ptr DECIMAL
    pcVal*: ptr CHAR
    puiVal*: ptr USHORT
    pulVal*: ptr ULONG
    pintVal*: ptr INT
    puintVal*: ptr UINT
  wireVARIANT* {.final, pure.} = object
    clSize*: DWORD
    rpcReserved*: DWORD
    vt*: USHORT
    wReserved1*: USHORT
    wReserved2*: USHORT
    wReserved3*: USHORT
    u1*: wireVARIANT_UNION1
  # wireVARIANT* = ptr _wireVARIANT
  DISPID* = LONG
  MEMBERID* = DISPID
  HREFTYPE* = DWORD
  TYPEKIND* = int32
  TYPEDESC_UNION1* {.final, union, pure.} = object
    lptdesc*: ptr TYPEDESC
    lpadesc*: ptr ARRAYDESC
    hreftype*: HREFTYPE
  TYPEDESC* {.final, pure.} = object
    u1*: TYPEDESC_UNION1
    vt*: VARTYPE
  ARRAYDESC* {.final, pure.} = object
    tdescElem*: TYPEDESC
    cDims*: USHORT
    rgbounds*: array[1, SAFEARRAYBOUND]
  PARAMDESCEX* {.final, pure.} = object
    cBytes*: ULONG
    varDefaultValue*: VARIANTARG
  LPPARAMDESCEX* = ptr PARAMDESCEX
  PARAMDESC* {.final, pure.} = object
    pparamdescex*: LPPARAMDESCEX
    wParamFlags*: USHORT
  LPPARAMDESC* = ptr PARAMDESC
  IDLDESC* {.final, pure.} = object
    dwReserved*: ULONG
    wIDLFlags*: USHORT
  LPIDLDESC* = ptr IDLDESC
  ELEMDESC_UNION1* {.final, union, pure.} = object
    idldesc*: IDLDESC
    paramdesc*: PARAMDESC
  ELEMDESC* {.final, pure.} = object
    tdesc*: TYPEDESC
    u1*: ELEMDESC_UNION1
  LPELEMDESC* = ptr ELEMDESC
  TYPEATTR* {.final, pure.} = object
    guid*: GUID
    lcid*: LCID
    dwReserved*: DWORD
    memidConstructor*: MEMBERID
    memidDestructor*: MEMBERID
    lpstrSchema*: LPOLESTR
    cbSizeInstance*: ULONG
    typekind*: TYPEKIND
    cFuncs*: WORD
    cVars*: WORD
    cImplTypes*: WORD
    cbSizeVft*: WORD
    cbAlignment*: WORD
    wTypeFlags*: WORD
    wMajorVerNum*: WORD
    wMinorVerNum*: WORD
    tdescAlias*: TYPEDESC
    idldescType*: IDLDESC
  LPTYPEATTR* = ptr TYPEATTR
  DISPPARAMS* {.final, pure.} = object
    rgvarg*: ptr VARIANTARG
    rgdispidNamedArgs*: ptr DISPID
    cArgs*: UINT
    cNamedArgs*: UINT
  EXCEPINFO* {.final, pure.} = object
    wCode*: WORD
    wReserved*: WORD
    bstrSource*: BSTR
    bstrDescription*: BSTR
    bstrHelpFile*: BSTR
    dwHelpContext*: DWORD
    pvReserved*: PVOID
    pfnDeferredFillIn*: proc(P1: ptr EXCEPINFO): HRESULT {.stdcall.}
    scode*: SCODE
  LPEXCEPINFO* = ptr EXCEPINFO
  CALLCONV* = int32
  FUNCKIND* = int32
  INVOKEKIND* = int32
  FUNCDESC* {.final, pure.} = object
    memid*: MEMBERID
    lprgscode*: ptr SCODE
    lprgelemdescParam*: ptr ELEMDESC
    funckind*: FUNCKIND
    invkind*: INVOKEKIND
    callconv*: CALLCONV
    cParams*: SHORT
    cParamsOpt*: SHORT
    oVft*: SHORT
    cScodes*: SHORT
    elemdescFunc*: ELEMDESC
    wFuncFlags*: WORD
  LPFUNCDESC* = ptr FUNCDESC
  VARKIND* = int32
  VARDESC_UNION1* {.final, union, pure.} = object
    oInst*: ULONG
    lpvarValue*: ptr VARIANT
  VARDESC* {.final, pure.} = object
    memid*: MEMBERID
    lpstrSchema*: LPOLESTR
    u1*: VARDESC_UNION1
    elemdescVar*: ELEMDESC
    wVarFlags*: WORD
    varkind*: VARKIND
  LPVARDESC* = ptr VARDESC
  CLEANLOCALSTORAGE* {.final, pure.} = object
    pInterface*: ptr IUnknown
    pStorage*: PVOID
    flags*: DWORD
  CUSTDATAITEM* {.final, pure.} = object
    guid*: GUID
    varValue*: VARIANTARG
  LPCUSTDATAITEM* = ptr CUSTDATAITEM
  CUSTDATA* {.final, pure.} = object
    cCustData*: DWORD
    prgCustData*: LPCUSTDATAITEM
  LPCUSTDATA* = ptr CUSTDATA
  DESCKIND* = int32
  BINDPTR* {.final, union, pure.} = object
    lpfuncdesc*: LPFUNCDESC
    lpvardesc*: LPVARDESC
    lptcomp*: LPTYPECOMP
  LPBINDPTR* = ptr BINDPTR
  IDispatch* {.pure.} = object
    lpVtbl*: ptr IDispatchVtbl
  IDispatchVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetTypeInfoCount*: proc(self: ptr IDispatch, P1: ptr UINT): HRESULT {.stdcall.}
    GetTypeInfo*: proc(self: ptr IDispatch, P1: UINT, P2: LCID, P3: ptr LPTYPEINFO): HRESULT {.stdcall.}
    GetIDsOfNames*: proc(self: ptr IDispatch, P1: REFIID, P2: ptr LPOLESTR, P3: UINT, P4: LCID, P5: ptr DISPID): HRESULT {.stdcall.}
    Invoke*: proc(self: ptr IDispatch, P1: DISPID, P2: REFIID, P3: LCID, P4: WORD, P5: ptr DISPPARAMS, P6: ptr VARIANT, P7: ptr EXCEPINFO, P8: ptr UINT): HRESULT {.stdcall.}
  LPDISPATCH* = ptr IDispatch
  IEnumVARIANT* {.pure.} = object
    lpVtbl*: ptr IEnumVARIANTVtbl
  IEnumVARIANTVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumVARIANT, P1: ULONG, P2: ptr VARIANT, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumVARIANT, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumVARIANT): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumVARIANT, P1: ptr ptr IEnumVARIANT): HRESULT {.stdcall.}
  LPENUMVARIANT* = ptr IEnumVARIANT
  ITypeComp* {.pure.} = object
    lpVtbl*: ptr ITypeCompVtbl
  ITypeCompVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Bind*: proc(self: ptr ITypeComp, P1: LPOLESTR, P2: ULONG, P3: WORD, P4: ptr LPTYPEINFO, P5: ptr DESCKIND, P6: LPBINDPTR): HRESULT {.stdcall.}
    BindType*: proc(self: ptr ITypeComp, P1: LPOLESTR, P2: ULONG, P3: ptr LPTYPEINFO, P4: ptr LPTYPECOMP): HRESULT {.stdcall.}
  LPTYPECOMP* = ptr ITypeComp
  ITypeInfo* {.pure.} = object
    lpVtbl*: ptr ITypeInfoVtbl
  ITypeInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetTypeAttr*: proc(self: ptr ITypeInfo, P1: ptr LPTYPEATTR): HRESULT {.stdcall.}
    GetTypeComp*: proc(self: ptr ITypeInfo, P1: ptr LPTYPECOMP): HRESULT {.stdcall.}
    GetFuncDesc*: proc(self: ptr ITypeInfo, P1: UINT, P2: ptr LPFUNCDESC): HRESULT {.stdcall.}
    GetVarDesc*: proc(self: ptr ITypeInfo, P1: UINT, P2: ptr LPVARDESC): HRESULT {.stdcall.}
    GetNames*: proc(self: ptr ITypeInfo, P1: MEMBERID, P2: ptr BSTR, P3: UINT, P4: ptr UINT): HRESULT {.stdcall.}
    GetRefTypeOfImplType*: proc(self: ptr ITypeInfo, P1: UINT, P2: ptr HREFTYPE): HRESULT {.stdcall.}
    GetImplTypeFlags*: proc(self: ptr ITypeInfo, P1: UINT, P2: ptr INT): HRESULT {.stdcall.}
    GetIDsOfNames*: proc(self: ptr ITypeInfo, P1: ptr LPOLESTR, P2: UINT, P3: ptr MEMBERID): HRESULT {.stdcall.}
    Invoke*: proc(self: ptr ITypeInfo, P1: PVOID, P2: MEMBERID, P3: WORD, P4: ptr DISPPARAMS, P5: ptr VARIANT, P6: ptr EXCEPINFO, P7: ptr UINT): HRESULT {.stdcall.}
    GetDocumentation*: proc(self: ptr ITypeInfo, P1: MEMBERID, P2: ptr BSTR, P3: ptr BSTR, P4: ptr DWORD, P5: ptr BSTR): HRESULT {.stdcall.}
    GetDllEntry*: proc(self: ptr ITypeInfo, P1: MEMBERID, P2: INVOKEKIND, P3: ptr BSTR, P4: ptr BSTR, P5: ptr WORD): HRESULT {.stdcall.}
    GetRefTypeInfo*: proc(self: ptr ITypeInfo, P1: HREFTYPE, P2: ptr LPTYPEINFO): HRESULT {.stdcall.}
    AddressOfMember*: proc(self: ptr ITypeInfo, P1: MEMBERID, P2: INVOKEKIND, P3: ptr PVOID): HRESULT {.stdcall.}
    CreateInstance*: proc(self: ptr ITypeInfo, P1: LPUNKNOWN, P2: REFIID, P3: ptr PVOID): HRESULT {.stdcall.}
    GetMops*: proc(self: ptr ITypeInfo, P1: MEMBERID, P2: ptr BSTR): HRESULT {.stdcall.}
    GetContainingTypeLib*: proc(self: ptr ITypeInfo, P1: ptr LPTYPELIB, P2: ptr UINT): HRESULT {.stdcall.}
    ReleaseTypeAttr*: proc(self: ptr ITypeInfo, P1: LPTYPEATTR): void {.stdcall.}
    ReleaseFuncDesc*: proc(self: ptr ITypeInfo, P1: LPFUNCDESC): void {.stdcall.}
    ReleaseVarDesc*: proc(self: ptr ITypeInfo, P1: LPVARDESC): void {.stdcall.}
  LPTYPEINFO* = ptr ITypeInfo
  ITypeInfo2* {.pure.} = object
    lpVtbl*: ptr ITypeInfo2Vtbl
  ITypeInfo2Vtbl* {.pure, inheritable.} = object of ITypeInfoVtbl
    GetTypeKind*: proc(self: ptr ITypeInfo2, P1: ptr TYPEKIND): HRESULT {.stdcall.}
    GetTypeFlags*: proc(self: ptr ITypeInfo2, P1: ptr ULONG): HRESULT {.stdcall.}
    GetFuncIndexOfMemId*: proc(self: ptr ITypeInfo2, P1: MEMBERID, P2: INVOKEKIND, P3: ptr UINT): HRESULT {.stdcall.}
    GetVarIndexOfMemId*: proc(self: ptr ITypeInfo2, P1: MEMBERID, P2: ptr UINT): HRESULT {.stdcall.}
    GetCustData*: proc(self: ptr ITypeInfo2, P1: REFGUID, P2: ptr VARIANT): HRESULT {.stdcall.}
    GetFuncCustData*: proc(self: ptr ITypeInfo2, P1: UINT, P2: REFGUID, P3: ptr VARIANT): HRESULT {.stdcall.}
    GetParamCustData*: proc(self: ptr ITypeInfo2, P1: UINT, P2: UINT, P3: REFGUID, P4: ptr VARIANT): HRESULT {.stdcall.}
    GetVarCustData*: proc(self: ptr ITypeInfo2, P1: UINT, P2: REFGUID, P3: ptr VARIANT): HRESULT {.stdcall.}
    GetImplTypeCustData*: proc(self: ptr ITypeInfo2, P1: UINT, P2: REFGUID, P3: ptr VARIANT): HRESULT {.stdcall.}
    GetDocumentation2*: proc(self: ptr ITypeInfo2, P1: MEMBERID, P2: LCID, P3: ptr BSTR, P4: ptr DWORD, P5: ptr BSTR): HRESULT {.stdcall.}
    GetAllCustData*: proc(self: ptr ITypeInfo2, P1: ptr CUSTDATA): HRESULT {.stdcall.}
    GetAllFuncCustData*: proc(self: ptr ITypeInfo2, P1: UINT, P2: ptr CUSTDATA): HRESULT {.stdcall.}
    GetAllParamCustData*: proc(self: ptr ITypeInfo2, P1: UINT, P2: UINT, P3: ptr CUSTDATA): HRESULT {.stdcall.}
    GetAllVarCustData*: proc(self: ptr ITypeInfo2, P1: UINT, P2: ptr CUSTDATA): HRESULT {.stdcall.}
    GetAllImplTypeCustData*: proc(self: ptr ITypeInfo2, P1: UINT, P2: ptr CUSTDATA): HRESULT {.stdcall.}
  LPTYPEINFO2* = ptr ITypeInfo2
  ITypeLib* {.pure.} = object
    lpVtbl*: ptr ITypeLibVtbl
  ITypeLibVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetTypeInfoCount*: proc(self: ptr ITypeLib): UINT {.stdcall.}
    GetTypeInfo*: proc(self: ptr ITypeLib, P1: UINT, P2: ptr ptr ITypeInfo): HRESULT {.stdcall.}
    GetTypeInfoType*: proc(self: ptr ITypeLib, P1: UINT, P2: ptr TYPEKIND): HRESULT {.stdcall.}
    GetTypeInfoOfGuid*: proc(self: ptr ITypeLib, P1: REFGUID, P2: ptr ptr ITypeInfo): HRESULT {.stdcall.}
    GetLibAttr*: proc(self: ptr ITypeLib, P1: ptr ptr TLIBATTR): HRESULT {.stdcall.}
    GetTypeComp*: proc(self: ptr ITypeLib, P1: ptr ITypeComp): HRESULT {.stdcall.}
    GetDocumentation*: proc(self: ptr ITypeLib, P1: INT, P2: ptr BSTR, P3: ptr BSTR, P4: ptr DWORD, P5: ptr BSTR): HRESULT {.stdcall.}
    IsName*: proc(self: ptr ITypeLib, P1: LPOLESTR, P2: ULONG, P3: ptr BOOL): HRESULT {.stdcall.}
    FindName*: proc(self: ptr ITypeLib, P1: LPOLESTR, P2: ULONG, P3: ptr ptr ITypeInfo, P4: ptr MEMBERID, P5: ptr USHORT): HRESULT {.stdcall.}
    ReleaseTLibAttr*: proc(self: ptr ITypeLib, P1: ptr TLIBATTR): void {.stdcall.}
  LPTYPELIB* = ptr ITypeLib
  ITypeLib2* {.pure.} = object
    lpVtbl*: ptr ITypeLib2Vtbl
  ITypeLib2Vtbl* {.pure, inheritable.} = object of ITypeLibVtbl
    GetCustData*: proc(self: ptr ITypeLib2, P1: REFGUID, P2: ptr VARIANT): HRESULT {.stdcall.}
    GetLibStatistics*: proc(self: ptr ITypeLib2, P1: ptr ULONG, P2: ptr ULONG): HRESULT {.stdcall.}
    GetDocumentation2*: proc(self: ptr ITypeLib2, P1: INT, P2: LCID, P3: ptr BSTR, P4: ptr DWORD, P5: ptr BSTR): HRESULT {.stdcall.}
    GetAllCustData*: proc(self: ptr ITypeLib2, P1: ptr CUSTDATA): HRESULT {.stdcall.}
  LPTYPELIB2* = ptr ITypeLib2
  IErrorInfo* {.pure.} = object
    lpVtbl*: ptr IErrorInfoVtbl
  IErrorInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetGUID*: proc(self: ptr IErrorInfo, P1: ptr GUID): HRESULT {.stdcall.}
    GetSource*: proc(self: ptr IErrorInfo, P1: ptr BSTR): HRESULT {.stdcall.}
    GetDescription*: proc(self: ptr IErrorInfo, P1: ptr BSTR): HRESULT {.stdcall.}
    GetHelpFile*: proc(self: ptr IErrorInfo, P1: ptr BSTR): HRESULT {.stdcall.}
    GetHelpContext*: proc(self: ptr IErrorInfo, P1: ptr DWORD): HRESULT {.stdcall.}
  LPERRORINFO* = ptr IErrorInfo
  ICreateErrorInfo* {.pure.} = object
    lpVtbl*: ptr ICreateErrorInfoVtbl
  ICreateErrorInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetGUID*: proc(self: ptr ICreateErrorInfo, P1: REFGUID): HRESULT {.stdcall.}
    SetSource*: proc(self: ptr ICreateErrorInfo, P1: LPOLESTR): HRESULT {.stdcall.}
    SetDescription*: proc(self: ptr ICreateErrorInfo, P1: LPOLESTR): HRESULT {.stdcall.}
    SetHelpFile*: proc(self: ptr ICreateErrorInfo, P1: LPOLESTR): HRESULT {.stdcall.}
    SetHelpContext*: proc(self: ptr ICreateErrorInfo, P1: DWORD): HRESULT {.stdcall.}
  LPCREATEERRORINFO* = ptr ICreateErrorInfo
  ISupportErrorInfo* {.pure.} = object
    lpVtbl*: ptr ISupportErrorInfoVtbl
  ISupportErrorInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    InterfaceSupportsErrorInfo*: proc(self: ptr ISupportErrorInfo, P1: REFIID): HRESULT {.stdcall.}
  LPSUPPORTERRORINFO* = ptr ISupportErrorInfo
  IRecordInfo* {.pure.} = object
    lpVtbl*: ptr IRecordInfoVtbl
  IRecordInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    RecordInit*: proc(self: ptr IRecordInfo, P1: PVOID): HRESULT {.stdcall.}
    RecordClear*: proc(self: ptr IRecordInfo, P1: PVOID): HRESULT {.stdcall.}
    RecordCopy*: proc(self: ptr IRecordInfo, P1: PVOID, P2: PVOID): HRESULT {.stdcall.}
    GetGuid*: proc(self: ptr IRecordInfo, P1: ptr GUID): HRESULT {.stdcall.}
    GetName*: proc(self: ptr IRecordInfo, P1: ptr BSTR): HRESULT {.stdcall.}
    GetSize*: proc(self: ptr IRecordInfo, P1: ptr ULONG): HRESULT {.stdcall.}
    GetTypeInfo*: proc(self: ptr IRecordInfo, P1: ptr ptr ITypeInfo): HRESULT {.stdcall.}
    GetField*: proc(self: ptr IRecordInfo, P1: PVOID, P2: LPCOLESTR, P3: ptr VARIANT): HRESULT {.stdcall.}
    GetFieldNoCopy*: proc(self: ptr IRecordInfo, P1: PVOID, P2: LPCOLESTR, P3: ptr VARIANT, P4: ptr PVOID): HRESULT {.stdcall.}
    PutField*: proc(self: ptr IRecordInfo, P1: ULONG, P2: PVOID, P3: LPCOLESTR, P4: ptr VARIANT): HRESULT {.stdcall.}
    PutFieldNoCopy*: proc(self: ptr IRecordInfo, P1: ULONG, P2: PVOID, P3: LPCOLESTR, P4: ptr VARIANT): HRESULT {.stdcall.}
    GetFieldNames*: proc(self: ptr IRecordInfo, P1: ptr ULONG, P2: ptr BSTR): HRESULT {.stdcall.}
    IsMatchingType*: proc(self: ptr IRecordInfo): BOOL {.stdcall.}
    RecordCreate*: proc(self: ptr IRecordInfo): PVOID {.stdcall.}
    RecordCreateCopy*: proc(self: ptr IRecordInfo, P1: PVOID, P2: ptr PVOID): HRESULT {.stdcall.}
    RecordDestroy*: proc(self: ptr IRecordInfo, P1: PVOID): HRESULT {.stdcall.}
  LPRECORDINFO* = ptr IRecordInfo
  ITypeMarshal* {.pure.} = object
    lpVtbl*: ptr ITypeMarshalVtbl
  ITypeMarshalVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Size*: proc(self: ptr ITypeMarshal, P1: PVOID, P2: DWORD, P3: PVOID, P4: ptr ULONG): HRESULT {.stdcall.}
    Marshal*: proc(self: ptr ITypeMarshal, P1: PVOID, P2: DWORD, P3: PVOID, P4: ULONG, P5: ptr BYTE, P6: ptr ULONG): HRESULT {.stdcall.}
    Unmarshal*: proc(self: ptr ITypeMarshal, P1: PVOID, P2: DWORD, P3: ULONG, P4: ptr BYTE, P5: ptr ULONG): HRESULT {.stdcall.}
    Free*: proc(self: ptr ITypeMarshal, P1: PVOID): HRESULT {.stdcall.}

converter winim_converter_IDispatch*(x: ptr IDispatch): ptr IUnknown = cast[ptr IUnknown](x)
proc GetTypeInfoCount*(self: ptr IDispatch, P1: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetTypeInfoCount(self, P1)
proc GetTypeInfo*(self: ptr IDispatch, P1: UINT, P2: LCID, P3: ptr LPTYPEINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetTypeInfo(self, P1, P2, P3)
proc GetIDsOfNames*(self: ptr IDispatch, P1: REFIID, P2: ptr LPOLESTR, P3: UINT, P4: LCID, P5: ptr DISPID): HRESULT {.inline, discardable.} = self.lpVtbl.GetIDsOfNames(self, P1, P2, P3, P4, P5)
proc Invoke*(self: ptr IDispatch, P1: DISPID, P2: REFIID, P3: LCID, P4: WORD, P5: ptr DISPPARAMS, P6: ptr VARIANT, P7: ptr EXCEPINFO, P8: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.Invoke(self, P1, P2, P3, P4, P5, P6, P7, P8)
converter winim_converter_IEnumVARIANT*(x: ptr IEnumVARIANT): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumVARIANT, P1: ULONG, P2: ptr VARIANT, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumVARIANT, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumVARIANT, P1: ptr ptr IEnumVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_ITypeComp*(x: ptr ITypeComp): ptr IUnknown = cast[ptr IUnknown](x)
proc Bind*(self: ptr ITypeComp, P1: LPOLESTR, P2: ULONG, P3: WORD, P4: ptr LPTYPEINFO, P5: ptr DESCKIND, P6: LPBINDPTR): HRESULT {.inline, discardable.} = self.lpVtbl.Bind(self, P1, P2, P3, P4, P5, P6)
proc BindType*(self: ptr ITypeComp, P1: LPOLESTR, P2: ULONG, P3: ptr LPTYPEINFO, P4: ptr LPTYPECOMP): HRESULT {.inline, discardable.} = self.lpVtbl.BindType(self, P1, P2, P3, P4)
converter winim_converter_ITypeInfo*(x: ptr ITypeInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc GetTypeAttr*(self: ptr ITypeInfo, P1: ptr LPTYPEATTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetTypeAttr(self, P1)
proc GetTypeComp*(self: ptr ITypeInfo, P1: ptr LPTYPECOMP): HRESULT {.inline, discardable.} = self.lpVtbl.GetTypeComp(self, P1)
proc GetFuncDesc*(self: ptr ITypeInfo, P1: UINT, P2: ptr LPFUNCDESC): HRESULT {.inline, discardable.} = self.lpVtbl.GetFuncDesc(self, P1, P2)
proc GetVarDesc*(self: ptr ITypeInfo, P1: UINT, P2: ptr LPVARDESC): HRESULT {.inline, discardable.} = self.lpVtbl.GetVarDesc(self, P1, P2)
proc GetNames*(self: ptr ITypeInfo, P1: MEMBERID, P2: ptr BSTR, P3: UINT, P4: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetNames(self, P1, P2, P3, P4)
proc GetRefTypeOfImplType*(self: ptr ITypeInfo, P1: UINT, P2: ptr HREFTYPE): HRESULT {.inline, discardable.} = self.lpVtbl.GetRefTypeOfImplType(self, P1, P2)
proc GetImplTypeFlags*(self: ptr ITypeInfo, P1: UINT, P2: ptr INT): HRESULT {.inline, discardable.} = self.lpVtbl.GetImplTypeFlags(self, P1, P2)
proc GetIDsOfNames*(self: ptr ITypeInfo, P1: ptr LPOLESTR, P2: UINT, P3: ptr MEMBERID): HRESULT {.inline, discardable.} = self.lpVtbl.GetIDsOfNames(self, P1, P2, P3)
proc Invoke*(self: ptr ITypeInfo, P1: PVOID, P2: MEMBERID, P3: WORD, P4: ptr DISPPARAMS, P5: ptr VARIANT, P6: ptr EXCEPINFO, P7: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.Invoke(self, P1, P2, P3, P4, P5, P6, P7)
proc GetDocumentation*(self: ptr ITypeInfo, P1: MEMBERID, P2: ptr BSTR, P3: ptr BSTR, P4: ptr DWORD, P5: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDocumentation(self, P1, P2, P3, P4, P5)
proc GetDllEntry*(self: ptr ITypeInfo, P1: MEMBERID, P2: INVOKEKIND, P3: ptr BSTR, P4: ptr BSTR, P5: ptr WORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetDllEntry(self, P1, P2, P3, P4, P5)
proc GetRefTypeInfo*(self: ptr ITypeInfo, P1: HREFTYPE, P2: ptr LPTYPEINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetRefTypeInfo(self, P1, P2)
proc AddressOfMember*(self: ptr ITypeInfo, P1: MEMBERID, P2: INVOKEKIND, P3: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.AddressOfMember(self, P1, P2, P3)
proc CreateInstance*(self: ptr ITypeInfo, P1: LPUNKNOWN, P2: REFIID, P3: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.CreateInstance(self, P1, P2, P3)
proc GetMops*(self: ptr ITypeInfo, P1: MEMBERID, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetMops(self, P1, P2)
proc GetContainingTypeLib*(self: ptr ITypeInfo, P1: ptr LPTYPELIB, P2: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetContainingTypeLib(self, P1, P2)
proc ReleaseTypeAttr*(self: ptr ITypeInfo, P1: LPTYPEATTR): void {.inline, discardable.} = self.lpVtbl.ReleaseTypeAttr(self, P1)
proc ReleaseFuncDesc*(self: ptr ITypeInfo, P1: LPFUNCDESC): void {.inline, discardable.} = self.lpVtbl.ReleaseFuncDesc(self, P1)
proc ReleaseVarDesc*(self: ptr ITypeInfo, P1: LPVARDESC): void {.inline, discardable.} = self.lpVtbl.ReleaseVarDesc(self, P1)
converter winim_converter_ITypeInfo2*(x: ptr ITypeInfo2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ITypeInfo2*(x: ptr ITypeInfo2): ptr ITypeInfo = cast[ptr ITypeInfo](x)
proc GetTypeKind*(self: ptr ITypeInfo2, P1: ptr TYPEKIND): HRESULT {.inline, discardable.} = self.lpVtbl.GetTypeKind(self, P1)
proc GetTypeFlags*(self: ptr ITypeInfo2, P1: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetTypeFlags(self, P1)
proc GetFuncIndexOfMemId*(self: ptr ITypeInfo2, P1: MEMBERID, P2: INVOKEKIND, P3: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetFuncIndexOfMemId(self, P1, P2, P3)
proc GetVarIndexOfMemId*(self: ptr ITypeInfo2, P1: MEMBERID, P2: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetVarIndexOfMemId(self, P1, P2)
proc GetCustData*(self: ptr ITypeInfo2, P1: REFGUID, P2: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCustData(self, P1, P2)
proc GetFuncCustData*(self: ptr ITypeInfo2, P1: UINT, P2: REFGUID, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetFuncCustData(self, P1, P2, P3)
proc GetParamCustData*(self: ptr ITypeInfo2, P1: UINT, P2: UINT, P3: REFGUID, P4: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetParamCustData(self, P1, P2, P3, P4)
proc GetVarCustData*(self: ptr ITypeInfo2, P1: UINT, P2: REFGUID, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetVarCustData(self, P1, P2, P3)
proc GetImplTypeCustData*(self: ptr ITypeInfo2, P1: UINT, P2: REFGUID, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetImplTypeCustData(self, P1, P2, P3)
proc GetDocumentation2*(self: ptr ITypeInfo2, P1: MEMBERID, P2: LCID, P3: ptr BSTR, P4: ptr DWORD, P5: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDocumentation2(self, P1, P2, P3, P4, P5)
proc GetAllCustData*(self: ptr ITypeInfo2, P1: ptr CUSTDATA): HRESULT {.inline, discardable.} = self.lpVtbl.GetAllCustData(self, P1)
proc GetAllFuncCustData*(self: ptr ITypeInfo2, P1: UINT, P2: ptr CUSTDATA): HRESULT {.inline, discardable.} = self.lpVtbl.GetAllFuncCustData(self, P1, P2)
proc GetAllParamCustData*(self: ptr ITypeInfo2, P1: UINT, P2: UINT, P3: ptr CUSTDATA): HRESULT {.inline, discardable.} = self.lpVtbl.GetAllParamCustData(self, P1, P2, P3)
proc GetAllVarCustData*(self: ptr ITypeInfo2, P1: UINT, P2: ptr CUSTDATA): HRESULT {.inline, discardable.} = self.lpVtbl.GetAllVarCustData(self, P1, P2)
proc GetAllImplTypeCustData*(self: ptr ITypeInfo2, P1: UINT, P2: ptr CUSTDATA): HRESULT {.inline, discardable.} = self.lpVtbl.GetAllImplTypeCustData(self, P1, P2)
converter winim_converter_ITypeLib*(x: ptr ITypeLib): ptr IUnknown = cast[ptr IUnknown](x)
proc GetTypeInfoCount*(self: ptr ITypeLib): UINT {.inline, discardable.} = self.lpVtbl.GetTypeInfoCount(self)
proc GetTypeInfo*(self: ptr ITypeLib, P1: UINT, P2: ptr ptr ITypeInfo): HRESULT {.inline, discardable.} = self.lpVtbl.GetTypeInfo(self, P1, P2)
proc GetTypeInfoType*(self: ptr ITypeLib, P1: UINT, P2: ptr TYPEKIND): HRESULT {.inline, discardable.} = self.lpVtbl.GetTypeInfoType(self, P1, P2)
proc GetTypeInfoOfGuid*(self: ptr ITypeLib, P1: REFGUID, P2: ptr ptr ITypeInfo): HRESULT {.inline, discardable.} = self.lpVtbl.GetTypeInfoOfGuid(self, P1, P2)
proc GetLibAttr*(self: ptr ITypeLib, P1: ptr ptr TLIBATTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetLibAttr(self, P1)
proc GetTypeComp*(self: ptr ITypeLib, P1: ptr ITypeComp): HRESULT {.inline, discardable.} = self.lpVtbl.GetTypeComp(self, P1)
proc GetDocumentation*(self: ptr ITypeLib, P1: INT, P2: ptr BSTR, P3: ptr BSTR, P4: ptr DWORD, P5: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDocumentation(self, P1, P2, P3, P4, P5)
proc IsName*(self: ptr ITypeLib, P1: LPOLESTR, P2: ULONG, P3: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.IsName(self, P1, P2, P3)
proc FindName*(self: ptr ITypeLib, P1: LPOLESTR, P2: ULONG, P3: ptr ptr ITypeInfo, P4: ptr MEMBERID, P5: ptr USHORT): HRESULT {.inline, discardable.} = self.lpVtbl.FindName(self, P1, P2, P3, P4, P5)
proc ReleaseTLibAttr*(self: ptr ITypeLib, P1: ptr TLIBATTR): void {.inline, discardable.} = self.lpVtbl.ReleaseTLibAttr(self, P1)
converter winim_converter_ITypeLib2*(x: ptr ITypeLib2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ITypeLib2*(x: ptr ITypeLib2): ptr ITypeLib = cast[ptr ITypeLib](x)
proc GetCustData*(self: ptr ITypeLib2, P1: REFGUID, P2: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCustData(self, P1, P2)
proc GetLibStatistics*(self: ptr ITypeLib2, P1: ptr ULONG, P2: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetLibStatistics(self, P1, P2)
proc GetDocumentation2*(self: ptr ITypeLib2, P1: INT, P2: LCID, P3: ptr BSTR, P4: ptr DWORD, P5: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDocumentation2(self, P1, P2, P3, P4, P5)
proc GetAllCustData*(self: ptr ITypeLib2, P1: ptr CUSTDATA): HRESULT {.inline, discardable.} = self.lpVtbl.GetAllCustData(self, P1)
converter winim_converter_IErrorInfo*(x: ptr IErrorInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc GetGUID*(self: ptr IErrorInfo, P1: ptr GUID): HRESULT {.inline, discardable.} = self.lpVtbl.GetGUID(self, P1)
proc GetSource*(self: ptr IErrorInfo, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetSource(self, P1)
proc GetDescription*(self: ptr IErrorInfo, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDescription(self, P1)
proc GetHelpFile*(self: ptr IErrorInfo, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetHelpFile(self, P1)
proc GetHelpContext*(self: ptr IErrorInfo, P1: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetHelpContext(self, P1)
converter winim_converter_ICreateErrorInfo*(x: ptr ICreateErrorInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc SetGUID*(self: ptr ICreateErrorInfo, P1: REFGUID): HRESULT {.inline, discardable.} = self.lpVtbl.SetGUID(self, P1)
proc SetSource*(self: ptr ICreateErrorInfo, P1: LPOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetSource(self, P1)
proc SetDescription*(self: ptr ICreateErrorInfo, P1: LPOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetDescription(self, P1)
proc SetHelpFile*(self: ptr ICreateErrorInfo, P1: LPOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetHelpFile(self, P1)
proc SetHelpContext*(self: ptr ICreateErrorInfo, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetHelpContext(self, P1)
converter winim_converter_ISupportErrorInfo*(x: ptr ISupportErrorInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc InterfaceSupportsErrorInfo*(self: ptr ISupportErrorInfo, P1: REFIID): HRESULT {.inline, discardable.} = self.lpVtbl.InterfaceSupportsErrorInfo(self, P1)
converter winim_converter_IRecordInfo*(x: ptr IRecordInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc RecordInit*(self: ptr IRecordInfo, P1: PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.RecordInit(self, P1)
proc RecordClear*(self: ptr IRecordInfo, P1: PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.RecordClear(self, P1)
proc RecordCopy*(self: ptr IRecordInfo, P1: PVOID, P2: PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.RecordCopy(self, P1, P2)
proc GetGuid*(self: ptr IRecordInfo, P1: ptr GUID): HRESULT {.inline, discardable.} = self.lpVtbl.GetGuid(self, P1)
proc GetName*(self: ptr IRecordInfo, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetName(self, P1)
proc GetSize*(self: ptr IRecordInfo, P1: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetSize(self, P1)
proc GetTypeInfo*(self: ptr IRecordInfo, P1: ptr ptr ITypeInfo): HRESULT {.inline, discardable.} = self.lpVtbl.GetTypeInfo(self, P1)
proc GetField*(self: ptr IRecordInfo, P1: PVOID, P2: LPCOLESTR, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetField(self, P1, P2, P3)
proc GetFieldNoCopy*(self: ptr IRecordInfo, P1: PVOID, P2: LPCOLESTR, P3: ptr VARIANT, P4: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.GetFieldNoCopy(self, P1, P2, P3, P4)
proc PutField*(self: ptr IRecordInfo, P1: ULONG, P2: PVOID, P3: LPCOLESTR, P4: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.PutField(self, P1, P2, P3, P4)
proc PutFieldNoCopy*(self: ptr IRecordInfo, P1: ULONG, P2: PVOID, P3: LPCOLESTR, P4: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.PutFieldNoCopy(self, P1, P2, P3, P4)
proc GetFieldNames*(self: ptr IRecordInfo, P1: ptr ULONG, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetFieldNames(self, P1, P2)
proc IsMatchingType*(self: ptr IRecordInfo): BOOL {.inline, discardable.} = self.lpVtbl.IsMatchingType(self)
proc RecordCreate*(self: ptr IRecordInfo): PVOID {.inline, discardable.} = self.lpVtbl.RecordCreate(self)
proc RecordCreateCopy*(self: ptr IRecordInfo, P1: PVOID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.RecordCreateCopy(self, P1, P2)
proc RecordDestroy*(self: ptr IRecordInfo, P1: PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.RecordDestroy(self, P1)
converter winim_converter_ITypeMarshal*(x: ptr ITypeMarshal): ptr IUnknown = cast[ptr IUnknown](x)
# proc Size*(self: ptr ITypeMarshal, P1: PVOID, P2: DWORD, P3: PVOID, P4: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Size(self, P1, P2, P3, P4)
proc Marshal*(self: ptr ITypeMarshal, P1: PVOID, P2: DWORD, P3: PVOID, P4: ULONG, P5: ptr BYTE, P6: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Marshal(self, P1, P2, P3, P4, P5, P6)
proc Unmarshal*(self: ptr ITypeMarshal, P1: PVOID, P2: DWORD, P3: ULONG, P4: ptr BYTE, P5: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Unmarshal(self, P1, P2, P3, P4, P5)
proc Free*(self: ptr ITypeMarshal, P1: PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.Free(self, P1)

proc `vt=`*(self: var VARIANT, x: VARTYPE) = self.u1.s1.vt = x
proc vt*(self: VARIANT): VARTYPE = self.u1.s1.vt
proc `wReserved1=`*(self: var VARIANT, x: WORD) = self.u1.s1.wReserved1 = x
proc wReserved1*(self: VARIANT): WORD = self.u1.s1.wReserved1
proc `wReserved2=`*(self: var VARIANT, x: WORD) = self.u1.s1.wReserved2 = x
proc wReserved2*(self: VARIANT): WORD = self.u1.s1.wReserved2
proc `wReserved3=`*(self: var VARIANT, x: WORD) = self.u1.s1.wReserved3 = x
proc wReserved3*(self: VARIANT): WORD = self.u1.s1.wReserved3
proc `lVal=`*(self: var VARIANT, x: int32) = self.u1.s1.u1.lVal = x
proc lVal*(self: VARIANT): int32 = self.u1.s1.u1.lVal
proc `llVal=`*(self: var VARIANT, x: LONGLONG) = self.u1.s1.u1.llVal = x
proc llVal*(self: VARIANT): LONGLONG = self.u1.s1.u1.llVal
proc `bVal=`*(self: var VARIANT, x: uint8) = self.u1.s1.u1.bVal = x
proc bVal*(self: VARIANT): uint8 = self.u1.s1.u1.bVal
proc `iVal=`*(self: var VARIANT, x: int16) = self.u1.s1.u1.iVal = x
proc iVal*(self: VARIANT): int16 = self.u1.s1.u1.iVal
proc `fltVal=`*(self: var VARIANT, x: float32) = self.u1.s1.u1.fltVal = x
proc fltVal*(self: VARIANT): float32 = self.u1.s1.u1.fltVal
proc `dblVal=`*(self: var VARIANT, x: float64) = self.u1.s1.u1.dblVal = x
proc dblVal*(self: VARIANT): float64 = self.u1.s1.u1.dblVal
proc `boolVal=`*(self: var VARIANT, x: VARIANT_BOOL) = self.u1.s1.u1.boolVal = x
proc boolVal*(self: VARIANT): VARIANT_BOOL = self.u1.s1.u1.boolVal
proc `scode=`*(self: var VARIANT, x: SCODE) = self.u1.s1.u1.scode = x
proc scode*(self: VARIANT): SCODE = self.u1.s1.u1.scode
proc `cyVal=`*(self: var VARIANT, x: CY) = self.u1.s1.u1.cyVal = x
proc cyVal*(self: VARIANT): CY = self.u1.s1.u1.cyVal
proc `date=`*(self: var VARIANT, x: DATE) = self.u1.s1.u1.date = x
proc date*(self: VARIANT): DATE = self.u1.s1.u1.date
proc `bstrVal=`*(self: var VARIANT, x: BSTR) = self.u1.s1.u1.bstrVal = x
proc bstrVal*(self: VARIANT): BSTR = self.u1.s1.u1.bstrVal
proc `punkVal=`*(self: var VARIANT, x: ptr IUnknown) = self.u1.s1.u1.punkVal = x
proc punkVal*(self: VARIANT): ptr IUnknown = self.u1.s1.u1.punkVal
proc `pdispVal=`*(self: var VARIANT, x: ptr IDispatch) = self.u1.s1.u1.pdispVal = x
proc pdispVal*(self: VARIANT): ptr IDispatch = self.u1.s1.u1.pdispVal
proc `parray=`*(self: var VARIANT, x: ptr SAFEARRAY) = self.u1.s1.u1.parray = x
proc parray*(self: VARIANT): ptr SAFEARRAY = self.u1.s1.u1.parray
proc `pbVal=`*(self: var VARIANT, x: ptr uint8) = self.u1.s1.u1.pbVal = x
proc pbVal*(self: VARIANT): ptr uint8 = self.u1.s1.u1.pbVal
proc `piVal=`*(self: var VARIANT, x: ptr int16) = self.u1.s1.u1.piVal = x
proc piVal*(self: VARIANT): ptr int16 = self.u1.s1.u1.piVal
proc `plVal=`*(self: var VARIANT, x: ptr int32) = self.u1.s1.u1.plVal = x
proc plVal*(self: VARIANT): ptr int32 = self.u1.s1.u1.plVal
proc `pfltVal=`*(self: var VARIANT, x: ptr float32) = self.u1.s1.u1.pfltVal = x
proc pfltVal*(self: VARIANT): ptr float32 = self.u1.s1.u1.pfltVal
proc `pdblVal=`*(self: var VARIANT, x: ptr float64) = self.u1.s1.u1.pdblVal = x
proc pdblVal*(self: VARIANT): ptr float64 = self.u1.s1.u1.pdblVal
proc `pboolVal=`*(self: var VARIANT, x: ptr VARIANT_BOOL) = self.u1.s1.u1.pboolVal = x
proc pboolVal*(self: VARIANT): ptr VARIANT_BOOL = self.u1.s1.u1.pboolVal
proc `pbool=`*(self: var VARIANT, x: ptr VARIANT_BOOL) = self.u1.s1.u1.pbool = x
proc pbool*(self: VARIANT): ptr VARIANT_BOOL = self.u1.s1.u1.pbool
proc `pscode=`*(self: var VARIANT, x: ptr SCODE) = self.u1.s1.u1.pscode = x
proc pscode*(self: VARIANT): ptr SCODE = self.u1.s1.u1.pscode
proc `pcyVal=`*(self: var VARIANT, x: ptr CY) = self.u1.s1.u1.pcyVal = x
proc pcyVal*(self: VARIANT): ptr CY = self.u1.s1.u1.pcyVal
proc `pdate=`*(self: var VARIANT, x: ptr DATE) = self.u1.s1.u1.pdate = x
proc pdate*(self: VARIANT): ptr DATE = self.u1.s1.u1.pdate
proc `pbstrVal=`*(self: var VARIANT, x: ptr BSTR) = self.u1.s1.u1.pbstrVal = x
proc pbstrVal*(self: VARIANT): ptr BSTR = self.u1.s1.u1.pbstrVal
proc `ppunkVal=`*(self: var VARIANT, x: ptr ptr IUnknown) = self.u1.s1.u1.ppunkVal = x
proc ppunkVal*(self: VARIANT): ptr ptr IUnknown = self.u1.s1.u1.ppunkVal
proc `ppdispVal=`*(self: var VARIANT, x: ptr ptr IDispatch) = self.u1.s1.u1.ppdispVal = x
proc ppdispVal*(self: VARIANT): ptr ptr IDispatch = self.u1.s1.u1.ppdispVal
proc `pparray=`*(self: var VARIANT, x: ptr ptr SAFEARRAY) = self.u1.s1.u1.pparray = x
proc pparray*(self: VARIANT): ptr ptr SAFEARRAY = self.u1.s1.u1.pparray
proc `pvarVal=`*(self: var VARIANT, x: ptr VARIANT) = self.u1.s1.u1.pvarVal = x
proc pvarVal*(self: VARIANT): ptr VARIANT = self.u1.s1.u1.pvarVal
proc `byref=`*(self: var VARIANT, x: pointer) = self.u1.s1.u1.byref = x
proc byref*(self: VARIANT): pointer = self.u1.s1.u1.byref
proc `cVal=`*(self: var VARIANT, x: CHAR) = self.u1.s1.u1.cVal = x
proc cVal*(self: VARIANT): CHAR = self.u1.s1.u1.cVal
proc `uiVal=`*(self: var VARIANT, x: USHORT) = self.u1.s1.u1.uiVal = x
proc uiVal*(self: VARIANT): USHORT = self.u1.s1.u1.uiVal
proc `ulVal=`*(self: var VARIANT, x: ULONG) = self.u1.s1.u1.ulVal = x
proc ulVal*(self: VARIANT): ULONG = self.u1.s1.u1.ulVal
proc `ullVal=`*(self: var VARIANT, x: ULONGLONG) = self.u1.s1.u1.ullVal = x
proc ullVal*(self: VARIANT): ULONGLONG = self.u1.s1.u1.ullVal
proc `intVal=`*(self: var VARIANT, x: INT) = self.u1.s1.u1.intVal = x
proc intVal*(self: VARIANT): INT = self.u1.s1.u1.intVal
proc `uintVal=`*(self: var VARIANT, x: UINT) = self.u1.s1.u1.uintVal = x
proc uintVal*(self: VARIANT): UINT = self.u1.s1.u1.uintVal
proc `pdecVal=`*(self: var VARIANT, x: ptr DECIMAL) = self.u1.s1.u1.pdecVal = x
proc pdecVal*(self: VARIANT): ptr DECIMAL = self.u1.s1.u1.pdecVal
proc `pcVal=`*(self: var VARIANT, x: ptr CHAR) = self.u1.s1.u1.pcVal = x
proc pcVal*(self: VARIANT): ptr CHAR = self.u1.s1.u1.pcVal
proc `puiVal=`*(self: var VARIANT, x: ptr USHORT) = self.u1.s1.u1.puiVal = x
proc puiVal*(self: VARIANT): ptr USHORT = self.u1.s1.u1.puiVal
proc `pulVal=`*(self: var VARIANT, x: ptr ULONG) = self.u1.s1.u1.pulVal = x
proc pulVal*(self: VARIANT): ptr ULONG = self.u1.s1.u1.pulVal
proc `pintVal=`*(self: var VARIANT, x: ptr INT) = self.u1.s1.u1.pintVal = x
proc pintVal*(self: VARIANT): ptr INT = self.u1.s1.u1.pintVal
proc `puintVal=`*(self: var VARIANT, x: ptr UINT) = self.u1.s1.u1.puintVal = x
proc puintVal*(self: VARIANT): ptr UINT = self.u1.s1.u1.puintVal
proc `pvRecord=`*(self: var VARIANT, x: PVOID) = self.u1.s1.u1.s1.pvRecord = x
proc pvRecord*(self: VARIANT): PVOID = self.u1.s1.u1.s1.pvRecord
proc `pRecInfo=`*(self: var VARIANT, x: IRecordInfo) = self.u1.s1.u1.s1.pRecInfo = x
proc pRecInfo*(self: VARIANT): IRecordInfo = self.u1.s1.u1.s1.pRecInfo
proc `decVal=`*(self: var VARIANT, x: DECIMAL) = self.u1.decVal = x
proc decVal*(self: VARIANT): DECIMAL = self.u1.decVal
proc `lVal=`*(self: var wireVARIANT, x: LONG) = self.u1.lVal = x
proc lVal*(self: wireVARIANT): LONG = self.u1.lVal
proc `llVal=`*(self: var wireVARIANT, x: LONGLONG) = self.u1.llVal = x
proc llVal*(self: wireVARIANT): LONGLONG = self.u1.llVal
proc `bVal=`*(self: var wireVARIANT, x: BYTE) = self.u1.bVal = x
proc bVal*(self: wireVARIANT): BYTE = self.u1.bVal
proc `iVal=`*(self: var wireVARIANT, x: SHORT) = self.u1.iVal = x
proc iVal*(self: wireVARIANT): SHORT = self.u1.iVal
proc `fltVal=`*(self: var wireVARIANT, x: FLOAT) = self.u1.fltVal = x
proc fltVal*(self: wireVARIANT): FLOAT = self.u1.fltVal
proc `dblVal=`*(self: var wireVARIANT, x: DOUBLE) = self.u1.dblVal = x
proc dblVal*(self: wireVARIANT): DOUBLE = self.u1.dblVal
proc `boolVal=`*(self: var wireVARIANT, x: VARIANT_BOOL) = self.u1.boolVal = x
proc boolVal*(self: wireVARIANT): VARIANT_BOOL = self.u1.boolVal
proc `scode=`*(self: var wireVARIANT, x: SCODE) = self.u1.scode = x
proc scode*(self: wireVARIANT): SCODE = self.u1.scode
proc `cyVal=`*(self: var wireVARIANT, x: CY) = self.u1.cyVal = x
proc cyVal*(self: wireVARIANT): CY = self.u1.cyVal
proc `date=`*(self: var wireVARIANT, x: DATE) = self.u1.date = x
proc date*(self: wireVARIANT): DATE = self.u1.date
proc `bstrVal=`*(self: var wireVARIANT, x: wireBSTR) = self.u1.bstrVal = x
proc bstrVal*(self: wireVARIANT): wireBSTR = self.u1.bstrVal
proc `punkVal=`*(self: var wireVARIANT, x: ptr IUnknown) = self.u1.punkVal = x
proc punkVal*(self: wireVARIANT): ptr IUnknown = self.u1.punkVal
proc `pdispVal=`*(self: var wireVARIANT, x: LPDISPATCH) = self.u1.pdispVal = x
proc pdispVal*(self: wireVARIANT): LPDISPATCH = self.u1.pdispVal
proc `parray=`*(self: var wireVARIANT, x: wirePSAFEARRAY) = self.u1.parray = x
proc parray*(self: wireVARIANT): wirePSAFEARRAY = self.u1.parray
proc `brecVal=`*(self: var wireVARIANT, x: wireBRECORD) = self.u1.brecVal = x
proc brecVal*(self: wireVARIANT): wireBRECORD = self.u1.brecVal
proc `pbVal=`*(self: var wireVARIANT, x: ptr BYTE) = self.u1.pbVal = x
proc pbVal*(self: wireVARIANT): ptr BYTE = self.u1.pbVal
proc `piVal=`*(self: var wireVARIANT, x: ptr SHORT) = self.u1.piVal = x
proc piVal*(self: wireVARIANT): ptr SHORT = self.u1.piVal
proc `plVal=`*(self: var wireVARIANT, x: ptr LONG) = self.u1.plVal = x
proc plVal*(self: wireVARIANT): ptr LONG = self.u1.plVal
proc `pfltVal=`*(self: var wireVARIANT, x: ptr FLOAT) = self.u1.pfltVal = x
proc pfltVal*(self: wireVARIANT): ptr FLOAT = self.u1.pfltVal
proc `pdblVal=`*(self: var wireVARIANT, x: ptr DOUBLE) = self.u1.pdblVal = x
proc pdblVal*(self: wireVARIANT): ptr DOUBLE = self.u1.pdblVal
proc `pboolVal=`*(self: var wireVARIANT, x: ptr VARIANT_BOOL) = self.u1.pboolVal = x
proc pboolVal*(self: wireVARIANT): ptr VARIANT_BOOL = self.u1.pboolVal
proc `pscode=`*(self: var wireVARIANT, x: ptr SCODE) = self.u1.pscode = x
proc pscode*(self: wireVARIANT): ptr SCODE = self.u1.pscode
proc `pcyVal=`*(self: var wireVARIANT, x: ptr CY) = self.u1.pcyVal = x
proc pcyVal*(self: wireVARIANT): ptr CY = self.u1.pcyVal
proc `pdate=`*(self: var wireVARIANT, x: ptr DATE) = self.u1.pdate = x
proc pdate*(self: wireVARIANT): ptr DATE = self.u1.pdate
proc `pbstrVal=`*(self: var wireVARIANT, x: ptr wireBSTR) = self.u1.pbstrVal = x
proc pbstrVal*(self: wireVARIANT): ptr wireBSTR = self.u1.pbstrVal
proc `ppunkVal=`*(self: var wireVARIANT, x: ptr ptr IUnknown) = self.u1.ppunkVal = x
proc ppunkVal*(self: wireVARIANT): ptr ptr IUnknown = self.u1.ppunkVal
proc `ppdispVal=`*(self: var wireVARIANT, x: ptr LPDISPATCH) = self.u1.ppdispVal = x
proc ppdispVal*(self: wireVARIANT): ptr LPDISPATCH = self.u1.ppdispVal
proc `pparray=`*(self: var wireVARIANT, x: ptr wirePSAFEARRAY) = self.u1.pparray = x
proc pparray*(self: wireVARIANT): ptr wirePSAFEARRAY = self.u1.pparray
proc `pvarVal=`*(self: var wireVARIANT, x: ptr wireVARIANT) = self.u1.pvarVal = x
proc pvarVal*(self: wireVARIANT): ptr wireVARIANT = self.u1.pvarVal
proc `cVal=`*(self: var wireVARIANT, x: CHAR) = self.u1.cVal = x
proc cVal*(self: wireVARIANT): CHAR = self.u1.cVal
proc `uiVal=`*(self: var wireVARIANT, x: USHORT) = self.u1.uiVal = x
proc uiVal*(self: wireVARIANT): USHORT = self.u1.uiVal
proc `ulVal=`*(self: var wireVARIANT, x: ULONG) = self.u1.ulVal = x
proc ulVal*(self: wireVARIANT): ULONG = self.u1.ulVal
proc `ullVal=`*(self: var wireVARIANT, x: ULONGLONG) = self.u1.ullVal = x
proc ullVal*(self: wireVARIANT): ULONGLONG = self.u1.ullVal
proc `intVal=`*(self: var wireVARIANT, x: INT) = self.u1.intVal = x
proc intVal*(self: wireVARIANT): INT = self.u1.intVal
proc `uintVal=`*(self: var wireVARIANT, x: UINT) = self.u1.uintVal = x
proc uintVal*(self: wireVARIANT): UINT = self.u1.uintVal
proc `decVal=`*(self: var wireVARIANT, x: DECIMAL) = self.u1.decVal = x
proc decVal*(self: wireVARIANT): DECIMAL = self.u1.decVal
proc `pdecVal=`*(self: var wireVARIANT, x: ptr DECIMAL) = self.u1.pdecVal = x
proc pdecVal*(self: wireVARIANT): ptr DECIMAL = self.u1.pdecVal
proc `pcVal=`*(self: var wireVARIANT, x: ptr CHAR) = self.u1.pcVal = x
proc pcVal*(self: wireVARIANT): ptr CHAR = self.u1.pcVal
proc `puiVal=`*(self: var wireVARIANT, x: ptr USHORT) = self.u1.puiVal = x
proc puiVal*(self: wireVARIANT): ptr USHORT = self.u1.puiVal
proc `pulVal=`*(self: var wireVARIANT, x: ptr ULONG) = self.u1.pulVal = x
proc pulVal*(self: wireVARIANT): ptr ULONG = self.u1.pulVal
proc `pintVal=`*(self: var wireVARIANT, x: ptr INT) = self.u1.pintVal = x
proc pintVal*(self: wireVARIANT): ptr INT = self.u1.pintVal
proc `puintVal=`*(self: var wireVARIANT, x: ptr UINT) = self.u1.puintVal = x
proc puintVal*(self: wireVARIANT): ptr UINT = self.u1.puintVal
proc `lptdesc=`*(self: var TYPEDESC, x: ptr TYPEDESC) = self.u1.lptdesc = x
proc lptdesc*(self: TYPEDESC): ptr TYPEDESC = self.u1.lptdesc
proc `lpadesc=`*(self: var TYPEDESC, x: ptr ARRAYDESC) = self.u1.lpadesc = x
proc lpadesc*(self: TYPEDESC): ptr ARRAYDESC = self.u1.lpadesc
proc `hreftype=`*(self: var TYPEDESC, x: HREFTYPE) = self.u1.hreftype = x
proc hreftype*(self: TYPEDESC): HREFTYPE = self.u1.hreftype
proc `idldesc=`*(self: var ELEMDESC, x: IDLDESC) = self.u1.idldesc = x
proc idldesc*(self: ELEMDESC): IDLDESC = self.u1.idldesc
proc `paramdesc=`*(self: var ELEMDESC, x: PARAMDESC) = self.u1.paramdesc = x
proc paramdesc*(self: ELEMDESC): PARAMDESC = self.u1.paramdesc
proc `oInst=`*(self: var VARDESC, x: ULONG) = self.u1.oInst = x
proc oInst*(self: VARDESC): ULONG = self.u1.oInst
proc `lpvarValue=`*(self: var VARDESC, x: ptr VARIANT) = self.u1.lpvarValue = x
proc lpvarValue*(self: VARDESC): ptr VARIANT = self.u1.lpvarValue


# shell/prsht.nim

const
  MAXPROPPAGES* = 100
  PSP_DEFAULT* = 0x00000000
  PSP_DLGINDIRECT* = 0x00000001
  PSP_USEHICON* = 0x00000002
  PSP_USEICONID* = 0x00000004
  PSP_USETITLE* = 0x00000008
  PSP_RTLREADING* = 0x00000010
  PSP_HASHELP* = 0x00000020
  PSP_USEREFPARENT* = 0x00000040
  PSP_USECALLBACK* = 0x00000080
  PSP_PREMATURE* = 0x00000400
  PSP_HIDEHEADER* = 0x00000800
  PSP_USEHEADERTITLE* = 0x00001000
  PSP_USEHEADERSUBTITLE* = 0x00002000
  PSPCB_RELEASE* = 1
  PSPCB_CREATE* = 2
  PSH_DEFAULT* = 0x00000000
  PSH_PROPTITLE* = 0x00000001
  PSH_USEHICON* = 0x00000002
  PSH_USEICONID* = 0x00000004
  PSH_PROPSHEETPAGE* = 0x00000008
  PSH_WIZARDHASFINISH* = 0x00000010
  PSH_WIZARD* = 0x00000020
  PSH_USEPSTARTPAGE* = 0x00000040
  PSH_NOAPPLYNOW* = 0x00000080
  PSH_USECALLBACK* = 0x00000100
  PSH_HASHELP* = 0x00000200
  PSH_MODELESS* = 0x00000400
  PSH_RTLREADING* = 0x00000800
  PSH_WIZARDCONTEXTHELP* = 0x00001000
  PSH_WATERMARK* = 0x00008000
  PSH_USEHBMWATERMARK* = 0x00010000
  PSH_USEHPLWATERMARK* = 0x00020000
  PSH_STRETCHWATERMARK* = 0x00040000
  PSH_HEADER* = 0x00080000
  PSH_USEHBMHEADER* = 0x00100000
  PSH_USEPAGELANG* = 0x00200000
  PSH_WIZARD97* = 0x01000000
  PSH_WIZARD_LITE* = 0x00400000
  PSH_NOCONTEXTHELP* = 0x02000000
  PSCB_INITIALIZED* = 1
  PSCB_PRECREATE* = 2
  PSN_FIRST* = -200
  PSN_LAST* = -299
  PSN_SETACTIVE* = -200
  PSN_KILLACTIVE* = -201
  PSN_APPLY* = -202
  PSN_RESET* = -203
  PSN_HELP* = -205
  PSN_WIZBACK* = -206
  PSN_WIZNEXT* = -207
  PSN_WIZFINISH* = -208
  PSN_QUERYCANCEL* = -209
  PSN_GETOBJECT* = -210
  PSN_TRANSLATEACCELERATOR* = -212
  PSN_QUERYINITIALFOCUS* = -213
  PSNRET_NOERROR* = 0
  PSNRET_INVALID* = 1
  PSNRET_INVALID_NOCHANGEPAGE* = 2
  PSNRET_MESSAGEHANDLED* = 3
  ID_PSRESTARTWINDOWS* = 0x2
  ID_PSREBOOTSYSTEM* = ID_PSRESTARTWINDOWS or 0x1
  WIZ_CXDLG* = 276
  WIZ_CYDLG* = 140
  WIZ_CXBMP* = 80
  WIZ_BODYX* = 92
  WIZ_BODYCX* = 184
  PROP_SM_CXDLG* = 212
  PROP_SM_CYDLG* = 188
  PROP_MED_CXDLG* = 227
  PROP_MED_CYDLG* = 215
  PROP_LG_CXDLG* = 252
  PROP_LG_CYDLG* = 218
  PSBTN_BACK* = 0
  PSBTN_NEXT* = 1
  PSBTN_FINISH* = 2
  PSBTN_OK* = 3
  PSBTN_APPLYNOW* = 4
  PSBTN_CANCEL* = 5
  PSBTN_HELP* = 6
  PSBTN_MAX* = 6
  PSWIZB_BACK* = 1
  PSWIZB_NEXT* = 2
  PSWIZB_FINISH* = 4
  PSWIZB_DISABLEDFINISH* = 8
  PSM_SETCURSEL* = WM_USER + 101
  PSM_REMOVEPAGE* = (WM_USER + 101) + 1
  PSM_ADDPAGE* = (WM_USER + 101) + 2
  PSM_CHANGED* = (WM_USER + 101) + 3
  PSM_RESTARTWINDOWS* = (WM_USER + 101) + 4
  PSM_REBOOTSYSTEM* = (WM_USER + 101) + 5
  PSM_CANCELTOCLOSE* = (WM_USER + 101) + 6
  PSM_QUERYSIBLINGS* = (WM_USER + 101) + 7
  PSM_UNCHANGED* = (WM_USER + 101) + 8
  PSM_APPLY* = (WM_USER + 101) + 9
  PSM_SETTITLEA* = (WM_USER + 101) + 10
  PSM_SETWIZBUTTONS* = (WM_USER + 101) + 11
  PSM_PRESSBUTTON* = (WM_USER + 101) + 12
  PSM_SETCURSELID* = (WM_USER + 101) + 13
  PSM_SETFINISHTEXTA* = (WM_USER + 101) + 14
  PSM_GETTABCONTROL* = (WM_USER + 101) + 15
  PSM_ISDIALOGMESSAGE* = (WM_USER + 101) + 16
  PSM_GETCURRENTPAGEHWND* = (WM_USER + 101) + 17
  PSM_INSERTPAGE* = (WM_USER + 101) + 18
  PSM_SETTITLEW* = (WM_USER + 101) + 19
  PSM_SETFINISHTEXTW* = (WM_USER + 101) + 20

type
  LPFNPSPCALLBACKA* = proc (P1: HWND, P2: UINT, P3: LPPROPSHEETPAGEA): UINT {.stdcall.}
  LPFNPSPCALLBACKW* = proc (P1: HWND, P2: UINT, P3: LPPROPSHEETPAGEW): UINT {.stdcall.}
  PFNPROPSHEETCALLBACK* = proc (P1: HWND, P2: UINT, P3: LPARAM): int32 {.stdcall.}
  PROPSHEETPAGEA_UNION2* {.final, union, pure.} = object
    hIcon*: HICON
    pszIcon*: LPCSTR
  PROPSHEETPAGEA_UNION1* {.final, union, pure.} = object
    pszTemplate*: LPCSTR
    pResource*: LPCDLGTEMPLATE
  PROPSHEETPAGEA* {.final, pure.} = object
    dwSize*: DWORD
    dwFlags*: DWORD
    hInstance*: HINSTANCE
    u1*: PROPSHEETPAGEA_UNION1
    u2*: PROPSHEETPAGEA_UNION2
    pszTitle*: LPCSTR
    pfnDlgProc*: DLGPROC
    lParam*: LPARAM
    pfnCallback*: LPFNPSPCALLBACKA
    pcRefParent*: ptr UINT
    pszHeaderTitle*: LPCSTR
    pszHeaderSubTitle*: LPCSTR
  LPPROPSHEETPAGEA* = ptr PROPSHEETPAGEA
  LPCPROPSHEETPAGEA* = ptr PROPSHEETPAGEA
  PROPSHEETPAGEW_UNION2* {.final, union, pure.} = object
    hIcon*: HICON
    pszIcon*: LPCWSTR
  PROPSHEETPAGEW_UNION1* {.final, union, pure.} = object
    pszTemplate*: LPCWSTR
    pResource*: LPCDLGTEMPLATE
  PROPSHEETPAGEW* {.final, pure.} = object
    dwSize*: DWORD
    dwFlags*: DWORD
    hInstance*: HINSTANCE
    u1*: PROPSHEETPAGEW_UNION1
    u2*: PROPSHEETPAGEW_UNION2
    pszTitle*: LPCWSTR
    pfnDlgProc*: DLGPROC
    lParam*: LPARAM
    pfnCallback*: LPFNPSPCALLBACKW
    pcRefParent*: ptr UINT
    pszHeaderTitle*: LPCWSTR
    pszHeaderSubTitle*: LPCWSTR
  LPPROPSHEETPAGEW* = ptr PROPSHEETPAGEW
  LPCPROPSHEETPAGEW* = ptr PROPSHEETPAGEW
  HPROPSHEETPAGE* = HANDLE
  PROPSHEETHEADERA_UNION5* {.final, union, pure.} = object
    hbmHeader*: HBITMAP
    pszbmHeader*: LPCSTR
  PROPSHEETHEADERA_UNION4* {.final, union, pure.} = object
    hbmWatermark*: HBITMAP
    pszbmWatermark*: LPCSTR
  PROPSHEETHEADERA_UNION3* {.final, union, pure.} = object
    ppsp*: LPCPROPSHEETPAGEA
    phpage*: ptr HPROPSHEETPAGE
  PROPSHEETHEADERA_UNION2* {.final, union, pure.} = object
    nStartPage*: UINT
    pStartPage*: LPCSTR
  PROPSHEETHEADERA_UNION1* {.final, union, pure.} = object
    hIcon*: HICON
    pszIcon*: LPCSTR
  PROPSHEETHEADERA* {.final, pure.} = object
    dwSize*: DWORD
    dwFlags*: DWORD
    hwndParent*: HWND
    hInstance*: HINSTANCE
    u1*: PROPSHEETHEADERA_UNION1
    pszCaption*: LPCSTR
    nPages*: UINT
    u2*: PROPSHEETHEADERA_UNION2
    u3*: PROPSHEETHEADERA_UNION3
    pfnCallback*: PFNPROPSHEETCALLBACK
    u4*: PROPSHEETHEADERA_UNION4
    hplWatermark*: HPALETTE
    u5*: PROPSHEETHEADERA_UNION5
  LPPROPSHEETHEADERA* = ptr PROPSHEETHEADERA
  LPCPROPSHEETHEADERA* = ptr PROPSHEETHEADERA
  PROPSHEETHEADERW_UNION5* {.final, union, pure.} = object
    hbmHeader*: HBITMAP
    pszbmHeader*: LPCWSTR
  PROPSHEETHEADERW_UNION4* {.final, union, pure.} = object
    hbmWatermark*: HBITMAP
    pszbmWatermark*: LPCWSTR
  PROPSHEETHEADERW_UNION3* {.final, union, pure.} = object
    ppsp*: LPCPROPSHEETPAGEW
    phpage*: ptr HPROPSHEETPAGE
  PROPSHEETHEADERW_UNION2* {.final, union, pure.} = object
    nStartPage*: UINT
    pStartPage*: LPCWSTR
  PROPSHEETHEADERW_UNION1* {.final, union, pure.} = object
    hIcon*: HICON
    pszIcon*: LPCWSTR
  PROPSHEETHEADERW* {.final, pure.} = object
    dwSize*: DWORD
    dwFlags*: DWORD
    hwndParent*: HWND
    hInstance*: HINSTANCE
    u1*: PROPSHEETHEADERW_UNION1
    pszCaption*: LPCWSTR
    nPages*: UINT
    u2*: PROPSHEETHEADERW_UNION2
    u3*: PROPSHEETHEADERW_UNION3
    pfnCallback*: PFNPROPSHEETCALLBACK
    u4*: PROPSHEETHEADERW_UNION4
    hplWatermark*: HPALETTE
    u5*: PROPSHEETHEADERW_UNION5
  LPPROPSHEETHEADERW* = ptr PROPSHEETHEADERW
  LPCPROPSHEETHEADERW* = ptr PROPSHEETHEADERW
  LPFNADDPROPSHEETPAGE* = proc (P1: HPROPSHEETPAGE, P2: LPARAM): BOOL {.stdcall.}
  LPFNADDPROPSHEETPAGES* = proc (P1: LPVOID, P2: LPFNADDPROPSHEETPAGE, P3: LPARAM): BOOL {.stdcall.}
  PSHNOTIFY* {.final, pure.} = object
    hdr*: NMHDR
    lParam*: LPARAM
  LPPSHNOTIFY* = ptr PSHNOTIFY

proc CreatePropertySheetPageA*(P1: LPCPROPSHEETPAGEA): HPROPSHEETPAGE {.winapi, dynlib: "comctl32", importc.}
proc CreatePropertySheetPageW*(P1: LPCPROPSHEETPAGEW): HPROPSHEETPAGE {.winapi, dynlib: "comctl32", importc.}
proc DestroyPropertySheetPage*(P1: HPROPSHEETPAGE): BOOL {.winapi, dynlib: "comctl32", importc.}
proc PropertySheetA*(P1: LPCPROPSHEETHEADERA): int32 {.winapi, dynlib: "comctl32", importc.}
proc PropertySheetW*(P1: LPCPROPSHEETHEADERW): int32 {.winapi, dynlib: "comctl32", importc.}

when not defined(winansi):
  const
    PSM_SETTITLE* = PSM_SETTITLEW
    PSM_SETFINISHTEXT* = PSM_SETFINISHTEXTW

  type
    LPFNPSPCALLBACK* = LPFNPSPCALLBACKW
    PROPSHEETPAGE* = PROPSHEETPAGEW
    LPPROPSHEETPAGE* = LPPROPSHEETPAGEW
    LPCPROPSHEETPAGE* = LPCPROPSHEETPAGEW
    PROPSHEETHEADER* = PROPSHEETHEADERW
    LPPROPSHEETHEADER* = LPPROPSHEETHEADERW
    LPCPROPSHEETHEADER* = LPCPROPSHEETHEADERW

  proc CreatePropertySheetPage*(P1: LPCPROPSHEETPAGEW): HPROPSHEETPAGE {.winapi, dynlib: "comctl32", importc: "CreatePropertySheetPageW".}
  proc PropertySheet*(P1: LPCPROPSHEETHEADERW): int32 {.winapi, dynlib: "comctl32", importc: "PropertySheetW".}

else:
  const
    PSM_SETTITLE* = PSM_SETTITLEA
    PSM_SETFINISHTEXT* = PSM_SETFINISHTEXTA

  type
    LPFNPSPCALLBACK* = LPFNPSPCALLBACKA
    PROPSHEETPAGE* = PROPSHEETPAGEA
    LPPROPSHEETPAGE* = LPPROPSHEETPAGEA
    LPCPROPSHEETPAGE* = LPCPROPSHEETPAGEA
    PROPSHEETHEADER* = PROPSHEETHEADERA
    LPPROPSHEETHEADER* = LPPROPSHEETHEADERA
    LPCPROPSHEETHEADER* = LPCPROPSHEETHEADERA

  proc CreatePropertySheetPage*(P1: LPCPROPSHEETPAGEA): HPROPSHEETPAGE {.winapi, dynlib: "comctl32", importc: "CreatePropertySheetPageA".}
  proc PropertySheet*(P1: LPCPROPSHEETHEADERA): int32 {.winapi, dynlib: "comctl32", importc: "PropertySheetA".}

proc PropSheet_SetCurSel*(hPropSheetDlg: HWND, hpage: HPROPSHEETPAGE, index: HPROPSHEETPAGE): BOOL =
  cast[BOOL](SendMessage(hPropSheetDlg, PSM_SETCURSEL, index.WPARAM, hpage.LPARAM))

proc PropSheet_RemovePage*(hPropSheetDlg: HWND, index: int32, hpage: HPROPSHEETPAGE): VOID =
  discard SendMessage(hPropSheetDlg, PSM_REMOVEPAGE, index.WPARAM, hpage.LPARAM)

proc PropSheet_AddPage*(hPropSheetDlg: HWND, hpage: HPROPSHEETPAGE): BOOL =
  cast[BOOL](SendMessage(hPropSheetDlg, PSM_ADDPAGE, 0, hpage.LPARAM))

proc PropSheet_Changed*(hPropSheetDlg: HWND, hwndPage: HWND): VOID =
  discard SendMessage(hPropSheetDlg, PSM_CHANGED, hwndPage.WPARAM, 0)

proc PropSheet_RestartWindows*(hPropSheetDlg: HWND): VOID =
  discard SendMessage(hPropSheetDlg, PSM_RESTARTWINDOWS, 0, 0)

proc PropSheet_RebootSystem*(hPropSheetDlg: HWND): VOID =
  discard SendMessage(hPropSheetDlg, PSM_REBOOTSYSTEM, 0, 0)

proc PropSheet_CancelToClose*(hPropSheetDlg: HWND): VOID =
  discard SendMessage(hPropSheetDlg, PSM_CANCELTOCLOSE, 0, 0)

proc PropSheet_QuerySiblings*(hPropSheetDlg: HWND, param1: WPARAM, param2: LPARAM): int32 =
  cast[int32](SendMessage(hPropSheetDlg, PSM_QUERYSIBLINGS, param1, param2))

proc PropSheet_UnChanged*(hPropSheetDlg: HWND, hwndPage: HWND): VOID =
  discard SendMessage(hPropSheetDlg, PSM_UNCHANGED, hwndPage.WPARAM, 0)

proc PropSheet_Apply*(hPropSheetDlg: HWND): BOOL =
  cast[BOOL](SendMessage(hPropSheetDlg, PSM_APPLY, 0, 0).BOOL)

proc PropSheet_SetTitle*(hPropSheetDlg: HWND, wStyle: DWORD, lpszText: LPTSTR): VOID =
  discard SendMessage(hPropSheetDlg, PSM_SETTITLE, wStyle, cast[LPARAM](lpszText))

proc PropSheet_SetWizButtons*(hPropSheetDlg: HWND, dwFlags: DWORD): VOID =
  discard PostMessage(hPropSheetDlg, PSM_SETWIZBUTTONS, 0, dwFlags.LPARAM)

proc PropSheet_PressButton*(hPropSheetDlg: HWND, iButton: int32): BOOL =
  cast[BOOL](SendMessage(hPropSheetDlg, PSM_PRESSBUTTON, cast[WPARAM](iButton), 0))

proc PropSheet_SetCurSelByID*(hPropSheetDlg: HWND, id: int32): BOOL =
  cast[BOOL](SendMessage(hPropSheetDlg, PSM_SETCURSELID, 0, id))

proc PropSheet_SetFinishText*(hPropSheetDlg: HWND, lpszText: LPTSTR): VOID =
  discard SendMessage(hPropSheetDlg, PSM_SETFINISHTEXT, 0, cast[LPARAM](lpszText))

proc PropSheet_GetTabControl*(hPropSheetDlg: HWND): HWND =
  cast[HWND](SendMessage(hPropSheetDlg, PSM_GETTABCONTROL, 0, 0))

proc PropSheet_IsDialogMessage*(hDlg: HWND, pMsg: LPMSG): BOOL =
  cast[BOOL](SendMessage(hDlg, PSM_ISDIALOGMESSAGE, 0, cast[LPARAM](pMsg)))

proc PropSheet_GetCurrentPageHwnd*(hDlg: HWND): HWND =
  cast[HWND](SendMessage(hDlg, PSM_GETCURRENTPAGEHWND, 0, 0))

proc PropSheet_InsertPage*(hPropSheetDlg: HWND, wInsertAfter: WPARAM, hpage: HPROPSHEETPAGE): BOOL =
  cast[BOOL](SendMessage(hPropSheetDlg, PSM_INSERTPAGE, wInsertAfter, hpage.LPARAM))

proc `pszTemplate=`*(self: var PROPSHEETPAGEA, x: LPCSTR) = self.u1.pszTemplate = x
proc pszTemplate*(self: PROPSHEETPAGEA): LPCSTR = self.u1.pszTemplate
proc `pResource=`*(self: var PROPSHEETPAGEA, x: LPCDLGTEMPLATE) = self.u1.pResource = x
proc pResource*(self: PROPSHEETPAGEA): LPCDLGTEMPLATE = self.u1.pResource
proc `hIcon=`*(self: var PROPSHEETPAGEA, x: HICON) = self.u2.hIcon = x
proc hIcon*(self: PROPSHEETPAGEA): HICON = self.u2.hIcon
proc `pszIcon=`*(self: var PROPSHEETPAGEA, x: LPCSTR) = self.u2.pszIcon = x
proc pszIcon*(self: PROPSHEETPAGEA): LPCSTR = self.u2.pszIcon
proc `pszTemplate=`*(self: var PROPSHEETPAGEW, x: LPCWSTR) = self.u1.pszTemplate = x
proc pszTemplate*(self: PROPSHEETPAGEW): LPCWSTR = self.u1.pszTemplate
proc `pResource=`*(self: var PROPSHEETPAGEW, x: LPCDLGTEMPLATE) = self.u1.pResource = x
proc pResource*(self: PROPSHEETPAGEW): LPCDLGTEMPLATE = self.u1.pResource
proc `hIcon=`*(self: var PROPSHEETPAGEW, x: HICON) = self.u2.hIcon = x
proc hIcon*(self: PROPSHEETPAGEW): HICON = self.u2.hIcon
proc `pszIcon=`*(self: var PROPSHEETPAGEW, x: LPCWSTR) = self.u2.pszIcon = x
proc pszIcon*(self: PROPSHEETPAGEW): LPCWSTR = self.u2.pszIcon
proc `hIcon=`*(self: var PROPSHEETHEADERA, x: HICON) = self.u1.hIcon = x
proc hIcon*(self: PROPSHEETHEADERA): HICON = self.u1.hIcon
proc `pszIcon=`*(self: var PROPSHEETHEADERA, x: LPCSTR) = self.u1.pszIcon = x
proc pszIcon*(self: PROPSHEETHEADERA): LPCSTR = self.u1.pszIcon
proc `nStartPage=`*(self: var PROPSHEETHEADERA, x: UINT) = self.u2.nStartPage = x
proc nStartPage*(self: PROPSHEETHEADERA): UINT = self.u2.nStartPage
proc `pStartPage=`*(self: var PROPSHEETHEADERA, x: LPCSTR) = self.u2.pStartPage = x
proc pStartPage*(self: PROPSHEETHEADERA): LPCSTR = self.u2.pStartPage
proc `ppsp=`*(self: var PROPSHEETHEADERA, x: LPCPROPSHEETPAGEA) = self.u3.ppsp = x
proc ppsp*(self: PROPSHEETHEADERA): LPCPROPSHEETPAGEA = self.u3.ppsp
proc `phpage=`*(self: var PROPSHEETHEADERA, x: ptr HPROPSHEETPAGE) = self.u3.phpage = x
proc phpage*(self: PROPSHEETHEADERA): ptr HPROPSHEETPAGE = self.u3.phpage
proc `hbmWatermark=`*(self: var PROPSHEETHEADERA, x: HBITMAP) = self.u4.hbmWatermark = x
proc hbmWatermark*(self: PROPSHEETHEADERA): HBITMAP = self.u4.hbmWatermark
proc `pszbmWatermark=`*(self: var PROPSHEETHEADERA, x: LPCSTR) = self.u4.pszbmWatermark = x
proc pszbmWatermark*(self: PROPSHEETHEADERA): LPCSTR = self.u4.pszbmWatermark
proc `hbmHeader=`*(self: var PROPSHEETHEADERA, x: HBITMAP) = self.u5.hbmHeader = x
proc hbmHeader*(self: PROPSHEETHEADERA): HBITMAP = self.u5.hbmHeader
proc `pszbmHeader=`*(self: var PROPSHEETHEADERA, x: LPCSTR) = self.u5.pszbmHeader = x
proc pszbmHeader*(self: PROPSHEETHEADERA): LPCSTR = self.u5.pszbmHeader
proc `hIcon=`*(self: var PROPSHEETHEADERW, x: HICON) = self.u1.hIcon = x
proc hIcon*(self: PROPSHEETHEADERW): HICON = self.u1.hIcon
proc `pszIcon=`*(self: var PROPSHEETHEADERW, x: LPCWSTR) = self.u1.pszIcon = x
proc pszIcon*(self: PROPSHEETHEADERW): LPCWSTR = self.u1.pszIcon
proc `nStartPage=`*(self: var PROPSHEETHEADERW, x: UINT) = self.u2.nStartPage = x
proc nStartPage*(self: PROPSHEETHEADERW): UINT = self.u2.nStartPage
proc `pStartPage=`*(self: var PROPSHEETHEADERW, x: LPCWSTR) = self.u2.pStartPage = x
proc pStartPage*(self: PROPSHEETHEADERW): LPCWSTR = self.u2.pStartPage
proc `ppsp=`*(self: var PROPSHEETHEADERW, x: LPCPROPSHEETPAGEW) = self.u3.ppsp = x
proc ppsp*(self: PROPSHEETHEADERW): LPCPROPSHEETPAGEW = self.u3.ppsp
proc `phpage=`*(self: var PROPSHEETHEADERW, x: ptr HPROPSHEETPAGE) = self.u3.phpage = x
proc phpage*(self: PROPSHEETHEADERW): ptr HPROPSHEETPAGE = self.u3.phpage
proc `hbmWatermark=`*(self: var PROPSHEETHEADERW, x: HBITMAP) = self.u4.hbmWatermark = x
proc hbmWatermark*(self: PROPSHEETHEADERW): HBITMAP = self.u4.hbmWatermark
proc `pszbmWatermark=`*(self: var PROPSHEETHEADERW, x: LPCWSTR) = self.u4.pszbmWatermark = x
proc pszbmWatermark*(self: PROPSHEETHEADERW): LPCWSTR = self.u4.pszbmWatermark
proc `hbmHeader=`*(self: var PROPSHEETHEADERW, x: HBITMAP) = self.u5.hbmHeader = x
proc hbmHeader*(self: PROPSHEETHEADERW): HBITMAP = self.u5.hbmHeader
proc `pszbmHeader=`*(self: var PROPSHEETHEADERW, x: LPCWSTR) = self.u5.pszbmHeader = x
proc pszbmHeader*(self: PROPSHEETHEADERW): LPCWSTR = self.u5.pszbmHeader

# shell/commdlg.nim

const
  LBSELCHSTRING* = "commdlg_LBSelChangedNotify"
  SHAREVISTRING* = "commdlg_ShareViolation"
  FILEOKSTRING* = "commdlg_FileNameOK"
  COLOROKSTRING* = "commdlg_ColorOK"
  SETRGBSTRING* = "commdlg_SetRGBColor"
  HELPMSGSTRING* = "commdlg_help"
  FINDMSGSTRING* = "commdlg_FindReplace"
  CDN_FIRST* = -601
  CDN_LAST* = -699
  CDN_INITDONE* = CDN_FIRST.INT
  CDN_SELCHANGE* = (CDN_FIRST - 1).INT
  CDN_FOLDERCHANGE* = (CDN_FIRST - 2).INT
  CDN_SHAREVIOLATION* = (CDN_FIRST - 3).INT
  CDN_HELP* = (CDN_FIRST - 4).INT
  CDN_FILEOK* = (CDN_FIRST - 5).INT
  CDN_TYPECHANGE* = (CDN_FIRST - 6).INT
  CDM_FIRST* = (WM_USER + 100).INT
  CDM_LAST* = (WM_USER + 200).INT
  CDM_GETSPEC* = CDM_FIRST.INT
  CDM_GETFILEPATH* = (CDM_FIRST + 1).INT
  CDM_GETFOLDERPATH* = (CDM_FIRST + 2).INT
  CDM_GETFOLDERIDLIST* = (CDM_FIRST + 3).INT
  CDM_SETCONTROLTEXT* = (CDM_FIRST + 4).INT
  CDM_HIDECONTROL* = (CDM_FIRST + 5).INT
  CDM_SETDEFEXT* = (CDM_FIRST + 6).INT
  CC_RGBINIT* = 0x0001
  CC_FULLOPEN* = 0x0002
  CC_PREVENTFULLOPEN* = 0x0004
  CC_SHOWHELP* = 0x0008
  CC_ENABLEHOOK* = 0x0010
  CC_ENABLETEMPLATE* = 0x0020
  CC_ENABLETEMPLATEHANDLE* = 0x0040
  CC_SOLIDCOLOR* = 0x0080
  CC_ANYCOLOR* = 0x0100
  CF_SCREENFONTS* = 0x00000001
  CF_PRINTERFONTS* = 0x00000002
  CF_BOTH* = 0x00000003
  CF_SHOWHELP* = 0x00000004
  CF_ENABLEHOOK* = 0x00000008
  CF_ENABLETEMPLATE* = 0x00000010
  CF_ENABLETEMPLATEHANDLE* = 0x00000020
  CF_INITTOLOGFONTSTRUCT* = 0x00000040
  CF_USESTYLE* = 0x00000080
  CF_EFFECTS* = 0x00000100
  CF_APPLY* = 0x00000200
  CF_ANSIONLY* = 0x00000400
  CF_SCRIPTSONLY* = CF_ANSIONLY.DWORD
  CF_NOVECTORFONTS* = 0x00000800
  CF_NOOEMFONTS* = 0x00000800
  CF_NOSIMULATIONS* = 0x00001000
  CF_LIMITSIZE* = 0x00002000
  CF_FIXEDPITCHONLY* = 0x00004000
  CF_WYSIWYG* = 0x00008000
  CF_FORCEFONTEXIST* = 0x00010000
  CF_SCALABLEONLY* = 0x00020000
  CF_TTONLY* = 0x00040000
  CF_NOFACESEL* = 0x00080000
  CF_NOSTYLESEL* = 0x00100000
  CF_NOSIZESEL* = 0x00200000
  CF_SELECTSCRIPT* = 0x00400000
  CF_NOSCRIPTSEL* = 0x00800000
  CF_NOVERTFONTS* = 0x01000000
  BOLD_FONTTYPE* = 0x0100
  ITALIC_FONTTYPE* = 0x0200
  REGULAR_FONTTYPE* = 0x0400
  SCREEN_FONTTYPE* = 0x2000
  PRINTER_FONTTYPE* = 0x4000
  SIMULATED_FONTTYPE* = 0x8000
  WM_CHOOSEFONT_GETLOGFONT* = (WM_USER + 1)
  WM_CHOOSEFONT_SETLOGFONT* = (WM_USER + 101)
  WM_CHOOSEFONT_SETFLAGS* = (WM_USER + 102)
  OFN_SHAREWARN* = 0
  OFN_SHARENOWARN* = 0x000001
  OFN_READONLY* = 0x000001
  OFN_SHAREFALLTHROUGH* = 0x000002
  OFN_OVERWRITEPROMPT* = 0x000002
  OFN_HIDEREADONLY* = 0x000004
  OFN_NOCHANGEDIR* = 0x000008
  OFN_SHOWHELP* = 0x000010
  OFN_ENABLEHOOK* = 0x000020
  OFN_ENABLETEMPLATE* = 0x000040
  OFN_ENABLETEMPLATEHANDLE* = 0x000080
  OFN_NOVALIDATE* = 0x000100
  OFN_ALLOWMULTISELECT* = 0x000200
  OFN_EXTENSIONDIFFERENT* = 0x000400
  OFN_PATHMUSTEXIST* = 0x000800
  OFN_FILEMUSTEXIST* = 0x001000
  OFN_CREATEPROMPT* = 0x002000
  OFN_SHAREAWARE* = 0x004000
  OFN_NOREADONLYRETURN* = 0x008000
  OFN_NOTESTFILECREATE* = 0x010000
  OFN_NONETWORKBUTTON* = 0x020000
  OFN_NOLONGNAMES* = 0x040000
  OFN_EXPLORER* = 0x080000
  OFN_NODEREFERENCELINKS* = 0x100000
  OFN_LONGNAMES* = 0x200000
  OFN_ENABLESIZING* = 0x800000
  FR_DOWN* = 0x00000001
  FR_WHOLEWORD* = 0x00000002
  FR_MATCHCASE* = 0x00000004
  FR_FINDNEXT* = 0x00000008
  FR_REPLACE* = 0x00000010
  FR_REPLACEALL* = 0x00000020
  FR_DIALOGTERM* = 0x00000040
  FR_SHOWHELP* = 0x00000080
  FR_ENABLEHOOK* = 0x00000100
  FR_ENABLETEMPLATE* = 0x00000200
  FR_NOUPDOWN* = 0x00000400
  FR_NOMATCHCASE* = 0x00000800
  FR_NOWHOLEWORD* = 0x00001000
  FR_ENABLETEMPLATEHANDLE* = 0x00002000
  FR_HIDEUPDOWN* = 0x00004000
  FR_HIDEMATCHCASE* = 0x00008000
  FR_HIDEWHOLEWORD* = 0x00010000
  FR_MATCHDIAC* = 0x20000000
  FR_MATCHKASHIDA* = 0x40000000
  FR_MATCHALEFHAMZA* = 0x80000000'u32
  PD_ALLPAGES* = 0
  PD_SELECTION* = 0x000001
  PD_PAGENUMS* = 0x000002
  PD_NOSELECTION* = 0x000004
  PD_NOPAGENUMS* = 0x000008
  PD_COLLATE* = 0x000010
  PD_PRINTTOFILE* = 0x000020
  PD_PRINTSETUP* = 0x000040
  PD_NOWARNING* = 0x000080
  PD_RETURNDC* = 0x000100
  PD_RETURNIC* = 0x000200
  PD_RETURNDEFAULT* = 0x000400
  PD_SHOWHELP* = 0x000800
  PD_ENABLEPRINTHOOK* = 0x001000
  PD_ENABLESETUPHOOK* = 0x002000
  PD_ENABLEPRINTTEMPLATE* = 0x004000
  PD_ENABLESETUPTEMPLATE* = 0x008000
  PD_ENABLEPRINTTEMPLATEHANDLE* = 0x010000
  PD_ENABLESETUPTEMPLATEHANDLE* = 0x020000
  PD_USEDEVMODECOPIES* = 0x040000
  PD_USEDEVMODECOPIESANDCOLLATE* = 0x040000
  PD_DISABLEPRINTTOFILE* = 0x080000
  PD_HIDEPRINTTOFILE* = 0x100000
  PD_NONETWORKBUTTON* = 0x200000
  PD_CURRENTPAGE* = 0x00400000
  PD_NOCURRENTPAGE* = 0x00800000
  PD_EXCLUSIONFLAGS* = 0x01000000
  PD_USELARGETEMPLATE* = 0x10000000
  PD_RESULT_CANCEL* = 0
  PD_RESULT_PRINT* = 1
  PD_RESULT_APPLY* = 2
  START_PAGE_GENERAL* = 0xFFFFFFFF'u32
  PSD_DEFAULTMINMARGINS* = 0
  PSD_INWININIINTLMEASURE* = 0
  PSD_MINMARGINS* = 0x000001
  PSD_MARGINS* = 0x000002
  PSD_INTHOUSANDTHSOFINCHES* = 0x000004
  PSD_INHUNDREDTHSOFMILLIMETERS* = 0x000008
  PSD_DISABLEMARGINS* = 0x000010
  PSD_DISABLEPRINTER* = 0x000020
  PSD_NOWARNING* = 0x000080
  PSD_DISABLEORIENTATION* = 0x000100
  PSD_DISABLEPAPER* = 0x000200
  PSD_RETURNDEFAULT* = 0x000400
  PSD_SHOWHELP* = 0x000800
  PSD_ENABLEPAGESETUPHOOK* = 0x002000
  PSD_ENABLEPAGESETUPTEMPLATE* = 0x008000
  PSD_ENABLEPAGESETUPTEMPLATEHANDLE* = 0x020000
  PSD_ENABLEPAGEPAINTHOOK* = 0x040000
  PSD_DISABLEPAGEPAINTING* = 0x080000
  WM_PSD_PAGESETUPDLG* = WM_USER
  WM_PSD_FULLPAGERECT* = (WM_USER + 1)
  WM_PSD_MINMARGINRECT* = (WM_USER + 2)
  WM_PSD_MARGINRECT* = (WM_USER + 3)
  WM_PSD_GREEKTEXTRECT* = (WM_USER + 4)
  WM_PSD_ENVSTAMPRECT* = (WM_USER + 5)
  WM_PSD_YAFULLPAGERECT* = (WM_USER + 6)
  CD_LBSELNOITEMS* = -1
  CD_LBSELCHANGE* = 0
  CD_LBSELSUB* = 1
  CD_LBSELADD* = 2
  DN_DEFAULTPRN* = 1

type
  LPCCHOOKPROC* = proc (P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): UINT {.stdcall.}
  LPCFHOOKPROC* = LPCCHOOKPROC
  LPFRHOOKPROC* = LPCCHOOKPROC
  LPOFNHOOKPROC* = LPCCHOOKPROC
  LPPAGEPAINTHOOK* = LPCCHOOKPROC
  LPPAGESETUPHOOK* = LPCCHOOKPROC
  LPSETUPHOOKPROC* = LPCCHOOKPROC
  LPPRINTHOOKPROC* = LPCCHOOKPROC
  TCHOOSECOLORA* {.final, pure.} = object # renamed from CHOOSECOLORA
    lStructSize*: DWORD
    hwndOwner*: HWND
    hInstance*: HWND
    rgbResult*: COLORREF
    lpCustColors*: ptr COLORREF
    Flags*: DWORD
    lCustData*: LPARAM
    lpfnHook*: LPCCHOOKPROC
    lpTemplateName*: LPCSTR
  LPCHOOSECOLORA* = ptr TCHOOSECOLORA
  TCHOOSECOLORW* {.final, pure.} = object # renamed from CHOOSECOLORW
    lStructSize*: DWORD
    hwndOwner*: HWND
    hInstance*: HWND
    rgbResult*: COLORREF
    lpCustColors*: ptr COLORREF
    Flags*: DWORD
    lCustData*: LPARAM
    lpfnHook*: LPCCHOOKPROC
    lpTemplateName*: LPCWSTR
  LPCHOOSECOLORW* = ptr TCHOOSECOLORW
  TCHOOSEFONTA* {.final, pure.} = object # renamed from CHOOSEFONTA
    lStructSize*: DWORD
    hwndOwner*: HWND
    hDC*: HDC
    lpLogFont*: LPLOGFONTA
    iPointSize*: INT
    Flags*: DWORD
    rgbColors*: DWORD
    lCustData*: LPARAM
    lpfnHook*: LPCFHOOKPROC
    lpTemplateName*: LPCSTR
    hInstance*: HINSTANCE
    lpszStyle*: LPSTR
    nFontType*: WORD
    nSizeMin*: INT
    nSizeMax*: INT
  LPCHOOSEFONTA* = ptr TCHOOSEFONTA
  TCHOOSEFONTW* {.final, pure.} = object # renamed from CHOOSEFONTW
    lStructSize*: DWORD
    hwndOwner*: HWND
    hDC*: HDC
    lpLogFont*: LPLOGFONTW
    iPointSize*: INT
    Flags*: DWORD
    rgbColors*: DWORD
    lCustData*: LPARAM
    lpfnHook*: LPCFHOOKPROC
    lpTemplateName*: LPCWSTR
    hInstance*: HINSTANCE
    lpszStyle*: LPWSTR
    nFontType*: WORD
    nSizeMin*: INT
    nSizeMax*: INT
  LPCHOOSEFONTW* = ptr TCHOOSEFONTW
  DEVNAMES* {.final, pure.} = object
    wDriverOffset*: WORD
    wDeviceOffset*: WORD
    wOutputOffset*: WORD
    wDefault*: WORD
  LPDEVNAMES* = ptr DEVNAMES
  FINDREPLACEA* {.final, pure.} = object
    lStructSize*: DWORD
    hwndOwner*: HWND
    hInstance*: HINSTANCE
    Flags*: DWORD
    lpstrFindWhat*: LPSTR
    lpstrReplaceWith*: LPSTR
    wFindWhatLen*: WORD
    wReplaceWithLen*: WORD
    lCustData*: LPARAM
    lpfnHook*: LPFRHOOKPROC
    lpTemplateName*: LPCSTR
  LPFINDREPLACEA* = ptr FINDREPLACEA
  FINDREPLACEW* {.final, pure.} = object
    lStructSize*: DWORD
    hwndOwner*: HWND
    hInstance*: HINSTANCE
    Flags*: DWORD
    lpstrFindWhat*: LPWSTR
    lpstrReplaceWith*: LPWSTR
    wFindWhatLen*: WORD
    wReplaceWithLen*: WORD
    lCustData*: LPARAM
    lpfnHook*: LPFRHOOKPROC
    lpTemplateName*: LPCWSTR
  LPFINDREPLACEW* = ptr FINDREPLACEW
  OPENFILENAMEA* {.final, pure.} = object
    lStructSize*: DWORD
    hwndOwner*: HWND
    hInstance*: HINSTANCE
    lpstrFilter*: LPCSTR
    lpstrCustomFilter*: LPSTR
    nMaxCustFilter*: DWORD
    nFilterIndex*: DWORD
    lpstrFile*: LPSTR
    nMaxFile*: DWORD
    lpstrFileTitle*: LPSTR
    nMaxFileTitle*: DWORD
    lpstrInitialDir*: LPCSTR
    lpstrTitle*: LPCSTR
    Flags*: DWORD
    nFileOffset*: WORD
    nFileExtension*: WORD
    lpstrDefExt*: LPCSTR
    lCustData*: DWORD
    lpfnHook*: LPOFNHOOKPROC
    lpTemplateName*: LPCSTR
    pvReserved*: pointer
    dwReserved*: DWORD
    FlagsEx*: DWORD
  LPOPENFILENAMEA* = ptr OPENFILENAMEA
  OPENFILENAMEW* {.final, pure.} = object
    lStructSize*: DWORD
    hwndOwner*: HWND
    hInstance*: HINSTANCE
    lpstrFilter*: LPCWSTR
    lpstrCustomFilter*: LPWSTR
    nMaxCustFilter*: DWORD
    nFilterIndex*: DWORD
    lpstrFile*: LPWSTR
    nMaxFile*: DWORD
    lpstrFileTitle*: LPWSTR
    nMaxFileTitle*: DWORD
    lpstrInitialDir*: LPCWSTR
    lpstrTitle*: LPCWSTR
    Flags*: DWORD
    nFileOffset*: WORD
    nFileExtension*: WORD
    lpstrDefExt*: LPCWSTR
    lCustData*: DWORD
    lpfnHook*: LPOFNHOOKPROC
    lpTemplateName*: LPCWSTR
    pvReserved*: pointer
    dwReserved*: DWORD
    FlagsEx*: DWORD
  LPOPENFILENAMEW* = ptr OPENFILENAMEW

const
  OPENFILENAME_SIZE_VERSION_400* = 76

type
  OFNOTIFYA* {.final, pure.} = object
    hdr*: NMHDR
    lpOFN*: LPOPENFILENAMEA
    pszFile*: LPSTR
  LPOFNOTIFYA* = ptr OFNOTIFYA
  OFNOTIFYW* {.final, pure.} = object
    hdr*: NMHDR
    lpOFN*: LPOPENFILENAMEW
    pszFile*: LPWSTR
  LPOFNOTIFYW* = ptr OFNOTIFYW
  TPAGESETUPDLGA* {.final, pure.} = object # renamed from PAGESETUPDLGA
    lStructSize*: DWORD
    hwndOwner*: HWND
    hDevMode*: HGLOBAL
    hDevNames*: HGLOBAL
    Flags*: DWORD
    ptPaperSize*: POINT
    rtMinMargin*: RECT
    rtMargin*: RECT
    hInstance*: HINSTANCE
    lCustData*: LPARAM
    lpfnPageSetupHook*: LPPAGESETUPHOOK
    lpfnPagePaintHook*: LPPAGEPAINTHOOK
    lpPageSetupTemplateName*: LPCSTR
    hPageSetupTemplate*: HGLOBAL
  LPPAGESETUPDLGA* = ptr TPAGESETUPDLGA
  TPAGESETUPDLGW* {.final, pure.} = object # renamed from PAGESETUPDLGW
    lStructSize*: DWORD
    hwndOwner*: HWND
    hDevMode*: HGLOBAL
    hDevNames*: HGLOBAL
    Flags*: DWORD
    ptPaperSize*: POINT
    rtMinMargin*: RECT
    rtMargin*: RECT
    hInstance*: HINSTANCE
    lCustData*: LPARAM
    lpfnPageSetupHook*: LPPAGESETUPHOOK
    lpfnPagePaintHook*: LPPAGEPAINTHOOK
    lpPageSetupTemplateName*: LPCWSTR
    hPageSetupTemplate*: HGLOBAL
  LPPAGESETUPDLGW* = ptr TPAGESETUPDLGW
  TPRINTDLGA* {.final, pure.} = object # renamed from PRINTDLGA
    lStructSize*: DWORD
    hwndOwner*: HWND
    hDevMode*: HANDLE
    hDevNames*: HANDLE
    hDC*: HDC
    Flags*: DWORD
    nFromPage*: WORD
    nToPage*: WORD
    nMinPage*: WORD
    nMaxPage*: WORD
    nCopies*: WORD
    hInstance*: HINSTANCE
    lCustData*: DWORD
    lpfnPrintHook*: LPPRINTHOOKPROC
    lpfnSetupHook*: LPSETUPHOOKPROC
    lpPrintTemplateName*: LPCSTR
    lpSetupTemplateName*: LPCSTR
    hPrintTemplate*: HANDLE
    hSetupTemplate*: HANDLE
  LPPRINTDLGA* = ptr TPRINTDLGA
  TPRINTDLGW* {.final, pure.} = object # renamed from PRINTDLGW
    lStructSize*: DWORD
    hwndOwner*: HWND
    hDevMode*: HANDLE
    hDevNames*: HANDLE
    hDC*: HDC
    Flags*: DWORD
    nFromPage*: WORD
    nToPage*: WORD
    nMinPage*: WORD
    nMaxPage*: WORD
    nCopies*: WORD
    hInstance*: HINSTANCE
    lCustData*: DWORD
    lpfnPrintHook*: LPPRINTHOOKPROC
    lpfnSetupHook*: LPSETUPHOOKPROC
    lpPrintTemplateName*: LPCWSTR
    lpSetupTemplateName*: LPCWSTR
    hPrintTemplate*: HANDLE
    hSetupTemplate*: HANDLE
  LPPRINTDLGW* = ptr TPRINTDLGW
  PRINTPAGERANGE* {.final, pure.} = object
    nFromPage*: DWORD
    nToPage*: DWORD
  LPPRINTPAGERANGE* = ptr PRINTPAGERANGE
  TPRINTDLGEXA* {.final, pure.} = object # renamed from PRINTDLGEXA
    lStructSize*: DWORD
    hwndOwner*: HWND
    hDevMode*: HGLOBAL
    hDevNames*: HGLOBAL
    hDC*: HDC
    Flags*: DWORD
    Flags2*: DWORD
    ExclusionFlags*: DWORD
    nPageRanges*: DWORD
    nMaxPageRanges*: DWORD
    lpPageRanges*: LPPRINTPAGERANGE
    nMinPage*: DWORD
    nMaxPage*: DWORD
    nCopies*: DWORD
    hInstance*: HINSTANCE
    lpPrintTemplateName*: LPCSTR
    lpCallback*: pointer # LPUNKNOWN
    nPropertyPages*: DWORD
    lphPropertyPages*: ptr HPROPSHEETPAGE
    nStartPage*: DWORD
    dwResultAction*: DWORD
  LPPRINTDLGEXA* = ptr TPRINTDLGEXA
  TPRINTDLGEXW* {.final, pure.} = object # renamed from PRINTDLGEXW
    lStructSize*: DWORD
    hwndOwner*: HWND
    hDevMode*: HGLOBAL
    hDevNames*: HGLOBAL
    hDC*: HDC
    Flags*: DWORD
    Flags2*: DWORD
    ExclusionFlags*: DWORD
    nPageRanges*: DWORD
    nMaxPageRanges*: DWORD
    lpPageRanges*: LPPRINTPAGERANGE
    nMinPage*: DWORD
    nMaxPage*: DWORD
    nCopies*: DWORD
    hInstance*: HINSTANCE
    lpPrintTemplateName*: LPCWSTR
    lpCallback*: pointer # LPUNKNOWN
    nPropertyPages*: DWORD
    lphPropertyPages*: ptr HPROPSHEETPAGE
    nStartPage*: DWORD
    dwResultAction*: DWORD
  LPPRINTDLGEXW* = ptr TPRINTDLGEXW

proc ChooseColorA*(P1: LPCHOOSECOLORA): BOOL {.winapi, dynlib: "comdlg32", importc.}
proc ChooseColorW*(P1: LPCHOOSECOLORW): BOOL {.winapi, dynlib: "comdlg32", importc.}
proc ChooseFontA*(P1: LPCHOOSEFONTA): BOOL {.winapi, dynlib: "comdlg32", importc.}
proc ChooseFontW*(P1: LPCHOOSEFONTW): BOOL {.winapi, dynlib: "comdlg32", importc.}
proc CommDlgExtendedError*(): DWORD {.winapi, dynlib: "comdlg32", importc.}
proc FindTextA*(P1: LPFINDREPLACEA): HWND {.winapi, dynlib: "comdlg32", importc.}
proc FindTextW*(P1: LPFINDREPLACEW): HWND {.winapi, dynlib: "comdlg32", importc.}
proc GetFileTitleA*(P1: LPCSTR, P2: LPSTR, P3: WORD): int16 {.winapi, dynlib: "comdlg32", importc.}
proc GetFileTitleW*(P1: LPCWSTR, P2: LPWSTR, P3: WORD): int16 {.winapi, dynlib: "comdlg32", importc.}
proc GetOpenFileNameA*(P1: LPOPENFILENAMEA): BOOL {.winapi, dynlib: "comdlg32", importc.}
proc GetOpenFileNameW*(P1: LPOPENFILENAMEW): BOOL {.winapi, dynlib: "comdlg32", importc.}
proc GetSaveFileNameA*(P1: LPOPENFILENAMEA): BOOL {.winapi, dynlib: "comdlg32", importc.}
proc GetSaveFileNameW*(P1: LPOPENFILENAMEW): BOOL {.winapi, dynlib: "comdlg32", importc.}
proc PageSetupDlgA*(P1: LPPAGESETUPDLGA): BOOL {.winapi, dynlib: "comdlg32", importc.}
proc PageSetupDlgW*(P1: LPPAGESETUPDLGW): BOOL {.winapi, dynlib: "comdlg32", importc.}
proc PrintDlgA*(P1: LPPRINTDLGA): BOOL {.winapi, dynlib: "comdlg32", importc.}
proc PrintDlgW*(P1: LPPRINTDLGW): BOOL {.winapi, dynlib: "comdlg32", importc.}
proc ReplaceTextA*(P1: LPFINDREPLACEA): HWND {.winapi, dynlib: "comdlg32", importc.}
proc ReplaceTextW*(P1: LPFINDREPLACEW): HWND {.winapi, dynlib: "comdlg32", importc.}
proc PrintDlgExA*(P1: LPPRINTDLGEXA): HRESULT {.winapi, dynlib: "comdlg32", importc.}
proc PrintDlgExW*(P1: LPPRINTDLGEXW): HRESULT {.winapi, dynlib: "comdlg32", importc.}

when not defined(winansi):
  type
    TCHOOSECOLOR* = TCHOOSECOLORW
    TCHOOSEFONT* = TCHOOSEFONTW
    FINDREPLACE* = FINDREPLACEW
    OPENFILENAME* = OPENFILENAMEW
    OFNOTIFY* = OFNOTIFYW
    TPAGESETUPDLG* = TPAGESETUPDLGW
    TPRINTDLG* = TPRINTDLGW

  proc ChooseColor*(P1: LPCHOOSECOLORW): BOOL {.winapi, dynlib: "comdlg32", importc: "ChooseColorW".}
  proc ChooseFont*(P1: LPCHOOSEFONTW): BOOL {.winapi, dynlib: "comdlg32", importc: "ChooseFontW".}
  proc FindText*(P1: LPFINDREPLACEW): HWND {.winapi, dynlib: "comdlg32", importc: "FindTextW".}
  proc GetFileTitle*(P1: LPCWSTR, P2: LPWSTR, P3: WORD): int16 {.winapi, dynlib: "comdlg32", importc: "GetFileTitleW".}
  proc GetOpenFileName*(P1: LPOPENFILENAMEW): BOOL {.winapi, dynlib: "comdlg32", importc: "GetOpenFileNameW".}
  proc GetSaveFileName*(P1: LPOPENFILENAMEW): BOOL {.winapi, dynlib: "comdlg32", importc: "GetSaveFileNameW".}
  proc PageSetupDlg*(P1: LPPAGESETUPDLGW): BOOL {.winapi, dynlib: "comdlg32", importc: "PageSetupDlgW".}
  proc PrintDlg*(P1: LPPRINTDLGW): BOOL {.winapi, dynlib: "comdlg32", importc: "PrintDlgW".}
  proc ReplaceText*(P1: LPFINDREPLACEW): HWND {.winapi, dynlib: "comdlg32", importc: "ReplaceTextW".}

  type
    TPRINTDLGEX* = TPRINTDLGEXW

  proc PrintDlgEx*(P1: LPPRINTDLGEXW): HRESULT {.winapi, dynlib: "comdlg32", importc: "PrintDlgExW".}

else:
  type
    TCHOOSECOLOR* = TCHOOSECOLORA
    TCHOOSEFONT* = TCHOOSEFONTA
    FINDREPLACE* = FINDREPLACEA
    OPENFILENAME* = OPENFILENAMEA
    OFNOTIFY* = OFNOTIFYA
    TPAGESETUPDLG* = TPAGESETUPDLGA
    TPRINTDLG* = TPRINTDLGA

  proc ChooseColor*(P1: LPCHOOSECOLORA): BOOL {.winapi, dynlib: "comdlg32", importc: "ChooseColorA".}
  proc ChooseFont*(P1: LPCHOOSEFONTA): BOOL {.winapi, dynlib: "comdlg32", importc: "ChooseFontA".}
  proc FindText*(P1: LPFINDREPLACEA): HWND {.winapi, dynlib: "comdlg32", importc: "FindTextA".}
  proc GetFileTitle*(P1: LPCSTR, P2: LPSTR, P3: WORD): int16 {.winapi, dynlib: "comdlg32", importc: "GetFileTitleA".}
  proc GetOpenFileName*(P1: LPOPENFILENAMEA): BOOL {.winapi, dynlib: "comdlg32", importc: "GetOpenFileNameA".}
  proc GetSaveFileName*(P1: LPOPENFILENAMEA): BOOL {.winapi, dynlib: "comdlg32", importc: "GetSaveFileNameA".}
  proc PageSetupDlg*(P1: LPPAGESETUPDLGA): BOOL {.winapi, dynlib: "comdlg32", importc: "PageSetupDlgA".}
  proc PrintDlg*(P1: LPPRINTDLGA): BOOL {.winapi, dynlib: "comdlg32", importc: "PrintDlgA".}
  proc ReplaceText*(P1: LPFINDREPLACEA): HWND {.winapi, dynlib: "comdlg32", importc: "ReplaceTextA".}

  type
    TPRINTDLGEX* = TPRINTDLGEXA

  proc PrintDlgEx*(P1: LPPRINTDLGEXA): HRESULT {.winapi, dynlib: "comdlg32", importc: "PrintDlgExA".}

type
  LPCHOOSECOLOR* = ptr TCHOOSECOLOR
  LPCHOOSEFONT* = ptr TCHOOSEFONT
  LPFINDREPLACE* = ptr FINDREPLACE
  LPOPENFILENAME* = ptr OPENFILENAME
  LPOFNOTIFY* = ptr OFNOTIFY
  LPPAGESETUPDLG* = ptr TPAGESETUPDLG
  LPPRINTDLG* = ptr TPRINTDLG

type
  LPPRINTDLGEX* = ptr TPRINTDLGEX

# shell/commctrl.nim

const
  COMCTL32_VERSION* = 6
  DRAGLISTMSGSTRING* = "commctrl_DragListMsg"
  HOTKEY_CLASS* = "msctls_hotkey32"
  PROGRESS_CLASS* = "msctls_progress32"
  STATUSCLASSNAME* = "msctls_statusbar32"
  TOOLBARCLASSNAME* = "ToolbarWindow32"
  TOOLTIPS_CLASS* = "tooltips_class32"
  TRACKBAR_CLASS* = "msctls_trackbar32"
  UPDOWN_CLASS* = "msctls_updown32"
  ANIMATE_CLASS* = "SysAnimate32"
  DATETIMEPICK_CLASS* = "SysDateTimePick32"
  MONTHCAL_CLASS* = "SysMonthCal32"
  REBARCLASSNAME* = "ReBarWindow32"
  WC_COMBOBOXEX* = "ComboBoxEx32"
  WC_IPADDRESS* = "SysIPAddress32"
  WC_LISTVIEW* = "SysListView32"
  WC_TABCONTROL* = "SysTabControl32"
  WC_TREEVIEW* = "SysTreeView32"
  WC_HEADER* = "SysHeader32"
  WC_PAGESCROLLER* = "SysPager"
  WC_NATIVEFONTCTL* = "NativeFontCtl"
  WC_BUTTON* = "Button"
  WC_STATIC* = "Static"
  WC_EDIT* = "Edit"
  WC_LISTBOX* = "ListBox"
  WC_COMBOBOX* = "ComboBox"
  WC_SCROLLBAR* = "ScrollBar"
  WC_LINKA* = "SysLink"
  LVM_FIRST* = 0x1000
  TV_FIRST* = 0x1100
  HDM_FIRST* = 0x1200
  ACM_OPENA* = WM_USER + 100
  ACM_PLAY* = WM_USER + 101
  ACM_STOP* = WM_USER + 102
  ACM_OPENW* = WM_USER + 103
  ACN_START* = 1
  ACN_STOP* = 2
  CBEIF_TEXT* = 0x00000001
  CBEIF_IMAGE* = 0x00000002
  CBEIF_SELECTEDIMAGE* = 0x00000004
  CBEIF_OVERLAY* = 0x00000008
  CBEIF_INDENT* = 0x00000010
  CBEIF_LPARAM* = 0x00000020
  CBEIF_DI_SETITEM* = 0x10000000
  RBN_FIRST* = -831
  RBN_LAST* = -859
  MCN_FIRST* = -750
  MCN_LAST* = -759
  DTN_FIRST* = -760
  DTN_LAST* = -799
  CBEN_FIRST* = -800
  CBEN_LAST* = -830
  CBEN_INSERTITEM* = CBEN_FIRST - 1
  CBEN_DELETEITEM* = CBEN_FIRST - 2
  CBEN_BEGINEDIT* = CBEN_FIRST - 4
  CBEN_ENDEDITA* = CBEN_FIRST - 5
  CBEN_ENDEDITW* = CBEN_FIRST - 6
  CBENF_KILLFOCUS* = 1
  CBENF_RETURN* = 2
  CBENF_ESCAPE* = 3
  CBENF_DROPDOWN* = 4
  CBEMAXSTRLEN* = 260
  DL_BEGINDRAG* = 1157
  DL_CANCELDRAG* = 1160
  DL_DRAGGING* = 1158
  DL_DROPPED* = 1159
  DL_CURSORSET* = 0
  DL_STOPCURSOR* = 1
  DL_COPYCURSOR* = 2
  DL_MOVECURSOR* = 3
  CCS_TOP* = 1
  CCS_NOMOVEY* = 2
  CCS_BOTTOM* = 3
  CCS_NORESIZE* = 4
  CCS_NOPARENTALIGN* = 8
  CCS_ADJUSTABLE* = 32
  CCS_NODIVIDER* = 64
  CCS_VERT* = 128
  CCS_LEFT* = 129
  CCS_NOMOVEX* = 130
  CCS_RIGHT* = 131
  ACS_CENTER* = 0x0001
  ACS_TRANSPARENT* = 0x0002
  ACS_AUTOPLAY* = 0x0004
  ACS_TIMER* = 0x0008
  PGS_VERT* = 0x00000000
  PGS_HORZ* = 0x00000001
  PGS_AUTOSCROLL* = 0x00000002
  PGS_DRAGNDROP* = 0x00000004
  CMB_MASKED* = 2
  MINSYSCOMMAND* = SC_SIZE
  SBT_OWNERDRAW* = 0x1000
  SBT_NOBORDERS* = 256
  SBT_POPOUT* = 512
  SBT_RTLREADING* = 1024
  SB_SETTEXTA* = WM_USER + 1
  SB_SETTEXTW* = WM_USER + 11
  SB_GETTEXTA* = WM_USER + 2
  SB_GETTEXTW* = WM_USER + 13
  SB_GETTEXTLENGTHA* = WM_USER + 3
  SB_GETTEXTLENGTHW* = WM_USER + 12
  SB_SETPARTS* = WM_USER + 4
  SB_GETPARTS* = WM_USER + 6
  SB_GETBORDERS* = WM_USER + 7
  SB_SETMINHEIGHT* = WM_USER + 8
  SB_SIMPLE* = WM_USER + 9
  SB_GETRECT* = WM_USER + 10
  MSGF_COMMCTRL_BEGINDRAG* = 0x4200
  MSGF_COMMCTRL_SIZEHEADER* = 0x4201
  MSGF_COMMCTRL_DRAGSELECT* = 0x4202
  MSGF_COMMCTRL_TOOLBARCUST* = 0x4203
  ILC_COLOR* = 0
  ILC_COLOR4* = 4
  ILC_COLOR8* = 8
  ILC_COLOR16* = 16
  ILC_COLOR24* = 24
  ILC_COLOR32* = 32
  ILC_COLORDDB* = 254
  ILC_MASK* = 1
  ILC_PALETTE* = 2048
  ILCF_MOVE* = 0
  ILCF_SWAP* = 1
  ILS_NORMAL* = 0
  ILS_GLOW* = 1
  ILS_SHADOW* = 2
  ILS_SATURATE* = 4
  ILS_ALPHA* = 8
  ILD_BLEND25* = 2
  ILD_BLEND50* = 4
  ILD_SELECTED* = 4
  ILD_BLEND* = 4
  ILD_FOCUS* = 2
  ILD_MASK* = 16
  ILD_NORMAL* = 0
  ILD_TRANSPARENT* = 1
  ILD_IMAGE* = 0x0020
  ILD_ROP* = 0x0040
  ILD_OVERLAYMASK* = 0x0F00
  ILD_PRESERVEALPHA* = 0x1000
  ILD_SCALE* = 0x2000
  ILD_DPISCALE* = 0x4000
  HDS_HORZ* = 0
  HDS_BUTTONS* = 2
  HDS_HIDDEN* = 8
  HDS_HOTTRACK* = 4
  HDS_DRAGDROP* = 0x0040
  HDS_FULLDRAG* = 0x0080
  HDS_FILTERBAR* = 0x0100
  NM_FIRST* = 0
  NM_LAST* = -99
  LVN_FIRST* = -100
  LVN_LAST* = -199
  HDN_FIRST* = -300
  HDN_LAST* = -399
  TVN_FIRST* = -400
  TVN_LAST* = -499
  TTN_FIRST* = -520
  TTN_LAST* = -549
  TCN_FIRST* = -550
  TCN_LAST* = -580
  # CDN_FIRST* = -601
  # CDN_LAST* = -699

const
  TBN_FIRST* = -700
  TBN_LAST* = -720
  UDN_FIRST* = -721
  UDN_LAST* = -740
  IPN_FIRST* = -860
  IPN_LAST* = -879
  IPN_FIELDCHANGED* = IPN_FIRST
  SBN_FIRST* = -880
  SBN_LAST* = -899
  PGN_FIRST* = -900
  PGN_LAST* = -950
  PGN_SCROLL* = PGN_FIRST-1
  PGN_CALCSIZE* = PGN_FIRST-2
  HDI_WIDTH* = 1
  HDI_HEIGHT* = 1
  HDI_TEXT* = 2
  HDI_FORMAT* = 4
  HDI_LPARAM* = 8
  HDI_BITMAP* = 16
  HDI_IMAGE* = 32
  HDI_DI_SETITEM* = 64
  HDI_ORDER* = 128
  HDI_FILTER* = 256
  CBES_EX_NOEDITIMAGE* = 0x00000001
  CBES_EX_NOEDITIMAGEINDENT* = 0x00000002
  CBES_EX_PATHWORDBREAKPROC* = 0x00000004
  CBES_EX_NOSIZELIMIT* = 0x00000008
  CBES_EX_CASESENSITIVE* = 0x00000010
  CBEN_GETDISPINFOA* = CBEN_FIRST - 0
  CBEN_GETDISPINFOW* = CBEN_FIRST - 7
  CBEN_DRAGBEGINA* = CBEN_FIRST - 8
  CBEN_DRAGBEGINW* = CBEN_FIRST - 9
  HDF_LEFT* = 0
  HDF_RIGHT* = 1
  HDF_CENTER* = 2
  HDF_JUSTIFYMASK* = 3
  HDF_RTLREADING* = 4
  HDF_OWNERDRAW* = 0x8000
  HDF_STRING* = 0x4000
  HDF_BITMAP* = 0x2000
  HDF_BITMAP_ON_RIGHT* = 0x1000
  HDF_IMAGE* = 0x0800
  CCM_FIRST* = 0x2000
  CCM_LAST* = CCM_FIRST + 0x200
  CCM_SETBKCOLOR* = 8193
  CCM_SETCOLORSCHEME* = 8194
  CCM_GETCOLORSCHEME* = 8195
  CCM_GETDROPTARGET* = 8196
  CCM_SETUNICODEFORMAT* = 8197
  CCM_GETUNICODEFORMAT* = 8198
  CCM_SETVERSION* = 0x2007
  CCM_GETVERSION* = 0x2008
  CCM_SETNOTIFYWINDOW* = 0x2009
  HDM_GETITEMCOUNT* = HDM_FIRST
  HDM_INSERTITEMA* = HDM_FIRST + 1
  HDM_INSERTITEMW* = HDM_FIRST + 10
  HDM_DELETEITEM* = HDM_FIRST + 2
  HDM_GETITEMA* = HDM_FIRST + 3
  HDM_GETITEMW* = HDM_FIRST + 11
  HDM_SETITEMA* = HDM_FIRST + 4
  HDM_SETITEMW* = HDM_FIRST + 12
  HDM_LAYOUT* = HDM_FIRST + 5
  HDM_GETITEMRECT* = HDM_FIRST + 7
  HDM_SETIMAGELIST* = HDM_FIRST + 8
  HDM_GETIMAGELIST* = HDM_FIRST + 9
  HDM_ORDERTOINDEX* = HDM_FIRST + 15
  HDM_CREATEDRAGIMAGE* = HDM_FIRST + 16
  HDM_GETORDERARRAY* = HDM_FIRST + 17
  HDM_SETORDERARRAY* = HDM_FIRST + 18
  HDM_SETHOTDIVIDER* = HDM_FIRST + 19
  HDM_GETUNICODEFORMAT* = CCM_GETUNICODEFORMAT
  HDM_SETUNICODEFORMAT* = CCM_SETUNICODEFORMAT
  HHT_NOWHERE* = 1
  HHT_ONHEADER* = 2
  HHT_ONDIVIDER* = 4
  HHT_ONDIVOPEN* = 8
  HHT_ABOVE* = 256
  HHT_BELOW* = 512
  HHT_TORIGHT* = 1024
  HHT_TOLEFT* = 2048
  HDM_HITTEST* = HDM_FIRST + 6
  HDN_ITEMCHANGINGA* = HDN_FIRST - 0
  HDN_ITEMCHANGINGW* = HDN_FIRST - 20
  HDN_ITEMCHANGEDA* = HDN_FIRST - 1
  HDN_ITEMCHANGEDW* = HDN_FIRST - 21
  HDN_ITEMCLICKA* = HDN_FIRST - 2
  HDN_ITEMCLICKW* = HDN_FIRST - 22
  HDN_ITEMDBLCLICKA* = HDN_FIRST - 3
  HDN_ITEMDBLCLICKW* = HDN_FIRST - 23
  HDN_DIVIDERDBLCLICKA* = HDN_FIRST - 5
  HDN_DIVIDERDBLCLICKW* = HDN_FIRST - 25
  HDN_BEGINTRACKA* = HDN_FIRST - 6
  HDN_BEGINTRACKW* = HDN_FIRST - 26
  HDN_ENDTRACKA* = HDN_FIRST - 7
  HDN_ENDTRACKW* = HDN_FIRST - 27
  HDN_TRACKA* = HDN_FIRST - 8
  HDN_TRACKW* = HDN_FIRST - 28
  HDN_ENDDRAG* = HDN_FIRST - 11
  HDN_BEGINDRAG* = HDN_FIRST - 10
  HDN_GETDISPINFOA* = HDN_FIRST - 9
  HDN_GETDISPINFOW* = HDN_FIRST - 29
  HICF_OTHER* = 0x00
  HICF_MOUSE* = 0x01
  HICF_ARROWKEYS* = 0x02
  HICF_ACCELERATOR* = 0x04
  HICF_DUPACCEL* = 0x08
  HICF_ENTERING* = 0x10
  HICF_LEAVING* = 0x20
  HICF_RESELECT* = 0x40
  HICF_LMOUSE* = 0x80
  HICF_TOGGLEDROPDOWN* = 0x100
  IPM_CLEARADDRESS* = WM_USER + 100
  IPM_SETADDRESS* = WM_USER + 101
  IPM_GETADDRESS* = WM_USER + 102
  IPM_SETRANGE* = WM_USER + 103
  IPM_SETFOCUS* = WM_USER + 104
  IPM_ISBLANK* = WM_USER + 105
  I_INDENTCALLBACK* = -1
  I_IMAGENONE* = -2
  TBSTATE_CHECKED* = 1
  TBSTATE_PRESSED* = 2
  TBSTATE_ENABLED* = 4
  TBSTATE_HIDDEN* = 8
  TBSTATE_INDETERMINATE* = 16
  TBSTATE_WRAP* = 32
  TBSTATE_ELLIPSES* = 0x40
  TBSTATE_MARKED* = 0x0080
  TBSTYLE_BUTTON* = 0
  TBSTYLE_SEP* = 1
  TBSTYLE_CHECK* = 2
  TBSTYLE_GROUP* = 4
  TBSTYLE_CHECKGROUP* = TBSTYLE_GROUP or TBSTYLE_CHECK
  TBSTYLE_DROPDOWN* = 8
  TBSTYLE_AUTOSIZE* = 16
  TBSTYLE_NOPREFIX* = 32
  TBSTYLE_TOOLTIPS* = 256
  TBSTYLE_WRAPABLE* = 512
  TBSTYLE_ALTDRAG* = 1024
  TBSTYLE_FLAT* = 2048
  TBSTYLE_LIST* = 4096
  TBSTYLE_CUSTOMERASE* = 8192
  TBSTYLE_REGISTERDROP* = 0x4000
  TBSTYLE_TRANSPARENT* = 0x8000
  TBSTYLE_EX_DRAWDDARROWS* = 0x00000001
  TBSTYLE_EX_MIXEDBUTTONS* = 8
  TBSTYLE_EX_HIDECLIPPEDBUTTONS* = 16
  TBSTYLE_EX_DOUBLEBUFFER* = 0x80
  BTNS_BUTTON* = TBSTYLE_BUTTON
  BTNS_SEP* = TBSTYLE_SEP
  BTNS_CHECK* = TBSTYLE_CHECK
  BTNS_GROUP* = TBSTYLE_GROUP
  BTNS_CHECKGROUP* = TBSTYLE_CHECKGROUP
  BTNS_DROPDOWN* = TBSTYLE_DROPDOWN
  BTNS_AUTOSIZE* = TBSTYLE_AUTOSIZE
  BTNS_NOPREFIX* = TBSTYLE_NOPREFIX
  BTNS_WHOLEDROPDOWN* = 0x0080
  BTNS_SHOWTEXT* = 0x0040
  TBCDRF_NOEDGES* = 0x10000
  TBCDRF_HILITEHOTTRACK* = 0x20000
  TBCDRF_NOOFFSET* = 0x40000
  TBCDRF_NOMARK* = 0x80000
  TBCDRF_NOETCHEDEFFECT* = 0x100000
  HINST_COMMCTRL* = -1
  IDB_STD_SMALL_COLOR* = 0
  IDB_STD_LARGE_COLOR* = 1
  IDB_VIEW_SMALL_COLOR* = 4
  IDB_VIEW_LARGE_COLOR* = 5
  IDB_HIST_SMALL_COLOR* = 8
  IDB_HIST_LARGE_COLOR* = 9
  STD_CUT* = 0
  STD_COPY* = 1
  STD_PASTE* = 2
  STD_UNDO* = 3
  STD_REDOW* = 4
  STD_DELETE* = 5
  STD_FILENEW* = 6
  STD_FILEOPEN* = 7
  STD_FILESAVE* = 8
  STD_PRINTPRE* = 9
  STD_PROPERTIES* = 10
  STD_HELP* = 11
  STD_FIND* = 12
  STD_REPLACE* = 13
  STD_PRINT* = 14
  VIEW_LARGEICONS* = 0
  VIEW_SMALLICONS* = 1
  VIEW_LIST* = 2
  VIEW_DETAILS* = 3
  VIEW_SORTNAME* = 4
  VIEW_SORTSIZE* = 5
  VIEW_SORTDATE* = 6
  VIEW_SORTTYPE* = 7
  VIEW_PARENTFOLDER* = 8
  VIEW_NETCONNECT* = 9
  VIEW_NETDISCONNECT* = 10
  VIEW_NEWFOLDER* = 11
  TB_ENABLEBUTTON* = WM_USER + 1
  TB_CHECKBUTTON* = (WM_USER + 1) + 1
  TB_PRESSBUTTON* = (WM_USER + 1) + 2
  TB_HIDEBUTTON* = (WM_USER + 1) + 3
  TB_INDETERMINATE* = (WM_USER + 1) + 4
  TB_ISBUTTONENABLED* = WM_USER + 9
  TB_ISBUTTONCHECKED* = (WM_USER + 9) + 1
  TB_ISBUTTONPRESSED* = (WM_USER + 9) + 2
  TB_ISBUTTONHIDDEN* = (WM_USER + 9) + 3
  TB_ISBUTTONINDETERMINATE* = (WM_USER + 9) + 4
  TB_SETSTATE* = WM_USER + 17
  TB_GETSTATE* = WM_USER + 18
  TB_ADDBITMAP* = WM_USER + 19
  TB_DELETEBUTTON* = WM_USER + 22
  TB_GETBUTTON* = (WM_USER + 22) + 1
  TB_BUTTONCOUNT* = (WM_USER + 22) + 2
  TB_COMMANDTOINDEX* = (WM_USER + 22) + 3
  TB_SAVERESTOREA* = (WM_USER + 22) + 4
  TB_CUSTOMIZE* = (WM_USER + 22) + 5
  TB_ADDSTRINGA* = (WM_USER + 22) + 6
  TB_GETITEMRECT* = (WM_USER + 22) + 7
  TB_BUTTONSTRUCTSIZE* = (WM_USER + 22) + 8
  TB_SETBUTTONSIZE* = (WM_USER + 22) + 9
  TB_SETBITMAPSIZE* = (WM_USER + 22) + 10
  TB_AUTOSIZE* = (WM_USER + 22) + 11
  TB_GETTOOLTIPS* = WM_USER + 35
  TB_SETTOOLTIPS* = WM_USER + 36
  TB_SETPARENT* = WM_USER + 37
  TB_SETROWS* = WM_USER + 39
  TB_GETROWS* = (WM_USER + 39) + 1
  TB_GETBITMAPFLAGS* = (WM_USER + 39) + 2
  TB_SETCMDID* = (WM_USER + 39) + 3
  TB_CHANGEBITMAP* = (WM_USER + 39) + 4
  TB_GETBITMAP* = (WM_USER + 39) + 5
  TB_GETBUTTONTEXTA* = (WM_USER + 39) + 6
  TB_REPLACEBITMAP* = (WM_USER + 39) + 7
  TB_GETBUTTONSIZE* = WM_USER + 58
  TB_SETBUTTONWIDTH* = WM_USER + 59
  TB_GETBUTTONTEXTW* = WM_USER + 75
  TB_SAVERESTOREW* = WM_USER + 76
  TB_ADDSTRINGW* = WM_USER + 77
  TB_MARKBUTTON* = WM_USER + 6
  TB_ISBUTTONHIGHLIGHTED* = WM_USER + 14
  TB_ADDBUTTONSA* = WM_USER + 20
  TB_INSERTBUTTONA* = WM_USER + 21
  TB_SETINDENT* = WM_USER + 47
  TB_SETIMAGELIST* = (WM_USER + 47) + 1
  TB_GETIMAGELIST* = (WM_USER + 47) + 2
  TB_LOADIMAGES* = (WM_USER + 47) + 3
  TB_GETRECT* = (WM_USER + 47) + 4
  TB_SETHOTIMAGELIST* = (WM_USER + 47) + 5
  TB_GETHOTIMAGELIST* = (WM_USER + 47) + 6
  TB_SETDISABLEDIMAGELIST* = (WM_USER + 47) + 7
  TB_GETDISABLEDIMAGELIST* = (WM_USER + 47) + 8
  TB_SETSTYLE* = (WM_USER + 47) + 9
  TB_GETSTYLE* = (WM_USER + 47) + 10
  TB_SETMAXTEXTROWS* = (WM_USER + 47) + 11
  TB_GETTEXTROWS* = (WM_USER + 47) + 12
  TB_GETOBJECT* = WM_USER + 62
  TB_GETBUTTONINFOW* = (WM_USER + 62) + 1
  TB_SETBUTTONINFOW* = (WM_USER + 62) + 2
  TB_GETBUTTONINFOA* = (WM_USER + 62) + 3
  TB_SETBUTTONINFOA* = (WM_USER + 62) + 4
  TB_INSERTBUTTONW* = (WM_USER + 62) + 5
  TB_ADDBUTTONSW* = (WM_USER + 62) + 6
  TB_HITTEST* = (WM_USER + 62) + 7
  TB_SETEXTENDEDSTYLE* = WM_USER + 84
  TB_GETEXTENDEDSTYLE* = WM_USER + 85
  TB_SETDRAWTEXTFLAGS* = WM_USER + 70
  TB_GETHOTITEM* = (WM_USER + 70) + 1
  TB_SETHOTITEM* = (WM_USER + 70) + 2
  TB_SETANCHORHIGHLIGHT* = (WM_USER + 70) + 3
  TB_GETANCHORHIGHLIGHT* = (WM_USER + 70) + 4
  TB_MAPACCELERATORA* = WM_USER + 78
  TB_GETINSERTMARK* = (WM_USER + 78) + 1
  TB_SETINSERTMARK* = (WM_USER + 78) + 2
  TB_INSERTMARKHITTEST* = (WM_USER + 78) + 3
  TB_MOVEBUTTON* = (WM_USER + 78) + 4
  TB_GETMAXSIZE* = (WM_USER + 78) + 5
  TB_GETPADDING* = (WM_USER + 78) + 6
  TB_SETPADDING* = (WM_USER + 78) + 7
  TB_SETINSERTMARKCOLOR* = (WM_USER + 78) + 8
  TB_GETINSERTMARKCOLOR* = (WM_USER + 78) + 9
  TB_MAPACCELERATORW* = (WM_USER + 78) + 10
  TB_GETSTRINGW* = (WM_USER + 78) + 11
  TB_GETSTRINGA* = (WM_USER + 78) + 12
  TB_SETCOLORSCHEME* = CCM_SETCOLORSCHEME
  TB_GETCOLORSCHEME* = CCM_GETCOLORSCHEME
  TB_SETUNICODEFORMAT* = CCM_SETUNICODEFORMAT
  TB_GETUNICODEFORMAT* = CCM_GETUNICODEFORMAT
  TBBF_LARGE* = 1
  TBN_GETBUTTONINFOA* = TBN_FIRST - 0
  TBN_BEGINDRAG* = TBN_FIRST - 1
  TBN_ENDDRAG* = TBN_FIRST - 2
  TBN_BEGINADJUST* = TBN_FIRST - 3
  TBN_ENDADJUST* = TBN_FIRST - 4
  TBN_RESET* = TBN_FIRST - 5
  TBN_QUERYINSERT* = TBN_FIRST - 6
  TBN_QUERYDELETE* = TBN_FIRST - 7
  TBN_TOOLBARCHANGE* = TBN_FIRST - 8
  TBN_CUSTHELP* = TBN_FIRST - 9
  TBN_DROPDOWN* = TBN_FIRST - 10
  TBN_HOTITEMCHANGE* = TBN_FIRST - 13
  TBN_DRAGOUT* = TBN_FIRST - 14
  TBN_DELETINGBUTTON* = TBN_FIRST - 15
  TBN_GETDISPINFOA* = TBN_FIRST - 16
  TBN_GETDISPINFOW* = TBN_FIRST - 17
  TBN_GETINFOTIPA* = TBN_FIRST - 18
  TBN_GETINFOTIPW* = TBN_FIRST - 19
  TBN_GETBUTTONINFOW* = TBN_FIRST - 20
  TBN_RESTORE* = TBN_FIRST - 21
  TBN_SAVE* = TBN_FIRST - 22
  TBN_INITCUSTOMIZE* = TBN_FIRST - 23
  TBNRF_HIDEHELP* = 1
  TBNRF_ENDCUSTOMIZE* = 2
  TBNF_IMAGE* = 1
  TBNF_TEXT* = 2
  TBNF_DI_SETITEM* = 0x10000000
  TTS_ALWAYSTIP* = 1
  TTS_NOPREFIX* = 2
  TTS_NOANIMATE* = 0x10
  TTS_NOFADE* = 0x20
  TTS_BALLOON* = 0x40
  TTS_CLOSE* = 0x80
  TTF_IDISHWND* = 1
  TTF_CENTERTIP* = 2
  TTF_RTLREADING* = 4
  TTF_SUBCLASS* = 16
  TTF_TRACK* = 0x0020
  TTF_ABSOLUTE* = 0x0080
  TTF_TRANSPARENT* = 0x0100
  TTF_DI_SETITEM* = 0x8000
  TTF_PARSELINKS* = 0x1000
  TBCD_TICS* = 1
  TBCD_THUMB* = 2
  TBCD_CHANNEL* = 3
  TBDDRET_DEFAULT* = 0
  TBDDRET_NODEFAULT* = 1
  TBDDRET_TREATPRESSED* = 2
  TBIMHT_AFTER* = 1
  TBIMHT_BACKGROUND* = 2
  TTDT_AUTOMATIC* = 0
  TTDT_RESHOW* = 1
  TTDT_AUTOPOP* = 2
  TTDT_INITIAL* = 3
  TTM_ACTIVATE* = WM_USER + 1
  TTM_SETDELAYTIME* = WM_USER + 3
  TTM_ADDTOOLA* = (WM_USER + 3) + 1
  TTM_DELTOOLA* = (WM_USER + 3) + 2
  TTM_NEWTOOLRECTA* = (WM_USER + 3) + 3
  TTM_RELAYEVENT* = (WM_USER + 3) + 4
  TTM_GETTOOLINFOA* = (WM_USER + 3) + 5
  TTM_SETTOOLINFOA* = (WM_USER + 3) + 6
  TTM_HITTESTA* = (WM_USER + 3) + 7
  TTM_GETTEXTA* = (WM_USER + 3) + 8
  TTM_UPDATETIPTEXTA* = (WM_USER + 3) + 9
  TTM_GETTOOLCOUNT* = (WM_USER + 3) + 10
  TTM_ENUMTOOLSA* = (WM_USER + 3) + 11
  TTM_GETCURRENTTOOLA* = (WM_USER + 3) + 12
  TTM_WINDOWFROMPOINT* = (WM_USER + 3) + 13
  TTM_ADDTOOLW* = WM_USER + 50
  TTM_DELTOOLW* = (WM_USER + 50) + 1
  TTM_NEWTOOLRECTW* = (WM_USER + 50) + 2
  TTM_GETTOOLINFOW* = (WM_USER + 50) + 3
  TTM_SETTOOLINFOW* = (WM_USER + 50) + 4
  TTM_HITTESTW* = (WM_USER + 50) + 5
  TTM_GETTEXTW* = (WM_USER + 50) + 6
  TTM_UPDATETIPTEXTW* = (WM_USER + 50) + 7
  TTM_ENUMTOOLSW* = (WM_USER + 50) + 8
  TTM_GETCURRENTTOOLW* = (WM_USER + 50) + 9
  TTM_TRACKACTIVATE* = WM_USER + 17
  TTM_TRACKPOSITION* = (WM_USER + 17) + 1
  TTM_SETTIPBKCOLOR* = (WM_USER + 17) + 2
  TTM_SETTIPTEXTCOLOR* = (WM_USER + 17) + 3
  TTM_GETDELAYTIME* = (WM_USER + 17) + 4
  TTM_GETTIPBKCOLOR* = (WM_USER + 17) + 5
  TTM_GETTIPTEXTCOLOR* = (WM_USER + 17) + 6
  TTM_SETMAXTIPWIDTH* = (WM_USER + 17) + 7
  TTM_GETMAXTIPWIDTH* = (WM_USER + 17) + 8
  TTM_SETMARGIN* = (WM_USER + 17) + 9
  TTM_GETMARGIN* = (WM_USER + 17) + 10
  TTM_POP* = (WM_USER + 17) + 11
  TTM_UPDATE* = WM_USER + 29
  TTM_GETBUBBLESIZE* = (WM_USER + 29) + 1
  TTM_ADJUSTRECT* = (WM_USER + 29) + 2
  TTM_SETTITLEA* = (WM_USER + 29) + 3
  TTM_SETTITLEW* = (WM_USER + 29) + 4
  TTN_GETDISPINFOA* = TTN_FIRST - 0
  TTN_GETDISPINFOW* = TTN_FIRST - 10
  TTN_NEEDTEXTA* = TTN_GETDISPINFOA
  TTN_NEEDTEXTW* = TTN_GETDISPINFOW
  TTN_SHOW* = TTN_FIRST-1
  TTN_POP* = TTN_FIRST-2
  UD_MAXVAL* = 0x7fff
  UD_MINVAL* = -UD_MAXVAL
  UDN_DELTAPOS* = UDN_FIRST-1
  UDS_WRAP* = 1
  UDS_SETBUDDYINT* = 2
  UDS_ALIGNRIGHT* = 4
  UDS_ALIGNLEFT* = 8
  UDS_AUTOBUDDY* = 16
  UDS_ARROWKEYS* = 32
  UDS_HORZ* = 64
  UDS_NOTHOUSANDS* = 128
  UDS_HOTTRACK* = 0x0100
  UDM_SETRANGE* = WM_USER + 101
  UDM_GETRANGE* = (WM_USER + 101) + 1
  UDM_SETPOS* = (WM_USER + 101) + 2
  UDM_GETPOS* = (WM_USER + 101) + 3
  UDM_SETBUDDY* = (WM_USER + 101) + 4
  UDM_GETBUDDY* = (WM_USER + 101) + 5
  UDM_SETACCEL* = (WM_USER + 101) + 6
  UDM_GETACCEL* = (WM_USER + 101) + 7
  UDM_SETBASE* = (WM_USER + 101) + 8
  UDM_GETBASE* = (WM_USER + 101) + 9
  UDM_SETRANGE32* = WM_USER + 111
  UDM_GETRANGE32* = (WM_USER + 111) + 1
  UDM_SETPOS32* = (WM_USER + 111) + 2
  UDM_GETPOS32* = (WM_USER + 111) + 3
  UDM_SETUNICODEFORMAT* = CCM_SETUNICODEFORMAT
  UDM_GETUNICODEFORMAT* = CCM_GETUNICODEFORMAT
  SBT_TOOLTIPS* = 0x0800
  SBN_SIMPLEMODECHANGE* = SBN_FIRST
  TBS_AUTOTICKS* = 1
  TBS_VERT* = 2
  TBS_HORZ* = 0
  TBS_TOP* = 4
  TBS_BOTTOM* = 0
  TBS_LEFT* = 4
  TBS_RIGHT* = 0
  TBS_BOTH* = 8
  TBS_NOTICKS* = 16
  TBS_ENABLESELRANGE* = 32
  TBS_FIXEDLENGTH* = 64
  TBS_NOTHUMB* = 128
  TBS_TOOLTIPS* = 0x0100
  TBTS_TOP* = 0
  TBTS_LEFT* = 1
  TBTS_BOTTOM* = 2
  TBTS_RIGHT* = 3
  TBS_REVERSED* = 0x0200
  TBS_DOWNISLEFT* = 0x0400
  TBIF_BYINDEX* = 0x80000000'i32
  TBIF_COMMAND* = 32
  TBIF_IMAGE* = 1
  TBIF_LPARAM* = 16
  TBIF_SIZE* = 64
  TBIF_STATE* = 4
  TBIF_STYLE* = 8
  TBIF_TEXT* = 2
  TBM_GETPOS* = WM_USER
  TBM_GETRANGEMIN* = WM_USER + 1
  TBM_GETRANGEMAX* = WM_USER + 2
  TBM_GETTIC* = WM_USER + 3
  TBM_SETTIC* = WM_USER + 4
  TBM_SETPOS* = WM_USER + 5
  TBM_SETRANGE* = WM_USER + 6
  TBM_SETRANGEMIN* = WM_USER + 7
  TBM_SETRANGEMAX* = WM_USER + 8
  TBM_CLEARTICS* = WM_USER + 9
  TBM_SETSEL* = WM_USER + 10
  TBM_SETSELSTART* = WM_USER + 11
  TBM_SETSELEND* = WM_USER + 12
  TBM_GETPTICS* = WM_USER+14
  TBM_GETTICPOS* = WM_USER+14 + 1
  TBM_GETNUMTICS* = WM_USER+14 + 2
  TBM_GETSELSTART* = WM_USER+14 + 3
  TBM_GETSELEND* = WM_USER+14 + 4
  TBM_CLEARSEL* = WM_USER+14 + 5
  TBM_SETTICFREQ* = WM_USER+14 + 6
  TBM_SETPAGESIZE* = WM_USER+14 + 7
  TBM_GETPAGESIZE* = WM_USER+14 + 8
  TBM_SETLINESIZE* = WM_USER+14 + 9
  TBM_GETLINESIZE* = WM_USER+14 + 10
  TBM_GETTHUMBRECT* = WM_USER+14 + 11
  TBM_GETCHANNELRECT* = WM_USER+14 + 12
  TBM_SETTHUMBLENGTH* = WM_USER+14 + 13
  TBM_GETTHUMBLENGTH* = WM_USER+14 + 14
  TBM_SETTOOLTIPS* = WM_USER+14 + 15
  TBM_GETTOOLTIPS* = WM_USER+14 + 16
  TBM_SETTIPSIDE* = WM_USER+14 + 17
  TBM_SETBUDDY* = WM_USER+14 + 18
  TBM_GETBUDDY* = WM_USER+14 + 19
  TBM_GETUNICODEFORMAT* = CCM_GETUNICODEFORMAT
  TBM_SETUNICODEFORMAT* = CCM_SETUNICODEFORMAT
  TB_LINEUP* = 0
  TB_LINEDOWN* = 1
  TB_PAGEUP* = 2
  TB_PAGEDOWN* = 3
  TB_THUMBPOSITION* = 4
  TB_THUMBTRACK* = 5
  TB_TOP* = 6
  TB_BOTTOM* = 7
  TB_ENDTRACK* = 8
  HOTKEYF_SHIFT* = 1
  HOTKEYF_CONTROL* = 2
  HOTKEYF_ALT* = 4
  HOTKEYF_EXT* = 8
  HKCOMB_NONE* = 1
  HKCOMB_S* = 2
  HKCOMB_C* = 4
  HKCOMB_A* = 8
  HKCOMB_SC* = 16
  HKCOMB_SA* = 32
  HKCOMB_CA* = 64
  HKCOMB_SCA* = 128
  HKM_SETHOTKEY* = WM_USER + 1
  HKM_GETHOTKEY* = WM_USER + 2
  HKM_SETRULES* = WM_USER + 3
  PBM_SETRANGE* = WM_USER + 1
  PBM_SETPOS* = (WM_USER + 1) + 1
  PBM_DELTAPOS* = (WM_USER + 1) + 2
  PBM_SETSTEP* = (WM_USER + 1) + 3
  PBM_STEPIT* = (WM_USER + 1) + 4
  PBM_SETRANGE32* = 1030
  PBM_GETRANGE* = 1031
  PBM_GETPOS* = 1032
  PBM_SETBARCOLOR* = 1033
  PBM_SETBKCOLOR* = CCM_SETBKCOLOR
  PBS_SMOOTH* = 1
  PBS_VERTICAL* = 4
  LVS_ICON* = 0
  LVS_REPORT* = 1
  LVS_SMALLICON* = 2
  LVS_LIST* = 3
  LVS_TYPEMASK* = 3
  LVS_SINGLESEL* = 4
  LVS_SHOWSELALWAYS* = 8
  LVS_SORTASCENDING* = 16
  LVS_SORTDESCENDING* = 32
  LVS_SHAREIMAGELISTS* = 64
  LVS_NOLABELWRAP* = 128
  LVS_AUTOARRANGE* = 256
  LVS_EDITLABELS* = 512
  LVS_NOSCROLL* = 0x2000
  LVS_TYPESTYLEMASK* = 0xFC00
  LVS_ALIGNTOP* = 0
  LVS_ALIGNLEFT* = 0x800
  LVS_ALIGNMASK* = 0xC00
  LVS_OWNERDRAWFIXED* = 0x400
  LVS_NOCOLUMNHEADER* = 0x4000
  LVS_NOSORTHEADER* = 0x8000
  CDIS_CHECKED* = 8
  CDIS_DEFAULT* = 32
  CDIS_DISABLED* = 4
  CDIS_FOCUS* = 16
  CDIS_GRAYED* = 2
  CDIS_HOT* = 64
  CDIS_SELECTED* = 1
  CDIS_MARKED* = 128
  CDIS_INDETERMINATE* = 256
  CDIS_SHOWKEYBOARDCUES* = 512
  CDDS_POSTERASE* = 4
  CDDS_POSTPAINT* = 2
  CDDS_PREERASE* = 3
  CDDS_PREPAINT* = 1
  CDDS_ITEM* = 65536
  CDDS_ITEMPOSTERASE* = 65540
  CDDS_ITEMPOSTPAINT* = 65538
  CDDS_ITEMPREERASE* = 65539
  CDDS_ITEMPREPAINT* = 65537
  CDDS_SUBITEM* = 0x20000
  CDRF_DODEFAULT* = 0x00
  CDRF_NOTIFYITEMDRAW* = 0x20
  CDRF_NOTIFYSUBITEMDRAW* = 0x20
  CDRF_NOTIFYITEMERASE* = 0x80
  CDRF_NOTIFYPOSTERASE* = 0x40
  CDRF_NOTIFYPOSTPAINT* = 0x10
  CDRF_NEWFONT* = 0x02
  CDRF_SKIPDEFAULT* = 0x04
  LVBKIF_SOURCE_NONE* = 0x00000000
  LVBKIF_SOURCE_HBITMAP* = 0x00000001
  LVBKIF_SOURCE_URL* = 0x00000002
  LVBKIF_SOURCE_MASK* = 0x00000003
  LVBKIF_STYLE_NORMAL* = 0x00000000
  LVBKIF_STYLE_TILE* = 0x00000010
  LVBKIF_STYLE_MASK* = 0x00000010
  LVBKIF_FLAG_TILEOFFSET* = 0x00000100
  LVBKIF_TYPE_WATERMARK* = 0x10000000
  LVS_OWNERDATA* = 4096
  LVS_EX_CHECKBOXES* = 4
  LVS_EX_FULLROWSELECT* = 32
  LVS_EX_GRIDLINES* = 1
  LVS_EX_HEADERDRAGDROP* = 16
  LVS_EX_ONECLICKACTIVATE* = 64
  LVS_EX_SUBITEMIMAGES* = 2
  LVS_EX_TRACKSELECT* = 8
  LVS_EX_TWOCLICKACTIVATE* = 128
  LVSICF_NOINVALIDATEALL* = 0x00000001
  LVSICF_NOSCROLL* = 0x00000002
  LVS_EX_FLATSB* = 0x00000100
  LVS_EX_REGIONAL* = 0x00000200
  LVS_EX_INFOTIP* = 0x00000400
  LVS_EX_UNDERLINEHOT* = 0x00000800
  LVS_EX_UNDERLINECOLD* = 0x00001000
  LVS_EX_MULTIWORKAREAS* = 0x00002000
  LVS_EX_LABELTIP* = 0x00004000
  LVS_EX_BORDERSELECT* = 0x00008000
  LVSIL_NORMAL* = 0
  LVSIL_SMALL* = 1
  LVSIL_STATE* = 2
  LVM_GETBKCOLOR* = LVM_FIRST
  LVM_SETBKCOLOR* = LVM_FIRST + 1
  LVM_GETIMAGELIST* = LVM_FIRST + 2
  LVM_SETIMAGELIST* = LVM_FIRST + 3
  LVM_GETITEMCOUNT* = LVM_FIRST + 4
  LVM_SORTITEMSEX* = LVM_FIRST + 81
  LVM_SETVIEW* = LVM_FIRST + 142
  LVM_GETVIEW* = (LVM_FIRST + 142) + 1
  LVM_INSERTGROUP* = LVM_FIRST + 145
  LVM_SETGROUPINFO* = LVM_FIRST + 147
  LVM_GETGROUPINFO* = LVM_FIRST + 149
  LVM_REMOVEGROUP* = (LVM_FIRST + 149) + 1
  LVM_MOVEGROUP* = (LVM_FIRST + 149) + 2
  LVM_SETGROUPMETRICS* = LVM_FIRST + 155
  LVM_GETGROUPMETRICS* = (LVM_FIRST + 155) + 1
  LVM_ENABLEGROUPVIEW* = (LVM_FIRST + 155) + 2
  LVM_SORTGROUPS* = (LVM_FIRST + 155) + 3
  LVM_INSERTGROUPSORTED* = (LVM_FIRST + 155) + 4
  LVM_REMOVEALLGROUPS* = (LVM_FIRST + 155) + 5
  LVM_HASGROUP* = (LVM_FIRST + 155) + 6
  LVM_SETTILEVIEWINFO* = (LVM_FIRST + 155) + 7
  LVM_GETTILEVIEWINFO* = (LVM_FIRST + 155) + 8
  LVM_SETTILEINFO* = (LVM_FIRST + 155) + 9
  LVM_GETTILEINFO* = (LVM_FIRST + 155) + 10
  LVM_SETINSERTMARK* = (LVM_FIRST + 155) + 11
  LVM_GETINSERTMARK* = (LVM_FIRST + 155) + 12
  LVM_INSERTMARKHITTEST* = (LVM_FIRST + 155) + 13
  LVM_GETINSERTMARKRECT* = (LVM_FIRST + 155) + 14
  LVM_SETINSERTMARKCOLOR* = (LVM_FIRST + 155) + 15
  LVM_GETINSERTMARKCOLOR* = (LVM_FIRST + 155) + 16
  LVM_SETINFOTIP* = LVM_FIRST + 173
  LVM_GETSELECTEDCOLUMN* = (LVM_FIRST + 173) + 1
  LVM_ISGROUPVIEWENABLED* = (LVM_FIRST + 173) + 2
  LVM_GETOUTLINECOLOR* = (LVM_FIRST + 173) + 3
  LVM_SETOUTLINECOLOR* = (LVM_FIRST + 173) + 4
  LVM_CANCELEDITLABEL* = LVM_FIRST + 179
  LVM_MAPIDTOINDEX* = LVM_FIRST + 181
  LVM_SETSELECTEDCOLUMN* = LVM_FIRST + 140
  LVIF_TEXT* = 1
  LVIF_IMAGE* = 2
  LVIF_PARAM* = 4
  LVIF_STATE* = 8
  LVIF_INDENT* = 16
  LVIF_NORECOMPUTE* = 2048
  LVIF_GROUPID* = 128
  LVIF_COLUMNS* = 256
  LVIS_FOCUSED* = 1
  LVIS_SELECTED* = 2
  LVIS_CUT* = 4
  LVIS_DROPHILITED* = 8
  LVIS_OVERLAYMASK* = 0xF00
  LVIS_STATEIMAGEMASK* = 0xF000
  LPSTR_TEXTCALLBACKW* = cast[LPWSTR](-1)
  LPSTR_TEXTCALLBACKA* = cast[LPSTR](-1)
  I_IMAGECALLBACK* = -1
  LVM_SETBKIMAGEA* = LVM_FIRST + 68
  LVM_SETBKIMAGEW* = LVM_FIRST + 138
  LVM_GETBKIMAGEA* = LVM_FIRST + 69
  LVM_GETBKIMAGEW* = LVM_FIRST + 139
  LV_MAX_WORKAREAS* = 16
  LVM_SETWORKAREAS* = LVM_FIRST + 65
  LVM_GETWORKAREAS* = LVM_FIRST + 70
  LVM_GETNUMBEROFWORKAREAS* = LVM_FIRST + 73
  LVM_GETSELECTIONMARK* = LVM_FIRST + 66
  LVM_SETSELECTIONMARK* = LVM_FIRST + 67
  LVM_SETHOVERTIME* = LVM_FIRST + 71
  LVM_GETHOVERTIME* = LVM_FIRST + 72
  LVM_SETTOOLTIPS* = LVM_FIRST + 74
  LVM_GETTOOLTIPS* = LVM_FIRST + 78
  LVM_SETUNICODEFORMAT* = CCM_SETUNICODEFORMAT
  LVM_GETUNICODEFORMAT* = CCM_GETUNICODEFORMAT
  LVNI_ALL* = 0
  LVNI_FOCUSED* = 1
  LVNI_SELECTED* = 2
  LVNI_CUT* = 4
  LVNI_DROPHILITED* = 8
  LVNI_ABOVE* = 256
  LVNI_BELOW* = 512
  LVNI_TOLEFT* = 1024
  LVNI_TORIGHT* = 2048
  LVM_GETITEMA* = LVM_FIRST + 5
  LVM_SETITEMA* = (LVM_FIRST + 5) + 1
  LVM_INSERTITEMA* = (LVM_FIRST + 5) + 2
  LVM_DELETEITEM* = (LVM_FIRST + 5) + 3
  LVM_DELETEALLITEMS* = (LVM_FIRST + 5) + 4
  LVM_GETCALLBACKMASK* = (LVM_FIRST + 5) + 5
  LVM_SETCALLBACKMASK* = (LVM_FIRST + 5) + 6
  LVM_GETNEXTITEM* = (LVM_FIRST + 5) + 7
  LVM_FINDITEMA* = (LVM_FIRST + 5) + 8
  LVM_GETITEMRECT* = (LVM_FIRST + 5) + 9
  LVM_SETITEMPOSITION* = (LVM_FIRST + 5) + 10
  LVM_GETITEMPOSITION* = (LVM_FIRST + 5) + 11
  LVM_GETSTRINGWIDTHA* = (LVM_FIRST + 5) + 12
  LVM_HITTEST* = (LVM_FIRST + 5) + 13
  LVM_ENSUREVISIBLE* = (LVM_FIRST + 5) + 14
  LVM_SCROLL* = (LVM_FIRST + 5) + 15
  LVM_REDRAWITEMS* = (LVM_FIRST + 5) + 16
  LVM_ARRANGE* = (LVM_FIRST + 5) + 17
  LVM_EDITLABELA* = (LVM_FIRST + 5) + 18
  LVM_GETEDITCONTROL* = (LVM_FIRST + 5) + 19
  LVM_GETCOLUMNA* = (LVM_FIRST + 5) + 20
  LVM_SETCOLUMNA* = (LVM_FIRST + 5) + 21
  LVM_INSERTCOLUMNA* = (LVM_FIRST + 5) + 22
  LVM_DELETECOLUMN* = (LVM_FIRST + 5) + 23
  LVM_GETCOLUMNWIDTH* = (LVM_FIRST + 5) + 24
  LVM_SETCOLUMNWIDTH* = (LVM_FIRST + 5) + 25
  LVM_CREATEDRAGIMAGE* = LVM_FIRST + 33
  LVM_GETVIEWRECT* = (LVM_FIRST + 33) + 1
  LVM_GETTEXTCOLOR* = (LVM_FIRST + 33) + 2
  LVM_SETTEXTCOLOR* = (LVM_FIRST + 33) + 3
  LVM_GETTEXTBKCOLOR* = (LVM_FIRST + 33) + 4
  LVM_SETTEXTBKCOLOR* = (LVM_FIRST + 33) + 5
  LVM_GETTOPINDEX* = (LVM_FIRST + 33) + 6
  LVM_GETCOUNTPERPAGE* = (LVM_FIRST + 33) + 7
  LVM_GETORIGIN* = (LVM_FIRST + 33) + 8
  LVM_UPDATE* = (LVM_FIRST + 33) + 9
  LVM_SETITEMSTATE* = (LVM_FIRST + 33) + 10
  LVM_GETITEMSTATE* = (LVM_FIRST + 33) + 11
  LVM_GETITEMTEXTA* = (LVM_FIRST + 33) + 12
  LVM_SETITEMTEXTA* = (LVM_FIRST + 33) + 13
  LVM_SETITEMCOUNT* = (LVM_FIRST + 33) + 14
  LVM_SORTITEMS* = (LVM_FIRST + 33) + 15
  LVM_SETITEMPOSITION32* = (LVM_FIRST + 33) + 16
  LVM_GETSELECTEDCOUNT* = (LVM_FIRST + 33) + 17
  LVM_GETITEMSPACING* = (LVM_FIRST + 33) + 18
  LVM_GETISEARCHSTRINGA* = (LVM_FIRST + 33) + 19
  LVM_GETITEMW* = LVM_FIRST + 75
  LVM_SETITEMW* = LVM_FIRST + 76
  LVM_INSERTITEMW* = LVM_FIRST + 77
  LVM_FINDITEMW* = LVM_FIRST + 83
  LVM_GETSTRINGWIDTHW* = LVM_FIRST + 87
  LVM_GETCOLUMNW* = LVM_FIRST + 95
  LVM_SETCOLUMNW* = LVM_FIRST + 96
  LVM_INSERTCOLUMNW* = LVM_FIRST + 97
  LVM_GETITEMTEXTW* = LVM_FIRST + 115
  LVM_SETITEMTEXTW* = (LVM_FIRST + 115) + 1
  LVM_GETISEARCHSTRINGW* = (LVM_FIRST + 115) + 2
  LVM_EDITLABELW* = (LVM_FIRST + 115) + 3
  LVM_GETHEADER* = LVM_FIRST + 31
  LVM_SETICONSPACING* = LVM_FIRST + 53
  LVM_SETEXTENDEDLISTVIEWSTYLE* = (LVM_FIRST + 53) + 1
  LVM_GETEXTENDEDLISTVIEWSTYLE* = (LVM_FIRST + 53) + 2
  LVM_GETSUBITEMRECT* = (LVM_FIRST + 53) + 3
  LVM_SUBITEMHITTEST* = (LVM_FIRST + 53) + 4
  LVM_SETCOLUMNORDERARRAY* = (LVM_FIRST + 53) + 5
  LVM_GETCOLUMNORDERARRAY* = (LVM_FIRST + 53) + 6
  LVM_SETHOTITEM* = (LVM_FIRST + 53) + 7
  LVM_GETHOTITEM* = (LVM_FIRST + 53) + 8
  LVM_SETHOTCURSOR* = (LVM_FIRST + 53) + 9
  LVM_GETHOTCURSOR* = (LVM_FIRST + 53) + 10
  LVM_APPROXIMATEVIEWRECT* = (LVM_FIRST + 53) + 11
  LVFI_PARAM* = 1
  LVFI_STRING* = 2
  LVFI_PARTIAL* = 8
  LVFI_WRAP* = 32
  LVFI_NEARESTXY* = 64
  LVIF_DI_SETITEM* = 0x1000
  LVIR_BOUNDS* = 0
  LVIR_ICON* = 1
  LVIR_LABEL* = 2
  LVIR_SELECTBOUNDS* = 3
  LVHT_NOWHERE* = 1
  LVHT_ONITEMICON* = 2
  LVHT_ONITEMLABEL* = 4
  LVHT_ONITEMSTATEICON* = 8
  LVHT_ONITEM* = LVHT_ONITEMICON or LVHT_ONITEMLABEL or LVHT_ONITEMSTATEICON
  LVHT_ABOVE* = 8
  LVHT_BELOW* = 16
  LVHT_TORIGHT* = 32
  LVHT_TOLEFT* = 64
  LVA_DEFAULT* = 0
  LVA_ALIGNLEFT* = 1
  LVA_ALIGNTOP* = 2
  LVA_SNAPTOGRID* = 5
  LVCF_FMT* = 1
  LVCF_WIDTH* = 2
  LVCF_TEXT* = 4
  LVCF_SUBITEM* = 8
  LVCF_IMAGE* = 16
  LVCF_ORDER* = 32
  LVCFMT_LEFT* = 0
  LVCFMT_RIGHT* = 1
  LVCFMT_CENTER* = 2
  LVCFMT_JUSTIFYMASK* = 3
  LVCFMT_IMAGE* = 2048
  LVCFMT_BITMAP_ON_RIGHT* = 4096
  LVCFMT_COL_HAS_IMAGES* = 32768
  LVSCW_AUTOSIZE* = -1
  LVSCW_AUTOSIZE_USEHEADER* = -2
  LVN_ITEMCHANGING* = LVN_FIRST
  LVN_ITEMCHANGED* = LVN_FIRST - 1
  LVN_INSERTITEM* = LVN_FIRST - 2
  LVN_DELETEITEM* = LVN_FIRST - 3
  LVN_DELETEALLITEMS* = LVN_FIRST - 4
  LVN_BEGINLABELEDITA* = LVN_FIRST - 5
  LVN_ENDLABELEDITA* = LVN_FIRST - 6
  LVN_COLUMNCLICK* = LVN_FIRST - 8
  LVN_BEGINDRAG* = LVN_FIRST - 9
  LVN_BEGINRDRAG* = LVN_FIRST - 11
  LVN_GETDISPINFOA* = LVN_FIRST - 50
  LVN_SETDISPINFOA* = LVN_FIRST - 51
  LVN_KEYDOWN* = LVN_FIRST - 55
  LVN_BEGINLABELEDITW* = LVN_FIRST - 75
  LVN_ENDLABELEDITW* = LVN_FIRST - 76
  LVN_GETDISPINFOW* = LVN_FIRST - 77
  LVN_SETDISPINFOW* = LVN_FIRST - 78
  LVN_MARQUEEBEGIN* = LVN_FIRST - 56
  LVN_GETINFOTIPA* = LVN_FIRST - 57
  LVN_GETINFOTIPW* = LVN_FIRST - 58
  LVKF_ALT* = 1
  LVKF_CONTROL* = 2
  LVKF_SHIFT* = 4
  LVGIT_UNFOLDED* = 1
  TVS_HASBUTTONS* = 1
  TVS_HASLINES* = 2
  TVS_LINESATROOT* = 4
  TVS_EDITLABELS* = 8
  TVS_DISABLEDRAGDROP* = 16
  TVS_SHOWSELALWAYS* = 32
  TVS_RTLREADING* = 64
  TVS_NOTOOLTIPS* = 128
  TVS_CHECKBOXES* = 256
  TVS_TRACKSELECT* = 512
  TVS_SINGLEEXPAND* = 1024
  TVS_INFOTIP* = 2048
  TVS_FULLROWSELECT* = 4096
  TVS_NOSCROLL* = 8192
  TVS_NONEVENHEIGHT* = 16384
  TVS_NOHSCROLL* = 0x8000
  TVIF_TEXT* = 1
  TVIF_IMAGE* = 2
  TVIF_PARAM* = 4
  TVIF_STATE* = 8
  TVIF_HANDLE* = 16
  TVIF_SELECTEDIMAGE* = 32
  TVIF_CHILDREN* = 64
  TVIF_INTEGRAL* = 0x0080
  TVIS_FOCUSED* = 1
  TVIS_SELECTED* = 2
  TVIS_CUT* = 4
  TVIS_DROPHILITED* = 8
  TVIS_BOLD* = 16
  TVIS_EXPANDED* = 32
  TVIS_EXPANDEDONCE* = 64
  TVIS_OVERLAYMASK* = 0xF00
  TVIS_STATEIMAGEMASK* = 0xF000
  TVIS_USERMASK* = 0xF000
  I_CHILDRENCALLBACK* = -1

type
  HTREEITEM* = HANDLE

const
  TVI_ROOT* = 0xFFFF0000.HTREEITEM
  TVI_FIRST* = 0xFFFF0001.HTREEITEM
  TVI_LAST* = 0xFFFF0002.HTREEITEM
  TVI_SORT* = 0xFFFF0003.HTREEITEM
  TVSIL_NORMAL* = 0
  TVSIL_STATE* = 2
  TVM_INSERTITEMA* = TV_FIRST
  TVM_DELETEITEM* = TV_FIRST + 1
  TVM_EXPAND* = TV_FIRST + 2
  TVM_GETITEMRECT* = TV_FIRST + 4
  TVM_GETCOUNT* = (TV_FIRST + 4) + 1
  TVM_GETINDENT* = (TV_FIRST + 4) + 2
  TVM_SETINDENT* = (TV_FIRST + 4) + 3
  TVM_GETIMAGELIST* = (TV_FIRST + 4) + 4
  TVM_SETIMAGELIST* = (TV_FIRST + 4) + 5
  TVM_GETNEXTITEM* = (TV_FIRST + 4) + 6
  TVM_SELECTITEM* = (TV_FIRST + 4) + 7
  TVM_GETITEMA* = (TV_FIRST + 4) + 8
  TVM_SETITEMA* = (TV_FIRST + 4) + 9
  TVM_EDITLABELA* = (TV_FIRST + 4) + 10
  TVM_GETEDITCONTROL* = (TV_FIRST + 4) + 11
  TVM_GETVISIBLECOUNT* = (TV_FIRST + 4) + 12
  TVM_HITTEST* = (TV_FIRST + 4) + 13
  TVM_CREATEDRAGIMAGE* = (TV_FIRST + 4) + 14
  TVM_SORTCHILDREN* = (TV_FIRST + 4) + 15
  TVM_ENSUREVISIBLE* = (TV_FIRST + 4) + 16
  TVM_SORTCHILDRENCB* = (TV_FIRST + 4) + 17
  TVM_ENDEDITLABELNOW* = (TV_FIRST + 4) + 18
  TVM_GETISEARCHSTRINGA* = (TV_FIRST + 4) + 19
  TVM_INSERTITEMW* = TV_FIRST + 50
  TVM_GETITEMW* = TV_FIRST + 62
  TVM_SETITEMW* = TV_FIRST + 63
  TVM_GETISEARCHSTRINGW* = TV_FIRST + 64
  TVM_EDITLABELW* = TV_FIRST + 65
  TVM_GETTOOLTIPS* = TV_FIRST + 25
  TVM_SETTOOLTIPS* = TV_FIRST + 24
  TVM_SETINSERTMARK* = TV_FIRST + 26
  TVM_SETITEMHEIGHT* = (TV_FIRST + 26) + 1
  TVM_GETITEMHEIGHT* = (TV_FIRST + 26) + 2
  TVM_SETBKCOLOR* = (TV_FIRST + 26) + 3
  TVM_SETTEXTCOLOR* = (TV_FIRST + 26) + 4
  TVM_GETBKCOLOR* = (TV_FIRST + 26) + 5
  TVM_GETTEXTCOLOR* = (TV_FIRST + 26) + 6
  TVM_SETSCROLLTIME* = (TV_FIRST + 26) + 7
  TVM_GETSCROLLTIME* = (TV_FIRST + 26) + 8
  TVM_SETINSERTMARKCOLOR* = TV_FIRST + 37
  TVM_GETINSERTMARKCOLOR* = TV_FIRST + 38
  TVM_SETUNICODEFORMAT* = CCM_SETUNICODEFORMAT
  TVM_GETUNICODEFORMAT* = CCM_GETUNICODEFORMAT
  TVM_GETITEMSTATE* = TV_FIRST + 39
  TVM_SETLINECOLOR* = TV_FIRST + 40
  TVM_GETLINECOLOR* = TV_FIRST + 41
  TVE_COLLAPSE* = 1
  TVE_EXPAND* = 2
  TVE_TOGGLE* = 3
  TVE_COLLAPSERESET* = 0x8000
  TVE_EXPANDPARTIAL* = 0x4000
  TVC_UNKNOWN* = 0
  TVC_BYMOUSE* = 1
  TVC_BYKEYBOARD* = 2
  TVGN_ROOT* = 0
  TVGN_NEXT* = 1
  TVGN_PREVIOUS* = 2
  TVGN_PARENT* = 3
  TVGN_CHILD* = 4
  TVGN_FIRSTVISIBLE* = 5
  TVGN_NEXTVISIBLE* = 6
  TVGN_PREVIOUSVISIBLE* = 7
  TVGN_DROPHILITE* = 8
  TVGN_CARET* = 9
  TVGN_LASTVISIBLE* = 10
  TVN_SELCHANGINGA* = TVN_FIRST - 1
  TVN_SELCHANGEDA* = TVN_FIRST - 2
  TVN_GETDISPINFOA* = TVN_FIRST - 3
  TVN_SETDISPINFOA* = TVN_FIRST - 4
  TVN_ITEMEXPANDINGA* = TVN_FIRST - 5
  TVN_ITEMEXPANDEDA* = TVN_FIRST - 6
  TVN_BEGINDRAGA* = TVN_FIRST - 7
  TVN_BEGINRDRAGA* = TVN_FIRST - 8
  TVN_DELETEITEMA* = TVN_FIRST - 9
  TVN_BEGINLABELEDITA* = TVN_FIRST - 10
  TVN_ENDLABELEDITA* = TVN_FIRST - 11
  TVN_KEYDOWN* = TVN_FIRST - 12
  TVN_SELCHANGINGW* = TVN_FIRST - 50
  TVN_SELCHANGEDW* = TVN_FIRST - 51
  TVN_GETDISPINFOW* = TVN_FIRST - 52
  TVN_SETDISPINFOW* = TVN_FIRST - 53
  TVN_ITEMEXPANDINGW* = TVN_FIRST - 54
  TVN_ITEMEXPANDEDW* = TVN_FIRST - 55
  TVN_BEGINDRAGW* = TVN_FIRST - 56
  TVN_BEGINRDRAGW* = TVN_FIRST - 57
  TVN_DELETEITEMW* = TVN_FIRST - 58
  TVN_BEGINLABELEDITW* = TVN_FIRST - 59
  TVN_ENDLABELEDITW* = TVN_FIRST - 60
  TVNRET_DEFAULT* = 0
  TVNRET_SKIPOLD* = 1
  TVNRET_SKIPNEW* = 2
  TVN_GETINFOTIPA* = TVN_FIRST - 13
  TVN_GETINFOTIPW* = TVN_FIRST - 14
  TVN_SINGLEEXPAND* = TVN_FIRST - 15
  TVIF_DI_SETITEM* = 0x1000
  TVHT_NOWHERE* = 1
  TVHT_ONITEMICON* = 2
  TVHT_ONITEMLABEL* = 4
  TVHT_ONITEMINDENT* = 8
  TVHT_ONITEMBUTTON* = 16
  TVHT_ONITEMRIGHT* = 32
  TVHT_ONITEMSTATEICON* = 64
  TVHT_ABOVE* = 256
  TVHT_BELOW* = 512
  TVHT_TORIGHT* = 1024
  TVHT_TOLEFT* = 2048
  TCHT_NOWHERE* = 1
  TCHT_ONITEMICON* = 2
  TCHT_ONITEMLABEL* = 4
  TVHT_ONITEM* = TVHT_ONITEMICON or TVHT_ONITEMLABEL or TVHT_ONITEMSTATEICON
  TCHT_ONITEM* = TCHT_ONITEMICON or TCHT_ONITEMLABEL
  TCS_TABS* = 0
  TCS_RIGHTJUSTIFY* = 0
  TCS_SINGLELINE* = 0
  TCS_FORCEICONLEFT* = 16
  TCS_FORCELABELLEFT* = 32
  TCS_BUTTONS* = 256
  TCS_MULTILINE* = 512
  TCS_FIXEDWIDTH* = 1024
  TCS_RAGGEDRIGHT* = 2048
  TCS_FOCUSONBUTTONDOWN* = 0x1000
  TCS_OWNERDRAWFIXED* = 0x2000
  TCS_TOOLTIPS* = 0x4000
  TCS_FOCUSNEVER* = 0x8000
  TCS_BOTTOM* = 2
  TCS_RIGHT* = 2
  TCS_VERTICAL* = 128
  TCS_SCROLLOPPOSITE* = 0x0001
  TCS_HOTTRACK* = 0x0040
  TCS_MULTISELECT* = 0x0004
  TCS_FLATBUTTONS* = 0x0008
  TCS_EX_FLATSEPARATORS* = 0x00000001
  TCS_EX_REGISTERDROP* = 0x00000002
  TCIF_TEXT* = 1
  TCIF_IMAGE* = 2
  TCIF_RTLREADING* = 4
  TCIF_PARAM* = 8
  TCIF_STATE* = 16
  TCIS_BUTTONPRESSED* = 1
  TCIS_HIGHLIGHTED* = 2
  TCM_FIRST* = 0x1300
  TCM_GETIMAGELIST* = TCM_FIRST + 2
  TCM_SETIMAGELIST* = (TCM_FIRST + 2) + 1
  TCM_GETITEMCOUNT* = (TCM_FIRST + 2) + 2
  TCM_GETITEMA* = (TCM_FIRST + 2) + 3
  TCM_SETITEMA* = (TCM_FIRST + 2) + 4
  TCM_INSERTITEMA* = (TCM_FIRST + 2) + 5
  TCM_DELETEITEM* = (TCM_FIRST + 2) + 6
  TCM_DELETEALLITEMS* = (TCM_FIRST + 2) + 7
  TCM_GETITEMRECT* = (TCM_FIRST + 2) + 8
  TCM_GETCURSEL* = (TCM_FIRST + 2) + 9
  TCM_SETCURSEL* = (TCM_FIRST + 2) + 10
  TCM_HITTEST* = (TCM_FIRST + 2) + 11
  TCM_SETITEMEXTRA* = (TCM_FIRST + 2) + 12
  TCM_ADJUSTRECT* = TCM_FIRST + 40
  TCM_SETITEMSIZE* = (TCM_FIRST + 40) + 1
  TCM_REMOVEIMAGE* = (TCM_FIRST + 40) + 2
  TCM_SETPADDING* = (TCM_FIRST + 40) + 3
  TCM_GETROWCOUNT* = (TCM_FIRST + 40) + 4
  TCM_GETTOOLTIPS* = (TCM_FIRST + 40) + 5
  TCM_SETTOOLTIPS* = (TCM_FIRST + 40) + 6
  TCM_GETCURFOCUS* = (TCM_FIRST + 40) + 7
  TCM_SETCURFOCUS* = (TCM_FIRST + 40) + 8
  TCM_SETMINTABWIDTH* = (TCM_FIRST + 40) + 9
  TCM_DESELECTALL* = (TCM_FIRST + 40) + 10
  TCM_GETITEMW* = TCM_FIRST + 60
  TCM_SETITEMW* = TCM_FIRST + 61
  TCM_INSERTITEMW* = TCM_FIRST + 62
  TCM_HIGHLIGHTITEM* = TCM_FIRST + 51
  TCM_SETEXTENDEDSTYLE* = TCM_FIRST + 52
  TCM_GETEXTENDEDSTYLE* = TCM_FIRST + 53
  TCM_SETUNICODEFORMAT* = CCM_SETUNICODEFORMAT
  TCM_GETUNICODEFORMAT* = CCM_GETUNICODEFORMAT
  TCN_KEYDOWN* = TCN_FIRST
  TCN_SELCHANGE* = TCN_FIRST - 1
  TCN_SELCHANGING* = TCN_FIRST - 2
  NM_OUTOFMEMORY* = NM_FIRST - 1
  NM_CLICK* = NM_FIRST - 2
  NM_DBLCLK* = NM_FIRST - 3
  NM_RETURN* = NM_FIRST - 4
  NM_RCLICK* = NM_FIRST - 5
  NM_RDBLCLK* = NM_FIRST - 6
  NM_SETFOCUS* = NM_FIRST - 7
  NM_KILLFOCUS* = NM_FIRST - 8
  NM_CUSTOMDRAW* = NM_FIRST - 12
  NM_HOVER* = NM_FIRST - 13
  NM_NCHITTEST* = NM_FIRST - 14
  NM_KEYDOWN* = NM_FIRST - 15
  NM_RELEASEDCAPTURE* = NM_FIRST - 16
  NM_SETCURSOR* = NM_FIRST - 17
  NM_CHAR* = NM_FIRST - 18
  NM_TOOLTIPSCREATED* = NM_FIRST - 19
  SBARS_SIZEGRIP* = 256
  CCM_SETWINDOWTHEME* = 0x200b
  CCM_DPISCALE* = 0x200c
  ICC_LISTVIEW_CLASSES* = 1
  ICC_TREEVIEW_CLASSES* = 2
  ICC_BAR_CLASSES* = 4
  ICC_TAB_CLASSES* = 8
  ICC_UPDOWN_CLASS* = 16
  ICC_PROGRESS_CLASS* = 32
  ICC_HOTKEY_CLASS* = 64
  ICC_ANIMATE_CLASS* = 128
  ICC_WIN95_CLASSES* = 255
  ICC_DATE_CLASSES* = 256
  ICC_USEREX_CLASSES* = 512
  ICC_COOL_CLASSES* = 1024
  INFOTIPSIZE* = 1024
  ICC_INTERNET_CLASSES* = 2048
  ICC_PAGESCROLLER_CLASS* = 4096
  ICC_NATIVEFNTCTL_CLASS* = 8192
  ICC_STANDARD_CLASSES* = 0x00004000
  ICC_LINK_CLASS* = 0x00008000
  GDTR_MIN* = 1
  GDTR_MAX* = 2
  GMR_VISIBLE* = 0
  GMR_DAYSTATE* = 1
  GDT_ERROR* = -1
  GDT_VALID* = 0
  GDT_NONE* = 1
  DTS_SHORTDATEFORMAT* = 0
  DTS_UPDOWN* = 1
  DTS_SHOWNONE* = 2
  DTS_LONGDATEFORMAT* = 4
  DTS_TIMEFORMAT* = 9
  DTS_APPCANPARSE* = 16
  DTS_RIGHTALIGN* = 32
  DTS_SHORTDATECENTURYFORMAT* = 0x000C
  MCS_DAYSTATE* = 1
  MCS_MULTISELECT* = 2
  MCS_WEEKNUMBERS* = 4
  MCS_NOTODAYCIRCLE* = 0x0008
  MCS_NOTODAY* = 0x0010
  DTM_GETSYSTEMTIME* = 0x1001
  DTM_SETSYSTEMTIME* = 0x1002
  DTM_GETRANGE* = 0x1003
  DTM_SETRANGE* = 0x1004
  DTM_SETFORMATA* = 0x1005
  DTM_SETMCCOLOR* = 0x1006
  DTM_GETMCCOLOR* = 0x1007
  DTM_GETMONTHCAL* = 0x1008
  DTM_SETMCFONT* = 0x1009
  DTM_GETMCFONT* = 0x100a
  DTM_SETFORMATW* = 0x1050
  DTN_USERSTRINGA* = -758
  DTN_USERSTRINGW* = -745
  DTN_WMKEYDOWNA* = -757
  DTN_WMKEYDOWNW* = -744
  DTN_FORMATA* = -756
  DTN_FORMATW* = -743
  DTN_FORMATQUERYA* = -755
  DTN_FORMATQUERYW* = -742
  DTN_DROPDOWN* = -754
  DTN_CLOSEUP* = -753
  DTN_DATETIMECHANGE* = -759
  MCM_GETCURSEL* = 0x1001
  MCM_SETCURSEL* = 0x1002
  MCM_GETMAXSELCOUNT* = 0x1003
  MCM_SETMAXSELCOUNT* = 0x1004
  MCM_GETSELRANGE* = 0x1005
  MCM_SETSELRANGE* = 0x1006
  MCM_GETMONTHRANGE* = 0x1007
  MCM_SETDAYSTATE* = 0x1008
  MCM_GETMINREQRECT* = 0x1009
  MCM_SETCOLOR* = 0x100a
  MCM_GETCOLOR* = 0x100b
  MCM_SETTODAY* = 0x100c
  MCM_GETTODAY* = 0x100d
  MCM_HITTEST* = 0x100e
  MCM_SETFIRSTDAYOFWEEK* = 0x100f
  MCM_GETFIRSTDAYOFWEEK* = 0x1010
  MCM_GETRANGE* = 0x1011
  MCM_SETRANGE* = 0x1012
  MCM_GETMONTHDELTA* = 0x1013
  MCM_SETMONTHDELTA* = 0x1014
  MCM_GETMAXTODAYWIDTH* = 0x1015
  MCM_GETUNICODEFORMAT* = CCM_GETUNICODEFORMAT
  MCM_SETUNICODEFORMAT* = CCM_SETUNICODEFORMAT
  MCN_SELCHANGE* = -749
  MCN_GETDAYSTATE* = -747
  MCN_SELECT* = -746
  ODT_HEADER* = 100
  ODT_TAB* = 101
  ODT_LISTVIEW* = 102
  SB_SETBKCOLOR* = 0x2001
  SB_ISSIMPLE* = 1038
  MCSC_BACKGROUND* = 0
  MCSC_TEXT* = 1
  MCSC_TITLEBK* = 2
  MCSC_TITLETEXT* = 3
  MCSC_MONTHBK* = 4
  MCSC_TRAILINGTEXT* = 5
  MCHT_TITLE* = 0x10000
  MCHT_CALENDAR* = 0x20000
  MCHT_TODAYLINK* = 0x30000
  MCHT_NEXT* = 0x1000000
  MCHT_PREV* = 0x2000000
  MCHT_NOWHERE* = 0x00
  MCHT_TITLEBK* = MCHT_TITLE
  MCHT_TITLEMONTH* = MCHT_TITLE or 0x0001
  MCHT_TITLEYEAR* = MCHT_TITLE or 0x0002
  MCHT_TITLEBTNNEXT* = MCHT_TITLE or MCHT_NEXT or 0x0003
  MCHT_TITLEBTNPREV* = MCHT_TITLE or MCHT_PREV or 0x0003
  MCHT_CALENDARBK* = MCHT_CALENDAR
  MCHT_CALENDARDATE* = MCHT_CALENDAR or 0x0001
  MCHT_CALENDARDATENEXT* = MCHT_CALENDARDATE or MCHT_NEXT
  MCHT_CALENDARDATEPREV* = MCHT_CALENDARDATE or MCHT_PREV
  MCHT_CALENDARDAY* = MCHT_CALENDAR or 0x0002
  MCHT_CALENDARWEEKNUM* = MCHT_CALENDAR or 0x0003
  RBS_TOOLTIPS* = 256
  RBS_VARHEIGHT* = 512
  RBS_BANDBORDERS* = 1024
  RBS_FIXEDORDER* = 2048
  RBIM_IMAGELIST* = 1
  RB_SETCOLORSCHEME* = CCM_SETCOLORSCHEME
  RB_GETCOLORSCHEME* = CCM_GETCOLORSCHEME
  RBBS_BREAK* = 0x0001
  RBBS_FIXEDSIZE* = 0x0002
  RBBS_CHILDEDGE* = 0x0004
  RBBS_HIDDEN* = 0x0008
  RBBS_NOVERT* = 0x0010
  RBBS_FIXEDBMP* = 0x0020
  RBBS_VARIABLEHEIGHT* = 0x0040
  RBBS_GRIPPERALWAYS* = 0x0080
  RBBS_NOGRIPPER* = 0x0100
  RBBS_USECHEVRON* = 0x0200
  RBBS_HIDETITLE* = 0x0400
  RBBS_TOPALIGN* = 0x0800
  RBBIM_STYLE* = 1
  RBBIM_COLORS* = 2
  RBBIM_TEXT* = 4
  RBBIM_IMAGE* = 8
  RBBIM_CHILD* = 16
  RBBIM_CHILDSIZE* = 32
  RBBIM_SIZE* = 64
  RBBIM_BACKGROUND* = 128
  RBBIM_ID* = 256
  RB_INSERTBANDA* = WM_USER + 1
  RB_DELETEBAND* = (WM_USER + 1) + 1
  RB_GETBARINFO* = (WM_USER + 1) + 2
  RB_SETBARINFO* = (WM_USER + 1) + 3
  RB_SETBANDINFOA* = WM_USER + 6
  RB_SETPARENT* = WM_USER + 7
  RB_INSERTBANDW* = WM_USER + 10
  RB_SETBANDINFOW* = (WM_USER + 10) + 1
  RB_GETBANDCOUNT* = (WM_USER + 10) + 2
  RB_GETROWCOUNT* = (WM_USER + 10) + 3
  RB_GETROWHEIGHT* = (WM_USER + 10) + 4
  RBN_HEIGHTCHANGE* = RBN_FIRST
  LVN_ODCACHEHINT* = LVN_FIRST - 13
  LVN_ODFINDITEMA* = LVN_FIRST - 52
  LVN_ODFINDITEMW* = LVN_FIRST - 79
  LVN_ITEMACTIVATE* = LVN_FIRST - 14
  LVN_ODSTATECHANGED* = LVN_FIRST - 15

when not defined(winansi):
  const
    LVN_ODFINDITEM* = LVN_ODFINDITEMW

else:
  const
    LVN_ODFINDITEM* = LVN_ODFINDITEMA

const
  SB_SETICON* = 1039
  SB_SETTIPTEXTA* = 1040
  SB_SETTIPTEXTW* = 1041
  SB_GETTIPTEXTA* = 1042
  SB_GETTIPTEXTW* = 1043
  SB_GETICON* = 1044
  SB_SETUNICODEFORMAT* = 0x2005
  SB_GETUNICODEFORMAT* = 0x2006
  PGF_INVISIBLE* = 0
  PGF_NORMAL* = 1
  PGF_GRAYED* = 2
  PGF_DEPRESSED* = 4
  PGF_HOT* = 8
  PGB_TOPORLEFT* = 0
  PGB_BOTTOMORRIGHT* = 1
  PGF_SCROLLUP* = 1
  PGF_SCROLLDOWN* = 2
  PGF_SCROLLLEFT* = 4
  PGF_SCROLLRIGHT* = 8
  PGK_SHIFT* = 1
  PGK_CONTROL* = 2
  PGK_MENU* = 4
  PGF_CALCWIDTH* = 1
  PGF_CALCHEIGHT* = 2
  PGM_FIRST* = 0x1400
  PGM_SETCHILD* = PGM_FIRST + 1
  PGM_RECALCSIZE* = (PGM_FIRST + 1) + 1
  PGM_FORWARDMOUSE* = (PGM_FIRST + 1) + 2
  PGM_SETBKCOLOR* = (PGM_FIRST + 1) + 3
  PGM_GETBKCOLOR* = (PGM_FIRST + 1) + 4
  PGM_SETBORDER* = (PGM_FIRST + 1) + 5
  PGM_GETBORDER* = (PGM_FIRST + 1) + 6
  PGM_SETPOS* = (PGM_FIRST + 1) + 7
  PGM_GETPOS* = (PGM_FIRST + 1) + 8
  PGM_SETBUTTONSIZE* = (PGM_FIRST + 1) + 9
  PGM_GETBUTTONSIZE* = (PGM_FIRST + 1) + 10
  PGM_GETBUTTONSTATE* = (PGM_FIRST + 1) + 11
  PGM_GETDROPTARGET* = CCM_GETDROPTARGET
  RBS_REGISTERDROP* = 4096
  RBS_AUTOSIZE* = 8192
  RBS_VERTICALGRIPPER* = 16384
  RBS_DBLCLKTOGGLE* = 32768
  RBBIM_IDEALSIZE* = 512
  RBBIM_LPARAM* = 1024
  RBBIM_HEADERSIZE* = 2048
  RB_HITTEST* = WM_USER + 8
  RB_GETRECT* = WM_USER + 9
  RB_IDTOINDEX* = WM_USER + 16
  RB_GETTOOLTIPS* = (WM_USER + 16) + 1
  RB_SETTOOLTIPS* = (WM_USER + 16) + 2
  RB_SETBKCOLOR* = (WM_USER + 16) + 3
  RB_GETBKCOLOR* = (WM_USER + 16) + 4
  RB_SETTEXTCOLOR* = (WM_USER + 16) + 5
  RB_GETTEXTCOLOR* = (WM_USER + 16) + 6
  RB_SIZETORECT* = (WM_USER + 16) + 7
  RB_BEGINDRAG* = (WM_USER + 16) + 8
  RB_ENDDRAG* = (WM_USER + 16) + 9
  RB_DRAGMOVE* = (WM_USER + 16) + 10
  RB_GETBARHEIGHT* = (WM_USER + 16) + 11
  RB_GETBANDINFOW* = (WM_USER + 16) + 12
  RB_GETBANDINFOA* = (WM_USER + 16) + 13
  RB_MINIMIZEBAND* = (WM_USER + 16) + 14
  RB_MAXIMIZEBAND* = (WM_USER + 16) + 15
  RB_GETDROPTARGET* = CCM_GETDROPTARGET
  RB_GETBANDBORDERS* = WM_USER + 34
  RB_SHOWBAND* = WM_USER + 35
  RB_SETPALETTE* = WM_USER + 37
  RB_GETPALETTE* = WM_USER + 38
  RB_MOVEBAND* = WM_USER + 39
  RB_SETUNICODEFORMAT* = CCM_SETUNICODEFORMAT
  RB_GETUNICODEFORMAT* = CCM_GETUNICODEFORMAT
  RBN_GETOBJECT* = RBN_FIRST - 1
  RBN_LAYOUTCHANGED* = RBN_FIRST - 2
  RBN_AUTOSIZE* = RBN_FIRST - 3
  RBN_BEGINDRAG* = RBN_FIRST - 4
  RBN_ENDDRAG* = RBN_FIRST - 5
  RBN_DELETINGBAND* = RBN_FIRST - 6
  RBN_DELETEDBAND* = RBN_FIRST - 7
  RBN_CHILDSIZE* = RBN_FIRST - 8
  RBNM_ID* = 1
  RBNM_STYLE* = 2
  RBNM_LPARAM* = 4
  RBHT_NOWHERE* = 1
  RBHT_CAPTION* = 2
  RBHT_CLIENT* = 3
  RBHT_GRABBER* = 4

when not defined(winansi):
  const
    SB_SETTIPTEXT* = SB_SETTIPTEXTW
    SB_GETTIPTEXT* = SB_GETTIPTEXTW
    RB_GETBANDINFO* = RB_GETBANDINFOW

else:
  const
    SB_SETTIPTEXT* = SB_SETTIPTEXTA
    SB_GETTIPTEXT* = SB_GETTIPTEXTA
    RB_GETBANDINFO* = RB_GETBANDINFOA

const
  CBEM_INSERTITEMA* = WM_USER + 1
  CBEM_SETIMAGELIST* = (WM_USER + 1) + 1
  CBEM_GETIMAGELIST* = (WM_USER + 1) + 2
  CBEM_GETITEMA* = (WM_USER + 1) + 3
  CBEM_SETITEMA* = (WM_USER + 1) + 4
  CBEM_GETCOMBOCONTROL* = (WM_USER + 1) + 5
  CBEM_GETEDITCONTROL* = (WM_USER + 1) + 6
  CBEM_SETEXSTYLE* = (WM_USER + 1) + 7
  CBEM_GETEXSTYLE* = (WM_USER + 1) + 8
  CBEM_DELETEITEM* = CB_DELETESTRING
  CBEM_SETEXTENDEDSTYLE* = WM_USER + 14
  CBEM_GETEXTENDEDSTYLE* = WM_USER + 9
  CBEM_SETUNICODEFORMAT* = CCM_SETUNICODEFORMAT
  CBEM_GETUNICODEFORMAT* = CCM_GETUNICODEFORMAT
  CBEM_HASEDITCHANGED* = WM_USER + 10
  CBEM_INSERTITEMW* = WM_USER + 11
  CBEM_SETITEMW* = WM_USER + 12
  CBEM_GETITEMW* = WM_USER + 13
  DA_LAST* = 0x7fffffff
  DPA_APPEND* = 0x7fffffff
  DPA_ERR* = -1
  DSA_APPEND* = 0x7fffffff
  DSA_ERR* = -1
  DPAS_SORTED* = 1
  DPAS_INSERTBEFORE* = 2
  DPAS_INSERTAFTER* = 4
  WSB_PROP_CYVSCROLL* = 1
  WSB_PROP_CXHSCROLL* = 2
  WSB_PROP_CYHSCROLL* = 4
  WSB_PROP_CXVSCROLL* = 8
  WSB_PROP_CXHTHUMB* = 16
  WSB_PROP_CYVTHUMB* = 32
  WSB_PROP_VBKGCOLOR* = 64
  WSB_PROP_HBKGCOLOR* = 128
  WSB_PROP_VSTYLE* = 256
  WSB_PROP_HSTYLE* = 512
  WSB_PROP_WINSTYLE* = 1024
  WSB_PROP_PALETTE* = 2048
  WSB_PROP_MASK* = 0xfff
  FSB_FLAT_MODE* = 2
  FSB_ENCARTA_MODE* = 1
  FSB_REGULAR_MODE* = 0
  LIF_ITEMINDEX* = 1
  LIF_STATE* = 2
  LIF_ITEMID* = 4
  LIF_URL* = 8
  LIS_FOCUSED* = 1
  LIS_ENABLED* = 2
  LIS_VISITED* = 4
  LM_HITTEST* = WM_USER + 768
  LM_GETIDEALHEIGHT* = (WM_USER + 768) + 1
  LM_SETITEM* = (WM_USER + 768) + 2
  LM_GETITEM* = (WM_USER + 768) + 3
  MAX_LINKID_TEXT* = 48
  L_MAX_URL_LENGTH* = 2084

type
  COMBOBOXEXITEMA* {.final, pure.} = object
    mask*: UINT
    iItem*: int32
    pszText*: LPSTR
    cchTextMax*: int32
    iImage*: int32
    iSelectedImage*: int32
    iOverlay*: int32
    iIndent*: int32
    lParam*: LPARAM
  PCOMBOBOXEXITEMA* = ptr COMBOBOXEXITEMA
  PCCOMBOEXITEMA* = ptr COMBOBOXEXITEMA
  COMBOBOXEXITEMW* {.final, pure.} = object
    mask*: UINT
    iItem*: int32
    pszText*: LPWSTR
    cchTextMax*: int32
    iImage*: int32
    iSelectedImage*: int32
    iOverlay*: int32
    iIndent*: int32
    lParam*: LPARAM
  PCOMBOBOXEXITEMW* = ptr COMBOBOXEXITEMW
  PCCOMBOEXITEMW* = ptr COMBOBOXEXITEMW
  NMCOMBOBOXEXA* {.final, pure.} = object
    hdr*: NMHDR
    ceItem*: COMBOBOXEXITEMA
  PNMCOMBOBOXEXA* = ptr NMCOMBOBOXEXA
  NMCOMBOBOXEXW* {.final, pure.} = object
    hdr*: NMHDR
    ceItem*: COMBOBOXEXITEMW
  PNMCOMBOBOXEXW* = ptr NMCOMBOBOXEXW
  NMCBEDRAGBEGINW* {.final, pure.} = object
    hdr*: NMHDR
    iItemid*: int32
    szText*: array[CBEMAXSTRLEN, WCHAR]
  LPNMCBEDRAGBEGINW* = ptr NMCBEDRAGBEGINW
  PNMCBEDRAGBEGINW* = ptr NMCBEDRAGBEGINW
  NMCBEDRAGBEGINA* {.final, pure.} = object
    hdr*: NMHDR
    iItemid*: int32
    szText*: array[CBEMAXSTRLEN, char]
  LPNMCBEDRAGBEGINA* = ptr NMCBEDRAGBEGINA
  PNMCBEDRAGBEGINA* = ptr NMCBEDRAGBEGINA
  NMIPADDRESS* {.final, pure.} = object
    hdr*: NMHDR
    iField*: int32
    iValue*: int32
  LPNMIPADDRESS* = ptr NMIPADDRESS
  NMLVKEYDOWN* {.final, pure.} = object
    hdr*: NMHDR
    wVKey*: WORD
    flags*: UINT
  LPNMLVKEYDOWN* = ptr NMLVKEYDOWN
  NMPGCALCSIZE* {.final, pure.} = object
    hdr*: NMHDR
    dwFlag*: DWORD
    iWidth*: int32
    iHeight*: int32
  LPNMPGCALCSIZE* = ptr NMPGCALCSIZE
  NMPGSCROLL* {.final, pure.} = object
    hdr*: NMHDR
    fwKeys*: BOOL
    rcParent*: RECT
    iDir*: int32
    iXpos*: int32
    iYpos*: int32
    iScroll*: int32
  LPNMPGSCROLL* = ptr NMPGSCROLL
  NMSELCHANGE* {.final, pure.} = object
    nmhdr*: NMHDR
    stSelStart*: SYSTEMTIME
    stSelEnd*: SYSTEMTIME
  LPNMSELCHANGE* = ptr NMSELCHANGE
  NMTBHOTITEM* {.final, pure.} = object
    hdr*: NMHDR
    idOld*: int32
    idNew*: int32
    dwFlags*: DWORD
  LPNMTBHOTITEM* = ptr NMTBHOTITEM
  NMTBDISPINFOA* {.final, pure.} = object
    hdr*: NMHDR
    dwMask*: DWORD
    idCommand*: int32
    lParam*: DWORD_PTR
    iImage*: int32
    pszText*: LPSTR
    cchText*: int32
  LPNMTBDISPINFOA* = ptr NMTBDISPINFOA
  NMTBDISPINFOW* {.final, pure.} = object
    hdr*: NMHDR
    dwMask*: DWORD
    idCommand*: int32
    lParam*: DWORD_PTR
    iImage*: int32
    pszText*: LPWSTR
    cchText*: int32
  LPNMTBDISPINFOW* = ptr NMTBDISPINFOW
  NMTBGETINFOTIPA* {.final, pure.} = object
    hdr*: NMHDR
    pszText*: LPSTR
    cchTextMax*: int32
    iItem*: int32
    lParam*: LPARAM
  LPNMTBGETINFOTIPA* = ptr NMTBGETINFOTIPA
  NMTBGETINFOTIPW* {.final, pure.} = object
    hdr*: NMHDR
    pszText*: LPWSTR
    cchTextMax*: int32
    iItem*: int32
    lParam*: LPARAM
  LPNMTBGETINFOTIPW* = ptr NMTBGETINFOTIPW
  NMMOUSE* {.final, pure.} = object
    hdr*: NMHDR
    dwItemSpec*: DWORD_PTR
    dwItemData*: DWORD_PTR
    pt*: POINT
    dwHitInfo*: LPARAM
  LPNMMOUSE* = ptr NMMOUSE
  TNMTOOLTIPSCREATED* {.final, pure.} = object # renamed from NMTOOLTIPSCREATED
    hdr*: NMHDR
    hwndToolTips*: HWND
  LPNMTOOLTIPSCREATED* = ptr TNMTOOLTIPSCREATED
  NMDATETIMECHANGE* {.final, pure.} = object
    nmhdr*: NMHDR
    dwFlags*: DWORD
    st*: SYSTEMTIME
  LPNMDATETIMECHANGE* = ptr NMDATETIMECHANGE
  NMCBEENDEDITW* {.final, pure.} = object
    hdr*: NMHDR
    fChanged*: BOOL
    iNewSelection*: int32
    szText*: array[CBEMAXSTRLEN, WCHAR]
    iWhy*: int32
  LPNMCBEENDEDITW* = ptr NMCBEENDEDITW
  PNMCBEENDEDITW* = ptr NMCBEENDEDITW
  NMCBEENDEDITA* {.final, pure.} = object
    hdr*: NMHDR
    fChanged*: BOOL
    iNewSelection*: int32
    szText*: array[CBEMAXSTRLEN, char]
    iWhy*: int32
  LPNMCBEENDEDITA* = ptr NMCBEENDEDITA
  PNMCBEENDEDITA* = ptr NMCBEENDEDITA
  COLORMAP* {.final, pure.} = object
    `from`*: COLORREF
    `to`*: COLORREF
  LPCOLORMAP* = ptr COLORMAP
  DRAGLISTINFO* {.final, pure.} = object
    uNotification*: UINT
    hWnd*: HWND
    ptCursor*: POINT
  LPDRAGLISTINFO* = ptr DRAGLISTINFO

when defined(cpu64):
  type
    TBBUTTON* {.final, pure.} = object
      iBitmap*: int32
      idCommand*: int32
      fsState*: BYTE
      fsStyle*: BYTE
      bReserved*: array[6, BYTE]
      dwData*: DWORD
      iString*: int32
else:
  type
    TBBUTTON* {.final, pure.} = object
      iBitmap*: int32
      idCommand*: int32
      fsState*: BYTE
      fsStyle*: BYTE
      bReserved*: array[2, BYTE]
      dwData*: DWORD
      iString*: int32

type
  PTBBUTTON* = ptr TBBUTTON
  LPTBBUTTON* = ptr TBBUTTON
  LPCTBBUTTON* = ptr TBBUTTON
  TBBUTTONINFOA* {.final, pure.} = object
    cbSize*: UINT
    dwMask*: DWORD
    idCommand*: int32
    iImage*: int32
    fsState*: BYTE
    fsStyle*: BYTE
    cx*: WORD
    lParam*: DWORD
    pszText*: LPSTR
    cchText*: int32
  LPTBBUTTONINFOA* = ptr TBBUTTONINFOA
  TBBUTTONINFOW* {.final, pure.} = object
    cbSize*: UINT
    dwMask*: DWORD
    idCommand*: int32
    iImage*: int32
    fsState*: BYTE
    fsStyle*: BYTE
    cx*: WORD
    lParam*: DWORD
    pszText*: LPWSTR
    cchText*: int32
  LPTBBUTTONINFOW* = ptr TBBUTTONINFOW
  TBINSERTMARK* {.final, pure.} = object
    iButton*: int32
    dwFlags*: DWORD
  LPTBINSERTMARK* = ptr TBINSERTMARK
  LVBKIMAGEA* {.final, pure.} = object
    ulFlags*: ULONG
    hbm*: HBITMAP
    pszImage*: LPSTR
    cchImageMax*: UINT
    xOffsetPercent*: int32
    yOffsetPercent*: int32
  LPLVBKIMAGEA* = ptr LVBKIMAGEA
  LVBKIMAGEW* {.final, pure.} = object
    ulFlags*: ULONG
    hbm*: HBITMAP
    pszImage*: LPWSTR
    cchImageMax*: UINT
    xOffsetPercent*: int32
    yOffsetPercent*: int32
  LPLVBKIMAGEW* = ptr LVBKIMAGEW
  IMAGEINFO* {.final, pure.} = object
    hbmImage*: HBITMAP
    hbmMask*: HBITMAP
    Unused1*: int32
    Unused2*: int32
    rcImage*: RECT
  LPIMAGEINFO* = ptr IMAGEINFO
  HIMAGELIST* = HANDLE
  HDITEMA* {.final, pure.} = object
    mask*: UINT
    cxy*: int32
    pszText*: LPSTR
    hbm*: HBITMAP
    cchTextMax*: int32
    fmt*: int32
    lParam*: LPARAM
    iImage*: int32
    iOrder*: int32
    `type`*: UINT
    pvFilter*: LPVOID
  HDITEMW* {.final, pure.} = object
    mask*: UINT
    cxy*: int32
    pszText*: LPWSTR
    hbm*: HBITMAP
    cchTextMax*: int32
    fmt*: int32
    lParam*: LPARAM
    iImage*: int32
    iOrder*: int32
    `type`*: UINT
    pvFilter*: LPVOID
  LPHDITEMA* = ptr HDITEMA
  LPHDITEMW* = ptr HDITEMW
  HD_LAYOUT* {.final, pure.} = object
    prc*: ptr RECT
    pwpos*: ptr WINDOWPOS
  LPHDLAYOUT* = ptr HDLAYOUT
  HD_HITTESTINFO* {.final, pure.} = object
    pt*: POINT
    flags*: UINT
    iItem*: int32
  LPHDHITTESTINFO* = ptr HD_HITTESTINFO
  HD_NOTIFYA* {.final, pure.} = object
    hdr*: NMHDR
    iItem*: int32
    iButton*: int32
    pitem*: ptr HDITEMA
  HD_NOTIFYW* {.final, pure.} = object
    hdr*: NMHDR
    iItem*: int32
    iButton*: int32
    pitem*: ptr HDITEMW
  NMHEADERA* {.final, pure.} = object
    hdr*: NMHDR
    iItem*: int32
    iButton*: int32
    pitem*: ptr HDITEMA
  LPNMHEADERA* = ptr NMHEADERA
  NMHEADERW* {.final, pure.} = object
    hdr*: NMHDR
    iItem*: int32
    iButton*: int32
    pitem*: ptr HDITEMW
  LPNMHEADERW* = ptr NMHEADERW

when not defined(winansi):
  type
    NMHEADER* = NMHEADERW
    LPNMHEADER* = LPNMHEADERW

else:
  type
    NMHEADER* = NMHEADERA
    LPNMHEADER* = LPNMHEADERA

type
  NMHDDISPINFOA* {.final, pure.} = object
    hdr*: NMHDR
    iItem*: int32
    mask*: UINT
    pszText*: LPSTR
    cchTextMax*: int32
    iImage*: int32
    lParam*: LPARAM
  LPNMHDDISPINFOA* = ptr NMHDDISPINFOA
  NMHDDISPINFOW* {.final, pure.} = object
    hdr*: NMHDR
    iItem*: int32
    mask*: UINT
    pszText*: LPWSTR
    cchTextMax*: int32
    iImage*: int32
    lParam*: LPARAM
  LPNMHDDISPINFOW* = ptr NMHDDISPINFOW
  TNMCUSTOMDRAW* {.final, pure.} = object # renamed from NMCUSTOMDRAW
    hdr*: NMHDR
    dwDrawStage*: DWORD
    hdc*: HDC
    rc*: RECT
    dwItemSpec*: DWORD
    uItemState*: UINT
    lItemlParam*: LPARAM
  LPNMCUSTOMDRAW* = ptr TNMCUSTOMDRAW
  NMLVCUSTOMDRAW* {.final, pure.} = object
    nmcd*: TNMCUSTOMDRAW
    clrText*: COLORREF
    clrTextBk*: COLORREF
    iSubItem*: int32
  LPNMLVCUSTOMDRAW* = ptr NMLVCUSTOMDRAW
  NMLVGETINFOTIPA* {.final, pure.} = object
    hdr*: NMHDR
    dwFlags*: DWORD
    pszText*: LPSTR
    cchTextMax*: int32
    iItem*: int32
    iSubItem*: int32
    lParam*: LPARAM
  LPNMLVGETINFOTIPA* = ptr NMLVGETINFOTIPA
  NMLVGETINFOTIPW* {.final, pure.} = object
    hdr*: NMHDR
    dwFlags*: DWORD
    pszText*: LPWSTR
    cchTextMax*: int32
    iItem*: int32
    iSubItem*: int32
    lParam*: LPARAM
  LPNMLVGETINFOTIPW* = ptr NMLVGETINFOTIPW
  NMTVCUSTOMDRAW* {.final, pure.} = object
    nmcd*: TNMCUSTOMDRAW
    clrText*: COLORREF
    clrTextBk*: COLORREF
    iLevel*: int32
  LPNMTVCUSTOMDRAW* = ptr NMTVCUSTOMDRAW
  NMTBCUSTOMDRAW* {.final, pure.} = object
    nmcd*: TNMCUSTOMDRAW
    hbrMonoDither*: HBRUSH
    hbrLines*: HBRUSH
    hpenLines*: HPEN
    clrText*: COLORREF
    clrMark*: COLORREF
    clrTextHighlight*: COLORREF
    clrBtnFace*: COLORREF
    clrBtnHighlight*: COLORREF
    clrHighlightHotTrack*: COLORREF
    rcText*: RECT
    nStringBkMode*: int32
    nHLStringBkMode*: int32
    iListGap*: int32
  LPNMTBCUSTOMDRAW* = ptr NMTBCUSTOMDRAW
  NMITEMACTIVATE* {.final, pure.} = object
    hdr*: NMHDR
    iItem*: int32
    iSubItem*: int32
    uNewState*: UINT
    uOldState*: UINT
    uChanged*: UINT
    ptAction*: POINT
    lParam*: LPARAM
    uKeyFlags*: UINT
  LPNMITEMACTIVATE* = ptr NMITEMACTIVATE
  TTBADDBITMAP* {.final, pure.} = object # renamed from TBADDBITMAP
    hInst*: HINSTANCE
    nID*: UINT
  LPTBADDBITMAP* = ptr TTBADDBITMAP
  TBSAVEPARAMSA* {.final, pure.} = object
    hkr*: HKEY
    pszSubKey*: LPCSTR
    pszValueName*: LPCSTR
  TBSAVEPARAMSW* {.final, pure.} = object
    hkr*: HKEY
    pszSubKey*: LPCWSTR
    pszValueName*: LPCWSTR
  TTBREPLACEBITMAP* {.final, pure.} = object # renamed from TBREPLACEBITMAP
    hInstOld*: HINSTANCE
    nIDOld*: UINT
    hInstNew*: HINSTANCE
    nIDNew*: UINT
    nButtons*: int32
  LPTBREPLACEBITMAP* = ptr TTBREPLACEBITMAP
  NMTOOLBARA* {.final, pure.} = object
    hdr*: NMHDR
    iItem*: int32
    tbButton*: TBBUTTON
    cchText*: int32
    pszText*: LPSTR
    rcButton*: RECT
  NMTOOLBARW* {.final, pure.} = object
    hdr*: NMHDR
    iItem*: int32
    tbButton*: TBBUTTON
    cchText*: int32
    pszText*: LPWSTR
    rcButton*: RECT
  LPNMTOOLBARA* = ptr NMTOOLBARA
  LPNMTOOLBARW* = ptr NMTOOLBARW
  TBNOTIFYA* = NMTOOLBARA
  LPTBNOTIFYA* = LPNMTOOLBARA
  TBNOTIFYW* = NMTOOLBARW
  LPTBNOTIFYW* = LPNMTOOLBARW
  TOOLINFOA* {.final, pure.} = object
    cbSize*: UINT
    uFlags*: UINT
    hwnd*: HWND
    uId*: UINT
    rect*: RECT
    hinst*: HINSTANCE
    lpszText*: LPSTR
    lParam*: LPARAM
    lpReserved*: pointer
  TOOLINFOW* {.final, pure.} = object
    cbSize*: UINT
    uFlags*: UINT
    hwnd*: HWND
    uId*: UINT
    rect*: RECT
    hinst*: HINSTANCE
    lpszText*: LPWSTR
    lParam*: LPARAM
    lpReserved*: pointer

# let
#   TTTOOLINFOA_V3_SIZE* = sizeof(TOOLINFOA).SIZE_T
#   TTTOOLINFOW_V3_SIZE* = sizeof(TOOLINFOW).SIZE_T
#   TTTOOLINFOA_V2_SIZE* = (sizeof(TOOLINFOA)-sizeof(pointer)).SIZE_T
#   TTTOOLINFOW_V2_SIZE* = (sizeof(TOOLINFOW)-sizeof(pointer)).SIZE_T
#   TTTOOLINFOA_V1_SIZE* = (sizeof(TOOLINFOA)-sizeof(pointer)-sizeof(LPARAM)).SIZE_T
#   TTTOOLINFOW_V1_SIZE* = (sizeof(TOOLINFOW)-sizeof(pointer)-sizeof(LPARAM)).SIZE_T

type
  TTTOOLINFOA* = TOOLINFOA
  TTTOOLINFOW* = TOOLINFOW
  LPTTTOOLINFOA* = ptr TTTOOLINFOA
  PTOOLINFOA* = ptr TTTOOLINFOA
  LPTOOLINFOA* = ptr TTTOOLINFOA
  LPTTTOOLINFOW* = ptr TTTOOLINFOW
  PTOOLINFOW* = ptr TTTOOLINFOW
  LPTOOLINFOW* = ptr TTTOOLINFOW
  TTHITTESTINFOA* {.final, pure.} = object
    hwnd*: HWND
    pt*: POINT
    ti*: TOOLINFOA
  LPTTHITTESTINFOA* = ptr TTHITTESTINFOA
  LPHITTESTINFOA* = ptr TTHITTESTINFOA
  TTHITTESTINFOW* {.final, pure.} = object
    hwnd*: HWND
    pt*: POINT
    ti*: TOOLINFOW
  LPTTHITTESTINFOW* = ptr TTHITTESTINFOW
  LPHITTESTINFOW* = ptr TTHITTESTINFOW
  NMTTDISPINFOA* {.final, pure.} = object
    hdr*: NMHDR
    lpszText*: LPSTR
    szText*: array[80, char]
    hinst*: HINSTANCE
    uFlags*: UINT
    lParam*: LPARAM
  NMTTDISPINFOW* {.final, pure.} = object
    hdr*: NMHDR
    lpszText*: LPWSTR
    szText*: array[80, WCHAR]
    hinst*: HINSTANCE
    uFlags*: UINT
    lParam*: LPARAM
  LPNMTTDISPINFOA* = ptr NMTTDISPINFOA
  LPNMTTDISPINFOW* = ptr NMTTDISPINFOW
  TOOLTIPTEXTA* = NMTTDISPINFOA
  LPTOOLTIPTEXTA* = LPNMTTDISPINFOA
  TOOLTIPTEXTW* = NMTTDISPINFOW
  LPTOOLTIPTEXTW* = LPNMTTDISPINFOW
  UDACCEL* {.final, pure.} = object
    nSec*: UINT
    nInc*: UINT
  LPUDACCEL* = ptr UDACCEL
  NMUPDOWN* {.final, pure.} = object
    hdr*: NMHDR
    iPos*: int32
    iDelta*: int32
  LPNMUPDOWN* = ptr NMUPDOWN
  LVITEMA* {.final, pure.} = object
    mask*: UINT
    iItem*: int32
    iSubItem*: int32
    state*: UINT
    stateMask*: UINT
    pszText*: LPSTR
    cchTextMax*: int32
    iImage*: int32
    lParam*: LPARAM
    iIndent*: int32
    iGroupId*: int32
    cColumns*: UINT
    puColumns*: PUINT
  LVITEMW* {.final, pure.} = object
    mask*: UINT
    iItem*: int32
    iSubItem*: int32
    state*: UINT
    stateMask*: UINT
    pszText*: LPWSTR
    cchTextMax*: int32
    iImage*: int32
    lParam*: LPARAM
    iIndent*: int32
    iGroupId*: int32
    cColumns*: UINT
    puColumns*: PUINT
  LPLVITEMA* = ptr LVITEMA
  LPLVITEMW* = ptr LVITEMW
  LVFINDINFOA* {.final, pure.} = object
    flags*: UINT
    psz*: LPCSTR
    lParam*: LPARAM
    pt*: POINT
    vkDirection*: UINT
  LVFINDINFOW* {.final, pure.} = object
    flags*: UINT
    psz*: LPCWSTR
    lParam*: LPARAM
    pt*: POINT
    vkDirection*: UINT
  LPFINDINFOA* = ptr LVFINDINFOA
  LPFINDINFOW* = ptr LVFINDINFOW
  NMLVFINDITEMA* {.final, pure.} = object
    hdr*: NMHDR
    iStart*: int32
    lvfi*: LVFINDINFOA
  NMLVFINDITEMW* {.final, pure.} = object
    hdr*: NMHDR
    iStart*: int32
    lvfi*: LVFINDINFOW
  PNMLVFINDITEMA* = ptr NMLVFINDITEMA
  LPNMLVFINDITEMA* = ptr NMLVFINDITEMA
  PNMLVFINDITEMW* = ptr NMLVFINDITEMW
  LPNMLVFINDITEMW* = ptr NMLVFINDITEMW
  LVHITTESTINFO* {.final, pure.} = object
    pt*: POINT
    flags*: UINT
    iItem*: int32
    iSubItem*: int32
  LPLVHITTESTINFO* = ptr LVHITTESTINFO
  LVCOLUMNA* {.final, pure.} = object
    mask*: UINT
    fmt*: int32
    cx*: int32
    pszText*: LPSTR
    cchTextMax*: int32
    iSubItem*: int32
    iImage*: int32
    iOrder*: int32
  LVCOLUMNW* {.final, pure.} = object
    mask*: UINT
    fmt*: int32
    cx*: int32
    pszText*: LPWSTR
    cchTextMax*: int32
    iSubItem*: int32
    iImage*: int32
    iOrder*: int32
  LPLVCOLUMNA* = ptr LVCOLUMNA
  LPLVCOLUMNW* = ptr LVCOLUMNW
  LVGROUP* {.final, pure.} = object
    cbSize*: UINT
    mask*: UINT
    pszHeader*: LPWSTR
    cchHeader*: int32
    pszFooter*: LPWSTR
    cchFooter*: int32
    iGroupId*: int32
    stateMask*: UINT
    state*: UINT
    uAlign*: UINT
  PLVGROUP* = ptr LVGROUP
  LVGROUPMETRICS* {.final, pure.} = object
    cbSize*: UINT
    mask*: UINT
    Left*: UINT
    Top*: UINT
    Right*: UINT
    Bottom*: UINT
    crLeft*: COLORREF
    crTop*: COLORREF
    crRight*: COLORREF
    crBottom*: COLORREF
    crHeader*: COLORREF
    crFooter*: COLORREF
  PLVGROUPMETRICS* = ptr LVGROUPMETRICS
  LVINSERTMARK* {.final, pure.} = object
    cbSize*: UINT
    dwFlags*: DWORD
    iItem*: int32
    dwReserved*: DWORD
  PLVINSERTMARK* = ptr LVINSERTMARK
  LVTILEINFO* {.final, pure.} = object
    cbSize*: UINT
    iItem*: int32
    cColumns*: UINT
    puColumns*: PUINT
  PLVTILEINFO* = ptr LVTILEINFO
  LVTILEVIEWINFO* {.final, pure.} = object
    cbSize*: UINT
    dwMask*: DWORD
    dwFlags*: DWORD
    sizeTile*: SIZE
    cLines*: int32
    rcLabelMargin*: RECT
  PLVTILEVIEWINFO* = ptr LVTILEVIEWINFO
  LVINSERTGROUPSORTED* {.final, pure.} = object
    pfnGroupCompare*: PFNLVGROUPCOMPARE
    pvData*: ptr LPVOID
    lvGroup*: LVGROUP
  PLVINSERTGROUPSORTED* = ptr LVINSERTGROUPSORTED
  PFNLVGROUPCOMPARE* = proc (P1: INT, P2: INT, P3: pointer): int32 {.stdcall.}
  LVSETINFOTIP* {.final, pure.} = object
    cbSize*: UINT
    dwFlags*: DWORD
    pszText*: LPWSTR
    iItem*: int32
    iSubItem*: int32
    hbmp*: HBITMAP
  PLVSETINFOTIP* = ptr LVSETINFOTIP
  PFNLVCOMPARE* = proc (P1: LPARAM, P2: LPARAM, P3: LPARAM): int32 {.stdcall.}
  NMLISTVIEW* {.final, pure.} = object
    hdr*: NMHDR
    iItem*: int32
    iSubItem*: int32
    uNewState*: UINT
    uOldState*: UINT
    uChanged*: UINT
    ptAction*: POINT
    lParam*: LPARAM
  LPNMLISTVIEW* = ptr NMLISTVIEW
  NMLVDISPINFOA* {.final, pure.} = object
    hdr*: NMHDR
    item*: LV_ITEMA
  LPNMLVDISPINFOA* = ptr NMLVDISPINFOA
  LV_DISPINFOA* = NMLVDISPINFOA
  NMLVDISPINFOW* {.final, pure.} = object
    hdr*: NMHDR
    item*: LV_ITEMW
  LPNMLVDISPINFOW* = ptr NMLVDISPINFOW
  LV_DISPINFOW* = NMLVDISPINFOW
  LV_KEYDOWN* {.final, pure.} = object
    hdr*: NMHDR
    wVKey*: WORD
    flags*: UINT
  NMLVCACHEHINT* {.final, pure.} = object
    hdr*: NMHDR
    iFrom*: int32
    iTo*: int32
  LPNMLVCACHEHINT* = ptr NMLVCACHEHINT
  PNM_CACHEHINT* = ptr NMLVCACHEHINT
  LPNM_CACHEHINT* = ptr NMLVCACHEHINT
  NM_CACHEHINT* = NMLVCACHEHINT
  TVITEMA* {.final, pure.} = object
    mask*: UINT
    hItem*: HTREEITEM
    state*: UINT
    stateMask*: UINT
    pszText*: LPSTR
    cchTextMax*: int32
    iImage*: int32
    iSelectedImage*: int32
    cChildren*: int32
    lParam*: LPARAM
  LPTVITEMA* = ptr TVITEMA
  TVITEMW* {.final, pure.} = object
    mask*: UINT
    hItem*: HTREEITEM
    state*: UINT
    stateMask*: UINT
    pszText*: LPWSTR
    cchTextMax*: int32
    iImage*: int32
    iSelectedImage*: int32
    cChildren*: int32
    lParam*: LPARAM
  LPTVITEMW* = ptr TVITEMW
  TVITEMEXA* {.final, pure.} = object
    mask*: UINT
    hItem*: HTREEITEM
    state*: UINT
    stateMask*: UINT
    pszText*: LPSTR
    cchTextMax*: int32
    iImage*: int32
    iSelectedImage*: int32
    cChildren*: int32
    lParam*: LPARAM
    iIntegral*: int32
  LPTVITEMEXA* = ptr TVITEMEXA
  TVITEMEXW* {.final, pure.} = object
    mask*: UINT
    hItem*: HTREEITEM
    state*: UINT
    stateMask*: UINT
    pszText*: LPWSTR
    cchTextMax*: int32
    iImage*: int32
    iSelectedImage*: int32
    cChildren*: int32
    lParam*: LPARAM
    iIntegral*: int32
  LPTVITEMEXW* = ptr TVITEMEXW
  TVINSERTSTRUCTA_UNION1* {.final, union, pure.} = object
    itemex*: TVITEMEXA
    item*: TV_ITEMA
  TVINSERTSTRUCTA* {.final, pure.} = object
    hParent*: HTREEITEM
    hInsertAfter*: HTREEITEM
    u1*: TVINSERTSTRUCTA_UNION1
  TVINSERTSTRUCTW_UNION1* {.final, union, pure.} = object
    itemex*: TVITEMEXW
    item*: TV_ITEMW
  TVINSERTSTRUCTW* {.final, pure.} = object
    hParent*: HTREEITEM
    hInsertAfter*: HTREEITEM
    u1*: TVINSERTSTRUCTW_UNION1
  LPTVINSERTSTRUCTA* = ptr TVINSERTSTRUCTA
  LPTVINSERTSTRUCTW* = ptr TVINSERTSTRUCTW
  TVHITTESTINFO* {.final, pure.} = object
    pt*: POINT
    flags*: UINT
    hItem*: HTREEITEM
  LPTVHITTESTINFO* = ptr TVHITTESTINFO
  PFNTVCOMPARE* = proc (P1: LPARAM, P2: LPARAM, P3: LPARAM): int32 {.stdcall.}
  TVSORTCB* {.final, pure.} = object
    hParent*: HTREEITEM
    lpfnCompare*: PFNTVCOMPARE
    lParam*: LPARAM
  LPTVSORTCB* = ptr TVSORTCB
  NMTREEVIEWA* {.final, pure.} = object
    hdr*: NMHDR
    action*: UINT
    itemOld*: TV_ITEMA
    itemNew*: TV_ITEMA
    ptDrag*: POINT
  LPNMTREEVIEWA* = ptr NMTREEVIEWA
  NMTREEVIEWW* {.final, pure.} = object
    hdr*: NMHDR
    action*: UINT
    itemOld*: TV_ITEMW
    itemNew*: TV_ITEMW
    ptDrag*: POINT
  LPNMTREEVIEWW* = ptr NMTREEVIEWW
  NMTVDISPINFOA* {.final, pure.} = object
    hdr*: NMHDR
    item*: TVITEMA
  LPNMTVDISPINFOA* = ptr NMTVDISPINFOA
  TV_DISPINFOA* = NMTVDISPINFOA
  NMTVDISPINFOW* {.final, pure.} = object
    hdr*: NMHDR
    item*: TVITEMW
  LPNMTVDISPINFOW* = ptr NMTVDISPINFOW
  TV_DISPINFOW* = NMTVDISPINFOW
  NMTVGETINFOTIPA* {.final, pure.} = object
    hdr*: NMHDR
    pszText*: LPSTR
    cchTextMax*: int32
    hItem*: HTREEITEM
    lParam*: LPARAM
  LPNMTVGETINFOTIPA* = ptr NMTVGETINFOTIPA
  NMTVGETINFOTIPW* {.final, pure.} = object
    hdr*: NMHDR
    pszText*: LPWSTR
    cchTextMax*: int32
    hItem*: HTREEITEM
    lParam*: LPARAM
  LPNMTVGETINFOTIPW* = ptr NMTVGETINFOTIPW
  TV_KEYDOWN* {.final, pure.} = object
    hdr*: NMHDR
    wVKey*: WORD
    flags*: UINT
  TC_ITEMHEADERA* {.final, pure.} = object
    mask*: UINT
    lpReserved1*: UINT
    lpReserved2*: UINT
    pszText*: LPSTR
    cchTextMax*: int32
    iImage*: int32
  TC_ITEMHEADERW* {.final, pure.} = object
    mask*: UINT
    lpReserved1*: UINT
    lpReserved2*: UINT
    pszText*: LPWSTR
    cchTextMax*: int32
    iImage*: int32
  TCITEMA* {.final, pure.} = object
    mask*: UINT
    dwState*: DWORD
    dwStateMask*: DWORD
    pszText*: LPSTR
    cchTextMax*: int32
    iImage*: int32
    lParam*: LPARAM
  TCITEMW* {.final, pure.} = object
    mask*: UINT
    dwState*: DWORD
    dwStateMask*: DWORD
    pszText*: LPWSTR
    cchTextMax*: int32
    iImage*: int32
    lParam*: LPARAM
  LPTCITEMA* = ptr TCITEMA
  LPTCITEMW* = ptr TCITEMW
  TCHITTESTINFO* {.final, pure.} = object
    pt*: POINT
    flags*: UINT
  LPTCHITTESTINFO* = ptr TCHITTESTINFO
  TC_KEYDOWN* {.final, pure.} = object
    hdr*: NMHDR
    wVKey*: WORD
    flags*: UINT
  TINITCOMMONCONTROLSEX* {.final, pure.} = object # renamed from INITCOMMONCONTROLSEX
    dwSize*: DWORD
    dwICC*: DWORD
  LPINITCOMMONCONTROLSEX* = ptr TINITCOMMONCONTROLSEX
  PBRANGE* {.final, pure.} = object
    iLow*: int32
    iHigh*: int32
  PPBRANGE* = ptr PBRANGE
  COLORSCHEME* {.final, pure.} = object
    dwSize*: DWORD
    clrBtnHighlight*: COLORREF
    clrBtnShadow*: COLORREF
  LPCOLORSCHEME* = ptr COLORSCHEME
  MCHITTESTINFO* {.final, pure.} = object
    cbSize*: UINT
    pt*: POINT
    uHit*: UINT
    st*: SYSTEMTIME
  PMCHITTESTINFO* = ptr MCHITTESTINFO
  MONTHDAYSTATE* = DWORD
  LPMONTHDAYSTATE* = ptr MONTHDAYSTATE
  NMDAYSTATE* {.final, pure.} = object
    nmhdr*: NMHDR
    stStart*: SYSTEMTIME
    cDayState*: int32
    prgDayState*: LPMONTHDAYSTATE
  LPNMDAYSTATE* = ptr NMDAYSTATE
  REBARINFO* {.final, pure.} = object
    cbSize*: UINT
    fMask*: UINT
    himl*: HIMAGELIST
  LPREBARINFO* = ptr REBARINFO
  REBARBANDINFOA* {.final, pure.} = object
    cbSize*: UINT
    fMask*: UINT
    fStyle*: UINT
    clrFore*: COLORREF
    clrBack*: COLORREF
    lpText*: LPSTR
    cch*: UINT
    iImage*: int32
    hwndChild*: HWND
    cxMinChild*: UINT
    cyMinChild*: UINT
    cx*: UINT
    hbmBack*: HBITMAP
    wID*: UINT
    cyChild*: UINT
    cyMaxChild*: UINT
    cyIntegral*: UINT
    cxIdeal*: UINT
    lParam*: LPARAM
    cxHeader*: UINT
  REBARBANDINFOW* {.final, pure.} = object
    cbSize*: UINT
    fMask*: UINT
    fStyle*: UINT
    clrFore*: COLORREF
    clrBack*: COLORREF
    lpText*: LPWSTR
    cch*: UINT
    iImage*: int32
    hwndChild*: HWND
    cxMinChild*: UINT
    cyMinChild*: UINT
    cx*: UINT
    hbmBack*: HBITMAP
    wID*: UINT
    cyChild*: UINT
    cyMaxChild*: UINT
    cyIntegral*: UINT
    cxIdeal*: UINT
    lParam*: LPARAM
    cxHeader*: UINT

# const
#   REBARBANDINFOA_V3_SIZE* = REBARBANDINFOA.cyChild.offsetof.SIZE_T
#   REBARBANDINFOW_V3_SIZE* = REBARBANDINFOW.cyChild.offsetof.SIZE_T

type
  LPREBARBANDINFOA* = ptr REBARBANDINFOA
  LPCREBARBANDINFOA* = ptr REBARBANDINFOA
  LPREBARBANDINFOW* = ptr REBARBANDINFOW
  LPCREBARBANDINFOW* = ptr REBARBANDINFOW
  NMLVODSTATECHANGE* {.final, pure.} = object
    hdr*: NMHDR
    iFrom*: int32
    iTo*: int32
    uNewState*: UINT
    uOldState*: UINT
  LPNMLVODSTATECHANGE* = ptr NMLVODSTATECHANGE
  IMAGELISTDRAWPARAMS* {.final, pure.} = object
    cbSize*: DWORD
    himl*: HIMAGELIST
    i*: int32
    hdcDst*: HDC
    x*: int32
    y*: int32
    cx*: int32
    cy*: int32
    xBitmap*: int32
    yBitmap*: int32
    rgbBk*: COLORREF
    rgbFg*: COLORREF
    fStyle*: UINT
    dwRop*: DWORD
    fState*: DWORD
    Frame*: DWORD
    crEffect*: COLORREF
  LPIMAGELISTDRAWPARAMS* = ptr IMAGELISTDRAWPARAMS
  NMREBARCHILDSIZE* {.final, pure.} = object
    hdr*: NMHDR
    uBand*: UINT
    wID*: UINT
    rcChild*: RECT
    rcBand*: RECT
  LPNMREBARCHILDSIZE* = ptr NMREBARCHILDSIZE
  NMREBAR* {.final, pure.} = object
    hdr*: NMHDR
    dwMask*: DWORD
    uBand*: UINT
    fStyle*: UINT
    wID*: UINT
    lParam*: LPARAM
  LPNMREBAR* = ptr NMREBAR
  NMRBAUTOSIZE* {.final, pure.} = object
    hdr*: NMHDR
    fChanged*: BOOL
    rcTarget*: RECT
    rcActual*: RECT
  LPNMRBAUTOSIZE* = ptr NMRBAUTOSIZE
  NMREBARCHEVRON* {.final, pure.} = object
    hdr*: NMHDR
    uBand*: UINT
    wID*: UINT
    lParam*: LPARAM
    rc*: RECT
    lParamNM*: LPARAM
  LPNMREBARCHEVRON* = ptr NMREBARCHEVRON
  RBHITTESTINFO* {.final, pure.} = object
    pt*: POINT
    flags*: UINT
    iBand*: int32
  LPRBHITTESTINFO* = ptr RBHITTESTINFO
  HDSA* = HANDLE
  HDPA* = HANDLE

when not defined(winansi):
  const
    ACM_OPEN* = ACM_OPENW
    CBEM_INSERTITEM* = CBEM_INSERTITEMW
    CBEM_SETITEM* = CBEM_SETITEMW
    CBEM_GETITEM* = CBEM_GETITEMW
    CBEN_ENDEDIT* = CBEN_ENDEDITW
    TB_GETBUTTONINFO* = TB_GETBUTTONINFOW
    TB_SETBUTTONINFO* = TB_SETBUTTONINFOW
    TB_INSERTBUTTON* = TB_INSERTBUTTONW
    TB_ADDBUTTONS* = TB_ADDBUTTONSW
    TB_MAPACCELERATOR* = TB_MAPACCELERATORW
    TB_GETSTRING* = TB_GETSTRINGW
    CBEN_DRAGBEGIN* = CBEN_DRAGBEGINW
    CBEN_GETDISPINFO* = CBEN_GETDISPINFOW
    TBN_GETDISPINFO* = TBN_GETDISPINFOW
    SB_GETTEXT* = SB_GETTEXTW
    SB_SETTEXT* = SB_SETTEXTW
    SB_GETTEXTLENGTH* = SB_GETTEXTLENGTHW
    HDM_INSERTITEM* = HDM_INSERTITEMW
    HDM_GETITEM* = HDM_GETITEMW
    HDM_SETITEM* = HDM_SETITEMW
    HDN_ITEMCHANGING* = HDN_ITEMCHANGINGW
    HDN_ITEMCHANGED* = HDN_ITEMCHANGEDW
    HDN_ITEMCLICK* = HDN_ITEMCLICKW
    HDN_ITEMDBLCLICK* = HDN_ITEMDBLCLICKW
    HDN_DIVIDERDBLCLICK* = HDN_DIVIDERDBLCLICKW
    HDN_BEGINTRACK* = HDN_BEGINTRACKW
    HDN_ENDTRACK* = HDN_ENDTRACKW
    HDN_TRACK* = HDN_TRACKW
    HDN_GETDISPINFO* = HDN_GETDISPINFOW
    TB_GETBUTTONTEXT* = TB_GETBUTTONTEXTW
    TB_SAVERESTORE* = TB_SAVERESTOREW
    TB_ADDSTRING* = TB_ADDSTRINGW
    TBN_GETBUTTONINFO* = TBN_GETBUTTONINFOW
    TTM_ADDTOOL* = TTM_ADDTOOLW
    TTM_DELTOOL* = TTM_DELTOOLW
    TTM_NEWTOOLRECT* = TTM_NEWTOOLRECTW
    TTM_GETTOOLINFO* = TTM_GETTOOLINFOW
    TTM_SETTOOLINFO* = TTM_SETTOOLINFOW
    TTM_HITTEST* = TTM_HITTESTW
    TTM_GETTEXT* = TTM_GETTEXTW
    TTM_UPDATETIPTEXT* = TTM_UPDATETIPTEXTW
    TTM_ENUMTOOLS* = TTM_ENUMTOOLSW
    TTM_GETCURRENTTOOL* = TTM_GETCURRENTTOOLW
    TTN_NEEDTEXT* = TTN_NEEDTEXTW
    TTN_GETDISPINFO* = TTN_GETDISPINFOW
    LPSTR_TEXTCALLBACK* = LPSTR_TEXTCALLBACKW
    LVM_SETBKIMAGE* = LVM_SETBKIMAGEW
    LVM_GETBKIMAGE* = LVM_GETBKIMAGEW
    LVM_GETITEM* = LVM_GETITEMW
    LVM_SETITEM* = LVM_SETITEMW
    LVM_INSERTITEM* = LVM_INSERTITEMW
    LVM_FINDITEM* = LVM_FINDITEMW
    LVM_GETSTRINGWIDTH* = LVM_GETSTRINGWIDTHW
    LVM_EDITLABEL* = LVM_EDITLABELW
    LVM_GETCOLUMN* = LVM_GETCOLUMNW
    LVM_SETCOLUMN* = LVM_SETCOLUMNW
    LVM_INSERTCOLUMN* = LVM_INSERTCOLUMNW
    LVM_GETITEMTEXT* = LVM_GETITEMTEXTW
    LVM_SETITEMTEXT* = LVM_SETITEMTEXTW
    LVM_GETISEARCHSTRING* = LVM_GETISEARCHSTRINGW
    LVN_BEGINLABELEDIT* = LVN_BEGINLABELEDITW
    LVN_ENDLABELEDIT* = LVN_ENDLABELEDITW
    LVN_GETDISPINFO* = LVN_GETDISPINFOW
    LVN_SETDISPINFO* = LVN_SETDISPINFOW
    LVN_GETINFOTIP* = LVN_GETINFOTIPW
    TVM_INSERTITEM* = TVM_INSERTITEMW
    TVM_GETITEM* = TVM_GETITEMW
    TVM_SETITEM* = TVM_SETITEMW
    TVM_EDITLABEL* = TVM_EDITLABELW
    TVM_GETISEARCHSTRING* = TVM_GETISEARCHSTRINGW
    TVN_GETINFOTIP* = TVN_GETINFOTIPW
    TVN_SELCHANGING* = TVN_SELCHANGINGW
    TVN_SELCHANGED* = TVN_SELCHANGEDW
    TVN_GETDISPINFO* = TVN_GETDISPINFOW
    TVN_SETDISPINFO* = TVN_SETDISPINFOW
    TVN_ITEMEXPANDING* = TVN_ITEMEXPANDINGW
    TVN_ITEMEXPANDED* = TVN_ITEMEXPANDEDW
    TVN_BEGINDRAG* = TVN_BEGINDRAGW
    TVN_BEGINRDRAG* = TVN_BEGINRDRAGW
    TVN_DELETEITEM* = TVN_DELETEITEMW
    TVN_BEGINLABELEDIT* = TVN_BEGINLABELEDITW
    TVN_ENDLABELEDIT* = TVN_ENDLABELEDITW
    TCM_GETITEM* = TCM_GETITEMW
    TCM_SETITEM* = TCM_SETITEMW
    TCM_INSERTITEM* = TCM_INSERTITEMW
    DTM_SETFORMAT* = DTM_SETFORMATW
    DTN_USERSTRING* = DTN_USERSTRINGW
    DTN_WMKEYDOWN* = DTN_WMKEYDOWNW
    DTN_FORMAT* = DTN_FORMATW
    DTN_FORMATQUERY* = DTN_FORMATQUERYW
    RB_INSERTBAND* = RB_INSERTBANDW
    RB_SETBANDINFO* = RB_SETBANDINFOW

  type
    HDITEM* = HDITEMW
    LPHDITEM* = LPHDITEMW
    TOOLINFO* = TOOLINFOW
    PTOOLINFO* = ptr TOOLINFOW
    LPTOOLINFO* = ptr TOOLINFOW
    TTHITTESTINFO* = TTHITTESTINFOW
    LPHITTESTINFO* = ptr TTHITTESTINFOW
    LPTTHITTESTINFO* = ptr TTHITTESTINFOW
    TOOLTIPTEXT* = TOOLTIPTEXTW
    LPTOOLTIPTEXT* = ptr TOOLTIPTEXTW
    NMTTDISPINFO* = NMTTDISPINFOW
    LPNMTTDISPINFO* = ptr NMTTDISPINFOW
    TVITEM* = TVITEMW
    LPTVITEM* = ptr TVITEMW
    TVITEMEX* = TVITEMEXW
    LPTVITEMEX* = ptr TVITEMEXW
    TVINSERTSTRUCT* = TVINSERTSTRUCTW
    LPTVINSERTSTRUCT* = ptr TVINSERTSTRUCTW
    NMTREEVIEW* = NMTREEVIEWW
    LPNMTREEVIEW* = ptr NMTREEVIEWW
    NMHDDISPINFO* = NMHDDISPINFOW
    LPNMHDDISPINFO* = ptr NMHDDISPINFOW
    COMBOBOXEXITEM* = COMBOBOXEXITEMW
    PCOMBOBOXEXITEM* = PCOMBOBOXEXITEMW
    NMCBEENDEDIT* = NMCBEENDEDITW
    LPNMCBEENDEDIT* = LPNMCBEENDEDITW
    PNMCBEENDEDIT* = PNMCBEENDEDITW
    NMCOMBOBOXEX* = NMCOMBOBOXEXW
    PNMCOMBOBOXEX* = PNMCOMBOBOXEXW
    NMCBEDRAGBEGIN* = NMCBEDRAGBEGINW
    LPNMCBEDRAGBEGIN* = LPNMCBEDRAGBEGINW
    PNMCBEDRAGBEGIN* = PNMCBEDRAGBEGINW
    HD_NOTIFY* = HD_NOTIFYW
    TBSAVEPARAMS* = TBSAVEPARAMSW
    TBBUTTONINFO* = TBBUTTONINFOW
    LPTBBUTTONINFO* = LPTBBUTTONINFOW
    NMTBDISPINFO* = NMTBDISPINFOW
    LPNMTBDISPINFO* = LPNMTBDISPINFOW
    NMTBGETINFOTIP* = NMTBGETINFOTIPW
    LPNMTBGETINFOTIP* = LPNMTBGETINFOTIPW
    TBNOTIFY* = TBNOTIFYW
    LPTBNOTIFY* = LPTBNOTIFYW
    NMTOOLBAR* = NMTOOLBARW
    LPNMTOOLBAR* = LPNMTOOLBARW
    LVITEM* = LVITEMW
    LPLVITEM* = ptr LVITEM
    LVBKIMAGE* = LVBKIMAGEW
    LPLVBKIMAGE* = LPLVBKIMAGEW
    LVFINDINFO* = LVFINDINFOW
    LPFINDINFO* = LPFINDINFOW
    NMLVFINDITEM* = NMLVFINDITEMW
    PNMLVFINDITEM* = PNMLVFINDITEMW
    LPNMLVFINDITEM* = LPNMLVFINDITEMW
    LVCOLUMN* = LVCOLUMNW
    LPLVCOLUMN* = ptr LVCOLUMNW
    NMLVGETINFOTIP* = NMLVGETINFOTIPW
    LPNMLVGETINFOTIP* = LPNMLVGETINFOTIPW
    LV_DISPINFO* = LV_DISPINFOW
    NMLVDISPINFO* = NMLVDISPINFOW
    LPNMLVDISPINFO* = LPNMLVDISPINFOW
    TV_DISPINFO* = NMTVDISPINFOW
    NMTVDISPINFO* = NMTVDISPINFOW
    LPNMTVDISPINFO* = LPNMTVDISPINFOW
    NMTVGETINFOTIP* = NMTVGETINFOTIPW
    LPNMTVGETINFOTIP* = LPNMTVGETINFOTIPW
    TC_ITEMHEADER* = TC_ITEMHEADERW
    TCITEM* = TCITEMW
    LPTCITEM* = LPTCITEMW
    REBARBANDINFO* = REBARBANDINFOW
    LPREBARBANDINFO* = ptr REBARBANDINFO
    LPCREBARBANDINFO* = LPCREBARBANDINFOW
    # REBARBANDINFO_V3_SIZE* = REBARBANDINFOW_V3_SIZE

else:
  const
    ACM_OPEN* = ACM_OPENA
    CBEM_INSERTITEM* = CBEM_INSERTITEMA
    CBEM_SETITEM* = CBEM_SETITEMA
    CBEM_GETITEM* = CBEM_GETITEMA
    CBEN_ENDEDIT* = CBEN_ENDEDITA
    TB_GETBUTTONINFO* = TB_GETBUTTONINFOA
    TB_SETBUTTONINFO* = TB_SETBUTTONINFOA
    TB_INSERTBUTTON* = TB_INSERTBUTTONA
    TB_ADDBUTTONS* = TB_ADDBUTTONSA
    TB_MAPACCELERATOR* = TB_MAPACCELERATORA
    TB_GETSTRING* = TB_GETSTRINGA
    CBEN_DRAGBEGIN* = CBEN_DRAGBEGINA
    CBEN_GETDISPINFO* = CBEN_GETDISPINFOA
    TBN_GETDISPINFO* = TBN_GETDISPINFOA
    SB_GETTEXT* = SB_GETTEXTA
    SB_SETTEXT* = SB_SETTEXTA
    SB_GETTEXTLENGTH* = SB_GETTEXTLENGTHA
    HDM_INSERTITEM* = HDM_INSERTITEMA
    HDM_GETITEM* = HDM_GETITEMA
    HDM_SETITEM* = HDM_SETITEMA
    HDN_ITEMCHANGING* = HDN_ITEMCHANGINGA
    HDN_ITEMCHANGED* = HDN_ITEMCHANGEDA
    HDN_ITEMCLICK* = HDN_ITEMCLICKA
    HDN_ITEMDBLCLICK* = HDN_ITEMDBLCLICKA
    HDN_DIVIDERDBLCLICK* = HDN_DIVIDERDBLCLICKA
    HDN_BEGINTRACK* = HDN_BEGINTRACKA
    HDN_ENDTRACK* = HDN_ENDTRACKA
    HDN_TRACK* = HDN_TRACKA
    HDN_GETDISPINFO* = HDN_GETDISPINFOA
    TB_GETBUTTONTEXT* = TB_GETBUTTONTEXTA
    TB_SAVERESTORE* = TB_SAVERESTOREA
    TB_ADDSTRING* = TB_ADDSTRINGA
    TBN_GETBUTTONINFO* = TBN_GETBUTTONINFOA
    TTM_ADDTOOL* = TTM_ADDTOOLA
    TTM_DELTOOL* = TTM_DELTOOLA
    TTM_NEWTOOLRECT* = TTM_NEWTOOLRECTA
    TTM_GETTOOLINFO* = TTM_GETTOOLINFOA
    TTM_SETTOOLINFO* = TTM_SETTOOLINFOA
    TTM_HITTEST* = TTM_HITTESTA
    TTM_GETTEXT* = TTM_GETTEXTA
    TTM_UPDATETIPTEXT* = TTM_UPDATETIPTEXTA
    TTM_ENUMTOOLS* = TTM_ENUMTOOLSA
    TTM_GETCURRENTTOOL* = TTM_GETCURRENTTOOLA
    TTN_NEEDTEXT* = TTN_NEEDTEXTA
    TTN_GETDISPINFO* = TTN_GETDISPINFOA
    LPSTR_TEXTCALLBACK* = LPSTR_TEXTCALLBACKA
    LVM_SETBKIMAGE* = LVM_SETBKIMAGEA
    LVM_GETBKIMAGE* = LVM_GETBKIMAGEA
    LVM_GETITEM* = LVM_GETITEMA
    LVM_SETITEM* = LVM_SETITEMA
    LVM_INSERTITEM* = LVM_INSERTITEMA
    LVM_FINDITEM* = LVM_FINDITEMA
    LVM_GETSTRINGWIDTH* = LVM_GETSTRINGWIDTHA
    LVM_EDITLABEL* = LVM_EDITLABELA
    LVM_GETCOLUMN* = LVM_GETCOLUMNA
    LVM_SETCOLUMN* = LVM_SETCOLUMNA
    LVM_INSERTCOLUMN* = LVM_INSERTCOLUMNA
    LVM_GETITEMTEXT* = LVM_GETITEMTEXTA
    LVM_SETITEMTEXT* = LVM_SETITEMTEXTA
    LVM_GETISEARCHSTRING* = LVM_GETISEARCHSTRINGA
    LVN_BEGINLABELEDIT* = LVN_BEGINLABELEDITA
    LVN_ENDLABELEDIT* = LVN_ENDLABELEDITA
    LVN_GETDISPINFO* = LVN_GETDISPINFOA
    LVN_SETDISPINFO* = LVN_SETDISPINFOA
    LVN_GETINFOTIP* = LVN_GETINFOTIPA
    TVM_INSERTITEM* = TVM_INSERTITEMA
    TVM_GETITEM* = TVM_GETITEMA
    TVM_SETITEM* = TVM_SETITEMA
    TVM_EDITLABEL* = TVM_EDITLABELA
    TVM_GETISEARCHSTRING* = TVM_GETISEARCHSTRINGA
    TVN_GETINFOTIP* = TVN_GETINFOTIPA
    TVN_SELCHANGING* = TVN_SELCHANGINGA
    TVN_SELCHANGED* = TVN_SELCHANGEDA
    TVN_GETDISPINFO* = TVN_GETDISPINFOA
    TVN_SETDISPINFO* = TVN_SETDISPINFOA
    TVN_ITEMEXPANDING* = TVN_ITEMEXPANDINGA
    TVN_ITEMEXPANDED* = TVN_ITEMEXPANDEDA
    TVN_BEGINDRAG* = TVN_BEGINDRAGA
    TVN_BEGINRDRAG* = TVN_BEGINRDRAGA
    TVN_DELETEITEM* = TVN_DELETEITEMA
    TVN_BEGINLABELEDIT* = TVN_BEGINLABELEDITA
    TVN_ENDLABELEDIT* = TVN_ENDLABELEDITA
    TCM_GETITEM* = TCM_GETITEMA
    TCM_SETITEM* = TCM_SETITEMA
    TCM_INSERTITEM* = TCM_INSERTITEMA
    DTM_SETFORMAT* = DTM_SETFORMATA
    DTN_USERSTRING* = DTN_USERSTRINGA
    DTN_WMKEYDOWN* = DTN_WMKEYDOWNA
    DTN_FORMAT* = DTN_FORMATA
    DTN_FORMATQUERY* = DTN_FORMATQUERYA
    RB_INSERTBAND* = RB_INSERTBANDA
    RB_SETBANDINFO* = RB_SETBANDINFOA

  type
    HDITEM* = HDITEMA
    LPHDITEM* = LPHDITEMA
    TOOLINFO* = TOOLINFOA
    PTOOLINFO* = ptr TOOLINFOA
    LPTOOLINFO* = ptr TOOLINFOA
    TTHITTESTINFO* = TTHITTESTINFOA
    LPHITTESTINFO* = ptr TTHITTESTINFOA
    LPTTHITTESTINFO* = ptr TTHITTESTINFOA
    TOOLTIPTEXT* = TOOLTIPTEXTA
    LPTOOLTIPTEXT* = ptr TOOLTIPTEXTA
    NMTTDISPINFO* = NMTTDISPINFOA
    LPNMTTDISPINFO* = ptr NMTTDISPINFOA
    TVITEM* = TVITEMA
    LPTVITEM* = ptr TVITEMA
    TVITEMEX* = TVITEMEXA
    LPTVITEMEX* = ptr TVITEMEXA
    TVINSERTSTRUCT* = TVINSERTSTRUCTA
    LPTVINSERTSTRUCT* = ptr TVINSERTSTRUCTA
    NMTREEVIEW* = NMTREEVIEWA
    LPNMTREEVIEW* = ptr NMTREEVIEWA
    NMHDDISPINFO* = NMHDDISPINFOW
    LPNMHDDISPINFO* = ptr NMHDDISPINFOW
    COMBOBOXEXITEM* = COMBOBOXEXITEMA
    PCOMBOBOXEXITEM* = PCOMBOBOXEXITEMA
    NMCBEENDEDIT* = NMCBEENDEDITA
    LPNMCBEENDEDIT* = LPNMCBEENDEDITA
    PNMCBEENDEDIT* = PNMCBEENDEDITA
    NMCOMBOBOXEX* = NMCOMBOBOXEXA
    PNMCOMBOBOXEX* = PNMCOMBOBOXEXA
    NMCBEDRAGBEGIN* = NMCBEDRAGBEGINA
    LPNMCBEDRAGBEGIN* = LPNMCBEDRAGBEGINA
    PNMCBEDRAGBEGIN* = PNMCBEDRAGBEGINA
    NMTBDISPINFO* = NMTBDISPINFOA
    LPNMTBDISPINFO* = LPNMTBDISPINFOA
    NMTBGETINFOTIP* = NMTBGETINFOTIPA
    LPNMTBGETINFOTIP* = LPNMTBGETINFOTIPA
    HD_NOTIFY* = HD_NOTIFYA
    TBSAVEPARAMS* = TBSAVEPARAMSA
    TBBUTTONINFO* = TBBUTTONINFOA
    LPTBBUTTONINFO* = LPTBBUTTONINFOA
    TBNOTIFY* = TBNOTIFYA
    LPTBNOTIFY* = LPTBNOTIFYA
    NMTOOLBAR* = NMTOOLBARA
    LPNMTOOLBAR* = LPNMTOOLBARA
    LVITEM* = LVITEMA
    LPLVITEM* = ptr LVITEM
    LVBKIMAGE* = LVBKIMAGEA
    LPLVBKIMAGE* = LPLVBKIMAGEA
    LVFINDINFO* = LVFINDINFOA
    LPFINDINFO* = LPFINDINFOA
    NMLVFINDITEM* = NMLVFINDITEMA
    PNMLVFINDITEM* = PNMLVFINDITEMA
    LPNMLVFINDITEM* = LPNMLVFINDITEMA
    LVCOLUMN* = LVCOLUMNA
    LPLVCOLUMN* = ptr LVCOLUMNA
    NMLVGETINFOTIP* = NMLVGETINFOTIPA
    LPNMLVGETINFOTIP* = LPNMLVGETINFOTIPA
    LV_DISPINFO* = LV_DISPINFOA
    NMLVDISPINFO* = NMLVDISPINFOA
    LPNMLVDISPINFO* = LPNMLVDISPINFOA
    TV_DISPINFO* = NMTVDISPINFOA
    NMTVDISPINFO* = NMTVDISPINFOA
    LPNMTVDISPINFO* = LPNMTVDISPINFOA
    NMTVGETINFOTIP* = NMTVGETINFOTIPA
    LPNMTVGETINFOTIP* = LPNMTVGETINFOTIPA
    TC_ITEMHEADER* = TC_ITEMHEADERA
    TCITEM* = TCITEMA
    LPTCITEM* = LPTCITEMA
    REBARBANDINFO* = REBARBANDINFOA
    LPREBARBANDINFO* = ptr REBARBANDINFOA
    LPCREBARBANDINFO* = LPCREBARBANDINFOA
    # REBARBANDINFO_V3_SIZE* = REBARBANDINFOA_V3_SIZE

type
  PFNDPAENUMCALLBACK* = proc (P1: PVOID, P2: PVOID): INT {.stdcall.}
  PFNDSAENUMCALLBACK* = proc (P1: PVOID, P2: PVOID): INT {.stdcall.}
  PFNDPACOMPARE* = proc (P1: PVOID, P2: PVOID, P3: LPARAM): INT {.stdcall.}
  SUBCLASSPROC* = proc (P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM, P5: UINT_PTR, P6: DWORD_PTR): LRESULT {.stdcall.}

  LITEM* {.final, pure.} = object
    mask*: UINT
    iLink*: int32
    state*: UINT
    stateMask*: UINT
    szID*: array[MAX_LINKID_TEXT, WCHAR]
    szUrl*: array[L_MAX_URL_LENGTH, WCHAR]
  PLITEM* = ptr LITEM
  LHITTESTINFO* {.final, pure.} = object
    pt*: POINT
    item*: LITEM
  PLHITTESTINFO* = ptr LHITTESTINFO
  NMLINK* {.final, pure.} = object
    hdr*: NMHDR
    item*: LITEM
  PNMLINK* = ptr NMLINK

proc INDEXTOOVERLAYMASK*(i: uint32): uint32 = i shl 8
proc INDEXTOSTATEIMAGEMASK*(i: uint32): uint32 = i shl 12
template HANDLE_WM_NOTIFY*(hwnd, wParam, lParam, fn: untyped): untyped = (fn)(hwnd, int(wParam), cast[ptr NMHDR](lParam))
template FORWARD_WM_NOTIFY*(hwnd, idFrom, pnmhdr, fn: untyped): untyped = (fn)(hwnd, WM_NOTIFY, WPARAM(idFrom), LPARAM(cast[ptr NMHDR](pnmhdr)))
proc MAKEIPADDRESS*(b1: uint8, b2: uint8, b3: uint8, b4: uint8): LPARAM = ((b1.DWORD shl 24) or (b2.DWORD shl 16) or (b3.DWORD shl 8) or (b4.DWORD)).LPARAM
proc MAKEIPRANGE*(L: uint8, H: uint8): LPARAM = ((H.uint32 shl 8) or L).LPARAM
proc FIRST_IPADDRESS*(x: LPARAM): uint8 = (x shr 24).uint8
proc SECOND_IPADDRESS*(x: LPARAM): uint8 = (x shr 16).uint8
proc THIRD_IPADDRESS*(x: LPARAM): uint8 = (x shr 8).uint8
proc FOURTH_IPADDRESS*(x: LPARAM): uint8 = x.uint8
template Animate_Create*(hwndP: HWND, id: UINT, dwStyle: DWORD, hInstance: HINSTANCE): HWND = CreateWindow(ANIMATE_CLASS, nil, dwStyle, 0, 0, 0, 0, hwndP, id.HMENU, hInstance, nil)
proc Animate_Open*(hwnd: HWND, szName: LPTSTR): BOOL = cast[BOOL](SendMessage(hwnd, ACM_OPEN, 0, cast[LPARAM](szName)))
proc Animate_OpenEx*(hwnd: HWND, hInst: HINSTANCE, szName: LPTSTR): BOOL = cast[BOOL](SendMessage(hwnd, ACM_OPEN, hInst.WPARAM, cast[LPARAM](szName)))
proc Animate_Play*(hwnd: HWND, f: int32, t: int32, rep: int32): BOOL = cast[BOOL](SendMessage(hwnd, ACM_PLAY, rep.WPARAM, MAKELONG(f, t).LPARAM))
proc Animate_Stop*(hwnd: HWND): BOOL = cast[BOOL](SendMessage(hwnd, ACM_STOP, 0, 0))
proc Animate_Close*(hwnd: HWND): BOOL = cast[BOOL](Animate_Open(hwnd, nil))
proc Animate_Seek*(hwnd: HWND, frame: int32): BOOL = cast[BOOL](Animate_Play(hwnd, frame, frame, 1))

proc CreateMappedBitmap*(P1: HINSTANCE, P2: int32, P3: UINT, P4: LPCOLORMAP, P5: int32): HBITMAP {.winapi, dynlib: "comctl32", importc.}
proc CreateStatusWindowA*(P1: LONG, P2: LPCSTR, P3: HWND, P4: UINT): HWND {.winapi, dynlib: "comctl32", importc.}
proc CreateStatusWindow*(P1: LONG, P2: LPCSTR, P3: HWND, P4: UINT): HWND {.winapi, dynlib: "comctl32", importc: "CreateStatusWindowA".}
proc CreateStatusWindowW*(P1: LONG, P2: LPCWSTR, P3: HWND, P4: UINT): HWND {.winapi, dynlib: "comctl32", importc.}
proc CreateStatusWindow*(P1: LONG, P2: LPCWSTR, P3: HWND, P4: UINT): HWND {.winapi, dynlib: "comctl32", importc: "CreateStatusWindowW".}
proc CreateToolbarEx*(P1: HWND, P2: DWORD, P3: UINT, P4: int32, P5: HINSTANCE, P6: UINT, P7: LPCTBBUTTON, P8: int32, P9: int32, P10: int32, P11: int32, P12: int32, P13: UINT): HWND {.winapi, dynlib: "comctl32", importc.}
proc CreateUpDownControl*(P1: DWORD, P2: int32, P3: int32, P4: int32, P5: int32, P6: HWND, P7: int32, P8: HINSTANCE, P9: HWND, P10: int32, P11: int32, P12: int32): HWND {.winapi, dynlib: "comctl32", importc.}

proc DateTime_GetMonthCal*(hwnd: HWND): HWND = cast[HWND](SendMessage(hwnd, DTM_GETMONTHCAL, 0, 0))
proc DateTime_GetMonthCalColor*(hwnd: HWND, iColor: int32): COLORREF = SendMessage(hwnd, DTM_GETMCCOLOR, iColor.WPARAM, 0).COLORREF
proc DateTime_GetMonthCalFont*(hwnd: HWND): HFONT = cast[HFONT](SendMessage(hwnd, DTM_GETMCFONT, 0, 0))
proc DateTime_GetRange*(hwnd: HWND, lpSysTimeArray: LPSYSTEMTIME): DWORD = cast[DWORD](SendMessage(hwnd, DTM_GETRANGE, 0, cast[LPARAM](lpSysTimeArray)))
proc DateTime_GetSystemtime*(hwnd: HWND, lpSysTime: LPSYSTEMTIME): DWORD = cast[DWORD](SendMessage(hwnd, DTM_GETSYSTEMTIME, 0, cast[LPARAM](lpSysTime)))
proc DateTime_SetFormat*(hwnd: HWND, lpszFormat: LPCTSTR): BOOL = cast[BOOL](SendMessage(hwnd, DTM_SETFORMAT, 0, cast[LPARAM](lpszFormat)))
proc DateTime_SetMonthCalColor*(hwnd: HWND, iColor: int32, clr: COLORREF): LRESULT = SendMessage(hwnd, DTM_SETMCCOLOR, iColor.WPARAM, clr.LPARAM)
proc DateTime_SetMonthCalFont*(hwnd: HWND, hfont: HFONT, fRedraw: BOOL): void = discard SendMessage(hwnd, DTM_SETMCFONT, hfont.WPARAM, fRedraw)
proc DateTime_SetRange*(hwnd: HWND, flags: WPARAM, lpSysTimeArray: LPSYSTEMTIME): BOOL = cast[BOOL](SendMessage(hwnd, DTM_SETRANGE, flags, cast[LPARAM](lpSysTimeArray)))
proc DateTime_SetSystemtime*(hwnd: HWND, flag: WPARAM, lpSysTime: LPSYSTEMTIME): BOOL = cast[BOOL](SendMessage(hwnd, DTM_SETSYSTEMTIME, flag, cast[LPARAM](lpSysTime)))

proc DrawInsert*(P1: HWND, P2: HWND, P3: int32): void {.winapi, dynlib: "comctl32", importc.}
proc DrawStatusTextA*(P1: HDC, P2: LPRECT, P3: LPCSTR, P4: UINT): void {.winapi, dynlib: "comctl32", importc.}
proc DrawStatusText*(P1: HDC, P2: LPRECT, P3: LPCSTR, P4: UINT): void {.winapi, dynlib: "comctl32", importc: "DrawStatusTextA".}
proc DrawStatusTextW*(P1: HDC, P2: LPRECT, P3: LPCWSTR, P4: UINT): void {.winapi, dynlib: "comctl32", importc.}
proc DrawStatusText*(P1: HDC, P2: LPRECT, P3: LPCWSTR, P4: UINT): void {.winapi, dynlib: "comctl32", importc: "DrawStatusTextW".}
proc GetEffectiveClientRect*(P1: HWND, P2: LPRECT, P3: LPINT): void {.winapi, dynlib: "comctl32", importc.}

proc Header_GetItemCount*(w: HWND): int32 = cast[int32](SendMessage(w, HDM_GETITEMCOUNT, 0, 0))
proc Header_InsertItem*(w: HWND, i: int32, phdi: ptr HDITEM): int32 = cast[int32](SendMessage(w, HDM_INSERTITEM.UINT, i.WPARAM, cast[LPARAM](phdi)))
proc Header_DeleteItem*(w: HWND, i: int32): BOOL = cast[BOOL](SendMessage(w, HDM_DELETEITEM, i.WPARAM, 0))
proc Header_GetItem*(w: HWND, i: int32, phdi: LPHDITEM): BOOL = cast[BOOL](SendMessage(w, HDM_GETITEM, i.WPARAM, cast[LPARAM](phdi)))
proc Header_SetItem*(w: HWND, i: int32, phdi: ptr HDITEM): BOOL = cast[BOOL](SendMessage(w, HDM_SETITEM, i.WPARAM, cast[LPARAM](phdi)))
proc Header_Layout*(w: HWND, playout: LPHDLAYOUT): BOOL = cast[BOOL](SendMessage(w, HDM_LAYOUT, 0, cast[LPARAM](playout)))
proc Header_OrderToIndex*(w: HWND, i: int32): int32 = cast[int32](SendMessage(w, HDM_ORDERTOINDEX, i.WPARAM, 0))
proc Header_GetItemRect*(w: HWND, i: int32, r: ptr RECT): BOOL = cast[BOOL](SendMessage(w, HDM_GETITEMRECT, i.WPARAM, cast[LPARAM](r)))
proc Header_GetOrderArray*(w: HWND, iSize: int32, lpiArray: LPINT): BOOL = cast[BOOL](SendMessage(w, HDM_GETORDERARRAY, iSize.WPARAM, cast[LPARAM](lpiArray)))
proc Header_SetOrderArray*(w: HWND, iSize: int32, lpiArray: LPINT): BOOL = cast[BOOL](SendMessage(w, HDM_SETORDERARRAY, iSize.WPARAM, cast[LPARAM](lpiArray)))
proc Header_CreateDragImage*(w: HWND, i: int32): HIMAGELIST = cast[HIMAGELIST](SendMessage(w, HDM_CREATEDRAGIMAGE, i.WPARAM, 0))
proc Header_SetImageList*(w: HWND, himl: HIMAGELIST): HIMAGELIST = cast[HIMAGELIST](SendMessage(w, HDM_SETIMAGELIST, 0, himl.LPARAM))
proc Header_GetImageList*(w: HWND): HIMAGELIST = cast[HIMAGELIST](SendMessage(w, HDM_GETIMAGELIST, 0, 0))
proc Header_GetUnicodeFormat*(w: HWND): BOOL = cast[BOOL](SendMessage(w, HDM_GETUNICODEFORMAT, 0, 0))
proc Header_SetUnicodeFormat*(w: HWND, fUnicode: BOOL): BOOL = cast[BOOL](SendMessage(w, HDM_SETUNICODEFORMAT, fUnicode.WPARAM, 0))

proc DSA_Create*(P1: INT, P2: INT): HDSA {.winapi, dynlib: "comctl32", importc.}
proc DSA_Destroy*(P1: HDSA): BOOL {.winapi, dynlib: "comctl32", importc.}
proc DSA_DestroyCallback*(P1: HDSA, P2: PFNDSAENUMCALLBACK, P3: PVOID): VOID {.winapi, dynlib: "comctl32", importc.}
proc DSA_GetItemPtr*(P1: HDSA, P2: INT): PVOID {.winapi, dynlib: "comctl32", importc.}
proc DSA_InsertItem*(P1: HDSA, P2: INT, P3: PVOID): INT {.winapi, dynlib: "comctl32", importc.}
proc DPA_Create*(P1: INT): HDPA {.winapi, dynlib: "comctl32", importc.}
proc DPA_Destroy*(P1: HDPA): BOOL {.winapi, dynlib: "comctl32", importc.}
proc DPA_DeletePtr*(P1: HDPA, P2: INT): PVOID {.winapi, dynlib: "comctl32", importc.}
proc DPA_DeleteAllPtrs*(P1: HDPA): BOOL {.winapi, dynlib: "comctl32", importc.}
proc DPA_EnumCallback*(P1: HDPA, P2: PFNDPAENUMCALLBACK, P3: PVOID): VOID {.winapi, dynlib: "comctl32", importc.}
proc DPA_DestroyCallback*(P1: HDPA, P2: PFNDPAENUMCALLBACK, P3: PVOID): VOID {.winapi, dynlib: "comctl32", importc.}
proc DPA_SetPtr*(P1: HDPA, P2: INT, P3: PVOID): BOOL {.winapi, dynlib: "comctl32", importc.}
proc DPA_InsertPtr*(P1: HDPA, P2: INT, P3: PVOID): INT {.winapi, dynlib: "comctl32", importc.}
proc DPA_GetPtr*(P1: HDPA, P2: INT_PTR): PVOID {.winapi, dynlib: "comctl32", importc.}
proc DPA_Sort*(P1: HDPA, P2: PFNDPACOMPARE, P3: LPARAM): BOOL {.winapi, dynlib: "comctl32", importc.}
proc DPA_Search*(P1: HDPA, P2: PVOID, P3: INT, P4: PFNDPACOMPARE, P5: LPARAM, P6: UINT): INT {.winapi, dynlib: "comctl32", importc.}
proc Str_SetPtrW*(P1: ptr LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "comctl32", importc.}
proc FlatSB_EnableScrollBar*(P1: HWND, P2: INT, P3: UINT): BOOL {.winapi, dynlib: "comctl32", importc.}
proc FlatSB_ShowScrollBar*(P1: HWND, P2: INT, P3: BOOL): BOOL {.winapi, dynlib: "comctl32", importc.}
proc FlatSB_GetScrollRange*(P1: HWND, P2: INT, P3: LPINT, P4: LPINT): BOOL {.winapi, dynlib: "comctl32", importc.}
proc FlatSB_GetScrollInfo*(P1: HWND, P2: INT, P3: LPSCROLLINFO): BOOL {.winapi, dynlib: "comctl32", importc.}
proc FlatSB_GetScrollPos*(P1: HWND, P2: INT): INT {.winapi, dynlib: "comctl32", importc.}
proc FlatSB_GetScrollProp*(P1: HWND, P2: INT, P3: LPINT): BOOL {.winapi, dynlib: "comctl32", importc.}

when defined(cpu64):
  proc FlatSB_GetScrollPropPtr*(P1: HWND, P2: INT, P3: PINT_PTR): BOOL {.winapi, dynlib: "comctl32", importc.}

else:
  proc FlatSB_GetScrollPropPtr*(P1: HWND, P2: INT, P3: LPINT): BOOL {.winapi, dynlib: "comctl32", importc: "FlatSB_GetScrollProp".}

proc FlatSB_SetScrollPos*(P1: HWND, P2: INT, P3: INT, P4: BOOL): INT {.winapi, dynlib: "comctl32", importc.}
proc FlatSB_SetScrollInfo*(P1: HWND, P2: INT, P3: LPSCROLLINFO, P4: BOOL): INT {.winapi, dynlib: "comctl32", importc.}
proc FlatSB_SetScrollRange*(P1: HWND, P2: INT, P3: INT, P4: INT, P5: BOOL): INT {.winapi, dynlib: "comctl32", importc.}
proc FlatSB_SetScrollProp*(P1: HWND, P2: UINT, P3: INT_PTR, P4: BOOL): BOOL {.winapi, dynlib: "comctl32", importc.}
proc FlatSB_SetScrollPropPtr*(P1: HWND, P2: UINT, P3: INT_PTR, P4: BOOL): BOOL {.winapi, dynlib: "comctl32", importc: "FlatSB_SetScrollProp".}
proc InitializeFlatSB*(P1: HWND): BOOL {.winapi, dynlib: "comctl32", importc.}
proc UninitializeFlatSB*(P1: HWND): HRESULT {.winapi, dynlib: "comctl32", importc.}
proc SetWindowSubclass*(P1: HWND, P2: SUBCLASSPROC, P3: UINT_PTR, P4: DWORD_PTR): BOOL {.winapi, dynlib: "comctl32", importc.}
proc GetWindowSubclass*(P1: HWND, P2: SUBCLASSPROC, P3: UINT_PTR, P4: ptr DWORD_PTR): BOOL {.winapi, dynlib: "comctl32", importc.}
proc RemoveWindowSubclass*(P1: HWND, P2: SUBCLASSPROC, P3: UINT_PTR): BOOL {.winapi, dynlib: "comctl32", importc.}
proc DefSubclassProc*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "comctl32", importc.}
proc DrawShadowText*(P1: HDC, P2: LPCWSTR, P3: UINT, P4: ptr RECT, P5: DWORD, P6: COLORREF, P7: COLORREF, P8: INT, P9: INT): INT {.winapi, dynlib: "comctl32", importc.}
proc ImageList_Add*(P1: HIMAGELIST, P2: HBITMAP, P3: HBITMAP): int32 {.winapi, dynlib: "comctl32", importc.}
proc ImageList_AddMasked*(P1: HIMAGELIST, P2: HBITMAP, P3: COLORREF): int32 {.winapi, dynlib: "comctl32", importc.}
proc ImageList_BeginDrag*(P1: HIMAGELIST, P2: int32, P3: int32, P4: int32): BOOL {.winapi, dynlib: "comctl32", importc.}
proc ImageList_Create*(P1: int32, P2: int32, P3: UINT, P4: int32, P5: int32): HIMAGELIST {.winapi, dynlib: "comctl32", importc.}
proc ImageList_Destroy*(P1: HIMAGELIST): BOOL {.winapi, dynlib: "comctl32", importc.}
proc ImageList_DragEnter*(P1: HWND, P2: int32, P3: int32): BOOL {.winapi, dynlib: "comctl32", importc.}
proc ImageList_DragLeave*(P1: HWND): BOOL {.winapi, dynlib: "comctl32", importc.}
proc ImageList_DragMove*(P1: int32, P2: int32): BOOL {.winapi, dynlib: "comctl32", importc.}
proc ImageList_DragShowNolock*(P1: BOOL): BOOL {.winapi, dynlib: "comctl32", importc.}
proc ImageList_Draw*(P1: HIMAGELIST, P2: int32, P3: HDC, P4: int32, P5: int32, P6: UINT): BOOL {.winapi, dynlib: "comctl32", importc.}
proc ImageList_DrawEx*(P1: HIMAGELIST, P2: int32, P3: HDC, P4: int32, P5: int32, P6: int32, P7: int32, P8: COLORREF, P9: COLORREF, P10: UINT): BOOL {.winapi, dynlib: "comctl32", importc.}
proc ImageList_EndDrag*(P1: PVOID): void {.winapi, dynlib: "comctl32", importc.}
proc ImageList_GetBkColor*(P1: HIMAGELIST): COLORREF {.winapi, dynlib: "comctl32", importc.}
proc ImageList_GetDragImage*(P1: LPPOINT, P2: LPPOINT): HIMAGELIST {.winapi, dynlib: "comctl32", importc.}
proc ImageList_GetIcon*(P1: HIMAGELIST, P2: int32, P3: UINT): HICON {.winapi, dynlib: "comctl32", importc.}
proc ImageList_GetIconSize*(P1: HIMAGELIST, P2: ptr int32, P3: ptr int32): BOOL {.winapi, dynlib: "comctl32", importc.}
proc ImageList_GetImageCount*(P1: HIMAGELIST): int32 {.winapi, dynlib: "comctl32", importc.}
proc ImageList_GetImageInfo*(P1: HIMAGELIST, P2: int32, P3: ptr IMAGEINFO): BOOL {.winapi, dynlib: "comctl32", importc.}
proc ImageList_LoadImageA*(P1: HINSTANCE, P2: LPCSTR, P3: int32, P4: int32, P5: COLORREF, P6: UINT, P7: UINT): HIMAGELIST {.winapi, dynlib: "comctl32", importc.}
proc ImageList_LoadImage*(P1: HINSTANCE, P2: LPCSTR, P3: int32, P4: int32, P5: COLORREF, P6: UINT, P7: UINT): HIMAGELIST {.winapi, dynlib: "comctl32", importc: "ImageList_LoadImageA".}
proc ImageList_LoadImageW*(P1: HINSTANCE, P2: LPCWSTR, P3: int32, P4: int32, P5: COLORREF, P6: UINT, P7: UINT): HIMAGELIST {.winapi, dynlib: "comctl32", importc.}
proc ImageList_LoadImage*(P1: HINSTANCE, P2: LPCWSTR, P3: int32, P4: int32, P5: COLORREF, P6: UINT, P7: UINT): HIMAGELIST {.winapi, dynlib: "comctl32", importc: "ImageList_LoadImageW".}
proc ImageList_Merge*(P1: HIMAGELIST, P2: int32, P3: HIMAGELIST, P4: int32, P5: int32, P6: int32): HIMAGELIST {.winapi, dynlib: "comctl32", importc.}
proc ImageList_Remove*(P1: HIMAGELIST, P2: int32): BOOL {.winapi, dynlib: "comctl32", importc.}
proc ImageList_Replace*(P1: HIMAGELIST, P2: int32, P3: HBITMAP, P4: HBITMAP): BOOL {.winapi, dynlib: "comctl32", importc.}
proc ImageList_ReplaceIcon*(P1: HIMAGELIST, P2: int32, P3: HICON): int32 {.winapi, dynlib: "comctl32", importc.}
proc ImageList_SetBkColor*(P1: HIMAGELIST, P2: COLORREF): COLORREF {.winapi, dynlib: "comctl32", importc.}
proc ImageList_SetDragCursorImage*(P1: HIMAGELIST, P2: int32, P3: int32, P4: int32): BOOL {.winapi, dynlib: "comctl32", importc.}
proc ImageList_SetIconSize*(P1: HIMAGELIST, P2: int32, P3: int32): BOOL {.winapi, dynlib: "comctl32", importc.}
proc ImageList_SetOverlayImage*(P1: HIMAGELIST, P2: int32, P3: int32): BOOL {.winapi, dynlib: "comctl32", importc.}
proc ImageList_Read*(P1: LPSTREAM): HIMAGELIST {.winapi, dynlib: "comctl32", importc.}
proc ImageList_Write*(P1: HIMAGELIST, P2: LPSTREAM): BOOL {.winapi, dynlib: "comctl32", importc.}
proc ImageList_Duplicate*(P1: HIMAGELIST): HIMAGELIST {.winapi, dynlib: "comctl32", importc.}
proc InitCommonControls*(): void {.winapi, dynlib: "comctl32", importc.}
proc InitCommonControlsEx*(P1: LPINITCOMMONCONTROLSEX): BOOL {.winapi, dynlib: "comctl32", importc.}
proc LBItemFromPt*(P1: HWND, P2: POINT, P3: BOOL): int32 {.winapi, dynlib: "comctl32", importc.}

proc ImageList_AddIcon*(himl: HIMAGELIST, hicon: HICON): int32 = ImageList_ReplaceIcon(himl, -1, hicon)
proc ImageList_ExtractIcon*(hi: HINSTANCE, himl: HIMAGELIST, i: int32): HICON = ImageList_GetIcon(himl, i, 0)
proc ImageList_LoadBitmap*(hi: HINSTANCE, lpbmp: LPCTSTR, cx: int32, cGrow: int32, crMask: COLORREF): HIMAGELIST = ImageList_LoadImage(hi, lpbmp, cx, cGrow, crMask, IMAGE_BITMAP, 0)
proc ImageList_RemoveAll*(himl: HIMAGELIST): BOOL = ImageList_Remove(himl, -1)
proc ListView_GetBkColor*(w: HWND): COLORREF = SendMessage(w, LVM_GETBKCOLOR, 0, 0).COLORREF
proc ListView_GetImageList*(w: HWND, i: int32): HIMAGELIST = cast[HIMAGELIST](SendMessage(w, LVM_GETIMAGELIST, i.WPARAM, 0))
proc ListView_GetItemCount*(w: HWND): int32 = cast[int32](SendMessage(w, LVM_GETITEMCOUNT, 0, 0))
proc ListView_GetItem*(w: HWND, pitem: LPLVITEM): BOOL = cast[BOOL](SendMessage(w, LVM_GETITEM, 0, cast[LPARAM](pitem)))
proc ListView_SetBkColor*(w: HWND, c: COLORREF): BOOL = cast[BOOL](SendMessage(w, LVM_SETBKCOLOR, 0, c.LPARAM))
proc ListView_SetImageList*(w: HWND, h: HIMAGELIST, i: int32): HIMAGELIST = cast[HIMAGELIST](SendMessage(w, LVM_SETIMAGELIST, i.WPARAM, h.LPARAM))
proc ListView_SetItem*(w: HWND, i: ptr LV_ITEM): BOOL = cast[BOOL](SendMessage(w, LVM_SETITEM, 0, cast[LPARAM](i)))
proc ListView_InsertItem*(w: HWND, i: ptr LV_ITEM): int32 = cast[int32](SendMessage(w, LVM_INSERTITEM, 0, cast[LPARAM](i)))
proc ListView_DeleteItem*(w: HWND, i: int32): BOOL = cast[BOOL](SendMessage(w, LVM_DELETEITEM, i.WPARAM, 0))
proc ListView_DeleteAllItems*(w: HWND): BOOL = cast[BOOL](SendMessage(w, LVM_DELETEALLITEMS, 0, 0))
proc ListView_GetCallbackMask*(w: HWND): UINT = cast[UINT](SendMessage(w, LVM_GETCALLBACKMASK, 0, 0).UINT)
proc ListView_SetCallbackMask*(w: HWND, m: UINT): BOOL = cast[BOOL](SendMessage(w, LVM_SETCALLBACKMASK, m, 0))
proc ListView_GetNextItem*(w: HWND, i: int32, f: UINT): int32 = cast[int32](SendMessage(w, LVM_GETNEXTITEM, i.WPARAM, MAKELPARAM(f, 0)))
proc ListView_FindItem*(w: HWND, i: int32, p: ptr LV_FINDINFO): int32 = cast[int32](SendMessage(w, LVM_FINDITEM, i.WPARAM, cast[LPARAM](p)))
proc ListView_GetItemRect*(w: HWND, i: int32, p: LPRECT, c: int32): BOOL =
  if p != nil: p.left = c
  cast[BOOL](SendMessage(w, LVM_GETITEMRECT, i.WPARAM, if p != nil: cast[LPARAM](p) else: 0))
proc ListView_SetItemPosition*(w: HWND, i: int32, x: int32, y: int32): BOOL = cast[BOOL](SendMessage(w, LVM_SETITEMPOSITION, i.WPARAM, MAKELPARAM(x, y)))
proc ListView_GetItemPosition*(w: HWND, i: int32, p: ptr POINT): BOOL = cast[BOOL](SendMessage(w, LVM_GETITEMPOSITION, i.WPARAM, cast[LPARAM](p)))
proc ListView_GetItemSpacing*(w: HWND, f: BOOL): DWORD = cast[DWORD](SendMessage(w, LVM_GETITEMSPACING, f.WPARAM, 0).DWORD)
proc ListView_GetStringWidth*(w: HWND, s: LPCSTR): int32 = cast[int32](SendMessage(w, LVM_GETSTRINGWIDTH, 0, cast[LPARAM](s)))
proc ListView_HitTest*(w: HWND, p: LPLVHITTESTINFO): int32 = cast[int32](SendMessage(w, LVM_HITTEST, 0, cast[LPARAM](p)))
proc ListView_EnsureVisible*(w: HWND, i: int32, f: BOOL): BOOL = cast[BOOL](SendMessage(w, LVM_ENSUREVISIBLE, i.WPARAM, MAKELPARAM(f, 0)))
proc ListView_Scroll*(w: HWND, dx: int32, dy: int32): BOOL = cast[BOOL](SendMessage(w, LVM_SCROLL, dx.WPARAM, dy.LPARAM))
proc ListView_RedrawItems*(w: HWND, f: int32, L: int32): BOOL = cast[BOOL](SendMessage(w, LVM_REDRAWITEMS, f.WPARAM, L.LPARAM))
proc ListView_Arrange*(w: HWND, c: UINT): BOOL = cast[BOOL](SendMessage(w, LVM_ARRANGE, c, 0))
proc ListView_EditLabel*(w: HWND, i: int32): HWND = cast[HWND](SendMessage(w, LVM_EDITLABEL, i.WPARAM, 0))
proc ListView_GetEditControl*(w: HWND): HWND = cast[HWND](SendMessage(w, LVM_GETEDITCONTROL, 0, 0))
proc ListView_GetColumn*(w: HWND, i: int32, p: LPLVCOLUMN): BOOL = cast[BOOL](SendMessage(w, LVM_GETCOLUMN, i.WPARAM, cast[LPARAM](p)))
proc ListView_SetColumn*(w: HWND, i: int32, p: ptr LV_COLUMN): BOOL = cast[BOOL](SendMessage(w, LVM_SETCOLUMN, i.WPARAM, cast[LPARAM](p)))
proc ListView_InsertColumn*(w: HWND, i: int32, p: ptr LV_COLUMN): int32 = cast[int32](SendMessage(w, LVM_INSERTCOLUMN, i.WPARAM, cast[LPARAM](p)))
proc ListView_DeleteColumn*(w: HWND, i: int32): BOOL = cast[BOOL](SendMessage(w, LVM_DELETECOLUMN, i.WPARAM, 0))
proc ListView_GetColumnWidth*(w: HWND, i: int32): int32 = cast[int32](SendMessage(w, LVM_GETCOLUMNWIDTH, i.WPARAM, 0))
proc ListView_SetColumnWidth*(w: HWND, i: int32, x: int32): BOOL = cast[BOOL](SendMessage(w, LVM_SETCOLUMNWIDTH, i.WPARAM, MAKELPARAM(x, 0)))
proc ListView_CreateDragImage*(w: HWND, i: int32, p: LPPOINT): HIMAGELIST = cast[HIMAGELIST](SendMessage(w, LVM_CREATEDRAGIMAGE, i.WPARAM, cast[LPARAM](p)))
proc ListView_GetViewRect*(w: HWND, p: ptr RECT): BOOL = cast[BOOL](SendMessage(w, LVM_GETVIEWRECT, 0, cast[LPARAM](p)))
proc ListView_GetTextColor*(w: HWND): COLORREF = cast[COLORREF](SendMessage(w, LVM_GETTEXTCOLOR, 0, 0).COLORREF)
proc ListView_SetTextColor*(w: HWND, c: COLORREF): BOOL = cast[BOOL](SendMessage(w, LVM_SETTEXTCOLOR, 0, c.LPARAM))
proc ListView_GetTextBkColor*(w: HWND): COLORREF = cast[COLORREF](SendMessage(w, LVM_GETTEXTBKCOLOR, 0, 0).COLORREF)
proc ListView_SetTextBkColor*(w: HWND, c: COLORREF): BOOL = cast[BOOL](SendMessage(w, LVM_SETTEXTBKCOLOR, 0, c.LPARAM))
proc ListView_GetTopIndex*(w: HWND): int32 = cast[int32](SendMessage(w, LVM_GETTOPINDEX, 0, 0))
proc ListView_GetCountPerPage*(w: HWND): int32 = cast[int32](SendMessage(w, LVM_GETCOUNTPERPAGE, 0, 0))
proc ListView_GetOrigin*(w: HWND, p: LPPOINT): BOOL = cast[BOOL](SendMessage(w, LVM_GETORIGIN, 0, cast[LPARAM](p)))
proc ListView_Update*(w: HWND, i: WPARAM): BOOL = cast[BOOL](SendMessage(w, LVM_UPDATE, i, 0))
proc ListView_SetItemState*(w: HWND, i: int32, d: UINT, m: UINT): void =
  var lvi = LV_ITEM(stateMask: m, state: d)
  discard SendMessage(w, LVM_SETITEMSTATE, i.WPARAM, cast[LPARAM](addr lvi))
proc ListView_GetItemState*(w: HWND, i: int32, m: UINT): UINT = SendMessage(w, LVM_GETITEMSTATE, i.WPARAM, m.LPARAM).UINT
proc ListView_GetItemText*(w: HWND, i: int32, isi: int32, s: LPTSTR, n: int32): void =
  var lvi = LV_ITEM(iSubItem: isi, cchTextMax: n, pszText: s)
  discard SendMessage(w, LVM_GETITEMTEXT, i.WPARAM, cast[LPARAM](addr lvi))
proc ListView_SetItemText*(w: HWND, i: int32, isi: int32, s: LPTSTR): void =
  var lvi = LV_ITEM(iSubItem: isi, pszText: s)
  discard SendMessage(w, LVM_SETITEMTEXT, i.WPARAM, cast[LPARAM](addr lvi))
proc ListView_SetItemCount*(w: HWND, n: int32): void = discard SendMessage(w, LVM_SETITEMCOUNT, n.WPARAM, 0)
proc ListView_SortItems*(w: HWND, f: PFNLVCOMPARE, L: LPARAM): BOOL = cast[BOOL](SendMessage(w, LVM_SORTITEMS, L.WPARAM, cast[LPARAM](f)))
proc ListView_SetItemPosition32*(w: HWND, i: int32, x: int32, y: int32): void =
  var p = POINT(x: x, y: y)
  discard SendMessage(w, LVM_SETITEMPOSITION32, i.WPARAM, cast[LPARAM](addr p))
proc ListView_GetSelectedCount*(w: HWND): UINT = cast[UINT](SendMessage(w, LVM_GETSELECTEDCOUNT, 0, 0))
proc ListView_GetCheckState*(w: HWND, i: UINT): UINT = cast[UINT](((SendMessage(w, LVM_GETITEMSTATE, i, LVIS_STATEIMAGEMASK)) shr 12) - 1)
proc ListView_SetCheckState*(w: HWND, i: UINT, f: BOOL): void = ListView_SetItemState(w, i.int32, INDEXTOSTATEIMAGEMASK(if cast[bool](f): 2 else: 1), LVIS_STATEIMAGEMASK)
proc ListView_GetISearchString*(w: HWND, lpsz: LPSTR): BOOL = cast[BOOL](SendMessage(w, LVM_GETISEARCHSTRING, 0, cast[LPARAM](lpsz)))
proc ListView_CancelEditLabel*(w: HWND): void = discard SendMessage(w, LVM_CANCELEDITLABEL, 0, 0)
proc ListView_EnableGroupView*(w: HWND, i: BOOL): int32 = cast[int32](SendMessage(w, LVM_ENABLEGROUPVIEW, i.WPARAM, 0))
proc ListView_SortItemsEx*(w: HWND, c: PFNLVCOMPARE, p: LPARAM): BOOL = cast[BOOL](SendMessage(w, LVM_SORTITEMSEX, cast[WPARAM](p), cast[LPARAM](c)))
proc ListView_GetGroupInfo*(w: HWND, i: int32, p: PLVGROUP): int32 = cast[int32](SendMessage(w, LVM_GETGROUPINFO, i.WPARAM, cast[LPARAM](p)))
proc ListView_GetGroupMetrics*(w: HWND, p: PLVGROUPMETRICS): void = discard SendMessage(w, LVM_GETGROUPMETRICS, 0, cast[LPARAM](p))
proc ListView_GetInsertMark*(w: HWND, p: PLVINSERTMARK): BOOL = cast[BOOL](SendMessage(w, LVM_GETINSERTMARK, 0, cast[LPARAM](p)))
proc ListView_GetInsertMarkColor*(w: HWND): COLORREF = cast[COLORREF](SendMessage(w, LVM_GETINSERTMARKCOLOR, 0, 0).COLORREF)
proc ListView_GetInsertMarkRect*(w: HWND, p: LPRECT): int32 = cast[int32](SendMessage(w, LVM_GETINSERTMARKRECT, 0, cast[LPARAM](p)))
proc ListView_GetOutlineColor*(w: HWND): COLORREF = cast[COLORREF](SendMessage(w, LVM_GETOUTLINECOLOR, 0, 0))
proc ListView_GetSelectedColumn*(w: HWND): UINT = cast[UINT](SendMessage(w, LVM_GETSELECTEDCOLUMN, 0, 0))
proc ListView_GetTileInfo*(w: HWND, p: PLVTILEINFO): void = discard SendMessage(w, LVM_GETTILEINFO, 0, cast[LPARAM](p))
proc ListView_GetTileViewInfo*(w: HWND, p: PLVTILEVIEWINFO): void = discard SendMessage(w, LVM_GETTILEVIEWINFO, 0, cast[LPARAM](p))
proc ListView_GetView*(w: HWND): DWORD = cast[DWORD](SendMessage(w, LVM_GETVIEW, 0, 0))
proc ListView_HasGroup*(w: HWND, i: int32): BOOL = cast[BOOL](SendMessage(w, LVM_HASGROUP, i.WPARAM, 0))
proc ListView_InsertGroup*(w: HWND, i: int32, p: PLVGROUP): int32 = cast[int32](SendMessage(w, LVM_INSERTGROUP, i.WPARAM, cast[LPARAM](p)))
proc ListView_InsertGroupSorted*(w: HWND, p: PLVINSERTGROUPSORTED): void = discard SendMessage(w, LVM_INSERTGROUPSORTED, cast[WPARAM](p), 0)
proc ListView_InsertMarkHitTest*(w: HWND, p: LPPOINT, t: PLVINSERTMARK): BOOL = cast[BOOL](SendMessage(w, LVM_INSERTMARKHITTEST, cast[WPARAM](p), cast[LPARAM](t)))
proc ListView_IsGroupViewEnabled*(w: HWND): BOOL = cast[BOOL](SendMessage(w, LVM_ISGROUPVIEWENABLED, 0, 0))
proc ListView_MapIDToIndex*(w: HWND, i: UINT): UINT = cast[UINT](SendMessage(w, LVM_MAPIDTOINDEX, i, 0))
proc ListView_MoveGroup*(w: HWND, i: int32, t: int32): void = discard SendMessage(w, LVM_MOVEGROUP, i.WPARAM, t.LPARAM)
proc ListView_RemoveAllGroups*(w: HWND): void = discard SendMessage(w, LVM_REMOVEALLGROUPS, 0, 0)
proc ListView_RemoveGroup*(w: HWND, i: int32): int32 = cast[int32](SendMessage(w, LVM_REMOVEGROUP, i.WPARAM, 0))
proc ListView_SetGroupInfo*(w: HWND, i: int32, p: PLVGROUP): int32 = cast[int32](SendMessage(w, LVM_SETGROUPINFO, i.WPARAM, cast[LPARAM](p)))
proc ListView_SetGroupMetrics*(w: HWND, p: PLVGROUPMETRICS): void = discard SendMessage(w, LVM_SETGROUPMETRICS, 0, cast[LPARAM](p))
proc ListView_SetInfoTip*(w: HWND, p: PLVSETINFOTIP): BOOL = cast[BOOL](SendMessage(w, LVM_SETINFOTIP, 0, cast[LPARAM](p)))
proc ListView_SetInsertMark*(w: HWND, p: PLVINSERTMARK): BOOL = cast[BOOL](SendMessage(w, LVM_SETINSERTMARK, 0, cast[LPARAM](p)))
proc ListView_SetInsertMarkColor*(w: HWND, c: COLORREF): COLORREF = cast[COLORREF](SendMessage(w, LVM_SETINSERTMARKCOLOR, 0, c.LPARAM))
proc ListView_SetOutlineColor*(w: HWND, c: COLORREF): COLORREF = cast[COLORREF](SendMessage(w, LVM_SETOUTLINECOLOR, 0, c.LPARAM))
proc ListView_SetSelectedColumn*(w: HWND, i: int32): void = discard SendMessage(w, LVM_SETSELECTEDCOLUMN, i.WPARAM, 0)
proc ListView_SetTileInfo*(w: HWND, p: PLVTILEINFO): BOOL = cast[BOOL](SendMessage(w, LVM_SETTILEINFO, 0, cast[LPARAM](p)))
proc ListView_SetTileViewInfo*(w: HWND, p: PLVTILEVIEWINFO): BOOL = cast[BOOL](SendMessage(w, LVM_SETTILEVIEWINFO, 0, cast[LPARAM](p)))
proc ListView_SetView*(w: HWND, i: DWORD): int32 = cast[int32](SendMessage(w, LVM_SETVIEW, i, 0))
proc ListView_SortGroups*(w: HWND, c: PFNLVGROUPCOMPARE, p: LPVOID): int32 = cast[int32](SendMessage(w, LVM_SORTGROUPS, cast[WPARAM](c), cast[LPARAM](p)))

const
  CBM_FIRST* = 0x1700
  CB_SETMINVISIBLE* = CBM_FIRST + 1
  CB_GETMINVISIBLE* = CBM_FIRST + 2

proc ComboBox_SetMinVisible*(w: HWND, i: INT): BOOL = cast[BOOL](SendMessage(w, CB_SETMINVISIBLE, cast[WPARAM](i), 0))
proc ComboBox_GetMinVisible*(w: HWND): int32 = cast[int32](SendMessage(w, CB_GETMINVISIBLE, 0, 0))

proc MakeDragList*(P1: HWND): BOOL {.winapi, dynlib: "comctl32", importc.}
proc MenuHelp*(P1: UINT, P2: WPARAM, P3: LPARAM, P4: HMENU, P5: HINSTANCE, P6: HWND, P7: PUINT): void {.winapi, dynlib: "comctl32", importc.}

proc MonthCal_GetColor*(hwnd: HWND, icolor: INT): COLORREF = cast[COLORREF](SendMessage(hwnd, MCM_GETCOLOR, icolor.WPARAM, 0).COLORREF)
proc MonthCal_GetCurSel*(hwnd: HWND, lpsystime: LPSYSTEMTIME): BOOL = cast[BOOL](SendMessage(hwnd, MCM_GETCURSEL, 0, cast[LPARAM](lpsystime)))
proc MonthCal_GetFirstDayOfWeek*(hwnd: HWND): DWORD = cast[DWORD](SendMessage(hwnd, MCM_GETFIRSTDAYOFWEEK, 0, 0))
proc MonthCal_GetMaxSelCount*(hwnd: HWND): DWORD = cast[DWORD](SendMessage(hwnd, MCM_GETMAXSELCOUNT, 0, 0))
proc MonthCal_GetMaxTodayWidth*(hwnd: HWND): DWORD = cast[DWORD](SendMessage(hwnd, MCM_GETMAXTODAYWIDTH, 0, 0))
proc MonthCal_GetMinReqRect*(hwnd: HWND, lpRectInfo: LPRECT): BOOL = cast[BOOL](SendMessage(hwnd, MCM_GETMINREQRECT, 0, cast[LPARAM](lpRectInfo)))
proc MonthCal_GetMonthDelta*(hwnd: HWND): INT = cast[INT](SendMessage(hwnd, MCM_GETMONTHDELTA, 0, 0))
proc MonthCal_GetMonthRange*(hwnd: HWND, flag: DWORD, systimearray: LPSYSTEMTIME): INT = cast[INT](SendMessage(hwnd, MCM_GETMONTHRANGE, flag.WPARAM, cast[LPARAM](systimearray)))
proc MonthCal_GetRange*(hwnd: HWND, systimearray: LPSYSTEMTIME): DWORD = cast[DWORD](SendMessage(hwnd, MCM_GETRANGE, 0, cast[LPARAM](systimearray)))
proc MonthCal_GetSelRange*(hwnd: HWND, systimearray: LPSYSTEMTIME): BOOL = cast[BOOL](SendMessage(hwnd, MCM_GETSELRANGE, 0, cast[LPARAM](systimearray)))
proc MonthCal_GetToday*(hwnd: HWND, systime: LPSYSTEMTIME): BOOL = cast[BOOL](SendMessage(hwnd, MCM_GETTODAY, 0, cast[LPARAM](systime)))
proc MonthCal_GetUnicodeFormat*(hwnd: HWND): BOOL = cast[BOOL](SendMessage(hwnd, MCM_GETUNICODEFORMAT, 0, 0))
proc MonthCal_HitTest*(hwnd: HWND, pmchittest: PMCHITTESTINFO): DWORD = cast[DWORD](SendMessage(hwnd, MCM_HITTEST, 0, cast[LPARAM](pmchittest)))
proc MonthCal_SetColor*(hwnd: HWND, icolor: INT, clr: COLORREF): COLORREF = cast[COLORREF](SendMessage(hwnd, MCM_SETCOLOR, icolor.WPARAM, clr.LPARAM).COLORREF)
proc MonthCal_SetCurSel*(hwnd: HWND, lpsystime: LPSYSTEMTIME): BOOL = cast[BOOL](SendMessage(hwnd, MCM_SETCURSEL, 0, cast[LPARAM](lpsystime)))
proc MonthCal_SetDayState*(hwnd: HWND, imonths: INT, lpdatestatearray: LPMONTHDAYSTATE): BOOL = cast[BOOL](SendMessage(hwnd, MCM_SETDAYSTATE, cast[WPARAM](imonths), cast[LPARAM](lpdatestatearray)))
proc MonthCal_SetFirstDayOfWeek*(hwnd: HWND, iday: INT): DWORD = cast[DWORD](SendMessage(hwnd, MCM_SETFIRSTDAYOFWEEK, 0, iday.LPARAM))
proc MonthCal_SetMaxSelCount*(hwnd: HWND, imax: UINT): BOOL = cast[BOOL](SendMessage(hwnd, MCM_SETMAXSELCOUNT, imax.WPARAM, 0))
proc MonthCal_SetMonthDelta*(hwnd: HWND, idelta: INT): INT = cast[INT](SendMessage(hwnd, MCM_SETMONTHDELTA, idelta.WPARAM, 0))
proc MonthCal_SetSelRange*(hwnd: HWND, systimearray: LPSYSTEMTIME): BOOL = cast[BOOL](SendMessage(hwnd, MCM_SETSELRANGE, 0, cast[LPARAM](systimearray)))
proc MonthCal_SetToday*(hwnd: HWND, systime: LPSYSTEMTIME): void = discard SendMessage(hwnd, MCM_SETTODAY, 0, cast[LPARAM](systime))
proc MonthCal_SetUnicodeFormat*(hwnd: HWND, unicode: BOOL): BOOL = cast[BOOL](SendMessage(hwnd, MCM_SETUNICODEFORMAT, unicode.WPARAM, 0))
proc MonthCal_SetRange*(w: HWND, f: DWORD, st: LPSYSTEMTIME): BOOL = cast[BOOL](SendMessage(w, MCM_SETRANGE, f.WPARAM, cast[LPARAM](st)))

proc ShowHideMenuCtl*(P1: HWND, P2: UINT, P3: PINT): BOOL {.winapi, dynlib: "comctl32", importc.}

proc TabCtrl_GetItem*(w: HWND, i: int32, p: LPTCITEM): BOOL = cast[BOOL](SendMessage(w, TCM_GETITEM, i.WPARAM, cast[LPARAM](p)))
proc TabCtrl_SetItem*(w: HWND, i: int32, p: LPTCITEM): BOOL = cast[BOOL](SendMessage(w, TCM_SETITEM, i.WPARAM, cast[LPARAM](p)))
proc TabCtrl_InsertItem*(w: HWND, i: int32, p: ptr TC_ITEM): int32 = cast[int32](SendMessage(w, TCM_INSERTITEM, i.WPARAM, cast[LPARAM](p)))
proc TabCtrl_DeleteItem*(w: HWND, i: int32): BOOL = cast[BOOL](SendMessage(w, TCM_DELETEITEM, i.WPARAM, 0))
proc TabCtrl_DeleteAllItems*(w: HWND): BOOL = cast[BOOL](SendMessage(w, TCM_DELETEALLITEMS, 0, 0))
proc TabCtrl_GetItemRect*(w: HWND, i: int32, p: LPRECT): BOOL = cast[BOOL](SendMessage(w, TCM_GETITEMRECT, i.WPARAM, cast[LPARAM](p)))
proc TabCtrl_GetCurSel*(w: HWND): int32 = cast[int32](SendMessage(w, TCM_GETCURSEL, 0, 0))
proc TabCtrl_SetCurSel*(w: HWND, i: int32): int32 = cast[int32](SendMessage(w, TCM_SETCURSEL, i.WPARAM, 0))
proc TabCtrl_HitTest*(w: HWND, p: LPTCHITTESTINFO): int32 = cast[int32](SendMessage(w, TCM_HITTEST, 0, cast[LPARAM](p)))
proc TabCtrl_SetItemExtra*(w: HWND, c: int32): BOOL = cast[BOOL](SendMessage(w, TCM_SETITEMEXTRA, c.WPARAM, 0))
proc TabCtrl_AdjustRect*(w: HWND, b: BOOL, p: LPRECT): int32 = cast[int32](SendMessage(w, TCM_ADJUSTRECT, b.WPARAM, cast[LPARAM](p)))
proc TabCtrl_SetItemSize*(w: HWND, x: int32, y: int32): DWORD = cast[DWORD](SendMessage(w, TCM_SETITEMSIZE, 0, MAKELPARAM(x, y)))
proc TabCtrl_RemoveImage*(w: HWND, i: int32): void = discard SendMessage(w, TCM_REMOVEIMAGE, i.WPARAM, 0)
proc TabCtrl_SetPadding*(w: HWND, x: int32, y: int32): void = discard SendMessage(w, TCM_SETPADDING, 0, MAKELPARAM(x, y))
proc TabCtrl_GetRowCount*(w: HWND): int32 = cast[int32](SendMessage(w, TCM_GETROWCOUNT, 0, 0))
proc TabCtrl_GetToolTips*(w: HWND): HWND = cast[HWND](SendMessage(w, TCM_GETTOOLTIPS, 0, 0))
proc TabCtrl_SetToolTips*(w: HWND, t: HWND): void = discard SendMessage(w, TCM_SETTOOLTIPS, t.WPARAM, 0)
proc TabCtrl_GetCurFocus*(w: HWND): int32 = cast[int32](SendMessage(w, TCM_GETCURFOCUS, 0, 0))
proc TabCtrl_SetCurFocus*(w: HWND, i: int32): void = discard SendMessage(w, TCM_SETCURFOCUS, i.WPARAM, 0)
proc TabCtrl_GetImageList*(w: HWND): HIMAGELIST = cast[HIMAGELIST](SendMessage(w, TCM_GETIMAGELIST, 0, 0))
proc TabCtrl_SetImageList*(w: HWND, h: HIMAGELIST): HIMAGELIST = cast[HIMAGELIST](SendMessage(w, TCM_SETIMAGELIST, 0, h.LPARAM))
proc TabCtrl_GetItemCount*(w: HWND): int32 = cast[int32](SendMessage(w, TCM_GETITEMCOUNT, 0, 0))

proc COMCTL32_TrackMouseEvent*(P1: LPTRACKMOUSEEVENT): BOOL {.winapi, dynlib: "comctl32", importc: "_TrackMouseEvent".}

proc TreeView_InsertItem*(w: HWND, i: LPTVINSERTSTRUCT): HTREEITEM = cast[HTREEITEM](SendMessage(w, TVM_INSERTITEM, 0, cast[LPARAM](i)))
proc TreeView_DeleteItem*(w: HWND, i: HTREEITEM): BOOL = cast[BOOL](SendMessage(w, TVM_DELETEITEM, 0, cast[LPARAM](i)))
proc TreeView_DeleteAllItems*(w: HWND): BOOL = cast[BOOL](SendMessage(w, TVM_DELETEITEM, 0, cast[LPARAM](TVI_ROOT)))
proc TreeView_Expand*(w: HWND, i: HTREEITEM, c: UINT): BOOL = cast[BOOL](SendMessage(w, TVM_EXPAND, c, cast[LPARAM](i)))
proc TreeView_GetItemRect*(w: HWND, i: HTREEITEM, p: LPRECT, c: BOOL): BOOL = cast[BOOL](SendMessage(w, TVM_GETITEMRECT, c.WPARAM, cast[LPARAM](p)))
proc TreeView_GetCount*(w: HWND): UINT = cast[UINT](SendMessage(w, TVM_GETCOUNT, 0, 0).UINT)
proc TreeView_GetIndent*(w: HWND): UINT = cast[UINT](SendMessage(w, TVM_GETINDENT, 0, 0).UINT)
proc TreeView_SetIndent*(w: HWND, i: INT): BOOL = cast[BOOL](SendMessage(w, TVM_SETINDENT, i.WPARAM, 0))
proc TreeView_GetImageList*(w: HWND, i: INT): HIMAGELIST = cast[HIMAGELIST](SendMessage(w, TVM_GETIMAGELIST, i.WPARAM, 0))
proc TreeView_SetImageList*(w: HWND, h: HIMAGELIST, i: INT): HIMAGELIST = cast[HIMAGELIST](SendMessage(w, TVM_SETIMAGELIST, i.WPARAM, cast[LPARAM](h)))
proc TreeView_GetNextItem*(w: HWND, i: HTREEITEM, c: UINT): HTREEITEM = cast[HTREEITEM](SendMessage(w, TVM_GETNEXTITEM, c, cast[LPARAM](i)))
proc TreeView_GetChild*(w: HWND, i: HTREEITEM): HTREEITEM = TreeView_GetNextItem(w, i, TVGN_CHILD)
proc TreeView_GetNextSibling*(w: HWND, i: HTREEITEM): HTREEITEM = TreeView_GetNextItem(w, i, TVGN_NEXT)
proc TreeView_GetPrevSibling*(w: HWND, i: HTREEITEM): HTREEITEM = TreeView_GetNextItem(w, i, TVGN_PREVIOUS)
proc TreeView_GetParent*(w: HWND, i: HTREEITEM): HTREEITEM = TreeView_GetNextItem(w, i, TVGN_PARENT)
proc TreeView_GetFirstVisible*(w: HWND): HTREEITEM = TreeView_GetNextItem(w, 0, TVGN_FIRSTVISIBLE)
proc TreeView_GetNextVisible*(w: HWND, i: HTREEITEM): HTREEITEM = TreeView_GetNextItem(w, i, TVGN_NEXTVISIBLE)
proc TreeView_GetPrevVisible*(w: HWND, i: HTREEITEM): HTREEITEM = TreeView_GetNextItem(w, i, TVGN_PREVIOUSVISIBLE)
proc TreeView_GetSelection*(w: HWND): HTREEITEM = TreeView_GetNextItem(w, 0, TVGN_CARET)
proc TreeView_GetDropHilight*(w: HTREEITEM): HTREEITEM = TreeView_GetNextItem(w, 0, TVGN_DROPHILITE)
proc TreeView_GetRoot*(w: HWND): HTREEITEM = TreeView_GetNextItem(w, 0, TVGN_ROOT)
proc TreeView_Select*(w: HWND, i: HTREEITEM, c: UINT): BOOL = cast[BOOL](SendMessage(w, TVM_SELECTITEM, c, cast[LPARAM](i)))
proc TreeView_SelectItem*(w: HWND, i: HTREEITEM): BOOL = TreeView_Select(w, i, TVGN_CARET)
proc TreeView_SelectDropTarget*(w: HWND, i: HTREEITEM): BOOL = TreeView_Select(w, i, TVGN_DROPHILITE)
proc TreeView_SelectSetFirstVisible*(w: HWND, i: HTREEITEM): BOOL = TreeView_Select(w, i, TVGN_FIRSTVISIBLE)
proc TreeView_GetItem*(w: HWND, i: LPTVITEM): BOOL = cast[BOOL](SendMessage(w, TVM_GETITEM, 0, cast[LPARAM](i)))
proc TreeView_SetItem*(w: HWND, i: ptr TV_ITEM): BOOL = cast[BOOL](SendMessage(w, TVM_SETITEM, 0, cast[LPARAM](i)))
proc TreeView_EditLabel*(w: HWND, i: HTREEITEM): HWND = cast[HWND](SendMessage(w, TVM_EDITLABEL, 0, cast[LPARAM](i)))
proc TreeView_GetEditControl*(w: HWND): HWND = cast[HWND](SendMessage(w, TVM_GETEDITCONTROL, 0, 0))
proc TreeView_GetVisibleCount*(w: HWND): UINT = cast[UINT](SendMessage(w, TVM_GETVISIBLECOUNT, 0, 0).UINT)
proc TreeView_HitTest*(w: HWND, p: LPTVHITTESTINFO): HTREEITEM = cast[HTREEITEM](SendMessage(w, TVM_HITTEST, 0, cast[LPARAM](p)))
proc TreeView_CreateDragImage*(w: HWND, i: HTREEITEM): HIMAGELIST = cast[HIMAGELIST](SendMessage(w, TVM_CREATEDRAGIMAGE, 0, i.LPARAM))
proc TreeView_SortChildren*(w: HWND, i: HTREEITEM, r: BOOL): BOOL = cast[BOOL](SendMessage(w, TVM_SORTCHILDREN, r.WPARAM, i.LPARAM))
proc TreeView_EnsureVisible*(w: HWND, i: HTREEITEM): BOOL = cast[BOOL](SendMessage(w, TVM_ENSUREVISIBLE, 0, i.LPARAM))
proc TreeView_SortChildrenCB*(w: HWND, s: LPTVSORTCB, r: BOOL): BOOL = cast[BOOL](SendMessage(w, TVM_SORTCHILDRENCB, r.WPARAM, cast[LPARAM](s)))
proc TreeView_EndEditLabelNow*(w: HWND, f: BOOL): BOOL = cast[BOOL](SendMessage(w, TVM_ENDEDITLABELNOW, f.WPARAM, 0))
proc TreeView_GetISearchString*(w: HWND, s: LPTSTR): BOOL = cast[BOOL](SendMessage(w, TVM_GETISEARCHSTRING, 0, cast[LPARAM](s)))
proc ListView_ApproximateViewRect*(w: HWND, iw: int32, ih: int32, i: int32): DWORD = cast[DWORD](SendMessage(w, LVM_APPROXIMATEVIEWRECT, i.WPARAM, MAKELPARAM(iw, ih)))
proc ListView_SetExtendedListViewStyle*(w: HWND, s: DWORD): DWORD = cast[DWORD](SendMessage(w, LVM_SETEXTENDEDLISTVIEWSTYLE, 0, s.LPARAM))
proc ListView_GetExtendedListViewStyle*(w: HWND): DWORD = cast[DWORD](SendMessage(w, LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0))
proc ListView_SetColumnOrderArray*(w: HWND, i: int32, a: ptr int32): BOOL = cast[BOOL](SendMessage(w, LVM_SETCOLUMNORDERARRAY, i.WPARAM, cast[LPARAM](a)))
proc ListView_GetColumnOrderArray*(w: HWND, i: int32, a: ptr int32): BOOL = cast[BOOL](SendMessage(w, LVM_GETCOLUMNORDERARRAY, i.WPARAM, cast[LPARAM](a)))
proc ListView_GetHeader*(w: HWND): HWND = cast[HWND](SendMessage(w, LVM_GETHEADER, 0, 0))
proc ListView_GetHotCursor*(w: HWND): HCURSOR = cast[HCURSOR](SendMessage(w, LVM_GETHOTCURSOR, 0, 0))
proc ListView_GetHotItem*(w: HWND): INT = cast[INT](SendMessage(w, LVM_GETHOTITEM, 0, 0))
proc ListView_GetSubItemRect*(w: HWND, i: int32, isi: int32, c: int32, p: LPRECT): BOOL =
  if p != nil:
    p.left = c
    p.top = isi
  cast[BOOL](SendMessage(w, LVM_GETSUBITEMRECT, i.WPARAM, if p!= nil: cast[LPARAM](p) else: 0))
proc ListView_SetHotCursor*(w: HWND, c: HCURSOR): HCURSOR = cast[HCURSOR](SendMessage(w, LVM_SETHOTCURSOR, 0, c.LPARAM))
proc ListView_SetHotItem*(w: HWND, i: INT): INT = cast[INT](SendMessage(w, LVM_SETHOTITEM, i.WPARAM, 0))
proc ListView_SetIconSpacing*(w: HWND, x: int32, y: int32): DWORD = cast[DWORD](SendMessage(w, LVM_SETICONSPACING, 0, MAKELPARAM(x, y)))
proc ListView_SubItemHitTest*(w: HWND, p: LPLVHITTESTINFO): INT = cast[INT](SendMessage(w, LVM_SUBITEMHITTEST, 0, cast[LPARAM](p)))
proc ListView_SetItemCountEx*(w: HWND, i: int32, f: DWORD): BOOL = cast[BOOL](SendMessage(w, LVM_SETITEMCOUNT, i.WPARAM, f.LPARAM))

proc ImageList_SetImageCount*(P1: HIMAGELIST, P2: UINT): WINBOOL {.winapi, dynlib: "comctl32", importc.}
proc ImageList_Copy*(P1: HIMAGELIST, P2: int32, P3: HIMAGELIST, P4: int32, P5: UINT): WINBOOL {.winapi, dynlib: "comctl32", importc.}
proc ImageList_DrawIndirect*(P1: ptr IMAGELISTDRAWPARAMS): WINBOOL {.winapi, dynlib: "comctl32", importc.}

proc TabCtrl_SetMinTabWidth*(hwnd: HWND, x: int32): int32 = cast[int32](SendMessage(hwnd, TCM_SETMINTABWIDTH, 0, x.LPARAM))
proc TabCtrl_DeselectAll*(hwnd: HWND, fExcludeFocus: UINT): VOID = discard SendMessage(hwnd, TCM_DESELECTALL, fExcludeFocus, 0)
proc TreeView_GetToolTips*(w: HWND): HWND = cast[HWND](SendMessage(w, TVM_GETTOOLTIPS, 0, 0))
proc TreeView_SetToolTips*(w: HWND, wt: HWND): HWND = cast[HWND](SendMessage(w, TVM_SETTOOLTIPS, wt.WPARAM, 0))
proc ListView_GetBkImage*(h: HWND, plvbki: LPLVBKIMAGE): BOOL = cast[BOOL](SendMessage(h, LVM_GETBKIMAGE, 0, cast[LPARAM](plvbki)))
proc ListView_SetBkImage*(h: HWND, plvbki: LPLVBKIMAGE): BOOL = cast[BOOL](SendMessage(h, LVM_SETBKIMAGE, 0, cast[LPARAM](plvbki)))
proc ListView_SetExtendedListViewStyleEx*(w: HWND, m: DWORD, s: DWORD): DWORD = cast[DWORD](SendMessage(w, LVM_SETEXTENDEDLISTVIEWSTYLE, m.WPARAM, s.LPARAM))
proc ListView_SetWorkAreas*(w: HWND, n: INT, r: LPRECT): VOID = discard SendMessage(w, LVM_SETWORKAREAS, n.WPARAM, cast[LPARAM](r))
proc ListView_GetWorkAreas*(w: HWND, n: INT, r: LPRECT): VOID = discard SendMessage(w, LVM_GETWORKAREAS, n.WPARAM, cast[LPARAM](r))
proc ListView_GetNumberOfWorkAreas*(w: HWND, n: LPUINT): BOOL = cast[BOOL](SendMessage(w, LVM_GETNUMBEROFWORKAREAS, 0, cast[LPARAM](n)))
proc ListView_SetHoverTime*(w: HWND, t: DWORD): DWORD = cast[DWORD](SendMessage(w, LVM_SETHOVERTIME, 0, t.LPARAM))
proc ListView_GetHoverTime*(w: HWND): DWORD = cast[DWORD](SendMessage(w, LVM_GETHOVERTIME, 0, 0))
proc ListView_GetSelectionMark*(w: HWND): INT = cast[INT](SendMessage(w, LVM_GETSELECTIONMARK, 0, 0))
proc ListView_SetSelectionMark*(w: HWND, i: INT): INT = cast[INT](SendMessage(w, LVM_SETSELECTIONMARK, 0, i.LPARAM))
proc ListView_SetToolTips*(w: HWND, n: HWND): HWND = cast[HWND](SendMessage(w, LVM_SETTOOLTIPS, n.WPARAM, 0))
proc ListView_GetToolTips*(w: HWND): HWND = cast[HWND](SendMessage(w, LVM_GETTOOLTIPS, 0, 0))
proc ListView_SetUnicodeFormat*(w: HWND, f: BOOL): BOOL = cast[BOOL](SendMessage(w, LVM_SETUNICODEFORMAT, f.WPARAM, 0))
proc ListView_GetUnicodeFormat*(w: HWND): BOOL = cast[BOOL](SendMessage(w, LVM_GETUNICODEFORMAT, 0, 0))
proc TabCtrl_HighlightItem*(hwnd: HWND, i: INT, fHighlight: WORD): BOOL = cast[BOOL](SendMessage(hwnd, TCM_HIGHLIGHTITEM, i.WPARAM, MAKELONG(fHighlight, 0).LPARAM))
proc TabCtrl_SetExtendedStyle*(hwnd: HWND, dw: DWORD): DWORD = cast[DWORD](SendMessage(hwnd, TCM_SETEXTENDEDSTYLE, 0, dw.LPARAM))
proc TabCtrl_GetExtendedStyle*(hwnd: HWND): DWORD = cast[DWORD](SendMessage(hwnd, TCM_GETEXTENDEDSTYLE, 0, 0))
proc TabCtrl_SetUnicodeFormat*(hwnd: HWND, fUnicode: HWND): BOOL = cast[BOOL](SendMessage(hwnd, TCM_SETUNICODEFORMAT, fUnicode.WPARAM, 0))
proc TabCtrl_GetUnicodeFormat*(hwnd: HWND): BOOL = cast[BOOL](SendMessage(hwnd, TCM_GETUNICODEFORMAT, 0, 0))
proc TreeView_GetBkColor*(w: HWND): COLORREF = cast[COLORREF](SendMessage(w, TVM_GETBKCOLOR, 0, 0).COLORREF)
proc TreeView_GetInsertMarkColor*(w: HWND): COLORREF = cast[COLORREF](SendMessage(w, TVM_GETINSERTMARKCOLOR, 0, 0).COLORREF)
proc TreeView_GetItemHeight*(w: HWND): int32 = cast[int32](SendMessage(w, TVM_GETITEMHEIGHT, 0, 0))
proc TreeView_GetScrollTime*(w: HWND): UINT = cast[UINT](SendMessage(w, TVM_GETSCROLLTIME, 0, 0).UINT)
proc TreeView_GetTextColor*(w: HWND): COLORREF = cast[COLORREF](SendMessage(w, TVM_GETTEXTCOLOR, 0, 0).COLORREF)
proc TreeView_SetBkColor*(w: HWND, c: COLORREF): COLORREF = cast[COLORREF](SendMessage(w, TVM_SETBKCOLOR, 0, c.LPARAM).COLORREF)
proc TreeView_SetInsertMarkColor*(w: HWND, c: COLORREF): COLORREF = cast[COLORREF](SendMessage(w, TVM_SETINSERTMARKCOLOR, 0, c.LPARAM).COLORREF)
proc TreeView_SetItemHeight*(w: HWND, h: SHORT): int32 = cast[int32](SendMessage(w, TVM_SETITEMHEIGHT, h.WPARAM, 0))
proc TreeView_SetScrollTime*(w: HWND, t: UINT): UINT = cast[UINT](SendMessage(w, TVM_SETSCROLLTIME, t.WPARAM, 0).UINT)
proc TreeView_SetTextColor*(w: HWND, c: COLORREF): COLORREF = cast[COLORREF](SendMessage(w, TVM_SETTEXTCOLOR, 0, c.LPARAM).COLORREF)
proc TreeView_SetInsertMark*(w: HWND, i: HTREEITEM, a: BOOL): BOOL = cast[BOOL](SendMessage(w, TVM_SETINSERTMARK, a.WPARAM, i.LPARAM))
proc TreeView_SetUnicodeFormat*(w: HWND, u: BOOL): BOOL = cast[BOOL](SendMessage(w, TVM_SETUNICODEFORMAT, u.WPARAM, 0))
proc TreeView_GetUnicodeFormat*(w: HWND): BOOL = cast[BOOL](SendMessage(w, TVM_GETUNICODEFORMAT, 0, 0))
proc TreeView_GetLastVisible*(w: HWND): HTREEITEM = TreeView_GetNextItem(w, 0, TVGN_LASTVISIBLE)
proc TreeView_GetItemState*(w: HWND, i: HTREEITEM, m: UINT): UINT = cast[UINT](SendMessage(w, TVM_GETITEMSTATE, i.WPARAM, m.LPARAM).UINT)
proc TreeView_SetItemState*(w: HWND, i: HTREEITEM, d: UINT, m: UINT): BOOL =
  var tvi = TVITEM(mask: TVIF_STATE, hItem: i, stateMask: m, state: d)
  cast[BOOL](SendMessage(w, TVM_SETITEM, 0, cast[LPARAM](addr tvi)))

proc `itemex=`*(self: var TVINSERTSTRUCTA, x: TVITEMEXA) = self.u1.itemex = x
proc itemex*(self: TVINSERTSTRUCTA): TVITEMEXA = self.u1.itemex
proc `item=`*(self: var TVINSERTSTRUCTA, x: TV_ITEMA) = self.u1.item = x
proc item*(self: TVINSERTSTRUCTA): TV_ITEMA = self.u1.item
proc `itemex=`*(self: var TVINSERTSTRUCTW, x: TVITEMEXW) = self.u1.itemex = x
proc itemex*(self: TVINSERTSTRUCTW): TVITEMEXW = self.u1.itemex
proc `item=`*(self: var TVINSERTSTRUCTW, x: TV_ITEMW) = self.u1.item = x
proc item*(self: TVINSERTSTRUCTW): TV_ITEMW = self.u1.item

# shell/richedit.nim

when not defined(winansi):
  const
    RICHEDIT_CLASS* = "RichEdit20W"

else:
  const
    RICHEDIT_CLASS* = "RichEdit20A"

const
  RICHEDIT_CLASS10A* = "RICHEDIT"
  CF_RTF* = "Rich Text Format"
  CF_RTFNOOBJS* = "Rich Text Format Without Objects"
  CF_RETEXTOBJ* = "RichEdit Text and Objects"
  CFM_BOLD* = 1
  CFM_ITALIC* = 2
  CFM_UNDERLINE* = 4
  CFM_STRIKEOUT* = 8
  CFM_PROTECTED* = 16
  CFM_LINK* = 32
  CFM_SIZE* = 0x80000000'u32
  CFM_COLOR* = 0x40000000
  CFM_FACE* = 0x20000000
  CFM_OFFSET* = 0x10000000
  CFM_CHARSET* = 0x08000000
  CFM_SUBSCRIPT* = 0x00030000
  CFM_SUPERSCRIPT* = 0x00030000
  CFE_BOLD* = 1
  CFE_ITALIC* = 2
  CFE_UNDERLINE* = 4
  CFE_STRIKEOUT* = 8
  CFE_PROTECTED* = 16
  CFE_SUBSCRIPT* = 0x00010000
  CFE_SUPERSCRIPT* = 0x00020000
  CFE_AUTOCOLOR* = 0x40000000
  CFM_EFFECTS* = CFM_BOLD or CFM_ITALIC or CFM_UNDERLINE or CFM_COLOR or CFM_STRIKEOUT or CFE_PROTECTED or CFM_LINK
  IMF_FORCENONE* = 1
  IMF_FORCEENABLE* = 2
  IMF_FORCEDISABLE* = 4
  IMF_CLOSESTATUSWINDOW* = 8
  IMF_VERTICAL* = 32
  IMF_FORCEACTIVE* = 64
  IMF_FORCEINACTIVE* = 128
  IMF_FORCEREMEMBER* = 256
  SEL_EMPTY* = 0
  SEL_TEXT* = 1
  SEL_OBJECT* = 2
  SEL_MULTICHAR* = 4
  SEL_MULTIOBJECT* = 8
  MAX_TAB_STOPS* = 32
  PFM_ALIGNMENT* = 8
  PFM_NUMBERING* = 32
  PFM_OFFSET* = 4
  PFM_OFFSETINDENT* = 0x80000000'i32
  PFM_RIGHTINDENT* = 2
  PFM_STARTINDENT* = 1
  PFM_TABSTOPS* = 16
  PFM_BORDER* = 2048
  PFM_LINESPACING* = 256
  PFM_NUMBERINGSTART* = 32768
  PFM_NUMBERINGSTYLE* = 8192
  PFM_NUMBERINGTAB* = 16384
  PFM_SHADING* = 4096
  PFM_SPACEAFTER* = 128
  PFM_SPACEBEFORE* = 64
  PFM_STYLE* = 1024
  PFM_DONOTHYPHEN* = 4194304
  PFM_KEEP* = 131072
  PFM_KEEPNEXT* = 262144
  PFM_NOLINENUMBER* = 1048576
  PFM_NOWIDOWCONTROL* = 2097152
  PFM_PAGEBREAKBEFORE* = 524288
  PFM_RTLPARA* = 65536
  PFM_SIDEBYSIDE* = 8388608
  PFM_TABLE* = 1073741824
  PFN_BULLET* = 1
  PFE_DONOTHYPHEN* = 64
  PFE_KEEP* = 2
  PFE_KEEPNEXT* = 4
  PFE_NOLINENUMBER* = 16
  PFE_NOWIDOWCONTROL* = 32
  PFE_PAGEBREAKBEFORE* = 8
  PFE_RTLPARA* = 1
  PFE_SIDEBYSIDE* = 128
  PFE_TABLE* = 16384
  PFA_LEFT* = 1
  PFA_RIGHT* = 2
  PFA_CENTER* = 3
  PFA_JUSTIFY* = 4
  PFA_FULL_INTERWORD* = 4
  SF_TEXT* = 1
  SF_RTF* = 2
  SF_RTFNOOBJS* = 3
  SF_TEXTIZED* = 4
  SF_UNICODE* = 16
  SF_USECODEPAGE* = 32
  SF_NCRFORNONASCII* = 64
  SF_RTFVAL* = 0x0700
  SFF_PWD* = 0x0800
  SFF_KEEPDOCINFO* = 0x1000
  SFF_PERSISTVIEWSCALE* = 0x2000
  SFF_PLAINRTF* = 0x4000
  SFF_SELECTION* = 0x8000
  WB_CLASSIFY* = 3
  WB_MOVEWORDLEFT* = 4
  WB_MOVEWORDRIGHT* = 5
  WB_LEFTBREAK* = 6
  WB_RIGHTBREAK* = 7
  WB_MOVEWORDPREV* = 4
  WB_MOVEWORDNEXT* = 5
  WB_PREVBREAK* = 6
  WB_NEXTBREAK* = 7
  WBF_WORDWRAP* = 16
  WBF_WORDBREAK* = 32
  WBF_OVERFLOW* = 64
  WBF_LEVEL1* = 128
  WBF_LEVEL2* = 256
  WBF_CUSTOM* = 512
  ES_DISABLENOSCROLL* = 8192
  ES_SUNKEN* = 16384
  ES_SAVESEL* = 32768
  ES_EX_NOCALLOLEINIT* = 16777216
  ES_NOIME* = 524288
  ES_NOOLEDRAGDROP* = 8
  ES_SELECTIONBAR* = 16777216
  ES_SELFIME* = 262144
  ES_VERTICAL* = 4194304
  EM_CANPASTE* = WM_USER+50
  EM_DISPLAYBAND* = WM_USER+51
  EM_EXGETSEL* = WM_USER+52
  EM_EXLIMITTEXT* = WM_USER+53
  EM_EXLINEFROMCHAR* = WM_USER+54
  EM_EXSETSEL* = WM_USER+55
  EM_FINDTEXT* = WM_USER+56
  EM_FORMATRANGE* = WM_USER+57
  EM_GETCHARFORMAT* = WM_USER+58
  EM_GETEVENTMASK* = WM_USER+59
  EM_GETOLEINTERFACE* = WM_USER+60
  EM_GETPARAFORMAT* = WM_USER+61
  EM_GETSELTEXT* = WM_USER+62
  EM_HIDESELECTION* = WM_USER+63
  EM_PASTESPECIAL* = WM_USER+64
  EM_REQUESTRESIZE* = WM_USER+65
  EM_SELECTIONTYPE* = WM_USER+66
  EM_SETBKGNDCOLOR* = WM_USER+67
  EM_SETCHARFORMAT* = WM_USER+68
  EM_SETEVENTMASK* = WM_USER+69
  EM_SETOLECALLBACK* = WM_USER+70
  EM_SETPARAFORMAT* = WM_USER+71
  EM_SETTARGETDEVICE* = WM_USER+72
  EM_STREAMIN* = WM_USER+73
  EM_STREAMOUT* = WM_USER+74
  EM_GETTEXTRANGE* = WM_USER+75
  EM_FINDWORDBREAK* = WM_USER+76
  EM_SETOPTIONS* = WM_USER+77
  EM_GETOPTIONS* = WM_USER+78
  EM_FINDTEXTEX* = WM_USER+79
  EM_GETWORDBREAKPROCEX* = WM_USER+80
  EM_SETWORDBREAKPROCEX* = WM_USER+81
  EM_SETUNDOLIMIT* = WM_USER+82
  EM_REDO* = WM_USER+84
  EM_CANREDO* = WM_USER+85
  EM_GETUNDONAME* = WM_USER+86
  EM_GETREDONAME* = WM_USER+87
  EM_STOPGROUPTYPING* = WM_USER+88
  EM_SETTEXTMODE* = WM_USER+89
  EM_GETTEXTMODE* = WM_USER+90
  EM_AUTOURLDETECT* = WM_USER+91
  EM_GETAUTOURLDETECT* = WM_USER + 92
  EM_SETPALETTE* = WM_USER + 93
  EM_GETTEXTEX* = WM_USER+94
  EM_GETTEXTLENGTHEX* = WM_USER+95
  EM_SHOWSCROLLBAR* = WM_USER+96
  EM_SETTEXTEX* = WM_USER + 97
  EM_SETPUNCTUATION* = WM_USER + 100
  EM_GETPUNCTUATION* = WM_USER + 101
  EM_SETWORDWRAPMODE* = WM_USER + 102
  EM_GETWORDWRAPMODE* = WM_USER + 103
  EM_SETIMECOLOR* = WM_USER + 104
  EM_GETIMECOLOR* = WM_USER + 105
  EM_SETIMEOPTIONS* = WM_USER + 106
  EM_GETIMEOPTIONS* = WM_USER + 107
  EM_SETLANGOPTIONS* = WM_USER+120
  EM_GETLANGOPTIONS* = WM_USER+121
  EM_GETIMECOMPMODE* = WM_USER+122
  EM_FINDTEXTW* = WM_USER + 123
  EM_FINDTEXTEXW* = WM_USER + 124
  EM_RECONVERSION* = WM_USER + 125
  EM_SETBIDIOPTIONS* = WM_USER + 200
  EM_GETBIDIOPTIONS* = WM_USER + 201
  EM_SETTYPOGRAPHYOPTIONS* = WM_USER+202
  EM_GETTYPOGRAPHYOPTIONS* = WM_USER+203
  EM_SETEDITSTYLE* = WM_USER + 204
  EM_GETEDITSTYLE* = WM_USER + 205
  EM_GETSCROLLPOS* = WM_USER+221
  EM_SETSCROLLPOS* = WM_USER+222
  EM_SETFONTSIZE* = WM_USER+223
  EM_GETZOOM* = WM_USER+224
  EM_SETZOOM* = WM_USER+225
  EN_MSGFILTER* = 1792
  EN_REQUESTRESIZE* = 1793
  EN_SELCHANGE* = 1794
  EN_DROPFILES* = 1795
  EN_PROTECTED* = 1796
  EN_CORRECTTEXT* = 1797
  EN_STOPNOUNDO* = 1798
  EN_IMECHANGE* = 1799
  EN_SAVECLIPBOARD* = 1800
  EN_OLEOPFAILED* = 1801
  EN_LINK* = 1803
  ENM_NONE* = 0
  ENM_CHANGE* = 1
  ENM_UPDATE* = 2
  ENM_SCROLL* = 4
  ENM_SCROLLEVENTS* = 8
  ENM_DRAGDROPDONE* = 16
  ENM_KEYEVENTS* = 65536
  ENM_MOUSEEVENTS* = 131072
  ENM_REQUESTRESIZE* = 262144
  ENM_SELCHANGE* = 524288
  ENM_DROPFILES* = 1048576
  ENM_PROTECTED* = 2097152
  ENM_CORRECTTEXT* = 4194304
  ENM_IMECHANGE* = 8388608
  ENM_LANGCHANGE* = 16777216
  ENM_OBJECTPOSITIONS* = 33554432
  ENM_LINK* = 67108864
  ECO_AUTOWORDSELECTION* = 1
  ECO_AUTOVSCROLL* = 64
  ECO_AUTOHSCROLL* = 128
  ECO_NOHIDESEL* = 256
  ECO_READONLY* = 2048
  ECO_WANTRETURN* = 4096
  ECO_SAVESEL* = 0x8000
  ECO_SELECTIONBAR* = 0x1000000
  ECO_VERTICAL* = 0x400000
  ECOOP_SET* = 1
  ECOOP_OR* = 2
  ECOOP_AND* = 3
  ECOOP_XOR* = 4
  SCF_DEFAULT* = 0
  SCF_SELECTION* = 1
  SCF_WORD* = 2
  SCF_ALL* = 4
  SCF_USEUIRULES* = 8
  TM_PLAINTEXT* = 1
  TM_RICHTEXT* = 2
  TM_SINGLELEVELUNDO* = 4
  TM_MULTILEVELUNDO* = 8
  TM_SINGLECODEPAGE* = 16
  TM_MULTICODEPAGE* = 32
  GT_DEFAULT* = 0
  GT_USECRLF* = 1
  yHeightCharPtsMost* = 1638
  lDefaultTab* = 720

type
  CHARFORMATA* {.final, pure.} = object
    cbSize*: UINT
    dwMask*: DWORD
    dwEffects*: DWORD
    yHeight*: LONG
    yOffset*: LONG
    crTextColor*: COLORREF
    bCharSet*: BYTE
    bPitchAndFamily*: BYTE
    szFaceName*: array[LF_FACESIZE, char]
  CHARFORMATW* {.final, pure.} = object
    cbSize*: UINT
    dwMask*: DWORD
    dwEffects*: DWORD
    yHeight*: LONG
    yOffset*: LONG
    crTextColor*: COLORREF
    bCharSet*: BYTE
    bPitchAndFamily*: BYTE
    szFaceName*: array[LF_FACESIZE, WCHAR]
  CHARFORMAT2A* {.final, pure.} = object
    cbSize*: UINT
    dwMask*: DWORD
    dwEffects*: DWORD
    yHeight*: LONG
    yOffset*: LONG
    crTextColor*: COLORREF
    bCharSet*: BYTE
    bPitchAndFamily*: BYTE
    szFaceName*: array[LF_FACESIZE, char]
    wWeight*: WORD
    sSpacing*: SHORT
    crBackColor*: COLORREF
    lcid*: LCID
    dwReserved*: DWORD
    sStyle*: SHORT
    wKerning*: WORD
    bUnderlineType*: BYTE
    bAnimation*: BYTE
    bRevAuthor*: BYTE
  CHARFORMAT2W* {.final, pure.} = object
    cbSize*: UINT
    dwMask*: DWORD
    dwEffects*: DWORD
    yHeight*: LONG
    yOffset*: LONG
    crTextColor*: COLORREF
    bCharSet*: BYTE
    bPitchAndFamily*: BYTE
    szFaceName*: array[LF_FACESIZE, WCHAR]
    wWeight*: WORD
    sSpacing*: SHORT
    crBackColor*: COLORREF
    lcid*: LCID
    dwReserved*: DWORD
    sStyle*: SHORT
    wKerning*: WORD
    bUnderlineType*: BYTE
    bAnimation*: BYTE
    bRevAuthor*: BYTE
  CHARRANGE* {.final, pure.} = object
    cpMin*: LONG
    cpMax*: LONG
  COMPCOLOR* {.final, pure.} = object
    crText*: COLORREF
    crBackground*: COLORREF
    dwEffects*: DWORD
  EDITSTREAMCALLBACK* = proc (P1: DWORD, P2: PBYTE, P3: LONG, P4: ptr LONG): DWORD {.stdcall.}
  EDITSTREAM* {.final, pure.} = object
    dwCookie*: DWORD
    dwError*: DWORD
    pfnCallback*: EDITSTREAMCALLBACK
  TENCORRECTTEXT* {.final, pure.} = object # renamed from ENCORRECTTEXT
    nmhdr*: NMHDR
    chrg*: CHARRANGE
    seltyp*: WORD
  TENDROPFILES* {.final, pure.} = object # renamed from ENDROPFILES
    nmhdr*: NMHDR
    hDrop*: HANDLE
    cp*: LONG
    fProtected*: BOOL
  TENLINK* {.final, pure.} = object # renamed from ENLINK
    nmhdr*: NMHDR
    msg*: UINT
    wParam*: WPARAM
    lParam*: LPARAM
    chrg*: CHARRANGE
  TENOLEOPFAILED* {.final, pure.} = object # renamed from ENOLEOPFAILED
    nmhdr*: NMHDR
    iob*: LONG
    lOper*: LONG
    hr*: HRESULT
  TENPROTECTED* {.final, pure.} = object # renamed from ENPROTECTED
    nmhdr*: NMHDR
    msg*: UINT
    wParam*: WPARAM
    lParam*: LPARAM
    chrg*: CHARRANGE
  LPENPROTECTED* = ptr TENPROTECTED
  TENSAVECLIPBOARD* {.final, pure.} = object # renamed from ENSAVECLIPBOARD
    nmhdr*: NMHDR
    cObjectCount*: LONG
    cch*: LONG
  TFINDTEXTA* {.final, pure.} = object # renamed from FINDTEXTA
    chrg*: CHARRANGE
    lpstrText*: LPSTR
  TFINDTEXTW* {.final, pure.} = object # renamed from FINDTEXTW
    chrg*: CHARRANGE
    lpstrText*: LPWSTR
  FINDTEXTEXA* {.final, pure.} = object
    chrg*: CHARRANGE
    lpstrText*: LPSTR
    chrgText*: CHARRANGE
  FINDTEXTEXW* {.final, pure.} = object
    chrg*: CHARRANGE
    lpstrText*: LPWSTR
    chrgText*: CHARRANGE
  FORMATRANGE* {.final, pure.} = object
    hdc*: HDC
    hdcTarget*: HDC
    rc*: RECT
    rcPage*: RECT
    chrg*: CHARRANGE
  MSGFILTER* {.final, pure.} = object
    nmhdr*: NMHDR
    msg*: UINT
    wParam*: WPARAM
    lParam*: LPARAM
  PARAFORMAT* {.final, pure.} = object
    cbSize*: UINT
    dwMask*: DWORD
    wNumbering*: WORD
    wReserved*: WORD
    dxStartIndent*: LONG
    dxRightIndent*: LONG
    dxOffset*: LONG
    wAlignment*: WORD
    cTabCount*: SHORT
    rgxTabs*: array[MAX_TAB_STOPS, LONG]
  PARAFORMAT2* {.final, pure.} = object
    cbSize*: UINT
    dwMask*: DWORD
    wNumbering*: WORD
    wEffects*: WORD
    dxStartIndent*: LONG
    dxRightIndent*: LONG
    dxOffset*: LONG
    wAlignment*: WORD
    cTabCount*: SHORT
    rgxTabs*: array[MAX_TAB_STOPS, LONG]
    dySpaceBefore*: LONG
    dySpaceAfter*: LONG
    dyLineSpacing*: LONG
    sStype*: SHORT
    bLineSpacingRule*: BYTE
    bOutlineLevel*: BYTE
    wShadingWeight*: WORD
    wShadingStyle*: WORD
    wNumberingStart*: WORD
    wNumberingStyle*: WORD
    wNumberingTab*: WORD
    wBorderSpace*: WORD
    wBorderWidth*: WORD
    wBorders*: WORD
  SELCHANGE* {.final, pure.} = object
    nmhdr*: NMHDR
    chrg*: CHARRANGE
    seltyp*: WORD
  TEXTRANGEA* {.final, pure.} = object
    chrg*: CHARRANGE
    lpstrText*: LPSTR
  TEXTRANGEW* {.final, pure.} = object
    chrg*: CHARRANGE
    lpstrText*: LPWSTR
  REQRESIZE* {.final, pure.} = object
    nmhdr*: NMHDR
    rc*: RECT
  REPASTESPECIAL* {.final, pure.} = object
    dwAspect*: DWORD
    dwParam*: DWORD
  PUNCTUATION* {.final, pure.} = object
    iSize*: UINT
    szPunctuation*: LPSTR
  GETTEXTEX* {.final, pure.} = object
    cb*: DWORD
    flags*: DWORD
    codepage*: UINT
    lpDefaultChar*: LPCSTR
    lpUsedDefaultChar*: LPBOOL
  EDITWORDBREAKPROCEX* = proc (P1: cstring, P2: LONG, P3: BYTE, P4: INT): LONG {.stdcall.}

const
  TO_ADVANCEDTYPOGRAPHY* = 1
  TO_SIMPLELINEBREAK* = 2
  GTL_DEFAULT* = 0
  GTL_USECRLF* = 1
  GTL_PRECISE* = 2
  GTL_CLOSE* = 4
  GTL_NUMCHARS* = 8
  GTL_NUMBYTES* = 16

type
  GETTEXTLENGTHEX* {.final, pure.} = object
    flags*: DWORD
    codepage*: UINT

when not defined(winansi):
  type
    CHARFORMAT* = CHARFORMATW
    CHARFORMAT2* = CHARFORMAT2W
    TFINDTEXT* = TFINDTEXTW # renamed from FINDTEXT
    FINDTEXTEX* = FINDTEXTEXW
    TEXTRANGE* = TEXTRANGEW

else:
  type
    CHARFORMAT* = CHARFORMATA
    CHARFORMAT2* = CHARFORMAT2A
    TFINDTEXT* = TFINDTEXTA # renamed from FINDTEXT
    FINDTEXTEX* = FINDTEXTEXA
    TEXTRANGE* = TEXTRANGEA

# shell/shellapi.nim

const
  ABE_LEFT* = 0
  ABE_TOP* = 1
  ABE_RIGHT* = 2
  ABE_BOTTOM* = 3
  ABS_AUTOHIDE* = 1
  ABS_ALWAYSONTOP* = 2
  SEE_MASK_CLASSNAME* = 1
  SEE_MASK_CLASSKEY* = 3
  SEE_MASK_IDLIST* = 4
  SEE_MASK_INVOKEIDLIST* = 12
  SEE_MASK_ICON* = 0x000010
  SEE_MASK_HOTKEY* = 0x000020
  SEE_MASK_NOCLOSEPROCESS* = 0x000040
  SEE_MASK_CONNECTNETDRV* = 0x000080
  SEE_MASK_FLAG_DDEWAIT* = 0x000100
  SEE_MASK_DOENVSUBST* = 0x000200
  SEE_MASK_FLAG_NO_UI* = 0x000400
  SEE_MASK_NO_CONSOLE* = 0x008000
  SEE_MASK_UNICODE* = 0x010000
  SEE_MASK_ASYNCOK* = 0x100000
  SEE_MASK_HMONITOR* = 0x200000
  ABM_NEW* = 0
  ABM_REMOVE* = 1
  ABM_QUERYPOS* = 2
  ABM_SETPOS* = 3
  ABM_GETSTATE* = 4
  ABM_GETTASKBARPOS* = 5
  ABM_ACTIVATE* = 6
  ABM_GETAUTOHIDEBAR* = 7
  ABM_SETAUTOHIDEBAR* = 8
  ABM_WINDOWPOSCHANGED* = 9

const
  ABM_SETSTATE* = 10

const
  ABN_STATECHANGE* = 0
  ABN_POSCHANGED* = 1
  ABN_FULLSCREENAPP* = 2
  ABN_WINDOWARRANGE* = 3
  NIM_ADD* = 0
  NIM_MODIFY* = 1
  NIM_DELETE* = 2

const
  NOTIFYICON_VERSION* = 3
  NIM_SETFOCUS* = 3
  NIM_SETVERSION* = 4

const
  NIF_MESSAGE* = 1
  NIF_ICON* = 2
  NIF_TIP* = 4
  NIF_STATE* = 8

const
  NIF_INFO* = 0x00000010

const
  NIF_GUID* = 0x00000020

const
  NIIF_NONE* = 0
  NIIF_INFO* = 1
  NIIF_WARNING* = 2
  NIIF_ERROR* = 3

const
  NIIF_ICON_MASK* = 15
  NIIF_NOSOUND* = 16

type
  FILEOP_FLAGS* = WORD

const
  NIS_HIDDEN* = 1
  NIS_SHAREDICON* = 2
  SE_ERR_FNF* = 2
  SE_ERR_PNF* = 3
  SE_ERR_ACCESSDENIED* = 5
  SE_ERR_OOM* = 8
  SE_ERR_DLLNOTFOUND* = 32
  SE_ERR_SHARE* = 26
  SE_ERR_ASSOCINCOMPLETE* = 27
  SE_ERR_DDETIMEOUT* = 28
  SE_ERR_DDEFAIL* = 29
  SE_ERR_DDEBUSY* = 30
  SE_ERR_NOASSOC* = 31
  FO_MOVE* = 1
  FO_COPY* = 2
  FO_DELETE* = 3
  FO_RENAME* = 4
  FOF_MULTIDESTFILES* = 0x0001
  FOF_CONFIRMMOUSE* = 0x0002
  FOF_SILENT* = 0x0004
  FOF_RENAMEONCOLLISION* = 0x0008
  FOF_NOCONFIRMATION* = 0x0010
  FOF_WANTMAPPINGHANDLE* = 0x0020
  FOF_ALLOWUNDO* = 0x0040
  FOF_FILESONLY* = 0x0080
  FOF_SIMPLEPROGRESS* = 0x0100
  FOF_NOCONFIRMMKDIR* = 0x0200
  FOF_NOERRORUI* = 0x0400
  FOF_NOCOPYSECURITYATTRIBS* = 0x0800
  PO_DELETE* = 19
  PO_RENAME* = 20
  PO_PORTCHANGE* = 32
  PO_REN_PORT* = 52
  SHGFI_LARGEICON* = 0x000000
  SHGFI_SMALLICON* = 0x000001
  SHGFI_OPENICON* = 0x000002
  SHGFI_SHELLICONSIZE* = 0x000004
  SHGFI_PIDL* = 0x000008
  SHGFI_USEFILEATTRIBUTES* = 0x000010
  SHGFI_ICON* = 0x000100
  SHGFI_DISPLAYNAME* = 0x000200
  SHGFI_TYPENAME* = 0x000400
  SHGFI_ATTRIBUTES* = 0x000800
  SHGFI_ICONLOCATION* = 0x001000
  SHGFI_EXETYPE* = 0x002000
  SHGFI_SYSICONINDEX* = 0x004000
  SHGFI_LINKOVERLAY* = 0x008000
  SHGFI_SELECTED* = 0x010000
  SHGFI_ATTR_SPECIFIED* = 0x020000
  SHERB_NOCONFIRMATION* = 1
  SHERB_NOPROGRESSUI* = 2
  SHERB_NOSOUND* = 4

type
  PRINTEROP_FLAGS* = WORD
  HDROP* = HANDLE
  APPBARDATA* {.final, pure.} = object
    cbSize*: DWORD
    hWnd*: HWND
    uCallbackMessage*: UINT
    uEdge*: UINT
    rc*: RECT
    lParam*: LPARAM
  PAPPBARDATA* = ptr APPBARDATA
  NOTIFYICONDATAA_UNION1* {.final, union, pure.} = object
    uTimeout*: UINT
    uVersion*: UINT
  NOTIFYICONDATAA* {.final, pure.} = object
    cbSize*: DWORD
    hWnd*: HWND
    uID*: UINT
    uFlags*: UINT
    uCallbackMessage*: UINT
    hIcon*: HICON
    szTip*: array[128, CHAR]
    dwState*: DWORD
    dwStateMask*: DWORD
    szInfo*: array[256, CHAR]
    u1*: NOTIFYICONDATAA_UNION1
    szInfoTitle*: array[64, CHAR]
    dwInfoFlags*: DWORD
    guidItem*: GUID
  PNOTIFYICONDATAA* = ptr NOTIFYICONDATAA
  NOTIFYICONDATAW_UNION1* {.final, union, pure.} = object
    uTimeout*: UINT
    uVersion*: UINT
  NOTIFYICONDATAW* {.final, pure.} = object
    cbSize*: DWORD
    hWnd*: HWND
    uID*: UINT
    uFlags*: UINT
    uCallbackMessage*: UINT
    hIcon*: HICON
    szTip*: array[128, WCHAR]
    dwState*: DWORD
    dwStateMask*: DWORD
    szInfo*: array[256, WCHAR]
    u1*: NOTIFYICONDATAW_UNION1
    szInfoTitle*: array[64, WCHAR]
    dwInfoFlags*: DWORD
    guidItem*: GUID
  PNOTIFYICONDATAW* = ptr NOTIFYICONDATAW
  SHELLEXECUTEINFOA* {.final, pure.} = object
    cbSize*: DWORD
    fMask*: ULONG
    hwnd*: HWND
    lpVerb*: LPCSTR
    lpFile*: LPCSTR
    lpParameters*: LPCSTR
    lpDirectory*: LPCSTR
    nShow*: int32
    hInstApp*: HINSTANCE
    lpIDList*: PVOID
    lpClass*: LPCSTR
    hkeyClass*: HKEY
    dwHotKey*: DWORD
    hIcon*: HANDLE
    hProcess*: HANDLE
  LPSHELLEXECUTEINFOA* = ptr SHELLEXECUTEINFOA
  SHELLEXECUTEINFOW* {.final, pure.} = object
    cbSize*: DWORD
    fMask*: ULONG
    hwnd*: HWND
    lpVerb*: LPCWSTR
    lpFile*: LPCWSTR
    lpParameters*: LPCWSTR
    lpDirectory*: LPCWSTR
    nShow*: int32
    hInstApp*: HINSTANCE
    lpIDList*: PVOID
    lpClass*: LPCWSTR
    hkeyClass*: HKEY
    dwHotKey*: DWORD
    hIcon*: HANDLE
    hProcess*: HANDLE
  LPSHELLEXECUTEINFOW* = ptr SHELLEXECUTEINFOW
  SHFILEOPSTRUCTA* {.final, pure.} = object
    hwnd*: HWND
    wFunc*: UINT
    pFrom*: LPCSTR
    pTo*: LPCSTR
    fFlags*: FILEOP_FLAGS
    fAnyOperationsAborted*: BOOL
    hNameMappings*: PVOID
    lpszProgressTitle*: LPCSTR
  LPSHFILEOPSTRUCTA* = ptr SHFILEOPSTRUCTA
  SHFILEOPSTRUCTW* {.final, pure.} = object
    hwnd*: HWND
    wFunc*: UINT
    pFrom*: LPCWSTR
    pTo*: LPCWSTR
    fFlags*: FILEOP_FLAGS
    fAnyOperationsAborted*: BOOL
    hNameMappings*: PVOID
    lpszProgressTitle*: LPCWSTR
  LPSHFILEOPSTRUCTW* = ptr SHFILEOPSTRUCTW
  SHFILEINFOA* {.final, pure.} = object
    hIcon*: HICON
    iIcon*: int32
    dwAttributes*: DWORD
    szDisplayName*: array[MAX_PATH, CHAR]
    szTypeName*: array[80, CHAR]
  SHFILEINFOW* {.final, pure.} = object
    hIcon*: HICON
    iIcon*: int32
    dwAttributes*: DWORD
    szDisplayName*: array[MAX_PATH, WCHAR]
    szTypeName*: array[80, WCHAR]
  SHQUERYRBINFO* {.final, pure.} = object
    cbSize*: DWORD
    i64Size*: int64
    i64NumItems*: int64
  LPSHQUERYRBINFO* = ptr SHQUERYRBINFO
proc CommandLineToArgvW*(P1: LPCWSTR, P2: ptr int32): ptr LPWSTR {.winapi, dynlib: "shell32", importc.}
proc DragAcceptFiles*(P1: HWND, P2: BOOL): void {.winapi, dynlib: "shell32", importc.}
proc DragFinish*(P1: HDROP): void {.winapi, dynlib: "shell32", importc.}
proc DragQueryFileA*(P1: HDROP, P2: UINT, P3: LPSTR, P4: UINT): UINT {.winapi, dynlib: "shell32", importc.}
proc DragQueryFileW*(P1: HDROP, P2: UINT, P3: LPWSTR, P4: UINT): UINT {.winapi, dynlib: "shell32", importc.}
proc DragQueryPoint*(P1: HDROP, P2: LPPOINT): BOOL {.winapi, dynlib: "shell32", importc.}
proc DuplicateIcon*(P1: HINSTANCE, P2: HICON): HICON {.winapi, dynlib: "shell32", importc.}
proc ExtractAssociatedIconA*(P1: HINSTANCE, P2: LPCSTR, P3: PWORD): HICON {.winapi, dynlib: "shell32", importc.}
proc ExtractAssociatedIconW*(P1: HINSTANCE, P2: LPCWSTR, P3: PWORD): HICON {.winapi, dynlib: "shell32", importc.}
proc ExtractIconA*(P1: HINSTANCE, P2: LPCSTR, P3: UINT): HICON {.winapi, dynlib: "shell32", importc.}
proc ExtractIconW*(P1: HINSTANCE, P2: LPCWSTR, P3: UINT): HICON {.winapi, dynlib: "shell32", importc.}
proc ExtractIconExA*(P1: LPCSTR, P2: int32, P3: ptr HICON, P4: ptr HICON, P5: UINT): UINT {.winapi, dynlib: "shell32", importc.}
proc ExtractIconExW*(P1: LPCWSTR, P2: int32, P3: ptr HICON, P4: ptr HICON, P5: UINT): UINT {.winapi, dynlib: "shell32", importc.}
proc FindExecutableA*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR): HINSTANCE {.winapi, dynlib: "shell32", importc.}
proc FindExecutableW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR): HINSTANCE {.winapi, dynlib: "shell32", importc.}
proc SHAppBarMessage*(P1: DWORD, P2: PAPPBARDATA): UINT {.winapi, dynlib: "shell32", importc.}
proc Shell_NotifyIconA*(P1: DWORD, P2: PNOTIFYICONDATAA): BOOL {.winapi, dynlib: "shell32", importc.}
proc Shell_NotifyIconW*(P1: DWORD, P2: PNOTIFYICONDATAW): BOOL {.winapi, dynlib: "shell32", importc.}
proc ShellAboutA*(P1: HWND, P2: LPCSTR, P3: LPCSTR, P4: HICON): int32 {.winapi, dynlib: "shell32", importc.}
proc ShellAboutW*(P1: HWND, P2: LPCWSTR, P3: LPCWSTR, P4: HICON): int32 {.winapi, dynlib: "shell32", importc.}
proc ShellExecuteA*(P1: HWND, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR, P5: LPCSTR, P6: INT): HINSTANCE {.winapi, dynlib: "shell32", importc.}
proc ShellExecuteW*(P1: HWND, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR, P5: LPCWSTR, P6: INT): HINSTANCE {.winapi, dynlib: "shell32", importc.}
proc ShellExecuteExA*(P1: LPSHELLEXECUTEINFOA): BOOL {.winapi, dynlib: "shell32", importc.}
proc ShellExecuteExW*(P1: LPSHELLEXECUTEINFOW): BOOL {.winapi, dynlib: "shell32", importc.}
proc SHFileOperationA*(P1: LPSHFILEOPSTRUCTA): int32 {.winapi, dynlib: "shell32", importc.}
proc SHFileOperationW*(P1: LPSHFILEOPSTRUCTW): int32 {.winapi, dynlib: "shell32", importc.}
proc SHFreeNameMappings*(P1: HANDLE): void {.winapi, dynlib: "shell32", importc.}
proc SHGetFileInfoA*(P1: LPCSTR, P2: DWORD, P3: ptr SHFILEINFOA, P4: UINT, P5: UINT): DWORD {.winapi, dynlib: "shell32", importc.}
proc SHGetFileInfoW*(P1: LPCWSTR, P2: DWORD, P3: ptr SHFILEINFOW, P4: UINT, P5: UINT): DWORD {.winapi, dynlib: "shell32", importc.}
proc SHQueryRecycleBinA*(P1: LPCSTR, P2: LPSHQUERYRBINFO): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHQueryRecycleBinW*(P1: LPCWSTR, P2: LPSHQUERYRBINFO): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHEmptyRecycleBinA*(P1: HWND, P2: LPCSTR, P3: DWORD): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHEmptyRecycleBinW*(P1: HWND, P2: LPCWSTR, P3: DWORD): HRESULT {.winapi, dynlib: "shell32", importc.}

when not defined(winansi):
  type
    NOTIFYICONDATA* = NOTIFYICONDATAW
    SHELLEXECUTEINFO* = SHELLEXECUTEINFOW
    SHFILEOPSTRUCT* = SHFILEOPSTRUCTW
    SHFILEINFO* = SHFILEINFOW

  proc DragQueryFile*(P1: HDROP, P2: UINT, P3: LPWSTR, P4: UINT): UINT {.winapi, dynlib: "shell32", importc: "DragQueryFileW".}
  proc ExtractAssociatedIcon*(P1: HINSTANCE, P2: LPCWSTR, P3: PWORD): HICON {.winapi, dynlib: "shell32", importc: "ExtractAssociatedIconW".}
  proc ExtractIcon*(P1: HINSTANCE, P2: LPCWSTR, P3: UINT): HICON {.winapi, dynlib: "shell32", importc: "ExtractIconW".}
  proc ExtractIconEx*(P1: LPCWSTR, P2: int32, P3: ptr HICON, P4: ptr HICON, P5: UINT): UINT {.winapi, dynlib: "shell32", importc: "ExtractIconExW".}
  proc FindExecutable*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR): HINSTANCE {.winapi, dynlib: "shell32", importc: "FindExecutableW".}
  proc Shell_NotifyIcon*(P1: DWORD, P2: PNOTIFYICONDATAW): BOOL {.winapi, dynlib: "shell32", importc: "Shell_NotifyIconW".}
  proc ShellAbout*(P1: HWND, P2: LPCWSTR, P3: LPCWSTR, P4: HICON): int32 {.winapi, dynlib: "shell32", importc: "ShellAboutW".}
  proc ShellExecute*(P1: HWND, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR, P5: LPCWSTR, P6: INT): HINSTANCE {.winapi, dynlib: "shell32", importc: "ShellExecuteW".}
  proc ShellExecuteEx*(P1: LPSHELLEXECUTEINFOW): BOOL {.winapi, dynlib: "shell32", importc: "ShellExecuteExW".}
  proc SHFileOperation*(P1: LPSHFILEOPSTRUCTW): int32 {.winapi, dynlib: "shell32", importc: "SHFileOperationW".}
  proc SHGetFileInfo*(P1: LPCWSTR, P2: DWORD, P3: ptr SHFILEINFOW, P4: UINT, P5: UINT): DWORD {.winapi, dynlib: "shell32", importc: "SHGetFileInfoW".}
  proc SHQueryRecycleBin*(P1: LPCWSTR, P2: LPSHQUERYRBINFO): HRESULT {.winapi, dynlib: "shell32", importc: "SHQueryRecycleBinW".}
  proc SHEmptyRecycleBin*(P1: HWND, P2: LPCWSTR, P3: DWORD): HRESULT {.winapi, dynlib: "shell32", importc: "SHEmptyRecycleBinW".}

else:
  type
    NOTIFYICONDATA* = NOTIFYICONDATAA
    SHELLEXECUTEINFO* = SHELLEXECUTEINFOA
    SHFILEOPSTRUCT* = SHFILEOPSTRUCTA
    SHFILEINFO* = SHFILEINFOA

  proc DragQueryFile*(P1: HDROP, P2: UINT, P3: LPSTR, P4: UINT): UINT {.winapi, dynlib: "shell32", importc: "DragQueryFileA".}
  proc ExtractAssociatedIcon*(P1: HINSTANCE, P2: LPCSTR, P3: PWORD): HICON {.winapi, dynlib: "shell32", importc: "ExtractAssociatedIconA".}
  proc ExtractIcon*(P1: HINSTANCE, P2: LPCSTR, P3: UINT): HICON {.winapi, dynlib: "shell32", importc: "ExtractIconA".}
  proc ExtractIconEx*(P1: LPCSTR, P2: int32, P3: ptr HICON, P4: ptr HICON, P5: UINT): UINT {.winapi, dynlib: "shell32", importc: "ExtractIconExA".}
  proc FindExecutable*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR): HINSTANCE {.winapi, dynlib: "shell32", importc: "FindExecutableA".}
  proc Shell_NotifyIcon*(P1: DWORD, P2: PNOTIFYICONDATAA): BOOL {.winapi, dynlib: "shell32", importc: "Shell_NotifyIconA".}
  proc ShellAbout*(P1: HWND, P2: LPCSTR, P3: LPCSTR, P4: HICON): int32 {.winapi, dynlib: "shell32", importc: "ShellAboutA".}
  proc ShellExecute*(P1: HWND, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR, P5: LPCSTR, P6: INT): HINSTANCE {.winapi, dynlib: "shell32", importc: "ShellExecuteA".}
  proc ShellExecuteEx*(P1: LPSHELLEXECUTEINFOA): BOOL {.winapi, dynlib: "shell32", importc: "ShellExecuteExA".}
  proc SHFileOperation*(P1: LPSHFILEOPSTRUCTA): int32 {.winapi, dynlib: "shell32", importc: "SHFileOperationA".}
  proc SHGetFileInfo*(P1: LPCSTR, P2: DWORD, P3: ptr SHFILEINFOA, P4: UINT, P5: UINT): DWORD {.winapi, dynlib: "shell32", importc: "SHGetFileInfoA".}
  proc SHQueryRecycleBin*(P1: LPCSTR, P2: LPSHQUERYRBINFO): HRESULT {.winapi, dynlib: "shell32", importc: "SHQueryRecycleBinA".}
  proc SHEmptyRecycleBin*(P1: HWND, P2: LPCSTR, P3: DWORD): HRESULT {.winapi, dynlib: "shell32", importc: "SHEmptyRecycleBinA".}

type
  PNOTIFYICONDATA* = ptr NOTIFYICONDATA
  LPSHELLEXECUTEINFO* = ptr SHELLEXECUTEINFO
  LPSHFILEOPSTRUCT* = ptr SHFILEOPSTRUCT

proc `uTimeout=`*(self: var NOTIFYICONDATAA, x: UINT) = self.u1.uTimeout = x
proc uTimeout*(self: NOTIFYICONDATAA): UINT = self.u1.uTimeout
proc `uVersion=`*(self: var NOTIFYICONDATAA, x: UINT) = self.u1.uVersion = x
proc uVersion*(self: NOTIFYICONDATAA): UINT = self.u1.uVersion
proc `uTimeout=`*(self: var NOTIFYICONDATAW, x: UINT) = self.u1.uTimeout = x
proc uTimeout*(self: NOTIFYICONDATAW): UINT = self.u1.uTimeout
proc `uVersion=`*(self: var NOTIFYICONDATAW, x: UINT) = self.u1.uVersion = x
proc uVersion*(self: NOTIFYICONDATAW): UINT = self.u1.uVersion

# shell/setupapi.nim

const
  LINE_LEN* = 256
  MAX_INF_STRING_LENGTH* = 4096
  MAX_TITLE_LEN* = 60
  MAX_INSTRUCTION_LEN* = 256
  MAX_LABEL_LEN* = 30
  MAX_SERVICE_NAME_LEN* = 256
  MAX_SUBTITLE_LEN* = 256
  SP_MAX_MACHINENAME_LENGTH* = (MAX_PATH + 3)
  COPYFLG_WARN_IF_SKIP* = 0x00000001
  COPYFLG_NOSKIP* = 0x00000002
  COPYFLG_NOVERSIONCHECK* = 0x00000004
  COPYFLG_FORCE_FILE_IN_USE* = 0x00000008
  COPYFLG_NO_OVERWRITE* = 0x00000010
  COPYFLG_NO_VERSION_DIALOG* = 0x00000020
  COPYFLG_OVERWRITE_OLDER_ONLY* = 0x00000040
  COPYFLG_REPLACEONLY* = 0x00000400
  COPYFLG_NODECOMP* = 0x00000800
  COPYFLG_REPLACE_BOOT_FILE* = 0x00001000
  COPYFLG_NOPRUNE* = 0x00002000
  DELFLG_IN_USE* = 0x00000001
  DELFLG_IN_USE1* = 0x00010000
  DI_REMOVEDEVICE_GLOBAL* = 0x00000001
  DI_REMOVEDEVICE_CONFIGSPECIFIC* = 0x00000002
  DI_UNREMOVEDEVICE_CONFIGSPECIFIC* = 0x00000002
  DI_SHOWOEM* = 0x00000001
  DI_SHOWCOMPAT* = 0x00000002
  DI_SHOWCLASS* = 0x00000004
  DI_SHOWALL* = 0x00000007
  DI_NOVCP* = 0x00000008
  DI_DIDCOMPAT* = 0x00000010
  DI_DIDCLASS* = 0x00000020
  DI_AUTOASSIGNRES* = 0x00000040
  DI_NEEDRESTART* = 0x00000080
  DI_NEEDREBOOT* = 0x00000100
  DI_NOBROWSE* = 0x00000200
  DI_MULTMFGS* = 0x00000400
  DI_DISABLED* = 0x00000800
  DI_GENERALPAGE_ADDED* = 0x00001000
  DI_RESOURCEPAGE_ADDED* = 0x00002000
  DI_PROPERTIES_CHANGE* = 0x00004000
  DI_INF_IS_SORTED* = 0x00008000
  DI_ENUMSINGLEINF* = 0x00010000
  DI_DONOTCALLCONFIGMG* = 0x00020000
  DI_INSTALLDISABLED* = 0x00040000
  DI_COMPAT_FROM_CLASS* = 0x00080000
  DI_CLASSINSTALLPARAMS* = 0x00100000
  DI_NODI_DEFAULTACTION* = 0x00200000
  DI_QUIETINSTALL* = 0x00800000
  DI_NOFILECOPY* = 0x01000000
  DI_FORCECOPY* = 0x02000000
  DI_DRIVERPAGE_ADDED* = 0x04000000
  DI_USECI_SELECTSTRINGS* = 0x08000000
  DI_OVERRIDE_INFFLAGS* = 0x10000000
  DI_PROPS_NOCHANGEUSAGE* = 0x20000000
  DI_NOSELECTICONS* = 0x40000000
  DI_NOWRITE_IDS* = 0x80000000'u32
  DI_FLAGSEX_USEOLDINFSEARCH* = 0x00000001
  DI_FLAGSEX_AUTOSELECTRANK0* = 0x00000002
  DI_FLAGSEX_CI_FAILED* = 0x00000004
  DI_FLAGSEX_DIDINFOLIST* = 0x00000010
  DI_FLAGSEX_DIDCOMPATINFO* = 0x00000020
  DI_FLAGSEX_FILTERCLASSES* = 0x00000040
  DI_FLAGSEX_SETFAILEDINSTALL* = 0x00000080
  DI_FLAGSEX_DEVICECHANGE* = 0x00000100
  DI_FLAGSEX_ALWAYSWRITEIDS* = 0x00000200
  DI_FLAGSEX_PROPCHANGE_PENDING* = 0x00000400
  DI_FLAGSEX_ALLOWEXCLUDEDDRVS* = 0x00000800
  DI_FLAGSEX_NOUIONQUERYREMOVE* = 0x00001000
  DI_FLAGSEX_USECLASSFORCOMPAT* = 0x00002000
  DI_FLAGSEX_OLDINF_IN_CLASSLIST* = 0x00004000
  DI_FLAGSEX_NO_DRVREG_MODIFY* = 0x00008000
  DI_FLAGSEX_IN_SYSTEM_SETUP* = 0x00010000
  DI_FLAGSEX_INET_DRIVER* = 0x00020000
  DI_FLAGSEX_APPENDDRIVERLIST* = 0x00040000
  DI_FLAGSEX_PREINSTALLBACKUP* = 0x00080000
  DI_FLAGSEX_BACKUPONREPLACE* = 0x00100000
  DI_FLAGSEX_DRIVERLIST_FROM_URL* = 0x00200000
  DI_FLAGSEX_RESERVED1* = 0x00400000
  DI_FLAGSEX_EXCLUDE_OLD_INET_DRIVERS* = 0x00800000
  DI_FLAGSEX_POWERPAGE_ADDED* = 0x01000000
  DIBCI_NOINSTALLCLASS* = 0x00000001
  DIBCI_NODISPLAYCLASS* = 0x00000002
  DICD_GENERATE_ID* = 0x00000001
  DICD_INHERIT_CLASSDRVS* = 0x00000002
  DICS_ENABLE* = 1
  DICS_DISABLE* = 2
  DICS_PROPCHANGE* = 3
  DICS_START* = 4
  DICS_STOP* = 5
  DICS_FLAG_GLOBAL* = 1
  DICS_FLAG_CONFIGSPECIFIC* = 2
  DICS_FLAG_CONFIGGENERAL* = 4

type
  DI_FUNCTION* = UINT

const
  DIF_SELECTDEVICE* = 1
  DIF_INSTALLDEVICE* = 2
  DIF_ASSIGNRESOURCES* = 3
  DIF_PROPERTIES* = 4
  DIF_REMOVE* = 5
  DIF_FIRSTTIMESETUP* = 6
  DIF_FOUNDDEVICE* = 7
  DIF_SELECTCLASSDRIVERS* = 8
  DIF_VALIDATECLASSDRIVERS* = 9
  DIF_INSTALLCLASSDRIVERS* = 10
  DIF_CALCDISKSPACE* = 11
  DIF_DESTROYPRIVATEDATA* = 12
  DIF_VALIDATEDRIVER* = 13
  DIF_MOVEDEVICE* = 14
  DIF_DETECT* = 15
  DIF_INSTALLWIZARD* = 16
  DIF_DESTROYWIZARDDATA* = 17
  DIF_PROPERTYCHANGE* = 18
  DIF_ENABLECLASS* = 19
  DIF_DETECTVERIFY* = 20
  DIF_INSTALLDEVICEFILES* = 21
  DIF_UNREMOVE* = 22
  DIF_SELECTBESTCOMPATDRV* = 23
  DIF_ALLOW_INSTALL* = 24
  DIF_REGISTERDEVICE* = 25
  DIF_NEWDEVICEWIZARD_PRESELECT* = 26
  DIF_NEWDEVICEWIZARD_SELECT* = 27
  DIF_NEWDEVICEWIZARD_PREANALYZE* = 28
  DIF_NEWDEVICEWIZARD_POSTANALYZE* = 29
  DIF_NEWDEVICEWIZARD_FINISHINSTALL* = 30
  DIF_UNUSED1* = 31
  DIF_INSTALLINTERFACES* = 32
  DIF_DETECTCANCEL* = 33
  DIF_REGISTER_COINSTALLERS* = 34
  DIF_ADDPROPERTYPAGE_ADVANCED* = 35
  DIF_ADDPROPERTYPAGE_BASIC* = 36
  DIF_RESERVED1* = 37
  DIF_TROUBLESHOOTER* = 38
  DIF_POWERMESSAGEWAKE* = 39
  DIGCF_DEFAULT* = 0x00000001
  DIGCF_PRESENT* = 0x00000002
  DIGCF_ALLCLASSES* = 0x00000004
  DIGCF_PROFILE* = 0x00000008
  DIGCF_DEVICEINTERFACE* = 0x00000010
  DIGCF_INTERFACEDEVICE* = DIGCF_DEVICEINTERFACE.DWORD
  DIGCDP_FLAG_BASIC* = 0x00000001
  DIGCDP_FLAG_ADVANCED* = 0x00000002
  DIOCR_INSTALLER* = 0x00000001
  DIOCR_INTERFACE* = 0x00000002
  DIODI_NO_ADD* = 0x00000001
  DIOD_INHERIT_CLASSDRVS* = 0x00000002
  DIOD_CANCEL_REMOVE* = 0x00000004
  DIREG_DEV* = 0x00000001
  DIREG_DRV* = 0x00000002
  DIREG_BOTH* = 0x00000004
  DIRID_ABSOLUTE* = -1
  DIRID_NULL* = 0
  DIRID_SRCPATH* = 1
  DIRID_WINDOWS* = 10
  DIRID_SYSTEM* = 11
  DIRID_DRIVERS* = 12
  DIRID_IOSUBSYS* = DIRID_DRIVERS
  DIRID_INF* = 17
  DIRID_HELP* = 18
  DIRID_FONTS* = 20
  DIRID_VIEWERS* = 21
  DIRID_COLOR* = 23
  DIRID_APPS* = 24
  DIRID_SHARED* = 25
  DIRID_BOOT* = 30
  DIRID_SYSTEM16* = 50
  DIRID_SPOOL* = 51
  DIRID_SPOOLDRIVERS* = 52
  DIRID_USERPROFILE* = 53
  DIRID_LOADER* = 54
  DIRID_PRINTPROCESSOR* = 55
  DIRID_DEFAULT* = DIRID_SYSTEM
  DIRID_COMMON_STARTMENU* = 16406
  DIRID_COMMON_PROGRAMS* = 16407
  DIRID_COMMON_STARTUP* = 16408
  DIRID_COMMON_DESKTOPDIRECTORY* = 16409
  DIRID_COMMON_FAVORITES* = 16415
  DIRID_COMMON_APPDATA* = 16419
  DIRID_PROGRAM_FILES* = 16422
  DIRID_SYSTEM_X86* = 16425
  DIRID_PROGRAM_FILES_X86* = 16426
  DIRID_PROGRAM_FILES_COMMON* = 16427
  DIRID_PROGRAM_FILES_COMMONX86* = 16428
  DIRID_COMMON_TEMPLATES* = 16429
  DIRID_COMMON_DOCUMENTS* = 16430
  DIRID_USER* = 0x8000
  DIRID_ABSOLUTE_16BIT* = 0xffff
  DMI_MASK* = 0x00000001
  DMI_BKCOLOR* = 0x00000002
  DMI_USERECT* = 0x00000004
  DNF_DUPDESC* = 0x00000001
  DNF_OLDDRIVER* = 0x00000002
  DNF_EXCLUDEFROMLIST* = 0x00000004
  DNF_NODRIVER* = 0x00000008
  DNF_LEGACYINF* = 0x00000010
  DNF_CLASS_DRIVER* = 0x00000020
  DNF_COMPATIBLE_DRIVER* = 0x00000040
  DNF_INET_DRIVER* = 0x00000080
  DNF_UNUSED1* = 0x00000100
  DNF_INDEXED_DRIVER* = 0x00000200
  DNF_OLD_INET_DRIVER* = 0x00000400
  DNF_BAD_DRIVER* = 0x00000800
  DNF_DUPPROVIDER* = 0x00001000
  DPROMPT_SUCCESS* = 0
  DPROMPT_CANCEL* = 1
  DPROMPT_SKIPFILE* = 2
  DPROMPT_BUFFERTOOSMALL* = 3
  DPROMPT_OUTOFMEMORY* = 4
  DRIVER_HARDWAREID_RANK* = 0x00000FFF
  DRIVER_COMPATID_RANK* = 0x00003FFF
  DRIVER_UNTRUSTED_RANK* = 0x00008000
  DRIVER_UNTRUSTED_HARDWAREID_RANK* = 0x00008FFF
  DRIVER_UNTRUSTED_COMPATID_RANK* = 0x0000BFFF
  DRIVER_W9X_SUSPECT_RANK* = 0x0000C000
  DRIVER_W9X_SUSPECT_HARDWAREID_RANK* = 0x0000CFFF
  DRIVER_W9X_SUSPECT_COMPATID_RANK* = 0x0000FFFF
  DYNAWIZ_FLAG_PAGESADDED* = 0x00000001
  DYNAWIZ_FLAG_INSTALLDET_NEXT* = 0x00000002
  DYNAWIZ_FLAG_INSTALLDET_PREV* = 0x00000004
  DYNAWIZ_FLAG_ANALYZE_HANDLECONFLICT* = 0x00000008
  ENABLECLASS_QUERY* = 0
  ENABLECLASS_SUCCESS* = 1
  ENABLECLASS_FAILURE* = 2
  ERROR_EXPECTED_SECTION_NAME* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0)
  ERROR_BAD_SECTION_NAME_LINE* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 1)
  ERROR_SECTION_NAME_TOO_LONG* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 2)
  ERROR_GENERAL_SYNTAX* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 3)
  ERROR_WRONG_INF_STYLE* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x100)
  ERROR_NOT_INSTALLED* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x1000)
  ERROR_SECTION_NOT_FOUND* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x101)
  ERROR_LINE_NOT_FOUND* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x102)
  ERROR_NO_BACKUP* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x103)
  ERROR_NO_ASSOCIATED_CLASS* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x200)
  ERROR_CLASS_MISMATCH* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x201)
  ERROR_DUPLICATE_FOUND* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x202)
  ERROR_NO_DRIVER_SELECTED* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x203)
  ERROR_KEY_DOES_NOT_EXIST* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x204)
  ERROR_INVALID_DEVINST_NAME* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x205)
  ERROR_INVALID_CLASS* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x206)
  ERROR_DEVINST_ALREADY_EXISTS* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x207)
  ERROR_DEVINFO_NOT_REGISTERED* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x208)
  ERROR_INVALID_REG_PROPERTY* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x209)
  ERROR_NO_INF* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x20A)
  ERROR_NO_SUCH_DEVINST* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x20B)
  ERROR_CANT_LOAD_CLASS_ICON* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x20C)
  ERROR_INVALID_CLASS_INSTALLER* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x20D)
  ERROR_DI_DO_DEFAULT* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x20E)
  ERROR_DI_NOFILECOPY* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x20F)
  ERROR_INVALID_HWPROFILE* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x210)
  ERROR_NO_DEVICE_SELECTED* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x211)
  ERROR_DEVINFO_LIST_LOCKED* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x212)
  ERROR_DEVINFO_DATA_LOCKED* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x213)
  ERROR_DI_BAD_PATH* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x214)
  ERROR_NO_CLASSINSTALL_PARAMS* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x215)
  ERROR_FILEQUEUE_LOCKED* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x216)
  ERROR_BAD_SERVICE_INSTALLSECT* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x217)
  ERROR_NO_CLASS_DRIVER_LIST* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x218)
  ERROR_NO_ASSOCIATED_SERVICE* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x219)
  ERROR_NO_DEFAULT_DEVICE_INTERFACE* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x21A)
  ERROR_DEVICE_INTERFACE_ACTIVE* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x21B)
  ERROR_DEVICE_INTERFACE_REMOVED* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x21C)
  ERROR_BAD_INTERFACE_INSTALLSECT* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x21D)
  ERROR_NO_SUCH_INTERFACE_CLASS* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x21E)
  ERROR_INVALID_REFERENCE_STRING* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x21F)
  ERROR_INVALID_MACHINENAME* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x220)
  ERROR_REMOTE_COMM_FAILURE* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x221)
  ERROR_MACHINE_UNAVAILABLE* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x222)
  ERROR_NO_CONFIGMGR_SERVICES* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x223)
  ERROR_INVALID_PROPPAGE_PROVIDER* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x224)
  ERROR_NO_SUCH_DEVICE_INTERFACE* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x225)
  ERROR_DI_POSTPROCESSING_REQUIRED* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x226)
  ERROR_INVALID_COINSTALLER* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x227)
  ERROR_NO_COMPAT_DRIVERS* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x228)
  ERROR_NO_DEVICE_ICON* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x229)
  ERROR_INVALID_INF_LOGCONFIG* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x22A)
  ERROR_DI_DONT_INSTALL* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x22B)
  ERROR_INVALID_FILTER_DRIVER* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x22C)
  ERROR_NON_WINDOWS_NT_DRIVER* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x22D)
  ERROR_NON_WINDOWS_DRIVER* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x22E)
  ERROR_NO_CATALOG_FOR_OEM_INF* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x22F)
  ERROR_DEVINSTALL_QUEUE_NONNATIVE* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x230)
  ERROR_NOT_DISABLEABLE* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x231)
  ERROR_CANT_REMOVE_DEVINST* = (APPLICATION_ERROR_MASK or ERROR_SEVERITY_ERROR or 0x232)
  ERROR_NO_DEFAULT_INTERFACE_DEVICE* = ERROR_NO_DEFAULT_DEVICE_INTERFACE
  ERROR_INTERFACE_DEVICE_ACTIVE* = ERROR_DEVICE_INTERFACE_ACTIVE
  ERROR_INTERFACE_DEVICE_REMOVED* = ERROR_DEVICE_INTERFACE_REMOVED
  ERROR_NO_SUCH_INTERFACE_DEVICE* = ERROR_NO_SUCH_DEVICE_INTERFACE
  FILEOP_COPY* = 0
  FILEOP_RENAME* = 1
  FILEOP_DELETE* = 2
  FILEOP_BACKUP* = 3
  FILEOP_NEWPATH* = 4
  FILEOP_ABORT* = 0
  FILEOP_DOIT* = 1
  FILEOP_SKIP* = 2
  FILEOP_RETRY* = FILEOP_DOIT
  FILE_COMPRESSION_NONE* = 0
  FILE_COMPRESSION_WINLZA* = 1
  FILE_COMPRESSION_MSZIP* = 2
  FILE_COMPRESSION_NTCAB* = 3
  FLG_ADDREG_TYPE_SZ* = 0x00000000
  FLG_ADDREG_BINVALUETYPE* = 0x00000001
  FLG_ADDREG_NOCLOBBER* = 0x00000002
  FLG_ADDREG_DELVAL* = 0x00000004
  FLG_ADDREG_APPEND* = 0x00000008
  FLG_ADDREG_KEYONLY* = 0x00000010
  FLG_ADDREG_OVERWRITEONLY* = 0x00000020
  FLG_ADDREG_TYPE_MULTI_SZ* = 0x00010000
  FLG_ADDREG_TYPE_EXPAND_SZ* = 0x00020000
  FLG_ADDREG_TYPE_BINARY* = (0x00000000.DWORD or FLG_ADDREG_BINVALUETYPE).DWORD
  FLG_ADDREG_TYPE_DWORD* = (0x00010000.DWORD or FLG_ADDREG_BINVALUETYPE).DWORD
  FLG_ADDREG_TYPE_NONE* = (0x00020000.DWORD or FLG_ADDREG_BINVALUETYPE).DWORD
  FLG_ADDREG_TYPE_MASK* = (0xFFFF0000.DWORD or FLG_ADDREG_BINVALUETYPE).DWORD
  FLG_ADDREG_64BITKEY* = 0x00001000
  FLG_ADDREG_KEYONLY_COMMON* = 0x00002000
  FLG_ADDREG_32BITKEY* = 0x00004000
  FLG_ADDREG_DELREG_BIT* = 0x00008000
  FLG_DELREG_VALUE* = 0x00000000
  FLG_DELREG_TYPE_MASK* = FLG_ADDREG_TYPE_MASK.DWORD
  FLG_DELREG_TYPE_SZ* = FLG_ADDREG_TYPE_SZ.DWORD
  FLG_DELREG_TYPE_MULTI_SZ* = FLG_ADDREG_TYPE_MULTI_SZ.DWORD
  FLG_DELREG_TYPE_EXPAND_SZ* = FLG_ADDREG_TYPE_EXPAND_SZ.DWORD
  FLG_DELREG_TYPE_BINARY* = FLG_ADDREG_TYPE_BINARY.DWORD
  FLG_DELREG_TYPE_DWORD* = FLG_ADDREG_TYPE_DWORD.DWORD
  FLG_DELREG_TYPE_NONE* = FLG_ADDREG_TYPE_NONE.DWORD
  FLG_DELREG_64BITKEY* = FLG_ADDREG_64BITKEY.DWORD
  FLG_DELREG_KEYONLY_COMMON* = FLG_ADDREG_KEYONLY_COMMON.DWORD
  FLG_DELREG_32BITKEY* = FLG_ADDREG_32BITKEY.DWORD
  FLG_DELREG_OPERATION_MASK* = 0x000000FE
  FLG_DELREG_MULTI_SZ_DELSTRING* = (0x00000002.DWORD or FLG_DELREG_TYPE_MULTI_SZ or FLG_ADDREG_DELREG_BIT).DWORD
  FLG_BITREG_CLEARBITS* = 0x00000000
  FLG_BITREG_SETBITS* = 0x00000001
  FLG_BITREG_64BITKEY* = 0x00001000
  FLG_BITREG_32BITKEY* = 0x00004000
  FLG_PROFITEM_CURRENTUSER* = 0x00000001
  FLG_PROFITEM_DELETE* = 0x00000002
  FLG_PROFITEM_GROUP* = 0x00000004
  FLG_PROFITEM_CSIDL* = 0x00000008
  FLG_REGSVR_DLLREGISTER* = 0x00000001
  FLG_REGSVR_DLLINSTALL* = 0x00000002
  IDD_DYNAWIZ_FIRSTPAGE* = 10000
  IDD_DYNAWIZ_SELECT_PREVPAGE* = 10001
  IDD_DYNAWIZ_SELECT_NEXTPAGE* = 10002
  IDD_DYNAWIZ_ANALYZE_PREVPAGE* = 10003
  IDD_DYNAWIZ_ANALYZE_NEXTPAGE* = 10004
  IDD_DYNAWIZ_INSTALLDETECTED_PREVPAGE* = 10006
  IDD_DYNAWIZ_INSTALLDETECTED_NEXTPAGE* = 10007
  IDD_DYNAWIZ_INSTALLDETECTED_NODEVS* = 10008
  IDD_DYNAWIZ_SELECTDEV_PAGE* = 10009
  IDD_DYNAWIZ_ANALYZEDEV_PAGE* = 10010
  IDD_DYNAWIZ_INSTALLDETECTEDDEVS_PAGE* = 10011
  IDD_DYNAWIZ_SELECTCLASS_PAGE* = 10012
  MIN_IDD_DYNAWIZ_RESOURCE_ID* = 10000
  MAX_IDD_DYNAWIZ_RESOURCE_ID* = 11000
  IDF_NOBROWSE* = 0x00000001
  IDF_NOSKIP* = 0x00000002
  IDF_NODETAILS* = 0x00000004
  IDF_NOCOMPRESSED* = 0x00000008
  IDF_CHECKFIRST* = 0x00000100
  IDF_NOBEEP* = 0x00000200
  IDF_NOFOREGROUND* = 0x00000400
  IDF_WARNIFSKIP* = 0x00000800
  IDF_NOREMOVABLEMEDIAPROMPT* = 0x00001000
  IDF_USEDISKNAMEASPROMPT* = 0x00002000
  IDF_OEMDISK* = 0x80000000'u32
  IDI_RESOURCEFIRST* = 159
  IDI_RESOURCE* = 159
  IDI_RESOURCELAST* = 161
  IDI_RESOURCEOVERLAYFIRST* = 161
  IDI_RESOURCEOVERLAYLAST* = 161
  IDI_CONFLICT* = 161
  IDI_PROBLEM_OVL* = 500
  IDI_DISABLED_OVL* = 501
  IDI_FORCED_OVL* = 502
  IDI_CLASSICON_OVERLAYFIRST* = 500
  IDI_CLASSICON_OVERLAYLAST* = 502
  INF_STYLE_NONE* = 0x00000000
  INF_STYLE_OLDNT* = 0x00000001
  INF_STYLE_WIN4* = 0x00000002
  INF_STYLE_CACHE_ENABLE* = 0x00000010
  INF_STYLE_CACHE_DISABLE* = 0x00000020
  INFINFO_INF_SPEC_IS_HINF* = 1
  INFINFO_INF_NAME_IS_ABSOLUTE* = 2
  INFINFO_DEFAULT_SEARCH* = 3
  INFINFO_REVERSE_DEFAULT_SEARCH* = 4
  INFINFO_INF_PATH_LIST_SEARCH* = 5

type
  LogSeverity* = DWORD

const
  LogSevInformation* = 0
  LogSevWarning* = 1
  LogSevError* = 2
  LogSevFatalError* = 3
  LogSevMaximum* = 4
  MAX_INSTALLWIZARD_DYNAPAGES* = 20
  NDW_INSTALLFLAG_DIDFACTDEFS* = 0x00000001
  NDW_INSTALLFLAG_HARDWAREALLREADYIN* = 0x00000002
  NDW_INSTALLFLAG_NEEDSHUTDOWN* = 0x00000200
  NDW_INSTALLFLAG_EXPRESSINTRO* = 0x00000400
  NDW_INSTALLFLAG_SKIPISDEVINSTALLED* = 0x00000800
  NDW_INSTALLFLAG_NODETECTEDDEVS* = 0x00001000
  NDW_INSTALLFLAG_INSTALLSPECIFIC* = 0x00002000
  NDW_INSTALLFLAG_SKIPCLASSLIST* = 0x00004000
  NDW_INSTALLFLAG_CI_PICKED_OEM* = 0x00008000
  NDW_INSTALLFLAG_PCMCIAMODE* = 0x00010000
  NDW_INSTALLFLAG_PCMCIADEVICE* = 0x00020000
  NDW_INSTALLFLAG_USERCANCEL* = 0x00040000
  NDW_INSTALLFLAG_KNOWNCLASS* = 0x00080000
  NDW_INSTALLFLAG_NEEDRESTART* = 0x00000080
  NDW_INSTALLFLAG_NEEDREBOOT* = 0x00000100
  SETDIRID_NOT_FULL_PATH* = 0x00000001
  SP_COPY_DELETESOURCE* = 0x0000001
  SP_COPY_REPLACEONLY* = 0x0000002
  SP_COPY_NEWER* = 0x0000004
  SP_COPY_NEWER_OR_SAME* = 0x0000004
  SP_COPY_NOOVERWRITE* = 0x0000008
  SP_COPY_NODECOMP* = 0x0000010
  SP_COPY_LANGUAGEAWARE* = 0x0000020
  SP_COPY_SOURCE_ABSOLUTE* = 0x0000040
  SP_COPY_SOURCEPATH_ABSOLUTE* = 0x0000080
  SP_COPY_IN_USE_NEEDS_REBOOT* = 0x0000100
  SP_COPY_FORCE_IN_USE* = 0x0000200
  SP_COPY_NOSKIP* = 0x0000400
  SP_FLAG_CABINETCONTINUATION* = 0x0000800
  SP_COPY_FORCE_NOOVERWRITE* = 0x0001000
  SP_COPY_FORCE_NEWER* = 0x0002000
  SP_COPY_WARNIFSKIP* = 0x0004000
  SP_COPY_NOBROWSE* = 0x0008000
  SP_COPY_NEWER_ONLY* = 0x0010000
  SP_COPY_SOURCE_SIS_MASTER* = 0x0020000
  SP_COPY_OEMINF_CATALOG_ONLY* = 0x0040000
  SP_COPY_REPLACE_BOOT_FILE* = 0x0080000
  SP_COPY_NOPRUNE* = 0x0100000
  SP_COPY_OEM_F6_INF* = 0x0200000
  SPCRP_SECURITY* = 23
  SPCRP_SECURITY_SDS* = 24
  SPCRP_DEVTYPE* = 25
  SPCRP_EXCLUSIVE* = 26
  SPCRP_CHARACTERISTICS* = 27
  SPCRP_MAXIMUM_PROPERTY* = 28
  SPDIT_NODRIVER* = 0
  SPDIT_CLASSDRIVER* = 1
  SPDIT_COMPATDRIVER* = 2
  SPDRP_DEVICEDESC* = 0
  SPDRP_HARDWAREID* = 1
  SPDRP_COMPATIBLEIDS* = 2
  SPDRP_UNUSED0* = 3
  SPDRP_SERVICE* = 4
  SPDRP_UNUSED1* = 5
  SPDRP_UNUSED2* = 6
  SPDRP_CLASS* = 7
  SPDRP_CLASSGUID* = 8
  SPDRP_DRIVER* = 9
  SPDRP_CONFIGFLAGS* = 10
  SPDRP_MFG* = 11
  SPDRP_FRIENDLYNAME* = 12
  SPDRP_LOCATION_INFORMATION* = 13
  SPDRP_PHYSICAL_DEVICE_OBJECT_NAME* = 14
  SPDRP_CAPABILITIES* = 15
  SPDRP_UI_NUMBER* = 16
  SPDRP_UPPERFILTERS* = 17
  SPDRP_LOWERFILTERS* = 18
  SPDRP_BUSTYPEGUID* = 19
  SPDRP_LEGACYBUSTYPE* = 20
  SPDRP_BUSNUMBER* = 21
  SPDRP_ENUMERATOR_NAME* = 22
  SPDRP_SECURITY* = 23
  SPDRP_SECURITY_SDS* = 24
  SPDRP_DEVTYPE* = 25
  SPDRP_EXCLUSIVE* = 26
  SPDRP_CHARACTERISTICS* = 27
  SPDRP_ADDRESS* = 28
  SPDRP_UI_NUMBER_DESC_FORMAT* = 30
  SPDRP_MAXIMUM_PROPERTY* = 31
  SPDSL_IGNORE_DISK* = 1
  SPDSL_DISALLOW_NEGATIVE_ADJUST* = 2
  SPFILENOTIFY_STARTQUEUE* = 1
  SPFILENOTIFY_ENDQUEUE* = 2
  SPFILENOTIFY_STARTSUBQUEUE* = 3
  SPFILENOTIFY_ENDSUBQUEUE* = 4
  SPFILENOTIFY_STARTDELETE* = 5
  SPFILENOTIFY_ENDDELETE* = 6
  SPFILENOTIFY_DELETEERROR* = 7
  SPFILENOTIFY_STARTRENAME* = 8
  SPFILENOTIFY_ENDRENAME* = 9
  SPFILENOTIFY_RENAMEERROR* = 10
  SPFILENOTIFY_STARTCOPY* = 11
  SPFILENOTIFY_ENDCOPY* = 12
  SPFILENOTIFY_COPYERROR* = 13
  SPFILENOTIFY_NEEDMEDIA* = 14
  SPFILENOTIFY_QUEUESCAN* = 15
  SPFILENOTIFY_CABINETINFO* = 16
  SPFILENOTIFY_FILEINCABINET* = 17
  SPFILENOTIFY_NEEDNEWCABINET* = 18
  SPFILENOTIFY_FILEEXTRACTED* = 19
  SPFILENOTIFY_FILEOPDELAYED* = 20
  SPFILENOTIFY_STARTBACKUP* = 21
  SPFILENOTIFY_BACKUPERROR* = 22
  SPFILENOTIFY_ENDBACKUP* = 23
  SPFILENOTIFY_QUEUESCAN_EX* = 24
  SPFILENOTIFY_STARTREGISTRATION* = 25
  SPFILENOTIFY_ENDREGISTRATION* = 32
  SPFILENOTIFY_LANGMISMATCH* = 0x00010000
  SPFILENOTIFY_TARGETEXISTS* = 0x00020000
  SPFILENOTIFY_TARGETNEWER* = 0x00040000
  SPFILENOTIFY_QUEUESCAN_SIGNERINFO* = 0x00000040
  SPFILELOG_SYSTEMLOG* = 0x00000001
  SPFILELOG_OEMFILE* = 0x00000001
  SPFILELOG_FORCENEW* = 0x00000002
  SPFILELOG_QUERYONLY* = 0x00000004
  SPFILEQ_FILE_IN_USE* = 0x00000001
  SPFILEQ_REBOOT_RECOMMENDED* = 0x00000002
  SPFILEQ_REBOOT_IN_PROGRESS* = 0x00000004
  SPINT_ACTIVE* = 0x00000001
  SPINT_DEFAULT* = 0x00000002
  SPINT_REMOVED* = 0x00000004
  SPID_ACTIVE* = SPINT_ACTIVE
  SPID_DEFAULT* = SPINT_DEFAULT
  SPID_REMOVED* = SPINT_REMOVED
  SPINST_LOGCONFIG* = 0x00000001
  SPINST_INIFILES* = 0x00000002
  SPINST_REGISTRY* = 0x00000004
  SPINST_INI2REG* = 0x00000008
  SPINST_FILES* = 0x00000010
  SPINST_BITREG* = 0x00000020
  SPINST_REGSVR* = 0x00000040
  SPINST_UNREGSVR* = 0x00000080
  SPINST_PROFILEITEMS* = 0x00000100
  SPINST_SINGLESECTION* = 0x00010000
  SPINST_LOGCONFIG_IS_FORCED* = 0x00020000
  SPINST_LOGCONFIGS_ARE_OVERRIDES* = 0x00040000
  SPINST_COPYINF* = 0x00000200
  SPINST_ALL* = 0x000003ff
  SPINST_REGISTERCALLBACKAWARE* = 0x00080000
  SPOST_NONE* = 0
  SPOST_PATH* = 1
  SPOST_URL* = 2
  SPOST_MAX* = 3
  SPPSR_SELECT_DEVICE_RESOURCES* = 1
  SPPSR_ENUM_BASIC_DEVICE_PROPERTIES* = 2
  SPPSR_ENUM_ADV_DEVICE_PROPERTIES* = 3
  SPQ_SCAN_FILE_PRESENCE* = 0x00000001
  SPQ_SCAN_FILE_VALIDITY* = 0x00000002
  SPQ_SCAN_USE_CALLBACK* = 0x00000004
  SPQ_SCAN_USE_CALLBACKEX* = 0x00000008
  SPQ_SCAN_INFORM_USER* = 0x00000010
  SPQ_SCAN_PRUNE_COPY_QUEUE* = 0x00000020
  SPQ_SCAN_USE_CALLBACK_SIGNERINFO* = 0x00000040
  SPQ_SCAN_PRUNE_DELREN* = 0x00000080
  SPQ_DELAYED_COPY* = 0x00000001.UINT_PTR
  SPRDI_FIND_DUPS* = 0x00000001
  SPSVCINST_TAGTOFRONT* = 0x00000001
  SPSVCINST_ASSOCSERVICE* = 0x00000002
  SPSVCINST_DELETEEVENTLOGENTRY* = 0x00000004
  SPSVCINST_NOCLOBBER_DISPLAYNAME* = 0x00000008
  SPSVCINST_NOCLOBBER_STARTTYPE* = 0x00000010
  SPSVCINST_NOCLOBBER_ERRORCONTROL* = 0x00000020
  SPSVCINST_NOCLOBBER_LOADORDERGROUP* = 0x00000040
  SPSVCINST_NOCLOBBER_DEPENDENCIES* = 0x00000080
  SPSVCINST_NOCLOBBER_DESCRIPTION* = 0x00000100
  SPSVCINST_STOPSERVICE* = 0x00000200
  SPSVCINST_CLOBBER_SECURITY* = 0x00000400
  SPWPT_SELECTDEVICE* = 0x00000001
  SPWP_USE_DEVINFO_DATA* = 0x00000001
  SRCINFO_PATH* = 1
  SRCINFO_TAGFILE* = 2
  SRCINFO_DESCRIPTION* = 3
  SRCINFO_FLAGS* = 4
  SRCLIST_TEMPORARY* = 0x00000001
  SRCLIST_NOBROWSE* = 0x00000002
  SRCLIST_SYSTEM* = 0x00000010
  SRCLIST_USER* = 0x00000020
  SRCLIST_SYSIFADMIN* = 0x00000040
  SRCLIST_SUBDIRS* = 0x00000100
  SRCLIST_APPEND* = 0x00000200
  SRCLIST_NOSTRIPPLATFORM* = 0x00000400
  # SetupFileLogInfo* = enum
  SetupFileLogSourceFilename* = 0
  SetupFileLogChecksum* = 1
  SetupFileLogDiskTagfile* = 2
  SetupFileLogDiskDescription* = 3
  SetupFileLogOtherInfo* = 4
  SetupFileLogMax* = 5

type
  HINF* = PVOID
  HDSKSPC* = PVOID
  HDEVINFO* = HANDLE
  HSPFILEQ* = PVOID
  HSPFILELOG* = PVOID
  SetupFileLogInfo* = int32
  INFCONTEXT* {.final, pure.} = object
    Inf*: PVOID
    CurrentInf*: PVOID
    Section*: UINT
    Line*: UINT
  PINFCONTEXT* = ptr INFCONTEXT
  SP_INF_INFORMATION* {.final, pure.} = object
    InfStyle*: DWORD
    InfCount*: DWORD
    VersionData*: array[1, BYTE]
  PSP_INF_INFORMATION* = ptr SP_INF_INFORMATION
  SP_ALTPLATFORM_INFO* {.final, pure.} = object
    cbSize*: DWORD
    Platform*: DWORD
    MajorVersion*: DWORD
    MinorVersion*: DWORD
    ProcessorArchitecture*: WORD
    Reserved*: WORD
  PSP_ALTPLATFORM_INFO* = ptr SP_ALTPLATFORM_INFO
  SP_ORIGINAL_FILE_INFO_A* {.final, pure.} = object
    cbSize*: DWORD
    OriginalInfName*: array[MAX_PATH, CHAR]
    OriginalCatalogName*: array[MAX_PATH, CHAR]
  PSP_ORIGINAL_FILE_INFO_A* = ptr SP_ORIGINAL_FILE_INFO_A
  SP_ORIGINAL_FILE_INFO_W* {.final, pure.} = object
    cbSize*: DWORD
    OriginalInfName*: array[MAX_PATH, WCHAR]
    OriginalCatalogName*: array[MAX_PATH, WCHAR]
  PSP_ORIGINAL_FILE_INFO_W* = ptr SP_ORIGINAL_FILE_INFO_W
  FILEPATHS_A* {.final, pure.} = object
    Target*: PCSTR
    Source*: PCSTR
    Win32Error*: UINT
    Flags*: DWORD
  PFILEPATHS_A* = ptr FILEPATHS_A
  FILEPATHS_W* {.final, pure.} = object
    Target*: PCWSTR
    Source*: PCWSTR
    Win32Error*: UINT
    Flags*: DWORD
  PFILEPATHS_W* = ptr FILEPATHS_W
  SOURCE_MEDIA_A* {.final, pure.} = object
    Reserved*: PCSTR
    Tagfile*: PCSTR
    Description*: PCSTR
    SourcePath*: PCSTR
    SourceFile*: PCSTR
    Flags*: DWORD
  PSOURCE_MEDIA_A* = ptr SOURCE_MEDIA_A
  SOURCE_MEDIA_W* {.final, pure.} = object
    Reserved*: PCWSTR
    Tagfile*: PCWSTR
    Description*: PCWSTR
    SourcePath*: PCWSTR
    SourceFile*: PCWSTR
    Flags*: DWORD
  PSOURCE_MEDIA_W* = ptr SOURCE_MEDIA_W
  CABINET_INFO_A* {.final, pure.} = object
    CabinetPath*: PCSTR
    CabinetFile*: PCSTR
    DiskName*: PCSTR
    SetId*: USHORT
    CabinetNumber*: USHORT
  PCABINET_INFO_A* = ptr CABINET_INFO_A
  CABINET_INFO_W* {.final, pure.} = object
    CabinetPath*: PCWSTR
    CabinetFile*: PCWSTR
    DiskName*: PCWSTR
    SetId*: USHORT
    CabinetNumber*: USHORT
  PCABINET_INFO_W* = ptr CABINET_INFO_W
  FILE_IN_CABINET_INFO_A* {.final, pure.} = object
    NameInCabinet*: PCSTR
    FileSize*: DWORD
    Win32Error*: DWORD
    DosDate*: WORD
    DosTime*: WORD
    DosAttribs*: WORD
    FullTargetName*: array[MAX_PATH, CHAR]
  PFILE_IN_CABINET_INFO_A* = ptr FILE_IN_CABINET_INFO_A
  FILE_IN_CABINET_INFO_W* {.final, pure.} = object
    NameInCabinet*: PCWSTR
    FileSize*: DWORD
    Win32Error*: DWORD
    DosDate*: WORD
    DosTime*: WORD
    DosAttribs*: WORD
    FullTargetName*: array[MAX_PATH, WCHAR]
  PFILE_IN_CABINET_INFO_W* = ptr FILE_IN_CABINET_INFO_W
  SP_FILE_COPY_PARAMS_A* {.final, pure.} = object
    cbSize*: DWORD
    QueueHandle*: HSPFILEQ
    SourceRootPath*: PCSTR
    SourcePath*: PCSTR
    SourceFilename*: PCSTR
    SourceDescription*: PCSTR
    SourceTagfile*: PCSTR
    TargetDirectory*: PCSTR
    TargetFilename*: PCSTR
    CopyStyle*: DWORD
    LayoutInf*: HINF
    SecurityDescriptor*: PCSTR
  PSP_FILE_COPY_PARAMS_A* = ptr SP_FILE_COPY_PARAMS_A
  SP_FILE_COPY_PARAMS_W* {.final, pure.} = object
    cbSize*: DWORD
    QueueHandle*: HSPFILEQ
    SourceRootPath*: PCWSTR
    SourcePath*: PCWSTR
    SourceFilename*: PCWSTR
    SourceDescription*: PCWSTR
    SourceTagfile*: PCWSTR
    TargetDirectory*: PCWSTR
    TargetFilename*: PCWSTR
    CopyStyle*: DWORD
    LayoutInf*: HINF
    SecurityDescriptor*: PCWSTR
  PSP_FILE_COPY_PARAMS_W* = ptr SP_FILE_COPY_PARAMS_W
  SP_DEVINFO_DATA* {.final, pure.} = object
    cbSize*: DWORD
    ClassGuid*: GUID
    DevInst*: DWORD
    Reserved*: ULONG_PTR
  PSP_DEVINFO_DATA* = ptr SP_DEVINFO_DATA
  SP_DEVICE_INTERFACE_DATA* {.final, pure.} = object
    cbSize*: DWORD
    InterfaceClassGuid*: GUID
    Flags*: DWORD
    Reserved*: ULONG_PTR
  PSP_DEVICE_INTERFACE_DATA* = ptr SP_DEVICE_INTERFACE_DATA
  SP_INTERFACE_DEVICE_DATA* = SP_DEVICE_INTERFACE_DATA
  PSP_INTERFACE_DEVICE_DATA* = ptr SP_DEVICE_INTERFACE_DATA
  SP_DEVICE_INTERFACE_DETAIL_DATA_A* {.final, pure.} = object
    cbSize*: DWORD
    DevicePath*: array[1, CHAR]
  PSP_DEVICE_INTERFACE_DETAIL_DATA_A* = ptr SP_DEVICE_INTERFACE_DETAIL_DATA_A
  SP_DEVICE_INTERFACE_DETAIL_DATA_W* {.final, pure.} = object
    cbSize*: DWORD
    DevicePath*: array[1, WCHAR]
  PSP_DEVICE_INTERFACE_DETAIL_DATA_W* = ptr SP_DEVICE_INTERFACE_DETAIL_DATA_W
  SP_INTERFACE_DEVICE_DETAIL_DATA_A* = SP_DEVICE_INTERFACE_DETAIL_DATA_A
  PSP_INTERFACE_DEVICE_DETAIL_DATA_A* = ptr SP_DEVICE_INTERFACE_DETAIL_DATA_A
  SP_INTERFACE_DEVICE_DETAIL_DATA_W* = SP_DEVICE_INTERFACE_DETAIL_DATA_W
  PSP_INTERFACE_DEVICE_DETAIL_DATA_W* = ptr SP_DEVICE_INTERFACE_DETAIL_DATA_W
  SP_DEVINFO_LIST_DETAIL_DATA_A* {.final, pure.} = object
    cbSize*: DWORD
    ClassGuid*: GUID
    RemoteMachineHandle*: HANDLE
    RemoteMachineName*: array[SP_MAX_MACHINENAME_LENGTH, CHAR]
  PSP_DEVINFO_LIST_DETAIL_DATA_A* = ptr SP_DEVINFO_LIST_DETAIL_DATA_A
  SP_DEVINFO_LIST_DETAIL_DATA_W* {.final, pure.} = object
    cbSize*: DWORD
    ClassGuid*: GUID
    RemoteMachineHandle*: HANDLE
    RemoteMachineName*: array[SP_MAX_MACHINENAME_LENGTH, WCHAR]
  PSP_DEVINFO_LIST_DETAIL_DATA_W* = ptr SP_DEVINFO_LIST_DETAIL_DATA_W
  PSP_FILE_CALLBACK_A* = proc (P1: PVOID, P2: UINT, P3: UINT_PTR, P4: UINT_PTR): UINT {.stdcall.}
  PSP_FILE_CALLBACK_W* = proc (P1: PVOID, P2: UINT, P3: UINT_PTR, P4: UINT_PTR): UINT {.stdcall.}
  SP_DEVINSTALL_PARAMS_A* {.final, pure.} = object
    cbSize*: DWORD
    Flags*: DWORD
    FlagsEx*: DWORD
    hwndParent*: HWND
    InstallMsgHandler*: PSP_FILE_CALLBACK_A
    InstallMsgHandlerContext*: PVOID
    FileQueue*: HSPFILEQ
    ClassInstallReserved*: ULONG_PTR
    Reserved*: DWORD
    DriverPath*: array[MAX_PATH, CHAR]
  PSP_DEVINSTALL_PARAMS_A* = ptr SP_DEVINSTALL_PARAMS_A
  SP_DEVINSTALL_PARAMS_W* {.final, pure.} = object
    cbSize*: DWORD
    Flags*: DWORD
    FlagsEx*: DWORD
    hwndParent*: HWND
    InstallMsgHandler*: PSP_FILE_CALLBACK_W
    InstallMsgHandlerContext*: PVOID
    FileQueue*: HSPFILEQ
    ClassInstallReserved*: ULONG_PTR
    Reserved*: DWORD
    DriverPath*: array[MAX_PATH, WCHAR]
  PSP_DEVINSTALL_PARAMS_W* = ptr SP_DEVINSTALL_PARAMS_W
  SP_CLASSINSTALL_HEADER* {.final, pure.} = object
    cbSize*: DWORD
    InstallFunction*: DI_FUNCTION
  PSP_CLASSINSTALL_HEADER* = ptr SP_CLASSINSTALL_HEADER
  SP_ENABLECLASS_PARAMS* {.final, pure.} = object
    ClassInstallHeader*: SP_CLASSINSTALL_HEADER
    ClassGuid*: GUID
    EnableMessage*: DWORD
  PSP_ENABLECLASS_PARAMS* = ptr SP_ENABLECLASS_PARAMS
  SP_MOVEDEV_PARAMS* {.final, pure.} = object
    ClassInstallHeader*: SP_CLASSINSTALL_HEADER
    SourceDeviceInfoData*: SP_DEVINFO_DATA
  PSP_MOVEDEV_PARAMS* = ptr SP_MOVEDEV_PARAMS
  SP_PROPCHANGE_PARAMS* {.final, pure.} = object
    ClassInstallHeader*: SP_CLASSINSTALL_HEADER
    StateChange*: DWORD
    Scope*: DWORD
    HwProfile*: DWORD
  PSP_PROPCHANGE_PARAMS* = ptr SP_PROPCHANGE_PARAMS
  SP_REMOVEDEVICE_PARAMS* {.final, pure.} = object
    ClassInstallHeader*: SP_CLASSINSTALL_HEADER
    Scope*: DWORD
    HwProfile*: DWORD
  PSP_REMOVEDEVICE_PARAMS* = ptr SP_REMOVEDEVICE_PARAMS
  SP_UNREMOVEDEVICE_PARAMS* {.final, pure.} = object
    ClassInstallHeader*: SP_CLASSINSTALL_HEADER
    Scope*: DWORD
    HwProfile*: DWORD
  PSP_UNREMOVEDEVICE_PARAMS* = ptr SP_UNREMOVEDEVICE_PARAMS
  SP_SELECTDEVICE_PARAMS_A* {.final, pure.} = object
    ClassInstallHeader*: SP_CLASSINSTALL_HEADER
    Title*: array[MAX_TITLE_LEN, CHAR]
    Instructions*: array[MAX_INSTRUCTION_LEN, CHAR]
    ListLabel*: array[MAX_LABEL_LEN, CHAR]
    SubTitle*: array[MAX_SUBTITLE_LEN, CHAR]
    Reserved*: array[2, BYTE]
  PSP_SELECTDEVICE_PARAMS_A* = ptr SP_SELECTDEVICE_PARAMS_A
  SP_SELECTDEVICE_PARAMS_W* {.final, pure.} = object
    ClassInstallHeader*: SP_CLASSINSTALL_HEADER
    Title*: array[MAX_TITLE_LEN, WCHAR]
    Instructions*: array[MAX_INSTRUCTION_LEN, WCHAR]
    ListLabel*: array[MAX_LABEL_LEN, WCHAR]
    SubTitle*: array[MAX_SUBTITLE_LEN, WCHAR]
  PSP_SELECTDEVICE_PARAMS_W* = ptr SP_SELECTDEVICE_PARAMS_W
  PDETECT_PROGRESS_NOTIFY* = proc (P1: PVOID, P2: DWORD): BOOL {.stdcall.}
  SP_DETECTDEVICE_PARAMS* {.final, pure.} = object
    ClassInstallHeader*: SP_CLASSINSTALL_HEADER
    DetectProgressNotify*: PDETECT_PROGRESS_NOTIFY
    ProgressNotifyParam*: PVOID
  PSP_DETECTDEVICE_PARAMS* = ptr SP_DETECTDEVICE_PARAMS
  SP_INSTALLWIZARD_DATA* {.final, pure.} = object
    ClassInstallHeader*: SP_CLASSINSTALL_HEADER
    Flags*: DWORD
    DynamicPages*: array[MAX_INSTALLWIZARD_DYNAPAGES, HPROPSHEETPAGE]
    NumDynamicPages*: DWORD
    DynamicPageFlags*: DWORD
    PrivateFlags*: DWORD
    PrivateData*: LPARAM
    hwndWizardDlg*: HWND
  PSP_INSTALLWIZARD_DATA* = ptr SP_INSTALLWIZARD_DATA
  SP_NEWDEVICEWIZARD_DATA* {.final, pure.} = object
    ClassInstallHeader*: SP_CLASSINSTALL_HEADER
    Flags*: DWORD
    DynamicPages*: array[MAX_INSTALLWIZARD_DYNAPAGES, HPROPSHEETPAGE]
    NumDynamicPages*: DWORD
    hwndWizardDlg*: HWND
  PSP_NEWDEVICEWIZARD_DATA* = ptr SP_NEWDEVICEWIZARD_DATA
  SP_ADDPROPERTYPAGE_DATA* = SP_NEWDEVICEWIZARD_DATA
  PSP_ADDPROPERTYPAGE_DATA* = ptr SP_NEWDEVICEWIZARD_DATA
  SP_TROUBLESHOOTER_PARAMS_A* {.final, pure.} = object
    ClassInstallHeader*: SP_CLASSINSTALL_HEADER
    ChmFile*: array[MAX_PATH, CHAR]
    HtmlTroubleShooter*: array[MAX_PATH, CHAR]
  PSP_TROUBLESHOOTER_PARAMS_A* = ptr SP_TROUBLESHOOTER_PARAMS_A
  SP_TROUBLESHOOTER_PARAMS_W* {.final, pure.} = object
    ClassInstallHeader*: SP_CLASSINSTALL_HEADER
    ChmFile*: array[MAX_PATH, WCHAR]
    HtmlTroubleShooter*: array[MAX_PATH, WCHAR]
  PSP_TROUBLESHOOTER_PARAMS_W* = ptr SP_TROUBLESHOOTER_PARAMS_W
  SP_POWERMESSAGEWAKE_PARAMS_A* {.final, pure.} = object
    ClassInstallHeader*: SP_CLASSINSTALL_HEADER
    PowerMessageWake*: array[LINE_LEN*2, CHAR]
  PSP_POWERMESSAGEWAKE_PARAMS_A* = ptr SP_POWERMESSAGEWAKE_PARAMS_A
  SP_POWERMESSAGEWAKE_PARAMS_W* {.final, pure.} = object
    ClassInstallHeader*: SP_CLASSINSTALL_HEADER
    PowerMessageWake*: array[LINE_LEN*2, WCHAR]
  PSP_POWERMESSAGEWAKE_PARAMS_W* = ptr SP_POWERMESSAGEWAKE_PARAMS_W
  SP_DRVINFO_DATA_V2_A* {.final, pure.} = object
    cbSize*: DWORD
    DriverType*: DWORD
    Reserved*: ULONG_PTR
    Description*: array[LINE_LEN, CHAR]
    MfgName*: array[LINE_LEN, CHAR]
    ProviderName*: array[LINE_LEN, CHAR]
    DriverDate*: FILETIME
    DriverVersion*: DWORDLONG
  PSP_DRVINFO_DATA_V2_A* = ptr SP_DRVINFO_DATA_V2_A
  SP_DRVINFO_DATA_V2_W* {.final, pure.} = object
    cbSize*: DWORD
    DriverType*: DWORD
    Reserved*: ULONG_PTR
    Description*: array[LINE_LEN, WCHAR]
    MfgName*: array[LINE_LEN, WCHAR]
    ProviderName*: array[LINE_LEN, WCHAR]
    DriverDate*: FILETIME
    DriverVersion*: DWORDLONG
  PSP_DRVINFO_DATA_V2_W* = ptr SP_DRVINFO_DATA_V2_W
  SP_DRVINFO_DATA_V1_A* {.final, pure.} = object
    cbSize*: DWORD
    DriverType*: DWORD
    Reserved*: ULONG_PTR
    Description*: array[LINE_LEN, CHAR]
    MfgName*: array[LINE_LEN, CHAR]
    ProviderName*: array[LINE_LEN, CHAR]
  PSP_DRVINFO_DATA_V1_A* = ptr SP_DRVINFO_DATA_V1_A
  SP_DRVINFO_DATA_V1_W* {.final, pure.} = object
    cbSize*: DWORD
    DriverType*: DWORD
    Reserved*: ULONG_PTR
    Description*: array[LINE_LEN, WCHAR]
    MfgName*: array[LINE_LEN, WCHAR]
    ProviderName*: array[LINE_LEN, WCHAR]
  PSP_DRVINFO_DATA_V1_W* = ptr SP_DRVINFO_DATA_V1_W

when not defined(winansi):
  type
    SP_DRVINFO_DATA_V1* = SP_DRVINFO_DATA_V1_W
    SP_DRVINFO_DATA_V2* = SP_DRVINFO_DATA_V2_W

else:
  type
    SP_DRVINFO_DATA_V1* = SP_DRVINFO_DATA_V1_A
    SP_DRVINFO_DATA_V2* = SP_DRVINFO_DATA_V2_A

type
  PSP_DRVINFO_DATA_V1* = ptr SP_DRVINFO_DATA_V1
  PSP_DRVINFO_DATA_V2* = ptr SP_DRVINFO_DATA_V2
  SP_DRVINFO_DATA_A* = SP_DRVINFO_DATA_V2_A
  PSP_DRVINFO_DATA_A* = ptr SP_DRVINFO_DATA_V2_A
  SP_DRVINFO_DATA_W* = SP_DRVINFO_DATA_V2_W
  PSP_DRVINFO_DATA_W* = ptr SP_DRVINFO_DATA_V2_W
  SP_DRVINFO_DATA* = SP_DRVINFO_DATA_V2
  PSP_DRVINFO_DATA* = ptr SP_DRVINFO_DATA_V2
  PSP_DETSIG_CMPPROC* = proc (P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DEVINFO_DATA, P4: PVOID): DWORD {.stdcall.}
  SP_DRVINFO_DETAIL_DATA_A* {.final, pure.} = object
    cbSize*: DWORD
    InfDate*: FILETIME
    CompatIDsOffset*: DWORD
    CompatIDsLength*: DWORD
    Reserved*: ULONG_PTR
    SectionName*: array[LINE_LEN, CHAR]
    InfFileName*: array[MAX_PATH, CHAR]
    DrvDescription*: array[LINE_LEN, CHAR]
    HardwareID*: array[1, CHAR]
  PSP_DRVINFO_DETAIL_DATA_A* = ptr SP_DRVINFO_DETAIL_DATA_A
  SP_DRVINFO_DETAIL_DATA_W* {.final, pure.} = object
    cbSize*: DWORD
    InfDate*: FILETIME
    CompatIDsOffset*: DWORD
    CompatIDsLength*: DWORD
    Reserved*: ULONG_PTR
    SectionName*: array[LINE_LEN, WCHAR]
    InfFileName*: array[MAX_PATH, WCHAR]
    DrvDescription*: array[LINE_LEN, WCHAR]
    HardwareID*: array[1, WCHAR]
  PSP_DRVINFO_DETAIL_DATA_W* = ptr SP_DRVINFO_DETAIL_DATA_W
  SP_DRVINSTALL_PARAMS* {.final, pure.} = object
    cbSize*: DWORD
    Rank*: DWORD
    Flags*: DWORD
    PrivateData*: DWORD_PTR
    Reserved*: DWORD
  PSP_DRVINSTALL_PARAMS* = ptr SP_DRVINSTALL_PARAMS
  COINSTALLER_CONTEXT_DATA* {.final, pure.} = object
    PostProcessing*: BOOL
    InstallResult*: DWORD
    PrivateData*: PVOID
  PCOINSTALLER_CONTEXT_DATA* = ptr COINSTALLER_CONTEXT_DATA
  SP_CLASSIMAGELIST_DATA* {.final, pure.} = object
    cbSize*: DWORD
    ImageList*: HIMAGELIST
    Reserved*: ULONG_PTR
  PSP_CLASSIMAGELIST_DATA* = ptr SP_CLASSIMAGELIST_DATA
  SP_PROPSHEETPAGE_REQUEST* {.final, pure.} = object
    cbSize*: DWORD
    PageRequested*: DWORD
    DeviceInfoSet*: HDEVINFO
    DeviceInfoData*: PSP_DEVINFO_DATA
  PSP_PROPSHEETPAGE_REQUEST* = ptr SP_PROPSHEETPAGE_REQUEST
  SP_BACKUP_QUEUE_PARAMS_A* {.final, pure.} = object
    cbSize*: DWORD
    FullInfPath*: array[MAX_PATH, CHAR]
    FilenameOffset*: INT
  PSP_BACKUP_QUEUE_PARAMS_A* = ptr SP_BACKUP_QUEUE_PARAMS_A
  SP_BACKUP_QUEUE_PARAMS_W* {.final, pure.} = object
    cbSize*: DWORD
    FullInfPath*: array[MAX_PATH, WCHAR]
    FilenameOffset*: INT
  PSP_BACKUP_QUEUE_PARAMS_W* = ptr SP_BACKUP_QUEUE_PARAMS_W

when not defined(winansi):
  type
    SP_ORIGINAL_FILE_INFO* = SP_ORIGINAL_FILE_INFO_W
    PSP_ORIGINAL_FILE_INFO* = ptr SP_ORIGINAL_FILE_INFO_W
    FILEPATHS* = FILEPATHS_W
    PFILEPATHS* = ptr FILEPATHS_W
    SOURCE_MEDIA* = SOURCE_MEDIA_W
    PSOURCE_MEDIA* = ptr SOURCE_MEDIA_W
    CABINET_INFO* = CABINET_INFO_W
    PCABINET_INFO* = ptr CABINET_INFO_W
    FILE_IN_CABINET_INFO* = FILE_IN_CABINET_INFO_W
    PFILE_IN_CABINET_INFO* = ptr FILE_IN_CABINET_INFO_W
    SP_FILE_COPY_PARAMS* = SP_FILE_COPY_PARAMS_W
    PSP_FILE_COPY_PARAMS* = ptr SP_FILE_COPY_PARAMS_W
    SP_DEVICE_INTERFACE_DETAIL_DATA* = SP_DEVICE_INTERFACE_DETAIL_DATA_W
    PSP_DEVICE_INTERFACE_DETAIL_DATA* = ptr SP_DEVICE_INTERFACE_DETAIL_DATA_W
    SP_INTERFACE_DEVICE_DETAIL_DATA* = SP_DEVICE_INTERFACE_DETAIL_DATA_W
    PSP_INTERFACE_DEVICE_DETAIL_DATA* = ptr SP_DEVICE_INTERFACE_DETAIL_DATA_W
    SP_DEVINFO_LIST_DETAIL_DATA* = SP_DEVINFO_LIST_DETAIL_DATA_W
    PSP_DEVINFO_LIST_DETAIL_DATA* = ptr SP_DEVINFO_LIST_DETAIL_DATA_W
    SP_DEVINSTALL_PARAMS* = SP_DEVINSTALL_PARAMS_W
    PSP_DEVINSTALL_PARAMS* = ptr SP_DEVINSTALL_PARAMS_W
    SP_SELECTDEVICE_PARAMS* = SP_SELECTDEVICE_PARAMS_W
    PSP_SELECTDEVICE_PARAMS* = ptr SP_SELECTDEVICE_PARAMS_W
    SP_TROUBLESHOOTER_PARAMS* = SP_TROUBLESHOOTER_PARAMS_W
    PSP_TROUBLESHOOTER_PARAMS* = ptr SP_TROUBLESHOOTER_PARAMS_W
    SP_POWERMESSAGEWAKE_PARAMS* = SP_POWERMESSAGEWAKE_PARAMS_W
    PSP_POWERMESSAGEWAKE_PARAMS* = ptr SP_POWERMESSAGEWAKE_PARAMS_W
    SP_DRVINFO_DETAIL_DATA* = SP_DRVINFO_DETAIL_DATA_W
    PSP_DRVINFO_DETAIL_DATA* = ptr SP_DRVINFO_DETAIL_DATA_W
    SP_BACKUP_QUEUE_PARAMS* = SP_BACKUP_QUEUE_PARAMS_W
    PSP_BACKUP_QUEUE_PARAMS* = ptr SP_BACKUP_QUEUE_PARAMS_W

else:
  type
    SP_ORIGINAL_FILE_INFO* = SP_ORIGINAL_FILE_INFO_A
    PSP_ORIGINAL_FILE_INFO* = ptr SP_ORIGINAL_FILE_INFO_A
    FILEPATHS* = FILEPATHS_A
    PFILEPATHS* = ptr FILEPATHS_A
    SOURCE_MEDIA* = SOURCE_MEDIA_A
    PSOURCE_MEDIA* = ptr SOURCE_MEDIA_A
    CABINET_INFO* = CABINET_INFO_A
    PCABINET_INFO* = ptr CABINET_INFO_A
    FILE_IN_CABINET_INFO* = FILE_IN_CABINET_INFO_A
    PFILE_IN_CABINET_INFO* = ptr FILE_IN_CABINET_INFO_A
    SP_FILE_COPY_PARAMS* = SP_FILE_COPY_PARAMS_A
    PSP_FILE_COPY_PARAMS* = ptr SP_FILE_COPY_PARAMS_A
    SP_DEVICE_INTERFACE_DETAIL_DATA* = SP_DEVICE_INTERFACE_DETAIL_DATA_A
    PSP_DEVICE_INTERFACE_DETAIL_DATA* = ptr SP_DEVICE_INTERFACE_DETAIL_DATA_A
    SP_INTERFACE_DEVICE_DETAIL_DATA* = SP_DEVICE_INTERFACE_DETAIL_DATA_A
    PSP_INTERFACE_DEVICE_DETAIL_DATA* = ptr SP_DEVICE_INTERFACE_DETAIL_DATA_A
    SP_DEVINFO_LIST_DETAIL_DATA* = SP_DEVINFO_LIST_DETAIL_DATA_A
    PSP_DEVINFO_LIST_DETAIL_DATA* = ptr SP_DEVINFO_LIST_DETAIL_DATA_A
    SP_DEVINSTALL_PARAMS* = SP_DEVINSTALL_PARAMS_A
    PSP_DEVINSTALL_PARAMS* = ptr SP_DEVINSTALL_PARAMS_A
    SP_SELECTDEVICE_PARAMS* = SP_SELECTDEVICE_PARAMS_A
    PSP_SELECTDEVICE_PARAMS* = ptr SP_SELECTDEVICE_PARAMS_A
    SP_TROUBLESHOOTER_PARAMS* = SP_TROUBLESHOOTER_PARAMS_A
    PSP_TROUBLESHOOTER_PARAMS* = ptr SP_TROUBLESHOOTER_PARAMS_A
    SP_POWERMESSAGEWAKE_PARAMS* = SP_POWERMESSAGEWAKE_PARAMS_A
    PSP_POWERMESSAGEWAKE_PARAMS* = ptr SP_POWERMESSAGEWAKE_PARAMS_A
    SP_DRVINFO_DETAIL_DATA* = SP_DRVINFO_DETAIL_DATA_A
    PSP_DRVINFO_DETAIL_DATA* = ptr SP_DRVINFO_DETAIL_DATA_A
    SP_BACKUP_QUEUE_PARAMS* = SP_BACKUP_QUEUE_PARAMS_A
    PSP_BACKUP_QUEUE_PARAMS* = ptr SP_BACKUP_QUEUE_PARAMS_A

proc SetupAddInstallSectionToDiskSpaceListA*(P1: HDSKSPC, P2: HINF, P3: HINF, P4: PCSTR, P5: PVOID, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupAddInstallSectionToDiskSpaceListW*(P1: HDSKSPC, P2: HINF, P3: HINF, P4: PCWSTR, P5: PVOID, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupAddSectionToDiskSpaceListA*(P1: HDSKSPC, P2: HINF, P3: HINF, P4: PCSTR, P5: UINT, P6: PVOID, P7: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupAddSectionToDiskSpaceListW*(P1: HDSKSPC, P2: HINF, P3: HINF, P4: PCWSTR, P5: UINT, P6: PVOID, P7: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupAddToDiskSpaceListA*(P1: HDSKSPC, P2: PCSTR, P3: LONGLONG, P4: UINT, P5: PVOID, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupAddToDiskSpaceListW*(P1: HDSKSPC, P2: PCWSTR, P3: LONGLONG, P4: UINT, P5: PVOID, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupAddToSourceListA*(P1: DWORD, P2: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupAddToSourceListW*(P1: DWORD, P2: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQuerySourceListA*(P1: DWORD, List: ptr ptr PCSTR, P3: PUINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQuerySourceListW*(P1: DWORD, List: ptr ptr PCWSTR, P3: PUINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupFreeSourceListA*(List: ptr ptr PCSTR, P2: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupFreeSourceListW*(List: ptr ptr PCWSTR, P2: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupAdjustDiskSpaceListA*(P1: HDSKSPC, P2: LPCSTR, P3: LONGLONG, P4: PVOID, P5: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupAdjustDiskSpaceListW*(P1: HDSKSPC, P2: LPCWSTR, P3: LONGLONG, P4: PVOID, P5: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupBackupErrorA*(P1: HWND, P2: PCSTR, P3: PCSTR, P4: PCSTR, P5: UINT, P6: DWORD): UINT {.winapi, dynlib: "setupapi", importc.}
proc SetupBackupErrorW*(P1: HWND, P2: PCWSTR, P3: PCWSTR, P4: PCWSTR, P5: UINT, P6: DWORD): UINT {.winapi, dynlib: "setupapi", importc.}
proc SetupCancelTemporary*(): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupCloseFileQueue*(P1: HSPFILEQ): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupCloseInfFile*(P1: HINF): VOID {.winapi, dynlib: "setupapi", importc.}
proc SetupCloseLog*(): VOID {.winapi, dynlib: "setupapi", importc.}
proc SetupCommitFileQueueA*(P1: HWND, P2: HSPFILEQ, P3: PSP_FILE_CALLBACK_A, P4: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupCommitFileQueueW*(P1: HWND, P2: HSPFILEQ, P3: PSP_FILE_CALLBACK_W, P4: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupCopyErrorA*(P1: HWND, P2: PCSTR, P3: PCSTR, P4: PCSTR, P5: PCSTR, P6: PCSTR, P7: UINT, P8: DWORD, P9: PSTR, P10: DWORD, P11: PDWORD): UINT {.winapi, dynlib: "setupapi", importc.}
proc SetupCopyErrorW*(P1: HWND, P2: PCWSTR, P3: PCWSTR, P4: PCWSTR, P5: PCWSTR, P6: PCWSTR, P7: UINT, P8: DWORD, P9: PWSTR, P10: DWORD, P11: PDWORD): UINT {.winapi, dynlib: "setupapi", importc.}
proc SetupCopyOEMInfA*(P1: PCSTR, P2: PCSTR, P3: DWORD, P4: DWORD, P5: PSTR, P6: DWORD, P7: PDWORD, P8: ptr PSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupCopyOEMInfW*(P1: PCWSTR, P2: PCWSTR, P3: DWORD, P4: DWORD, P5: PWSTR, P6: DWORD, P7: PDWORD, P8: ptr PWSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupCreateDiskSpaceListA*(P1: PVOID, P2: DWORD, P3: UINT): HDSKSPC {.winapi, dynlib: "setupapi", importc.}
proc SetupCreateDiskSpaceListW*(P1: PVOID, P2: DWORD, P3: UINT): HDSKSPC {.winapi, dynlib: "setupapi", importc.}
proc SetupDecompressOrCopyFileA*(P1: PCSTR, P2: PCSTR, P3: PUINT): DWORD {.winapi, dynlib: "setupapi", importc.}
proc SetupDecompressOrCopyFileW*(P1: PCWSTR, P2: PCWSTR, P3: PUINT): DWORD {.winapi, dynlib: "setupapi", importc.}
proc SetupDefaultQueueCallbackA*(P1: PVOID, P2: UINT, P3: UINT_PTR, P4: UINT_PTR): UINT {.winapi, dynlib: "setupapi", importc.}
proc SetupDefaultQueueCallbackW*(P1: PVOID, P2: UINT, P3: UINT_PTR, P4: UINT_PTR): UINT {.winapi, dynlib: "setupapi", importc.}
proc SetupDeleteErrorA*(P1: HWND, P2: PCSTR, P3: PCSTR, P4: UINT, P5: DWORD): UINT {.winapi, dynlib: "setupapi", importc.}
proc SetupDeleteErrorW*(P1: HWND, P2: PCWSTR, P3: PCWSTR, P4: UINT, P5: DWORD): UINT {.winapi, dynlib: "setupapi", importc.}
proc SetupDestroyDiskSpaceList*(P1: HDSKSPC): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiAskForOEMDisk*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiBuildClassInfoList*(P1: DWORD, P2: LPGUID, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiBuildClassInfoListExA*(P1: DWORD, P2: LPGUID, P3: DWORD, P4: PDWORD, P5: PCSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiBuildClassInfoListExW*(P1: DWORD, P2: LPGUID, P3: DWORD, P4: PDWORD, P5: PCWSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiBuildDriverInfoList*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiCallClassInstaller*(P1: DI_FUNCTION, P2: HDEVINFO, P3: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiCancelDriverInfoSearch*(P1: HDEVINFO): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiChangeState*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiClassGuidsFromNameA*(P1: PCSTR, P2: LPGUID, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiClassGuidsFromNameW*(P1: PCWSTR, P2: LPGUID, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiClassGuidsFromNameExA*(P1: PCSTR, P2: LPGUID, P3: DWORD, P4: PDWORD, P5: PCSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiClassGuidsFromNameExW*(P1: PCWSTR, P2: LPGUID, P3: DWORD, P4: PDWORD, P5: PCWSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiClassNameFromGuidA*(P1: ptr GUID, P2: PSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiClassNameFromGuidW*(P1: ptr GUID, P2: PWSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiClassNameFromGuidExA*(P1: ptr GUID, P2: PSTR, P3: DWORD, P4: PDWORD, P5: PCSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiClassNameFromGuidExW*(P1: ptr GUID, P2: PWSTR, P3: DWORD, P4: PDWORD, P5: PCWSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiCreateDeviceInfoA*(P1: HDEVINFO, P2: PCSTR, P3: ptr GUID, P4: PCSTR, P5: HWND, P6: DWORD, P7: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiCreateDeviceInfoW*(P1: HDEVINFO, P2: PCWSTR, P3: ptr GUID, P4: PCWSTR, P5: HWND, P6: DWORD, P7: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiCreateDeviceInfoList*(P1: ptr GUID, P2: HWND): HDEVINFO {.winapi, dynlib: "setupapi", importc.}
proc SetupDiCreateDeviceInfoListExA*(P1: ptr GUID, P2: HWND, P3: PCSTR, P4: PVOID): HDEVINFO {.winapi, dynlib: "setupapi", importc.}
proc SetupDiCreateDeviceInfoListExW*(P1: ptr GUID, P2: HWND, P3: PCWSTR, P4: PVOID): HDEVINFO {.winapi, dynlib: "setupapi", importc.}
proc SetupDiCreateDeviceInterfaceA*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: ptr GUID, P4: PCSTR, P5: DWORD, P6: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiCreateDeviceInterfaceW*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: ptr GUID, P4: PCWSTR, P5: DWORD, P6: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiCreateDeviceInterfaceRegKeyA*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: DWORD, P4: REGSAM, P5: HINF, P6: PCSTR): HKEY {.winapi, dynlib: "setupapi", importc.}
proc SetupDiCreateDeviceInterfaceRegKeyW*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: DWORD, P4: REGSAM, P5: HINF, P6: PCWSTR): HKEY {.winapi, dynlib: "setupapi", importc.}
proc SetupDiCreateDevRegKeyA*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: DWORD, P5: DWORD, P6: HINF, P7: PCSTR): HKEY {.winapi, dynlib: "setupapi", importc.}
proc SetupDiCreateDevRegKeyW*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: DWORD, P5: DWORD, P6: HINF, P7: PCWSTR): HKEY {.winapi, dynlib: "setupapi", importc.}
proc SetupDiDeleteDeviceInfo*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiDeleteDeviceInterfaceData*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiDeleteDeviceInterfaceRegKey*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiDeleteDevRegKey*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiDestroyClassImageList*(P1: PSP_CLASSIMAGELIST_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiDestroyDeviceInfoList*(P1: HDEVINFO): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiDestroyDriverInfoList*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiDrawMiniIcon*(P1: HDC, P2: RECT, P3: INT, P4: DWORD): INT {.winapi, dynlib: "setupapi", importc.}
proc SetupDiEnumDeviceInfo*(P1: HDEVINFO, P2: DWORD, P3: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiEnumDeviceInterfaces*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: ptr GUID, P4: DWORD, P5: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiEnumDriverInfoA*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: DWORD, P5: PSP_DRVINFO_DATA_A): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiEnumDriverInfoW*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: DWORD, P5: PSP_DRVINFO_DATA_W): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetActualSectionToInstallA*(P1: HINF, P2: PCSTR, P3: PSTR, P4: DWORD, P5: PDWORD, P6: ptr PSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetActualSectionToInstallW*(P1: HINF, P2: PCWSTR, P3: PWSTR, P4: DWORD, P5: PDWORD, P6: ptr PWSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassBitmapIndex*(P1: ptr GUID, P2: PINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassDescriptionA*(P1: ptr GUID, P2: PSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassDescriptionW*(P1: ptr GUID, P2: PWSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassDescriptionExA*(P1: ptr GUID, P2: PSTR, P3: DWORD, P4: PDWORD, P5: PCSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassDescriptionExW*(P1: ptr GUID, P2: PWSTR, P3: DWORD, P4: PDWORD, P5: PCWSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassDevPropertySheetsA*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: LPPROPSHEETHEADERA, P4: DWORD, P5: PDWORD, P6: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassDevPropertySheetsW*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: LPPROPSHEETHEADERW, P4: DWORD, P5: PDWORD, P6: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassDevsA*(P1: ptr GUID, P2: PCSTR, P3: HWND, P4: DWORD): HDEVINFO {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassDevsW*(P1: ptr GUID, P2: PCWSTR, P3: HWND, P4: DWORD): HDEVINFO {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassDevsExA*(P1: ptr GUID, P2: PCSTR, P3: HWND, P4: DWORD, P5: HDEVINFO, P6: PCSTR, P7: PVOID): HDEVINFO {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassDevsExW*(P1: ptr GUID, P2: PCWSTR, P3: HWND, P4: DWORD, P5: HDEVINFO, P6: PCWSTR, P7: PVOID): HDEVINFO {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassImageIndex*(P1: PSP_CLASSIMAGELIST_DATA, P2: ptr GUID, P3: PINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassImageList*(P1: PSP_CLASSIMAGELIST_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassImageListExA*(P1: PSP_CLASSIMAGELIST_DATA, P2: PCSTR, P3: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassImageListExW*(P1: PSP_CLASSIMAGELIST_DATA, P2: PCWSTR, P3: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassInstallParamsA*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_CLASSINSTALL_HEADER, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassInstallParamsW*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_CLASSINSTALL_HEADER, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassRegistryPropertyA*(P1: LPGUID, P2: DWORD, P3: PDWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PCSTR, P8: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetClassRegistryPropertyW*(P1: LPGUID, P2: DWORD, P3: PDWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PCWSTR, P8: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetDeviceInfoListClass*(P1: HDEVINFO, P2: LPGUID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetDeviceInfoListDetailA*(P1: HDEVINFO, P2: PSP_DEVINFO_LIST_DETAIL_DATA_A): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetDeviceInfoListDetailW*(P1: HDEVINFO, P2: PSP_DEVINFO_LIST_DETAIL_DATA_W): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetDeviceInstallParamsA*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DEVINSTALL_PARAMS_A): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetDeviceInstallParamsW*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DEVINSTALL_PARAMS_W): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetDeviceInstanceIdA*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetDeviceInstanceIdW*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PWSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetDeviceInterfaceAlias*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: ptr GUID, P4: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetDeviceInterfaceDetailA*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: PSP_DEVICE_INTERFACE_DETAIL_DATA_A, P4: DWORD, P5: PDWORD, P6: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetDeviceInterfaceDetailW*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: PSP_DEVICE_INTERFACE_DETAIL_DATA_W, P4: DWORD, P5: PDWORD, P6: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetDeviceRegistryPropertyA*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: PDWORD, P5: PBYTE, P6: DWORD, P7: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetDeviceRegistryPropertyW*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: PDWORD, P5: PBYTE, P6: DWORD, P7: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetDriverInfoDetailA*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_A, P4: PSP_DRVINFO_DETAIL_DATA_A, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetDriverInfoDetailW*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_W, P4: PSP_DRVINFO_DETAIL_DATA_W, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetDriverInstallParamsA*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_A, P4: PSP_DRVINSTALL_PARAMS): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetDriverInstallParamsW*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_W, P4: PSP_DRVINSTALL_PARAMS): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetHwProfileFriendlyNameA*(P1: DWORD, P2: PSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetHwProfileFriendlyNameExA*(P1: DWORD, P2: PSTR, P3: DWORD, P4: PDWORD, P5: PCSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetHwProfileFriendlyNameExW*(P1: DWORD, P2: PWSTR, P3: DWORD, P4: PDWORD, P5: PCWSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetHwProfileFriendlyNameW*(P1: DWORD, P2: PWSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetHwProfileList*(P1: PDWORD, P2: DWORD, P3: PDWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetHwProfileListExA*(P1: PDWORD, P2: DWORD, P3: PDWORD, P4: PDWORD, P5: PCSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetHwProfileListExW*(P1: PDWORD, P2: DWORD, P3: PDWORD, P4: PDWORD, P5: PCWSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetINFClassA*(P1: PCSTR, P2: LPGUID, P3: PSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetINFClassW*(P1: PCWSTR, P2: LPGUID, P3: PWSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetSelectedDevice*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetSelectedDriverA*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_A): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetSelectedDriverW*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_W): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiGetWizardage*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_INSTALLWIZARD_DATA, P4: DWORD, P5: DWORD): HPROPSHEETPAGE {.winapi, dynlib: "setupapi", importc.}
proc SetupDiInstallClassA*(P1: HWND, P2: PCSTR, P3: DWORD, P4: HSPFILEQ): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiInstallClassW*(P1: HWND, P2: PCWSTR, P3: DWORD, P4: HSPFILEQ): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiInstallClassExA*(P1: HWND, P2: PCSTR, P3: DWORD, P4: HSPFILEQ, P5: ptr GUID, P6: PVOID, P7: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiInstallClassExW*(P1: HWND, P2: PCWSTR, P3: DWORD, P4: HSPFILEQ, P5: ptr GUID, P6: PVOID, P7: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiInstallDevice*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiInstallDeviceInterfaces*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiInstallDriverFiles*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiLoadClassIcon*(P1: ptr GUID, P2: ptr HICON, P3: PINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiMoveDuplicateDevice*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiOpenClassRegKey*(P1: ptr GUID, P2: REGSAM): HKEY {.winapi, dynlib: "setupapi", importc.}
proc SetupDiOpenClassRegKeyExA*(P1: ptr GUID, P2: REGSAM, P3: DWORD, P4: PCSTR, P5: PVOID): HKEY {.winapi, dynlib: "setupapi", importc.}
proc SetupDiOpenClassRegKeyExW*(P1: ptr GUID, P2: REGSAM, P3: DWORD, P4: PCWSTR, P5: PVOID): HKEY {.winapi, dynlib: "setupapi", importc.}
proc SetupDiOpenDeviceInfoA*(P1: HDEVINFO, P2: PCSTR, P3: HWND, P4: DWORD, P5: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiOpenDeviceInfoW*(P1: HDEVINFO, P2: PCWSTR, P3: HWND, P4: DWORD, P5: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiOpenDeviceInterfaceA*(P1: HDEVINFO, P2: PCSTR, P3: DWORD, P4: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiOpenDeviceInterfaceW*(P1: HDEVINFO, P2: PCWSTR, P3: DWORD, P4: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiOpenDeviceInterfaceRegKey*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: DWORD, P4: REGSAM): HKEY {.winapi, dynlib: "setupapi", importc.}
proc SetupDiOpenDevRegKey*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: DWORD, P5: DWORD, P6: REGSAM): HKEY {.winapi, dynlib: "setupapi", importc.}
proc SetupDiRegisterCoDeviceInstallers*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiRegisterDeviceInfo*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: PSP_DETSIG_CMPPROC, P5: PVOID, P6: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiRemoveDevice*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiRemoveDeviceInterface*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiSelectBestCompatDrv*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiSelectDevice*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiSelectOEMDrv*(P1: HWND, P2: HDEVINFO, P3: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiSetClassInstallParamsA*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_CLASSINSTALL_HEADER, P4: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiSetClassInstallParamsW*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_CLASSINSTALL_HEADER, P4: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiSetClassRegistryPropertyA*(P1: LPGUID, P2: DWORD, P3: ptr BYTE, P4: DWORD, P5: PCSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiSetClassRegistryPropertyW*(P1: LPGUID, P2: DWORD, P3: ptr BYTE, P4: DWORD, P5: PCWSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiSetDeviceInstallParamsA*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DEVINSTALL_PARAMS_A): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiSetDeviceInstallParamsW*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DEVINSTALL_PARAMS_W): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiSetDeviceRegistryPropertyA*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: ptr BYTE, P5: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiSetDeviceRegistryPropertyW*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: ptr BYTE, P5: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiSetDriverInstallParamsA*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_A, P4: PSP_DRVINSTALL_PARAMS): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiSetDriverInstallParamsW*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_W, P4: PSP_DRVINSTALL_PARAMS): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiSetSelectedDevice*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiSetSelectedDriverA*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_A): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiSetSelectedDriverW*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_W): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiUnremoveDevice*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDuplicateDiskSpaceListA*(P1: HDSKSPC, P2: PVOID, P3: DWORD, P4: UINT): HDSKSPC {.winapi, dynlib: "setupapi", importc.}
proc SetupDuplicateDiskSpaceListW*(P1: HDSKSPC, P2: PVOID, P3: DWORD, P4: UINT): HDSKSPC {.winapi, dynlib: "setupapi", importc.}
proc SetupFindFirstLineA*(P1: HINF, P2: PCSTR, P3: PCSTR, P4: PINFCONTEXT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupFindFirstLineW*(P1: HINF, P2: PCWSTR, P3: PCWSTR, P4: PINFCONTEXT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupFindNextLine*(P1: PINFCONTEXT, P2: PINFCONTEXT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupFindNextMatchLineA*(P1: PINFCONTEXT, P2: PCSTR, P3: PINFCONTEXT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupFindNextMatchLineW*(P1: PINFCONTEXT, P2: PCWSTR, P3: PINFCONTEXT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupFreeA*(P1: ptr ptr PCSTR, P2: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupFreeW*(P1: ptr ptr PCWSTR, P2: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetBackupInformationA*(P1: HSPFILEQ, P2: PSP_BACKUP_QUEUE_PARAMS_A): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetBackupInformationW*(P1: HSPFILEQ, P2: PSP_BACKUP_QUEUE_PARAMS_W): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetBinaryField*(P1: PINFCONTEXT, P2: DWORD, P3: PBYTE, P4: DWORD, P5: LPDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetFieldCount*(P1: PINFCONTEXT): DWORD {.winapi, dynlib: "setupapi", importc.}
proc SetupGetFileCompressionInfoA*(P1: PCSTR, P2: ptr PSTR, P3: PDWORD, P4: PDWORD, P5: PUINT): DWORD {.winapi, dynlib: "setupapi", importc.}
proc SetupGetFileCompressionInfoW*(P1: PCWSTR, P2: ptr PWSTR, P3: PDWORD, P4: PDWORD, P5: PUINT): DWORD {.winapi, dynlib: "setupapi", importc.}
proc SetupGetInfFileListA*(P1: PCSTR, P2: DWORD, P3: PSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetInfFileListW*(P1: PCWSTR, P2: DWORD, P3: PWSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetInfInformationA*(P1: LPCVOID, P2: DWORD, P3: PSP_INF_INFORMATION, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetInfInformationW*(P1: LPCVOID, P2: DWORD, P3: PSP_INF_INFORMATION, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetIntField*(P1: PINFCONTEXT, P2: DWORD, P3: PINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetLineByIndexA*(P1: HINF, P2: PCSTR, P3: DWORD, P4: PINFCONTEXT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetLineByIndexW*(P1: HINF, P2: PCWSTR, P3: DWORD, P4: PINFCONTEXT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetLineCountA*(P1: HINF, P2: PCSTR): LONG {.winapi, dynlib: "setupapi", importc.}
proc SetupGetLineCountW*(P1: HINF, P2: PCWSTR): LONG {.winapi, dynlib: "setupapi", importc.}
proc SetupGetLineTextA*(P1: PINFCONTEXT, P2: HINF, P3: PCSTR, P4: PCSTR, P5: PSTR, P6: DWORD, P7: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetLineTextW*(P1: PINFCONTEXT, P2: HINF, P3: PCWSTR, P4: PCWSTR, P5: PWSTR, P6: DWORD, P7: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetMultiSzFieldA*(P1: PINFCONTEXT, P2: DWORD, P3: PSTR, P4: DWORD, P5: LPDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetMultiSzFieldW*(P1: PINFCONTEXT, P2: DWORD, P3: PWSTR, P4: DWORD, P5: LPDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetSourceFileLocationA*(P1: HINF, P2: PINFCONTEXT, P3: PCSTR, P4: PUINT, P5: PSTR, P6: DWORD, P7: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetSourceFileLocationW*(P1: HINF, P2: PINFCONTEXT, P3: PCWSTR, P4: PUINT, P5: PWSTR, P6: DWORD, P7: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetSourceFileSizeA*(P1: HINF, P2: PINFCONTEXT, P3: PCSTR, P4: PCSTR, P5: PDWORD, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetSourceFileSizeW*(P1: HINF, P2: PINFCONTEXT, P3: PCWSTR, P4: PCWSTR, P5: PDWORD, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetSourceInfoA*(P1: HINF, P2: UINT, P3: UINT, P4: PSTR, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetSourceInfoW*(P1: HINF, P2: UINT, P3: UINT, P4: PWSTR, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetStringFieldA*(P1: PINFCONTEXT, P2: DWORD, P3: PSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetStringFieldW*(P1: PINFCONTEXT, P2: DWORD, P3: PWSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetTargetPathA*(P1: HINF, P2: PINFCONTEXT, P3: PCSTR, P4: PSTR, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupGetTargetPathW*(P1: HINF, P2: PINFCONTEXT, P3: PCWSTR, P4: PWSTR, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupInitDefaultQueueCallback*(P1: HWND): PVOID {.winapi, dynlib: "setupapi", importc.}
proc SetupInitDefaultQueueCallbackEx*(P1: HWND, P2: HWND, P3: UINT, P4: DWORD, P5: PVOID): PVOID {.winapi, dynlib: "setupapi", importc.}
proc SetupInitializeFileLogA*(P1: PCSTR, P2: DWORD): HSPFILELOG {.winapi, dynlib: "setupapi", importc.}
proc SetupInitializeFileLogW*(P1: PCWSTR, P2: DWORD): HSPFILELOG {.winapi, dynlib: "setupapi", importc.}
proc SetupInstallFileA*(P1: HINF, P2: PINFCONTEXT, P3: PCSTR, P4: PCSTR, P5: PCSTR, P6: DWORD, P7: PSP_FILE_CALLBACK_A, P8: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupInstallFileW*(P1: HINF, P2: PINFCONTEXT, P3: PCWSTR, P4: PCWSTR, P5: PCWSTR, P6: DWORD, P7: PSP_FILE_CALLBACK_W, P8: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupInstallFileExA*(P1: HINF, P2: PINFCONTEXT, P3: PCSTR, P4: PCSTR, P5: PCSTR, P6: DWORD, P7: PSP_FILE_CALLBACK_A, P8: PVOID, P9: PBOOL): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupInstallFileExW*(P1: HINF, P2: PINFCONTEXT, P3: PCWSTR, P4: PCWSTR, P5: PCWSTR, P6: DWORD, P7: PSP_FILE_CALLBACK_W, P8: PVOID, P9: PBOOL): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupInstallFilesFromInfSectionA*(P1: HINF, P2: HINF, P3: HSPFILEQ, P4: PCSTR, P5: PCSTR, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupInstallFilesFromInfSectionW*(P1: HINF, P2: HINF, P3: HSPFILEQ, P4: PCWSTR, P5: PCWSTR, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupInstallFromInfSectionA*(P1: HWND, P2: HINF, P3: PCSTR, P4: UINT, P5: HKEY, P6: PCSTR, P7: UINT, P8: PSP_FILE_CALLBACK_A, P9: PVOID, P10: HDEVINFO, P11: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupInstallFromInfSectionW*(P1: HWND, P2: HINF, P3: PCWSTR, P4: UINT, P5: HKEY, P6: PCWSTR, P7: UINT, P8: PSP_FILE_CALLBACK_W, P9: PVOID, P10: HDEVINFO, P11: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupInstallServicesFromInfSectionA*(P1: HINF, P2: PCSTR, P3: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupInstallServicesFromInfSectionW*(P1: HINF, P2: PCWSTR, P3: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupInstallServicesFromInfSectionExA*(P1: HINF, P2: PCSTR, P3: DWORD, P4: HDEVINFO, P5: PSP_DEVINFO_DATA, P6: PVOID, P7: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupInstallServicesFromInfSectionExW*(P1: HINF, P2: PCWSTR, P3: DWORD, P4: HDEVINFO, P5: PSP_DEVINFO_DATA, P6: PVOID, P7: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupIterateCabinetA*(P1: PCSTR, P2: DWORD, P3: PSP_FILE_CALLBACK_A, P4: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupIterateCabinetW*(P1: PCWSTR, P2: DWORD, P3: PSP_FILE_CALLBACK_W, P4: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupLogErrorA*(P1: LPCSTR, P2: LogSeverity): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupLogErrorW*(P1: LPCWSTR, P2: LogSeverity): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupLogFileA*(P1: HSPFILELOG, P2: PCSTR, P3: PCSTR, P4: PCSTR, P5: DWORD, P6: PCSTR, P7: PCSTR, P8: PCSTR, P9: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupLogFileW*(P1: HSPFILELOG, P2: PCWSTR, P3: PCWSTR, P4: PCWSTR, P5: DWORD, P6: PCWSTR, P7: PCWSTR, P8: PCWSTR, P9: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupOpenAppendInfFileA*(P1: PCSTR, P2: HINF, P3: PUINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupOpenAppendInfFileW*(P1: PCWSTR, P2: HINF, P3: PUINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupOpenFileQueue*(): HSPFILEQ {.winapi, dynlib: "setupapi", importc.}
proc SetupOpenInfFileA*(P1: PCSTR, P2: PCSTR, P3: DWORD, P4: PUINT): HINF {.winapi, dynlib: "setupapi", importc.}
proc SetupOpenInfFileW*(P1: PCWSTR, P2: PCWSTR, P3: DWORD, P4: PUINT): HINF {.winapi, dynlib: "setupapi", importc.}
proc SetupOpenLog*(P1: BOOL): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupOpenMasterInf*(): HINF {.winapi, dynlib: "setupapi", importc.}
proc SetupPromptForDiskA*(P1: HWND, P2: PCSTR, P3: PCSTR, P4: PCSTR, P5: PCSTR, P6: PCSTR, P7: DWORD, P8: PSTR, P9: DWORD, P10: PDWORD): UINT {.winapi, dynlib: "setupapi", importc.}
proc SetupPromptForDiskW*(P1: HWND, P2: PCWSTR, P3: PCWSTR, P4: PCWSTR, P5: PCWSTR, P6: PCWSTR, P7: DWORD, P8: PWSTR, P9: DWORD, P10: PDWORD): UINT {.winapi, dynlib: "setupapi", importc.}
proc SetupPromptReboot*(P1: HSPFILEQ, P2: HWND, P3: BOOL): INT {.winapi, dynlib: "setupapi", importc.}
proc SetupQueryA*(P1: DWORD, P2: ptr ptr PCSTR, P3: PUINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueryW*(P1: DWORD, P2: ptr ptr PCWSTR, P3: PUINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueryDrivesInDiskSpaceListA*(P1: HDSKSPC, P2: PSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueryDrivesInDiskSpaceListW*(P1: HDSKSPC, P2: PWSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueryFileLogA*(P1: HSPFILELOG, P2: PCSTR, P3: PCSTR, P4: SetupFileLogInfo, P5: PSTR, P6: DWORD, P7: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueryFileLogW*(P1: HSPFILELOG, P2: PCWSTR, P3: PCWSTR, P4: SetupFileLogInfo, P5: PWSTR, P6: DWORD, P7: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueryInfFileInformationA*(P1: PSP_INF_INFORMATION, P2: UINT, P3: PSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueryInfFileInformationW*(P1: PSP_INF_INFORMATION, P2: UINT, P3: PWSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueryInfOriginalFileInformationA*(P1: PSP_INF_INFORMATION, P2: UINT, P3: PSP_ALTPLATFORM_INFO, P4: PSP_ORIGINAL_FILE_INFO_A): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueryInfOriginalFileInformationW*(P1: PSP_INF_INFORMATION, P2: UINT, P3: PSP_ALTPLATFORM_INFO, P4: PSP_ORIGINAL_FILE_INFO_W): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueryInfVersionInformationA*(P1: PSP_INF_INFORMATION, P2: UINT, P3: PSTR, P4: PSTR, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueryInfVersionInformationW*(P1: PSP_INF_INFORMATION, P2: UINT, P3: PCWSTR, P4: PWSTR, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQuerySpaceRequiredOnDriveA*(P1: HDSKSPC, P2: PCSTR, P3: ptr LONGLONG, P4: PVOID, P5: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQuerySpaceRequiredOnDriveW*(P1: HDSKSPC, P2: PCWSTR, P3: ptr LONGLONG, P4: PVOID, P5: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueueCopyA*(P1: HSPFILEQ, P2: PCSTR, P3: PCSTR, P4: PCSTR, P5: PCSTR, P6: PCSTR, P7: PCSTR, P8: PCSTR, P9: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueueCopyW*(P1: HSPFILEQ, P2: PCWSTR, P3: PCWSTR, P4: PCWSTR, P5: PCWSTR, P6: PCWSTR, P7: PCWSTR, P8: PCWSTR, P9: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueueCopyIndirectA*(P1: PSP_FILE_COPY_PARAMS_A): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueueCopyIndirectW*(P1: PSP_FILE_COPY_PARAMS_W): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueueCopySectionA*(P1: HSPFILEQ, P2: PCSTR, P3: HINF, P4: HINF, P5: PCSTR, P6: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueueCopySectionW*(P1: HSPFILEQ, P2: PCWSTR, P3: HINF, P4: HINF, P5: PCWSTR, P6: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueueDefaultCopyA*(P1: HSPFILEQ, P2: HINF, P3: PCSTR, P4: PCSTR, P5: PCSTR, P6: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueueDefaultCopyW*(P1: HSPFILEQ, P2: HINF, P3: PCWSTR, P4: PCWSTR, P5: PCWSTR, P6: DWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueueDeleteA*(P1: HSPFILEQ, P2: PCSTR, P3: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueueDeleteW*(P1: HSPFILEQ, P2: PCWSTR, P3: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueueDeleteSectionA*(P1: HSPFILEQ, P2: HINF, P3: HINF, P4: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueueDeleteSectionW*(P1: HSPFILEQ, P2: HINF, P3: HINF, P4: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueueRenameA*(P1: HSPFILEQ, P2: PCSTR, P3: PCSTR, P4: PCSTR, P5: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueueRenameW*(P1: HSPFILEQ, P2: PCWSTR, P3: PCWSTR, P4: PCWSTR, P5: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueueRenameSectionA*(P1: HSPFILEQ, P2: HINF, P3: HINF, P4: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupQueueRenameSectionW*(P1: HSPFILEQ, P2: HINF, P3: HINF, P4: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupRemoveFileLogEntryA*(P1: HSPFILELOG, P2: PCSTR, P3: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupRemoveFileLogEntryW*(P1: HSPFILELOG, P2: PCWSTR, P3: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupRemoveFromDiskSpaceListA*(P1: HDSKSPC, P2: PCSTR, P3: UINT, P4: PVOID, P5: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupRemoveFromDiskSpaceListW*(P1: HDSKSPC, P2: PCWSTR, P3: UINT, P4: PVOID, P5: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupRemoveFromSourceListA*(P1: DWORD, P2: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupRemoveFromSourceListW*(P1: DWORD, P2: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupRemoveInstallSectionFromDiskSpaceListA*(P1: HDSKSPC, P2: HINF, P3: HINF, P4: PCSTR, P5: PVOID, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupRemoveInstallSectionFromDiskSpaceListW*(P1: HDSKSPC, P2: HINF, P3: HINF, P4: PCWSTR, P5: PVOID, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupRemoveSectionFromDiskSpaceListA*(P1: HDSKSPC, P2: HINF, P3: HINF, P4: PCSTR, P5: UINT, P6: PVOID, P7: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupRemoveSectionFromDiskSpaceListW*(P1: HDSKSPC, P2: HINF, P3: HINF, P4: PCWSTR, P5: UINT, P6: PVOID, P7: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupRenameErrorA*(P1: HWND, P2: PCSTR, P3: PCSTR, P4: PCSTR, P5: UINT, P6: DWORD): UINT {.winapi, dynlib: "setupapi", importc.}
proc SetupRenameErrorW*(P1: HWND, P2: PCWSTR, P3: PCWSTR, P4: PCWSTR, P5: UINT, P6: DWORD): UINT {.winapi, dynlib: "setupapi", importc.}
proc SetupScanFileQueueA*(P1: HSPFILEQ, P2: DWORD, P3: HWND, P4: PSP_FILE_CALLBACK_A, P5: PVOID, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupScanFileQueueW*(P1: HSPFILEQ, P2: DWORD, P3: HWND, P4: PSP_FILE_CALLBACK_W, P5: PVOID, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupSetDirectoryIdA*(P1: HINF, P2: DWORD, P3: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupSetDirectoryIdW*(P1: HINF, P2: DWORD, P3: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupSetDirectoryIdExA*(P1: HINF, P2: DWORD, P3: PCSTR, P4: DWORD, P5: DWORD, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupSetDirectoryIdExW*(P1: HINF, P2: DWORD, P3: PCWSTR, P4: DWORD, P5: DWORD, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupSetFileQueueAlternatePlatformA*(P1: HSPFILEQ, P2: PSP_ALTPLATFORM_INFO, P3: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupSetFileQueueAlternatePlatformW*(P1: HSPFILEQ, P2: PSP_ALTPLATFORM_INFO, P3: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupSetPlatformPathOverrideA*(P1: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupSetPlatformPathOverrideW*(P1: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupSetSourceListA*(P1: DWORD, P2: ptr PCSTR, P3: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupSetSourceListW*(P1: DWORD, P2: ptr PCWSTR, P3: UINT): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupTermDefaultQueueCallback*(P1: PVOID): VOID {.winapi, dynlib: "setupapi", importc.}
proc SetupTerminateFileLog*(P1: HSPFILELOG): BOOL {.winapi, dynlib: "setupapi", importc.}
proc SetupDiCreateInterfaceDeviceW*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: ptr GUID, P4: PCWSTR, P5: DWORD, P6: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiCreateDeviceInterfaceW".}
proc SetupDiCreateInterfaceDeviceRegKeyW*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: DWORD, P4: REGSAM, P5: HINF, P6: PCWSTR): HKEY {.winapi, dynlib: "setupapi", importc: "SetupDiCreateDeviceInterfaceRegKeyW".}
proc SetupDiOpenInterfaceDeviceW*(P1: HDEVINFO, P2: PCWSTR, P3: DWORD, P4: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiOpenDeviceInterfaceW".}
proc SetupDiGetInterfaceDeviceDetailW*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: PSP_DEVICE_INTERFACE_DETAIL_DATA_W, P4: DWORD, P5: PDWORD, P6: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetDeviceInterfaceDetailW".}
proc SetupDiCreateInterfaceDeviceA*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: ptr GUID, P4: PCSTR, P5: DWORD, P6: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiCreateDeviceInterfaceA".}
proc SetupDiCreateInterfaceDeviceRegKeyA*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: DWORD, P4: REGSAM, P5: HINF, P6: PCSTR): HKEY {.winapi, dynlib: "setupapi", importc: "SetupDiCreateDeviceInterfaceRegKeyA".}
proc SetupDiOpenInterfaceDeviceA*(P1: HDEVINFO, P2: PCSTR, P3: DWORD, P4: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiOpenDeviceInterfaceA".}
proc SetupDiGetInterfaceDeviceDetailA*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: PSP_DEVICE_INTERFACE_DETAIL_DATA_A, P4: DWORD, P5: PDWORD, P6: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetDeviceInterfaceDetailA".}

when not defined(winansi):
  type
    PSP_FILE_CALLBACK* = PSP_FILE_CALLBACK_W

  proc SetupAddInstallSectionToDiskSpaceList*(P1: HDSKSPC, P2: HINF, P3: HINF, P4: PCWSTR, P5: PVOID, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupAddInstallSectionToDiskSpaceListW".}
  proc SetupAddSectionToDiskSpaceList*(P1: HDSKSPC, P2: HINF, P3: HINF, P4: PCWSTR, P5: UINT, P6: PVOID, P7: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupAddSectionToDiskSpaceListW".}
  proc SetupAddToDiskSpaceList*(P1: HDSKSPC, P2: PCWSTR, P3: LONGLONG, P4: UINT, P5: PVOID, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupAddToDiskSpaceListW".}
  proc SetupAddToSourceList*(P1: DWORD, P2: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupAddToSourceListW".}
  proc SetupAdjustDiskSpaceList*(P1: HDSKSPC, P2: LPCWSTR, P3: LONGLONG, P4: PVOID, P5: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupAdjustDiskSpaceListW".}
  proc SetupBackupError*(P1: HWND, P2: PCWSTR, P3: PCWSTR, P4: PCWSTR, P5: UINT, P6: DWORD): UINT {.winapi, dynlib: "setupapi", importc: "SetupBackupErrorW".}
  proc SetupCommitFileQueue*(P1: HWND, P2: HSPFILEQ, P3: PSP_FILE_CALLBACK_W, P4: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupCommitFileQueueW".}
  proc SetupCopyError*(P1: HWND, P2: PCWSTR, P3: PCWSTR, P4: PCWSTR, P5: PCWSTR, P6: PCWSTR, P7: UINT, P8: DWORD, P9: PWSTR, P10: DWORD, P11: PDWORD): UINT {.winapi, dynlib: "setupapi", importc: "SetupCopyErrorW".}
  proc SetupCopyOEMInf*(P1: PCWSTR, P2: PCWSTR, P3: DWORD, P4: DWORD, P5: PWSTR, P6: DWORD, P7: PDWORD, P8: ptr PWSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupCopyOEMInfW".}
  proc SetupCreateDiskSpaceList*(P1: PVOID, P2: DWORD, P3: UINT): HDSKSPC {.winapi, dynlib: "setupapi", importc: "SetupCreateDiskSpaceListW".}
  proc SetupDecompressOrCopyFile*(P1: PCWSTR, P2: PCWSTR, P3: PUINT): DWORD {.winapi, dynlib: "setupapi", importc: "SetupDecompressOrCopyFileW".}
  proc SetupDefaultQueueCallback*(P1: PVOID, P2: UINT, P3: UINT_PTR, P4: UINT_PTR): UINT {.winapi, dynlib: "setupapi", importc: "SetupDefaultQueueCallbackW".}
  proc SetupDeleteError*(P1: HWND, P2: PCWSTR, P3: PCWSTR, P4: UINT, P5: DWORD): UINT {.winapi, dynlib: "setupapi", importc: "SetupDeleteErrorW".}
  proc SetupDiBuildClassInfoListEx*(P1: DWORD, P2: LPGUID, P3: DWORD, P4: PDWORD, P5: PCWSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiBuildClassInfoListExW".}
  proc SetupDiClassGuidsFromNameEx*(P1: PCWSTR, P2: LPGUID, P3: DWORD, P4: PDWORD, P5: PCWSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiClassGuidsFromNameExW".}
  proc SetupDiClassGuidsFromName*(P1: PCWSTR, P2: LPGUID, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiClassGuidsFromNameW".}
  proc SetupDiClassNameFromGuidEx*(P1: ptr GUID, P2: PWSTR, P3: DWORD, P4: PDWORD, P5: PCWSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiClassNameFromGuidExW".}
  proc SetupDiClassNameFromGuid*(P1: ptr GUID, P2: PWSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiClassNameFromGuidW".}
  proc SetupDiCreateDeviceInfoListEx*(P1: ptr GUID, P2: HWND, P3: PCWSTR, P4: PVOID): HDEVINFO {.winapi, dynlib: "setupapi", importc: "SetupDiCreateDeviceInfoListExW".}
  proc SetupDiCreateDeviceInfo*(P1: HDEVINFO, P2: PCWSTR, P3: ptr GUID, P4: PCWSTR, P5: HWND, P6: DWORD, P7: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiCreateDeviceInfoW".}
  proc SetupDiCreateDeviceInterfaceRegKey*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: DWORD, P4: REGSAM, P5: HINF, P6: PCWSTR): HKEY {.winapi, dynlib: "setupapi", importc: "SetupDiCreateDeviceInterfaceRegKeyW".}
  proc SetupDiCreateInterfaceDeviceRegKey*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: DWORD, P4: REGSAM, P5: HINF, P6: PCWSTR): HKEY {.winapi, dynlib: "setupapi", importc: "SetupDiCreateDeviceInterfaceRegKeyW".}
  proc SetupDiCreateDeviceInterface*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: ptr GUID, P4: PCWSTR, P5: DWORD, P6: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiCreateDeviceInterfaceW".}
  proc SetupDiCreateInterfaceDevice*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: ptr GUID, P4: PCWSTR, P5: DWORD, P6: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiCreateDeviceInterfaceW".}
  proc SetupDiCreateDevRegKey*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: DWORD, P5: DWORD, P6: HINF, P7: PCWSTR): HKEY {.winapi, dynlib: "setupapi", importc: "SetupDiCreateDevRegKeyW".}
  proc SetupDiEnumDriverInfo*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: DWORD, P5: PSP_DRVINFO_DATA_W): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiEnumDriverInfoW".}
  proc SetupDiGetActualSectionToInstall*(P1: HINF, P2: PCWSTR, P3: PWSTR, P4: DWORD, P5: PDWORD, P6: ptr PWSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetActualSectionToInstallW".}
  proc SetupDiGetClassDescriptionEx*(P1: ptr GUID, P2: PWSTR, P3: DWORD, P4: PDWORD, P5: PCWSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetClassDescriptionExW".}
  proc SetupDiGetClassDescription*(P1: ptr GUID, P2: PWSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetClassDescriptionW".}
  proc SetupDiGetClassDevPropertySheets*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: LPPROPSHEETHEADERW, P4: DWORD, P5: PDWORD, P6: DWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetClassDevPropertySheetsW".}
  proc SetupDiGetClassDevsEx*(P1: ptr GUID, P2: PCWSTR, P3: HWND, P4: DWORD, P5: HDEVINFO, P6: PCWSTR, P7: PVOID): HDEVINFO {.winapi, dynlib: "setupapi", importc: "SetupDiGetClassDevsExW".}
  proc SetupDiGetClassDevs*(P1: ptr GUID, P2: PCWSTR, P3: HWND, P4: DWORD): HDEVINFO {.winapi, dynlib: "setupapi", importc: "SetupDiGetClassDevsW".}
  proc SetupDiGetClassImageListEx*(P1: PSP_CLASSIMAGELIST_DATA, P2: PCWSTR, P3: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetClassImageListExW".}
  proc SetupDiGetClassInstallParams*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_CLASSINSTALL_HEADER, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetClassInstallParamsW".}
  proc SetupDiGetClassRegistryProperty*(P1: LPGUID, P2: DWORD, P3: PDWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PCWSTR, P8: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetClassRegistryPropertyW".}
  proc SetupDiGetDeviceInfoListDetail*(P1: HDEVINFO, P2: PSP_DEVINFO_LIST_DETAIL_DATA_W): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetDeviceInfoListDetailW".}
  proc SetupDiGetDeviceInstallParams*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DEVINSTALL_PARAMS_W): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetDeviceInstallParamsW".}
  proc SetupDiGetDeviceInstanceId*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PWSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetDeviceInstanceIdW".}
  proc SetupDiGetDeviceInterfaceDetail*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: PSP_DEVICE_INTERFACE_DETAIL_DATA_W, P4: DWORD, P5: PDWORD, P6: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetDeviceInterfaceDetailW".}
  proc SetupDiGetInterfaceDeviceDetail*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: PSP_DEVICE_INTERFACE_DETAIL_DATA_W, P4: DWORD, P5: PDWORD, P6: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetDeviceInterfaceDetailW".}
  proc SetupDiGetDeviceRegistryProperty*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: PDWORD, P5: PBYTE, P6: DWORD, P7: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetDeviceRegistryPropertyW".}
  proc SetupDiGetDriverInfoDetail*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_W, P4: PSP_DRVINFO_DETAIL_DATA_W, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetDriverInfoDetailW".}
  proc SetupDiGetDriverInstallParams*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_W, P4: PSP_DRVINSTALL_PARAMS): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetDriverInstallParamsW".}
  proc SetupDiGetHwProfileFriendlyNameEx*(P1: DWORD, P2: PWSTR, P3: DWORD, P4: PDWORD, P5: PCWSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetHwProfileFriendlyNameExW".}
  proc SetupDiGetHwProfileFriendlyName*(P1: DWORD, P2: PWSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetHwProfileFriendlyNameW".}
  proc SetupDiGetHwProfileListEx*(P1: PDWORD, P2: DWORD, P3: PDWORD, P4: PDWORD, P5: PCWSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetHwProfileListExW".}
  proc SetupDiGetINFClass*(P1: PCWSTR, P2: LPGUID, P3: PWSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetINFClassW".}
  proc SetupDiGetSelectedDriver*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_W): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetSelectedDriverW".}
  proc SetupDiInstallClassEx*(P1: HWND, P2: PCWSTR, P3: DWORD, P4: HSPFILEQ, P5: ptr GUID, P6: PVOID, P7: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiInstallClassExW".}
  proc SetupDiInstallClass*(P1: HWND, P2: PCWSTR, P3: DWORD, P4: HSPFILEQ): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiInstallClassW".}
  proc SetupDiOpenClassRegKeyEx*(P1: ptr GUID, P2: REGSAM, P3: DWORD, P4: PCWSTR, P5: PVOID): HKEY {.winapi, dynlib: "setupapi", importc: "SetupDiOpenClassRegKeyExW".}
  proc SetupDiOpenDeviceInfo*(P1: HDEVINFO, P2: PCWSTR, P3: HWND, P4: DWORD, P5: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiOpenDeviceInfoW".}
  proc SetupDiOpenDeviceInterface*(P1: HDEVINFO, P2: PCWSTR, P3: DWORD, P4: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiOpenDeviceInterfaceW".}
  proc SetupDiOpenInterfaceDevice*(P1: HDEVINFO, P2: PCWSTR, P3: DWORD, P4: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiOpenDeviceInterfaceW".}
  proc SetupDiSetClassInstallParams*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_CLASSINSTALL_HEADER, P4: DWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiSetClassInstallParamsW".}
  proc SetupDiSetClassRegistryProperty*(P1: LPGUID, P2: DWORD, P3: ptr BYTE, P4: DWORD, P5: PCWSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiSetClassRegistryPropertyW".}
  proc SetupDiSetDeviceInstallParams*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DEVINSTALL_PARAMS_W): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiSetDeviceInstallParamsW".}
  proc SetupDiSetDeviceRegistryProperty*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: ptr BYTE, P5: DWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiSetDeviceRegistryPropertyW".}
  proc SetupDiSetDriverInstallParams*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_W, P4: PSP_DRVINSTALL_PARAMS): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiSetDriverInstallParamsW".}
  proc SetupDiSetSelectedDriver*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_W): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiSetSelectedDriverW".}
  proc SetupDuplicateDiskSpaceList*(P1: HDSKSPC, P2: PVOID, P3: DWORD, P4: UINT): HDSKSPC {.winapi, dynlib: "setupapi", importc: "SetupDuplicateDiskSpaceListW".}
  proc SetupFindFirstLine*(P1: HINF, P2: PCWSTR, P3: PCWSTR, P4: PINFCONTEXT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupFindFirstLineW".}
  proc SetupFindNextMatchLine*(P1: PINFCONTEXT, P2: PCWSTR, P3: PINFCONTEXT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupFindNextMatchLineW".}
  proc SetupFreeSourceList*(List: ptr ptr PCWSTR, P2: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupFreeSourceListW".}
  proc SetupGetBackupInformation*(P1: HSPFILEQ, P2: PSP_BACKUP_QUEUE_PARAMS_W): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetBackupInformationW".}
  proc SetupGetFileCompressionInfo*(P1: PCWSTR, P2: ptr PWSTR, P3: PDWORD, P4: PDWORD, P5: PUINT): DWORD {.winapi, dynlib: "setupapi", importc: "SetupGetFileCompressionInfoW".}
  proc SetupGetInfFileList*(P1: PCWSTR, P2: DWORD, P3: PWSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetInfFileListW".}
  proc SetupGetInfInformation*(P1: LPCVOID, P2: DWORD, P3: PSP_INF_INFORMATION, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetInfInformationW".}
  proc SetupGetLineByIndex*(P1: HINF, P2: PCWSTR, P3: DWORD, P4: PINFCONTEXT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetLineByIndexW".}
  proc SetupGetLineCount*(P1: HINF, P2: PCWSTR): LONG {.winapi, dynlib: "setupapi", importc: "SetupGetLineCountW".}
  proc SetupGetLineText*(P1: PINFCONTEXT, P2: HINF, P3: PCWSTR, P4: PCWSTR, P5: PWSTR, P6: DWORD, P7: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetLineTextW".}
  proc SetupGetMultiSzField*(P1: PINFCONTEXT, P2: DWORD, P3: PWSTR, P4: DWORD, P5: LPDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetMultiSzFieldW".}
  proc SetupGetSourceFileLocation*(P1: HINF, P2: PINFCONTEXT, P3: PCWSTR, P4: PUINT, P5: PWSTR, P6: DWORD, P7: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetSourceFileLocationW".}
  proc SetupGetSourceFileSize*(P1: HINF, P2: PINFCONTEXT, P3: PCWSTR, P4: PCWSTR, P5: PDWORD, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetSourceFileSizeW".}
  proc SetupGetSourceInfo*(P1: HINF, P2: UINT, P3: UINT, P4: PWSTR, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetSourceInfoW".}
  proc SetupGetStringField*(P1: PINFCONTEXT, P2: DWORD, P3: PWSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetStringFieldW".}
  proc SetupGetTargetPath*(P1: HINF, P2: PINFCONTEXT, P3: PCWSTR, P4: PWSTR, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetTargetPathW".}
  proc SetupInitializeFileLog*(P1: PCWSTR, P2: DWORD): HSPFILELOG {.winapi, dynlib: "setupapi", importc: "SetupInitializeFileLogW".}
  proc SetupInstallFileEx*(P1: HINF, P2: PINFCONTEXT, P3: PCWSTR, P4: PCWSTR, P5: PCWSTR, P6: DWORD, P7: PSP_FILE_CALLBACK_W, P8: PVOID, P9: PBOOL): BOOL {.winapi, dynlib: "setupapi", importc: "SetupInstallFileExW".}
  proc SetupInstallFilesFromInfSection*(P1: HINF, P2: HINF, P3: HSPFILEQ, P4: PCWSTR, P5: PCWSTR, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupInstallFilesFromInfSectionW".}
  proc SetupInstallFile*(P1: HINF, P2: PINFCONTEXT, P3: PCWSTR, P4: PCWSTR, P5: PCWSTR, P6: DWORD, P7: PSP_FILE_CALLBACK_W, P8: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupInstallFileW".}
  proc SetupInstallFromInfSection*(P1: HWND, P2: HINF, P3: PCWSTR, P4: UINT, P5: HKEY, P6: PCWSTR, P7: UINT, P8: PSP_FILE_CALLBACK_W, P9: PVOID, P10: HDEVINFO, P11: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupInstallFromInfSectionW".}
  proc SetupInstallServicesFromInfSectionEx*(P1: HINF, P2: PCWSTR, P3: DWORD, P4: HDEVINFO, P5: PSP_DEVINFO_DATA, P6: PVOID, P7: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupInstallServicesFromInfSectionExW".}
  proc SetupInstallServicesFromInfSection*(P1: HINF, P2: PCWSTR, P3: DWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupInstallServicesFromInfSectionW".}
  proc SetupIterateCabinet*(P1: PCWSTR, P2: DWORD, P3: PSP_FILE_CALLBACK_W, P4: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupIterateCabinetW".}
  proc SetupLogError*(P1: LPCWSTR, P2: LogSeverity): BOOL {.winapi, dynlib: "setupapi", importc: "SetupLogErrorW".}
  proc SetupLogFile*(P1: HSPFILELOG, P2: PCWSTR, P3: PCWSTR, P4: PCWSTR, P5: DWORD, P6: PCWSTR, P7: PCWSTR, P8: PCWSTR, P9: DWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupLogFileW".}
  proc SetupOpenAppendInfFile*(P1: PCWSTR, P2: HINF, P3: PUINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupOpenAppendInfFileW".}
  proc SetupOpenInfFile*(P1: PCWSTR, P2: PCWSTR, P3: DWORD, P4: PUINT): HINF {.winapi, dynlib: "setupapi", importc: "SetupOpenInfFileW".}
  proc SetupPromptForDisk*(P1: HWND, P2: PCWSTR, P3: PCWSTR, P4: PCWSTR, P5: PCWSTR, P6: PCWSTR, P7: DWORD, P8: PWSTR, P9: DWORD, P10: PDWORD): UINT {.winapi, dynlib: "setupapi", importc: "SetupPromptForDiskW".}
  proc SetupQueryDrivesInDiskSpaceList*(P1: HDSKSPC, P2: PWSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueryDrivesInDiskSpaceListW".}
  proc SetupQueryFileLog*(P1: HSPFILELOG, P2: PCWSTR, P3: PCWSTR, P4: SetupFileLogInfo, P5: PWSTR, P6: DWORD, P7: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueryFileLogW".}
  proc SetupQueryInfFileInformation*(P1: PSP_INF_INFORMATION, P2: UINT, P3: PWSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueryInfFileInformationW".}
  proc SetupQueryInfOriginalFileInformation*(P1: PSP_INF_INFORMATION, P2: UINT, P3: PSP_ALTPLATFORM_INFO, P4: PSP_ORIGINAL_FILE_INFO_W): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueryInfOriginalFileInformationW".}
  proc SetupQueryInfVersionInformation*(P1: PSP_INF_INFORMATION, P2: UINT, P3: PCWSTR, P4: PWSTR, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueryInfVersionInformationW".}
  proc SetupQuerySourceList*(P1: DWORD, List: ptr ptr PCWSTR, P3: PUINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQuerySourceListW".}
  proc SetupQuerySpaceRequiredOnDrive*(P1: HDSKSPC, P2: PCWSTR, P3: ptr LONGLONG, P4: PVOID, P5: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQuerySpaceRequiredOnDriveW".}
  proc SetupQueueCopyIndirect*(P1: PSP_FILE_COPY_PARAMS_W): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueueCopyIndirectW".}
  proc SetupQueueCopySection*(P1: HSPFILEQ, P2: PCWSTR, P3: HINF, P4: HINF, P5: PCWSTR, P6: DWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueueCopySectionW".}
  proc SetupQueueCopy*(P1: HSPFILEQ, P2: PCWSTR, P3: PCWSTR, P4: PCWSTR, P5: PCWSTR, P6: PCWSTR, P7: PCWSTR, P8: PCWSTR, P9: DWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueueCopyW".}
  proc SetupQueueDefaultCopy*(P1: HSPFILEQ, P2: HINF, P3: PCWSTR, P4: PCWSTR, P5: PCWSTR, P6: DWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueueDefaultCopyW".}
  proc SetupQueueDeleteSection*(P1: HSPFILEQ, P2: HINF, P3: HINF, P4: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueueDeleteSectionW".}
  proc SetupQueueDelete*(P1: HSPFILEQ, P2: PCWSTR, P3: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueueDeleteW".}
  proc SetupQueueRenameSection*(P1: HSPFILEQ, P2: HINF, P3: HINF, P4: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueueRenameSectionW".}
  proc SetupQueueRename*(P1: HSPFILEQ, P2: PCWSTR, P3: PCWSTR, P4: PCWSTR, P5: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueueRenameW".}
  proc SetupRemoveFileLogEntry*(P1: HSPFILELOG, P2: PCWSTR, P3: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupRemoveFileLogEntryW".}
  proc SetupRemoveFromDiskSpaceList*(P1: HDSKSPC, P2: PCWSTR, P3: UINT, P4: PVOID, P5: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupRemoveFromDiskSpaceListW".}
  proc SetupRemoveFromSourceList*(P1: DWORD, P2: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupRemoveFromSourceListW".}
  proc SetupRemoveInstallSectionFromDiskSpaceList*(P1: HDSKSPC, P2: HINF, P3: HINF, P4: PCWSTR, P5: PVOID, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupRemoveInstallSectionFromDiskSpaceListW".}
  proc SetupRemoveSectionFromDiskSpaceList*(P1: HDSKSPC, P2: HINF, P3: HINF, P4: PCWSTR, P5: UINT, P6: PVOID, P7: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupRemoveSectionFromDiskSpaceListW".}
  proc SetupRenameError*(P1: HWND, P2: PCWSTR, P3: PCWSTR, P4: PCWSTR, P5: UINT, P6: DWORD): UINT {.winapi, dynlib: "setupapi", importc: "SetupRenameErrorW".}
  proc SetupScanFileQueue*(P1: HSPFILEQ, P2: DWORD, P3: HWND, P4: PSP_FILE_CALLBACK_W, P5: PVOID, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupScanFileQueueW".}
  proc SetupSetDirectoryIdEx*(P1: HINF, P2: DWORD, P3: PCWSTR, P4: DWORD, P5: DWORD, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupSetDirectoryIdExW".}
  proc SetupSetDirectoryId*(P1: HINF, P2: DWORD, P3: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupSetDirectoryIdW".}
  proc SetupSetFileQueueAlternatePlatform*(P1: HSPFILEQ, P2: PSP_ALTPLATFORM_INFO, P3: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupSetFileQueueAlternatePlatformW".}
  proc SetupSetPlatformPathOverride*(P1: PCWSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupSetPlatformPathOverrideW".}
  proc SetupSetSourceList*(P1: DWORD, P2: ptr PCWSTR, P3: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupSetSourceListW".}

else:
  type
    PSP_FILE_CALLBACK* = PSP_FILE_CALLBACK_A

  proc SetupAddInstallSectionToDiskSpaceList*(P1: HDSKSPC, P2: HINF, P3: HINF, P4: PCSTR, P5: PVOID, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupAddInstallSectionToDiskSpaceListA".}
  proc SetupAddSectionToDiskSpaceList*(P1: HDSKSPC, P2: HINF, P3: HINF, P4: PCSTR, P5: UINT, P6: PVOID, P7: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupAddSectionToDiskSpaceListA".}
  proc SetupAddToDiskSpaceList*(P1: HDSKSPC, P2: PCSTR, P3: LONGLONG, P4: UINT, P5: PVOID, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupAddToDiskSpaceListA".}
  proc SetupAddToSourceList*(P1: DWORD, P2: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupAddToSourceListA".}
  proc SetupAdjustDiskSpaceList*(P1: HDSKSPC, P2: LPCSTR, P3: LONGLONG, P4: PVOID, P5: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupAdjustDiskSpaceListA".}
  proc SetupBackupError*(P1: HWND, P2: PCSTR, P3: PCSTR, P4: PCSTR, P5: UINT, P6: DWORD): UINT {.winapi, dynlib: "setupapi", importc: "SetupBackupErrorA".}
  proc SetupCommitFileQueue*(P1: HWND, P2: HSPFILEQ, P3: PSP_FILE_CALLBACK_A, P4: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupCommitFileQueueA".}
  proc SetupCopyError*(P1: HWND, P2: PCSTR, P3: PCSTR, P4: PCSTR, P5: PCSTR, P6: PCSTR, P7: UINT, P8: DWORD, P9: PSTR, P10: DWORD, P11: PDWORD): UINT {.winapi, dynlib: "setupapi", importc: "SetupCopyErrorA".}
  proc SetupCopyOEMInf*(P1: PCSTR, P2: PCSTR, P3: DWORD, P4: DWORD, P5: PSTR, P6: DWORD, P7: PDWORD, P8: ptr PSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupCopyOEMInfA".}
  proc SetupCreateDiskSpaceList*(P1: PVOID, P2: DWORD, P3: UINT): HDSKSPC {.winapi, dynlib: "setupapi", importc: "SetupCreateDiskSpaceListA".}
  proc SetupDecompressOrCopyFile*(P1: PCSTR, P2: PCSTR, P3: PUINT): DWORD {.winapi, dynlib: "setupapi", importc: "SetupDecompressOrCopyFileA".}
  proc SetupDefaultQueueCallback*(P1: PVOID, P2: UINT, P3: UINT_PTR, P4: UINT_PTR): UINT {.winapi, dynlib: "setupapi", importc: "SetupDefaultQueueCallbackA".}
  proc SetupDeleteError*(P1: HWND, P2: PCSTR, P3: PCSTR, P4: UINT, P5: DWORD): UINT {.winapi, dynlib: "setupapi", importc: "SetupDeleteErrorA".}
  proc SetupDiBuildClassInfoListEx*(P1: DWORD, P2: LPGUID, P3: DWORD, P4: PDWORD, P5: PCSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiBuildClassInfoListExA".}
  proc SetupDiClassGuidsFromName*(P1: PCSTR, P2: LPGUID, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiClassGuidsFromNameA".}
  proc SetupDiClassGuidsFromNameEx*(P1: PCSTR, P2: LPGUID, P3: DWORD, P4: PDWORD, P5: PCSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiClassGuidsFromNameExA".}
  proc SetupDiClassNameFromGuid*(P1: ptr GUID, P2: PSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiClassNameFromGuidA".}
  proc SetupDiClassNameFromGuidEx*(P1: ptr GUID, P2: PSTR, P3: DWORD, P4: PDWORD, P5: PCSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiClassNameFromGuidExA".}
  proc SetupDiCreateDeviceInfo*(P1: HDEVINFO, P2: PCSTR, P3: ptr GUID, P4: PCSTR, P5: HWND, P6: DWORD, P7: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiCreateDeviceInfoA".}
  proc SetupDiCreateDeviceInfoListEx*(P1: ptr GUID, P2: HWND, P3: PCSTR, P4: PVOID): HDEVINFO {.winapi, dynlib: "setupapi", importc: "SetupDiCreateDeviceInfoListExA".}
  proc SetupDiCreateDeviceInterface*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: ptr GUID, P4: PCSTR, P5: DWORD, P6: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiCreateDeviceInterfaceA".}
  proc SetupDiCreateInterfaceDevice*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: ptr GUID, P4: PCSTR, P5: DWORD, P6: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiCreateDeviceInterfaceA".}
  proc SetupDiCreateDeviceInterfaceRegKey*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: DWORD, P4: REGSAM, P5: HINF, P6: PCSTR): HKEY {.winapi, dynlib: "setupapi", importc: "SetupDiCreateDeviceInterfaceRegKeyA".}
  proc SetupDiCreateInterfaceDeviceRegKey*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: DWORD, P4: REGSAM, P5: HINF, P6: PCSTR): HKEY {.winapi, dynlib: "setupapi", importc: "SetupDiCreateDeviceInterfaceRegKeyA".}
  proc SetupDiCreateDevRegKey*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: DWORD, P5: DWORD, P6: HINF, P7: PCSTR): HKEY {.winapi, dynlib: "setupapi", importc: "SetupDiCreateDevRegKeyA".}
  proc SetupDiDeleteInterfaceDeviceData*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiDeleteDeviceInterfaceData".}
  proc SetupDiEnumDriverInfo*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: DWORD, P5: PSP_DRVINFO_DATA_A): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiEnumDriverInfoA".}
  proc SetupDiGetActualSectionToInstall*(P1: HINF, P2: PCSTR, P3: PSTR, P4: DWORD, P5: PDWORD, P6: ptr PSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetActualSectionToInstallA".}
  proc SetupDiGetClassDescription*(P1: ptr GUID, P2: PSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetClassDescriptionA".}
  proc SetupDiGetClassDescriptionEx*(P1: ptr GUID, P2: PSTR, P3: DWORD, P4: PDWORD, P5: PCSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetClassDescriptionExA".}
  proc SetupDiGetClassDevPropertySheets*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: LPPROPSHEETHEADERA, P4: DWORD, P5: PDWORD, P6: DWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetClassDevPropertySheetsA".}
  proc SetupDiGetClassDevs*(P1: ptr GUID, P2: PCSTR, P3: HWND, P4: DWORD): HDEVINFO {.winapi, dynlib: "setupapi", importc: "SetupDiGetClassDevsA".}
  proc SetupDiGetClassDevsEx*(P1: ptr GUID, P2: PCSTR, P3: HWND, P4: DWORD, P5: HDEVINFO, P6: PCSTR, P7: PVOID): HDEVINFO {.winapi, dynlib: "setupapi", importc: "SetupDiGetClassDevsExA".}
  proc SetupDiGetClassImageListEx*(P1: PSP_CLASSIMAGELIST_DATA, P2: PCSTR, P3: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetClassImageListExA".}
  proc SetupDiGetClassInstallParams*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_CLASSINSTALL_HEADER, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetClassInstallParamsA".}
  proc SetupDiGetClassRegistryProperty*(P1: LPGUID, P2: DWORD, P3: PDWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PCSTR, P8: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetClassRegistryPropertyA".}
  proc SetupDiGetDeviceInfoListDetail*(P1: HDEVINFO, P2: PSP_DEVINFO_LIST_DETAIL_DATA_A): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetDeviceInfoListDetailA".}
  proc SetupDiGetDeviceInstallParams*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DEVINSTALL_PARAMS_A): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetDeviceInstallParamsA".}
  proc SetupDiGetDeviceInstanceId*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetDeviceInstanceIdA".}
  proc SetupDiGetDeviceInterfaceDetail*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: PSP_DEVICE_INTERFACE_DETAIL_DATA_A, P4: DWORD, P5: PDWORD, P6: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetDeviceInterfaceDetailA".}
  proc SetupDiGetInterfaceDeviceDetail*(P1: HDEVINFO, P2: PSP_DEVICE_INTERFACE_DATA, P3: PSP_DEVICE_INTERFACE_DETAIL_DATA_A, P4: DWORD, P5: PDWORD, P6: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetDeviceInterfaceDetailA".}
  proc SetupDiGetDeviceRegistryProperty*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: PDWORD, P5: PBYTE, P6: DWORD, P7: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetDeviceRegistryPropertyA".}
  proc SetupDiGetDriverInfoDetail*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_A, P4: PSP_DRVINFO_DETAIL_DATA_A, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetDriverInfoDetailA".}
  proc SetupDiGetDriverInstallParams*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_A, P4: PSP_DRVINSTALL_PARAMS): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetDriverInstallParamsA".}
  proc SetupDiGetHwProfileFriendlyName*(P1: DWORD, P2: PSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetHwProfileFriendlyNameA".}
  proc SetupDiGetHwProfileFriendlyNameEx*(P1: DWORD, P2: PSTR, P3: DWORD, P4: PDWORD, P5: PCSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetHwProfileFriendlyNameExA".}
  proc SetupDiGetHwProfileListEx*(P1: PDWORD, P2: DWORD, P3: PDWORD, P4: PDWORD, P5: PCSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetHwProfileListExA".}
  proc SetupDiGetINFClass*(P1: PCSTR, P2: LPGUID, P3: PSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetINFClassA".}
  proc SetupDiGetSelectedDriver*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_A): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiGetSelectedDriverA".}
  proc SetupDiInstallClass*(P1: HWND, P2: PCSTR, P3: DWORD, P4: HSPFILEQ): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiInstallClassA".}
  proc SetupDiInstallClassEx*(P1: HWND, P2: PCSTR, P3: DWORD, P4: HSPFILEQ, P5: ptr GUID, P6: PVOID, P7: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiInstallClassExA".}
  proc SetupDiOpenClassRegKeyEx*(P1: ptr GUID, P2: REGSAM, P3: DWORD, P4: PCSTR, P5: PVOID): HKEY {.winapi, dynlib: "setupapi", importc: "SetupDiOpenClassRegKeyExA".}
  proc SetupDiOpenDeviceInfo*(P1: HDEVINFO, P2: PCSTR, P3: HWND, P4: DWORD, P5: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiOpenDeviceInfoA".}
  proc SetupDiOpenDeviceInterface*(P1: HDEVINFO, P2: PCSTR, P3: DWORD, P4: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiOpenDeviceInterfaceA".}
  proc SetupDiOpenInterfaceDevice*(P1: HDEVINFO, P2: PCSTR, P3: DWORD, P4: PSP_DEVICE_INTERFACE_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiOpenDeviceInterfaceA".}
  proc SetupDiSetClassInstallParams*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_CLASSINSTALL_HEADER, P4: DWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiSetClassInstallParamsA".}
  proc SetupDiSetClassRegistryProperty*(P1: LPGUID, P2: DWORD, P3: ptr BYTE, P4: DWORD, P5: PCSTR, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiSetClassRegistryPropertyA".}
  proc SetupDiSetDeviceInstallParams*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DEVINSTALL_PARAMS_A): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiSetDeviceInstallParamsA".}
  proc SetupDiSetDeviceRegistryProperty*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: DWORD, P4: ptr BYTE, P5: DWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiSetDeviceRegistryPropertyA".}
  proc SetupDiSetDriverInstallParams*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_A, P4: PSP_DRVINSTALL_PARAMS): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiSetDriverInstallParamsA".}
  proc SetupDiSetSelectedDriver*(P1: HDEVINFO, P2: PSP_DEVINFO_DATA, P3: PSP_DRVINFO_DATA_A): BOOL {.winapi, dynlib: "setupapi", importc: "SetupDiSetSelectedDriverA".}
  proc SetupDuplicateDiskSpaceList*(P1: HDSKSPC, P2: PVOID, P3: DWORD, P4: UINT): HDSKSPC {.winapi, dynlib: "setupapi", importc: "SetupDuplicateDiskSpaceListA".}
  proc SetupFindFirstLine*(P1: HINF, P2: PCSTR, P3: PCSTR, P4: PINFCONTEXT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupFindFirstLineA".}
  proc SetupFindNextMatchLine*(P1: PINFCONTEXT, P2: PCSTR, P3: PINFCONTEXT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupFindNextMatchLineA".}
  proc SetupFreeSourceList*(List: ptr ptr PCSTR, P2: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupFreeSourceListA".}
  proc SetupGetBackupInformation*(P1: HSPFILEQ, P2: PSP_BACKUP_QUEUE_PARAMS_A): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetBackupInformationA".}
  proc SetupGetFileCompressionInfo*(P1: PCSTR, P2: ptr PSTR, P3: PDWORD, P4: PDWORD, P5: PUINT): DWORD {.winapi, dynlib: "setupapi", importc: "SetupGetFileCompressionInfoA".}
  proc SetupGetInfFileList*(P1: PCSTR, P2: DWORD, P3: PSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetInfFileListA".}
  proc SetupGetInfInformation*(P1: LPCVOID, P2: DWORD, P3: PSP_INF_INFORMATION, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetInfInformationA".}
  proc SetupGetLineByIndex*(P1: HINF, P2: PCSTR, P3: DWORD, P4: PINFCONTEXT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetLineByIndexA".}
  proc SetupGetLineCount*(P1: HINF, P2: PCSTR): LONG {.winapi, dynlib: "setupapi", importc: "SetupGetLineCountA".}
  proc SetupGetLineText*(P1: PINFCONTEXT, P2: HINF, P3: PCSTR, P4: PCSTR, P5: PSTR, P6: DWORD, P7: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetLineTextA".}
  proc SetupGetMultiSzField*(P1: PINFCONTEXT, P2: DWORD, P3: PSTR, P4: DWORD, P5: LPDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetMultiSzFieldA".}
  proc SetupGetSourceFileLocation*(P1: HINF, P2: PINFCONTEXT, P3: PCSTR, P4: PUINT, P5: PSTR, P6: DWORD, P7: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetSourceFileLocationA".}
  proc SetupGetSourceFileSize*(P1: HINF, P2: PINFCONTEXT, P3: PCSTR, P4: PCSTR, P5: PDWORD, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetSourceFileSizeA".}
  proc SetupGetSourceInfo*(P1: HINF, P2: UINT, P3: UINT, P4: PSTR, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetSourceInfoA".}
  proc SetupGetStringField*(P1: PINFCONTEXT, P2: DWORD, P3: PSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetStringFieldA".}
  proc SetupGetTargetPath*(P1: HINF, P2: PINFCONTEXT, P3: PCSTR, P4: PSTR, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupGetTargetPathA".}
  proc SetupInitializeFileLog*(P1: PCSTR, P2: DWORD): HSPFILELOG {.winapi, dynlib: "setupapi", importc: "SetupInitializeFileLogA".}
  proc SetupInstallFile*(P1: HINF, P2: PINFCONTEXT, P3: PCSTR, P4: PCSTR, P5: PCSTR, P6: DWORD, P7: PSP_FILE_CALLBACK_A, P8: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupInstallFileA".}
  proc SetupInstallFileEx*(P1: HINF, P2: PINFCONTEXT, P3: PCSTR, P4: PCSTR, P5: PCSTR, P6: DWORD, P7: PSP_FILE_CALLBACK_A, P8: PVOID, P9: PBOOL): BOOL {.winapi, dynlib: "setupapi", importc: "SetupInstallFileExA".}
  proc SetupInstallFilesFromInfSection*(P1: HINF, P2: HINF, P3: HSPFILEQ, P4: PCSTR, P5: PCSTR, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupInstallFilesFromInfSectionA".}
  proc SetupInstallFromInfSection*(P1: HWND, P2: HINF, P3: PCSTR, P4: UINT, P5: HKEY, P6: PCSTR, P7: UINT, P8: PSP_FILE_CALLBACK_A, P9: PVOID, P10: HDEVINFO, P11: PSP_DEVINFO_DATA): BOOL {.winapi, dynlib: "setupapi", importc: "SetupInstallFromInfSectionA".}
  proc SetupInstallServicesFromInfSection*(P1: HINF, P2: PCSTR, P3: DWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupInstallServicesFromInfSectionA".}
  proc SetupInstallServicesFromInfSectionEx*(P1: HINF, P2: PCSTR, P3: DWORD, P4: HDEVINFO, P5: PSP_DEVINFO_DATA, P6: PVOID, P7: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupInstallServicesFromInfSectionExA".}
  proc SetupIterateCabinet*(P1: PCSTR, P2: DWORD, P3: PSP_FILE_CALLBACK_A, P4: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupIterateCabinetA".}
  proc SetupLogError*(P1: LPCSTR, P2: LogSeverity): BOOL {.winapi, dynlib: "setupapi", importc: "SetupLogErrorA".}
  proc SetupLogFile*(P1: HSPFILELOG, P2: PCSTR, P3: PCSTR, P4: PCSTR, P5: DWORD, P6: PCSTR, P7: PCSTR, P8: PCSTR, P9: DWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupLogFileA".}
  proc SetupOpenAppendInfFile*(P1: PCSTR, P2: HINF, P3: PUINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupOpenAppendInfFileA".}
  proc SetupOpenInfFile*(P1: PCSTR, P2: PCSTR, P3: DWORD, P4: PUINT): HINF {.winapi, dynlib: "setupapi", importc: "SetupOpenInfFileA".}
  proc SetupPromptForDisk*(P1: HWND, P2: PCSTR, P3: PCSTR, P4: PCSTR, P5: PCSTR, P6: PCSTR, P7: DWORD, P8: PSTR, P9: DWORD, P10: PDWORD): UINT {.winapi, dynlib: "setupapi", importc: "SetupPromptForDiskA".}
  proc SetupQueryDrivesInDiskSpaceList*(P1: HDSKSPC, P2: PSTR, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueryDrivesInDiskSpaceListA".}
  proc SetupQueryFileLog*(P1: HSPFILELOG, P2: PCSTR, P3: PCSTR, P4: SetupFileLogInfo, P5: PSTR, P6: DWORD, P7: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueryFileLogA".}
  proc SetupQueryInfFileInformation*(P1: PSP_INF_INFORMATION, P2: UINT, P3: PSTR, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueryInfFileInformationA".}
  proc SetupQueryInfOriginalFileInformation*(P1: PSP_INF_INFORMATION, P2: UINT, P3: PSP_ALTPLATFORM_INFO, P4: PSP_ORIGINAL_FILE_INFO_A): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueryInfOriginalFileInformationA".}
  proc SetupQueryInfVersionInformation*(P1: PSP_INF_INFORMATION, P2: UINT, P3: PSTR, P4: PSTR, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueryInfVersionInformationA".}
  proc SetupQuerySourceList*(P1: DWORD, List: ptr ptr PCSTR, P3: PUINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQuerySourceListA".}
  proc SetupQuerySpaceRequiredOnDrive*(P1: HDSKSPC, P2: PCSTR, P3: ptr LONGLONG, P4: PVOID, P5: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQuerySpaceRequiredOnDriveA".}
  proc SetupQueueCopy*(P1: HSPFILEQ, P2: PCSTR, P3: PCSTR, P4: PCSTR, P5: PCSTR, P6: PCSTR, P7: PCSTR, P8: PCSTR, P9: DWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueueCopyA".}
  proc SetupQueueCopyIndirect*(P1: PSP_FILE_COPY_PARAMS_A): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueueCopyIndirectA".}
  proc SetupQueueCopySection*(P1: HSPFILEQ, P2: PCSTR, P3: HINF, P4: HINF, P5: PCSTR, P6: DWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueueCopySectionA".}
  proc SetupQueueDefaultCopy*(P1: HSPFILEQ, P2: HINF, P3: PCSTR, P4: PCSTR, P5: PCSTR, P6: DWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueueDefaultCopyA".}
  proc SetupQueueDelete*(P1: HSPFILEQ, P2: PCSTR, P3: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueueDeleteA".}
  proc SetupQueueDeleteSection*(P1: HSPFILEQ, P2: HINF, P3: HINF, P4: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueueDeleteSectionA".}
  proc SetupQueueRename*(P1: HSPFILEQ, P2: PCSTR, P3: PCSTR, P4: PCSTR, P5: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueueRenameA".}
  proc SetupQueueRenameSection*(P1: HSPFILEQ, P2: HINF, P3: HINF, P4: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupQueueRenameSectionA".}
  proc SetupRemoveFileLogEntry*(P1: HSPFILELOG, P2: PCSTR, P3: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupRemoveFileLogEntryA".}
  proc SetupRemoveFromDiskSpaceList*(P1: HDSKSPC, P2: PCSTR, P3: UINT, P4: PVOID, P5: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupRemoveFromDiskSpaceListA".}
  proc SetupRemoveFromSourceList*(P1: DWORD, P2: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupRemoveFromSourceListA".}
  proc SetupRemoveInstallSectionFromDiskSpaceList*(P1: HDSKSPC, P2: HINF, P3: HINF, P4: PCSTR, P5: PVOID, P6: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupRemoveInstallSectionFromDiskSpaceListA".}
  proc SetupRemoveSectionFromDiskSpaceList*(P1: HDSKSPC, P2: HINF, P3: HINF, P4: PCSTR, P5: UINT, P6: PVOID, P7: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupRemoveSectionFromDiskSpaceListA".}
  proc SetupRenameError*(P1: HWND, P2: PCSTR, P3: PCSTR, P4: PCSTR, P5: UINT, P6: DWORD): UINT {.winapi, dynlib: "setupapi", importc: "SetupRenameErrorA".}
  proc SetupScanFileQueue*(P1: HSPFILEQ, P2: DWORD, P3: HWND, P4: PSP_FILE_CALLBACK_A, P5: PVOID, P6: PDWORD): BOOL {.winapi, dynlib: "setupapi", importc: "SetupScanFileQueueA".}
  proc SetupSetDirectoryId*(P1: HINF, P2: DWORD, P3: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupSetDirectoryIdA".}
  proc SetupSetDirectoryIdEx*(P1: HINF, P2: DWORD, P3: PCSTR, P4: DWORD, P5: DWORD, P6: PVOID): BOOL {.winapi, dynlib: "setupapi", importc: "SetupSetDirectoryIdExA".}
  proc SetupSetFileQueueAlternatePlatform*(P1: HSPFILEQ, P2: PSP_ALTPLATFORM_INFO, P3: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupSetFileQueueAlternatePlatformA".}
  proc SetupSetPlatformPathOverride*(P1: PCSTR): BOOL {.winapi, dynlib: "setupapi", importc: "SetupSetPlatformPathOverrideA".}
  proc SetupSetSourceList*(P1: DWORD, P2: ptr PCSTR, P3: UINT): BOOL {.winapi, dynlib: "setupapi", importc: "SetupSetSourceListA".}

# shell/shlobj.nim

const
  # SLR_FLAGS* = enum
  # SLR_NO_UI* = 1
  # SLR_ANY_MATCH* = 2
  # SLR_UPDATE* = 4
  # SLR_NOUPDATE* = 8
  # SLR_NOSEARCH* = 16
  # SLR_NOTRACK* = 32
  # SLR_NOLINKINFO* = 64
  # SLR_INVOKE_MSI* = 128
  # SLGP_FLAGS* = enum
  # SLGP_SHORTPATH* = 1
  # SLGP_UNCPRIORITY* = 2
  # SLGP_RAWPATH* = 4
  # FOLDERFLAGS* = enum
  # FWF_AUTOARRANGE* = 1
  # FWF_ABBREVIATEDNAMES* = 2
  # FWF_SNAPTOGRID* = 4
  # FWF_OWNERDATA* = 8
  # FWF_BESTFITWINDOW* = 16
  # FWF_DESKTOP* = 32
  # FWF_SINGLESEL* = 64
  # FWF_NOSUBFOLDERS* = 128
  # FWF_TRANSPARENT* = 256
  # FWF_NOCLIENTEDGE* = 512
  # FWF_NOSCROLL* = 0x400
  # FWF_ALIGNLEFT* = 0x800
  # FWF_SINGLECLICKACTIVATE* = 0x8000
  # SHGNO* = enum
  SHGDN_NORMAL* = 0
  SHGDN_INFOLDER* = 1
  SHGDN_FOREDITING* = 0x1000
  SHGDN_INCLUDE_NONFILESYS* = 0x2000
  SHGDN_FORADDRESSBAR* = 0x4000
  SHGDN_FORPARSING* = 0x8000
  # SHCONTF* = enum
  SHCONTF_FOLDERS* = 32
  SHCONTF_NONFOLDERS* = 64
  SHCONTF_INCLUDEHIDDEN* = 128
  SHCONTF_INIT_ON_FIRST_NEXT* = 256
  SHCONTF_NETPRINTERSRCH* = 512
  SHCONTF_SHAREABLE* = 1024
  SHCONTF_STORAGE* = 2048
  # FD_FLAGS* = enum
  FD_CLSID* = 1
  FD_SIZEPOINT* = 2
  FD_ATTRIBUTES* = 4
  FD_CREATETIME* = 8
  FD_ACCESSTIME* = 16
  FD_WRITESTIME* = 32
  FD_FILESIZE* = 64
  FD_LINKUI* = 0x8000
  # SHGFP_TYPE* = enum
  SHGFP_TYPE_CURRENT* = 0
  SHGFP_TYPE_DEFAULT* = 1
  # FOLDERVIEWMODE* = enum
  # FVM_ICON* = 1
  # FVM_SMALLICON* = 2
  # FVM_LIST* = 3
  # FVM_DETAILS* = 4
  # SVUIA_STATUS* = enum
  # SVUIA_DEACTIVATE* = 0
  # SVUIA_ACTIVATE_NOFOCUS* = 1
  # SVUIA_ACTIVATE_FOCUS* = 2
  # SVUIA_INPLACEACTIVATE* = 3

const
  MAX_COLUMN_NAME_LEN* = 80
  MAX_COLUMN_DESC_LEN* = 128

type
  CIDA* {.final, pure.} = object
    cidl*: UINT
    aoffset*: array[1, UINT]
  LPIDA* = ptr CIDA
  SHITEMID* {.final, pure.} = object
    cb*: USHORT
    abID*: array[1, BYTE]
  LPSHITEMID* = ptr SHITEMID
  LPCSHITEMID* = ptr SHITEMID
  ITEMIDLIST* {.final, pure.} = object
    mkid*: SHITEMID
  LPITEMIDLIST* = ptr ITEMIDLIST
  LPCITEMIDLIST* = ptr ITEMIDLIST
  BFFCALLBACK* = proc (P1: HWND, P2: UINT, P3: LPARAM, P4: LPARAM): int32 {.stdcall.}
  BROWSEINFOA* {.final, pure.} = object
    hwndOwner*: HWND
    pidlRoot*: LPCITEMIDLIST
    pszDisplayName*: LPSTR
    lpszTitle*: LPCSTR
    ulFlags*: UINT
    lpfn*: BFFCALLBACK
    lParam*: LPARAM
    iImage*: int32
  PBROWSEINFOA* = ptr BROWSEINFOA
  LPBROWSEINFOA* = ptr BROWSEINFOA
  BROWSEINFOW* {.final, pure.} = object
    hwndOwner*: HWND
    pidlRoot*: LPCITEMIDLIST
    pszDisplayName*: LPWSTR
    lpszTitle*: LPCWSTR
    ulFlags*: UINT
    lpfn*: BFFCALLBACK
    lParam*: LPARAM
    iImage*: int32
  PBROWSEINFOW* = ptr BROWSEINFOW
  LPBROWSEINFOW* = ptr BROWSEINFOW
  CMINVOKECOMMANDINFO* {.final, pure.} = object
    cbSize*: DWORD
    fMask*: DWORD
    hwnd*: HWND
    lpVerb*: LPCSTR
    lpParameters*: LPCSTR
    lpDirectory*: LPCSTR
    nShow*: int32
    dwHotKey*: DWORD
    hIcon*: HANDLE
  LPCMINVOKECOMMANDINFO* = ptr CMINVOKECOMMANDINFO
  DROPFILES* {.final, pure.} = object
    pFiles*: DWORD
    pt*: POINT
    fNC*: BOOL
    fWide*: BOOL
  LPDROPFILES* = ptr DROPFILES
  STRRET_UNION1* {.final, union, pure.} = object
    pOleStr*: LPWSTR
    uOffset*: UINT
    cStr*: array[MAX_PATH, char]
  STRRET* {.final, pure.} = object
    uType*: UINT
    u1*: STRRET_UNION1
  LPSTRRET* = ptr STRRET
  FILEDESCRIPTORA* {.final, pure.} = object
    dwFlags*: DWORD
    clsid*: CLSID
    sizel*: SIZEL
    pointl*: POINTL
    dwFileAttributes*: DWORD
    ftCreationTime*: FILETIME
    ftLastAccessTime*: FILETIME
    ftLastWriteTime*: FILETIME
    nFileSizeHigh*: DWORD
    nFileSizeLow*: DWORD
    cFileName*: array[MAX_PATH, CHAR]
  LPFILEDESCRIPTORA* = ptr FILEDESCRIPTORA
  FILEDESCRIPTORW* {.final, pure.} = object
    dwFlags*: DWORD
    clsid*: CLSID
    sizel*: SIZEL
    pointl*: POINTL
    dwFileAttributes*: DWORD
    ftCreationTime*: FILETIME
    ftLastAccessTime*: FILETIME
    ftLastWriteTime*: FILETIME
    nFileSizeHigh*: DWORD
    nFileSizeLow*: DWORD
    cFileName*: array[MAX_PATH, WCHAR]
  LPFILEDESCRIPTORW* = ptr FILEDESCRIPTORW
  FILEGROUPDESCRIPTORA* {.final, pure.} = object
    cItems*: UINT
    fgd*: array[1, FILEDESCRIPTORA]
  LPFILEGROUPDESCRIPTORA* = ptr FILEGROUPDESCRIPTORA
  FILEGROUPDESCRIPTORW* {.final, pure.} = object
    cItems*: UINT
    fgd*: array[1, FILEDESCRIPTORW]
  LPFILEGROUPDESCRIPTORW* = ptr FILEGROUPDESCRIPTORW
  LPVIEWSETTINGS* = PBYTE
  FOLDERSETTINGS* {.final, pure.} = object
    ViewMode*: UINT
    fFlags*: UINT
  LPFOLDERSETTINGS* = ptr FOLDERSETTINGS
  LPCFOLDERSETTINGS* = ptr FOLDERSETTINGS
  FVSHOWINFO* {.final, pure.} = object
    cbSize*: DWORD
    hwndOwner*: HWND
    iShow*: int32
    dwFlags*: DWORD
    rect*: RECT
    punkRel*: LPUNKNOWN
    strNewFile*: array[MAX_PATH, OLECHAR]
  LPFVSHOWINFO* = ptr FVSHOWINFO
  NRESARRAY* {.final, pure.} = object
    cItems*: UINT
    nr*: array[1, NETRESOURCE]
  LPNRESARRAY* = ptr NRESARRAY

const
  SBSC_HIDE* = 0
  SBSC_SHOW* = 1
  SBSC_TOGGLE* = 2
  SBSC_QUERY* = 3
  SBCMDID_ENABLESHOWTREE* = 0
  SBCMDID_SHOWCONTROL* = 1
  SBCMDID_CANCELNAVIGATION* = 2
  SBCMDID_MAYSAVECHANGES* = 3
  SBCMDID_SETHLINKFRAME* = 4
  SBCMDID_ENABLESTOP* = 5
  SBCMDID_OPTIONS* = 6

type
  EXTRASEARCH* {.final, pure.} = object
    guidSearch*: GUID
    wszFriendlyName*: array[80, WCHAR]
    wszUrl*: array[2084, WCHAR]
  LPEXTRASEARCH* = ptr EXTRASEARCH
  SHCOLSTATEF* = DWORD
  SHCOLUMNID* {.final, pure.} = object
    fmtid*: GUID
    pid*: DWORD
  LPSHCOLUMNID* = ptr SHCOLUMNID
  LPCSHCOLUMNID* = ptr SHCOLUMNID
  SHELLDETAILS* {.final, pure.} = object
    fmt*: int32
    cxChar*: int32
    str*: STRRET
  LPSHELLDETAILS* = ptr SHELLDETAILS
  PERSIST_FOLDER_TARGET_INFO* {.final, pure.} = object
    pidlTargetFolder*: LPITEMIDLIST
    szTargetParsingName*: array[MAX_PATH, WCHAR]
    szNetworkProvider*: array[MAX_PATH, WCHAR]
    dwAttributes*: DWORD
    csidl*: int32

type
  IEnumIDList* {.pure.} = object
    lpVtbl*: ptr IEnumIDListVtbl
  IEnumIDListVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumIDList, P1: ULONG, P2: ptr LPITEMIDLIST, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumIDList, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumIDList): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumIDList, P1: ptr ptr IEnumIDList): HRESULT {.stdcall.}
  LPENUMIDLIST* = ptr IEnumIDList
  IObjMgr* {.pure.} = object
    lpVtbl*: ptr IObjMgrVtbl
  IObjMgrVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Append*: proc(self: ptr IObjMgr, P1: ptr IUnknown): HRESULT {.stdcall.}
    Remove*: proc(self: ptr IObjMgr, P1: ptr IUnknown): HRESULT {.stdcall.}
  IContextMenu* {.pure.} = object
    lpVtbl*: ptr IContextMenuVtbl
  IContextMenuVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    QueryContextMenu*: proc(self: ptr IContextMenu, P1: HMENU, P2: UINT, P3: UINT, P4: UINT, P5: UINT): HRESULT {.stdcall.}
    InvokeCommand*: proc(self: ptr IContextMenu, P1: LPCMINVOKECOMMANDINFO): HRESULT {.stdcall.}
    GetCommandString*: proc(self: ptr IContextMenu, P1: UINT, P2: UINT, P3: PUINT, P4: LPSTR, P5: UINT): HRESULT {.stdcall.}
  LPCONTEXTMENU* = ptr IContextMenu
  IContextMenu2* {.pure.} = object
    lpVtbl*: ptr IContextMenu2Vtbl
  IContextMenu2Vtbl* {.pure, inheritable.} = object of IContextMenuVtbl
    HandleMenuMsg*: proc(self: ptr IContextMenu2, P1: UINT, P2: WPARAM, P3: LPARAM): HRESULT {.stdcall.}
  LPCONTEXTMENU2* = ptr IContextMenu2

type
  SHCOLUMNINIT* {.final, pure.} = object
    dwFlags*: ULONG
    dwReserved*: ULONG
    wszFolder*: array[MAX_PATH, WCHAR]
  LPSHCOLUMNINIT* = ptr SHCOLUMNINIT
  LPCSHCOLUMNINIT* = ptr SHCOLUMNINIT
  SHCOLUMNDATA* {.final, pure.} = object
    dwFlags*: ULONG
    dwFileAttributes*: DWORD
    dwReserved*: ULONG
    pwszExt*: ptr WCHAR
    wszFile*: array[MAX_PATH, WCHAR]
  LPSHCOLUMNDATA* = ptr SHCOLUMNDATA
  LPCSHCOLUMNDATA* = ptr SHCOLUMNDATA
  SHCOLUMNINFO* {.final, pure.} = object
    scid*: SHCOLUMNID
    vt*: VARTYPE
    fmt*: DWORD
    cChars*: UINT
    csFlags*: DWORD
    wszTitle*: array[MAX_COLUMN_NAME_LEN, WCHAR]
    wszDescription*: array[MAX_COLUMN_DESC_LEN, WCHAR]
  LPSHCOLUMNINFO* = ptr SHCOLUMNINFO
  LPCSHCOLUMNINFO* = ptr SHCOLUMNINFO
  IColumnProvider* {.pure.} = object
    lpVtbl*: ptr IColumnProviderVtbl
  IColumnProviderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IColumnProvider, P1: LPCSHCOLUMNINIT): HRESULT {.stdcall.}
    GetColumnInfo*: proc(self: ptr IColumnProvider, P1: DWORD, P2: ptr SHCOLUMNINFO): HRESULT {.stdcall.}
    GetItemData*: proc(self: ptr IColumnProvider, P1: LPCSHCOLUMNID, P2: LPCSHCOLUMNDATA, P3: ptr VARIANT): HRESULT {.stdcall.}

type
  IQueryInfo* {.pure.} = object
    lpVtbl*: ptr IQueryInfoVtbl
  IQueryInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetInfoTip*: proc(self: ptr IQueryInfo, P1: DWORD, P2: ptr ptr WCHAR): HRESULT {.stdcall.}
    GetInfoFlags*: proc(self: ptr IQueryInfo, P1: ptr DWORD): HRESULT {.stdcall.}
  IShellExtInit* {.pure.} = object
    lpVtbl*: ptr IShellExtInitVtbl
  IShellExtInitVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IShellExtInit, P1: LPCITEMIDLIST, P2: LPDATAOBJECT, P3: HKEY): HRESULT {.stdcall.}
  LPSHELLEXTINIT* = ptr IShellExtInit
  IShellPropSheetExt* {.pure.} = object
    lpVtbl*: ptr IShellPropSheetExtVtbl
  IShellPropSheetExtVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AddPages*: proc(self: ptr IShellPropSheetExt, P1: LPFNADDPROPSHEETPAGE, P2: LPARAM): HRESULT {.stdcall.}
    ReplacePage*: proc(self: ptr IShellPropSheetExt, P1: UINT, P2: LPFNADDPROPSHEETPAGE, P3: LPARAM): HRESULT {.stdcall.}
  LPSHELLPROPSHEETEXT* = ptr IShellPropSheetExt
  IExtractIconA* {.pure.} = object
    lpVtbl*: ptr IExtractIconAVtbl
  IExtractIconAVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetIconLocation*: proc(self: ptr IExtractIconA, P1: UINT, P2: LPSTR, P3: UINT, P4: ptr int32, P5: PUINT): HRESULT {.stdcall.}
    Extract*: proc(self: ptr IExtractIconA, P1: LPCSTR, P2: UINT, P3: ptr HICON, P4: ptr HICON, P5: UINT): HRESULT {.stdcall.}
  LPEXTRACTICONA* = ptr IExtractIconA
  IExtractIconW* {.pure.} = object
    lpVtbl*: ptr IExtractIconWVtbl
  IExtractIconWVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetIconLocation*: proc(self: ptr IExtractIconW, P1: UINT, P2: LPWSTR, P3: UINT, P4: ptr int32, P5: PUINT): HRESULT {.stdcall.}
    Extract*: proc(self: ptr IExtractIconW, P1: LPCWSTR, P2: UINT, P3: ptr HICON, P4: ptr HICON, P5: UINT): HRESULT {.stdcall.}
  LPEXTRACTICONW* = ptr IExtractIconW

when not defined(winansi):
  type
    IExtractIcon* = IExtractIconW
    LPEXTRACTICON* = LPEXTRACTICONW

else:
  type
    IExtractIcon* = IExtractIconA
    LPEXTRACTICON* = LPEXTRACTICONA

type
  IShellLinkA* {.pure.} = object
    lpVtbl*: ptr IShellLinkAVtbl
  IShellLinkAVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetPath*: proc(self: ptr IShellLinkA, P1: LPSTR, P2: int32, P3: ptr WIN32_FIND_DATAA, P4: DWORD): HRESULT {.stdcall.}
    GetIDList*: proc(self: ptr IShellLinkA, P1: ptr LPITEMIDLIST): HRESULT {.stdcall.}
    SetIDList*: proc(self: ptr IShellLinkA, P1: LPCITEMIDLIST): HRESULT {.stdcall.}
    GetDescription*: proc(self: ptr IShellLinkA, P1: LPSTR, P2: int32): HRESULT {.stdcall.}
    SetDescription*: proc(self: ptr IShellLinkA, P1: LPCSTR): HRESULT {.stdcall.}
    GetWorkingDirectory*: proc(self: ptr IShellLinkA, P1: LPSTR, P2: int32): HRESULT {.stdcall.}
    SetWorkingDirectory*: proc(self: ptr IShellLinkA, P1: LPCSTR): HRESULT {.stdcall.}
    GetArguments*: proc(self: ptr IShellLinkA, P1: LPSTR, P2: int32): HRESULT {.stdcall.}
    SetArguments*: proc(self: ptr IShellLinkA, P1: LPCSTR): HRESULT {.stdcall.}
    GetHotkey*: proc(self: ptr IShellLinkA, P1: PWORD): HRESULT {.stdcall.}
    SetHotkey*: proc(self: ptr IShellLinkA, P1: WORD): HRESULT {.stdcall.}
    GetShowCmd*: proc(self: ptr IShellLinkA, P1: ptr int32): HRESULT {.stdcall.}
    SetShowCmd*: proc(self: ptr IShellLinkA, P1: int32): HRESULT {.stdcall.}
    GetIconLocation*: proc(self: ptr IShellLinkA, P1: LPSTR, P2: int32, P3: ptr int32): HRESULT {.stdcall.}
    SetIconLocation*: proc(self: ptr IShellLinkA, P1: LPCSTR, P2: int32): HRESULT {.stdcall.}
    SetRelativePath*: proc(self: ptr IShellLinkA, P1: LPCSTR, P2: DWORD): HRESULT {.stdcall.}
    Resolve*: proc(self: ptr IShellLinkA, P1: HWND, P2: DWORD): HRESULT {.stdcall.}
    SetPath*: proc(self: ptr IShellLinkA, P1: LPCSTR): HRESULT {.stdcall.}
  IShellLinkW* {.pure.} = object
    lpVtbl*: ptr IShellLinkWVtbl
  IShellLinkWVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetPath*: proc(self: ptr IShellLinkW, P1: LPWSTR, P2: int32, P3: ptr WIN32_FIND_DATAW, P4: DWORD): HRESULT {.stdcall.}
    GetIDList*: proc(self: ptr IShellLinkW, P1: ptr LPITEMIDLIST): HRESULT {.stdcall.}
    SetIDList*: proc(self: ptr IShellLinkW, P1: LPCITEMIDLIST): HRESULT {.stdcall.}
    GetDescription*: proc(self: ptr IShellLinkW, P1: LPWSTR, P2: int32): HRESULT {.stdcall.}
    SetDescription*: proc(self: ptr IShellLinkW, P1: LPCWSTR): HRESULT {.stdcall.}
    GetWorkingDirectory*: proc(self: ptr IShellLinkW, P1: LPWSTR, P2: int32): HRESULT {.stdcall.}
    SetWorkingDirectory*: proc(self: ptr IShellLinkW, P1: LPCWSTR): HRESULT {.stdcall.}
    GetArguments*: proc(self: ptr IShellLinkW, P1: LPWSTR, P2: int32): HRESULT {.stdcall.}
    SetArguments*: proc(self: ptr IShellLinkW, P1: LPCWSTR): HRESULT {.stdcall.}
    GetHotkey*: proc(self: ptr IShellLinkW, P1: PWORD): HRESULT {.stdcall.}
    SetHotkey*: proc(self: ptr IShellLinkW, P1: WORD): HRESULT {.stdcall.}
    GetShowCmd*: proc(self: ptr IShellLinkW, P1: ptr int32): HRESULT {.stdcall.}
    SetShowCmd*: proc(self: ptr IShellLinkW, P1: int32): HRESULT {.stdcall.}
    GetIconLocation*: proc(self: ptr IShellLinkW, P1: LPWSTR, P2: int32, P3: ptr int32): HRESULT {.stdcall.}
    SetIconLocation*: proc(self: ptr IShellLinkW, P1: LPCWSTR, P2: int32): HRESULT {.stdcall.}
    SetRelativePath*: proc(self: ptr IShellLinkW, P1: LPCWSTR, P2: DWORD): HRESULT {.stdcall.}
    Resolve*: proc(self: ptr IShellLinkW, P1: HWND, P2: DWORD): HRESULT {.stdcall.}
    SetPath*: proc(self: ptr IShellLinkW, P1: LPCWSTR): HRESULT {.stdcall.}
  IShellFolder* {.pure.} = object
    lpVtbl*: ptr IShellFolderVtbl
  IShellFolderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ParseDisplayName*: proc(self: ptr IShellFolder, P1: HWND, P2: LPBC, P3: LPOLESTR, P4: PULONG, P5: ptr LPITEMIDLIST, P6: PULONG): HRESULT {.stdcall.}
    EnumObjects*: proc(self: ptr IShellFolder, P1: HWND, P2: DWORD, P3: ptr LPENUMIDLIST): HRESULT {.stdcall.}
    BindToObject*: proc(self: ptr IShellFolder, P1: LPCITEMIDLIST, P2: LPBC, P3: REFIID, P4: ptr PVOID): HRESULT {.stdcall.}
    BindToStorage*: proc(self: ptr IShellFolder, P1: LPCITEMIDLIST, P2: LPBC, P3: REFIID, P4: ptr PVOID): HRESULT {.stdcall.}
    CompareIDs*: proc(self: ptr IShellFolder, P1: LPARAM, P2: LPCITEMIDLIST, P3: LPCITEMIDLIST): HRESULT {.stdcall.}
    CreateViewObject*: proc(self: ptr IShellFolder, P1: HWND, P2: REFIID, P3: ptr PVOID): HRESULT {.stdcall.}
    GetAttributesOf*: proc(self: ptr IShellFolder, P1: UINT, P2: ptr LPCITEMIDLIST, P3: PULONG): HRESULT {.stdcall.}
    GetUIObjectOf*: proc(self: ptr IShellFolder, P1: HWND, P2: UINT, P3: ptr LPCITEMIDLIST, P4: REFIID, P5: PUINT, P6: ptr PVOID): HRESULT {.stdcall.}
    GetDisplayNameOf*: proc(self: ptr IShellFolder, P1: LPCITEMIDLIST, P2: DWORD, P3: LPSTRRET): HRESULT {.stdcall.}
    SetNameOf*: proc(self: ptr IShellFolder, P1: HWND, P2: LPCITEMIDLIST, P3: LPCOLESTR, P4: DWORD, P5: ptr LPITEMIDLIST): HRESULT {.stdcall.}
  LPSHELLFOLDER* = ptr IShellFolder

type
  IEnumExtraSearch* {.pure.} = object
    lpVtbl*: ptr IEnumExtraSearchVtbl
  IEnumExtraSearchVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumExtraSearch, P1: ULONG, P2: ptr LPEXTRASEARCH, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumExtraSearch, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumExtraSearch): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumExtraSearch, P1: ptr ptr IEnumExtraSearch): HRESULT {.stdcall.}
  LPENUMEXTRASEARCH* = ptr IEnumExtraSearch
  IShellFolder2* {.pure.} = object
    lpVtbl*: ptr IShellFolder2Vtbl
  IShellFolder2Vtbl* {.pure, inheritable.} = object of IShellFolderVtbl
    GetDefaultSearchGUID*: proc(self: ptr IShellFolder2, P1: ptr GUID): HRESULT {.stdcall.}
    EnumSearches*: proc(self: ptr IShellFolder2, P1: ptr ptr IEnumExtraSearch): HRESULT {.stdcall.}
    GetDefaultColumn*: proc(self: ptr IShellFolder2, P1: DWORD, P2: ptr ULONG, P3: ptr ULONG): HRESULT {.stdcall.}
    GetDefaultColumnState*: proc(self: ptr IShellFolder2, P1: UINT, P2: ptr SHCOLSTATEF): HRESULT {.stdcall.}
    GetDetailsEx*: proc(self: ptr IShellFolder2, P1: LPCITEMIDLIST, P2: ptr SHCOLUMNID, P3: ptr VARIANT): HRESULT {.stdcall.}
    GetDetailsOf*: proc(self: ptr IShellFolder2, P1: LPCITEMIDLIST, P2: UINT, P3: ptr SHELLDETAILS): HRESULT {.stdcall.}
    MapColumnToSCID*: proc(self: ptr IShellFolder2, P1: UINT, P2: ptr SHCOLUMNID): HRESULT {.stdcall.}
  LPSHELLFOLDER2* = ptr IShellFolder2

type
  ICopyHook* {.pure.} = object
    lpVtbl*: ptr ICopyHookVtbl
  ICopyHookVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CopyCallback*: proc(self: ptr ICopyHook, P1: HWND, P2: UINT, P3: UINT, P4: LPCSTR, P5: DWORD, P6: LPCSTR, P7: DWORD): UINT {.stdcall.}
  LPCOPYHOOK* = ptr ICopyHook
  IFileViewerSite* {.pure.} = object
    lpVtbl*: ptr IFileViewerSiteVtbl
  IFileViewerSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetPinnedWindow*: proc(self: ptr IFileViewerSite, P1: HWND): HRESULT {.stdcall.}
    GetPinnedWindow*: proc(self: ptr IFileViewerSite, P1: ptr HWND): HRESULT {.stdcall.}
  LPFILEVIEWERSITE* = ptr IFileViewerSite
  IFileViewer* {.pure.} = object
    lpVtbl*: ptr IFileViewerVtbl
  IFileViewerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ShowInitialize*: proc(self: ptr IFileViewer, P1: LPFILEVIEWERSITE): HRESULT {.stdcall.}
    Show*: proc(self: ptr IFileViewer, P1: LPFVSHOWINFO): HRESULT {.stdcall.}
    PrintTo*: proc(self: ptr IFileViewer, P1: LPSTR, P2: BOOL): HRESULT {.stdcall.}
  LPFILEVIEWER* = ptr IFileViewer
  IFileSystemBindData* {.pure.} = object
    lpVtbl*: ptr IFileSystemBindDataVtbl
  IFileSystemBindDataVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetFindData*: proc(self: ptr IFileSystemBindData, P1: ptr WIN32_FIND_DATAW): HRESULT {.stdcall.}
    GetFindData*: proc(self: ptr IFileSystemBindData, P1: ptr WIN32_FIND_DATAW): HRESULT {.stdcall.}
  IPersistFolder* {.pure.} = object
    lpVtbl*: ptr IPersistFolderVtbl
  IPersistFolderVtbl* {.pure, inheritable.} = object of IPersistVtbl
    Initialize*: proc(self: ptr IPersistFolder, P1: LPCITEMIDLIST): HRESULT {.stdcall.}
  LPPERSISTFOLDER* = ptr IPersistFolder

type
  IPersistFolder2* {.pure.} = object
    lpVtbl*: ptr IPersistFolder2Vtbl
  IPersistFolder2Vtbl* {.pure, inheritable.} = object of IPersistFolderVtbl
    GetCurFolder*: proc(self: ptr IPersistFolder2, P1: ptr LPITEMIDLIST): HRESULT {.stdcall.}
  LPPERSISTFOLDER2* = ptr IPersistFolder2

type
  IPersistFolder3* {.pure.} = object
    lpVtbl*: ptr IPersistFolder3Vtbl
  IPersistFolder3Vtbl* {.pure, inheritable.} = object of IPersistFolder2Vtbl
    InitializeEx*: proc(self: ptr IPersistFolder3, P1: ptr IBindCtx, P2: LPCITEMIDLIST, P3: ptr PERSIST_FOLDER_TARGET_INFO): HRESULT {.stdcall.}
    GetFolderTargetInfo*: proc(self: ptr IPersistFolder3, P1: ptr PERSIST_FOLDER_TARGET_INFO): HRESULT {.stdcall.}
  LPPERSISTFOLDER3* = ptr IPersistFolder3

type
  LPSHELLBROWSER* = ptr IShellBrowser
  LPSHELLVIEW* = ptr IShellView
  IShellBrowser* {.pure.} = object
    lpVtbl*: ptr IShellBrowserVtbl
  IShellBrowserVtbl* {.pure, inheritable.} = object of IOleWindowVtbl
    InsertMenusSB*: proc(self: ptr IShellBrowser, P1: HMENU, P2: LPOLEMENUGROUPWIDTHS): HRESULT {.stdcall.}
    SetMenuSB*: proc(self: ptr IShellBrowser, P1: HMENU, P2: HOLEMENU, P3: HWND): HRESULT {.stdcall.}
    RemoveMenusSB*: proc(self: ptr IShellBrowser, P1: HMENU): HRESULT {.stdcall.}
    SetStatusTextSB*: proc(self: ptr IShellBrowser, P1: LPCOLESTR): HRESULT {.stdcall.}
    EnableModelessSB*: proc(self: ptr IShellBrowser, P1: BOOL): HRESULT {.stdcall.}
    TranslateAcceleratorSB*: proc(self: ptr IShellBrowser, P1: LPMSG, P2: WORD): HRESULT {.stdcall.}
    BrowseObject*: proc(self: ptr IShellBrowser, P1: LPCITEMIDLIST, P2: UINT): HRESULT {.stdcall.}
    GetViewStateStream*: proc(self: ptr IShellBrowser, P1: DWORD, P2: ptr LPSTREAM): HRESULT {.stdcall.}
    GetControlWindow*: proc(self: ptr IShellBrowser, P1: UINT, P2: ptr HWND): HRESULT {.stdcall.}
    SendControlMsg*: proc(self: ptr IShellBrowser, P1: UINT, P2: UINT, P3: WPARAM, P4: LPARAM, P5: ptr LRESULT): HRESULT {.stdcall.}
    QueryActiveShellView*: proc(self: ptr IShellBrowser, P1: ptr LPSHELLVIEW): HRESULT {.stdcall.}
    OnViewWindowActive*: proc(self: ptr IShellBrowser, P1: LPSHELLVIEW): HRESULT {.stdcall.}
    SetToolbarItems*: proc(self: ptr IShellBrowser, P1: LPTBBUTTON, P2: UINT, P3: UINT): HRESULT {.stdcall.}
  IShellView* {.pure.} = object
    lpVtbl*: ptr IShellViewVtbl
  IShellViewVtbl* {.pure, inheritable.} = object of IOleWindowVtbl
    TranslateAccelerator*: proc(self: ptr IShellView, P1: LPMSG): HRESULT {.stdcall.}
    EnableModeless*: proc(self: ptr IShellView, P1: BOOL): HRESULT {.stdcall.}
    UIActivate*: proc(self: ptr IShellView, P1: UINT): HRESULT {.stdcall.}
    Refresh*: proc(self: ptr IShellView): HRESULT {.stdcall.}
    CreateViewWindow*: proc(self: ptr IShellView, P1: ptr IShellView, P2: LPCFOLDERSETTINGS, P3: LPSHELLBROWSER, P4: ptr RECT, P5: ptr HWND): HRESULT {.stdcall.}
    DestroyViewWindow*: proc(self: ptr IShellView): HRESULT {.stdcall.}
    GetCurrentInfo*: proc(self: ptr IShellView, P1: LPFOLDERSETTINGS): HRESULT {.stdcall.}
    AddPropertySheetPages*: proc(self: ptr IShellView, P1: DWORD, P2: LPFNADDPROPSHEETPAGE, P3: LPARAM): HRESULT {.stdcall.}
    SaveViewState*: proc(self: ptr IShellView): HRESULT {.stdcall.}
    SelectItem*: proc(self: ptr IShellView, P1: LPCITEMIDLIST, P2: UINT): HRESULT {.stdcall.}
    GetItemObject*: proc(self: ptr IShellView, P1: UINT, P2: REFIID, P3: ptr PVOID): HRESULT {.stdcall.}
  ICommDlgBrowser* {.pure.} = object
    lpVtbl*: ptr ICommDlgBrowserVtbl
  ICommDlgBrowserVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnDefaultCommand*: proc(self: ptr ICommDlgBrowser, P1: ptr IShellView): HRESULT {.stdcall.}
    OnStateChange*: proc(self: ptr ICommDlgBrowser, P1: ptr IShellView, P2: ULONG): HRESULT {.stdcall.}
    IncludeObject*: proc(self: ptr ICommDlgBrowser, P1: ptr IShellView, P2: LPCITEMIDLIST): HRESULT {.stdcall.}
  LPCOMMDLGBROWSER* = ptr ICommDlgBrowser
  SHELLVIEWID* = GUID
  SV2CVW2_PARAMS* {.final, pure.} = object
    cbSize*: DWORD
    psvPrev*: ptr IShellView
    pfs*: ptr FOLDERSETTINGS
    psbOwner*: ptr IShellBrowser
    prcView*: ptr RECT
    pvid*: ptr SHELLVIEWID
    hwndView*: HWND
  LPSV2CVW2_PARAMS* = ptr SV2CVW2_PARAMS
  IShellView2* {.pure.} = object
    lpVtbl*: ptr IShellView2Vtbl
  IShellView2Vtbl* {.pure, inheritable.} = object of IShellViewVtbl
    GetView*: proc(self: ptr IShellView2, P1: ptr SHELLVIEWID, P2: ULONG): HRESULT {.stdcall.}
    CreateViewWindow2*: proc(self: ptr IShellView2, P1: LPSV2CVW2_PARAMS): HRESULT {.stdcall.}
  IShellExecuteHookA* {.pure.} = object
    lpVtbl*: ptr IShellExecuteHookAVtbl
  IShellExecuteHookAVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Execute*: proc(self: ptr IShellExecuteHookA, P1: LPSHELLEXECUTEINFOA): HRESULT {.stdcall.}
  IShellExecuteHookW* {.pure.} = object
    lpVtbl*: ptr IShellExecuteHookWVtbl
  IShellExecuteHookWVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Execute*: proc(self: ptr IShellExecuteHookW, P1: LPSHELLEXECUTEINFOW): HRESULT {.stdcall.}
  IShellIcon* {.pure.} = object
    lpVtbl*: ptr IShellIconVtbl
  IShellIconVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetIconOf*: proc(self: ptr IShellIcon, P1: LPCITEMIDLIST, P2: UINT, P3: PINT): HRESULT {.stdcall.}
  LPSHELLICON* = ptr IShellIcon
  SHELLFLAGSTATE* {.final, pure.} = object
    bitflags*: int16
  LPSHELLFLAGSTATE* = ptr SHELLFLAGSTATE

const
  SSF_SHOWALLOBJECTS* = 0x1
  SSF_SHOWEXTENSIONS* = 0x2
  SSF_SHOWCOMPCOLOR* = 0x8
  SSF_SHOWSYSFILES* = 0x20
  SSF_DOUBLECLICKINWEBVIEW* = 0x80
  SSF_SHOWATTRIBCOL* = 0x100
  SSF_DESKTOPHTML* = 0x200
  SSF_WIN95CLASSIC* = 0x400
  SSF_DONTPRETTYPATH* = 0x800
  SSF_MAPNETDRVBUTTON* = 0x1000
  SSF_SHOWINFOTIP* = 0x2000
  SSF_HIDEICONS* = 0x4000
  SSF_NOCONFIRMRECYCLE* = 0x8000

type
  IShellIconOverlayIdentifier* {.pure.} = object
    lpVtbl*: ptr IShellIconOverlayIdentifierVtbl
  IShellIconOverlayIdentifierVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    IsMemberOf*: proc(self: ptr IShellIconOverlayIdentifier, P1: LPCWSTR, P2: DWORD): HRESULT {.stdcall.}
    GetOverlayInfo*: proc(self: ptr IShellIconOverlayIdentifier, P1: LPWSTR, P2: int32, P3: ptr int32, P4: ptr DWORD): HRESULT {.stdcall.}
    GetPriority*: proc(self: ptr IShellIconOverlayIdentifier, P1: ptr int32): HRESULT {.stdcall.}

const
  ISIOI_ICONFILE* = 0x00000001
  ISIOI_ICONINDEX* = 0x00000002

type
  SHELLSTATE* {.final, pure.} = object
  LPSHELLSTATE* = ptr SHELLSTATE

type
  SHDRAGIMAGE* {.final, pure.} = object
    sizeDragImage*: SIZE
    ptOffset*: POINT
    hbmpDragImage*: HBITMAP
    crColorKey*: COLORREF
  LPSHDRAGIMAGE* = ptr SHDRAGIMAGE
  IDragSourceHelper* {.pure.} = object
    lpVtbl*: ptr IDragSourceHelperVtbl
  IDragSourceHelperVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    InitializeFromBitmap*: proc(self: ptr IDragSourceHelper, pshdi: LPSHDRAGIMAGE, pDataObject: ptr IDataObject): HRESULT {.stdcall.}
    InitializeFromWindow*: proc(self: ptr IDragSourceHelper, hwnd: HWND, ppt: ptr POINT, pDataObject: ptr IDataObject): HRESULT {.stdcall.}
  IDropTargetHelper* {.pure.} = object
    lpVtbl*: ptr IDropTargetHelperVtbl
  IDropTargetHelperVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    DragEnter*: proc(self: ptr IDropTargetHelper, hwndTarget: HWND, pDataObject: ptr IDataObject, ppt: ptr POINT, dwEffect: DWORD): HRESULT {.stdcall.}
    DragLeave*: proc(self: ptr IDropTargetHelper): HRESULT {.stdcall.}
    DragOver*: proc(self: ptr IDropTargetHelper, ppt: ptr POINT, dwEffect: DWORD): HRESULT {.stdcall.}
    Drop*: proc(self: ptr IDropTargetHelper, pDataObject: ptr IDataObject, ppt: ptr POINT, dwEffect: DWORD): HRESULT {.stdcall.}
    Show*: proc(self: ptr IDropTargetHelper, fShow: BOOL): HRESULT {.stdcall.}

proc SHAddToRecentDocs*(P1: UINT, P2: PCVOID): void {.winapi, dynlib: "shell32", importc.}
proc SHBrowseForFolderA*(P1: PBROWSEINFOA): LPITEMIDLIST {.winapi, dynlib: "shell32", importc.}
proc SHBrowseForFolderW*(P1: PBROWSEINFOW): LPITEMIDLIST {.winapi, dynlib: "shell32", importc.}
proc SHChangeNotify*(P1: LONG, P2: UINT, P3: PCVOID, P4: PCVOID): void {.winapi, dynlib: "shell32", importc.}
proc SHGetDataFromIDListA*(P1: LPSHELLFOLDER, P2: LPCITEMIDLIST, P3: int32, P4: PVOID, P5: int32): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetDataFromIDListW*(P1: LPSHELLFOLDER, P2: LPCITEMIDLIST, P3: int32, P4: PVOID, P5: int32): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetDesktopFolder*(P1: ptr LPSHELLFOLDER): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetInstanceExplorer*(P1: ptr ptr IUnknown): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetMalloc*(P1: ptr LPMALLOC): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetPathFromIDListA*(P1: LPCITEMIDLIST, P2: LPSTR): BOOL {.winapi, dynlib: "shell32", importc.}
proc SHGetPathFromIDListW*(P1: LPCITEMIDLIST, P2: LPWSTR): BOOL {.winapi, dynlib: "shell32", importc.}
proc SHGetSpecialFolderLocation*(P1: HWND, P2: int32, P3: ptr LPITEMIDLIST): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHLoadInProc*(P1: REFCLSID): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetSpecialFolderPathA*(P1: HWND, P2: LPSTR, P3: int32, P4: BOOL): BOOL {.winapi, dynlib: "shell32", importc.}
proc SHGetSpecialFolderPathW*(P1: HWND, P2: LPWSTR, P3: int32, P4: BOOL): BOOL {.winapi, dynlib: "shell32", importc.}
proc SHGetFolderPathA*(P1: HWND, P2: int32, P3: HANDLE, P4: DWORD, P5: LPSTR): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetFolderPathW*(P1: HWND, P2: int32, P3: HANDLE, P4: DWORD, P5: LPWSTR): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetFolderLocation*(P1: HWND, P2: int32, P3: HANDLE, P4: DWORD, P5: ptr LPITEMIDLIST): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHCreateDirectoryExA*(P1: HWND, P2: LPCSTR, P3: LPSECURITY_ATTRIBUTES): INT {.winapi, dynlib: "shell32", importc.}
proc SHCreateDirectoryExW*(P1: HWND, P2: LPCWSTR, P3: LPSECURITY_ATTRIBUTES): INT {.winapi, dynlib: "shell32", importc.}
proc SHCreateItemFromParsingName*(P1: PCWSTR, P2: ptr IBindCtx, P3: REFIID, P4: ptr PVOID): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHBindToParent*(P1: LPCITEMIDLIST, P2: REFIID, P3: ptr ptr VOID, P4: ptr LPCITEMIDLIST): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetFolderPathAndSubDirA*(P1: HWND, P2: int32, P3: HANDLE, P4: DWORD, P5: LPCSTR, P6: LPSTR): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetFolderPathAndSubDirW*(P1: HWND, P2: int32, P3: HANDLE, P4: DWORD, P5: LPCWSTR, P6: LPWSTR): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetSettings*(P1: LPSHELLFLAGSTATE, P2: DWORD): void {.winapi, dynlib: "shell32", importc.}
proc SHGetSetSettings*(P1: LPSHELLSTATE, P2: DWORD, P3: BOOL): void {.winapi, dynlib: "shell32", importc.}
proc ILIsEqual*(P1: LPCITEMIDLIST, P2: LPCITEMIDLIST): BOOL {.winapi, dynlib: "shell32", importc.}
proc ILIsParent*(P1: LPCITEMIDLIST, P2: LPCITEMIDLIST, P3: BOOL): BOOL {.winapi, dynlib: "shell32", importc.}
proc ILRemoveLastID*(P1: LPITEMIDLIST): BOOL {.winapi, dynlib: "shell32", importc.}
proc ILLoadFromStream*(P1: ptr IStream, P2: ptr LPITEMIDLIST): HRESULT {.winapi, dynlib: "shell32", importc.}
proc ILSaveToStream*(P1: ptr IStream, P2: LPCITEMIDLIST): HRESULT {.winapi, dynlib: "shell32", importc.}
proc ILAppendID*(P1: LPITEMIDLIST, P2: LPCSHITEMID, P3: BOOL): LPITEMIDLIST {.winapi, dynlib: "shell32", importc.}
proc ILClone*(P1: LPCITEMIDLIST): LPITEMIDLIST {.winapi, dynlib: "shell32", importc.}
proc ILCloneFirst*(P1: LPCITEMIDLIST): LPITEMIDLIST {.winapi, dynlib: "shell32", importc.}
proc ILCombine*(P1: LPCITEMIDLIST, P2: LPCITEMIDLIST): LPITEMIDLIST {.winapi, dynlib: "shell32", importc.}
proc ILFindChild*(P1: LPCITEMIDLIST, P2: LPCITEMIDLIST): LPITEMIDLIST {.winapi, dynlib: "shell32", importc.}
proc ILFindLastID*(P1: LPCITEMIDLIST): LPITEMIDLIST {.winapi, dynlib: "shell32", importc.}
proc ILGetNext*(P1: LPCITEMIDLIST): LPITEMIDLIST {.winapi, dynlib: "shell32", importc.}
proc ILGetSize*(P1: LPCITEMIDLIST): UINT {.winapi, dynlib: "shell32", importc.}
proc ILFree*(P1: LPITEMIDLIST): void {.winapi, dynlib: "shell32", importc.}
proc SHCoCreateInstance*(P1: LPCWSTR, P2: REFCLSID, P3: ptr IUnknown, P4: REFIID, P5: ptr pointer): HRESULT {.winapi, dynlib: "shell32", importc.}

when not defined(winansi):
  type
    IShellExecuteHook* = IShellExecuteHookW
    IShellLink* = IShellLinkW
    BROWSEINFO* = BROWSEINFOW

  proc SHBrowseForFolder*(P1: PBROWSEINFOW): LPITEMIDLIST {.winapi, dynlib: "shell32", importc: "SHBrowseForFolderW".}
  proc SHGetDataFromIDList*(P1: LPSHELLFOLDER, P2: LPCITEMIDLIST, P3: int32, P4: PVOID, P5: int32): HRESULT {.winapi, dynlib: "shell32", importc: "SHGetDataFromIDListW".}
  proc SHGetPathFromIDList*(P1: LPCITEMIDLIST, P2: LPWSTR): BOOL {.winapi, dynlib: "shell32", importc: "SHGetPathFromIDListW".}
  proc SHGetSpecialFolderPath*(P1: HWND, P2: LPWSTR, P3: int32, P4: BOOL): BOOL {.winapi, dynlib: "shell32", importc: "SHGetSpecialFolderPathW".}
  proc SHGetFolderPath*(P1: HWND, P2: int32, P3: HANDLE, P4: DWORD, P5: LPWSTR): HRESULT {.winapi, dynlib: "shell32", importc: "SHGetFolderPathW".}
  proc SHCreateDirectoryEx*(P1: HWND, P2: LPCWSTR, P3: LPSECURITY_ATTRIBUTES): INT {.winapi, dynlib: "shell32", importc: "SHCreateDirectoryExW".}
  proc SHGetFolderPathAndSubDir*(P1: HWND, P2: int32, P3: HANDLE, P4: DWORD, P5: LPCWSTR, P6: LPWSTR): HRESULT {.winapi, dynlib: "shell32", importc: "SHGetFolderPathAndSubDirW".}

  type
    FILEDESCRIPTOR* = FILEDESCRIPTORW
    LPFILEDESCRIPTOR* = LPFILEDESCRIPTORW
    FILEGROUPDESCRIPTOR* = FILEGROUPDESCRIPTORW
    LPFILEGROUPDESCRIPTOR* = LPFILEGROUPDESCRIPTORW

else:
  type
    IShellExecuteHook* = IShellExecuteHookA
    IShellLink* = IShellLinkA
    BROWSEINFO* = BROWSEINFOA

  proc SHBrowseForFolder*(P1: PBROWSEINFOA): LPITEMIDLIST {.winapi, dynlib: "shell32", importc: "SHBrowseForFolderA".}
  proc SHGetDataFromIDList*(P1: LPSHELLFOLDER, P2: LPCITEMIDLIST, P3: int32, P4: PVOID, P5: int32): HRESULT {.winapi, dynlib: "shell32", importc: "SHGetDataFromIDListA".}
  proc SHGetPathFromIDList*(P1: LPCITEMIDLIST, P2: LPSTR): BOOL {.winapi, dynlib: "shell32", importc: "SHGetPathFromIDListA".}
  proc SHGetSpecialFolderPath*(P1: HWND, P2: LPSTR, P3: int32, P4: BOOL): BOOL {.winapi, dynlib: "shell32", importc: "SHGetSpecialFolderPathA".}
  proc SHGetFolderPath*(P1: HWND, P2: int32, P3: HANDLE, P4: DWORD, P5: LPSTR): HRESULT {.winapi, dynlib: "shell32", importc: "SHGetFolderPathA".}
  proc SHCreateDirectoryEx*(P1: HWND, P2: LPCSTR, P3: LPSECURITY_ATTRIBUTES): INT {.winapi, dynlib: "shell32", importc: "SHCreateDirectoryExA".}
  proc SHGetFolderPathAndSubDir*(P1: HWND, P2: int32, P3: HANDLE, P4: DWORD, P5: LPCSTR, P6: LPSTR): HRESULT {.winapi, dynlib: "shell32", importc: "SHGetFolderPathAndSubDirA".}

  type
    FILEDESCRIPTOR* = FILEDESCRIPTORA
    LPFILEDESCRIPTOR* = LPFILEDESCRIPTORA
    FILEGROUPDESCRIPTOR* = FILEGROUPDESCRIPTORA
    LPFILEGROUPDESCRIPTOR* = LPFILEGROUPDESCRIPTORA

type
  PBROWSEINFO* = ptr BROWSEINFO
  LPBROWSEINFO* = ptr BROWSEINFO

converter winim_converter_IEnumIDList*(x: ptr IEnumIDList): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IEnumIDList, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IEnumIDList): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IEnumIDList): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc Next*(self: ptr IEnumIDList, P1: ULONG, P2: ptr LPITEMIDLIST, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumIDList, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumIDList): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumIDList, P1: ptr ptr IEnumIDList): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IObjMgr*(x: ptr IObjMgr): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IObjMgr, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IObjMgr): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IObjMgr): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc Append*(self: ptr IObjMgr, P1: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.Append(self, P1)
proc Remove*(self: ptr IObjMgr, P1: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.Remove(self, P1)
converter winim_converter_IContextMenu*(x: ptr IContextMenu): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IContextMenu, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IContextMenu): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IContextMenu): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc QueryContextMenu*(self: ptr IContextMenu, P1: HMENU, P2: UINT, P3: UINT, P4: UINT, P5: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.QueryContextMenu(self, P1, P2, P3, P4, P5)
proc InvokeCommand*(self: ptr IContextMenu, P1: LPCMINVOKECOMMANDINFO): HRESULT {.inline, discardable.} = self.lpVtbl.InvokeCommand(self, P1)
proc GetCommandString*(self: ptr IContextMenu, P1: UINT, P2: UINT, P3: PUINT, P4: LPSTR, P5: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCommandString(self, P1, P2, P3, P4, P5)
converter winim_converter_IContextMenu2*(x: ptr IContextMenu2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IContextMenu2*(x: ptr IContextMenu2): ptr IContextMenu = cast[ptr IContextMenu](x)
proc QueryInterface*(self: ptr IContextMenu2, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IContextMenu2): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IContextMenu2): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc QueryContextMenu*(self: ptr IContextMenu2, P1: HMENU, P2: UINT, P3: UINT, P4: UINT, P5: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.QueryContextMenu(self, P1, P2, P3, P4, P5)
proc InvokeCommand*(self: ptr IContextMenu2, P1: LPCMINVOKECOMMANDINFO): HRESULT {.inline, discardable.} = self.lpVtbl.InvokeCommand(self, P1)
proc GetCommandString*(self: ptr IContextMenu2, P1: UINT, P2: UINT, P3: PUINT, P4: LPSTR, P5: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCommandString(self, P1, P2, P3, P4, P5)
proc HandleMenuMsg*(self: ptr IContextMenu2, P1: UINT, P2: WPARAM, P3: LPARAM): HRESULT {.inline, discardable.} = self.lpVtbl.HandleMenuMsg(self, P1, P2, P3)
converter winim_converter_IColumnProvider*(x: ptr IColumnProvider): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IColumnProvider, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IColumnProvider): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IColumnProvider): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc Initialize*(self: ptr IColumnProvider, P1: LPCSHCOLUMNINIT): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, P1)
proc GetColumnInfo*(self: ptr IColumnProvider, P1: DWORD, P2: ptr SHCOLUMNINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetColumnInfo(self, P1, P2)
proc GetItemData*(self: ptr IColumnProvider, P1: LPCSHCOLUMNID, P2: LPCSHCOLUMNDATA, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemData(self, P1, P2, P3)
converter winim_converter_IQueryInfo*(x: ptr IQueryInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IQueryInfo, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IQueryInfo): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IQueryInfo): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetInfoTip*(self: ptr IQueryInfo, P1: DWORD, P2: ptr ptr WCHAR): HRESULT {.inline, discardable.} = self.lpVtbl.GetInfoTip(self, P1, P2)
proc GetInfoFlags*(self: ptr IQueryInfo, P1: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetInfoFlags(self, P1)
converter winim_converter_IShellExtInit*(x: ptr IShellExtInit): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IShellExtInit, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellExtInit): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellExtInit): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc Initialize*(self: ptr IShellExtInit, P1: LPCITEMIDLIST, P2: LPDATAOBJECT, P3: HKEY): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, P1, P2, P3)
converter winim_converter_IShellPropSheetExt*(x: ptr IShellPropSheetExt): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IShellPropSheetExt, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellPropSheetExt): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellPropSheetExt): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc AddPages*(self: ptr IShellPropSheetExt, P1: LPFNADDPROPSHEETPAGE, P2: LPARAM): HRESULT {.inline, discardable.} = self.lpVtbl.AddPages(self, P1, P2)
proc ReplacePage*(self: ptr IShellPropSheetExt, P1: UINT, P2: LPFNADDPROPSHEETPAGE, P3: LPARAM): HRESULT {.inline, discardable.} = self.lpVtbl.ReplacePage(self, P1, P2, P3)
converter winim_converter_IExtractIconA*(x: ptr IExtractIconA): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IExtractIconA, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IExtractIconA): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IExtractIconA): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetIconLocation*(self: ptr IExtractIconA, P1: UINT, P2: LPSTR, P3: UINT, P4: ptr int32, P5: PUINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetIconLocation(self, P1, P2, P3, P4, P5)
proc Extract*(self: ptr IExtractIconA, P1: LPCSTR, P2: UINT, P3: ptr HICON, P4: ptr HICON, P5: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.Extract(self, P1, P2, P3, P4, P5)
converter winim_converter_IExtractIconW*(x: ptr IExtractIconW): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IExtractIconW, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IExtractIconW): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IExtractIconW): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetIconLocation*(self: ptr IExtractIconW, P1: UINT, P2: LPWSTR, P3: UINT, P4: ptr int32, P5: PUINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetIconLocation(self, P1, P2, P3, P4, P5)
proc Extract*(self: ptr IExtractIconW, P1: LPCWSTR, P2: UINT, P3: ptr HICON, P4: ptr HICON, P5: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.Extract(self, P1, P2, P3, P4, P5)
converter winim_converter_IShellLinkA*(x: ptr IShellLinkA): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IShellLinkA, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellLinkA): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellLinkA): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetPath*(self: ptr IShellLinkA, P1: LPSTR, P2: int32, P3: ptr WIN32_FIND_DATAA, P4: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetPath(self, P1, P2, P3, P4)
proc GetIDList*(self: ptr IShellLinkA, P1: ptr LPITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.GetIDList(self, P1)
proc SetIDList*(self: ptr IShellLinkA, P1: LPCITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.SetIDList(self, P1)
proc GetDescription*(self: ptr IShellLinkA, P1: LPSTR, P2: int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetDescription(self, P1, P2)
proc SetDescription*(self: ptr IShellLinkA, P1: LPCSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetDescription(self, P1)
proc GetWorkingDirectory*(self: ptr IShellLinkA, P1: LPSTR, P2: int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetWorkingDirectory(self, P1, P2)
proc SetWorkingDirectory*(self: ptr IShellLinkA, P1: LPCSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetWorkingDirectory(self, P1)
proc GetArguments*(self: ptr IShellLinkA, P1: LPSTR, P2: int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetArguments(self, P1, P2)
proc SetArguments*(self: ptr IShellLinkA, P1: LPCSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetArguments(self, P1)
proc GetHotkey*(self: ptr IShellLinkA, P1: PWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetHotkey(self, P1)
proc SetHotkey*(self: ptr IShellLinkA, P1: WORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetHotkey(self, P1)
proc GetShowCmd*(self: ptr IShellLinkA, P1: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetShowCmd(self, P1)
proc SetShowCmd*(self: ptr IShellLinkA, P1: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetShowCmd(self, P1)
proc GetIconLocation*(self: ptr IShellLinkA, P1: LPSTR, P2: int32, P3: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetIconLocation(self, P1, P2, P3)
proc SetIconLocation*(self: ptr IShellLinkA, P1: LPCSTR, P2: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetIconLocation(self, P1, P2)
proc SetRelativePath*(self: ptr IShellLinkA, P1: LPCSTR, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetRelativePath(self, P1, P2)
proc Resolve*(self: ptr IShellLinkA, P1: HWND, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Resolve(self, P1, P2)
proc SetPath*(self: ptr IShellLinkA, P1: LPCSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetPath(self, P1)
converter winim_converter_IShellLinkW*(x: ptr IShellLinkW): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IShellLinkW, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellLinkW): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellLinkW): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetPath*(self: ptr IShellLinkW, P1: LPWSTR, P2: int32, P3: ptr WIN32_FIND_DATAW, P4: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetPath(self, P1, P2, P3, P4)
proc GetIDList*(self: ptr IShellLinkW, P1: ptr LPITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.GetIDList(self, P1)
proc SetIDList*(self: ptr IShellLinkW, P1: LPCITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.SetIDList(self, P1)
proc GetDescription*(self: ptr IShellLinkW, P1: LPWSTR, P2: int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetDescription(self, P1, P2)
proc SetDescription*(self: ptr IShellLinkW, P1: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetDescription(self, P1)
proc GetWorkingDirectory*(self: ptr IShellLinkW, P1: LPWSTR, P2: int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetWorkingDirectory(self, P1, P2)
proc SetWorkingDirectory*(self: ptr IShellLinkW, P1: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetWorkingDirectory(self, P1)
proc GetArguments*(self: ptr IShellLinkW, P1: LPWSTR, P2: int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetArguments(self, P1, P2)
proc SetArguments*(self: ptr IShellLinkW, P1: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetArguments(self, P1)
proc GetHotkey*(self: ptr IShellLinkW, P1: PWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetHotkey(self, P1)
proc SetHotkey*(self: ptr IShellLinkW, P1: WORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetHotkey(self, P1)
proc GetShowCmd*(self: ptr IShellLinkW, P1: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetShowCmd(self, P1)
proc SetShowCmd*(self: ptr IShellLinkW, P1: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetShowCmd(self, P1)
proc GetIconLocation*(self: ptr IShellLinkW, P1: LPWSTR, P2: int32, P3: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetIconLocation(self, P1, P2, P3)
proc SetIconLocation*(self: ptr IShellLinkW, P1: LPCWSTR, P2: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetIconLocation(self, P1, P2)
proc SetRelativePath*(self: ptr IShellLinkW, P1: LPCWSTR, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetRelativePath(self, P1, P2)
proc Resolve*(self: ptr IShellLinkW, P1: HWND, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Resolve(self, P1, P2)
proc SetPath*(self: ptr IShellLinkW, P1: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetPath(self, P1)
converter winim_converter_IShellFolder*(x: ptr IShellFolder): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IShellFolder, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellFolder): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellFolder): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc ParseDisplayName*(self: ptr IShellFolder, P1: HWND, P2: LPBC, P3: LPOLESTR, P4: PULONG, P5: ptr LPITEMIDLIST, P6: PULONG): HRESULT {.inline, discardable.} = self.lpVtbl.ParseDisplayName(self, P1, P2, P3, P4, P5, P6)
proc EnumObjects*(self: ptr IShellFolder, P1: HWND, P2: DWORD, P3: ptr LPENUMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.EnumObjects(self, P1, P2, P3)
proc BindToObject*(self: ptr IShellFolder, P1: LPCITEMIDLIST, P2: LPBC, P3: REFIID, P4: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.BindToObject(self, P1, P2, P3, P4)
proc BindToStorage*(self: ptr IShellFolder, P1: LPCITEMIDLIST, P2: LPBC, P3: REFIID, P4: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.BindToStorage(self, P1, P2, P3, P4)
proc CompareIDs*(self: ptr IShellFolder, P1: LPARAM, P2: LPCITEMIDLIST, P3: LPCITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.CompareIDs(self, P1, P2, P3)
proc CreateViewObject*(self: ptr IShellFolder, P1: HWND, P2: REFIID, P3: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.CreateViewObject(self, P1, P2, P3)
proc GetAttributesOf*(self: ptr IShellFolder, P1: UINT, P2: ptr LPCITEMIDLIST, P3: PULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetAttributesOf(self, P1, P2, P3)
proc GetUIObjectOf*(self: ptr IShellFolder, P1: HWND, P2: UINT, P3: ptr LPCITEMIDLIST, P4: REFIID, P5: PUINT, P6: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.GetUIObjectOf(self, P1, P2, P3, P4, P5, P6)
proc GetDisplayNameOf*(self: ptr IShellFolder, P1: LPCITEMIDLIST, P2: DWORD, P3: LPSTRRET): HRESULT {.inline, discardable.} = self.lpVtbl.GetDisplayNameOf(self, P1, P2, P3)
proc SetNameOf*(self: ptr IShellFolder, P1: HWND, P2: LPCITEMIDLIST, P3: LPCOLESTR, P4: DWORD, P5: ptr LPITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.SetNameOf(self, P1, P2, P3, P4, P5)
converter winim_converter_IEnumExtraSearch*(x: ptr IEnumExtraSearch): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IEnumExtraSearch, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IEnumExtraSearch): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IEnumExtraSearch): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc Next*(self: ptr IEnumExtraSearch, P1: ULONG, P2: ptr LPEXTRASEARCH, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumExtraSearch, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumExtraSearch): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumExtraSearch, P1: ptr ptr IEnumExtraSearch): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IShellFolder2*(x: ptr IShellFolder2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IShellFolder2*(x: ptr IShellFolder2): ptr IShellFolder = cast[ptr IShellFolder](x)
proc QueryInterface*(self: ptr IShellFolder2, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellFolder2): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellFolder2): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc ParseDisplayName*(self: ptr IShellFolder2, P1: HWND, P2: LPBC, P3: LPOLESTR, P4: PULONG, P5: ptr LPITEMIDLIST, P6: PULONG): HRESULT {.inline, discardable.} = self.lpVtbl.ParseDisplayName(self, P1, P2, P3, P4, P5, P6)
proc EnumObjects*(self: ptr IShellFolder2, P1: HWND, P2: DWORD, P3: ptr LPENUMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.EnumObjects(self, P1, P2, P3)
proc BindToObject*(self: ptr IShellFolder2, P1: LPCITEMIDLIST, P2: LPBC, P3: REFIID, P4: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.BindToObject(self, P1, P2, P3, P4)
proc BindToStorage*(self: ptr IShellFolder2, P1: LPCITEMIDLIST, P2: LPBC, P3: REFIID, P4: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.BindToStorage(self, P1, P2, P3, P4)
proc CompareIDs*(self: ptr IShellFolder2, P1: LPARAM, P2: LPCITEMIDLIST, P3: LPCITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.CompareIDs(self, P1, P2, P3)
proc CreateViewObject*(self: ptr IShellFolder2, P1: HWND, P2: REFIID, P3: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.CreateViewObject(self, P1, P2, P3)
proc GetAttributesOf*(self: ptr IShellFolder2, P1: UINT, P2: ptr LPCITEMIDLIST, P3: PULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetAttributesOf(self, P1, P2, P3)
proc GetUIObjectOf*(self: ptr IShellFolder2, P1: HWND, P2: UINT, P3: ptr LPCITEMIDLIST, P4: REFIID, P5: PUINT, P6: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.GetUIObjectOf(self, P1, P2, P3, P4, P5, P6)
proc GetDisplayNameOf*(self: ptr IShellFolder2, P1: LPCITEMIDLIST, P2: DWORD, P3: LPSTRRET): HRESULT {.inline, discardable.} = self.lpVtbl.GetDisplayNameOf(self, P1, P2, P3)
proc SetNameOf*(self: ptr IShellFolder2, P1: HWND, P2: LPCITEMIDLIST, P3: LPCOLESTR, P4: DWORD, P5: ptr LPITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.SetNameOf(self, P1, P2, P3, P4, P5)
proc GetDefaultSearchGUID*(self: ptr IShellFolder2, P1: ptr GUID): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultSearchGUID(self, P1)
proc EnumSearches*(self: ptr IShellFolder2, P1: ptr ptr IEnumExtraSearch): HRESULT {.inline, discardable.} = self.lpVtbl.EnumSearches(self, P1)
proc GetDefaultColumn*(self: ptr IShellFolder2, P1: DWORD, P2: ptr ULONG, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultColumn(self, P1, P2, P3)
proc GetDefaultColumnState*(self: ptr IShellFolder2, P1: UINT, P2: ptr SHCOLSTATEF): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultColumnState(self, P1, P2)
proc GetDetailsEx*(self: ptr IShellFolder2, P1: LPCITEMIDLIST, P2: ptr SHCOLUMNID, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetDetailsEx(self, P1, P2, P3)
proc GetDetailsOf*(self: ptr IShellFolder2, P1: LPCITEMIDLIST, P2: UINT, P3: ptr SHELLDETAILS): HRESULT {.inline, discardable.} = self.lpVtbl.GetDetailsOf(self, P1, P2, P3)
proc MapColumnToSCID*(self: ptr IShellFolder2, P1: UINT, P2: ptr SHCOLUMNID): HRESULT {.inline, discardable.} = self.lpVtbl.MapColumnToSCID(self, P1, P2)
converter winim_converter_ICopyHook*(x: ptr ICopyHook): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr ICopyHook, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr ICopyHook): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr ICopyHook): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc CopyCallback*(self: ptr ICopyHook, P1: HWND, P2: UINT, P3: UINT, P4: LPCSTR, P5: DWORD, P6: LPCSTR, P7: DWORD): UINT {.inline, discardable.} = self.lpVtbl.CopyCallback(self, P1, P2, P3, P4, P5, P6, P7)
converter winim_converter_IFileViewerSite*(x: ptr IFileViewerSite): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IFileViewerSite, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IFileViewerSite): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IFileViewerSite): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc SetPinnedWindow*(self: ptr IFileViewerSite, P1: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.SetPinnedWindow(self, P1)
proc GetPinnedWindow*(self: ptr IFileViewerSite, P1: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.GetPinnedWindow(self, P1)
converter winim_converter_IFileViewer*(x: ptr IFileViewer): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IFileViewer, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IFileViewer): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IFileViewer): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc ShowInitialize*(self: ptr IFileViewer, P1: LPFILEVIEWERSITE): HRESULT {.inline, discardable.} = self.lpVtbl.ShowInitialize(self, P1)
proc Show*(self: ptr IFileViewer, P1: LPFVSHOWINFO): HRESULT {.inline, discardable.} = self.lpVtbl.Show(self, P1)
proc PrintTo*(self: ptr IFileViewer, P1: LPSTR, P2: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.PrintTo(self, P1, P2)
converter winim_converter_IFileSystemBindData*(x: ptr IFileSystemBindData): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IFileSystemBindData, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IFileSystemBindData): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IFileSystemBindData): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc SetFindData*(self: ptr IFileSystemBindData, P1: ptr WIN32_FIND_DATAW): HRESULT {.inline, discardable.} = self.lpVtbl.SetFindData(self, P1)
proc GetFindData*(self: ptr IFileSystemBindData, P1: ptr WIN32_FIND_DATAW): HRESULT {.inline, discardable.} = self.lpVtbl.GetFindData(self, P1)
converter winim_converter_IPersistFolder*(x: ptr IPersistFolder): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistFolder*(x: ptr IPersistFolder): ptr IPersist = cast[ptr IPersist](x)
proc QueryInterface*(self: ptr IPersistFolder, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IPersistFolder): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IPersistFolder): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetClassID*(self: ptr IPersistFolder, P1: ptr CLSID): HRESULT {.inline, discardable.} = self.lpVtbl.GetClassID(self, P1)
proc Initialize*(self: ptr IPersistFolder, P1: LPCITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, P1)
converter winim_converter_IPersistFolder2*(x: ptr IPersistFolder2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistFolder2*(x: ptr IPersistFolder2): ptr IPersistFolder = cast[ptr IPersistFolder](x)
converter winim_converter_IPersistFolder2*(x: ptr IPersistFolder2): ptr IPersist = cast[ptr IPersist](x)
proc QueryInterface*(self: ptr IPersistFolder2, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IPersistFolder2): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IPersistFolder2): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetClassID*(self: ptr IPersistFolder2, P1: ptr CLSID): HRESULT {.inline, discardable.} = self.lpVtbl.GetClassID(self, P1)
proc Initialize*(self: ptr IPersistFolder2, P1: LPCITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, P1)
proc GetCurFolder*(self: ptr IPersistFolder2, P1: ptr LPITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurFolder(self, P1)
converter winim_converter_IPersistFolder3*(x: ptr IPersistFolder3): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistFolder3*(x: ptr IPersistFolder3): ptr IPersistFolder2 = cast[ptr IPersistFolder2](x)
converter winim_converter_IPersistFolder3*(x: ptr IPersistFolder3): ptr IPersistFolder = cast[ptr IPersistFolder](x)
converter winim_converter_IPersistFolder3*(x: ptr IPersistFolder3): ptr IPersist = cast[ptr IPersist](x)
proc QueryInterface*(self: ptr IPersistFolder3, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IPersistFolder3): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IPersistFolder3): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetClassID*(self: ptr IPersistFolder3, P1: ptr CLSID): HRESULT {.inline, discardable.} = self.lpVtbl.GetClassID(self, P1)
proc Initialize*(self: ptr IPersistFolder3, P1: LPCITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, P1)
proc GetCurFolder*(self: ptr IPersistFolder3, P1: ptr LPITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurFolder(self, P1)
proc InitializeEx*(self: ptr IPersistFolder3, P1: ptr IBindCtx, P2: LPCITEMIDLIST, P3: ptr PERSIST_FOLDER_TARGET_INFO): HRESULT {.inline, discardable.} = self.lpVtbl.InitializeEx(self, P1, P2, P3)
proc GetFolderTargetInfo*(self: ptr IPersistFolder3, P1: ptr PERSIST_FOLDER_TARGET_INFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolderTargetInfo(self, P1)
converter winim_converter_IShellBrowser*(x: ptr IShellBrowser): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IShellBrowser*(x: ptr IShellBrowser): ptr IOleWindow = cast[ptr IOleWindow](x)
proc QueryInterface*(self: ptr IShellBrowser, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellBrowser): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellBrowser): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetWindow*(self: ptr IShellBrowser, P1: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.GetWindow(self, P1)
proc ContextSensitiveHelp*(self: ptr IShellBrowser, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ContextSensitiveHelp(self, P1)
proc InsertMenusSB*(self: ptr IShellBrowser, P1: HMENU, P2: LPOLEMENUGROUPWIDTHS): HRESULT {.inline, discardable.} = self.lpVtbl.InsertMenusSB(self, P1, P2)
proc SetMenuSB*(self: ptr IShellBrowser, P1: HMENU, P2: HOLEMENU, P3: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.SetMenuSB(self, P1, P2, P3)
proc RemoveMenusSB*(self: ptr IShellBrowser, P1: HMENU): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveMenusSB(self, P1)
proc SetStatusTextSB*(self: ptr IShellBrowser, P1: LPCOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetStatusTextSB(self, P1)
proc EnableModelessSB*(self: ptr IShellBrowser, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.EnableModelessSB(self, P1)
proc TranslateAcceleratorSB*(self: ptr IShellBrowser, P1: LPMSG, P2: WORD): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAcceleratorSB(self, P1, P2)
proc BrowseObject*(self: ptr IShellBrowser, P1: LPCITEMIDLIST, P2: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.BrowseObject(self, P1, P2)
proc GetViewStateStream*(self: ptr IShellBrowser, P1: DWORD, P2: ptr LPSTREAM): HRESULT {.inline, discardable.} = self.lpVtbl.GetViewStateStream(self, P1, P2)
proc GetControlWindow*(self: ptr IShellBrowser, P1: UINT, P2: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.GetControlWindow(self, P1, P2)
proc SendControlMsg*(self: ptr IShellBrowser, P1: UINT, P2: UINT, P3: WPARAM, P4: LPARAM, P5: ptr LRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.SendControlMsg(self, P1, P2, P3, P4, P5)
proc QueryActiveShellView*(self: ptr IShellBrowser, P1: ptr LPSHELLVIEW): HRESULT {.inline, discardable.} = self.lpVtbl.QueryActiveShellView(self, P1)
proc OnViewWindowActive*(self: ptr IShellBrowser, P1: LPSHELLVIEW): HRESULT {.inline, discardable.} = self.lpVtbl.OnViewWindowActive(self, P1)
proc SetToolbarItems*(self: ptr IShellBrowser, P1: LPTBBUTTON, P2: UINT, P3: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetToolbarItems(self, P1, P2, P3)
converter winim_converter_IShellView*(x: ptr IShellView): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IShellView*(x: ptr IShellView): ptr IOleWindow = cast[ptr IOleWindow](x)
proc QueryInterface*(self: ptr IShellView, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellView): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellView): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetWindow*(self: ptr IShellView, P1: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.GetWindow(self, P1)
proc ContextSensitiveHelp*(self: ptr IShellView, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ContextSensitiveHelp(self, P1)
proc TranslateAccelerator*(self: ptr IShellView, P1: LPMSG): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAccelerator(self, P1)
proc EnableModeless*(self: ptr IShellView, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.EnableModeless(self, P1)
proc UIActivate*(self: ptr IShellView, P1: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.UIActivate(self, P1)
proc Refresh*(self: ptr IShellView): HRESULT {.inline, discardable.} = self.lpVtbl.Refresh(self)
proc CreateViewWindow*(self: ptr IShellView, P1: ptr IShellView, P2: LPCFOLDERSETTINGS, P3: LPSHELLBROWSER, P4: ptr RECT, P5: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.CreateViewWindow(self, P1, P2, P3, P4, P5)
proc DestroyViewWindow*(self: ptr IShellView): HRESULT {.inline, discardable.} = self.lpVtbl.DestroyViewWindow(self)
proc GetCurrentInfo*(self: ptr IShellView, P1: LPFOLDERSETTINGS): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurrentInfo(self, P1)
proc AddPropertySheetPages*(self: ptr IShellView, P1: DWORD, P2: LPFNADDPROPSHEETPAGE, P3: LPARAM): HRESULT {.inline, discardable.} = self.lpVtbl.AddPropertySheetPages(self, P1, P2, P3)
proc SaveViewState*(self: ptr IShellView): HRESULT {.inline, discardable.} = self.lpVtbl.SaveViewState(self)
proc SelectItem*(self: ptr IShellView, P1: LPCITEMIDLIST, P2: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SelectItem(self, P1, P2)
proc GetItemObject*(self: ptr IShellView, P1: UINT, P2: REFIID, P3: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemObject(self, P1, P2, P3)
converter winim_converter_ICommDlgBrowser*(x: ptr ICommDlgBrowser): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr ICommDlgBrowser, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr ICommDlgBrowser): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr ICommDlgBrowser): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc OnDefaultCommand*(self: ptr ICommDlgBrowser, P1: ptr IShellView): HRESULT {.inline, discardable.} = self.lpVtbl.OnDefaultCommand(self, P1)
proc OnStateChange*(self: ptr ICommDlgBrowser, P1: ptr IShellView, P2: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.OnStateChange(self, P1, P2)
proc IncludeObject*(self: ptr ICommDlgBrowser, P1: ptr IShellView, P2: LPCITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.IncludeObject(self, P1, P2)
converter winim_converter_IShellView2*(x: ptr IShellView2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IShellView2*(x: ptr IShellView2): ptr IShellView = cast[ptr IShellView](x)
converter winim_converter_IShellView2*(x: ptr IShellView2): ptr IOleWindow = cast[ptr IOleWindow](x)
proc QueryInterface*(self: ptr IShellView2, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellView2): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellView2): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetWindow*(self: ptr IShellView2, P1: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.GetWindow(self, P1)
proc ContextSensitiveHelp*(self: ptr IShellView2, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ContextSensitiveHelp(self, P1)
proc TranslateAccelerator*(self: ptr IShellView2, P1: LPMSG): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAccelerator(self, P1)
proc EnableModeless*(self: ptr IShellView2, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.EnableModeless(self, P1)
proc UIActivate*(self: ptr IShellView2, P1: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.UIActivate(self, P1)
proc Refresh*(self: ptr IShellView2): HRESULT {.inline, discardable.} = self.lpVtbl.Refresh(self)
proc CreateViewWindow*(self: ptr IShellView2, P1: ptr IShellView, P2: LPCFOLDERSETTINGS, P3: LPSHELLBROWSER, P4: ptr RECT, P5: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.CreateViewWindow(self, P1, P2, P3, P4, P5)
proc DestroyViewWindow*(self: ptr IShellView2): HRESULT {.inline, discardable.} = self.lpVtbl.DestroyViewWindow(self)
proc GetCurrentInfo*(self: ptr IShellView2, P1: LPFOLDERSETTINGS): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurrentInfo(self, P1)
proc AddPropertySheetPages*(self: ptr IShellView2, P1: DWORD, P2: LPFNADDPROPSHEETPAGE, P3: LPARAM): HRESULT {.inline, discardable.} = self.lpVtbl.AddPropertySheetPages(self, P1, P2, P3)
proc SaveViewState*(self: ptr IShellView2): HRESULT {.inline, discardable.} = self.lpVtbl.SaveViewState(self)
proc SelectItem*(self: ptr IShellView2, P1: LPCITEMIDLIST, P2: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SelectItem(self, P1, P2)
proc GetItemObject*(self: ptr IShellView2, P1: UINT, P2: REFIID, P3: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemObject(self, P1, P2, P3)
proc GetView*(self: ptr IShellView2, P1: ptr SHELLVIEWID, P2: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetView(self, P1, P2)
proc CreateViewWindow2*(self: ptr IShellView2, P1: LPSV2CVW2_PARAMS): HRESULT {.inline, discardable.} = self.lpVtbl.CreateViewWindow2(self, P1)
converter winim_converter_IShellExecuteHookA*(x: ptr IShellExecuteHookA): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IShellExecuteHookA, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellExecuteHookA): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellExecuteHookA): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc Execute*(self: ptr IShellExecuteHookA, P1: LPSHELLEXECUTEINFOA): HRESULT {.inline, discardable.} = self.lpVtbl.Execute(self, P1)
converter winim_converter_IShellExecuteHookW*(x: ptr IShellExecuteHookW): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IShellExecuteHookW, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellExecuteHookW): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellExecuteHookW): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc Execute*(self: ptr IShellExecuteHookW, P1: LPSHELLEXECUTEINFOW): HRESULT {.inline, discardable.} = self.lpVtbl.Execute(self, P1)
converter winim_converter_IShellIcon*(x: ptr IShellIcon): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IShellIcon, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellIcon): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellIcon): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetIconOf*(self: ptr IShellIcon, P1: LPCITEMIDLIST, P2: UINT, P3: PINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetIconOf(self, P1, P2, P3)
converter winim_converter_IShellIconOverlayIdentifier*(x: ptr IShellIconOverlayIdentifier): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IShellIconOverlayIdentifier, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellIconOverlayIdentifier): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellIconOverlayIdentifier): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc IsMemberOf*(self: ptr IShellIconOverlayIdentifier, P1: LPCWSTR, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.IsMemberOf(self, P1, P2)
proc GetOverlayInfo*(self: ptr IShellIconOverlayIdentifier, P1: LPWSTR, P2: int32, P3: ptr int32, P4: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetOverlayInfo(self, P1, P2, P3, P4)
proc GetPriority*(self: ptr IShellIconOverlayIdentifier, P1: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetPriority(self, P1)
converter winim_converter_IDragSourceHelper*(x: ptr IDragSourceHelper): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IDragSourceHelper, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, riid, ppv)
proc AddRef*(self: ptr IDragSourceHelper): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IDragSourceHelper): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc InitializeFromBitmap*(self: ptr IDragSourceHelper, pshdi: LPSHDRAGIMAGE, pDataObject: ptr IDataObject): HRESULT {.inline, discardable.} = self.lpVtbl.InitializeFromBitmap(self, pshdi, pDataObject)
proc InitializeFromWindow*(self: ptr IDragSourceHelper, hwnd: HWND, ppt: ptr POINT, pDataObject: ptr IDataObject): HRESULT {.inline, discardable.} = self.lpVtbl.InitializeFromWindow(self, hwnd, ppt, pDataObject)
converter winim_converter_IDropTargetHelper*(x: ptr IDropTargetHelper): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IDropTargetHelper, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, riid, ppv)
proc AddRef*(self: ptr IDropTargetHelper): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IDropTargetHelper): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc DragEnter*(self: ptr IDropTargetHelper, hwndTarget: HWND, pDataObject: ptr IDataObject, ppt: ptr POINT, dwEffect: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.DragEnter(self, hwndTarget, pDataObject, ppt, dwEffect)
proc DragLeave*(self: ptr IDropTargetHelper): HRESULT {.inline, discardable.} = self.lpVtbl.DragLeave(self)
proc DragOver*(self: ptr IDropTargetHelper, ppt: ptr POINT, dwEffect: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.DragOver(self, ppt, dwEffect)
proc Drop*(self: ptr IDropTargetHelper, pDataObject: ptr IDataObject, ppt: ptr POINT, dwEffect: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Drop(self, pDataObject, ppt, dwEffect)
proc Show*(self: ptr IDropTargetHelper, fShow: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Show(self, fShow)

proc `pOleStr=`*(self: var STRRET, x: LPWSTR) = self.u1.pOleStr = x
proc pOleStr*(self: STRRET): LPWSTR = self.u1.pOleStr
proc `uOffset=`*(self: var STRRET, x: UINT) = self.u1.uOffset = x
proc uOffset*(self: STRRET): UINT = self.u1.uOffset
proc `cStr=`*(self: var STRRET, x: array[MAX_PATH, char]) = self.u1.cStr = x
proc cStr*(self: STRRET): array[MAX_PATH, char] = self.u1.cStr

# shell/shldisp.nim

const
  ACO_AUTOSUGGEST* = 0x01

type
  IAutoComplete* {.pure.} = object
    lpVtbl*: ptr IAutoCompleteVtbl
  IAutoCompleteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Init*: proc(self: ptr IAutoComplete, P1: HWND, P2: ptr IUnknown, P3: LPCOLESTR, P4: LPCOLESTR): HRESULT {.stdcall.}
    Enable*: proc(self: ptr IAutoComplete, P1: BOOL): HRESULT {.stdcall.}
  LPAUTOCOMPLETE* = ptr IAutoComplete
  IAutoComplete2* {.pure.} = object
    lpVtbl*: ptr IAutoComplete2Vtbl
  IAutoComplete2Vtbl* {.pure, inheritable.} = object of IAutoCompleteVtbl
    SetOptions*: proc(self: ptr IAutoComplete2, P1: DWORD): HRESULT {.stdcall.}
    GetOptions*: proc(self: ptr IAutoComplete2, P1: ptr DWORD): HRESULT {.stdcall.}
  LPAUTOCOMPLETE2* = ptr IAutoComplete2

converter winim_converter_IAutoComplete*(x: ptr IAutoComplete): ptr IUnknown = cast[ptr IUnknown](x)
proc Init*(self: ptr IAutoComplete, P1: HWND, P2: ptr IUnknown, P3: LPCOLESTR, P4: LPCOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.Init(self, P1, P2, P3, P4)
proc Enable*(self: ptr IAutoComplete, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Enable(self, P1)
converter winim_converter_IAutoComplete2*(x: ptr IAutoComplete2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IAutoComplete2*(x: ptr IAutoComplete2): ptr IAutoComplete = cast[ptr IAutoComplete](x)
proc SetOptions*(self: ptr IAutoComplete2, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetOptions(self, P1)
proc GetOptions*(self: ptr IAutoComplete2, P1: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetOptions(self, P1)

# shell/shlwapi.nim

const
  DLLVER_PLATFORM_WINDOWS* = 0x00000001
  DLLVER_PLATFORM_NT* = 0x00000002
  URL_DONT_ESCAPE_EXTRA_INFO* = 0x02000000
  URL_DONT_SIMPLIFY* = 0x08000000
  URL_ESCAPE_PERCENT* = 0x00001000
  URL_ESCAPE_SEGMENT_ONLY* = 0x00002000
  URL_ESCAPE_SPACES_ONLY* = 0x04000000
  URL_ESCAPE_UNSAFE* = 0x20000000
  URL_INTERNAL_PATH* = 0x00800000
  URL_PARTFLAG_KEEPSCHEME* = 0x00000001
  URL_PLUGGABLE_PROTOCOL* = 0x40000000
  CURL_UNESCAPE* = 0x10000000 # renamed from URL_UNESCAPE
  URL_UNESCAPE_HIGH_ANSI_ONLY* = 0x00400000
  CURL_UNESCAPE_INPLACE* = 0x00100000 # renamed from URL_UNESCAPE_INPLACE
  # ASSOCSTR* = enum
  ASSOCSTR_COMMAND* = 0
  ASSOCSTR_EXECUTABLE* = 1
  ASSOCSTR_FRIENDLYDOCNAME* = 2
  ASSOCSTR_FRIENDLYAPPNAME* = 3
  ASSOCSTR_NOOPEN* = 4
  ASSOCSTR_SHELLNEWVALUE* = 5
  ASSOCSTR_DDECOMMAND* = 6
  ASSOCSTR_DDEIFEXEC* = 7
  ASSOCSTR_DDEAPPLICATION* = 8
  ASSOCSTR_DDETOPIC* = 9
  # ASSOCKEY* = enum
  ASSOCKEY_SHELLEXECCLASS* = 1
  ASSOCKEY_APP* = 2
  ASSOCKEY_CLASS* = 3
  ASSOCKEY_BASECLASS* = 4
  # ASSOCDATA* = enum
  ASSOCDATA_MSIDESCRIPTOR* = 1
  ASSOCDATA_NOACTIVATEHANDLER* = 1
  ASSOCDATA_QUERYCLASSSTORE* = 2
  # SHREGDEL_FLAGS* = enum
  SHREGDEL_DEFAULT* = 0x00000000
  SHREGDEL_HKCU* = 0x00000001
  SHREGDEL_HKLM* = 0x00000010
  SHREGDEL_BOTH* = 0x00000011
  # SHREGENUM_FLAGS* = enum
  SHREGENUM_DEFAULT* = 0x00000000
  SHREGENUM_HKCU* = 0x00000001
  SHREGENUM_HKLM* = 0x00000010
  SHREGENUM_BOTH* = 0x00000011
  # URLIS*
  TURLIS_URL* = 0 # renamed from URLIS_URL
  TURLIS_OPAQUE* = 1 # renamed from URLIS_OPAQUE
  TURLIS_NOHISTORY* = 2 # renamed from URLIS_NOHISTORY
  TURLIS_FILEURL* = 3 # renamed from URLIS_FILEURL
  TURLIS_APPLIABLE* = 4 # renamed from URLIS_APPLIABLE
  TURLIS_DIRECTORY* = 5 # renamed from URLIS_DIRECTORY
  TURLIS_HASQUERY* = 6 # renamed from URLIS_HASQUERY

type
  ASSOCKEY* = int32
  ASSOCSTR* = int32
  TURLIS* = int32 # renamed from URLIS
  SHREGDEL_FLAGS* = int32
  SHREGENUM_FLAGS* = int32

type
  DLLVERSIONINFO* {.final, pure.} = object
    cbSize*: DWORD
    dwMajorVersion*: DWORD
    dwMinorVersion*: DWORD
    dwBuildNumber*: DWORD
    dwPlatformID*: DWORD
  DLLVERSIONINFO2* {.final, pure.} = object
    info1*: DLLVERSIONINFO
    dwFlags*: DWORD
    ullVersion*: ULONGLONG
  HUSKEY* = HANDLE
  PHUSKEY* = ptr HUSKEY
  DLLGETVERSIONPROC* = proc (P1: ptr DLLVERSIONINFO): HRESULT {.stdcall.}
  ASSOCF* = DWORD


proc ChrCmpIA*(P1: WORD, P2: WORD): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc ChrCmpIW*(P1: WCHAR, P2: WCHAR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc IntlStrEqWorkerA*(P1: BOOL, P2: LPCSTR, P3: LPCSTR, P4: int32): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc IntlStrEqWorkerW*(P1: BOOL, P2: LPCWSTR, P3: LPCWSTR, P4: int32): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc SHStrDupA*(P1: LPCSTR, P2: ptr LPWSTR): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc SHStrDupW*(P1: LPCWSTR, P2: ptr LPWSTR): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc StrCatA*(P1: LPSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrCatW*(P1: LPWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrCatBuffA*(P1: LPSTR, P2: LPCSTR, P3: int32): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrCatBuffW*(P1: LPWSTR, P2: LPCWSTR, P3: int32): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrCatChainW*(P1: LPWSTR, P2: DWORD, P3: DWORD, P4: LPCWSTR): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc StrChrA*(P1: LPCSTR, P2: WORD): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrChrW*(P1: LPCWSTR, P2: WCHAR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrChrIA*(P1: LPCSTR, P2: WORD): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrChrIW*(P1: LPCWSTR, P2: WCHAR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrCmpIW*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrCmpW*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrCpyW*(P1: LPWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrCpyNW*(P1: LPWSTR, P2: LPCWSTR, P3: int32): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrCmpNA*(P1: LPCSTR, P2: LPCSTR, P3: int32): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrCmpNW*(P1: LPCWSTR, P2: LPCWSTR, P3: int32): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrCmpNIA*(P1: LPCSTR, P2: LPCSTR, P3: int32): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrCmpNIW*(P1: LPCWSTR, P2: LPCWSTR, P3: int32): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrCSpnA*(P1: LPCSTR, P2: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrCSpnW*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrCSpnIA*(P1: LPCSTR, P2: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrCSpnIW*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrDupA*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrDupW*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrFormatByteSize64A*(P1: LONGLONG, P2: LPSTR, P3: UINT): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrFormatByteSizeA*(P1: DWORD, P2: LPSTR, P3: UINT): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrFormatByteSizeW*(P1: LONGLONG, P2: LPWSTR, P3: UINT): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrFormatKBSizeA*(P1: LONGLONG, P2: LPSTR, P3: UINT): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrFormatKBSizeW*(P1: LONGLONG, P2: LPWSTR, P3: UINT): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrFromTimeIntervalA*(P1: LPSTR, P2: UINT, P3: DWORD, P4: int32): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrFromTimeIntervalW*(P1: LPWSTR, P2: UINT, P3: DWORD, P4: int32): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrIsIntlEqualA*(P1: BOOL, P2: LPCSTR, P3: LPCSTR, P4: int32): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc StrIsIntlEqualW*(P1: BOOL, P2: LPCWSTR, P3: LPCWSTR, P4: int32): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc StrNCatA*(P1: LPSTR, P2: LPCSTR, P3: int32): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrNCatW*(P1: LPWSTR, P2: LPCWSTR, P3: int32): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrPBrkA*(P1: LPCSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrPBrkW*(P1: LPCWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrRChrA*(P1: LPCSTR, P2: LPCSTR, P3: WORD): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrRChrW*(P1: LPCWSTR, P2: LPCWSTR, P3: WCHAR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrRChrIA*(P1: LPCSTR, P2: LPCSTR, P3: WORD): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrRChrIW*(P1: LPCWSTR, P2: LPCWSTR, P3: WCHAR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrRStrIA*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrRStrIW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrSpnA*(P1: LPCSTR, P2: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrSpnW*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrStrA*(P1: LPCSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrStrIA*(P1: LPCSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrStrIW*(P1: LPCWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrStrW*(P1: LPCWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrToIntA*(P1: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrToIntW*(P1: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrToIntExA*(P1: LPCSTR, P2: DWORD, P3: ptr int32): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc StrToIntExW*(P1: LPCWSTR, P2: DWORD, P3: ptr int32): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc StrTrimA*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc StrTrimW*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathAddBackslashA*(P1: LPSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathAddBackslashW*(P1: LPWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathAddExtensionA*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathAddExtensionW*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathAppendA*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathAppendW*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathBuildRootA*(P1: LPSTR, P2: int32): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathBuildRootW*(P1: LPWSTR, P2: int32): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathCanonicalizeA*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathCanonicalizeW*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathCombineA*(P1: LPSTR, P2: LPCSTR, P3: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathCombineW*(P1: LPWSTR, P2: LPCWSTR, P3: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathCommonPrefixA*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc PathCommonPrefixW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc PathCompactPathA*(P1: HDC, P2: LPSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathCompactPathW*(P1: HDC, P2: LPWSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathCompactPathExA*(P1: LPSTR, P2: LPCSTR, P3: UINT, P4: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathCompactPathExW*(P1: LPWSTR, P2: LPCWSTR, P3: UINT, P4: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathCreateFromUrlA*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc PathCreateFromUrlW*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc PathFileExistsA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathFileExistsW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathFindExtensionA*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathFindExtensionW*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathFindFileNameA*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathFindFileNameW*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathFindNextComponentA*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathFindNextComponentW*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathFindOnPathA*(P1: LPSTR, P2: ptr LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathFindOnPathW*(P1: LPWSTR, P2: ptr LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathFindSuffixArrayA*(P1: LPCSTR, P2: ptr LPCSTR, P3: int32): LPCSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathFindSuffixArrayW*(P1: LPCWSTR, P2: ptr LPCWSTR, P3: int32): LPCWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathGetArgsA*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathGetArgsW*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathGetCharTypeA*(P1: UCHAR): UINT {.winapi, dynlib: "shlwapi", importc.}
proc PathGetCharTypeW*(P1: WCHAR): UINT {.winapi, dynlib: "shlwapi", importc.}
proc PathGetDriveNumberA*(P1: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc PathGetDriveNumberW*(P1: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc PathIsContentTypeA*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsContentTypeW*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsDirectoryA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsDirectoryEmptyA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsDirectoryEmptyW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsDirectoryW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsFileSpecA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsFileSpecW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsLFNFileSpecA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsLFNFileSpecW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsNetworkPathA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsNetworkPathW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsPrefixA*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsPrefixW*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsRelativeA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsRelativeW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsRootA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsRootW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsSameRootA*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsSameRootW*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsSystemFolderA*(P1: LPCSTR, P2: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsSystemFolderW*(P1: LPCWSTR, P2: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsUNCA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsUNCServerA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsUNCServerShareA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsUNCServerShareW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsUNCServerW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsUNCW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsURLA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsURLW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathMakePrettyA*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathMakePrettyW*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathMakeSystemFolderA*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathMakeSystemFolderW*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathMatchSpecA*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathMatchSpecW*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathParseIconLocationA*(P1: LPSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc PathParseIconLocationW*(P1: LPWSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc PathQuoteSpacesA*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathQuoteSpacesW*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathRelativePathToA*(P1: LPSTR, P2: LPCSTR, P3: DWORD, P4: LPCSTR, P5: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathRelativePathToW*(P1: LPWSTR, P2: LPCWSTR, P3: DWORD, P4: LPCWSTR, P5: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveArgsA*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveArgsW*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveBackslashA*(P1: LPSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveBackslashW*(P1: LPWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveBlanksA*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveBlanksW*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveExtensionA*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveExtensionW*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveFileSpecA*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveFileSpecW*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathRenameExtensionA*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathRenameExtensionW*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathSearchAndQualifyA*(P1: LPCSTR, P2: LPSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathSearchAndQualifyW*(P1: LPCWSTR, P2: LPWSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathSetDlgItemPathA*(P1: HWND, P2: int32, P3: LPCSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathSetDlgItemPathW*(P1: HWND, P2: int32, P3: LPCWSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathSkipRootA*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathSkipRootW*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathStripPathA*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathStripPathW*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathStripToRootA*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathStripToRootW*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathUndecorateA*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathUndecorateW*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathUnExpandEnvStringsA*(P1: LPCSTR, P2: LPSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathUnExpandEnvStringsW*(P1: LPCWSTR, P2: LPWSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathUnmakeSystemFolderA*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathUnmakeSystemFolderW*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathUnquoteSpacesA*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathUnquoteSpacesW*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc SHAutoComplete*(P1: HWND, P2: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc SHCreateThread*(P1: LPTHREAD_START_ROUTINE, P2: pointer, P3: DWORD, P4: LPTHREAD_START_ROUTINE): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc SHCopyKeyA*(P1: HKEY, P2: LPCSTR, P3: HKEY, P4: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHCopyKeyW*(P1: HKEY, P2: LPCWSTR, P3: HKEY, P4: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHDeleteEmptyKeyA*(P1: HKEY, P2: LPCSTR): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHDeleteEmptyKeyW*(P1: HKEY, P2: LPCWSTR): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHDeleteKeyA*(P1: HKEY, P2: LPCSTR): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHDeleteKeyW*(P1: HKEY, P2: LPCWSTR): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHEnumKeyExA*(P1: HKEY, P2: DWORD, P3: LPSTR, P4: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHEnumKeyExW*(P1: HKEY, P2: DWORD, P3: LPWSTR, P4: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHQueryInfoKeyA*(P1: HKEY, P2: LPDWORD, P3: LPDWORD, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHQueryInfoKeyW*(P1: HKEY, P2: LPDWORD, P3: LPDWORD, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHQueryValueExA*(P1: HKEY, P2: LPCSTR, P3: LPDWORD, P4: LPDWORD, P5: LPVOID, P6: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHQueryValueExW*(P1: HKEY, P2: LPCWSTR, P3: LPDWORD, P4: LPDWORD, P5: LPVOID, P6: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHGetThreadRef*(P1: ptr ptr IUnknown): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc SHSetThreadRef*(P1: ptr IUnknown): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc SHSkipJunction*(P1: ptr IBindCtx, P2: ptr CLSID): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc SHEnumValueA*(P1: HKEY, P2: DWORD, P3: LPSTR, P4: LPDWORD, P5: LPDWORD, P6: LPVOID, P7: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHEnumValueW*(P1: HKEY, P2: DWORD, P3: LPWSTR, P4: LPDWORD, P5: LPDWORD, P6: LPVOID, P7: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHGetValueA*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: LPDWORD, P5: LPVOID, P6: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHGetValueW*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: LPDWORD, P5: LPVOID, P6: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHSetValueA*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: LPCVOID, P6: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHSetValueW*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: LPCVOID, P6: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHDeleteValueA*(P1: HKEY, P2: LPCSTR, P3: LPCSTR): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHDeleteValueW*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc AssocCreate*(P1: CLSID, P2: ptr IID, P3: ptr LPVOID): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc AssocQueryKeyA*(P1: ASSOCF, P2: ASSOCKEY, P3: LPCSTR, P4: LPCSTR, P5: ptr HKEY): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc AssocQueryKeyW*(P1: ASSOCF, P2: ASSOCKEY, P3: LPCWSTR, P4: LPCWSTR, P5: ptr HKEY): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc AssocQueryStringA*(P1: ASSOCF, P2: ASSOCSTR, P3: LPCSTR, P4: LPCSTR, P5: LPSTR, P6: ptr DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc AssocQueryStringByKeyA*(P1: ASSOCF, P2: ASSOCSTR, P3: HKEY, P4: LPCSTR, P5: LPSTR, P6: ptr DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc AssocQueryStringByKeyW*(P1: ASSOCF, P2: ASSOCSTR, P3: HKEY, P4: LPCWSTR, P5: LPWSTR, P6: ptr DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc AssocQueryStringW*(P1: ASSOCF, P2: ASSOCSTR, P3: LPCWSTR, P4: LPCWSTR, P5: LPWSTR, P6: ptr DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlApplySchemeA*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlApplySchemeW*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlCanonicalizeA*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlCanonicalizeW*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlCombineA*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: LPDWORD, P5: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlCombineW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: LPDWORD, P5: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlCompareA*(P1: LPCSTR, P2: LPCSTR, P3: BOOL): int32 {.winapi, dynlib: "shlwapi", importc.}
proc UrlCompareW*(P1: LPCWSTR, P2: LPCWSTR, P3: BOOL): int32 {.winapi, dynlib: "shlwapi", importc.}
proc UrlCreateFromPathA*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlCreateFromPathW*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlEscapeA*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlEscapeW*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlGetLocationA*(P1: LPCSTR): LPCSTR {.winapi, dynlib: "shlwapi", importc.}
proc UrlGetLocationW*(P1: LPCWSTR): LPCWSTR {.winapi, dynlib: "shlwapi", importc.}
proc UrlGetPartA*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD, P5: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlGetPartW*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD, P5: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlHashA*(P1: LPCSTR, P2: LPBYTE, P3: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlHashW*(P1: LPCWSTR, P2: LPBYTE, P3: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlIsA*(P1: LPCSTR, P2: TURLIS): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc UrlIsW*(P1: LPCWSTR, P2: TURLIS): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc UrlIsNoHistoryA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc UrlIsNoHistoryW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc UrlIsOpaqueA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc UrlIsOpaqueW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc UrlUnescapeA*(P1: LPSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlUnescapeW*(P1: LPWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc SHRegCloseUSKey*(P1: HUSKEY): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegCreateUSKeyA*(P1: LPCSTR, P2: REGSAM, P3: HUSKEY, P4: PHUSKEY, P5: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegCreateUSKeyW*(P1: LPCWSTR, P2: REGSAM, P3: HUSKEY, P4: PHUSKEY, P5: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegDeleteEmptyUSKeyA*(P1: HUSKEY, P2: LPCSTR, P3: SHREGDEL_FLAGS): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegDeleteEmptyUSKeyW*(P1: HUSKEY, P2: LPCWSTR, P3: SHREGDEL_FLAGS): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegDeleteUSValueA*(P1: HUSKEY, P2: LPCSTR, P3: SHREGDEL_FLAGS): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegDeleteUSValueW*(P1: HUSKEY, P2: LPCWSTR, P3: SHREGDEL_FLAGS): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegDuplicateHKey*(P1: HKEY): HKEY {.winapi, dynlib: "shlwapi", importc.}
proc SHRegEnumUSKeyA*(P1: HUSKEY, P2: DWORD, P3: LPSTR, P4: LPDWORD, P5: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegEnumUSKeyW*(P1: HUSKEY, P2: DWORD, P3: LPWSTR, P4: LPDWORD, P5: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegEnumUSValueA*(P1: HUSKEY, P2: DWORD, P3: LPSTR, P4: LPDWORD, P5: LPDWORD, P6: LPVOID, P7: LPDWORD, P8: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegEnumUSValueW*(P1: HUSKEY, P2: DWORD, P3: LPWSTR, P4: LPDWORD, P5: LPDWORD, P6: LPVOID, P7: LPDWORD, P8: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegGetBoolUSValueA*(P1: LPCSTR, P2: LPCSTR, P3: BOOL, P4: BOOL): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc SHRegGetBoolUSValueW*(P1: LPCWSTR, P2: LPCWSTR, P3: BOOL, P4: BOOL): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc SHRegGetPathA*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: LPSTR, P5: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegGetPathW*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegGetUSValueA*(P1: LPCSTR, P2: LPCSTR, P3: LPDWORD, P4: LPVOID, P5: LPDWORD, P6: BOOL, P7: LPVOID, P8: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegGetUSValueW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPDWORD, P4: LPVOID, P5: LPDWORD, P6: BOOL, P7: LPVOID, P8: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegOpenUSKeyA*(P1: LPCSTR, P2: REGSAM, P3: HUSKEY, P4: PHUSKEY, P5: BOOL): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegOpenUSKeyW*(P1: LPCWSTR, P2: REGSAM, P3: HUSKEY, P4: PHUSKEY, P5: BOOL): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegQueryInfoUSKeyA*(P1: HUSKEY, P2: LPDWORD, P3: LPDWORD, P4: LPDWORD, P5: LPDWORD, P6: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegQueryInfoUSKeyW*(P1: HUSKEY, P2: LPDWORD, P3: LPDWORD, P4: LPDWORD, P5: LPDWORD, P6: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegQueryUSValueA*(P1: HUSKEY, P2: LPCSTR, P3: LPDWORD, P4: LPVOID, P5: LPDWORD, P6: BOOL, P7: LPVOID, P8: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegQueryUSValueW*(P1: HUSKEY, P2: LPCWSTR, P3: LPDWORD, P4: LPVOID, P5: LPDWORD, P6: BOOL, P7: LPVOID, P8: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegSetPathA*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR, P5: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegSetPathW*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR, P5: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegSetUSValueA*(P1: LPCSTR, P2: LPCSTR, P3: DWORD, P4: LPVOID, P5: DWORD, P6: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegSetUSValueW*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: LPVOID, P5: DWORD, P6: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegWriteUSValueA*(P1: HUSKEY, P2: LPCSTR, P3: DWORD, P4: LPVOID, P5: DWORD, P6: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegWriteUSValueW*(P1: HUSKEY, P2: LPCWSTR, P3: DWORD, P4: LPVOID, P5: DWORD, P6: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc HashData*(P1: LPBYTE, P2: DWORD, P3: LPBYTE, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc SHCreateShellPalette*(P1: HDC): HPALETTE {.winapi, dynlib: "shlwapi", importc.}
proc ColorHLSToRGB*(P1: WORD, P2: WORD, P3: WORD): COLORREF {.winapi, dynlib: "shlwapi", importc.}
proc ColorAdjustLuma*(P1: COLORREF, P2: int32, P3: BOOL): COLORREF {.winapi, dynlib: "shlwapi", importc.}
proc ColorRGBToHLS*(P1: COLORREF, P2: ptr WORD, P3: ptr WORD, P4: ptr WORD): void {.winapi, dynlib: "shlwapi", importc.}
proc MLLoadLibraryA*(P1: LPCSTR, P2: HANDLE, P3: DWORD, P4: LPCSTR, P5: BOOL): HINSTANCE {.winapi, dynlib: "shlwapi", importc.}
proc MLLoadLibraryW*(P1: LPCWSTR, P2: HANDLE, P3: DWORD, P4: LPCWSTR, P5: BOOL): HINSTANCE {.winapi, dynlib: "shlwapi", importc.}
proc DllInstall*(P1: BOOL, P2: LPCWSTR): HRESULT {.winapi, dynlib: "shell32", importc.}
proc StrRetToBufA*(P1: LPSTRRET, P2: LPCITEMIDLIST, P3: LPSTR, P4: UINT): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc StrRetToBufW*(P1: LPSTRRET, P2: LPCITEMIDLIST, P3: LPWSTR, P4: UINT): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc StrRetToStrA*(P1: LPSTRRET, P2: LPCITEMIDLIST, P3: ptr LPSTR): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc StrRetToStrW*(P1: LPSTRRET, P2: LPCITEMIDLIST, P3: ptr LPWSTR): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc SHCreateStreamOnFileA*(P1: LPCSTR, P2: DWORD, P3: ptr ptr IStream): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc SHCreateStreamOnFileW*(P1: LPCWSTR, P2: DWORD, P3: ptr ptr IStream): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc SHOpenRegStream2A*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: DWORD): ptr IStream {.winapi, dynlib: "shlwapi", importc.}
proc SHOpenRegStream2W*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD): ptr IStream {.winapi, dynlib: "shlwapi", importc.}
proc SHOpenRegStreamA*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: DWORD): ptr IStream {.winapi, dynlib: "shlwapi", importc.}
proc SHOpenRegStreamW*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD): ptr IStream {.winapi, dynlib: "shlwapi", importc.}

proc IntlStrEqNA*(pStr1: LPCSTR, pStr2: LPCSTR, nChar: int32): BOOL = IntlStrEqWorkerA(TRUE , pStr1 , pStr2 , nChar)
proc IntlStrEqNW*(pStr1: LPCWSTR, pStr2: LPCWSTR, nChar: int32): BOOL = IntlStrEqWorkerW(TRUE , pStr1 , pStr2 , nChar)
proc IntlStrEqNIA*(pStr1: LPCSTR, pStr2: LPCSTR, nChar: int32): BOOL = IntlStrEqWorkerA(FALSE , pStr1 , pStr2 , nChar)
proc IntlStrEqNIW*(pStr1: LPCWSTR, pStr2: LPCWSTR, nChar: int32): BOOL = IntlStrEqWorkerW(FALSE , pStr1 , pStr2 , nChar)
proc UrlIsFileUrlA*(pszURL: LPCSTR): BOOL = UrlIsA(pszURL , TURLIS_FILEURL)
proc UrlIsFileUrlW*(pszURL: LPCWSTR): BOOL = UrlIsW(pszURL , TURLIS_FILEURL)
proc UrlUnescapeInPlaceA*(pszUrl: LPSTR, dwFlags: DWORD): HRESULT = UrlUnescapeA(pszUrl , nil , nil , dwFlags or CURL_UNESCAPE_INPLACE)
proc UrlUnescapeInPlaceW*(pszUrl: LPWSTR, dwFlags: DWORD): HRESULT = UrlUnescapeW(pszUrl , nil , nil , dwFlags or CURL_UNESCAPE_INPLACE)

when not defined(winansi):
  proc ChrCmpI*(P1: WCHAR, P2: WCHAR): BOOL {.winapi, dynlib: "shlwapi", importc: "ChrCmpIW".}

  const
    IntlStrEqN* = IntlStrEqNW
    IntlStrEqNI* = IntlStrEqNIW

  proc IntlStrEqWorker*(P1: BOOL, P2: LPCWSTR, P3: LPCWSTR, P4: int32): BOOL {.winapi, dynlib: "shlwapi", importc: "IntlStrEqWorkerW".}
  proc SHStrDup*(P1: LPCWSTR, P2: ptr LPWSTR): HRESULT {.winapi, dynlib: "shlwapi", importc: "SHStrDupW".}
  proc StrCat*(P1: LPWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrCatW".}
  proc StrCatBuff*(P1: LPWSTR, P2: LPCWSTR, P3: int32): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrCatBuffW".}
  proc StrChr*(P1: LPCWSTR, P2: WCHAR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrChrW".}
  proc StrChrI*(P1: LPCWSTR, P2: WCHAR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrChrIW".}
  proc StrCmp*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrCmpW".}
  proc StrCmpI*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrCmpIW".}
  proc StrCmpNI*(P1: LPCWSTR, P2: LPCWSTR, P3: int32): int32 {.winapi, dynlib: "shlwapi", importc: "StrCmpNIW".}
  proc StrCmpN*(P1: LPCWSTR, P2: LPCWSTR, P3: int32): int32 {.winapi, dynlib: "shlwapi", importc: "StrCmpNW".}
  proc StrCpyN*(P1: LPWSTR, P2: LPCWSTR, P3: int32): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrCpyNW".}
  proc StrCpy*(P1: LPWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrCpyW".}
  proc StrCSpnI*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrCSpnIW".}
  proc StrCSpn*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrCSpnW".}
  proc StrDup*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrDupW".}
  proc StrFormatByteSize*(P1: LONGLONG, P2: LPWSTR, P3: UINT): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrFormatByteSizeW".}
  proc StrFormatKBSize*(P1: LONGLONG, P2: LPWSTR, P3: UINT): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrFormatKBSizeW".}
  proc StrFromTimeInterval*(P1: LPWSTR, P2: UINT, P3: DWORD, P4: int32): int32 {.winapi, dynlib: "shlwapi", importc: "StrFromTimeIntervalW".}
  proc StrIsIntlEqual*(P1: BOOL, P2: LPCWSTR, P3: LPCWSTR, P4: int32): BOOL {.winapi, dynlib: "shlwapi", importc: "StrIsIntlEqualW".}
  proc StrNCat*(P1: LPWSTR, P2: LPCWSTR, P3: int32): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrNCatW".}
  proc StrPBrk*(P1: LPCWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrPBrkW".}
  proc StrRChr*(P1: LPCWSTR, P2: LPCWSTR, P3: WCHAR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrRChrW".}
  proc StrRChrI*(P1: LPCWSTR, P2: LPCWSTR, P3: WCHAR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrRChrIW".}
  proc StrRetToBuf*(P1: LPSTRRET, P2: LPCITEMIDLIST, P3: LPWSTR, P4: UINT): HRESULT {.winapi, dynlib: "shlwapi", importc: "StrRetToBufW".}
  proc StrRetToStr*(P1: LPSTRRET, P2: LPCITEMIDLIST, P3: ptr LPWSTR): HRESULT {.winapi, dynlib: "shlwapi", importc: "StrRetToStrW".}
  proc StrRStrI*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrRStrIW".}
  proc StrSpn*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrSpnW".}
  proc StrStrI*(P1: LPCWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrStrIW".}
  proc StrStr*(P1: LPCWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrStrW".}
  proc StrToInt*(P1: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrToIntW".}
  proc StrToIntEx*(P1: LPCWSTR, P2: DWORD, P3: ptr int32): BOOL {.winapi, dynlib: "shlwapi", importc: "StrToIntExW".}
  proc StrTrim*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "StrTrimW".}
  proc PathAddBackslash*(P1: LPWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "PathAddBackslashW".}
  proc PathAddExtension*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathAddExtensionW".}
  proc PathAppend*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathAppendW".}
  proc PathBuildRoot*(P1: LPWSTR, P2: int32): LPWSTR {.winapi, dynlib: "shlwapi", importc: "PathBuildRootW".}
  proc PathCanonicalize*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathCanonicalizeW".}
  proc PathCombine*(P1: LPWSTR, P2: LPCWSTR, P3: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "PathCombineW".}
  proc PathCommonPrefix*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR): int32 {.winapi, dynlib: "shlwapi", importc: "PathCommonPrefixW".}
  proc PathCompactPath*(P1: HDC, P2: LPWSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc: "PathCompactPathW".}
  proc PathCompactPathEx*(P1: LPWSTR, P2: LPCWSTR, P3: UINT, P4: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc: "PathCompactPathExW".}
  proc PathCreateFromUrl*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "PathCreateFromUrlW".}
  proc PathFileExists*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathFileExistsW".}
  proc PathFindExtension*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "PathFindExtensionW".}
  proc PathFindFileName*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "PathFindFileNameW".}
  proc PathFindNextComponent*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "PathFindNextComponentW".}
  proc PathFindOnPath*(P1: LPWSTR, P2: ptr LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathFindOnPathW".}
  proc PathFindSuffixArray*(P1: LPCWSTR, P2: ptr LPCWSTR, P3: int32): LPCWSTR {.winapi, dynlib: "shlwapi", importc: "PathFindSuffixArrayW".}
  proc PathGetArgs*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "PathGetArgsW".}
  proc PathGetCharType*(P1: WCHAR): UINT {.winapi, dynlib: "shlwapi", importc: "PathGetCharTypeW".}
  proc PathGetDriveNumber*(P1: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc: "PathGetDriveNumberW".}
  proc PathIsContentType*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsContentTypeW".}
  proc PathIsDirectoryEmpty*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsDirectoryEmptyW".}
  proc PathIsDirectory*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsDirectoryW".}
  proc PathIsFileSpec*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsFileSpecW".}
  proc PathIsLFNFileSpec*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsLFNFileSpecW".}
  proc PathIsNetworkPath*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsNetworkPathW".}
  proc PathIsPrefix*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsPrefixW".}
  proc PathIsRelative*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsRelativeW".}
  proc PathIsRoot*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsRootW".}
  proc PathIsSameRoot*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsSameRootW".}
  proc PathIsSystemFolder*(P1: LPCWSTR, P2: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsSystemFolderW".}
  proc PathIsUNCServerShare*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsUNCServerShareW".}
  proc PathIsUNCServer*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsUNCServerW".}
  proc PathIsUNC*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsUNCW".}
  proc PathIsURL*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsURLW".}
  proc PathMakePretty*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathMakePrettyW".}
  proc PathMakeSystemFolder*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathMakeSystemFolderW".}
  proc PathMatchSpec*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathMatchSpecW".}
  proc PathParseIconLocation*(P1: LPWSTR): int32 {.winapi, dynlib: "shlwapi", importc: "PathParseIconLocationW".}
  proc PathQuoteSpaces*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc: "PathQuoteSpacesW".}
  proc PathRelativePathTo*(P1: LPWSTR, P2: LPCWSTR, P3: DWORD, P4: LPCWSTR, P5: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc: "PathRelativePathToW".}
  proc PathRemoveArgs*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc: "PathRemoveArgsW".}
  proc PathRemoveBackslash*(P1: LPWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "PathRemoveBackslashW".}
  proc PathRemoveBlanks*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc: "PathRemoveBlanksW".}
  proc PathRemoveExtension*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc: "PathRemoveExtensionW".}
  proc PathRemoveFileSpec*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathRemoveFileSpecW".}
  proc PathRenameExtension*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathRenameExtensionW".}
  proc PathSearchAndQualify*(P1: LPCWSTR, P2: LPWSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc: "PathSearchAndQualifyW".}
  proc PathSetDlgItemPath*(P1: HWND, P2: int32, P3: LPCWSTR): void {.winapi, dynlib: "shlwapi", importc: "PathSetDlgItemPathW".}
  proc PathSkipRoot*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "PathSkipRootW".}
  proc PathStripPath*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc: "PathStripPathW".}
  proc PathStripToRoot*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathStripToRootW".}
  proc PathUndecorate*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc: "PathUndecorateW".}
  proc PathUnExpandEnvStrings*(P1: LPCWSTR, P2: LPWSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc: "PathUnExpandEnvStringsW".}
  proc PathUnmakeSystemFolder*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathUnmakeSystemFolderW".}
  proc PathUnquoteSpaces*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc: "PathUnquoteSpacesW".}
  proc SHCreateStreamOnFile*(P1: LPCWSTR, P2: DWORD, P3: ptr ptr IStream): HRESULT {.winapi, dynlib: "shlwapi", importc: "SHCreateStreamOnFileW".}
  proc SHOpenRegStream*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD): ptr IStream {.winapi, dynlib: "shlwapi", importc: "SHOpenRegStreamW".}
  proc SHOpenRegStream2*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD): ptr IStream {.winapi, dynlib: "shlwapi", importc: "SHOpenRegStream2W".}
  proc SHCopyKey*(P1: HKEY, P2: LPCWSTR, P3: HKEY, P4: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHCopyKeyW".}
  proc SHDeleteEmptyKey*(P1: HKEY, P2: LPCWSTR): DWORD {.winapi, dynlib: "shlwapi", importc: "SHDeleteEmptyKeyW".}
  proc SHDeleteKey*(P1: HKEY, P2: LPCWSTR): DWORD {.winapi, dynlib: "shlwapi", importc: "SHDeleteKeyW".}
  proc SHEnumKeyEx*(P1: HKEY, P2: DWORD, P3: LPWSTR, P4: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHEnumKeyExW".}
  proc SHQueryInfoKey*(P1: HKEY, P2: LPDWORD, P3: LPDWORD, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHQueryInfoKeyW".}
  proc SHQueryValueEx*(P1: HKEY, P2: LPCWSTR, P3: LPDWORD, P4: LPDWORD, P5: LPVOID, P6: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHQueryValueExW".}
  proc SHEnumValue*(P1: HKEY, P2: DWORD, P3: LPWSTR, P4: LPDWORD, P5: LPDWORD, P6: LPVOID, P7: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHEnumValueW".}
  proc SHGetValue*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: LPDWORD, P5: LPVOID, P6: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHGetValueW".}
  proc SHSetValue*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: LPCVOID, P6: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHSetValueW".}
  proc SHDeleteValue*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR): DWORD {.winapi, dynlib: "shlwapi", importc: "SHDeleteValueW".}
  proc AssocQueryKey*(P1: ASSOCF, P2: ASSOCKEY, P3: LPCWSTR, P4: LPCWSTR, P5: ptr HKEY): HRESULT {.winapi, dynlib: "shlwapi", importc: "AssocQueryKeyW".}
  proc AssocQueryStringByKey*(P1: ASSOCF, P2: ASSOCSTR, P3: HKEY, P4: LPCWSTR, P5: LPWSTR, P6: ptr DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "AssocQueryStringByKeyW".}
  proc AssocQueryString*(P1: ASSOCF, P2: ASSOCSTR, P3: LPCWSTR, P4: LPCWSTR, P5: LPWSTR, P6: ptr DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "AssocQueryStringW".}
  proc UrlApplyScheme*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlApplySchemeW".}
  proc UrlCanonicalize*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlCanonicalizeW".}
  proc UrlCombine*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: LPDWORD, P5: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlCombineW".}
  proc UrlCompare*(P1: LPCWSTR, P2: LPCWSTR, P3: BOOL): int32 {.winapi, dynlib: "shlwapi", importc: "UrlCompareW".}
  proc UrlCreateFromPath*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlCreateFromPathW".}
  proc UrlEscape*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlEscapeW".}
  proc UrlGetLocation*(P1: LPCWSTR): LPCWSTR {.winapi, dynlib: "shlwapi", importc: "UrlGetLocationW".}
  proc UrlGetPart*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD, P5: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlGetPartW".}
  proc UrlHash*(P1: LPCWSTR, P2: LPBYTE, P3: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlHashW".}
  proc UrlIs*(P1: LPCWSTR, P2: TURLIS): BOOL {.winapi, dynlib: "shlwapi", importc: "UrlIsW".}

  const
    UrlIsFileUrl* = UrlIsFileUrlW

  proc UrlIsNoHistory*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "UrlIsNoHistoryW".}
  proc UrlIsOpaque*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "UrlIsOpaqueW".}
  proc UrlUnescape*(P1: LPWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlUnescapeW".}

  const
    UrlUnescapeInPlace* = UrlUnescapeInPlaceW

  proc SHRegCreateUSKey*(P1: LPCWSTR, P2: REGSAM, P3: HUSKEY, P4: PHUSKEY, P5: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegCreateUSKeyW".}
  proc SHRegDeleteEmptyUSKey*(P1: HUSKEY, P2: LPCWSTR, P3: SHREGDEL_FLAGS): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegDeleteEmptyUSKeyW".}
  proc SHRegDeleteUSValue*(P1: HUSKEY, P2: LPCWSTR, P3: SHREGDEL_FLAGS): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegDeleteUSValueW".}
  proc SHRegEnumUSKey*(P1: HUSKEY, P2: DWORD, P3: LPWSTR, P4: LPDWORD, P5: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegEnumUSKeyW".}
  proc SHRegEnumUSValue*(P1: HUSKEY, P2: DWORD, P3: LPWSTR, P4: LPDWORD, P5: LPDWORD, P6: LPVOID, P7: LPDWORD, P8: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegEnumUSValueW".}
  proc SHRegGetBoolUSValue*(P1: LPCWSTR, P2: LPCWSTR, P3: BOOL, P4: BOOL): BOOL {.winapi, dynlib: "shlwapi", importc: "SHRegGetBoolUSValueW".}
  proc SHRegGetPath*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegGetPathW".}
  proc SHRegGetUSValue*(P1: LPCWSTR, P2: LPCWSTR, P3: LPDWORD, P4: LPVOID, P5: LPDWORD, P6: BOOL, P7: LPVOID, P8: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegGetUSValueW".}
  proc SHRegOpenUSKey*(P1: LPCWSTR, P2: REGSAM, P3: HUSKEY, P4: PHUSKEY, P5: BOOL): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegOpenUSKeyW".}
  proc SHRegQueryInfoUSKey*(P1: HUSKEY, P2: LPDWORD, P3: LPDWORD, P4: LPDWORD, P5: LPDWORD, P6: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegQueryInfoUSKeyW".}
  proc SHRegQueryUSValue*(P1: HUSKEY, P2: LPCWSTR, P3: LPDWORD, P4: LPVOID, P5: LPDWORD, P6: BOOL, P7: LPVOID, P8: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegQueryUSValueW".}
  proc SHRegSetPath*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR, P5: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegSetPathW".}
  proc SHRegSetUSValue*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: LPVOID, P5: DWORD, P6: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegSetUSValueW".}
  proc SHRegWriteUSValue*(P1: HUSKEY, P2: LPCWSTR, P3: DWORD, P4: LPVOID, P5: DWORD, P6: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegWriteUSValueW".}

else:
  proc ChrCmpI*(P1: WORD, P2: WORD): BOOL {.winapi, dynlib: "shlwapi", importc: "ChrCmpIA".}

  const
    IntlStrEqN* = IntlStrEqNA
    IntlStrEqNI* = IntlStrEqNIA

  proc IntlStrEqWorker*(P1: BOOL, P2: LPCSTR, P3: LPCSTR, P4: int32): BOOL {.winapi, dynlib: "shlwapi", importc: "IntlStrEqWorkerA".}
  proc SHStrDup*(P1: LPCSTR, P2: ptr LPWSTR): HRESULT {.winapi, dynlib: "shlwapi", importc: "SHStrDupA".}
  proc StrCatBuff*(P1: LPSTR, P2: LPCSTR, P3: int32): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrCatBuffA".}
  proc StrChr*(P1: LPCSTR, P2: WORD): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrChrA".}
  proc StrChrI*(P1: LPCSTR, P2: WORD): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrChrIA".}
  proc StrCmpNI*(P1: LPCSTR, P2: LPCSTR, P3: int32): int32 {.winapi, dynlib: "shlwapi", importc: "StrCmpNIA".}
  proc StrCmpN*(P1: LPCSTR, P2: LPCSTR, P3: int32): int32 {.winapi, dynlib: "shlwapi", importc: "StrCmpNA".}
  proc StrCSpnI*(P1: LPCSTR, P2: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrCSpnIA".}
  proc StrCSpn*(P1: LPCSTR, P2: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrCSpnA".}
  proc StrDup*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrDupA".}
  proc StrFormatByteSize*(P1: DWORD, P2: LPSTR, P3: UINT): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrFormatByteSizeA".}
  proc StrFormatKBSize*(P1: LONGLONG, P2: LPSTR, P3: UINT): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrFormatKBSizeA".}
  proc StrFromTimeInterval*(P1: LPSTR, P2: UINT, P3: DWORD, P4: int32): int32 {.winapi, dynlib: "shlwapi", importc: "StrFromTimeIntervalA".}
  proc StrIsIntlEqual*(P1: BOOL, P2: LPCSTR, P3: LPCSTR, P4: int32): BOOL {.winapi, dynlib: "shlwapi", importc: "StrIsIntlEqualA".}
  proc StrNCat*(P1: LPSTR, P2: LPCSTR, P3: int32): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrNCatA".}
  proc StrPBrk*(P1: LPCSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrPBrkA".}
  proc StrRChr*(P1: LPCSTR, P2: LPCSTR, P3: WORD): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrRChrA".}
  proc StrRChrI*(P1: LPCSTR, P2: LPCSTR, P3: WORD): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrRChrIA".}
  proc StrRetToBuf*(P1: LPSTRRET, P2: LPCITEMIDLIST, P3: LPSTR, P4: UINT): HRESULT {.winapi, dynlib: "shlwapi", importc: "StrRetToBufA".}
  proc StrRetToStr*(P1: LPSTRRET, P2: LPCITEMIDLIST, P3: ptr LPSTR): HRESULT {.winapi, dynlib: "shlwapi", importc: "StrRetToStrA".}
  proc StrRStrI*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrRStrIA".}
  proc StrSpn*(P1: LPCSTR, P2: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrSpnA".}
  proc StrStrI*(P1: LPCSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrStrIA".}
  proc StrStr*(P1: LPCSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrStrA".}
  proc StrToInt*(P1: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrToIntA".}
  proc StrToIntEx*(P1: LPCSTR, P2: DWORD, P3: ptr int32): BOOL {.winapi, dynlib: "shlwapi", importc: "StrToIntExA".}
  proc StrTrim*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "StrTrimA".}
  proc PathAddBackslash*(P1: LPSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "PathAddBackslashA".}
  proc PathAddExtension*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathAddExtensionA".}
  proc PathAppend*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathAppendA".}
  proc PathBuildRoot*(P1: LPSTR, P2: int32): LPSTR {.winapi, dynlib: "shlwapi", importc: "PathBuildRootA".}
  proc PathCanonicalize*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathCanonicalizeA".}
  proc PathCombine*(P1: LPSTR, P2: LPCSTR, P3: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "PathCombineA".}
  proc PathCommonPrefix*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR): int32 {.winapi, dynlib: "shlwapi", importc: "PathCommonPrefixA".}
  proc PathCompactPath*(P1: HDC, P2: LPSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc: "PathCompactPathA".}
  proc PathCompactPathEx*(P1: LPSTR, P2: LPCSTR, P3: UINT, P4: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc: "PathCompactPathExA".}
  proc PathCreateFromUrl*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "PathCreateFromUrlA".}
  proc PathFileExists*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathFileExistsA".}
  proc PathFindExtension*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "PathFindExtensionA".}
  proc PathFindFileName*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "PathFindFileNameA".}
  proc PathFindNextComponent*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "PathFindNextComponentA".}
  proc PathFindOnPath*(P1: LPSTR, P2: ptr LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathFindOnPathA".}
  proc PathFindSuffixArray*(P1: LPCSTR, P2: ptr LPCSTR, P3: int32): LPCSTR {.winapi, dynlib: "shlwapi", importc: "PathFindSuffixArrayA".}
  proc PathGetArgs*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "PathGetArgsA".}
  proc PathGetCharType*(P1: UCHAR): UINT {.winapi, dynlib: "shlwapi", importc: "PathGetCharTypeA".}
  proc PathGetDriveNumber*(P1: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc: "PathGetDriveNumberA".}
  proc PathIsContentType*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsContentTypeA".}
  proc PathIsDirectoryEmpty*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsDirectoryEmptyA".}
  proc PathIsDirectory*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsDirectoryA".}
  proc PathIsFileSpec*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsFileSpecA".}
  proc PathIsLFNFileSpec*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsLFNFileSpecA".}
  proc PathIsNetworkPath*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsNetworkPathA".}
  proc PathIsPrefix*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsPrefixA".}
  proc PathIsRelative*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsRelativeA".}
  proc PathIsRoot*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsRootA".}
  proc PathIsSameRoot*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsSameRootA".}
  proc PathIsSystemFolder*(P1: LPCSTR, P2: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsSystemFolderA".}
  proc PathIsUNCServerShare*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsUNCServerShareA".}
  proc PathIsUNCServer*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsUNCServerA".}
  proc PathIsUNC*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsUNCA".}
  proc PathIsURL*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsURLA".}
  proc PathMakePretty*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathMakePrettyA".}
  proc PathMakeSystemFolder*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathMakeSystemFolderA".}
  proc PathMatchSpec*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathMatchSpecA".}
  proc PathParseIconLocation*(P1: LPSTR): int32 {.winapi, dynlib: "shlwapi", importc: "PathParseIconLocationA".}
  proc PathQuoteSpaces*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc: "PathQuoteSpacesA".}
  proc PathRelativePathTo*(P1: LPSTR, P2: LPCSTR, P3: DWORD, P4: LPCSTR, P5: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc: "PathRelativePathToA".}
  proc PathRemoveArgs*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc: "PathRemoveArgsA".}
  proc PathRemoveBackslash*(P1: LPSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "PathRemoveBackslashA".}
  proc PathRemoveBlanks*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc: "PathRemoveBlanksA".}
  proc PathRemoveExtension*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc: "PathRemoveExtensionA".}
  proc PathRemoveFileSpec*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathRemoveFileSpecA".}
  proc PathRenameExtension*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathRenameExtensionA".}
  proc PathSearchAndQualify*(P1: LPCSTR, P2: LPSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc: "PathSearchAndQualifyA".}
  proc PathSetDlgItemPath*(P1: HWND, P2: int32, P3: LPCSTR): void {.winapi, dynlib: "shlwapi", importc: "PathSetDlgItemPathA".}
  proc PathSkipRoot*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "PathSkipRootA".}
  proc PathStripPath*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc: "PathStripPathA".}
  proc PathStripToRoot*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathStripToRootA".}
  proc PathUndecorate*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc: "PathUndecorateA".}
  proc PathUnExpandEnvStrings*(P1: LPCSTR, P2: LPSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc: "PathUnExpandEnvStringsA".}
  proc PathUnmakeSystemFolder*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathUnmakeSystemFolderA".}
  proc PathUnquoteSpaces*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc: "PathUnquoteSpacesA".}
  proc SHCreateStreamOnFile*(P1: LPCSTR, P2: DWORD, P3: ptr ptr IStream): HRESULT {.winapi, dynlib: "shlwapi", importc: "SHCreateStreamOnFileA".}
  proc SHOpenRegStream*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: DWORD): ptr IStream {.winapi, dynlib: "shlwapi", importc: "SHOpenRegStreamA".}
  proc SHOpenRegStream2*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: DWORD): ptr IStream {.winapi, dynlib: "shlwapi", importc: "SHOpenRegStream2A".}
  proc SHCopyKey*(P1: HKEY, P2: LPCSTR, P3: HKEY, P4: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHCopyKeyA".}
  proc SHDeleteEmptyKey*(P1: HKEY, P2: LPCSTR): DWORD {.winapi, dynlib: "shlwapi", importc: "SHDeleteEmptyKeyA".}
  proc SHDeleteKey*(P1: HKEY, P2: LPCSTR): DWORD {.winapi, dynlib: "shlwapi", importc: "SHDeleteKeyA".}
  proc SHEnumKeyEx*(P1: HKEY, P2: DWORD, P3: LPSTR, P4: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHEnumKeyExA".}
  proc SHQueryInfoKey*(P1: HKEY, P2: LPDWORD, P3: LPDWORD, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHQueryInfoKeyA".}
  proc SHQueryValueEx*(P1: HKEY, P2: LPCSTR, P3: LPDWORD, P4: LPDWORD, P5: LPVOID, P6: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHQueryValueExA".}
  proc SHEnumValue*(P1: HKEY, P2: DWORD, P3: LPSTR, P4: LPDWORD, P5: LPDWORD, P6: LPVOID, P7: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHEnumValueA".}
  proc SHGetValue*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: LPDWORD, P5: LPVOID, P6: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHGetValueA".}
  proc SHSetValue*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: LPCVOID, P6: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHSetValueA".}
  proc SHDeleteValue*(P1: HKEY, P2: LPCSTR, P3: LPCSTR): DWORD {.winapi, dynlib: "shlwapi", importc: "SHDeleteValueA".}
  proc AssocQueryKey*(P1: ASSOCF, P2: ASSOCKEY, P3: LPCSTR, P4: LPCSTR, P5: ptr HKEY): HRESULT {.winapi, dynlib: "shlwapi", importc: "AssocQueryKeyA".}
  proc AssocQueryStringByKey*(P1: ASSOCF, P2: ASSOCSTR, P3: HKEY, P4: LPCSTR, P5: LPSTR, P6: ptr DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "AssocQueryStringByKeyA".}
  proc AssocQueryString*(P1: ASSOCF, P2: ASSOCSTR, P3: LPCSTR, P4: LPCSTR, P5: LPSTR, P6: ptr DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "AssocQueryStringA".}
  proc UrlApplyScheme*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlApplySchemeA".}
  proc UrlCanonicalize*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlCanonicalizeA".}
  proc UrlCombine*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: LPDWORD, P5: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlCombineA".}
  proc UrlCompare*(P1: LPCSTR, P2: LPCSTR, P3: BOOL): int32 {.winapi, dynlib: "shlwapi", importc: "UrlCompareA".}
  proc UrlCreateFromPath*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlCreateFromPathA".}
  proc UrlEscape*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlEscapeA".}
  proc UrlGetLocation*(P1: LPCSTR): LPCSTR {.winapi, dynlib: "shlwapi", importc: "UrlGetLocationA".}
  proc UrlGetPart*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD, P5: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlGetPartA".}
  proc UrlHash*(P1: LPCSTR, P2: LPBYTE, P3: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlHashA".}
  proc UrlIs*(P1: LPCSTR, P2: TURLIS): BOOL {.winapi, dynlib: "shlwapi", importc: "UrlIsA".}
  proc UrlIsNoHistory*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "UrlIsNoHistoryA".}
  proc UrlIsOpaque*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "UrlIsOpaqueA".}
  proc UrlUnescape*(P1: LPSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlUnescapeA".}

  const
    UrlUnescapeInPlace* = UrlUnescapeInPlaceA

  proc SHRegCreateUSKey*(P1: LPCSTR, P2: REGSAM, P3: HUSKEY, P4: PHUSKEY, P5: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegCreateUSKeyA".}
  proc SHRegDeleteEmptyUSKey*(P1: HUSKEY, P2: LPCSTR, P3: SHREGDEL_FLAGS): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegDeleteEmptyUSKeyA".}
  proc SHRegDeleteUSValue*(P1: HUSKEY, P2: LPCSTR, P3: SHREGDEL_FLAGS): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegDeleteUSValueA".}
  proc SHRegEnumUSKey*(P1: HUSKEY, P2: DWORD, P3: LPSTR, P4: LPDWORD, P5: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegEnumUSKeyA".}
  proc SHRegEnumUSValue*(P1: HUSKEY, P2: DWORD, P3: LPSTR, P4: LPDWORD, P5: LPDWORD, P6: LPVOID, P7: LPDWORD, P8: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegEnumUSValueA".}
  proc SHRegGetBoolUSValue*(P1: LPCSTR, P2: LPCSTR, P3: BOOL, P4: BOOL): BOOL {.winapi, dynlib: "shlwapi", importc: "SHRegGetBoolUSValueA".}
  proc SHRegGetPath*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: LPSTR, P5: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegGetPathA".}
  proc SHRegGetUSValue*(P1: LPCSTR, P2: LPCSTR, P3: LPDWORD, P4: LPVOID, P5: LPDWORD, P6: BOOL, P7: LPVOID, P8: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegGetUSValueA".}
  proc SHRegOpenUSKey*(P1: LPCSTR, P2: REGSAM, P3: HUSKEY, P4: PHUSKEY, P5: BOOL): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegOpenUSKeyA".}
  proc SHRegQueryInfoUSKey*(P1: HUSKEY, P2: LPDWORD, P3: LPDWORD, P4: LPDWORD, P5: LPDWORD, P6: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegQueryInfoUSKeyA".}
  proc SHRegQueryUSValue*(P1: HUSKEY, P2: LPCSTR, P3: LPDWORD, P4: LPVOID, P5: LPDWORD, P6: BOOL, P7: LPVOID, P8: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegQueryUSValueA".}
  proc SHRegSetPath*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR, P5: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegSetPathA".}
  proc SHRegSetUSValue*(P1: LPCSTR, P2: LPCSTR, P3: DWORD, P4: LPVOID, P5: DWORD, P6: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegSetUSValueA".}
  proc SHRegWriteUSValue*(P1: HUSKEY, P2: LPCSTR, P3: DWORD, P4: LPVOID, P5: DWORD, P6: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegWriteUSValueA".}

const
  StrToLong* = StrToInt


# objext/uuid_ext.nim

const
  IID_IExecuteCommand* = DEFINE_GUID(0x7f9185b0'u32, 0xcb92, 0x43c5, [0x80'u8, 0xa9, 0x92, 0x27, 0x7a, 0x4f, 0x7b, 0x54])
  IID_IShellTaskScheduler* = DEFINE_GUID(0x6ccb7be0'u32, 0x6807, 0x11d0, [0xb8'u8, 0x10, 0x00, 0xc0, 0x4f, 0xd7, 0x06, 0xec])
  IID_IQueryCodePage* = DEFINE_GUID(0xc7b236ce'u32, 0xee80, 0x11d0, [0x98'u8, 0x5f, 0x00, 0x60, 0x08, 0x05, 0x93, 0x82])
  IID_IEnumFullIDList* = DEFINE_GUID(0xd0191542'u32, 0x7954, 0x4908, [0xbc'u8, 0x06, 0xb2, 0x36, 0x0b, 0xbe, 0x45, 0xba])
  IID_IObjectWithFolderEnumMode* = DEFINE_GUID(0x6a9d9026'u32, 0x0e6e, 0x464c, [0xb0'u8, 0x00, 0x42, 0xec, 0xc0, 0x7d, 0xe6, 0x73])
  IID_IParseAndCreateItem* = DEFINE_GUID(0x67efed0e'u32, 0xe827, 0x4408, [0xb4'u8, 0x93, 0x78, 0xf3, 0x98, 0x2b, 0x68, 0x5c])
  IID_IFolderViewOptions* = DEFINE_GUID(0x3cc974d2'u32, 0xb302, 0x4d36, [0xad'u8, 0x3e, 0x06, 0xd9, 0x3f, 0x69, 0x5d, 0x3f])
  IID_IShellView3* = DEFINE_GUID(0xec39fa88'u32, 0xf8af, 0x41c5, [0x84'u8, 0x21, 0x38, 0xbe, 0xd2, 0x8f, 0x46, 0x73])
  IID_ISearchBoxInfo* = DEFINE_GUID(0x6af6e03f'u32, 0xd664, 0x4ef4, [0x96'u8, 0x26, 0xf7, 0xe0, 0xed, 0x36, 0x75, 0x5e])
  IID_IFolderView2* = DEFINE_GUID(0x1af3a467'u32, 0x214f, 0x4298, [0x90'u8, 0x8e, 0x06, 0xb0, 0x3e, 0x0b, 0x39, 0xf9])
  IID_IFolderViewSettings* = DEFINE_GUID(0xae8c987d'u32, 0x8797, 0x4ed3, [0xbe'u8, 0x72, 0x2a, 0x47, 0xdd, 0x93, 0x8d, 0xb0])
  IID_IPreviewHandlerVisuals* = DEFINE_GUID(0x196bf9a5'u32, 0xb346, 0x4ef0, [0xaa'u8, 0x1e, 0x5d, 0xcd, 0xb7, 0x67, 0x68, 0xb1])
  IID_IVisualProperties* = DEFINE_GUID(0xe693cf68'u32, 0xd967, 0x4112, [0x87'u8, 0x63, 0x99, 0x17, 0x2a, 0xee, 0x5e, 0x5a])
  IID_ICommDlgBrowser3* = DEFINE_GUID(0xc8ad25a1'u32, 0x3294, 0x41ee, [0x81'u8, 0x65, 0x71, 0x17, 0x4b, 0xd0, 0x1c, 0x57])
  IID_IColumnManager* = DEFINE_GUID(0xd8ec27bb'u32, 0x3f3b, 0x4042, [0xb1'u8, 0x0a, 0x4a, 0xcf, 0xd9, 0x24, 0xd4, 0x53])
  IID_IInputObject2* = DEFINE_GUID(0x6915c085'u32, 0x510b, 0x44cd, [0x94'u8, 0xaf, 0x28, 0xdf, 0xa5, 0x6c, 0xf9, 0x2b])
  IID_IShellItem* = DEFINE_GUID(0x43826d1e'u32, 0xe718, 0x42ee, [0xbc'u8, 0x55, 0xa1, 0xe2, 0x61, 0xc3, 0x7b, 0xfe])
  IID_IShellItem2* = DEFINE_GUID(0x7e9fb0d3'u32, 0x919f, 0x4307, [0xab'u8, 0x2e, 0x9b, 0x18, 0x60, 0x31, 0x0c, 0x93])
  IID_IShellItemImageFactory* = DEFINE_GUID(0xbcc18b79'u32, 0xba16, 0x442f, [0x80'u8, 0xc4, 0x8a, 0x59, 0xc3, 0x0c, 0x46, 0x3b])
  IID_IUserAccountChangeCallback* = DEFINE_GUID(0xa561e69a'u32, 0xb4b8, 0x4113, [0x91'u8, 0xa5, 0x64, 0xc6, 0xbc, 0xca, 0x34, 0x30])
  IID_IEnumShellItems* = DEFINE_GUID(0x70629033'u32, 0xe363, 0x4a28, [0xa5'u8, 0x67, 0x0d, 0xb7, 0x80, 0x06, 0xe6, 0xd7])
  IID_ITransferAdviseSink* = DEFINE_GUID(0xd594d0d8'u32, 0x8da7, 0x457b, [0xb3'u8, 0xb4, 0xce, 0x5d, 0xba, 0xac, 0x0b, 0x88])
  IID_ITransferSource* = DEFINE_GUID(0x00adb003'u32, 0xbde9, 0x45c6, [0x8e'u8, 0x29, 0xd0, 0x9f, 0x93, 0x53, 0xe1, 0x08])
  IID_IEnumResources* = DEFINE_GUID(0x2dd81fe3'u32, 0xa83c, 0x4da9, [0xa3'u8, 0x30, 0x47, 0x24, 0x9d, 0x34, 0x5b, 0xa1])
  IID_IShellItemResources* = DEFINE_GUID(0xff5693be'u32, 0x2ce0, 0x4d48, [0xb5'u8, 0xc5, 0x40, 0x81, 0x7d, 0x1a, 0xcd, 0xb9])
  IID_ITransferDestination* = DEFINE_GUID(0x48addd32'u32, 0x3ca5, 0x4124, [0xab'u8, 0xe3, 0xb5, 0xa7, 0x25, 0x31, 0xb2, 0x07])
  IID_IStreamAsync* = DEFINE_GUID(0xfe0b6665'u32, 0xe0ca, 0x49b9, [0xa1'u8, 0x78, 0x2b, 0x5c, 0xb4, 0x8d, 0x92, 0xa5])
  IID_IStreamUnbufferedInfo* = DEFINE_GUID(0x8a68fdda'u32, 0x1fdc, 0x4c20, [0x8c'u8, 0xeb, 0x41, 0x66, 0x43, 0xb5, 0xa6, 0x25])
  IID_IFileOperationProgressSink* = DEFINE_GUID(0x04b0f1a7'u32, 0x9490, 0x44bc, [0x96'u8, 0xe1, 0x42, 0x96, 0xa3, 0x12, 0x52, 0xe2])
  IID_IShellItemArray* = DEFINE_GUID(0xb63ea76d'u32, 0x1f85, 0x456f, [0xa1'u8, 0x9c, 0x48, 0x15, 0x9e, 0xfa, 0x85, 0x8b])
  IID_IInitializeWithItem* = DEFINE_GUID(0x7f73be3f'u32, 0xfb79, 0x493c, [0xa6'u8, 0xc7, 0x7e, 0xe1, 0x4e, 0x24, 0x58, 0x41])
  IID_IObjectWithSelection* = DEFINE_GUID(0x1c9cd5bb'u32, 0x98e9, 0x4491, [0xa6'u8, 0x0f, 0x31, 0xaa, 0xcc, 0x72, 0xb8, 0x3c])
  IID_IObjectWithBackReferences* = DEFINE_GUID(0x321a6a6a'u32, 0xd61f, 0x4bf3, [0x97'u8, 0xae, 0x14, 0xbe, 0x29, 0x86, 0xbb, 0x36])
  IID_IDragSourceHelper2* = DEFINE_GUID(0x83e07d0d'u32, 0x0c5f, 0x4163, [0xbf'u8, 0x1a, 0x60, 0xb2, 0x74, 0x05, 0x1e, 0x40])
  IID_IHWEventHandler2* = DEFINE_GUID(0xcfcc809f'u32, 0x295d, 0x42e8, [0x9f'u8, 0xfc, 0x42, 0x4b, 0x33, 0xc4, 0x87, 0xe6])
  IID_IDynamicHWHandler* = DEFINE_GUID(0xdc2601d7'u32, 0x059e, 0x42fc, [0xa0'u8, 0x9d, 0x2a, 0xfd, 0x21, 0xb6, 0xd5, 0xf7])
  IID_IObjectWithCancelEvent* = DEFINE_GUID(0xf279b885'u32, 0x0ae9, 0x4b85, [0xac'u8, 0x06, 0xdd, 0xec, 0xf9, 0x40, 0x89, 0x41])
  IID_IUserNotificationCallback* = DEFINE_GUID(0x19108294'u32, 0x0441, 0x4aff, [0x80'u8, 0x13, 0xfa, 0x0a, 0x73, 0x0b, 0x0b, 0xea])
  IID_IUserNotification2* = DEFINE_GUID(0x215913cc'u32, 0x57eb, 0x4fab, [0xab'u8, 0x5a, 0xe5, 0xfa, 0x7b, 0xea, 0x2a, 0x6c])
  IID_ISearchFolderItemFactory* = DEFINE_GUID(0xa0ffbc28'u32, 0x5482, 0x4366, [0xbe'u8, 0x27, 0x3e, 0x81, 0xe7, 0x8e, 0x06, 0xc2])
  IID_IThumbnailHandlerFactory* = DEFINE_GUID(0xe35b4b2e'u32, 0x00da, 0x4bc1, [0x9f'u8, 0x13, 0x38, 0xbc, 0x11, 0xf5, 0xd4, 0x17])
  IID_IParentAndItem* = DEFINE_GUID(0xb3a4b685'u32, 0xb685, 0x4805, [0x99'u8, 0xd9, 0x5d, 0xea, 0xd2, 0x87, 0x32, 0x36])
  IID_IDeskBandInfo* = DEFINE_GUID(0x77e425fc'u32, 0xcbf9, 0x4307, [0xba'u8, 0x6a, 0xbb, 0x57, 0x27, 0x74, 0x56, 0x61])
  IID_IDeskBand2* = DEFINE_GUID(0x79d16de4'u32, 0xabee, 0x4021, [0x8d'u8, 0x9d, 0x91, 0x69, 0xb2, 0x61, 0xd6, 0x57])
  IID_ITaskbarList3* = DEFINE_GUID(0xea1afb91'u32, 0x9e28, 0x4b86, [0x90'u8, 0xe9, 0x9e, 0x9f, 0x8a, 0x5e, 0xef, 0xaf])
  IID_ITaskbarList4* = DEFINE_GUID(0xc43dc798'u32, 0x95d1, 0x4bea, [0x90'u8, 0x30, 0xbb, 0x99, 0xe2, 0x98, 0x3a, 0x1a])
  IID_IStartMenuPinnedList* = DEFINE_GUID(0x4cd19ada'u32, 0x25a5, 0x4a32, [0xb3'u8, 0xb7, 0x34, 0x7b, 0xee, 0x5b, 0xe3, 0x6b])
  IID_IExplorerBrowserEvents* = DEFINE_GUID(0x361bbdc7'u32, 0xe6ee, 0x4e13, [0xbe'u8, 0x58, 0x58, 0xe2, 0x24, 0x0c, 0x81, 0x0f])
  IID_IExplorerBrowser* = DEFINE_GUID(0xdfd3b6b5'u32, 0xc10c, 0x4be9, [0x85'u8, 0xf6, 0xa6, 0x69, 0x69, 0xf4, 0x02, 0xf6])
  IID_IAccessibleObject* = DEFINE_GUID(0x95a391c5'u32, 0x9ed4, 0x4c28, [0x84'u8, 0x01, 0xab, 0x9e, 0x06, 0x71, 0x9e, 0x11])
  IID_IResultsFolder* = DEFINE_GUID(0x96e5ae6d'u32, 0x6ae1, 0x4b1c, [0x90'u8, 0x0c, 0xc6, 0x48, 0x0e, 0xaa, 0x88, 0x28])
  IID_IEnumObjects* = DEFINE_GUID(0x2c1c7e2e'u32, 0x2d0e, 0x4059, [0x83'u8, 0x1e, 0x1e, 0x6f, 0x82, 0x33, 0x5c, 0x2e])
  IID_IOperationsProgressDialog* = DEFINE_GUID(0x0c9fb851'u32, 0xe5c9, 0x43eb, [0xa3'u8, 0x70, 0xf0, 0x67, 0x7b, 0x13, 0x87, 0x4c])
  IID_IIOCancelInformation* = DEFINE_GUID(0xf5b0bf81'u32, 0x8cb5, 0x4b1b, [0x94'u8, 0x49, 0x1a, 0x15, 0x9e, 0x0c, 0x73, 0x3c])
  IID_IFileOperation* = DEFINE_GUID(0x947aab5f'u32, 0x0a5c, 0x4c13, [0xb4'u8, 0xd6, 0x4b, 0xf7, 0x83, 0x6f, 0xc9, 0xf8])
  IID_IObjectProvider* = DEFINE_GUID(0xa6087428'u32, 0x3be3, 0x4d73, [0xb3'u8, 0x08, 0x7c, 0x04, 0xa5, 0x40, 0xbf, 0x1a])
  IID_INamespaceWalkCB* = DEFINE_GUID(0xd92995f8'u32, 0xcf5e, 0x4a76, [0xbf'u8, 0x59, 0xea, 0xd3, 0x9e, 0xa2, 0xb9, 0x7e])
  IID_INamespaceWalkCB2* = DEFINE_GUID(0x7ac7492b'u32, 0xc38e, 0x438a, [0x87'u8, 0xdb, 0x68, 0x73, 0x78, 0x44, 0xff, 0x70])
  IID_INamespaceWalk* = DEFINE_GUID(0x57ced8a7'u32, 0x3f4a, 0x432c, [0x93'u8, 0x50, 0x30, 0xf2, 0x44, 0x83, 0xf7, 0x4f])
  IID_IBandSite* = DEFINE_GUID(0x4cf504b0'u32, 0xde96, 0x11d0, [0x8b'u8, 0x3f, 0x00, 0xa0, 0xc9, 0x11, 0xe8, 0xe5])
  IID_IModalWindow* = DEFINE_GUID(0xb4db1657'u32, 0x70d7, 0x485e, [0x8e'u8, 0x3e, 0x6f, 0xcb, 0x5a, 0x5c, 0x18, 0x02])
  IID_ICDBurnExt* = DEFINE_GUID(0x2271dcca'u32, 0x74fc, 0x4414, [0x8f'u8, 0xb7, 0xc5, 0x6b, 0x05, 0xac, 0xe2, 0xd7])
  IID_IContextMenuSite* = DEFINE_GUID(0x0811aebe'u32, 0x0b87, 0x4c54, [0x9e'u8, 0x72, 0x54, 0x8c, 0xf6, 0x49, 0x01, 0x6b])
  IID_IEnumReadyCallback* = DEFINE_GUID(0x61e00d45'u32, 0x8fff, 0x4e60, [0x92'u8, 0x4e, 0x65, 0x37, 0xb6, 0x16, 0x12, 0xdd])
  IID_IEnumerableView* = DEFINE_GUID(0x8c8bf236'u32, 0x1aec, 0x495f, [0x98'u8, 0x94, 0x91, 0xd5, 0x7c, 0x3c, 0x68, 0x6f])
  IID_IInsertItem* = DEFINE_GUID(0xd2b57227'u32, 0x3d23, 0x4b95, [0x93'u8, 0xc0, 0x49, 0x2b, 0xd4, 0x54, 0xc3, 0x56])
  IID_IMenuBand* = DEFINE_GUID(0x568804cd'u32, 0xcbd7, 0x11d0, [0x98'u8, 0x16, 0x00, 0xc0, 0x4f, 0xd9, 0x19, 0x72])
  IID_IFolderBandPriv* = DEFINE_GUID(0x47c01f95'u32, 0xe185, 0x412c, [0xb5'u8, 0xc5, 0x4f, 0x27, 0xdf, 0x96, 0x5a, 0xea])
  IID_IRegTreeItem* = DEFINE_GUID(0xa9521922'u32, 0x0812, 0x4d44, [0x9e'u8, 0xc3, 0x7f, 0xd3, 0x8c, 0x72, 0x6f, 0x3d])
  IID_IImageRecompress* = DEFINE_GUID(0x505f1513'u32, 0x6b3e, 0x4892, [0xa2'u8, 0x72, 0x59, 0xf8, 0x88, 0x9a, 0x4d, 0x3e])
  IID_IDeskBar* = DEFINE_GUID(0xeb0fe173'u32, 0x1a3a, 0x11d0, [0x89'u8, 0xb3, 0x00, 0xa0, 0xc9, 0x0a, 0x90, 0xac])
  IID_IMenuPopup* = DEFINE_GUID(0xd1e7afeb'u32, 0x6a2e, 0x11d0, [0x8c'u8, 0x78, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0xb4])
  IID_IFileIsInUse* = DEFINE_GUID(0x64a1cbf0'u32, 0x3a1a, 0x4461, [0x91'u8, 0x58, 0x37, 0x69, 0x69, 0x69, 0x39, 0x50])
  IID_IFileDialogEvents* = DEFINE_GUID(0x973510db'u32, 0x7d7f, 0x452b, [0x89'u8, 0x75, 0x74, 0xa8, 0x58, 0x28, 0xd3, 0x54])
  IID_IFileDialog* = DEFINE_GUID(0x42f85136'u32, 0xdb7e, 0x439c, [0x85'u8, 0xf1, 0xe4, 0x07, 0x5d, 0x13, 0x5f, 0xc8])
  IID_IFileSaveDialog* = DEFINE_GUID(0x84bccd23'u32, 0x5fde, 0x4cdb, [0xae'u8, 0xa4, 0xaf, 0x64, 0xb8, 0x3d, 0x78, 0xab])
  IID_IFileOpenDialog* = DEFINE_GUID(0xd57c7288'u32, 0xd4ad, 0x4768, [0xbe'u8, 0x02, 0x9d, 0x96, 0x95, 0x32, 0xd9, 0x60])
  IID_IFileDialogCustomize* = DEFINE_GUID(0xe6fdd21a'u32, 0x163f, 0x4975, [0x9c'u8, 0x8c, 0xa6, 0x9f, 0x1b, 0xa3, 0x70, 0x34])
  IID_IFileDialogControlEvents* = DEFINE_GUID(0x36116642'u32, 0xd713, 0x4b97, [0x9b'u8, 0x83, 0x74, 0x84, 0xa9, 0xd0, 0x04, 0x33])
  IID_IFileDialog2* = DEFINE_GUID(0x61744fc7'u32, 0x85b5, 0x4791, [0xa9'u8, 0xb0, 0x27, 0x22, 0x76, 0x30, 0x9b, 0x13])
  IID_IApplicationAssociationRegistration* = DEFINE_GUID(0x4e530b0a'u32, 0xe611, 0x4c77, [0xa3'u8, 0xac, 0x90, 0x31, 0xd0, 0x22, 0x28, 0x1b])
  IID_IApplicationAssociationRegistrationUI* = DEFINE_GUID(0x1f76a169'u32, 0xf994, 0x40ac, [0x8f'u8, 0xc8, 0x09, 0x59, 0xe8, 0x87, 0x47, 0x10])
  IID_IBrowserFrameOptions* = DEFINE_GUID(0x10df43c8'u32, 0x1dbe, 0x11d3, [0x8b'u8, 0x34, 0x00, 0x60, 0x97, 0xdf, 0x5b, 0xd4])
  IID_INewWindowManager* = DEFINE_GUID(0xd2bc4c84'u32, 0x3f72, 0x4a52, [0xa6'u8, 0x04, 0x7b, 0xcb, 0xf3, 0x98, 0x2c, 0xbb])
  IID_IAttachmentExecute* = DEFINE_GUID(0x73db1241'u32, 0x1e85, 0x4581, [0x8e'u8, 0x4f, 0xa8, 0x1e, 0x1d, 0x0f, 0x8c, 0x57])
  IID_IShellMenuCallback* = DEFINE_GUID(0x4ca300a1'u32, 0x9b8d, 0x11d1, [0x8b'u8, 0x22, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0xd0])
  IID_IShellMenu* = DEFINE_GUID(0xee1f7637'u32, 0xe138, 0x11d1, [0x83'u8, 0x79, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0xd0])
  IID_IShellRunDll* = DEFINE_GUID(0xfce4bde0'u32, 0x4b68, 0x4b80, [0x8e'u8, 0x9c, 0x74, 0x26, 0x31, 0x5a, 0x73, 0x88])
  IID_IKnownFolder* = DEFINE_GUID(0x3aa7af7e'u32, 0x9b36, 0x420c, [0xa8'u8, 0xe3, 0xf7, 0x7d, 0x46, 0x74, 0xa4, 0x88])
  IID_IKnownFolderManager* = DEFINE_GUID(0x8be2d872'u32, 0x86aa, 0x4d47, [0xb7'u8, 0x76, 0x32, 0xcc, 0xa4, 0x0c, 0x70, 0x18])
  IID_ISharingConfigurationManager* = DEFINE_GUID(0xb4cd448a'u32, 0x9c86, 0x4466, [0x92'u8, 0x01, 0x2e, 0x62, 0x10, 0x5b, 0x87, 0xae])
  IID_IPreviousVersionsInfo* = DEFINE_GUID(0x76e54780'u32, 0xad74, 0x48e3, [0xa6'u8, 0x95, 0x3b, 0xa9, 0xa0, 0xaf, 0xf1, 0x0d])
  IID_IRelatedItem* = DEFINE_GUID(0xa73ce67a'u32, 0x8ab1, 0x44f1, [0x8d'u8, 0x43, 0xd2, 0xfc, 0xbf, 0x6b, 0x1c, 0xd0])
  IID_IIdentityName* = DEFINE_GUID(0x7d903fca'u32, 0xd6f9, 0x4810, [0x83'u8, 0x32, 0x94, 0x6c, 0x01, 0x77, 0xe2, 0x47])
  IID_IDelegateItem* = DEFINE_GUID(0x3c5a1c94'u32, 0xc951, 0x4cb7, [0xbb'u8, 0x6d, 0x3b, 0x93, 0xf3, 0x0c, 0xce, 0x93])
  IID_ICurrentItem* = DEFINE_GUID(0x240a7174'u32, 0xd653, 0x4a1d, [0xa6'u8, 0xd3, 0xd4, 0x94, 0x3c, 0xfb, 0xfe, 0x3d])
  IID_ITransferMediumItem* = DEFINE_GUID(0x77f295d5'u32, 0x2d6f, 0x4e19, [0xb8'u8, 0xae, 0x32, 0x2f, 0x3e, 0x72, 0x1a, 0xb5])
  IID_IUseToBrowseItem* = DEFINE_GUID(0x05edda5c'u32, 0x98a3, 0x4717, [0x8a'u8, 0xdb, 0xc5, 0xe7, 0xda, 0x99, 0x1e, 0xb1])
  IID_IDisplayItem* = DEFINE_GUID(0xc6fd5997'u32, 0x9f6b, 0x4888, [0x87'u8, 0x03, 0x94, 0xe8, 0x0e, 0x8c, 0xde, 0x3f])
  IID_IViewStateIdentityItem* = DEFINE_GUID(0x9d264146'u32, 0xa94f, 0x4195, [0x9f'u8, 0x9f, 0x3b, 0xb1, 0x2c, 0xe0, 0xc9, 0x55])
  IID_IPreviewItem* = DEFINE_GUID(0x36149969'u32, 0x0a8f, 0x49c8, [0x8b'u8, 0x00, 0x4a, 0xec, 0xb2, 0x02, 0x22, 0xfb])
  IID_IDestinationStreamFactory* = DEFINE_GUID(0x8a87781b'u32, 0x39a7, 0x4a1f, [0xaa'u8, 0xb3, 0xa3, 0x9b, 0x9c, 0x34, 0xa7, 0xd9])
  IID_INewMenuClient* = DEFINE_GUID(0xdcb07fdc'u32, 0x3bb5, 0x451c, [0x90'u8, 0xbe, 0x96, 0x66, 0x44, 0xfe, 0xd7, 0xb0])
  SID_SCommandBarState* = DEFINE_GUID(0xB99EAA5C'u32, 0x3850, 0x4400, [0xBC'u8, 0x33, 0x2C, 0xE5, 0x34, 0x04, 0x8B, 0xF8])
  IID_IInitializeWithBindCtx* = DEFINE_GUID(0x71c0d2bc'u32, 0x726d, 0x45cc, [0xa6'u8, 0xc0, 0x2e, 0x31, 0xc1, 0xdb, 0x21, 0x59])
  IID_IShellItemFilter* = DEFINE_GUID(0x2659b475'u32, 0xeeb8, 0x48b7, [0x8f'u8, 0x07, 0xb3, 0x78, 0x81, 0x0f, 0x48, 0xcf])
  IID_INameSpaceTreeControl* = DEFINE_GUID(0x028212a3'u32, 0xb627, 0x47e9, [0x88'u8, 0x56, 0xc1, 0x42, 0x65, 0x55, 0x4e, 0x4f])
  IID_INameSpaceTreeControl2* = DEFINE_GUID(0x7cc7aed8'u32, 0x290e, 0x49bc, [0x89'u8, 0x45, 0xc1, 0x40, 0x1c, 0xc9, 0x30, 0x6c])
  IID_INameSpaceTreeControlEvents* = DEFINE_GUID(0x93d77985'u32, 0xb3d8, 0x4484, [0x83'u8, 0x18, 0x67, 0x2c, 0xdd, 0xa0, 0x02, 0xce])
  IID_INameSpaceTreeControlDropHandler* = DEFINE_GUID(0xf9c665d6'u32, 0xc2f2, 0x4c19, [0xbf'u8, 0x33, 0x83, 0x22, 0xd7, 0x35, 0x2f, 0x51])
  IID_INameSpaceTreeAccessible* = DEFINE_GUID(0x71f312de'u32, 0x43ed, 0x4190, [0x84'u8, 0x77, 0xe9, 0x53, 0x6b, 0x82, 0x35, 0x0b])
  IID_INameSpaceTreeControlCustomDraw* = DEFINE_GUID(0x2d3ba758'u32, 0x33ee, 0x42d5, [0xbb'u8, 0x7b, 0x5f, 0x34, 0x31, 0xd8, 0x6c, 0x78])
  IID_INameSpaceTreeControlFolderCapabilities* = DEFINE_GUID(0xe9701183'u32, 0xe6b3, 0x4ff2, [0x85'u8, 0x68, 0x81, 0x36, 0x15, 0xfe, 0xc7, 0xbe])
  IID_IPreviewHandler* = DEFINE_GUID(0x8895b1c6'u32, 0xb41f, 0x4c1c, [0xa5'u8, 0x62, 0x0d, 0x56, 0x42, 0x50, 0x83, 0x6f])
  IID_IPreviewHandlerFrame* = DEFINE_GUID(0xfec87aaf'u32, 0x35f9, 0x447a, [0xad'u8, 0xb7, 0x20, 0x23, 0x44, 0x91, 0x40, 0x1a])
  IID_ITrayDeskBand* = DEFINE_GUID(0x6d67e846'u32, 0x5b9c, 0x4db8, [0x9c'u8, 0xbc, 0xdd, 0xe1, 0x2f, 0x42, 0x54, 0xf1])
  IID_IBandHost* = DEFINE_GUID(0xb9075c7c'u32, 0xd48e, 0x403f, [0xab'u8, 0x99, 0xd6, 0xc7, 0x7a, 0x10, 0x84, 0xac])
  IID_IExplorerPaneVisibility* = DEFINE_GUID(0xe07010ec'u32, 0xbc17, 0x44c0, [0x97'u8, 0xb0, 0x46, 0xc7, 0xc9, 0x5b, 0x9e, 0xdc])
  IID_IContextMenuCB* = DEFINE_GUID(0x3409e930'u32, 0x5a39, 0x11d1, [0x83'u8, 0xfa, 0x00, 0xa0, 0xc9, 0x0d, 0xc8, 0x49])
  IID_IDefaultExtractIconInit* = DEFINE_GUID(0x41ded17d'u32, 0xd6b3, 0x4261, [0x99'u8, 0x7d, 0x88, 0xc6, 0x0e, 0x4b, 0x1d, 0x58])
  IID_IExplorerCommand* = DEFINE_GUID(0xa08ce4d0'u32, 0xfa25, 0x44ab, [0xb5'u8, 0x7c, 0xc7, 0xb1, 0xc3, 0x23, 0xe0, 0xb9])
  IID_IExplorerCommandState* = DEFINE_GUID(0xbddacb60'u32, 0x7657, 0x47ae, [0x84'u8, 0x45, 0xd2, 0x3e, 0x1a, 0xcf, 0x82, 0xae])
  IID_IInitializeCommand* = DEFINE_GUID(0x85075acf'u32, 0x231f, 0x40ea, [0x96'u8, 0x10, 0xd2, 0x6b, 0x7b, 0x58, 0xf6, 0x38])
  IID_IEnumExplorerCommand* = DEFINE_GUID(0xa88826f8'u32, 0x186f, 0x4987, [0xaa'u8, 0xde, 0xea, 0x0c, 0xef, 0x8f, 0xbf, 0xe8])
  IID_IExplorerCommandProvider* = DEFINE_GUID(0x64961751'u32, 0x0835, 0x43c0, [0x8f'u8, 0xfe, 0xd5, 0x76, 0x86, 0x53, 0x0e, 0x64])
  IID_IInitializeNetworkFolder* = DEFINE_GUID(0x6e0f9881'u32, 0x42a8, 0x4f2a, [0x97'u8, 0xf8, 0x8a, 0xf4, 0xe0, 0x26, 0xd9, 0x2d])
  IID_IOpenControlPanel* = DEFINE_GUID(0xd11ad862'u32, 0x66de, 0x4df4, [0xbf'u8, 0x6c, 0x1f, 0x56, 0x21, 0x99, 0x6a, 0xf1])
  IID_IComputerInfoChangeNotify* = DEFINE_GUID(0x0df60d92'u32, 0x6818, 0x46d6, [0xb3'u8, 0x58, 0xd6, 0x61, 0x70, 0xdd, 0xe4, 0x66])
  IID_IFileSystemBindData2* = DEFINE_GUID(0x3acf075f'u32, 0x71db, 0x4afa, [0x81'u8, 0xf0, 0x3f, 0xc4, 0xfd, 0xf2, 0xa5, 0xb8])
  IID_ICustomDestinationList* = DEFINE_GUID(0x6332debf'u32, 0x87b5, 0x4670, [0x90'u8, 0xc0, 0x5e, 0x57, 0xb4, 0x08, 0xa4, 0x9e])
  IID_IApplicationDestinations* = DEFINE_GUID(0x12337d35'u32, 0x94c6, 0x48a0, [0xbc'u8, 0xe7, 0x6a, 0x9c, 0x69, 0xd4, 0xd6, 0x00])
  IID_IApplicationDocumentLists* = DEFINE_GUID(0x3c594f9f'u32, 0x9f30, 0x47a1, [0x97'u8, 0x9a, 0xc9, 0xe8, 0x3d, 0x3d, 0x0a, 0x06])
  IID_IObjectWithAppUserModelID* = DEFINE_GUID(0x36db0196'u32, 0x9665, 0x46d1, [0x9b'u8, 0xa7, 0xd3, 0x70, 0x9e, 0xec, 0xf9, 0xed])
  IID_IObjectWithProgID* = DEFINE_GUID(0x71e806fb'u32, 0x8dee, 0x46fc, [0xbf'u8, 0x8c, 0x77, 0x48, 0xa8, 0xa1, 0xae, 0x13])
  IID_IUpdateIDList* = DEFINE_GUID(0x6589b6d2'u32, 0x5f8d, 0x4b9e, [0xb7'u8, 0xe0, 0x23, 0xcd, 0xd9, 0x71, 0x7d, 0x8c])
  IID_IDesktopGadget* = DEFINE_GUID(0xc1646bc4'u32, 0xf298, 0x4f91, [0xa2'u8, 0x04, 0xeb, 0x2d, 0xd1, 0x70, 0x9d, 0x1a])
  IID_IDesktopWallpaper* = DEFINE_GUID(0xb92b56a9'u32, 0x8b55, 0x4e14, [0x9a'u8, 0x89, 0x01, 0x99, 0xbb, 0xb6, 0xf9, 0x3b])
  IID_IHomeGroup* = DEFINE_GUID(0x7a3bd1d9'u32, 0x35a9, 0x4fb3, [0xa4'u8, 0x67, 0xf4, 0x8c, 0xac, 0x35, 0xe2, 0xd0])
  IID_IInitializeWithPropertyStore* = DEFINE_GUID(0xc3e12eb5'u32, 0x7d8d, 0x44f8, [0xb6'u8, 0xdd, 0x0e, 0x77, 0xb3, 0x4d, 0x6d, 0xe4])
  IID_IOpenSearchSource* = DEFINE_GUID(0xf0ee7333'u32, 0xe6fc, 0x479b, [0x9f'u8, 0x25, 0xa8, 0x60, 0xc2, 0x34, 0xa3, 0x8e])
  IID_IShellLibrary* = DEFINE_GUID(0x11a66efa'u32, 0x382e, 0x451a, [0x92'u8, 0x34, 0x1e, 0x0e, 0x12, 0xef, 0x30, 0x85])
  IID_IPlaybackManagerEvents* = DEFINE_GUID(0x385cfb7d'u32, 0x4e0c, 0x4106, [0x91'u8, 0x2e, 0x8c, 0xfb, 0x4c, 0x19, 0x1f, 0x45])
  IID_IPlaybackManager* = DEFINE_GUID(0x0f3c1b01'u32, 0x8199, 0x4173, [0xba'u8, 0x78, 0x98, 0x58, 0x82, 0x26, 0x6f, 0x7a])
  IID_IDefaultFolderMenuInitialize* = DEFINE_GUID(0x7690aa79'u32, 0xf8fc, 0x4615, [0xa3'u8, 0x27, 0x36, 0xf7, 0xd1, 0x8f, 0x5d, 0x91])
  IID_IApplicationActivationManager* = DEFINE_GUID(0x2e941141'u32, 0x7f97, 0x4756, [0xba'u8, 0x1d, 0x9d, 0xec, 0xde, 0x89, 0x4a, 0x3d])
  CLSID_DesktopWallpaper* = DEFINE_GUID(0xc2cf3110'u32, 0x460e, 0x4fc1, [0xb9'u8, 0xd0, 0x8a, 0x1c, 0x0c, 0x9c, 0xc4, 0xbd])
  CLSID_StartMenuPin* = DEFINE_GUID(0xa2a9545d'u32, 0xa0c2, 0x42b4, [0x97'u8, 0x08, 0xa0, 0xb2, 0xba, 0xdd, 0x77, 0xc8])
  CLSID_ExplorerBrowser* = DEFINE_GUID(0x71f96385'u32, 0xddd6, 0x48d3, [0xa0'u8, 0xc1, 0xae, 0x06, 0xe8, 0xb0, 0x55, 0xfb])
  CLSID_ImageRecompress* = DEFINE_GUID(0x6e33091c'u32, 0xd2f8, 0x4740, [0xb5'u8, 0x5e, 0x2e, 0x11, 0xd1, 0x47, 0x7a, 0x2c])
  CLSID_TrayBandSiteService* = DEFINE_GUID(0xf60ad0a0'u32, 0xe5e1, 0x45cb, [0xb5'u8, 0x1a, 0xe1, 0x5b, 0x9f, 0x8b, 0x29, 0x34])
  CLSID_TrayDeskBand* = DEFINE_GUID(0xe6442437'u32, 0x6c68, 0x4f52, [0x94'u8, 0xdd, 0x2c, 0xfe, 0xd2, 0x67, 0xef, 0xb9])
  CLSID_AttachmentServices* = DEFINE_GUID(0x4125dd96'u32, 0xe03a, 0x4103, [0x8f'u8, 0x70, 0xe0, 0x59, 0x7d, 0x80, 0x3b, 0x9c])
  CLSID_DocPropShellExtension* = DEFINE_GUID(0x883373c3'u32, 0xbf89, 0x11d1, [0xbe'u8, 0x35, 0x08, 0x00, 0x36, 0xb1, 0x1a, 0x03])
  CLSID_ShellItem* = DEFINE_GUID(0x9ac9fbe1'u32, 0xe0a2, 0x4ad6, [0xb4'u8, 0xee, 0xe2, 0x12, 0x01, 0x3e, 0xa9, 0x17])
  CLSID_NamespaceWalker* = DEFINE_GUID(0x72eb61e0'u32, 0x8672, 0x4303, [0x91'u8, 0x75, 0xf2, 0xe4, 0xc6, 0x8b, 0x2e, 0x7c])
  CLSID_FileOperation* = DEFINE_GUID(0x3ad05575'u32, 0x8857, 0x4850, [0x92'u8, 0x77, 0x11, 0xb8, 0x5b, 0xdb, 0x8e, 0x09])
  CLSID_FileOpenDialog* = DEFINE_GUID(0xdc1c5a9c'u32, 0xe88a, 0x4dde, [0xa5'u8, 0xa1, 0x60, 0xf8, 0x2a, 0x20, 0xae, 0xf7])
  CLSID_FileSaveDialog* = DEFINE_GUID(0xc0b4e2f3'u32, 0xba21, 0x4773, [0x8d'u8, 0xba, 0x33, 0x5e, 0xc9, 0x46, 0xeb, 0x8b])
  CLSID_KnownFolderManager* = DEFINE_GUID(0x4df0c730'u32, 0xdf9d, 0x4ae3, [0x91'u8, 0x53, 0xaa, 0x6b, 0x82, 0xe9, 0x79, 0x5a])
  CLSID_FSCopyHandler* = DEFINE_GUID(0xd197380a'u32, 0x0a79, 0x4dc8, [0xa0'u8, 0x33, 0xed, 0x88, 0x2c, 0x2f, 0xa1, 0x4b])
  CLSID_SharingConfigurationManager* = DEFINE_GUID(0x49f371e1'u32, 0x8c5c, 0x4d9c, [0x9a'u8, 0x3b, 0x54, 0xa6, 0x82, 0x7f, 0x51, 0x3c])
  CLSID_PreviousVersions* = DEFINE_GUID(0x596ab062'u32, 0xb4d2, 0x4215, [0x9f'u8, 0x74, 0xe9, 0x10, 0x9b, 0x0a, 0x81, 0x53])
  CLSID_NetworkConnections* = DEFINE_GUID(0x7007acc7'u32, 0x3202, 0x11d1, [0xaa'u8, 0xd2, 0x00, 0x80, 0x5f, 0xc1, 0x27, 0x0e])
  CLSID_NamespaceTreeControl* = DEFINE_GUID(0xae054212'u32, 0x3535, 0x4430, [0x83'u8, 0xed, 0xd5, 0x01, 0xaa, 0x66, 0x80, 0xe6])
  CLSID_IENamespaceTreeControl* = DEFINE_GUID(0xace52d03'u32, 0xe5cd, 0x4b20, [0x82'u8, 0xff, 0xe7, 0x1b, 0x11, 0xbe, 0xae, 0x1d])
  CLSID_ScheduledTasks* = DEFINE_GUID(0xd6277990'u32, 0x4c6a, 0x11cf, [0x8d'u8, 0x87, 0x00, 0xaa, 0x00, 0x60, 0xf5, 0xbf])
  CLSID_ApplicationAssociationRegistration* = DEFINE_GUID(0x591209c7'u32, 0x767b, 0x42b2, [0x9f'u8, 0xba, 0x44, 0xee, 0x46, 0x15, 0xf2, 0xc7])
  CLSID_ApplicationAssociationRegistrationUI* = DEFINE_GUID(0x1968106d'u32, 0xf3b5, 0x44cf, [0x89'u8, 0x0e, 0x11, 0x6f, 0xcb, 0x9e, 0xce, 0xf1])
  CLSID_SearchFolderItemFactory* = DEFINE_GUID(0x14010e02'u32, 0xbbbd, 0x41f0, [0x88'u8, 0xe3, 0xed, 0xa3, 0x71, 0x21, 0x65, 0x84])
  CLSID_OpenControlPanel* = DEFINE_GUID(0x06622d85'u32, 0x6856, 0x4460, [0x8d'u8, 0xe1, 0xa8, 0x19, 0x21, 0xb4, 0x1c, 0x4b])
  CLSID_MailRecipient* = DEFINE_GUID(0x9e56be60'u32, 0xc50f, 0x11cf, [0x9a'u8, 0x2c, 0x00, 0xa0, 0xc9, 0x0a, 0x90, 0xce])
  CLSID_NetworkExplorerFolder* = DEFINE_GUID(0xf02c1a0d'u32, 0xbe21, 0x4350, [0x88'u8, 0xb0, 0x73, 0x67, 0xfc, 0x96, 0xef, 0x3c])
  CLSID_DestinationList* = DEFINE_GUID(0x77f10cf0'u32, 0x3db5, 0x4966, [0xb5'u8, 0x20, 0xb7, 0xc5, 0x4f, 0xd3, 0x5e, 0xd6])
  CLSID_ApplicationDestinations* = DEFINE_GUID(0x86c14003'u32, 0x4d6b, 0x4ef3, [0xa7'u8, 0xb4, 0x05, 0x06, 0x66, 0x3b, 0x2e, 0x68])
  CLSID_ApplicationDocumentLists* = DEFINE_GUID(0x86bec222'u32, 0x30f2, 0x47e0, [0x9f'u8, 0x25, 0x60, 0xd1, 0x1c, 0xd7, 0x5c, 0x28])
  CLSID_HomeGroup* = DEFINE_GUID(0xde77ba04'u32, 0x3c92, 0x4d11, [0xa1'u8, 0xa5, 0x42, 0x35, 0x2a, 0x53, 0xe0, 0xe3])
  CLSID_ShellLibrary* = DEFINE_GUID(0xd9b3211d'u32, 0xe57f, 0x4426, [0xaa'u8, 0xef, 0x30, 0xa8, 0x06, 0xad, 0xd3, 0x97])
  CLSID_AppStartupLink* = DEFINE_GUID(0x273eb5e7'u32, 0x88b0, 0x4843, [0xbf'u8, 0xef, 0xe2, 0xc8, 0x1d, 0x43, 0xaa, 0xe5])
  CLSID_EnumerableObjectCollection* = DEFINE_GUID(0x2d3468c1'u32, 0x36a7, 0x43b6, [0xac'u8, 0x24, 0xd3, 0xf0, 0x2f, 0xd9, 0x60, 0x7a])
  CLSID_DesktopGadget* = DEFINE_GUID(0x924ccc1b'u32, 0x6562, 0x4c85, [0x86'u8, 0x57, 0xd1, 0x77, 0x92, 0x52, 0x22, 0xb6])
  CLSID_PlaybackManager* = DEFINE_GUID(0x29dfa654'u32, 0xa97f, 0x47f0, [0xbf'u8, 0x26, 0x9e, 0x41, 0xfb, 0x94, 0x88, 0xd9])
  CLSID_AccessibilityDockingService* = DEFINE_GUID(0x29ce1d46'u32, 0xb481, 0x4aa0, [0xa0'u8, 0x8a, 0xd3, 0xeb, 0xc8, 0xac, 0xa4, 0x02])
  CLSID_FrameworkInputPane* = DEFINE_GUID(0xd5120aa3'u32, 0x46ba, 0x44c5, [0x82'u8, 0x2d, 0xca, 0x80, 0x92, 0xc1, 0xfc, 0x72])
  CLSID_DefFolderMenu* = DEFINE_GUID(0xc63382be'u32, 0x7933, 0x48d0, [0x9a'u8, 0xc8, 0x85, 0xfb, 0x46, 0xbe, 0x2f, 0xdd])
  CLSID_AppVisibility* = DEFINE_GUID(0x7e5fe3d9'u32, 0x985f, 0x4908, [0x91'u8, 0xf9, 0xee, 0x19, 0xf9, 0xfd, 0x15, 0x14])
  CLSID_AppShellVerbHandler* = DEFINE_GUID(0x4ed3a719'u32, 0xcea8, 0x4bd9, [0x91'u8, 0x0d, 0xe2, 0x52, 0xf9, 0x97, 0xaf, 0xc2])
  CLSID_ExecuteUnknown* = DEFINE_GUID(0xe44e9428'u32, 0xbdbc, 0x4987, [0xa0'u8, 0x99, 0x40, 0xdc, 0x8f, 0xd2, 0x55, 0xe7])
  CLSID_PackageDebugSettings* = DEFINE_GUID(0xb1aec16f'u32, 0x2383, 0x4852, [0xb0'u8, 0xe9, 0x8f, 0x0b, 0x1d, 0xc6, 0x6b, 0x4d])
  CLSID_ApplicationActivationManager* = DEFINE_GUID(0x45ba127d'u32, 0x10a8, 0x46ea, [0x8a'u8, 0xb7, 0x56, 0xea, 0x90, 0x78, 0x94, 0x3c])
  CLSID_ApplicationDesignModeSettings* = DEFINE_GUID(0x958a6fb5'u32, 0xdcb2, 0x4faf, [0xaa'u8, 0xfd, 0x7f, 0xb0, 0x54, 0xad, 0x1a, 0x3b])
  CLSID_ExecuteFolder* = DEFINE_GUID(0x11dbb47c'u32, 0xa525, 0x400b, [0x9e'u8, 0x80, 0xa5, 0x46, 0x15, 0xa0, 0x90, 0xc0])
  IID_IAssocHandlerInvoker* = DEFINE_GUID(0x92218cab'u32, 0xecaa, 0x4335, [0x81'u8, 0x33, 0x80, 0x7f, 0xd2, 0x34, 0xc2, 0xee])
  IID_IAssocHandler* = DEFINE_GUID(0xf04061ac'u32, 0x1659, 0x4a3f, [0xa9'u8, 0x54, 0x77, 0x5a, 0xa5, 0x7f, 0xc0, 0x83])
  IID_IEnumAssocHandlers* = DEFINE_GUID(0x973810ae'u32, 0x9599, 0x4b88, [0x9e'u8, 0x4d, 0x6e, 0xe9, 0x8c, 0x95, 0x52, 0xda])
  IID_IDataObjectProvider* = DEFINE_GUID(0x3d25f6d6'u32, 0x4b2a, 0x433c, [0x91'u8, 0x84, 0x7c, 0x33, 0xad, 0x35, 0xd0, 0x01])
  IID_IDataTransferManagerInterop* = DEFINE_GUID(0x3a3dcd6c'u32, 0x3eab, 0x43dc, [0xbc'u8, 0xde, 0x45, 0x67, 0x1c, 0xe8, 0x00, 0xc8])
  IID_IFrameworkInputPaneHandler* = DEFINE_GUID(0x226c537b'u32, 0x1e76, 0x4d9e, [0xa7'u8, 0x60, 0x33, 0xdb, 0x29, 0x92, 0x2f, 0x18])
  IID_IFrameworkInputPane* = DEFINE_GUID(0x5752238b'u32, 0x24f0, 0x495a, [0x82'u8, 0xf1, 0x2f, 0xd5, 0x93, 0x05, 0x67, 0x96])
  IID_ISearchableApplication* = DEFINE_GUID(0x08922f8d'u32, 0x243a, 0x49e3, [0xa4'u8, 0x95, 0xbd, 0x4f, 0x9c, 0xf8, 0xab, 0x9e])
  IID_IAccessibilityDockingServiceCallback* = DEFINE_GUID(0x157733fd'u32, 0xa592, 0x42e5, [0xb5'u8, 0x94, 0x24, 0x84, 0x68, 0xc5, 0xa8, 0x1b])
  IID_IAccessibilityDockingService* = DEFINE_GUID(0x8849dc22'u32, 0xcedf, 0x4c95, [0x99'u8, 0x8d, 0x05, 0x14, 0x19, 0xdd, 0x3f, 0x76])
  IID_IAppVisibilityEvents* = DEFINE_GUID(0x6584ce6b'u32, 0x7d82, 0x49c2, [0x89'u8, 0xc9, 0xc6, 0xbc, 0x02, 0xba, 0x8c, 0x38])
  IID_IAppVisibility* = DEFINE_GUID(0x2246ea2d'u32, 0xcaea, 0x4444, [0xa3'u8, 0xc4, 0x6d, 0xe8, 0x27, 0xe4, 0x43, 0x13])
  IID_IPackageExecutionStateChangeNotification* = DEFINE_GUID(0x1bb12a62'u32, 0x2ad8, 0x432b, [0x8c'u8, 0xcf, 0x0c, 0x2c, 0x52, 0xaf, 0xcd, 0x5b])
  IID_IPackageDebugSettings* = DEFINE_GUID(0xf27c3930'u32, 0x8029, 0x4ad1, [0x94'u8, 0xe3, 0x3d, 0xba, 0x41, 0x78, 0x10, 0xc1])
  IID_IExecuteCommandApplicationHostEnvironment* = DEFINE_GUID(0x18b21aa9'u32, 0xe184, 0x4ff0, [0x9f'u8, 0x5e, 0xf8, 0x82, 0xd0, 0x37, 0x71, 0xb3])
  IID_IExecuteCommandHost* = DEFINE_GUID(0x4b6832a2'u32, 0x5f04, 0x4c9d, [0xb8'u8, 0x9d, 0x72, 0x7a, 0x15, 0xd1, 0x03, 0xe7])
  IID_IApplicationDesignModeSettings* = DEFINE_GUID(0x2a3dee9a'u32, 0xe31d, 0x46d6, [0x85'u8, 0x08, 0xbc, 0xc5, 0x97, 0xdb, 0x35, 0x57])
  IID_IInitializeWithWindow* = DEFINE_GUID(0x3e68d4bd'u32, 0x7135, 0x4d10, [0x80'u8, 0x18, 0x9f, 0xb6, 0xd9, 0xf3, 0x3f, 0xa1])
  IID_IHandlerInfo* = DEFINE_GUID(0x997706ef'u32, 0xf880, 0x453b, [0x81'u8, 0x18, 0x39, 0xe1, 0xa2, 0xd2, 0x65, 0x5a])
  IID_IHandlerActivationHost* = DEFINE_GUID(0x35094a87'u32, 0x8bb1, 0x4237, [0x96'u8, 0xc6, 0xc4, 0x17, 0xee, 0xbd, 0xb0, 0x78])
  SID_ShellExecuteNamedPropertyStore* = DEFINE_GUID(0xeb84ada2'u32, 0x00ff, 0x4992, [0x83'u8, 0x24, 0xed, 0x5c, 0xe0, 0x61, 0xcb, 0x29])

# objext/ocidl.nim

const
  # QACONTAINERFLAGS* = enum
  QACONTAINER_SHOWHATCHING* = 1
  QACONTAINER_SHOWGRABHANDLES* = 2
  QACONTAINER_USERMODE* = 4
  QACONTAINER_DISPLAYASDEFAULT* = 8
  QACONTAINER_UIDEAD* = 16
  QACONTAINER_AUTOCLIP* = 32
  QACONTAINER_MESSAGEREFLECT* = 64
  QACONTAINER_SUPPORTSMNEMONICS* = 128
  # READYSTATE* = enum
  READYSTATE_UNINITIALIZED* = 0
  READYSTATE_LOADING* = 1
  READYSTATE_LOADED* = 2
  READYSTATE_INTERACTIVE* = 3
  READYSTATE_COMPLETE* = 4
  # PROPBAG2_TYPE* = enum
  PROPBAG2_TYPE_UNDEFINED* = 0
  PROPBAG2_TYPE_DATA* = 1
  PROPBAG2_TYPE_URL* = 2
  PROPBAG2_TYPE_OBJECT* = 3
  PROPBAG2_TYPE_STREAM* = 4
  PROPBAG2_TYPE_STORAGE* = 5
  PROPBAG2_TYPE_MONIKER* = 6

type
  IBindHost* {.pure.} = object
    lpVtbl*: ptr IBindHostVtbl
  IBindHostVtbl* {.pure, inheritable.} = object of IUnknownVtbl
  IServiceProvider* {.pure.} = object
    lpVtbl*: ptr IServiceProviderVtbl
  IServiceProviderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    QueryService*: proc(self: ptr IServiceProvider, P1: REFGUID, P2: REFIID, P3: ptr pointer): HRESULT {.stdcall.}
  TEXTMETRICOLE* = TEXTMETRICW
  LPTEXTMETRICOLE* = ptr TEXTMETRICOLE
  OLE_COLOR* = DWORD
  OLE_HANDLE* = UINT
  OLE_XPOS_HIMETRIC* = int32
  OLE_YPOS_HIMETRIC* = int32
  OLE_XSIZE_HIMETRIC* = int32
  OLE_YSIZE_HIMETRIC* = int32
  READYSTATE* = int32
  PROPBAG2_TYPE* = int32
  PROPBAG2* {.final, pure.} = object
    dwType*: DWORD
    vt*: VARTYPE
    cfType*: CLIPFORMAT
    dwHint*: DWORD
    pstrName*: LPOLESTR
    clsid*: CLSID
  QACONTAINER* {.final, pure.} = object
    cbSize*: ULONG
    pClientSite*: ptr IOleClientSite
    pAdviseSink*: ptr IAdviseSinkEx
    pPropertyNotifySink*: ptr IPropertyNotifySink
    pUnkEventSink*: ptr IUnknown
    dwAmbientFlags*: DWORD
    colorFore*: OLE_COLOR
    colorBack*: OLE_COLOR
    pFont*: ptr IFont
    pUndoMgr*: ptr IOleUndoManager
    dwAppearance*: DWORD
    lcid*: LONG
    hpal*: HPALETTE
    pBindHost*: ptr IBindHost
    pOleControlSite*: ptr IOleControlSite
    pServiceProvider*: ptr IServiceProvider
  QACONTROL* {.final, pure.} = object
    cbSize*: ULONG
    dwMiscStatus*: DWORD
    dwViewStatus*: DWORD
    dwEventCookie*: DWORD
    dwPropNotifyCookie*: DWORD
    dwPointerActivationPolicy*: DWORD
  POINTF* {.final, pure.} = object
    x*: float32
    y*: float32
  LPPOINTF* = ptr POINTF
  CONTROLINFO* {.final, pure.} = object
    cb*: ULONG
    hAccel*: HACCEL
    cAccel*: USHORT
    dwFlags*: DWORD
  LPCONTROLINFO* = ptr CONTROLINFO
  CONNECTDATA* {.final, pure.} = object
    pUnk*: LPUNKNOWN
    dwCookie*: DWORD
  LPCONNECTDATA* = ptr CONNECTDATA
  LICINFO* {.final, pure.} = object
    cbLicInfo*: int32
    fRuntimeKeyAvail*: BOOL
    fLicVerified*: BOOL
  LPLICINFO* = ptr LICINFO
  CAUUID* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr GUID
  LPCAUUID* = ptr CAUUID
  CALPOLESTR* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr LPOLESTR
  LPCALPOLESTR* = ptr CALPOLESTR
  CADWORD* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr DWORD
  LPCADWORD* = ptr CADWORD
  PROPPAGEINFO* {.final, pure.} = object
    cb*: ULONG
    pszTitle*: LPOLESTR
    size*: SIZE
    pszDocString*: LPOLESTR
    pszHelpFile*: LPOLESTR
    dwHelpContext*: DWORD
  LPPROPPAGEINFO* = ptr PROPPAGEINFO
  IOleControl* {.pure.} = object
    lpVtbl*: ptr IOleControlVtbl
  IOleControlVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetControlInfo*: proc(self: ptr IOleControl, P1: LPCONTROLINFO): HRESULT {.stdcall.}
    OnMnemonic*: proc(self: ptr IOleControl, P1: LPMSG): HRESULT {.stdcall.}
    OnAmbientPropertyChange*: proc(self: ptr IOleControl, P1: DISPID): HRESULT {.stdcall.}
    FreezeEvents*: proc(self: ptr IOleControl, P1: BOOL): HRESULT {.stdcall.}
  IOleControlSite* {.pure.} = object
    lpVtbl*: ptr IOleControlSiteVtbl
  IOleControlSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnControlInfoChanged*: proc(self: ptr IOleControlSite): HRESULT {.stdcall.}
    LockInPlaceActive*: proc(self: ptr IOleControlSite, P1: BOOL): HRESULT {.stdcall.}
    GetExtendedControl*: proc(self: ptr IOleControlSite, P1: ptr LPDISPATCH): HRESULT {.stdcall.}
    TransformCoords*: proc(self: ptr IOleControlSite, P1: ptr POINTL, P2: ptr POINTF, P3: DWORD): HRESULT {.stdcall.}
    TranslateAccelerator*: proc(self: ptr IOleControlSite, P1: LPMSG, P2: DWORD): HRESULT {.stdcall.}
    OnFocus*: proc(self: ptr IOleControlSite, P1: BOOL): HRESULT {.stdcall.}
    ShowPropertyFrame*: proc(self: ptr IOleControlSite): HRESULT {.stdcall.}
  ISimpleFrameSite* {.pure.} = object
    lpVtbl*: ptr ISimpleFrameSiteVtbl
  ISimpleFrameSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    PreMessageFilter*: proc(self: ptr ISimpleFrameSite, P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM, P5: ptr LRESULT, P6: PDWORD): HRESULT {.stdcall.}
    PostMessageFilter*: proc(self: ptr ISimpleFrameSite, P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM, P5: ptr LRESULT, P6: DWORD): HRESULT {.stdcall.}
  IErrorLog* {.pure.} = object
    lpVtbl*: ptr IErrorLogVtbl
  IErrorLogVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AddError*: proc(self: ptr IErrorLog, P1: LPCOLESTR, P2: LPEXCEPINFO): HRESULT {.stdcall.}
  LPERRORLOG* = ptr IErrorLog
  IPropertyBag* {.pure.} = object
    lpVtbl*: ptr IPropertyBagVtbl
  IPropertyBagVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Read*: proc(self: ptr IPropertyBag, P1: LPCOLESTR, P2: LPVARIANT, P3: LPERRORLOG): HRESULT {.stdcall.}
    Write*: proc(self: ptr IPropertyBag, P1: LPCOLESTR, P2: LPVARIANT): HRESULT {.stdcall.}
  LPPROPERTYBAG* = ptr IPropertyBag
  IPropertyBag2* {.pure.} = object
    lpVtbl*: ptr IPropertyBag2Vtbl
  IPropertyBag2Vtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Read*: proc(self: ptr IPropertyBag2, P1: ULONG, P2: ptr PROPBAG2, P3: LPERRORLOG, P4: ptr VARIANT, P5: ptr HRESULT): HRESULT {.stdcall.}
    Write*: proc(self: ptr IPropertyBag2, P1: ULONG, P2: ptr PROPBAG2, P3: ptr VARIANT): HRESULT {.stdcall.}
    CountProperties*: proc(self: ptr IPropertyBag2, P1: ptr ULONG): HRESULT {.stdcall.}
    GetPropertyInfo*: proc(self: ptr IPropertyBag2, P1: ULONG, P2: ULONG, P3: ptr PROPBAG2, P4: ptr ULONG): HRESULT {.stdcall.}
    LoadObject*: proc(self: ptr IPropertyBag2, P1: LPCOLESTR, P2: DWORD, P3: ptr IUnknown, P4: LPERRORLOG): HRESULT {.stdcall.}
  LPPROPERTYBAG2* = ptr IPropertyBag2
  IPersistPropertyBag* {.pure.} = object
    lpVtbl*: ptr IPersistPropertyBagVtbl
  IPersistPropertyBagVtbl* {.pure, inheritable.} = object of IPersistVtbl
    InitNew*: proc(self: ptr IPersistPropertyBag): HRESULT {.stdcall.}
    Load*: proc(self: ptr IPersistPropertyBag, P1: LPPROPERTYBAG, P2: LPERRORLOG): HRESULT {.stdcall.}
    Save*: proc(self: ptr IPersistPropertyBag, P1: LPPROPERTYBAG, P2: BOOL, P3: BOOL): HRESULT {.stdcall.}
  IPersistPropertyBag2* {.pure.} = object
    lpVtbl*: ptr IPersistPropertyBag2Vtbl
  IPersistPropertyBag2Vtbl* {.pure, inheritable.} = object of IPersistVtbl
    InitNew*: proc(self: ptr IPersistPropertyBag2): HRESULT {.stdcall.}
    Load*: proc(self: ptr IPersistPropertyBag2, P1: LPPROPERTYBAG2, P2: LPERRORLOG): HRESULT {.stdcall.}
    Save*: proc(self: ptr IPersistPropertyBag2, P1: LPPROPERTYBAG2, P2: BOOL, P3: BOOL): HRESULT {.stdcall.}
    IsDirty*: proc(self: ptr IPersistPropertyBag2): HRESULT {.stdcall.}
  IPersistStreamInit* {.pure.} = object
    lpVtbl*: ptr IPersistStreamInitVtbl
  IPersistStreamInitVtbl* {.pure, inheritable.} = object of IPersistVtbl
    IsDirty*: proc(self: ptr IPersistStreamInit): HRESULT {.stdcall.}
    Load*: proc(self: ptr IPersistStreamInit, P1: LPSTREAM): HRESULT {.stdcall.}
    Save*: proc(self: ptr IPersistStreamInit, P1: LPSTREAM, P2: BOOL): HRESULT {.stdcall.}
    GetSizeMax*: proc(self: ptr IPersistStreamInit, P1: PULARGE_INTEGER): HRESULT {.stdcall.}
    InitNew*: proc(self: ptr IPersistStreamInit): HRESULT {.stdcall.}
  IPersistMemory* {.pure.} = object
    lpVtbl*: ptr IPersistMemoryVtbl
  IPersistMemoryVtbl* {.pure, inheritable.} = object of IPersistVtbl
    IsDirty*: proc(self: ptr IPersistMemory): HRESULT {.stdcall.}
    Load*: proc(self: ptr IPersistMemory, P1: PVOID, P2: ULONG): HRESULT {.stdcall.}
    Save*: proc(self: ptr IPersistMemory, P1: PVOID, P2: BOOL, P3: ULONG): HRESULT {.stdcall.}
    GetSizeMax*: proc(self: ptr IPersistMemory, P1: PULONG): HRESULT {.stdcall.}
    InitNew*: proc(self: ptr IPersistMemory): HRESULT {.stdcall.}
  IPropertyNotifySink* {.pure.} = object
    lpVtbl*: ptr IPropertyNotifySinkVtbl
  IPropertyNotifySinkVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnChanged*: proc(self: ptr IPropertyNotifySink, P1: DISPID): HRESULT {.stdcall.}
    OnRequestEdit*: proc(self: ptr IPropertyNotifySink, P1: DISPID): HRESULT {.stdcall.}
  IProvideClassInfo* {.pure.} = object
    lpVtbl*: ptr IProvideClassInfoVtbl
  IProvideClassInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetClassInfo*: proc(self: ptr IProvideClassInfo, P1: ptr LPTYPEINFO): HRESULT {.stdcall.}
  IProvideClassInfo2* {.pure.} = object
    lpVtbl*: ptr IProvideClassInfo2Vtbl
  IProvideClassInfo2Vtbl* {.pure, inheritable.} = object of IProvideClassInfoVtbl
    GetGUID*: proc(self: ptr IProvideClassInfo2, P1: DWORD, P2: ptr GUID): HRESULT {.stdcall.}
  IConnectionPointContainer* {.pure.} = object
    lpVtbl*: ptr IConnectionPointContainerVtbl
  IConnectionPointContainerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    EnumConnectionPoints*: proc(self: ptr IConnectionPointContainer, P1: ptr LPENUMCONNECTIONPOINTS): HRESULT {.stdcall.}
    FindConnectionPoint*: proc(self: ptr IConnectionPointContainer, P1: REFIID, P2: ptr LPCONNECTIONPOINT): HRESULT {.stdcall.}
  IEnumConnectionPoints* {.pure.} = object
    lpVtbl*: ptr IEnumConnectionPointsVtbl
  IEnumConnectionPointsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumConnectionPoints, P1: ULONG, P2: ptr LPCONNECTIONPOINT, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumConnectionPoints, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumConnectionPoints): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumConnectionPoints, P1: ptr LPENUMCONNECTIONPOINTS): HRESULT {.stdcall.}
  LPENUMCONNECTIONPOINTS* = ptr IEnumConnectionPoints
  IConnectionPoint* {.pure.} = object
    lpVtbl*: ptr IConnectionPointVtbl
  IConnectionPointVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetConnectionInterface*: proc(self: ptr IConnectionPoint, P1: ptr IID): HRESULT {.stdcall.}
    GetConnectionPointContainer*: proc(self: ptr IConnectionPoint, P1: ptr ptr IConnectionPointContainer): HRESULT {.stdcall.}
    Advise*: proc(self: ptr IConnectionPoint, P1: LPUNKNOWN, P2: PDWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr IConnectionPoint, P1: DWORD): HRESULT {.stdcall.}
    EnumConnections*: proc(self: ptr IConnectionPoint, P1: ptr LPENUMCONNECTIONS): HRESULT {.stdcall.}
  LPCONNECTIONPOINT* = ptr IConnectionPoint
  IEnumConnections* {.pure.} = object
    lpVtbl*: ptr IEnumConnectionsVtbl
  IEnumConnectionsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumConnections, P1: ULONG, P2: LPCONNECTDATA, P3: PULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumConnections, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumConnections): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumConnections, P1: ptr LPENUMCONNECTIONS): HRESULT {.stdcall.}
  LPENUMCONNECTIONS* = ptr IEnumConnections
  IClassFactory2* {.pure.} = object
    lpVtbl*: ptr IClassFactory2Vtbl
  IClassFactory2Vtbl* {.pure, inheritable.} = object of IClassFactoryVtbl
    GetLicInfo*: proc(self: ptr IClassFactory2, P1: LPLICINFO): HRESULT {.stdcall.}
    RequestLicKey*: proc(self: ptr IClassFactory2, P1: DWORD, P2: ptr BSTR): HRESULT {.stdcall.}
    CreateInstanceLic*: proc(self: ptr IClassFactory2, P1: LPUNKNOWN, P2: LPUNKNOWN, P3: REFIID, P4: BSTR, P5: ptr PVOID): HRESULT {.stdcall.}
  ISpecifyPropertyPages* {.pure.} = object
    lpVtbl*: ptr ISpecifyPropertyPagesVtbl
  ISpecifyPropertyPagesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetPages*: proc(self: ptr ISpecifyPropertyPages, P1: ptr CAUUID): HRESULT {.stdcall.}
  IPerPropertyBrowsing* {.pure.} = object
    lpVtbl*: ptr IPerPropertyBrowsingVtbl
  IPerPropertyBrowsingVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetDisplayString*: proc(self: ptr IPerPropertyBrowsing, P1: DISPID, P2: ptr BSTR): HRESULT {.stdcall.}
    MapPropertyToPage*: proc(self: ptr IPerPropertyBrowsing, P1: DISPID, P2: LPCLSID): HRESULT {.stdcall.}
    GetPredefinedStrings*: proc(self: ptr IPerPropertyBrowsing, P1: DISPID, P2: ptr CALPOLESTR, P3: ptr CADWORD): HRESULT {.stdcall.}
    GetPredefinedValue*: proc(self: ptr IPerPropertyBrowsing, P1: DISPID, P2: DWORD, P3: ptr VARIANT): HRESULT {.stdcall.}
  IPropertyPageSite* {.pure.} = object
    lpVtbl*: ptr IPropertyPageSiteVtbl
  IPropertyPageSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnStatusChange*: proc(self: ptr IPropertyPageSite, P1: DWORD): HRESULT {.stdcall.}
    GetLocaleID*: proc(self: ptr IPropertyPageSite, P1: ptr LCID): HRESULT {.stdcall.}
    GetPageContainer*: proc(self: ptr IPropertyPageSite, P1: ptr LPUNKNOWN): HRESULT {.stdcall.}
    TranslateAccelerator*: proc(self: ptr IPropertyPageSite, P1: LPMSG): HRESULT {.stdcall.}
  LPPROPERTYPAGESITE* = ptr IPropertyPageSite
  IPropertyPage* {.pure.} = object
    lpVtbl*: ptr IPropertyPageVtbl
  IPropertyPageVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetPageSite*: proc(self: ptr IPropertyPage, P1: LPPROPERTYPAGESITE): HRESULT {.stdcall.}
    Activate*: proc(self: ptr IPropertyPage, P1: HWND, P2: LPCRECT, P3: BOOL): HRESULT {.stdcall.}
    Deactivate*: proc(self: ptr IPropertyPage): HRESULT {.stdcall.}
    GetPageInfo*: proc(self: ptr IPropertyPage, P1: LPPROPPAGEINFO): HRESULT {.stdcall.}
    SetObjects*: proc(self: ptr IPropertyPage, P1: ULONG, P2: ptr LPUNKNOWN): HRESULT {.stdcall.}
    Show*: proc(self: ptr IPropertyPage, P1: UINT): HRESULT {.stdcall.}
    Move*: proc(self: ptr IPropertyPage, P1: LPCRECT): HRESULT {.stdcall.}
    IsPageDirty*: proc(self: ptr IPropertyPage): HRESULT {.stdcall.}
    Apply*: proc(self: ptr IPropertyPage): HRESULT {.stdcall.}
    Help*: proc(self: ptr IPropertyPage, P1: LPCOLESTR): HRESULT {.stdcall.}
    TranslateAccelerator*: proc(self: ptr IPropertyPage, P1: LPMSG): HRESULT {.stdcall.}
  IPropertyPage2* {.pure.} = object
    lpVtbl*: ptr IPropertyPage2Vtbl
  IPropertyPage2Vtbl* {.pure, inheritable.} = object of IPropertyPageVtbl
    EditProperty*: proc(self: ptr IPropertyPage2, P1: DISPID): HRESULT {.stdcall.}
  IFont* {.pure.} = object
    lpVtbl*: ptr IFontVtbl
  IFontVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    get_Name*: proc(self: ptr IFont, P1: ptr BSTR): HRESULT {.stdcall.}
    put_Name*: proc(self: ptr IFont, P1: BSTR): HRESULT {.stdcall.}
    get_Size*: proc(self: ptr IFont, P1: ptr CY): HRESULT {.stdcall.}
    put_Size*: proc(self: ptr IFont, P1: CY): HRESULT {.stdcall.}
    get_Bold*: proc(self: ptr IFont, P1: ptr BOOL): HRESULT {.stdcall.}
    put_Bold*: proc(self: ptr IFont, P1: BOOL): HRESULT {.stdcall.}
    get_Italic*: proc(self: ptr IFont, P1: ptr BOOL): HRESULT {.stdcall.}
    put_Italic*: proc(self: ptr IFont, P1: BOOL): HRESULT {.stdcall.}
    get_Underline*: proc(self: ptr IFont, P1: ptr BOOL): HRESULT {.stdcall.}
    put_Underline*: proc(self: ptr IFont, P1: BOOL): HRESULT {.stdcall.}
    get_Strikethrough*: proc(self: ptr IFont, P1: ptr BOOL): HRESULT {.stdcall.}
    put_Strikethrough*: proc(self: ptr IFont, P1: BOOL): HRESULT {.stdcall.}
    get_Weight*: proc(self: ptr IFont, P1: ptr int16): HRESULT {.stdcall.}
    put_Weight*: proc(self: ptr IFont, P1: int16): HRESULT {.stdcall.}
    get_Charset*: proc(self: ptr IFont, P1: ptr int16): HRESULT {.stdcall.}
    put_Charset*: proc(self: ptr IFont, P1: int16): HRESULT {.stdcall.}
    get_hFont*: proc(self: ptr IFont, P1: ptr HFONT): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IFont, P1: ptr ptr IFont): HRESULT {.stdcall.}
    IsEqual*: proc(self: ptr IFont, P1: ptr IFont): HRESULT {.stdcall.}
    SetRatio*: proc(self: ptr IFont, P1: int32, P2: int32): HRESULT {.stdcall.}
    QueryTextMetrics*: proc(self: ptr IFont, P1: LPTEXTMETRICOLE): HRESULT {.stdcall.}
    AddRefHfont*: proc(self: ptr IFont, P1: HFONT): HRESULT {.stdcall.}
    ReleaseHfont*: proc(self: ptr IFont, P1: HFONT): HRESULT {.stdcall.}
    SetHdc*: proc(self: ptr IFont, P1: HDC): HRESULT {.stdcall.}
  LPFONT* = ptr IFont
  IFontDisp* {.pure.} = object
    lpVtbl*: ptr IFontDispVtbl
  IFontDispVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  LPFONTDISP* = ptr IFontDisp
  IPicture* {.pure.} = object
    lpVtbl*: ptr IPictureVtbl
  IPictureVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    get_Handle*: proc(self: ptr IPicture, P1: ptr OLE_HANDLE): HRESULT {.stdcall.}
    get_hPal*: proc(self: ptr IPicture, P1: ptr OLE_HANDLE): HRESULT {.stdcall.}
    get_Type*: proc(self: ptr IPicture, P1: ptr int16): HRESULT {.stdcall.}
    get_Width*: proc(self: ptr IPicture, P1: ptr OLE_XSIZE_HIMETRIC): HRESULT {.stdcall.}
    get_Height*: proc(self: ptr IPicture, P1: ptr OLE_YSIZE_HIMETRIC): HRESULT {.stdcall.}
    Render*: proc(self: ptr IPicture, P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32, P6: OLE_XPOS_HIMETRIC, P7: OLE_YPOS_HIMETRIC, P8: OLE_XSIZE_HIMETRIC, P9: OLE_YSIZE_HIMETRIC, P10: LPCRECT): HRESULT {.stdcall.}
    set_hPal*: proc(self: ptr IPicture, P1: OLE_HANDLE): HRESULT {.stdcall.}
    get_CurDC*: proc(self: ptr IPicture, P1: ptr HDC): HRESULT {.stdcall.}
    SelectPicture*: proc(self: ptr IPicture, P1: HDC, P2: ptr HDC, P3: ptr OLE_HANDLE): HRESULT {.stdcall.}
    get_KeepOriginalFormat*: proc(self: ptr IPicture, P1: ptr BOOL): HRESULT {.stdcall.}
    put_KeepOriginalFormat*: proc(self: ptr IPicture, P1: BOOL): HRESULT {.stdcall.}
    PictureChanged*: proc(self: ptr IPicture): HRESULT {.stdcall.}
    SaveAsFile*: proc(self: ptr IPicture, P1: LPSTREAM, P2: BOOL, P3: ptr LONG): HRESULT {.stdcall.}
    get_Attributes*: proc(self: ptr IPicture, P1: PDWORD): HRESULT {.stdcall.}
  IPictureDisp* {.pure.} = object
    lpVtbl*: ptr IPictureDispVtbl
  IPictureDispVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IOleInPlaceSiteEx* {.pure.} = object
    lpVtbl*: ptr IOleInPlaceSiteExVtbl
  IOleInPlaceSiteExVtbl* {.pure, inheritable.} = object of IOleInPlaceSiteVtbl
    OnInPlaceActivateEx*: proc(self: ptr IOleInPlaceSiteEx, P1: ptr BOOL, P2: DWORD): HRESULT {.stdcall.}
    OnInPlaceDeactivateEx*: proc(self: ptr IOleInPlaceSiteEx, P1: BOOL): HRESULT {.stdcall.}
    RequestUIActivate*: proc(self: ptr IOleInPlaceSiteEx): HRESULT {.stdcall.}
  IObjectWithSite* {.pure.} = object
    lpVtbl*: ptr IObjectWithSiteVtbl
  IObjectWithSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetSite*: proc(self: ptr IObjectWithSite, P1: ptr IUnknown): HRESULT {.stdcall.}
    GetSite*: proc(self: ptr IObjectWithSite, P1: REFIID, P2: ptr pointer): HRESULT {.stdcall.}
  IOleInPlaceSiteWindowless* {.pure.} = object
    lpVtbl*: ptr IOleInPlaceSiteWindowlessVtbl
  IOleInPlaceSiteWindowlessVtbl* {.pure, inheritable.} = object of IOleInPlaceSiteExVtbl
    CanWindowlessActivate*: proc(self: ptr IOleInPlaceSiteWindowless): HRESULT {.stdcall.}
    GetCapture*: proc(self: ptr IOleInPlaceSiteWindowless): HRESULT {.stdcall.}
    SetCapture*: proc(self: ptr IOleInPlaceSiteWindowless, P1: BOOL): HRESULT {.stdcall.}
    GetFocus*: proc(self: ptr IOleInPlaceSiteWindowless): HRESULT {.stdcall.}
    SetFocus*: proc(self: ptr IOleInPlaceSiteWindowless, P1: BOOL): HRESULT {.stdcall.}
    GetDC*: proc(self: ptr IOleInPlaceSiteWindowless, P1: LPCRECT, P2: DWORD, P3: ptr HDC): HRESULT {.stdcall.}
    ReleaseDC*: proc(self: ptr IOleInPlaceSiteWindowless, P1: HDC): HRESULT {.stdcall.}
    InvalidateRect*: proc(self: ptr IOleInPlaceSiteWindowless, P1: LPCRECT, P2: BOOL): HRESULT {.stdcall.}
    InvalidateRgn*: proc(self: ptr IOleInPlaceSiteWindowless, P1: HRGN, P2: BOOL): HRESULT {.stdcall.}
    ScrollRect*: proc(self: ptr IOleInPlaceSiteWindowless, P1: INT, P2: INT, P3: LPCRECT, P4: LPCRECT): HRESULT {.stdcall.}
    AdjustRect*: proc(self: ptr IOleInPlaceSiteWindowless, P1: LPCRECT): HRESULT {.stdcall.}
    OnDefWindowMessage*: proc(self: ptr IOleInPlaceSiteWindowless, P1: UINT, P2: WPARAM, P3: LPARAM, P4: ptr LRESULT): HRESULT {.stdcall.}
  IAdviseSinkEx* {.pure.} = object
    lpVtbl*: ptr IAdviseSinkExVtbl
  IAdviseSinkExVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnDataChange*: proc(self: ptr IAdviseSinkEx, P1: ptr FORMATETC, P2: ptr STGMEDIUM): void {.stdcall.}
    OnViewChange*: proc(self: ptr IAdviseSinkEx, P1: DWORD, P2: LONG): void {.stdcall.}
    OnRename*: proc(self: ptr IAdviseSinkEx, P1: ptr IMoniker): void {.stdcall.}
    OnSave*: proc(self: ptr IAdviseSinkEx): void {.stdcall.}
    OnClose*: proc(self: ptr IAdviseSinkEx): void {.stdcall.}
    OnViewStatusChange*: proc(self: ptr IAdviseSinkEx, P1: DWORD): HRESULT {.stdcall.}
  IPointerInactive* {.pure.} = object
    lpVtbl*: ptr IPointerInactiveVtbl
  IPointerInactiveVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetActivationPolicy*: proc(self: ptr IPointerInactive, P1: ptr DWORD): HRESULT {.stdcall.}
    OnInactiveMouseMove*: proc(self: ptr IPointerInactive, P1: LPCRECT, P2: LONG, P3: LONG, P4: DWORD): HRESULT {.stdcall.}
    OnInactiveSetCursor*: proc(self: ptr IPointerInactive, P1: LPCRECT, P2: LONG, P3: LONG, P4: DWORD, P5: BOOL): HRESULT {.stdcall.}
  IOleUndoUnit* {.pure.} = object
    lpVtbl*: ptr IOleUndoUnitVtbl
  IOleUndoUnitVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Do*: proc(self: ptr IOleUndoUnit, P1: LPOLEUNDOMANAGER): HRESULT {.stdcall.}
    GetDescription*: proc(self: ptr IOleUndoUnit, P1: ptr BSTR): HRESULT {.stdcall.}
    GetUnitType*: proc(self: ptr IOleUndoUnit, P1: ptr CLSID, P2: ptr LONG): HRESULT {.stdcall.}
    OnNextAdd*: proc(self: ptr IOleUndoUnit): HRESULT {.stdcall.}
  IOleParentUndoUnit* {.pure.} = object
    lpVtbl*: ptr IOleParentUndoUnitVtbl
  IOleParentUndoUnitVtbl* {.pure, inheritable.} = object of IOleUndoUnitVtbl
    Open*: proc(self: ptr IOleParentUndoUnit, P1: ptr IOleParentUndoUnit): HRESULT {.stdcall.}
    Close*: proc(self: ptr IOleParentUndoUnit, P1: ptr IOleParentUndoUnit, P2: BOOL): HRESULT {.stdcall.}
    Add*: proc(self: ptr IOleParentUndoUnit, P1: ptr IOleUndoUnit): HRESULT {.stdcall.}
    FindUnit*: proc(self: ptr IOleParentUndoUnit, P1: ptr IOleUndoUnit): HRESULT {.stdcall.}
    GetParentState*: proc(self: ptr IOleParentUndoUnit, P1: ptr DWORD): HRESULT {.stdcall.}
  IEnumOleUndoUnits* {.pure.} = object
    lpVtbl*: ptr IEnumOleUndoUnitsVtbl
  IEnumOleUndoUnitsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumOleUndoUnits, P1: ULONG, P2: ptr ptr IOleUndoUnit, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumOleUndoUnits, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumOleUndoUnits): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumOleUndoUnits, P1: ptr ptr IEnumOleUndoUnits): HRESULT {.stdcall.}
  IOleUndoManager* {.pure.} = object
    lpVtbl*: ptr IOleUndoManagerVtbl
  IOleUndoManagerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Open*: proc(self: ptr IOleUndoManager, P1: ptr IOleParentUndoUnit): HRESULT {.stdcall.}
    Close*: proc(self: ptr IOleUndoManager, P1: ptr IOleParentUndoUnit, P2: BOOL): HRESULT {.stdcall.}
    Add*: proc(self: ptr IOleUndoManager, P1: ptr IOleUndoUnit): HRESULT {.stdcall.}
    GetOpenParentState*: proc(self: ptr IOleUndoManager, P1: ptr DWORD): HRESULT {.stdcall.}
    DiscardFrom*: proc(self: ptr IOleUndoManager, P1: ptr IOleUndoUnit): HRESULT {.stdcall.}
    UndoTo*: proc(self: ptr IOleUndoManager, P1: ptr IOleUndoUnit): HRESULT {.stdcall.}
    RedoTo*: proc(self: ptr IOleUndoManager, P1: ptr IOleUndoUnit): HRESULT {.stdcall.}
    EnumUndoable*: proc(self: ptr IOleUndoManager, P1: ptr ptr IEnumOleUndoUnits): HRESULT {.stdcall.}
    EnumRedoable*: proc(self: ptr IOleUndoManager, P1: ptr ptr IEnumOleUndoUnits): HRESULT {.stdcall.}
    GetLastUndoDescription*: proc(self: ptr IOleUndoManager, P1: ptr BSTR): HRESULT {.stdcall.}
    GetLastRedoDescription*: proc(self: ptr IOleUndoManager, P1: ptr BSTR): HRESULT {.stdcall.}
    Enable*: proc(self: ptr IOleUndoManager, P1: BOOL): HRESULT {.stdcall.}
  LPOLEUNDOMANAGER* = ptr IOleUndoManager
  IQuickActivate* {.pure.} = object
    lpVtbl*: ptr IQuickActivateVtbl
  IQuickActivateVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    QuickActivate*: proc(self: ptr IQuickActivate, P1: ptr QACONTAINER, P2: ptr QACONTROL): HRESULT {.stdcall.}
    SetContentExtent*: proc(self: ptr IQuickActivate, P1: LPSIZEL): HRESULT {.stdcall.}
    GetContentExtent*: proc(self: ptr IQuickActivate, P1: LPSIZEL): HRESULT {.stdcall.}

converter winim_converter_IBindHost*(x: ptr IBindHost): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IServiceProvider*(x: ptr IServiceProvider): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryService*(self: ptr IServiceProvider, P1: REFGUID, P2: REFIID, P3: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.QueryService(self, P1, P2, P3)
converter winim_converter_IOleControl*(x: ptr IOleControl): ptr IUnknown = cast[ptr IUnknown](x)
proc GetControlInfo*(self: ptr IOleControl, P1: LPCONTROLINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetControlInfo(self, P1)
proc OnMnemonic*(self: ptr IOleControl, P1: LPMSG): HRESULT {.inline, discardable.} = self.lpVtbl.OnMnemonic(self, P1)
proc OnAmbientPropertyChange*(self: ptr IOleControl, P1: DISPID): HRESULT {.inline, discardable.} = self.lpVtbl.OnAmbientPropertyChange(self, P1)
proc FreezeEvents*(self: ptr IOleControl, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.FreezeEvents(self, P1)
converter winim_converter_IOleControlSite*(x: ptr IOleControlSite): ptr IUnknown = cast[ptr IUnknown](x)
proc OnControlInfoChanged*(self: ptr IOleControlSite): HRESULT {.inline, discardable.} = self.lpVtbl.OnControlInfoChanged(self)
proc LockInPlaceActive*(self: ptr IOleControlSite, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.LockInPlaceActive(self, P1)
proc GetExtendedControl*(self: ptr IOleControlSite, P1: ptr LPDISPATCH): HRESULT {.inline, discardable.} = self.lpVtbl.GetExtendedControl(self, P1)
proc TransformCoords*(self: ptr IOleControlSite, P1: ptr POINTL, P2: ptr POINTF, P3: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.TransformCoords(self, P1, P2, P3)
proc TranslateAccelerator*(self: ptr IOleControlSite, P1: LPMSG, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAccelerator(self, P1, P2)
proc OnFocus*(self: ptr IOleControlSite, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnFocus(self, P1)
proc ShowPropertyFrame*(self: ptr IOleControlSite): HRESULT {.inline, discardable.} = self.lpVtbl.ShowPropertyFrame(self)
converter winim_converter_ISimpleFrameSite*(x: ptr ISimpleFrameSite): ptr IUnknown = cast[ptr IUnknown](x)
proc PreMessageFilter*(self: ptr ISimpleFrameSite, P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM, P5: ptr LRESULT, P6: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.PreMessageFilter(self, P1, P2, P3, P4, P5, P6)
proc PostMessageFilter*(self: ptr ISimpleFrameSite, P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM, P5: ptr LRESULT, P6: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.PostMessageFilter(self, P1, P2, P3, P4, P5, P6)
converter winim_converter_IErrorLog*(x: ptr IErrorLog): ptr IUnknown = cast[ptr IUnknown](x)
proc AddError*(self: ptr IErrorLog, P1: LPCOLESTR, P2: LPEXCEPINFO): HRESULT {.inline, discardable.} = self.lpVtbl.AddError(self, P1, P2)
converter winim_converter_IPropertyBag*(x: ptr IPropertyBag): ptr IUnknown = cast[ptr IUnknown](x)
proc Read*(self: ptr IPropertyBag, P1: LPCOLESTR, P2: LPVARIANT, P3: LPERRORLOG): HRESULT {.inline, discardable.} = self.lpVtbl.Read(self, P1, P2, P3)
proc Write*(self: ptr IPropertyBag, P1: LPCOLESTR, P2: LPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.Write(self, P1, P2)
converter winim_converter_IPropertyBag2*(x: ptr IPropertyBag2): ptr IUnknown = cast[ptr IUnknown](x)
proc Read*(self: ptr IPropertyBag2, P1: ULONG, P2: ptr PROPBAG2, P3: LPERRORLOG, P4: ptr VARIANT, P5: ptr HRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.Read(self, P1, P2, P3, P4, P5)
proc Write*(self: ptr IPropertyBag2, P1: ULONG, P2: ptr PROPBAG2, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.Write(self, P1, P2, P3)
proc CountProperties*(self: ptr IPropertyBag2, P1: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.CountProperties(self, P1)
proc GetPropertyInfo*(self: ptr IPropertyBag2, P1: ULONG, P2: ULONG, P3: ptr PROPBAG2, P4: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyInfo(self, P1, P2, P3, P4)
proc LoadObject*(self: ptr IPropertyBag2, P1: LPCOLESTR, P2: DWORD, P3: ptr IUnknown, P4: LPERRORLOG): HRESULT {.inline, discardable.} = self.lpVtbl.LoadObject(self, P1, P2, P3, P4)
converter winim_converter_IPersistPropertyBag*(x: ptr IPersistPropertyBag): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistPropertyBag*(x: ptr IPersistPropertyBag): ptr IPersist = cast[ptr IPersist](x)
proc InitNew*(self: ptr IPersistPropertyBag): HRESULT {.inline, discardable.} = self.lpVtbl.InitNew(self)
proc Load*(self: ptr IPersistPropertyBag, P1: LPPROPERTYBAG, P2: LPERRORLOG): HRESULT {.inline, discardable.} = self.lpVtbl.Load(self, P1, P2)
proc Save*(self: ptr IPersistPropertyBag, P1: LPPROPERTYBAG, P2: BOOL, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Save(self, P1, P2, P3)
converter winim_converter_IPersistPropertyBag2*(x: ptr IPersistPropertyBag2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistPropertyBag2*(x: ptr IPersistPropertyBag2): ptr IPersist = cast[ptr IPersist](x)
proc InitNew*(self: ptr IPersistPropertyBag2): HRESULT {.inline, discardable.} = self.lpVtbl.InitNew(self)
proc Load*(self: ptr IPersistPropertyBag2, P1: LPPROPERTYBAG2, P2: LPERRORLOG): HRESULT {.inline, discardable.} = self.lpVtbl.Load(self, P1, P2)
proc Save*(self: ptr IPersistPropertyBag2, P1: LPPROPERTYBAG2, P2: BOOL, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Save(self, P1, P2, P3)
proc IsDirty*(self: ptr IPersistPropertyBag2): HRESULT {.inline, discardable.} = self.lpVtbl.IsDirty(self)
converter winim_converter_IPersistStreamInit*(x: ptr IPersistStreamInit): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistStreamInit*(x: ptr IPersistStreamInit): ptr IPersist = cast[ptr IPersist](x)
proc IsDirty*(self: ptr IPersistStreamInit): HRESULT {.inline, discardable.} = self.lpVtbl.IsDirty(self)
proc Load*(self: ptr IPersistStreamInit, P1: LPSTREAM): HRESULT {.inline, discardable.} = self.lpVtbl.Load(self, P1)
proc Save*(self: ptr IPersistStreamInit, P1: LPSTREAM, P2: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Save(self, P1, P2)
proc GetSizeMax*(self: ptr IPersistStreamInit, P1: PULARGE_INTEGER): HRESULT {.inline, discardable.} = self.lpVtbl.GetSizeMax(self, P1)
proc InitNew*(self: ptr IPersistStreamInit): HRESULT {.inline, discardable.} = self.lpVtbl.InitNew(self)
converter winim_converter_IPersistMemory*(x: ptr IPersistMemory): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistMemory*(x: ptr IPersistMemory): ptr IPersist = cast[ptr IPersist](x)
proc IsDirty*(self: ptr IPersistMemory): HRESULT {.inline, discardable.} = self.lpVtbl.IsDirty(self)
proc Load*(self: ptr IPersistMemory, P1: PVOID, P2: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Load(self, P1, P2)
proc Save*(self: ptr IPersistMemory, P1: PVOID, P2: BOOL, P3: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Save(self, P1, P2, P3)
proc GetSizeMax*(self: ptr IPersistMemory, P1: PULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetSizeMax(self, P1)
proc InitNew*(self: ptr IPersistMemory): HRESULT {.inline, discardable.} = self.lpVtbl.InitNew(self)
converter winim_converter_IPropertyNotifySink*(x: ptr IPropertyNotifySink): ptr IUnknown = cast[ptr IUnknown](x)
proc OnChanged*(self: ptr IPropertyNotifySink, P1: DISPID): HRESULT {.inline, discardable.} = self.lpVtbl.OnChanged(self, P1)
proc OnRequestEdit*(self: ptr IPropertyNotifySink, P1: DISPID): HRESULT {.inline, discardable.} = self.lpVtbl.OnRequestEdit(self, P1)
converter winim_converter_IProvideClassInfo*(x: ptr IProvideClassInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc GetClassInfo*(self: ptr IProvideClassInfo, P1: ptr LPTYPEINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetClassInfo(self, P1)
converter winim_converter_IProvideClassInfo2*(x: ptr IProvideClassInfo2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IProvideClassInfo2*(x: ptr IProvideClassInfo2): ptr IProvideClassInfo = cast[ptr IProvideClassInfo](x)
proc GetGUID*(self: ptr IProvideClassInfo2, P1: DWORD, P2: ptr GUID): HRESULT {.inline, discardable.} = self.lpVtbl.GetGUID(self, P1, P2)
converter winim_converter_IConnectionPointContainer*(x: ptr IConnectionPointContainer): ptr IUnknown = cast[ptr IUnknown](x)
proc EnumConnectionPoints*(self: ptr IConnectionPointContainer, P1: ptr LPENUMCONNECTIONPOINTS): HRESULT {.inline, discardable.} = self.lpVtbl.EnumConnectionPoints(self, P1)
proc FindConnectionPoint*(self: ptr IConnectionPointContainer, P1: REFIID, P2: ptr LPCONNECTIONPOINT): HRESULT {.inline, discardable.} = self.lpVtbl.FindConnectionPoint(self, P1, P2)
converter winim_converter_IEnumConnectionPoints*(x: ptr IEnumConnectionPoints): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumConnectionPoints, P1: ULONG, P2: ptr LPCONNECTIONPOINT, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumConnectionPoints, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumConnectionPoints): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumConnectionPoints, P1: ptr LPENUMCONNECTIONPOINTS): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IConnectionPoint*(x: ptr IConnectionPoint): ptr IUnknown = cast[ptr IUnknown](x)
proc GetConnectionInterface*(self: ptr IConnectionPoint, P1: ptr IID): HRESULT {.inline, discardable.} = self.lpVtbl.GetConnectionInterface(self, P1)
proc GetConnectionPointContainer*(self: ptr IConnectionPoint, P1: ptr ptr IConnectionPointContainer): HRESULT {.inline, discardable.} = self.lpVtbl.GetConnectionPointContainer(self, P1)
proc Advise*(self: ptr IConnectionPoint, P1: LPUNKNOWN, P2: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, P1, P2)
proc Unadvise*(self: ptr IConnectionPoint, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, P1)
proc EnumConnections*(self: ptr IConnectionPoint, P1: ptr LPENUMCONNECTIONS): HRESULT {.inline, discardable.} = self.lpVtbl.EnumConnections(self, P1)
converter winim_converter_IEnumConnections*(x: ptr IEnumConnections): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumConnections, P1: ULONG, P2: LPCONNECTDATA, P3: PULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumConnections, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumConnections): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumConnections, P1: ptr LPENUMCONNECTIONS): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IClassFactory2*(x: ptr IClassFactory2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IClassFactory2*(x: ptr IClassFactory2): ptr IClassFactory = cast[ptr IClassFactory](x)
proc GetLicInfo*(self: ptr IClassFactory2, P1: LPLICINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetLicInfo(self, P1)
proc RequestLicKey*(self: ptr IClassFactory2, P1: DWORD, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.RequestLicKey(self, P1, P2)
proc CreateInstanceLic*(self: ptr IClassFactory2, P1: LPUNKNOWN, P2: LPUNKNOWN, P3: REFIID, P4: BSTR, P5: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.CreateInstanceLic(self, P1, P2, P3, P4, P5)
converter winim_converter_ISpecifyPropertyPages*(x: ptr ISpecifyPropertyPages): ptr IUnknown = cast[ptr IUnknown](x)
proc GetPages*(self: ptr ISpecifyPropertyPages, P1: ptr CAUUID): HRESULT {.inline, discardable.} = self.lpVtbl.GetPages(self, P1)
converter winim_converter_IPerPropertyBrowsing*(x: ptr IPerPropertyBrowsing): ptr IUnknown = cast[ptr IUnknown](x)
proc GetDisplayString*(self: ptr IPerPropertyBrowsing, P1: DISPID, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDisplayString(self, P1, P2)
proc MapPropertyToPage*(self: ptr IPerPropertyBrowsing, P1: DISPID, P2: LPCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.MapPropertyToPage(self, P1, P2)
proc GetPredefinedStrings*(self: ptr IPerPropertyBrowsing, P1: DISPID, P2: ptr CALPOLESTR, P3: ptr CADWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetPredefinedStrings(self, P1, P2, P3)
proc GetPredefinedValue*(self: ptr IPerPropertyBrowsing, P1: DISPID, P2: DWORD, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetPredefinedValue(self, P1, P2, P3)
converter winim_converter_IPropertyPageSite*(x: ptr IPropertyPageSite): ptr IUnknown = cast[ptr IUnknown](x)
proc OnStatusChange*(self: ptr IPropertyPageSite, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnStatusChange(self, P1)
proc GetLocaleID*(self: ptr IPropertyPageSite, P1: ptr LCID): HRESULT {.inline, discardable.} = self.lpVtbl.GetLocaleID(self, P1)
proc GetPageContainer*(self: ptr IPropertyPageSite, P1: ptr LPUNKNOWN): HRESULT {.inline, discardable.} = self.lpVtbl.GetPageContainer(self, P1)
proc TranslateAccelerator*(self: ptr IPropertyPageSite, P1: LPMSG): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAccelerator(self, P1)
converter winim_converter_IPropertyPage*(x: ptr IPropertyPage): ptr IUnknown = cast[ptr IUnknown](x)
proc SetPageSite*(self: ptr IPropertyPage, P1: LPPROPERTYPAGESITE): HRESULT {.inline, discardable.} = self.lpVtbl.SetPageSite(self, P1)
proc Activate*(self: ptr IPropertyPage, P1: HWND, P2: LPCRECT, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Activate(self, P1, P2, P3)
proc Deactivate*(self: ptr IPropertyPage): HRESULT {.inline, discardable.} = self.lpVtbl.Deactivate(self)
proc GetPageInfo*(self: ptr IPropertyPage, P1: LPPROPPAGEINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetPageInfo(self, P1)
proc SetObjects*(self: ptr IPropertyPage, P1: ULONG, P2: ptr LPUNKNOWN): HRESULT {.inline, discardable.} = self.lpVtbl.SetObjects(self, P1, P2)
proc Show*(self: ptr IPropertyPage, P1: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.Show(self, P1)
proc Move*(self: ptr IPropertyPage, P1: LPCRECT): HRESULT {.inline, discardable.} = self.lpVtbl.Move(self, P1)
proc IsPageDirty*(self: ptr IPropertyPage): HRESULT {.inline, discardable.} = self.lpVtbl.IsPageDirty(self)
proc Apply*(self: ptr IPropertyPage): HRESULT {.inline, discardable.} = self.lpVtbl.Apply(self)
proc Help*(self: ptr IPropertyPage, P1: LPCOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.Help(self, P1)
proc TranslateAccelerator*(self: ptr IPropertyPage, P1: LPMSG): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAccelerator(self, P1)
converter winim_converter_IPropertyPage2*(x: ptr IPropertyPage2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPropertyPage2*(x: ptr IPropertyPage2): ptr IPropertyPage = cast[ptr IPropertyPage](x)
proc EditProperty*(self: ptr IPropertyPage2, P1: DISPID): HRESULT {.inline, discardable.} = self.lpVtbl.EditProperty(self, P1)
converter winim_converter_IFont*(x: ptr IFont): ptr IUnknown = cast[ptr IUnknown](x)
proc get_Name*(self: ptr IFont, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_Name(self, P1)
proc put_Name*(self: ptr IFont, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_Name(self, P1)
proc get_Size*(self: ptr IFont, P1: ptr CY): HRESULT {.inline, discardable.} = self.lpVtbl.get_Size(self, P1)
proc put_Size*(self: ptr IFont, P1: CY): HRESULT {.inline, discardable.} = self.lpVtbl.put_Size(self, P1)
proc get_Bold*(self: ptr IFont, P1: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_Bold(self, P1)
proc put_Bold*(self: ptr IFont, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_Bold(self, P1)
proc get_Italic*(self: ptr IFont, P1: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_Italic(self, P1)
proc put_Italic*(self: ptr IFont, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_Italic(self, P1)
proc get_Underline*(self: ptr IFont, P1: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_Underline(self, P1)
proc put_Underline*(self: ptr IFont, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_Underline(self, P1)
proc get_Strikethrough*(self: ptr IFont, P1: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_Strikethrough(self, P1)
proc put_Strikethrough*(self: ptr IFont, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_Strikethrough(self, P1)
proc get_Weight*(self: ptr IFont, P1: ptr int16): HRESULT {.inline, discardable.} = self.lpVtbl.get_Weight(self, P1)
proc put_Weight*(self: ptr IFont, P1: int16): HRESULT {.inline, discardable.} = self.lpVtbl.put_Weight(self, P1)
proc get_Charset*(self: ptr IFont, P1: ptr int16): HRESULT {.inline, discardable.} = self.lpVtbl.get_Charset(self, P1)
proc put_Charset*(self: ptr IFont, P1: int16): HRESULT {.inline, discardable.} = self.lpVtbl.put_Charset(self, P1)
proc get_hFont*(self: ptr IFont, P1: ptr HFONT): HRESULT {.inline, discardable.} = self.lpVtbl.get_hFont(self, P1)
proc Clone*(self: ptr IFont, P1: ptr ptr IFont): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
proc IsEqual*(self: ptr IFont, P1: ptr IFont): HRESULT {.inline, discardable.} = self.lpVtbl.IsEqual(self, P1)
proc SetRatio*(self: ptr IFont, P1: int32, P2: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetRatio(self, P1, P2)
proc QueryTextMetrics*(self: ptr IFont, P1: LPTEXTMETRICOLE): HRESULT {.inline, discardable.} = self.lpVtbl.QueryTextMetrics(self, P1)
proc AddRefHfont*(self: ptr IFont, P1: HFONT): HRESULT {.inline, discardable.} = self.lpVtbl.AddRefHfont(self, P1)
proc ReleaseHfont*(self: ptr IFont, P1: HFONT): HRESULT {.inline, discardable.} = self.lpVtbl.ReleaseHfont(self, P1)
proc SetHdc*(self: ptr IFont, P1: HDC): HRESULT {.inline, discardable.} = self.lpVtbl.SetHdc(self, P1)
converter winim_converter_IFontDisp*(x: ptr IFontDisp): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IFontDisp*(x: ptr IFontDisp): ptr IDispatch = cast[ptr IDispatch](x)
converter winim_converter_IPicture*(x: ptr IPicture): ptr IUnknown = cast[ptr IUnknown](x)
proc get_Handle*(self: ptr IPicture, P1: ptr OLE_HANDLE): HRESULT {.inline, discardable.} = self.lpVtbl.get_Handle(self, P1)
proc get_hPal*(self: ptr IPicture, P1: ptr OLE_HANDLE): HRESULT {.inline, discardable.} = self.lpVtbl.get_hPal(self, P1)
proc get_Type*(self: ptr IPicture, P1: ptr int16): HRESULT {.inline, discardable.} = self.lpVtbl.get_Type(self, P1)
proc get_Width*(self: ptr IPicture, P1: ptr OLE_XSIZE_HIMETRIC): HRESULT {.inline, discardable.} = self.lpVtbl.get_Width(self, P1)
proc get_Height*(self: ptr IPicture, P1: ptr OLE_YSIZE_HIMETRIC): HRESULT {.inline, discardable.} = self.lpVtbl.get_Height(self, P1)
proc Render*(self: ptr IPicture, P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32, P6: OLE_XPOS_HIMETRIC, P7: OLE_YPOS_HIMETRIC, P8: OLE_XSIZE_HIMETRIC, P9: OLE_YSIZE_HIMETRIC, P10: LPCRECT): HRESULT {.inline, discardable.} = self.lpVtbl.Render(self, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10)
proc set_hPal*(self: ptr IPicture, P1: OLE_HANDLE): HRESULT {.inline, discardable.} = self.lpVtbl.set_hPal(self, P1)
proc get_CurDC*(self: ptr IPicture, P1: ptr HDC): HRESULT {.inline, discardable.} = self.lpVtbl.get_CurDC(self, P1)
proc SelectPicture*(self: ptr IPicture, P1: HDC, P2: ptr HDC, P3: ptr OLE_HANDLE): HRESULT {.inline, discardable.} = self.lpVtbl.SelectPicture(self, P1, P2, P3)
proc get_KeepOriginalFormat*(self: ptr IPicture, P1: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_KeepOriginalFormat(self, P1)
proc put_KeepOriginalFormat*(self: ptr IPicture, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_KeepOriginalFormat(self, P1)
proc PictureChanged*(self: ptr IPicture): HRESULT {.inline, discardable.} = self.lpVtbl.PictureChanged(self)
proc SaveAsFile*(self: ptr IPicture, P1: LPSTREAM, P2: BOOL, P3: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.SaveAsFile(self, P1, P2, P3)
proc get_Attributes*(self: ptr IPicture, P1: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.get_Attributes(self, P1)
converter winim_converter_IPictureDisp*(x: ptr IPictureDisp): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPictureDisp*(x: ptr IPictureDisp): ptr IDispatch = cast[ptr IDispatch](x)
converter winim_converter_IOleInPlaceSiteEx*(x: ptr IOleInPlaceSiteEx): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOleInPlaceSiteEx*(x: ptr IOleInPlaceSiteEx): ptr IOleInPlaceSite = cast[ptr IOleInPlaceSite](x)
proc OnInPlaceActivateEx*(self: ptr IOleInPlaceSiteEx, P1: ptr BOOL, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnInPlaceActivateEx(self, P1, P2)
proc OnInPlaceDeactivateEx*(self: ptr IOleInPlaceSiteEx, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnInPlaceDeactivateEx(self, P1)
proc RequestUIActivate*(self: ptr IOleInPlaceSiteEx): HRESULT {.inline, discardable.} = self.lpVtbl.RequestUIActivate(self)
converter winim_converter_IObjectWithSite*(x: ptr IObjectWithSite): ptr IUnknown = cast[ptr IUnknown](x)
proc SetSite*(self: ptr IObjectWithSite, P1: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.SetSite(self, P1)
proc GetSite*(self: ptr IObjectWithSite, P1: REFIID, P2: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetSite(self, P1, P2)
converter winim_converter_IOleInPlaceSiteWindowless*(x: ptr IOleInPlaceSiteWindowless): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOleInPlaceSiteWindowless*(x: ptr IOleInPlaceSiteWindowless): ptr IOleInPlaceSiteEx = cast[ptr IOleInPlaceSiteEx](x)
converter winim_converter_IOleInPlaceSiteWindowless*(x: ptr IOleInPlaceSiteWindowless): ptr IOleInPlaceSite = cast[ptr IOleInPlaceSite](x)
proc CanWindowlessActivate*(self: ptr IOleInPlaceSiteWindowless): HRESULT {.inline, discardable.} = self.lpVtbl.CanWindowlessActivate(self)
proc GetCapture*(self: ptr IOleInPlaceSiteWindowless): HRESULT {.inline, discardable.} = self.lpVtbl.GetCapture(self)
proc SetCapture*(self: ptr IOleInPlaceSiteWindowless, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetCapture(self, P1)
proc GetFocus*(self: ptr IOleInPlaceSiteWindowless): HRESULT {.inline, discardable.} = self.lpVtbl.GetFocus(self)
proc SetFocus*(self: ptr IOleInPlaceSiteWindowless, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetFocus(self, P1)
proc GetDC*(self: ptr IOleInPlaceSiteWindowless, P1: LPCRECT, P2: DWORD, P3: ptr HDC): HRESULT {.inline, discardable.} = self.lpVtbl.GetDC(self, P1, P2, P3)
proc ReleaseDC*(self: ptr IOleInPlaceSiteWindowless, P1: HDC): HRESULT {.inline, discardable.} = self.lpVtbl.ReleaseDC(self, P1)
proc InvalidateRect*(self: ptr IOleInPlaceSiteWindowless, P1: LPCRECT, P2: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.InvalidateRect(self, P1, P2)
proc InvalidateRgn*(self: ptr IOleInPlaceSiteWindowless, P1: HRGN, P2: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.InvalidateRgn(self, P1, P2)
proc ScrollRect*(self: ptr IOleInPlaceSiteWindowless, P1: INT, P2: INT, P3: LPCRECT, P4: LPCRECT): HRESULT {.inline, discardable.} = self.lpVtbl.ScrollRect(self, P1, P2, P3, P4)
proc AdjustRect*(self: ptr IOleInPlaceSiteWindowless, P1: LPCRECT): HRESULT {.inline, discardable.} = self.lpVtbl.AdjustRect(self, P1)
proc OnDefWindowMessage*(self: ptr IOleInPlaceSiteWindowless, P1: UINT, P2: WPARAM, P3: LPARAM, P4: ptr LRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.OnDefWindowMessage(self, P1, P2, P3, P4)
converter winim_converter_IAdviseSinkEx*(x: ptr IAdviseSinkEx): ptr IUnknown = cast[ptr IUnknown](x)
proc OnDataChange*(self: ptr IAdviseSinkEx, P1: ptr FORMATETC, P2: ptr STGMEDIUM): void {.inline, discardable.} = self.lpVtbl.OnDataChange(self, P1, P2)
proc OnViewChange*(self: ptr IAdviseSinkEx, P1: DWORD, P2: LONG): void {.inline, discardable.} = self.lpVtbl.OnViewChange(self, P1, P2)
proc OnRename*(self: ptr IAdviseSinkEx, P1: ptr IMoniker): void {.inline, discardable.} = self.lpVtbl.OnRename(self, P1)
proc OnSave*(self: ptr IAdviseSinkEx): void {.inline, discardable.} = self.lpVtbl.OnSave(self)
proc OnClose*(self: ptr IAdviseSinkEx): void {.inline, discardable.} = self.lpVtbl.OnClose(self)
proc OnViewStatusChange*(self: ptr IAdviseSinkEx, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnViewStatusChange(self, P1)
converter winim_converter_IPointerInactive*(x: ptr IPointerInactive): ptr IUnknown = cast[ptr IUnknown](x)
proc GetActivationPolicy*(self: ptr IPointerInactive, P1: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetActivationPolicy(self, P1)
proc OnInactiveMouseMove*(self: ptr IPointerInactive, P1: LPCRECT, P2: LONG, P3: LONG, P4: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnInactiveMouseMove(self, P1, P2, P3, P4)
proc OnInactiveSetCursor*(self: ptr IPointerInactive, P1: LPCRECT, P2: LONG, P3: LONG, P4: DWORD, P5: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnInactiveSetCursor(self, P1, P2, P3, P4, P5)
converter winim_converter_IOleUndoUnit*(x: ptr IOleUndoUnit): ptr IUnknown = cast[ptr IUnknown](x)
proc Do*(self: ptr IOleUndoUnit, P1: LPOLEUNDOMANAGER): HRESULT {.inline, discardable.} = self.lpVtbl.Do(self, P1)
proc GetDescription*(self: ptr IOleUndoUnit, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDescription(self, P1)
proc GetUnitType*(self: ptr IOleUndoUnit, P1: ptr CLSID, P2: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetUnitType(self, P1, P2)
proc OnNextAdd*(self: ptr IOleUndoUnit): HRESULT {.inline, discardable.} = self.lpVtbl.OnNextAdd(self)
converter winim_converter_IOleParentUndoUnit*(x: ptr IOleParentUndoUnit): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOleParentUndoUnit*(x: ptr IOleParentUndoUnit): ptr IOleUndoUnit = cast[ptr IOleUndoUnit](x)
proc Open*(self: ptr IOleParentUndoUnit, P1: ptr IOleParentUndoUnit): HRESULT {.inline, discardable.} = self.lpVtbl.Open(self, P1)
proc Close*(self: ptr IOleParentUndoUnit, P1: ptr IOleParentUndoUnit, P2: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Close(self, P1, P2)
proc Add*(self: ptr IOleParentUndoUnit, P1: ptr IOleUndoUnit): HRESULT {.inline, discardable.} = self.lpVtbl.Add(self, P1)
proc FindUnit*(self: ptr IOleParentUndoUnit, P1: ptr IOleUndoUnit): HRESULT {.inline, discardable.} = self.lpVtbl.FindUnit(self, P1)
proc GetParentState*(self: ptr IOleParentUndoUnit, P1: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetParentState(self, P1)
converter winim_converter_IEnumOleUndoUnits*(x: ptr IEnumOleUndoUnits): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumOleUndoUnits, P1: ULONG, P2: ptr ptr IOleUndoUnit, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumOleUndoUnits, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumOleUndoUnits): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumOleUndoUnits, P1: ptr ptr IEnumOleUndoUnits): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IOleUndoManager*(x: ptr IOleUndoManager): ptr IUnknown = cast[ptr IUnknown](x)
proc Open*(self: ptr IOleUndoManager, P1: ptr IOleParentUndoUnit): HRESULT {.inline, discardable.} = self.lpVtbl.Open(self, P1)
proc Close*(self: ptr IOleUndoManager, P1: ptr IOleParentUndoUnit, P2: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Close(self, P1, P2)
proc Add*(self: ptr IOleUndoManager, P1: ptr IOleUndoUnit): HRESULT {.inline, discardable.} = self.lpVtbl.Add(self, P1)
proc GetOpenParentState*(self: ptr IOleUndoManager, P1: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetOpenParentState(self, P1)
proc DiscardFrom*(self: ptr IOleUndoManager, P1: ptr IOleUndoUnit): HRESULT {.inline, discardable.} = self.lpVtbl.DiscardFrom(self, P1)
proc UndoTo*(self: ptr IOleUndoManager, P1: ptr IOleUndoUnit): HRESULT {.inline, discardable.} = self.lpVtbl.UndoTo(self, P1)
proc RedoTo*(self: ptr IOleUndoManager, P1: ptr IOleUndoUnit): HRESULT {.inline, discardable.} = self.lpVtbl.RedoTo(self, P1)
proc EnumUndoable*(self: ptr IOleUndoManager, P1: ptr ptr IEnumOleUndoUnits): HRESULT {.inline, discardable.} = self.lpVtbl.EnumUndoable(self, P1)
proc EnumRedoable*(self: ptr IOleUndoManager, P1: ptr ptr IEnumOleUndoUnits): HRESULT {.inline, discardable.} = self.lpVtbl.EnumRedoable(self, P1)
proc GetLastUndoDescription*(self: ptr IOleUndoManager, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetLastUndoDescription(self, P1)
proc GetLastRedoDescription*(self: ptr IOleUndoManager, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetLastRedoDescription(self, P1)
proc Enable*(self: ptr IOleUndoManager, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Enable(self, P1)
converter winim_converter_IQuickActivate*(x: ptr IQuickActivate): ptr IUnknown = cast[ptr IUnknown](x)
proc QuickActivate*(self: ptr IQuickActivate, P1: ptr QACONTAINER, P2: ptr QACONTROL): HRESULT {.inline, discardable.} = self.lpVtbl.QuickActivate(self, P1, P2)
proc SetContentExtent*(self: ptr IQuickActivate, P1: LPSIZEL): HRESULT {.inline, discardable.} = self.lpVtbl.SetContentExtent(self, P1)
proc GetContentExtent*(self: ptr IQuickActivate, P1: LPSIZEL): HRESULT {.inline, discardable.} = self.lpVtbl.GetContentExtent(self, P1)

# objext/docobj.nim

const
  OLECMDERR_E_UNKNOWNGROUP* = -2147221244
  OLECMDERR_E_CANCELED* = -2147221245
  OLECMDERR_E_NOHELP* = -2147221246
  OLECMDERR_E_DISABLED* = -2147221247
  OLECMDERR_E_NOTSUPPORTED* = -2147221248
  # OLECMDID* = enum
  OLECMDID_OPEN* = 1
  OLECMDID_NEW* = 2
  OLECMDID_SAVE* = 3
  OLECMDID_SAVEAS* = 4
  OLECMDID_SAVECOPYAS* = 5
  OLECMDID_PRINT* = 6
  OLECMDID_PRINTPREVIEW* = 7
  OLECMDID_PAGESETUP* = 8
  OLECMDID_SPELL* = 9
  OLECMDID_PROPERTIES* = 10
  OLECMDID_CUT* = 11
  OLECMDID_COPY* = 12
  OLECMDID_PASTE* = 13
  OLECMDID_PASTESPECIAL* = 14
  OLECMDID_UNDO* = 15
  OLECMDID_REDO* = 16
  OLECMDID_SELECTALL* = 17
  OLECMDID_CLEARSELECTION* = 18
  OLECMDID_ZOOM* = 19
  OLECMDID_GETZOOMRANGE* = 20
  OLECMDID_UPDATECOMMANDS* = 21
  OLECMDID_REFRESH* = 22
  OLECMDID_STOP* = 23
  OLECMDID_HIDETOOLBARS* = 24
  OLECMDID_SETPROGRESSMAX* = 25
  OLECMDID_SETPROGRESSPOS* = 26
  OLECMDID_SETPROGRESSTEXT* = 27
  OLECMDID_SETTITLE* = 28
  OLECMDID_SETDOWNLOADSTATE* = 29
  OLECMDID_STOPDOWNLOAD* = 30
  # OLECMDF* = enum
  OLECMDF_SUPPORTED* = 1
  OLECMDF_ENABLED* = 2
  OLECMDF_LATCHED* = 4
  OLECMDF_NINCHED* = 8
  # OLECMDEXECOPT* = enum
  OLECMDEXECOPT_DODEFAULT* = 0
  OLECMDEXECOPT_PROMPTUSER* = 1
  OLECMDEXECOPT_DONTPROMPTUSER* = 2
  OLECMDEXECOPT_SHOWHELP* = 3

type
  OLECMDID* = int32
  OLECMDF* = int32
  OLECMDEXECOPT* = int32
  OLECMDTEXT* {.final, pure.} = object
    cmdtextf*: DWORD
    cwActual*: ULONG
    cwBuf*: ULONG
    rgwz*: array[1, uint16]
  OLECMD* {.final, pure.} = object
    cmdID*: ULONG
    cmdf*: DWORD
  LPOLEINPLACESITE* = ptr IOleInPlaceSite
  LPENUMOLEDOCUMENTVIEWS* = ptr IEnumOleDocumentViews
  IOleDocumentView* {.pure.} = object
    lpVtbl*: ptr IOleDocumentViewVtbl
  IOleDocumentViewVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetInPlaceSite*: proc(self: ptr IOleDocumentView, P1: LPOLEINPLACESITE): HRESULT {.stdcall.}
    GetInPlaceSite*: proc(self: ptr IOleDocumentView, P1: ptr LPOLEINPLACESITE): HRESULT {.stdcall.}
    GetDocument*: proc(self: ptr IOleDocumentView, P1: ptr ptr IUnknown): HRESULT {.stdcall.}
    SetRect*: proc(self: ptr IOleDocumentView, P1: LPRECT): HRESULT {.stdcall.}
    GetRect*: proc(self: ptr IOleDocumentView, P1: LPRECT): HRESULT {.stdcall.}
    SetRectComplex*: proc(self: ptr IOleDocumentView, P1: LPRECT, P2: LPRECT, P3: LPRECT, P4: LPRECT): HRESULT {.stdcall.}
    Show*: proc(self: ptr IOleDocumentView, P1: BOOL): HRESULT {.stdcall.}
    UIActivate*: proc(self: ptr IOleDocumentView, P1: BOOL): HRESULT {.stdcall.}
    Open*: proc(self: ptr IOleDocumentView): HRESULT {.stdcall.}
    Close*: proc(self: ptr IOleDocumentView, P1: DWORD): HRESULT {.stdcall.}
    SaveViewState*: proc(self: ptr IOleDocumentView, P1: ptr IStream): HRESULT {.stdcall.}
    ApplyViewState*: proc(self: ptr IOleDocumentView, P1: ptr IStream): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IOleDocumentView, P1: LPOLEINPLACESITE, P2: ptr ptr IOleDocumentView): HRESULT {.stdcall.}
  IEnumOleDocumentViews* {.pure.} = object
    lpVtbl*: ptr IEnumOleDocumentViewsVtbl
  IEnumOleDocumentViewsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumOleDocumentViews, P1: ULONG, P2: ptr IOleDocumentView, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumOleDocumentViews, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumOleDocumentViews): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumOleDocumentViews, P1: ptr ptr IEnumOleDocumentViews): HRESULT {.stdcall.}
  IOleDocument* {.pure.} = object
    lpVtbl*: ptr IOleDocumentVtbl
  IOleDocumentVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CreateView*: proc(self: ptr IOleDocument, P1: LPOLEINPLACESITE, P2: ptr IStream, P3: DWORD, P4: ptr ptr IOleDocumentView): HRESULT {.stdcall.}
    GetDocMiscStatus*: proc(self: ptr IOleDocument, P1: ptr DWORD): HRESULT {.stdcall.}
    EnumViews*: proc(self: ptr IOleDocument, P1: ptr LPENUMOLEDOCUMENTVIEWS, P2: ptr ptr IOleDocumentView): HRESULT {.stdcall.}
  IOleCommandTarget* {.pure.} = object
    lpVtbl*: ptr IOleCommandTargetVtbl
  IOleCommandTargetVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    QueryStatus*: proc(self: ptr IOleCommandTarget, P1: ptr GUID, P2: ULONG, P3: ptr OLECMD, P4: ptr OLECMDTEXT): HRESULT {.stdcall.}
    Exec*: proc(self: ptr IOleCommandTarget, P1: ptr GUID, P2: DWORD, P3: DWORD, P4: ptr VARIANTARG, P5: ptr VARIANTARG): HRESULT {.stdcall.}
  IOleDocumentSite* {.pure.} = object
    lpVtbl*: ptr IOleDocumentSiteVtbl
  IOleDocumentSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ActivateMe*: proc(self: ptr IOleDocumentSite, P1: ptr IOleDocumentView): HRESULT {.stdcall.}

converter winim_converter_IOleDocumentView*(x: ptr IOleDocumentView): ptr IUnknown = cast[ptr IUnknown](x)
proc SetInPlaceSite*(self: ptr IOleDocumentView, P1: LPOLEINPLACESITE): HRESULT {.inline, discardable.} = self.lpVtbl.SetInPlaceSite(self, P1)
proc GetInPlaceSite*(self: ptr IOleDocumentView, P1: ptr LPOLEINPLACESITE): HRESULT {.inline, discardable.} = self.lpVtbl.GetInPlaceSite(self, P1)
proc GetDocument*(self: ptr IOleDocumentView, P1: ptr ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.GetDocument(self, P1)
proc SetRect*(self: ptr IOleDocumentView, P1: LPRECT): HRESULT {.inline, discardable.} = self.lpVtbl.SetRect(self, P1)
proc GetRect*(self: ptr IOleDocumentView, P1: LPRECT): HRESULT {.inline, discardable.} = self.lpVtbl.GetRect(self, P1)
proc SetRectComplex*(self: ptr IOleDocumentView, P1: LPRECT, P2: LPRECT, P3: LPRECT, P4: LPRECT): HRESULT {.inline, discardable.} = self.lpVtbl.SetRectComplex(self, P1, P2, P3, P4)
proc Show*(self: ptr IOleDocumentView, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Show(self, P1)
proc UIActivate*(self: ptr IOleDocumentView, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.UIActivate(self, P1)
proc Open*(self: ptr IOleDocumentView): HRESULT {.inline, discardable.} = self.lpVtbl.Open(self)
proc Close*(self: ptr IOleDocumentView, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Close(self, P1)
proc SaveViewState*(self: ptr IOleDocumentView, P1: ptr IStream): HRESULT {.inline, discardable.} = self.lpVtbl.SaveViewState(self, P1)
proc ApplyViewState*(self: ptr IOleDocumentView, P1: ptr IStream): HRESULT {.inline, discardable.} = self.lpVtbl.ApplyViewState(self, P1)
proc Clone*(self: ptr IOleDocumentView, P1: LPOLEINPLACESITE, P2: ptr ptr IOleDocumentView): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1, P2)
converter winim_converter_IEnumOleDocumentViews*(x: ptr IEnumOleDocumentViews): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumOleDocumentViews, P1: ULONG, P2: ptr IOleDocumentView, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumOleDocumentViews, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumOleDocumentViews): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumOleDocumentViews, P1: ptr ptr IEnumOleDocumentViews): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IOleDocument*(x: ptr IOleDocument): ptr IUnknown = cast[ptr IUnknown](x)
proc CreateView*(self: ptr IOleDocument, P1: LPOLEINPLACESITE, P2: ptr IStream, P3: DWORD, P4: ptr ptr IOleDocumentView): HRESULT {.inline, discardable.} = self.lpVtbl.CreateView(self, P1, P2, P3, P4)
proc GetDocMiscStatus*(self: ptr IOleDocument, P1: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetDocMiscStatus(self, P1)
proc EnumViews*(self: ptr IOleDocument, P1: ptr LPENUMOLEDOCUMENTVIEWS, P2: ptr ptr IOleDocumentView): HRESULT {.inline, discardable.} = self.lpVtbl.EnumViews(self, P1, P2)
converter winim_converter_IOleCommandTarget*(x: ptr IOleCommandTarget): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryStatus*(self: ptr IOleCommandTarget, P1: ptr GUID, P2: ULONG, P3: ptr OLECMD, P4: ptr OLECMDTEXT): HRESULT {.inline, discardable.} = self.lpVtbl.QueryStatus(self, P1, P2, P3, P4)
proc Exec*(self: ptr IOleCommandTarget, P1: ptr GUID, P2: DWORD, P3: DWORD, P4: ptr VARIANTARG, P5: ptr VARIANTARG): HRESULT {.inline, discardable.} = self.lpVtbl.Exec(self, P1, P2, P3, P4, P5)
converter winim_converter_IOleDocumentSite*(x: ptr IOleDocumentSite): ptr IUnknown = cast[ptr IUnknown](x)
proc ActivateMe*(self: ptr IOleDocumentSite, P1: ptr IOleDocumentView): HRESULT {.inline, discardable.} = self.lpVtbl.ActivateMe(self, P1)

# objext/exdisp.nim

const
  # BrowserNavConstants* = enum
  navOpenInNewWindow* = 0x01
  navNoHistory* = 0x02
  navNoReadFromCache* = 0x04
  navNoWriteTocache* = 0x08
  navAllowAutosearch* = 0x10
  navBrowserBar* = 0x20
  navHyperLink* = 0x40

type
  IWebBrowser* {.pure.} = object
    lpVtbl*: ptr IWebBrowserVtbl
  IWebBrowserVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    GoBack*: proc(self: ptr IWebBrowser): HRESULT {.stdcall.}
    GoForward*: proc(self: ptr IWebBrowser): HRESULT {.stdcall.}
    GoHome*: proc(self: ptr IWebBrowser): HRESULT {.stdcall.}
    GoSearch*: proc(self: ptr IWebBrowser): HRESULT {.stdcall.}
    Navigate*: proc(self: ptr IWebBrowser, P1: BSTR, P2: ptr VARIANT, P3: ptr VARIANT, P4: ptr VARIANT, P5: ptr VARIANT): HRESULT {.stdcall.}
    Refresh*: proc(self: ptr IWebBrowser): HRESULT {.stdcall.}
    Refresh2*: proc(self: ptr IWebBrowser, P1: ptr VARIANT): HRESULT {.stdcall.}
    Stop*: proc(self: ptr IWebBrowser): HRESULT {.stdcall.}
    get_Application*: proc(self: ptr IWebBrowser, ppDisp: ptr IDispatch): HRESULT {.stdcall.}
    get_Parent*: proc(self: ptr IWebBrowser, ppDisp: ptr IDispatch): HRESULT {.stdcall.}
    get_Container*: proc(self: ptr IWebBrowser, ppDisp: ptr IDispatch): HRESULT {.stdcall.}
    get_Document*: proc(self: ptr IWebBrowser, ppDisp: ptr IDispatch): HRESULT {.stdcall.}
    get_TopLevelContainer*: proc(self: ptr IWebBrowser, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_Type*: proc(self: ptr IWebBrowser, P1: ptr BSTR): HRESULT {.stdcall.}
    get_Left*: proc(self: ptr IWebBrowser, P1: ptr LONG): HRESULT {.stdcall.}
    put_Left*: proc(self: ptr IWebBrowser, P1: LONG): HRESULT {.stdcall.}
    get_Top*: proc(self: ptr IWebBrowser, P1: ptr LONG): HRESULT {.stdcall.}
    put_Top*: proc(self: ptr IWebBrowser, P1: LONG): HRESULT {.stdcall.}
    get_Width*: proc(self: ptr IWebBrowser, P1: ptr LONG): HRESULT {.stdcall.}
    put_Width*: proc(self: ptr IWebBrowser, P1: LONG): HRESULT {.stdcall.}
    get_Height*: proc(self: ptr IWebBrowser, P1: ptr LONG): HRESULT {.stdcall.}
    put_Height*: proc(self: ptr IWebBrowser, P1: LONG): HRESULT {.stdcall.}
    get_LocationName*: proc(self: ptr IWebBrowser, P1: ptr BSTR): HRESULT {.stdcall.}
    get_LocationURL*: proc(self: ptr IWebBrowser, P1: ptr BSTR): HRESULT {.stdcall.}
    get_Busy*: proc(self: ptr IWebBrowser, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IWebBrowserApp* {.pure.} = object
    lpVtbl*: ptr IWebBrowserAppVtbl
  IWebBrowserAppVtbl* {.pure, inheritable.} = object of IWebBrowserVtbl
    Quit*: proc(self: ptr IWebBrowserApp): HRESULT {.stdcall.}
    ClientToWindow*: proc(self: ptr IWebBrowserApp, P1: ptr int32, P2: ptr int32): HRESULT {.stdcall.}
    PutProperty*: proc(self: ptr IWebBrowserApp, P1: BSTR, P2: VARIANT): HRESULT {.stdcall.}
    GetProperty*: proc(self: ptr IWebBrowserApp, P1: BSTR, P2: ptr VARIANT): HRESULT {.stdcall.}
    get_Name*: proc(self: ptr IWebBrowserApp, P1: ptr BSTR): HRESULT {.stdcall.}
    get_HWND*: proc(self: ptr IWebBrowserApp, P1: ptr LONG): HRESULT {.stdcall.}
    get_FullName*: proc(self: ptr IWebBrowserApp, P1: ptr BSTR): HRESULT {.stdcall.}
    get_Path*: proc(self: ptr IWebBrowserApp, P1: ptr BSTR): HRESULT {.stdcall.}
    get_Visible*: proc(self: ptr IWebBrowserApp, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_Visible*: proc(self: ptr IWebBrowserApp, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_StatusBar*: proc(self: ptr IWebBrowserApp, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_StatusBar*: proc(self: ptr IWebBrowserApp, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_StatusText*: proc(self: ptr IWebBrowserApp, P1: ptr BSTR): HRESULT {.stdcall.}
    put_StatusText*: proc(self: ptr IWebBrowserApp, P1: BSTR): HRESULT {.stdcall.}
    get_ToolBar*: proc(self: ptr IWebBrowserApp, P1: ptr int32): HRESULT {.stdcall.}
    put_ToolBar*: proc(self: ptr IWebBrowserApp, P1: int32): HRESULT {.stdcall.}
    get_MenuBar*: proc(self: ptr IWebBrowserApp, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_MenuBar*: proc(self: ptr IWebBrowserApp, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_FullScreen*: proc(self: ptr IWebBrowserApp, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_FullScreen*: proc(self: ptr IWebBrowserApp, P1: VARIANT_BOOL): HRESULT {.stdcall.}
  IWebBrowser2* {.pure.} = object
    lpVtbl*: ptr IWebBrowser2Vtbl
  IWebBrowser2Vtbl* {.pure, inheritable.} = object of IWebBrowserAppVtbl
    Navigate2*: proc(self: ptr IWebBrowser2, P1: ptr VARIANT, P2: ptr VARIANT, P3: ptr VARIANT, P4: ptr VARIANT, P5: ptr VARIANT): HRESULT {.stdcall.}
    QueryStatusWB*: proc(self: ptr IWebBrowser2, P1: OLECMDID, P2: ptr OLECMDF): HRESULT {.stdcall.}
    ExecWB*: proc(self: ptr IWebBrowser2, P1: OLECMDID, P2: OLECMDEXECOPT, P3: ptr VARIANT, P4: ptr VARIANT): HRESULT {.stdcall.}
    ShowBrowserBar*: proc(self: ptr IWebBrowser2, P1: ptr VARIANT, P2: ptr VARIANT, P3: ptr VARIANT): HRESULT {.stdcall.}
    get_ReadyState*: proc(self: ptr IWebBrowser2, P1: ptr READYSTATE): HRESULT {.stdcall.}
    get_Offline*: proc(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_Offline*: proc(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_Silent*: proc(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_Silent*: proc(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_RegistaerAsBrowser*: proc(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_RegisterAsBrowser*: proc(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_RegistaerAsDropTarget*: proc(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_RegisterAsDropTarget*: proc(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_TheaterMode*: proc(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_TheaterMode*: proc(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_AddressBar*: proc(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_AddressBar*: proc(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_Resizable*: proc(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_Resizable*: proc(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.stdcall.}
  DWebBrowserEvents2* {.pure.} = object
    lpVtbl*: ptr DWebBrowserEvents2Vtbl
  DWebBrowserEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    StatusTextChange*: proc(self: ptr DWebBrowserEvents2, P1: BSTR): void {.stdcall.}
    ProgressChange*: proc(self: ptr DWebBrowserEvents2, P1: LONG, P2: LONG): void {.stdcall.}
    CommandStateChange*: proc(self: ptr DWebBrowserEvents2, P1: LONG, P2: VARIANT_BOOL): void {.stdcall.}
    DownloadBegin*: proc(self: ptr DWebBrowserEvents2): void {.stdcall.}
    DownloadComplete*: proc(self: ptr DWebBrowserEvents2): void {.stdcall.}
    TitleChange*: proc(self: ptr DWebBrowserEvents2, P1: BSTR): void {.stdcall.}
    PropertyChange*: proc(self: ptr DWebBrowserEvents2, P1: BSTR): void {.stdcall.}
    BeforeNavigate2*: proc(self: ptr DWebBrowserEvents2, pDisp: IDispatch, P2: ptr VARIANT, P3: ptr VARIANT, P4: ptr VARIANT, P5: ptr VARIANT, P6: ptr VARIANT, P7: ptr VARIANT_BOOL): void {.stdcall.}
    NewWindow2*: proc(self: ptr DWebBrowserEvents2, ppDisp: ptr IDispatch, P2: ptr VARIANT_BOOL): void {.stdcall.}
    NavigateComplete*: proc(self: ptr DWebBrowserEvents2, pDisp: IDispatch, P2: ptr VARIANT): void {.stdcall.}
    DocumentComplete*: proc(self: ptr DWebBrowserEvents2, pDisp: IDispatch, P2: ptr VARIANT): void {.stdcall.}
    OnQuit*: proc(self: ptr DWebBrowserEvents2): void {.stdcall.}
    OnVisible*: proc(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.stdcall.}
    OnToolBar*: proc(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.stdcall.}
    OnMenuBar*: proc(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.stdcall.}
    OnStatusBar*: proc(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.stdcall.}
    OnFullScreen*: proc(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.stdcall.}
    OnTheaterMode*: proc(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.stdcall.}
    WindowSetResizable*: proc(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.stdcall.}
    WindowSetLeft*: proc(self: ptr DWebBrowserEvents2, P1: LONG): void {.stdcall.}
    WindowSetTop*: proc(self: ptr DWebBrowserEvents2, P1: LONG): void {.stdcall.}
    WindowSetWidth*: proc(self: ptr DWebBrowserEvents2, P1: LONG): void {.stdcall.}
    WindowSetHeight*: proc(self: ptr DWebBrowserEvents2, P1: LONG): void {.stdcall.}
    WindowClosing*: proc(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL, P2: ptr VARIANT_BOOL): void {.stdcall.}
    ClientToHostWindow*: proc(self: ptr DWebBrowserEvents2, P1: ptr LONG, P2: ptr LONG): void {.stdcall.}
    SetSecureLockIcon*: proc(self: ptr DWebBrowserEvents2, P1: LONG): void {.stdcall.}
    FileDownload*: proc(self: ptr DWebBrowserEvents2, P1: ptr VARIANT_BOOL): void {.stdcall.}

converter winim_converter_IWebBrowser*(x: ptr IWebBrowser): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IWebBrowser*(x: ptr IWebBrowser): ptr IDispatch = cast[ptr IDispatch](x)
proc GoBack*(self: ptr IWebBrowser): HRESULT {.inline, discardable.} = self.lpVtbl.GoBack(self)
proc GoForward*(self: ptr IWebBrowser): HRESULT {.inline, discardable.} = self.lpVtbl.GoForward(self)
proc GoHome*(self: ptr IWebBrowser): HRESULT {.inline, discardable.} = self.lpVtbl.GoHome(self)
proc GoSearch*(self: ptr IWebBrowser): HRESULT {.inline, discardable.} = self.lpVtbl.GoSearch(self)
proc Navigate*(self: ptr IWebBrowser, P1: BSTR, P2: ptr VARIANT, P3: ptr VARIANT, P4: ptr VARIANT, P5: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.Navigate(self, P1, P2, P3, P4, P5)
proc Refresh*(self: ptr IWebBrowser): HRESULT {.inline, discardable.} = self.lpVtbl.Refresh(self)
proc Refresh2*(self: ptr IWebBrowser, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.Refresh2(self, P1)
proc Stop*(self: ptr IWebBrowser): HRESULT {.inline, discardable.} = self.lpVtbl.Stop(self)
proc get_Application*(self: ptr IWebBrowser, ppDisp: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_Application(self, ppDisp)
proc get_Parent*(self: ptr IWebBrowser, ppDisp: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_Parent(self, ppDisp)
proc get_Container*(self: ptr IWebBrowser, ppDisp: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_Container(self, ppDisp)
proc get_Document*(self: ptr IWebBrowser, ppDisp: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_Document(self, ppDisp)
proc get_TopLevelContainer*(self: ptr IWebBrowser, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_TopLevelContainer(self, P1)
proc get_Type*(self: ptr IWebBrowser, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_Type(self, P1)
proc get_Left*(self: ptr IWebBrowser, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_Left(self, P1)
proc put_Left*(self: ptr IWebBrowser, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.put_Left(self, P1)
proc get_Top*(self: ptr IWebBrowser, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_Top(self, P1)
proc put_Top*(self: ptr IWebBrowser, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.put_Top(self, P1)
proc get_Width*(self: ptr IWebBrowser, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_Width(self, P1)
proc put_Width*(self: ptr IWebBrowser, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.put_Width(self, P1)
proc get_Height*(self: ptr IWebBrowser, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_Height(self, P1)
proc put_Height*(self: ptr IWebBrowser, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.put_Height(self, P1)
proc get_LocationName*(self: ptr IWebBrowser, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_LocationName(self, P1)
proc get_LocationURL*(self: ptr IWebBrowser, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_LocationURL(self, P1)
proc get_Busy*(self: ptr IWebBrowser, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_Busy(self, P1)
converter winim_converter_IWebBrowserApp*(x: ptr IWebBrowserApp): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IWebBrowserApp*(x: ptr IWebBrowserApp): ptr IWebBrowser = cast[ptr IWebBrowser](x)
converter winim_converter_IWebBrowserApp*(x: ptr IWebBrowserApp): ptr IDispatch = cast[ptr IDispatch](x)
proc Quit*(self: ptr IWebBrowserApp): HRESULT {.inline, discardable.} = self.lpVtbl.Quit(self)
proc ClientToWindow*(self: ptr IWebBrowserApp, P1: ptr int32, P2: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.ClientToWindow(self, P1, P2)
proc PutProperty*(self: ptr IWebBrowserApp, P1: BSTR, P2: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.PutProperty(self, P1, P2)
proc GetProperty*(self: ptr IWebBrowserApp, P1: BSTR, P2: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetProperty(self, P1, P2)
proc get_Name*(self: ptr IWebBrowserApp, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_Name(self, P1)
proc get_HWND*(self: ptr IWebBrowserApp, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_HWND(self, P1)
proc get_FullName*(self: ptr IWebBrowserApp, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_FullName(self, P1)
proc get_Path*(self: ptr IWebBrowserApp, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_Path(self, P1)
proc get_Visible*(self: ptr IWebBrowserApp, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_Visible(self, P1)
proc put_Visible*(self: ptr IWebBrowserApp, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_Visible(self, P1)
proc get_StatusBar*(self: ptr IWebBrowserApp, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_StatusBar(self, P1)
proc put_StatusBar*(self: ptr IWebBrowserApp, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_StatusBar(self, P1)
proc get_StatusText*(self: ptr IWebBrowserApp, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_StatusText(self, P1)
proc put_StatusText*(self: ptr IWebBrowserApp, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_StatusText(self, P1)
proc get_ToolBar*(self: ptr IWebBrowserApp, P1: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.get_ToolBar(self, P1)
proc put_ToolBar*(self: ptr IWebBrowserApp, P1: int32): HRESULT {.inline, discardable.} = self.lpVtbl.put_ToolBar(self, P1)
proc get_MenuBar*(self: ptr IWebBrowserApp, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_MenuBar(self, P1)
proc put_MenuBar*(self: ptr IWebBrowserApp, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_MenuBar(self, P1)
proc get_FullScreen*(self: ptr IWebBrowserApp, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_FullScreen(self, P1)
proc put_FullScreen*(self: ptr IWebBrowserApp, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_FullScreen(self, P1)
converter winim_converter_IWebBrowser2*(x: ptr IWebBrowser2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IWebBrowser2*(x: ptr IWebBrowser2): ptr IWebBrowserApp = cast[ptr IWebBrowserApp](x)
converter winim_converter_IWebBrowser2*(x: ptr IWebBrowser2): ptr IWebBrowser = cast[ptr IWebBrowser](x)
converter winim_converter_IWebBrowser2*(x: ptr IWebBrowser2): ptr IDispatch = cast[ptr IDispatch](x)
proc Navigate2*(self: ptr IWebBrowser2, P1: ptr VARIANT, P2: ptr VARIANT, P3: ptr VARIANT, P4: ptr VARIANT, P5: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.Navigate2(self, P1, P2, P3, P4, P5)
proc QueryStatusWB*(self: ptr IWebBrowser2, P1: OLECMDID, P2: ptr OLECMDF): HRESULT {.inline, discardable.} = self.lpVtbl.QueryStatusWB(self, P1, P2)
proc ExecWB*(self: ptr IWebBrowser2, P1: OLECMDID, P2: OLECMDEXECOPT, P3: ptr VARIANT, P4: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.ExecWB(self, P1, P2, P3, P4)
proc ShowBrowserBar*(self: ptr IWebBrowser2, P1: ptr VARIANT, P2: ptr VARIANT, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.ShowBrowserBar(self, P1, P2, P3)
proc get_ReadyState*(self: ptr IWebBrowser2, P1: ptr READYSTATE): HRESULT {.inline, discardable.} = self.lpVtbl.get_ReadyState(self, P1)
proc get_Offline*(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_Offline(self, P1)
proc put_Offline*(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_Offline(self, P1)
proc get_Silent*(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_Silent(self, P1)
proc put_Silent*(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_Silent(self, P1)
proc get_RegistaerAsBrowser*(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_RegistaerAsBrowser(self, P1)
proc put_RegisterAsBrowser*(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_RegisterAsBrowser(self, P1)
proc get_RegistaerAsDropTarget*(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_RegistaerAsDropTarget(self, P1)
proc put_RegisterAsDropTarget*(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_RegisterAsDropTarget(self, P1)
proc get_TheaterMode*(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_TheaterMode(self, P1)
proc put_TheaterMode*(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_TheaterMode(self, P1)
proc get_AddressBar*(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_AddressBar(self, P1)
proc put_AddressBar*(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_AddressBar(self, P1)
proc get_Resizable*(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_Resizable(self, P1)
proc put_Resizable*(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_Resizable(self, P1)
converter winim_converter_DWebBrowserEvents2*(x: ptr DWebBrowserEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_DWebBrowserEvents2*(x: ptr DWebBrowserEvents2): ptr IDispatch = cast[ptr IDispatch](x)
proc StatusTextChange*(self: ptr DWebBrowserEvents2, P1: BSTR): void {.inline, discardable.} = self.lpVtbl.StatusTextChange(self, P1)
proc ProgressChange*(self: ptr DWebBrowserEvents2, P1: LONG, P2: LONG): void {.inline, discardable.} = self.lpVtbl.ProgressChange(self, P1, P2)
proc CommandStateChange*(self: ptr DWebBrowserEvents2, P1: LONG, P2: VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.CommandStateChange(self, P1, P2)
proc DownloadBegin*(self: ptr DWebBrowserEvents2): void {.inline, discardable.} = self.lpVtbl.DownloadBegin(self)
proc DownloadComplete*(self: ptr DWebBrowserEvents2): void {.inline, discardable.} = self.lpVtbl.DownloadComplete(self)
proc TitleChange*(self: ptr DWebBrowserEvents2, P1: BSTR): void {.inline, discardable.} = self.lpVtbl.TitleChange(self, P1)
proc PropertyChange*(self: ptr DWebBrowserEvents2, P1: BSTR): void {.inline, discardable.} = self.lpVtbl.PropertyChange(self, P1)
proc BeforeNavigate2*(self: ptr DWebBrowserEvents2, pDisp: IDispatch, P2: ptr VARIANT, P3: ptr VARIANT, P4: ptr VARIANT, P5: ptr VARIANT, P6: ptr VARIANT, P7: ptr VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.BeforeNavigate2(self, pDisp, P2, P3, P4, P5, P6, P7)
proc NewWindow2*(self: ptr DWebBrowserEvents2, ppDisp: ptr IDispatch, P2: ptr VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.NewWindow2(self, ppDisp, P2)
proc NavigateComplete*(self: ptr DWebBrowserEvents2, pDisp: IDispatch, P2: ptr VARIANT): void {.inline, discardable.} = self.lpVtbl.NavigateComplete(self, pDisp, P2)
proc DocumentComplete*(self: ptr DWebBrowserEvents2, pDisp: IDispatch, P2: ptr VARIANT): void {.inline, discardable.} = self.lpVtbl.DocumentComplete(self, pDisp, P2)
proc OnQuit*(self: ptr DWebBrowserEvents2): void {.inline, discardable.} = self.lpVtbl.OnQuit(self)
proc OnVisible*(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.OnVisible(self, P1)
proc OnToolBar*(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.OnToolBar(self, P1)
proc OnMenuBar*(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.OnMenuBar(self, P1)
proc OnStatusBar*(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.OnStatusBar(self, P1)
proc OnFullScreen*(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.OnFullScreen(self, P1)
proc OnTheaterMode*(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.OnTheaterMode(self, P1)
proc WindowSetResizable*(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.WindowSetResizable(self, P1)
proc WindowSetLeft*(self: ptr DWebBrowserEvents2, P1: LONG): void {.inline, discardable.} = self.lpVtbl.WindowSetLeft(self, P1)
proc WindowSetTop*(self: ptr DWebBrowserEvents2, P1: LONG): void {.inline, discardable.} = self.lpVtbl.WindowSetTop(self, P1)
proc WindowSetWidth*(self: ptr DWebBrowserEvents2, P1: LONG): void {.inline, discardable.} = self.lpVtbl.WindowSetWidth(self, P1)
proc WindowSetHeight*(self: ptr DWebBrowserEvents2, P1: LONG): void {.inline, discardable.} = self.lpVtbl.WindowSetHeight(self, P1)
proc WindowClosing*(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL, P2: ptr VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.WindowClosing(self, P1, P2)
proc ClientToHostWindow*(self: ptr DWebBrowserEvents2, P1: ptr LONG, P2: ptr LONG): void {.inline, discardable.} = self.lpVtbl.ClientToHostWindow(self, P1, P2)
proc SetSecureLockIcon*(self: ptr DWebBrowserEvents2, P1: LONG): void {.inline, discardable.} = self.lpVtbl.SetSecureLockIcon(self, P1)
proc FileDownload*(self: ptr DWebBrowserEvents2, P1: ptr VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.FileDownload(self, P1)

# objext/mshtml.nim

type
  IHTMLStyleSheet* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheetVtbl
  IHTMLStyleSheetVtbl* {.pure, inheritable.} = object
  LPHTMLSTYLE* = IHTMLStyle
  LPHTMLSTYLESHEET* = IHTMLStyleSheet
  IHTMLLocation* {.pure.} = object
    lpVtbl*: ptr IHTMLLocationVtbl
  IHTMLLocationVtbl* {.pure, inheritable.} = object
  LPHTMLLOCATION* = IHTMLLocation
  IHTMLFramesCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLFramesCollectionVtbl
  IHTMLFramesCollectionVtbl* {.pure, inheritable.} = object
  LPHTMLFRAMESCOLLECTION* = IHTMLFramesCollection
  IHTMLStyleSheetsCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheetsCollectionVtbl
  IHTMLStyleSheetsCollectionVtbl* {.pure, inheritable.} = object
  LPHTMLSTYLESHEETSCOLLECTION* = IHTMLStyleSheetsCollection
  IHTMLStyle* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleVtbl
  IHTMLStyleVtbl* {.pure, inheritable.} = object
  IHTMLFiltersCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLFiltersCollectionVtbl
  IHTMLFiltersCollectionVtbl* {.pure, inheritable.} = object
  LPHTMLFILTERSCOLLECTION* = IHTMLFiltersCollection
  IOmHistory* {.pure.} = object
    lpVtbl*: ptr IOmHistoryVtbl
  IOmHistoryVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IOmHistory, p: ptr int16): HRESULT {.stdcall.}
    back*: proc(self: ptr IOmHistory, P1: ptr VARIANT): HRESULT {.stdcall.}
    forward*: proc(self: ptr IOmHistory, P1: ptr VARIANT): HRESULT {.stdcall.}
    go*: proc(self: ptr IOmHistory, P1: ptr VARIANT): HRESULT {.stdcall.}
  LPOMHISTORY* = ptr IOmHistory
  IOmNavigator* {.pure.} = object
    lpVtbl*: ptr IOmNavigatorVtbl
  IOmNavigatorVtbl* {.pure, inheritable.} = object
  LPOMNAVIGATOR* = IOmNavigator
  IHTMLImageElementFactory* {.pure.} = object
    lpVtbl*: ptr IHTMLImageElementFactoryVtbl
  IHTMLImageElementFactoryVtbl* {.pure, inheritable.} = object
  LPHTMLIMAGEELEMENTFACTORY* = IHTMLImageElementFactory
  IHTMLEventObj* {.pure.} = object
    lpVtbl*: ptr IHTMLEventObjVtbl
  IHTMLEventObjVtbl* {.pure, inheritable.} = object
  LPHTMLEVENTOBJ* = IHTMLEventObj
  IHTMLScreen* {.pure.} = object
    lpVtbl*: ptr IHTMLScreenVtbl
  IHTMLScreenVtbl* {.pure, inheritable.} = object
  LPHTMLSCREEN* = IHTMLScreen
  IHTMLOptionElementFactory* {.pure.} = object
    lpVtbl*: ptr IHTMLOptionElementFactoryVtbl
  IHTMLOptionElementFactoryVtbl* {.pure, inheritable.} = object
  LPHTMLOPTIONELEMENTFACTORY* = IHTMLOptionElementFactory
  IHTMLLinkElement* {.pure.} = object
    lpVtbl*: ptr IHTMLLinkElementVtbl
  IHTMLLinkElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_href*: proc(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.stdcall.}
    get_href*: proc(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_rel*: proc(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.stdcall.}
    get_rel*: proc(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_rev*: proc(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.stdcall.}
    get_rev*: proc(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_type*: proc(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_onreadystatechange*: proc(self: ptr IHTMLLinkElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onreadystatechange*: proc(self: ptr IHTMLLinkElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLLinkElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLLinkElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onerror*: proc(self: ptr IHTMLLinkElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onerror*: proc(self: ptr IHTMLLinkElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    get_styleSheet*: proc(self: ptr IHTMLLinkElement, P1: ptr LPHTMLSTYLESHEET): HRESULT {.stdcall.}
    put_disabled*: proc(self: ptr IHTMLLinkElement, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_disabled*: proc(self: ptr IHTMLLinkElement, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_media*: proc(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.stdcall.}
    get_media*: proc(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.stdcall.}
  LPHTMLLINKELEMENT* = ptr IHTMLLinkElement
  IHTMLImgElement* {.pure.} = object
    lpVtbl*: ptr IHTMLImgElementVtbl
  IHTMLImgElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_isMap*: proc(self: ptr IHTMLImgElement, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_isMap*: proc(self: ptr IHTMLImgElement, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_useMap*: proc(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.stdcall.}
    get_useMap*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_mimeType*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_fileSize*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_fileCreatedDate*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_fileModifiedDate*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_fileUpdatedDate*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_protocol*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_href*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_nameProp*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_border*: proc(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.stdcall.}
    get_border*: proc(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_vspace*: proc(self: ptr IHTMLImgElement, P1: LONG): HRESULT {.stdcall.}
    get_vspace*: proc(self: ptr IHTMLImgElement, P1: ptr LONG): HRESULT {.stdcall.}
    put_hspace*: proc(self: ptr IHTMLImgElement, P1: LONG): HRESULT {.stdcall.}
    get_hspace*: proc(self: ptr IHTMLImgElement, P1: ptr LONG): HRESULT {.stdcall.}
    put_alt*: proc(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.stdcall.}
    get_alt*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_src*: proc(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.stdcall.}
    get_src*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_lowsrc*: proc(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.stdcall.}
    get_lowsrc*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_vrml*: proc(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.stdcall.}
    get_vrml*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_dynsrc*: proc(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.stdcall.}
    get_dynsrc*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_complete*: proc(self: ptr IHTMLImgElement, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_loop*: proc(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.stdcall.}
    get_loop*: proc(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_align*: proc(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onerror*: proc(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onerror*: proc(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onabort*: proc(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onabort*: proc(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_width*: proc(self: ptr IHTMLImgElement, P1: LONG): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLImgElement, P1: ptr LONG): HRESULT {.stdcall.}
    put_height*: proc(self: ptr IHTMLImgElement, P1: LONG): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLImgElement, P1: ptr LONG): HRESULT {.stdcall.}
    put_start*: proc(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.stdcall.}
    get_start*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
  LPHTMLIMGELEMENT* = ptr IHTMLImgElement
  IHTMLElementCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLElementCollectionVtbl
  IHTMLElementCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    toString*: proc(self: ptr IHTMLElementCollection, P1: ptr BSTR): HRESULT {.stdcall.}
    put_length*: proc(self: ptr IHTMLElementCollection, P1: LONG): HRESULT {.stdcall.}
    get_length*: proc(self: ptr IHTMLElementCollection, P1: ptr LONG): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLElementCollection, P1: ptr IUnknown): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLElementCollection, P1: VARIANT, P2: VARIANT, pDisp: ptr IDispatch): HRESULT {.stdcall.}
    tags*: proc(self: ptr IHTMLElementCollection, P1: VARIANT, pdisp: ptr IDispatch): HRESULT {.stdcall.}
  LPHTMLELEMENTCOLLECTION* = ptr IHTMLElementCollection
  IHTMLDocument* {.pure.} = object
    lpVtbl*: ptr IHTMLDocumentVtbl
  IHTMLDocumentVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_Script*: proc(self: ptr IHTMLDocument, P1: ptr IDispatch): HRESULT {.stdcall.}
  IHTMLDocument2* {.pure.} = object
    lpVtbl*: ptr IHTMLDocument2Vtbl
  IHTMLDocument2Vtbl* {.pure, inheritable.} = object of IHTMLDocumentVtbl
    get_all*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.stdcall.}
    get_body*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENT): HRESULT {.stdcall.}
    get_activeElement*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENT): HRESULT {.stdcall.}
    get_images*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.stdcall.}
    get_applets*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.stdcall.}
    get_links*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.stdcall.}
    get_forms*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.stdcall.}
    get_anchors*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.stdcall.}
    put_title*: proc(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.stdcall.}
    get_title*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_scripts*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.stdcall.}
    put_designMode*: proc(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.stdcall.}
    get_designMode*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_selection*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLSELECTIONOBJECT): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_frames*: proc(self: ptr IHTMLDocument2, P1: ptr IHTMLFramesCollection2): HRESULT {.stdcall.}
    get_embeds*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.stdcall.}
    get_plugins*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.stdcall.}
    put_alinkColor*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_alinkColor*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_bgColor*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_bgColor*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_fgColor*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_fgColor*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_linkColor*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_linkColor*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_vlinkColor*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_vlinkColor*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    get_referrer*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_location*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLLOCATION): HRESULT {.stdcall.}
    get_lastModified*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    put_url*: proc(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.stdcall.}
    get_url*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    put_domain*: proc(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.stdcall.}
    get_domain*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    put_cookie*: proc(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.stdcall.}
    get_cookie*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    put_expands*: proc(self: ptr IHTMLDocument2, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_expands*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_charset*: proc(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.stdcall.}
    get_charset*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    put_defaultCharset*: proc(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.stdcall.}
    get_defaultCharset*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_mimeType*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_fileSize*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_fileCreatedDate*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_fileModifiedDate*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_fileUpdatedDate*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_security*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_protocol*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_nameProp*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    write*: proc(self: ptr IHTMLDocument2, P1: ptr SAFEARRAY): HRESULT {.stdcall.}
    writeln*: proc(self: ptr IHTMLDocument2, P1: ptr SAFEARRAY): HRESULT {.stdcall.}
    open*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: VARIANT, P3: VARIANT, P4: VARIANT, P5: ptr IDispatch): HRESULT {.stdcall.}
    close*: proc(self: ptr IHTMLDocument2): HRESULT {.stdcall.}
    clear*: proc(self: ptr IHTMLDocument2): HRESULT {.stdcall.}
    queryCommandSupported*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandEnabled*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandState*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandIndeterm*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandText*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr BSTR): HRESULT {.stdcall.}
    queryCommandValue*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT): HRESULT {.stdcall.}
    execCommand*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: VARIANT_BOOL, P3: VARIANT, P4: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    execCommandShowHelp*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    createElement*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr LPHTMLELEMENT): HRESULT {.stdcall.}
    put_onhelp*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onhelp*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onclick*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onclick*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_ondblclick*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_ondblclick*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeyup*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onkeyup*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeydown*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onkeydown*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeypress*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onkeypress*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseup*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onmouseup*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmousedown*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onmousedown*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmousemove*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onmousemove*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseout*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onmouseout*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseover*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onmouseover*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onreadystatechange*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onreadystatechange*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onafterupdate*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onafterupdate*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onrowexit*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onrowexit*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onrowenter*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onrowenter*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_ondragstart*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_ondragstart*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onselectstart*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onselectstart*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    elementFromPoint*: proc(self: ptr IHTMLDocument2, P1: LONG, P2: LONG, P3: ptr LPHTMLELEMENT): HRESULT {.stdcall.}
    get_parentWindow*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLWINDOW2): HRESULT {.stdcall.}
    get_styleSheets*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLSTYLESHEETSCOLLECTION): HRESULT {.stdcall.}
    put_onbeforeupdate*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onbeforeupdate*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onerrorupdate*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onerrorupdate*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    toString*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    createStyleSheet*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: LONG, P3: ptr LPHTMLSTYLESHEET): HRESULT {.stdcall.}
  IHTMLSelectionObject* {.pure.} = object
    lpVtbl*: ptr IHTMLSelectionObjectVtbl
  IHTMLSelectionObjectVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    createRange*: proc(self: ptr IHTMLSelectionObject, P1: ptr IDispatch): HRESULT {.stdcall.}
    empty*: proc(self: ptr IHTMLSelectionObject): HRESULT {.stdcall.}
    clear*: proc(self: ptr IHTMLSelectionObject): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLSelectionObject, P1: ptr BSTR): HRESULT {.stdcall.}
  LPHTMLSELECTIONOBJECT* = ptr IHTMLSelectionObject
  IHTMLTxtRange* {.pure.} = object
    lpVtbl*: ptr IHTMLTxtRangeVtbl
  IHTMLTxtRangeVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_htmlText*: proc(self: ptr IHTMLTxtRange, P1: ptr BSTR): HRESULT {.stdcall.}
    put_text*: proc(self: ptr IHTMLTxtRange, P1: BSTR): HRESULT {.stdcall.}
    get_text*: proc(self: ptr IHTMLTxtRange, P1: ptr BSTR): HRESULT {.stdcall.}
    parentElement*: proc(self: ptr IHTMLTxtRange, P1: ptr LPHTMLELEMENT): HRESULT {.stdcall.}
    duplicate*: proc(self: ptr IHTMLTxtRange, P1: ptr IHTMLTxtRange): HRESULT {.stdcall.}
    inRange*: proc(self: ptr IHTMLTxtRange, P1: IHTMLTxtRange, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    isEqual*: proc(self: ptr IHTMLTxtRange, P1: IHTMLTxtRange, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    scrollIntoView*: proc(self: ptr IHTMLTxtRange, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    collapse*: proc(self: ptr IHTMLTxtRange, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    expand*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    move*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: LONG, P3: ptr LONG): HRESULT {.stdcall.}
    moveStart*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: LONG, P3: ptr LONG): HRESULT {.stdcall.}
    moveEnd*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: LONG, P3: ptr LONG): HRESULT {.stdcall.}
    select*: proc(self: ptr IHTMLTxtRange): HRESULT {.stdcall.}
    pasteHTML*: proc(self: ptr IHTMLTxtRange, P1: BSTR): HRESULT {.stdcall.}
    moveToElementText*: proc(self: ptr IHTMLTxtRange, P1: LPHTMLELEMENT): HRESULT {.stdcall.}
    setEndPoint*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: IHTMLTxtRange): HRESULT {.stdcall.}
    compareEndPoints*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: IHTMLTxtRange, P3: ptr LONG): HRESULT {.stdcall.}
    findText*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: LONG, P3: LONG, P4: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    moveToPoint*: proc(self: ptr IHTMLTxtRange, P1: LONG, P2: LONG): HRESULT {.stdcall.}
    getBookmark*: proc(self: ptr IHTMLTxtRange, P1: ptr BSTR): HRESULT {.stdcall.}
    moveToBookbark*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandSupported*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandEnabled*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandState*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandIndeterm*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandText*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr BSTR): HRESULT {.stdcall.}
    queryCommandValue*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT): HRESULT {.stdcall.}
    execCommand*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: VARIANT_BOOL, P3: VARIANT, P4: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    execCommandShowHelp*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLElement* {.pure.} = object
    lpVtbl*: ptr IHTMLElementVtbl
  IHTMLElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    setAttribute*: proc(self: ptr IHTMLElement, P1: BSTR, P2: VARIANT, P3: LONG): HRESULT {.stdcall.}
    getAttribute*: proc(self: ptr IHTMLElement, P1: BSTR, P2: LONG, P3: ptr VARIANT): HRESULT {.stdcall.}
    removeAttribute*: proc(self: ptr IHTMLElement, P1: BSTR, P2: LONG, P3: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_className*: proc(self: ptr IHTMLElement, P1: BSTR): HRESULT {.stdcall.}
    get_className*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    put_id*: proc(self: ptr IHTMLElement, P1: BSTR): HRESULT {.stdcall.}
    get_id*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    get_tagName*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    get_parentElement*: proc(self: ptr IHTMLElement, P1: ptr LPHTMLELEMENT): HRESULT {.stdcall.}
    get_style*: proc(self: ptr IHTMLElement, P1: ptr LPHTMLSTYLE): HRESULT {.stdcall.}
    put_onhelp*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onhelp*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onclick*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onclick*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_ondblclick*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_ondblclick*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeydown*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onkeydown*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeyup*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onkeyup*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeypress*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onkeypress*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseout*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onmouseout*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseover*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onmouseover*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmousemove*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onmousemove*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmousedown*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onmousedown*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseup*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onmouseup*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    get_document*: proc(self: ptr IHTMLElement, P1: ptr IDispatch): HRESULT {.stdcall.}
    put_title*: proc(self: ptr IHTMLElement, P1: BSTR): HRESULT {.stdcall.}
    get_title*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    put_language*: proc(self: ptr IHTMLElement, P1: BSTR): HRESULT {.stdcall.}
    get_language*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    put_onselectstart*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onselectstart*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    scrollIntoView*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    contains*: proc(self: ptr IHTMLElement, P1: LPHTMLELEMENT, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_source3Index*: proc(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.stdcall.}
    get_recordNumber*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_lang*: proc(self: ptr IHTMLElement, P1: BSTR): HRESULT {.stdcall.}
    get_lang*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    get_offsetLeft*: proc(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.stdcall.}
    get_offsetTop*: proc(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.stdcall.}
    get_offsetWidth*: proc(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.stdcall.}
    get_offsetHeight*: proc(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.stdcall.}
    get_offsetParent*: proc(self: ptr IHTMLElement, P1: ptr LPHTMLELEMENT): HRESULT {.stdcall.}
    put_innerHTML*: proc(self: ptr IHTMLElement, P1: BSTR): HRESULT {.stdcall.}
    get_innerHTML*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    put_innerText*: proc(self: ptr IHTMLElement, P1: BSTR): HRESULT {.stdcall.}
    get_innerText*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    put_outerHTML*: proc(self: ptr IHTMLElement, P1: BSTR): HRESULT {.stdcall.}
    get_outerHTML*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    put_outerText*: proc(self: ptr IHTMLElement, P1: BSTR): HRESULT {.stdcall.}
    get_outerText*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    insertAdjacentHTML*: proc(self: ptr IHTMLElement, P1: BSTR, P2: BSTR): HRESULT {.stdcall.}
    insertAdjacentText*: proc(self: ptr IHTMLElement, P1: BSTR, P2: BSTR): HRESULT {.stdcall.}
    get_parentTextEdit*: proc(self: ptr IHTMLElement, P1: ptr LPHTMLELEMENT): HRESULT {.stdcall.}
    isTextEdit*: proc(self: ptr IHTMLElement, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    click*: proc(self: ptr IHTMLElement): HRESULT {.stdcall.}
    get_filters*: proc(self: ptr IHTMLElement, P1: ptr LPHTMLFILTERSCOLLECTION): HRESULT {.stdcall.}
    put_ondragstart*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_ondragstart*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    toString*: proc(self: ptr IHTMLElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_onbeforeupdate*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onbeforeupdate*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onafterupdate*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onafterupdate*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onerrorupdate*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onerrorupdate*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onrowexit*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onrowexit*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onrowenter*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onrowenter*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_ondatasetchanged*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_ondatasetchanged*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_ondataavailable*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_ondataavailable*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_ondatasetcomplete*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_ondatasetcomplete*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onfilterchange*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onfilterchange*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    get_children*: proc(self: ptr IHTMLElement, P1: ptr IDispatch): HRESULT {.stdcall.}
    get_all*: proc(self: ptr IHTMLElement, P1: ptr IDispatch): HRESULT {.stdcall.}
  LPHTMLELEMENT* = ptr IHTMLElement
  IHTMLFramesCollection2* {.pure.} = object
    lpVtbl*: ptr IHTMLFramesCollection2Vtbl
  IHTMLFramesCollection2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    item*: proc(self: ptr IHTMLFramesCollection2, P1: ptr VARIANT, P2: ptr VARIANT): HRESULT {.stdcall.}
    get_length*: proc(self: ptr IHTMLFramesCollection2, P1: ptr LONG): HRESULT {.stdcall.}
  IHTMLWindow2* {.pure.} = object
    lpVtbl*: ptr IHTMLWindow2Vtbl
  IHTMLWindow2Vtbl* {.pure, inheritable.} = object of IHTMLFramesCollection2Vtbl
    get_frames*: proc(self: ptr IHTMLWindow2, P1: ptr IHTMLFramesCollection2): HRESULT {.stdcall.}
    put_defaultStatus*: proc(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.stdcall.}
    get_defaultStatus*: proc(self: ptr IHTMLWindow2, P1: ptr BSTR): HRESULT {.stdcall.}
    put_status*: proc(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.stdcall.}
    get_status*: proc(self: ptr IHTMLWindow2, P1: ptr BSTR): HRESULT {.stdcall.}
    setTimeout*: proc(self: ptr IHTMLWindow2, P1: BSTR, P2: LONG, P3: ptr VARIANT, P4: ptr LONG): HRESULT {.stdcall.}
    clearTimeout*: proc(self: ptr IHTMLWindow2, P1: LONG): HRESULT {.stdcall.}
    alert*: proc(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.stdcall.}
    confirm*: proc(self: ptr IHTMLWindow2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    prompt*: proc(self: ptr IHTMLWindow2, P1: BSTR, P2: BSTR, P3: ptr VARIANT): HRESULT {.stdcall.}
    get_Image*: proc(self: ptr IHTMLWindow2, P1: ptr LPHTMLIMAGEELEMENTFACTORY): HRESULT {.stdcall.}
    get_location*: proc(self: ptr IHTMLWindow2, P1: ptr LPHTMLLOCATION): HRESULT {.stdcall.}
    get_history*: proc(self: ptr IHTMLWindow2, P1: ptr LPOMHISTORY): HRESULT {.stdcall.}
    close*: proc(self: ptr IHTMLWindow2): HRESULT {.stdcall.}
    put_opener*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_opener*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    get_navigator*: proc(self: ptr IHTMLWindow2, P1: ptr LPOMNAVIGATOR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLWindow2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_parent*: proc(self: ptr IHTMLWindow2, P1: ptr LPHTMLWINDOW2): HRESULT {.stdcall.}
    open*: proc(self: ptr IHTMLWindow2, P1: BSTR, P2: BSTR, P3: BSTR, P4: VARIANT_BOOL, P5: ptr LPHTMLWINDOW2): HRESULT {.stdcall.}
    get_self*: proc(self: ptr IHTMLWindow2, P1: ptr LPHTMLWINDOW2): HRESULT {.stdcall.}
    get_top*: proc(self: ptr IHTMLWindow2, P1: ptr LPHTMLWINDOW2): HRESULT {.stdcall.}
    get_window*: proc(self: ptr IHTMLWindow2, P1: ptr LPHTMLWINDOW2): HRESULT {.stdcall.}
    navigate*: proc(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.stdcall.}
    put_onfocus*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_onfocus*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onblur*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_onblur*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onbeforeunload*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_onbeforeunload*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onunload*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_onunload*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onhelp*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_onhelp*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onerror*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_onerror*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onresize*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_onresize*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onscroll*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_onscroll*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    get_document*: proc(self: ptr IHTMLWindow2, P1: ptr IHTMLDocument2): HRESULT {.stdcall.}
    get_event*: proc(self: ptr IHTMLWindow2, P1: ptr LPHTMLEVENTOBJ): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLWindow2, P1: ptr IUnknown): HRESULT {.stdcall.}
    showModalDialog*: proc(self: ptr IHTMLWindow2, P1: BSTR, P2: ptr VARIANT, P3: ptr VARIANT, P4: ptr VARIANT): HRESULT {.stdcall.}
    showHelp*: proc(self: ptr IHTMLWindow2, P1: BSTR, P2: VARIANT, P3: BSTR): HRESULT {.stdcall.}
    get_screen*: proc(self: ptr IHTMLWindow2, P1: ptr LPHTMLSCREEN): HRESULT {.stdcall.}
    get_Option*: proc(self: ptr IHTMLWindow2, P1: ptr LPHTMLOPTIONELEMENTFACTORY): HRESULT {.stdcall.}
    focus*: proc(self: ptr IHTMLWindow2): HRESULT {.stdcall.}
    get_closed*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    blur*: proc(self: ptr IHTMLWindow2): HRESULT {.stdcall.}
    scroll*: proc(self: ptr IHTMLWindow2, P1: int64, P2: int64): HRESULT {.stdcall.}
    get_clientInformation*: proc(self: ptr IHTMLWindow2, P1: ptr LPOMNAVIGATOR): HRESULT {.stdcall.}
    setInterval*: proc(self: ptr IHTMLWindow2, P1: BSTR, P2: int64, P3: ptr VARIANT, P4: ptr int64): HRESULT {.stdcall.}
    clearInterval*: proc(self: ptr IHTMLWindow2, P1: int64): HRESULT {.stdcall.}
    put_offscreenBuffering*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_offscreenBuffering*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    execScript*: proc(self: ptr IHTMLWindow2, P1: BSTR, P2: BSTR, P3: ptr VARIANT): HRESULT {.stdcall.}
    toString*: proc(self: ptr IHTMLWindow2, P1: ptr BSTR): HRESULT {.stdcall.}
    scrollBy*: proc(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.stdcall.}
    scrollTo*: proc(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.stdcall.}
    moveTo*: proc(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.stdcall.}
    moveBy*: proc(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.stdcall.}
    resizeTo*: proc(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.stdcall.}
    resizeBy*: proc(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.stdcall.}
    get_external*: proc(self: ptr IHTMLWindow2, P1: ptr IDispatch): HRESULT {.stdcall.}
  LPHTMLWINDOW2* = ptr IHTMLWindow2
  IHTMLFrameBase* {.pure.} = object
    lpVtbl*: ptr IHTMLFrameBaseVtbl
  IHTMLFrameBaseVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_src*: proc(self: ptr IHTMLFrameBase, P1: BSTR): HRESULT {.stdcall.}
    get_src*: proc(self: ptr IHTMLFrameBase, P1: ptr BSTR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLFrameBase, P1: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLFrameBase, P1: ptr BSTR): HRESULT {.stdcall.}
    put_border*: proc(self: ptr IHTMLFrameBase, P1: VARIANT): HRESULT {.stdcall.}
    get_border*: proc(self: ptr IHTMLFrameBase, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_frameBorder*: proc(self: ptr IHTMLFrameBase, P1: BSTR): HRESULT {.stdcall.}
    get_frameBorder*: proc(self: ptr IHTMLFrameBase, P1: ptr BSTR): HRESULT {.stdcall.}
    put_frameSpacing*: proc(self: ptr IHTMLFrameBase, P1: VARIANT): HRESULT {.stdcall.}
    get_frameSpacing*: proc(self: ptr IHTMLFrameBase, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_marginWidth*: proc(self: ptr IHTMLFrameBase, P1: VARIANT): HRESULT {.stdcall.}
    get_marginWidth*: proc(self: ptr IHTMLFrameBase, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_marginHeight*: proc(self: ptr IHTMLFrameBase, P1: VARIANT): HRESULT {.stdcall.}
    get_marginHeight*: proc(self: ptr IHTMLFrameBase, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_noResize*: proc(self: ptr IHTMLFrameBase, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_noResize*: proc(self: ptr IHTMLFrameBase, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_scrolling*: proc(self: ptr IHTMLFrameBase, P1: BSTR): HRESULT {.stdcall.}
    get_scrolling*: proc(self: ptr IHTMLFrameBase, P1: ptr BSTR): HRESULT {.stdcall.}
  IHTMLFrameBase2* {.pure.} = object
    lpVtbl*: ptr IHTMLFrameBase2Vtbl
  IHTMLFrameBase2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_contentWindow*: proc(self: ptr IHTMLFrameBase2, P1: ptr IHTMLWindow2): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLFrameBase2, P1: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLFrameBase2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onreadystatechange*: proc(self: ptr IHTMLFrameBase2, P1: VARIANT): HRESULT {.stdcall.}
    get_onreadystatechange*: proc(self: ptr IHTMLFrameBase2, P1: ptr VARIANT): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLFrameBase2, P1: ptr BSTR): HRESULT {.stdcall.}
    put_allowTransparency*: proc(self: ptr IHTMLFrameBase2, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_allowTransparency*: proc(self: ptr IHTMLFrameBase2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLFrameBase3* {.pure.} = object
    lpVtbl*: ptr IHTMLFrameBase3Vtbl
  IHTMLFrameBase3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_longDesc*: proc(self: ptr IHTMLFrameBase3, P1: BSTR): HRESULT {.stdcall.}
    get_longDesc*: proc(self: ptr IHTMLFrameBase3, P1: ptr BSTR): HRESULT {.stdcall.}
  IHTMLBodyElement* {.pure.} = object
    lpVtbl*: ptr IHTMLBodyElementVtbl
  IHTMLBodyElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_background*: proc(self: ptr IHTMLBodyElement, P1: BSTR): HRESULT {.stdcall.}
    get_background*: proc(self: ptr IHTMLBodyElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_bgProperties*: proc(self: ptr IHTMLBodyElement, P1: BSTR): HRESULT {.stdcall.}
    get_bgProperties*: proc(self: ptr IHTMLBodyElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_leftMargin*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_leftMargin*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_topMargin*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_topMargin*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_rightMargin*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_rightMargin*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_bottomMargin*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_bottomMargin*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_noWrap*: proc(self: ptr IHTMLBodyElement, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_noWrap*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_bgColor*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_bgColor*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_text*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_text*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_link*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_link*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_vLink*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_vLink*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_aLink*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_aLink*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onunload*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onunload*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_scroll*: proc(self: ptr IHTMLBodyElement, P1: BSTR): HRESULT {.stdcall.}
    get_scroll*: proc(self: ptr IHTMLBodyElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_onselect*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onselect*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onbeforeunload*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onbeforeunload*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    createTextRange*: proc(self: ptr IHTMLBodyElement, P1: ptr IHTMLTxtRange): HRESULT {.stdcall.}
  IHTMLBodyElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLBodyElement2Vtbl
  IHTMLBodyElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_onbeforeprint*: proc(self: ptr IHTMLBodyElement2, P1: VARIANT): HRESULT {.stdcall.}
    get_onbeforeprint*: proc(self: ptr IHTMLBodyElement2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onafterprint*: proc(self: ptr IHTMLBodyElement2, P1: VARIANT): HRESULT {.stdcall.}
    get_onafterprint*: proc(self: ptr IHTMLBodyElement2, P1: ptr VARIANT): HRESULT {.stdcall.}

converter winim_converter_IHTMLStyleSheet*(x: ptr IHTMLStyleSheet): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLLocation*(x: ptr IHTMLLocation): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLFramesCollection*(x: ptr IHTMLFramesCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLStyleSheetsCollection*(x: ptr IHTMLStyleSheetsCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLStyle*(x: ptr IHTMLStyle): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLFiltersCollection*(x: ptr IHTMLFiltersCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOmHistory*(x: ptr IOmHistory): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOmHistory*(x: ptr IOmHistory): ptr IDispatch = cast[ptr IDispatch](x)
proc get_length*(self: ptr IOmHistory, p: ptr int16): HRESULT {.inline, discardable.} = self.lpVtbl.get_length(self, p)
proc back*(self: ptr IOmHistory, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.back(self, P1)
proc forward*(self: ptr IOmHistory, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.forward(self, P1)
proc go*(self: ptr IOmHistory, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.go(self, P1)
converter winim_converter_IOmNavigator*(x: ptr IOmNavigator): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLImageElementFactory*(x: ptr IHTMLImageElementFactory): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLEventObj*(x: ptr IHTMLEventObj): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLScreen*(x: ptr IHTMLScreen): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLOptionElementFactory*(x: ptr IHTMLOptionElementFactory): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLLinkElement*(x: ptr IHTMLLinkElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLLinkElement*(x: ptr IHTMLLinkElement): ptr IDispatch = cast[ptr IDispatch](x)
proc put_href*(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_href(self, P1)
proc get_href*(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_href(self, P1)
proc put_rel*(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_rel(self, P1)
proc get_rel*(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_rel(self, P1)
proc put_rev*(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_rev(self, P1)
proc get_rev*(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_rev(self, P1)
proc put_type*(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_type(self, P1)
proc get_type*(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_type(self, P1)
proc get_readyState*(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_readyState(self, P1)
proc put_onreadystatechange*(self: ptr IHTMLLinkElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onreadystatechange(self, P1)
proc get_onreadystatechange*(self: ptr IHTMLLinkElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onreadystatechange(self, P1)
proc put_onload*(self: ptr IHTMLLinkElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onload(self, P1)
proc get_onload*(self: ptr IHTMLLinkElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onload(self, P1)
proc put_onerror*(self: ptr IHTMLLinkElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onerror(self, P1)
proc get_onerror*(self: ptr IHTMLLinkElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onerror(self, P1)
proc get_styleSheet*(self: ptr IHTMLLinkElement, P1: ptr LPHTMLSTYLESHEET): HRESULT {.inline, discardable.} = self.lpVtbl.get_styleSheet(self, P1)
proc put_disabled*(self: ptr IHTMLLinkElement, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_disabled(self, P1)
proc get_disabled*(self: ptr IHTMLLinkElement, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_disabled(self, P1)
proc put_media*(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_media(self, P1)
proc get_media*(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_media(self, P1)
converter winim_converter_IHTMLImgElement*(x: ptr IHTMLImgElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLImgElement*(x: ptr IHTMLImgElement): ptr IDispatch = cast[ptr IDispatch](x)
proc put_isMap*(self: ptr IHTMLImgElement, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_isMap(self, P1)
proc get_isMap*(self: ptr IHTMLImgElement, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_isMap(self, P1)
proc put_useMap*(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_useMap(self, P1)
proc get_useMap*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_useMap(self, P1)
proc get_mimeType*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_mimeType(self, P1)
proc get_fileSize*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_fileSize(self, P1)
proc get_fileCreatedDate*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_fileCreatedDate(self, P1)
proc get_fileModifiedDate*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_fileModifiedDate(self, P1)
proc get_fileUpdatedDate*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_fileUpdatedDate(self, P1)
proc get_protocol*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_protocol(self, P1)
proc get_href*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_href(self, P1)
proc get_nameProp*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_nameProp(self, P1)
proc put_border*(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_border(self, P1)
proc get_border*(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_border(self, P1)
proc put_vspace*(self: ptr IHTMLImgElement, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.put_vspace(self, P1)
proc get_vspace*(self: ptr IHTMLImgElement, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_vspace(self, P1)
proc put_hspace*(self: ptr IHTMLImgElement, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.put_hspace(self, P1)
proc get_hspace*(self: ptr IHTMLImgElement, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_hspace(self, P1)
proc put_alt*(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_alt(self, P1)
proc get_alt*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_alt(self, P1)
proc put_src*(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_src(self, P1)
proc get_src*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_src(self, P1)
proc put_lowsrc*(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_lowsrc(self, P1)
proc get_lowsrc*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_lowsrc(self, P1)
proc put_vrml*(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_vrml(self, P1)
proc get_vrml*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_vrml(self, P1)
proc put_dynsrc*(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_dynsrc(self, P1)
proc get_dynsrc*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_dynsrc(self, P1)
proc get_readyState*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_readyState(self, P1)
proc get_complete*(self: ptr IHTMLImgElement, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_complete(self, P1)
proc put_loop*(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_loop(self, P1)
proc get_loop*(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_loop(self, P1)
proc put_align*(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_align(self, P1)
proc get_align*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_align(self, P1)
proc put_onload*(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onload(self, P1)
proc get_onload*(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onload(self, P1)
proc put_onerror*(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onerror(self, P1)
proc get_onerror*(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onerror(self, P1)
proc put_onabort*(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onabort(self, P1)
proc get_onabort*(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onabort(self, P1)
proc put_name*(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_name(self, P1)
proc get_name*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_name(self, P1)
proc put_width*(self: ptr IHTMLImgElement, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.put_width(self, P1)
proc get_width*(self: ptr IHTMLImgElement, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_width(self, P1)
proc put_height*(self: ptr IHTMLImgElement, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.put_height(self, P1)
proc get_height*(self: ptr IHTMLImgElement, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_height(self, P1)
proc put_start*(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_start(self, P1)
proc get_start*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_start(self, P1)
converter winim_converter_IHTMLElementCollection*(x: ptr IHTMLElementCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLElementCollection*(x: ptr IHTMLElementCollection): ptr IDispatch = cast[ptr IDispatch](x)
proc toString*(self: ptr IHTMLElementCollection, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.toString(self, P1)
proc put_length*(self: ptr IHTMLElementCollection, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.put_length(self, P1)
proc get_length*(self: ptr IHTMLElementCollection, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_length(self, P1)
proc get_newEnum*(self: ptr IHTMLElementCollection, P1: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.get_newEnum(self, P1)
proc item*(self: ptr IHTMLElementCollection, P1: VARIANT, P2: VARIANT, pDisp: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.item(self, P1, P2, pDisp)
proc tags*(self: ptr IHTMLElementCollection, P1: VARIANT, pdisp: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.tags(self, P1, pdisp)
converter winim_converter_IHTMLDocument*(x: ptr IHTMLDocument): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLDocument*(x: ptr IHTMLDocument): ptr IDispatch = cast[ptr IDispatch](x)
proc get_Script*(self: ptr IHTMLDocument, P1: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_Script(self, P1)
converter winim_converter_IHTMLDocument2*(x: ptr IHTMLDocument2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLDocument2*(x: ptr IHTMLDocument2): ptr IHTMLDocument = cast[ptr IHTMLDocument](x)
converter winim_converter_IHTMLDocument2*(x: ptr IHTMLDocument2): ptr IDispatch = cast[ptr IDispatch](x)
proc get_all*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_all(self, P1)
proc get_body*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENT): HRESULT {.inline, discardable.} = self.lpVtbl.get_body(self, P1)
proc get_activeElement*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENT): HRESULT {.inline, discardable.} = self.lpVtbl.get_activeElement(self, P1)
proc get_images*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_images(self, P1)
proc get_applets*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_applets(self, P1)
proc get_links*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_links(self, P1)
proc get_forms*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_forms(self, P1)
proc get_anchors*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_anchors(self, P1)
proc put_title*(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_title(self, P1)
proc get_title*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_title(self, P1)
proc get_scripts*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_scripts(self, P1)
proc put_designMode*(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_designMode(self, P1)
proc get_designMode*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_designMode(self, P1)
proc get_selection*(self: ptr IHTMLDocument2, P1: ptr LPHTMLSELECTIONOBJECT): HRESULT {.inline, discardable.} = self.lpVtbl.get_selection(self, P1)
proc get_readyState*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_readyState(self, P1)
proc get_frames*(self: ptr IHTMLDocument2, P1: ptr IHTMLFramesCollection2): HRESULT {.inline, discardable.} = self.lpVtbl.get_frames(self, P1)
proc get_embeds*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_embeds(self, P1)
proc get_plugins*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_plugins(self, P1)
proc put_alinkColor*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_alinkColor(self, P1)
proc get_alinkColor*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_alinkColor(self, P1)
proc put_bgColor*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_bgColor(self, P1)
proc get_bgColor*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_bgColor(self, P1)
proc put_fgColor*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_fgColor(self, P1)
proc get_fgColor*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_fgColor(self, P1)
proc put_linkColor*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_linkColor(self, P1)
proc get_linkColor*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_linkColor(self, P1)
proc put_vlinkColor*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_vlinkColor(self, P1)
proc get_vlinkColor*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_vlinkColor(self, P1)
proc get_referrer*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_referrer(self, P1)
proc get_location*(self: ptr IHTMLDocument2, P1: ptr LPHTMLLOCATION): HRESULT {.inline, discardable.} = self.lpVtbl.get_location(self, P1)
proc get_lastModified*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_lastModified(self, P1)
proc put_url*(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_url(self, P1)
proc get_url*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_url(self, P1)
proc put_domain*(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_domain(self, P1)
proc get_domain*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_domain(self, P1)
proc put_cookie*(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_cookie(self, P1)
proc get_cookie*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_cookie(self, P1)
proc put_expands*(self: ptr IHTMLDocument2, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_expands(self, P1)
proc get_expands*(self: ptr IHTMLDocument2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_expands(self, P1)
proc put_charset*(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_charset(self, P1)
proc get_charset*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_charset(self, P1)
proc put_defaultCharset*(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_defaultCharset(self, P1)
proc get_defaultCharset*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_defaultCharset(self, P1)
proc get_mimeType*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_mimeType(self, P1)
proc get_fileSize*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_fileSize(self, P1)
proc get_fileCreatedDate*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_fileCreatedDate(self, P1)
proc get_fileModifiedDate*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_fileModifiedDate(self, P1)
proc get_fileUpdatedDate*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_fileUpdatedDate(self, P1)
proc get_security*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_security(self, P1)
proc get_protocol*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_protocol(self, P1)
proc get_nameProp*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_nameProp(self, P1)
proc write*(self: ptr IHTMLDocument2, P1: ptr SAFEARRAY): HRESULT {.inline, discardable.} = self.lpVtbl.write(self, P1)
proc writeln*(self: ptr IHTMLDocument2, P1: ptr SAFEARRAY): HRESULT {.inline, discardable.} = self.lpVtbl.writeln(self, P1)
proc open*(self: ptr IHTMLDocument2, P1: BSTR, P2: VARIANT, P3: VARIANT, P4: VARIANT, P5: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.open(self, P1, P2, P3, P4, P5)
proc close*(self: ptr IHTMLDocument2): HRESULT {.inline, discardable.} = self.lpVtbl.close(self)
proc clear*(self: ptr IHTMLDocument2): HRESULT {.inline, discardable.} = self.lpVtbl.clear(self)
proc queryCommandSupported*(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandSupported(self, P1, P2)
proc queryCommandEnabled*(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandEnabled(self, P1, P2)
proc queryCommandState*(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandState(self, P1, P2)
proc queryCommandIndeterm*(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandIndeterm(self, P1, P2)
proc queryCommandText*(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandText(self, P1, P2)
proc queryCommandValue*(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandValue(self, P1, P2)
proc execCommand*(self: ptr IHTMLDocument2, P1: BSTR, P2: VARIANT_BOOL, P3: VARIANT, P4: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.execCommand(self, P1, P2, P3, P4)
proc execCommandShowHelp*(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.execCommandShowHelp(self, P1, P2)
proc createElement*(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr LPHTMLELEMENT): HRESULT {.inline, discardable.} = self.lpVtbl.createElement(self, P1, P2)
proc put_onhelp*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onhelp(self, P1)
proc get_onhelp*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onhelp(self, P1)
proc put_onclick*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onclick(self, P1)
proc get_onclick*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onclick(self, P1)
proc put_ondblclick*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_ondblclick(self, P1)
proc get_ondblclick*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_ondblclick(self, P1)
proc put_onkeyup*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onkeyup(self, P1)
proc get_onkeyup*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onkeyup(self, P1)
proc put_onkeydown*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onkeydown(self, P1)
proc get_onkeydown*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onkeydown(self, P1)
proc put_onkeypress*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onkeypress(self, P1)
proc get_onkeypress*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onkeypress(self, P1)
proc put_onmouseup*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmouseup(self, P1)
proc get_onmouseup*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmouseup(self, P1)
proc put_onmousedown*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmousedown(self, P1)
proc get_onmousedown*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmousedown(self, P1)
proc put_onmousemove*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmousemove(self, P1)
proc get_onmousemove*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmousemove(self, P1)
proc put_onmouseout*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmouseout(self, P1)
proc get_onmouseout*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmouseout(self, P1)
proc put_onmouseover*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmouseover(self, P1)
proc get_onmouseover*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmouseover(self, P1)
proc put_onreadystatechange*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onreadystatechange(self, P1)
proc get_onreadystatechange*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onreadystatechange(self, P1)
proc put_onafterupdate*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onafterupdate(self, P1)
proc get_onafterupdate*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onafterupdate(self, P1)
proc put_onrowexit*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onrowexit(self, P1)
proc get_onrowexit*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onrowexit(self, P1)
proc put_onrowenter*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onrowenter(self, P1)
proc get_onrowenter*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onrowenter(self, P1)
proc put_ondragstart*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_ondragstart(self, P1)
proc get_ondragstart*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_ondragstart(self, P1)
proc put_onselectstart*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onselectstart(self, P1)
proc get_onselectstart*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onselectstart(self, P1)
proc elementFromPoint*(self: ptr IHTMLDocument2, P1: LONG, P2: LONG, P3: ptr LPHTMLELEMENT): HRESULT {.inline, discardable.} = self.lpVtbl.elementFromPoint(self, P1, P2, P3)
proc get_parentWindow*(self: ptr IHTMLDocument2, P1: ptr LPHTMLWINDOW2): HRESULT {.inline, discardable.} = self.lpVtbl.get_parentWindow(self, P1)
proc get_styleSheets*(self: ptr IHTMLDocument2, P1: ptr LPHTMLSTYLESHEETSCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_styleSheets(self, P1)
proc put_onbeforeupdate*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onbeforeupdate(self, P1)
proc get_onbeforeupdate*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onbeforeupdate(self, P1)
proc put_onerrorupdate*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onerrorupdate(self, P1)
proc get_onerrorupdate*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onerrorupdate(self, P1)
proc toString*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.toString(self, P1)
proc createStyleSheet*(self: ptr IHTMLDocument2, P1: BSTR, P2: LONG, P3: ptr LPHTMLSTYLESHEET): HRESULT {.inline, discardable.} = self.lpVtbl.createStyleSheet(self, P1, P2, P3)
converter winim_converter_IHTMLSelectionObject*(x: ptr IHTMLSelectionObject): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLSelectionObject*(x: ptr IHTMLSelectionObject): ptr IDispatch = cast[ptr IDispatch](x)
proc createRange*(self: ptr IHTMLSelectionObject, P1: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.createRange(self, P1)
proc empty*(self: ptr IHTMLSelectionObject): HRESULT {.inline, discardable.} = self.lpVtbl.empty(self)
proc clear*(self: ptr IHTMLSelectionObject): HRESULT {.inline, discardable.} = self.lpVtbl.clear(self)
proc get_type*(self: ptr IHTMLSelectionObject, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_type(self, P1)
converter winim_converter_IHTMLTxtRange*(x: ptr IHTMLTxtRange): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLTxtRange*(x: ptr IHTMLTxtRange): ptr IDispatch = cast[ptr IDispatch](x)
proc get_htmlText*(self: ptr IHTMLTxtRange, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_htmlText(self, P1)
proc put_text*(self: ptr IHTMLTxtRange, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_text(self, P1)
proc get_text*(self: ptr IHTMLTxtRange, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_text(self, P1)
proc parentElement*(self: ptr IHTMLTxtRange, P1: ptr LPHTMLELEMENT): HRESULT {.inline, discardable.} = self.lpVtbl.parentElement(self, P1)
proc duplicate*(self: ptr IHTMLTxtRange, P1: ptr IHTMLTxtRange): HRESULT {.inline, discardable.} = self.lpVtbl.duplicate(self, P1)
proc inRange*(self: ptr IHTMLTxtRange, P1: IHTMLTxtRange, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.inRange(self, P1, P2)
proc isEqual*(self: ptr IHTMLTxtRange, P1: IHTMLTxtRange, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.isEqual(self, P1, P2)
proc scrollIntoView*(self: ptr IHTMLTxtRange, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.scrollIntoView(self, P1)
proc collapse*(self: ptr IHTMLTxtRange, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.collapse(self, P1)
proc expand*(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.expand(self, P1, P2)
proc move*(self: ptr IHTMLTxtRange, P1: BSTR, P2: LONG, P3: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.move(self, P1, P2, P3)
proc moveStart*(self: ptr IHTMLTxtRange, P1: BSTR, P2: LONG, P3: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.moveStart(self, P1, P2, P3)
proc moveEnd*(self: ptr IHTMLTxtRange, P1: BSTR, P2: LONG, P3: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.moveEnd(self, P1, P2, P3)
proc select*(self: ptr IHTMLTxtRange): HRESULT {.inline, discardable.} = self.lpVtbl.select(self)
proc pasteHTML*(self: ptr IHTMLTxtRange, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.pasteHTML(self, P1)
proc moveToElementText*(self: ptr IHTMLTxtRange, P1: LPHTMLELEMENT): HRESULT {.inline, discardable.} = self.lpVtbl.moveToElementText(self, P1)
proc setEndPoint*(self: ptr IHTMLTxtRange, P1: BSTR, P2: IHTMLTxtRange): HRESULT {.inline, discardable.} = self.lpVtbl.setEndPoint(self, P1, P2)
proc compareEndPoints*(self: ptr IHTMLTxtRange, P1: BSTR, P2: IHTMLTxtRange, P3: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.compareEndPoints(self, P1, P2, P3)
proc findText*(self: ptr IHTMLTxtRange, P1: BSTR, P2: LONG, P3: LONG, P4: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.findText(self, P1, P2, P3, P4)
proc moveToPoint*(self: ptr IHTMLTxtRange, P1: LONG, P2: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.moveToPoint(self, P1, P2)
proc getBookmark*(self: ptr IHTMLTxtRange, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.getBookmark(self, P1)
proc moveToBookbark*(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.moveToBookbark(self, P1, P2)
proc queryCommandSupported*(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandSupported(self, P1, P2)
proc queryCommandEnabled*(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandEnabled(self, P1, P2)
proc queryCommandState*(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandState(self, P1, P2)
proc queryCommandIndeterm*(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandIndeterm(self, P1, P2)
proc queryCommandText*(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandText(self, P1, P2)
proc queryCommandValue*(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandValue(self, P1, P2)
proc execCommand*(self: ptr IHTMLTxtRange, P1: BSTR, P2: VARIANT_BOOL, P3: VARIANT, P4: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.execCommand(self, P1, P2, P3, P4)
proc execCommandShowHelp*(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.execCommandShowHelp(self, P1, P2)
converter winim_converter_IHTMLElement*(x: ptr IHTMLElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLElement*(x: ptr IHTMLElement): ptr IDispatch = cast[ptr IDispatch](x)
proc setAttribute*(self: ptr IHTMLElement, P1: BSTR, P2: VARIANT, P3: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.setAttribute(self, P1, P2, P3)
proc getAttribute*(self: ptr IHTMLElement, P1: BSTR, P2: LONG, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.getAttribute(self, P1, P2, P3)
proc removeAttribute*(self: ptr IHTMLElement, P1: BSTR, P2: LONG, P3: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.removeAttribute(self, P1, P2, P3)
proc put_className*(self: ptr IHTMLElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_className(self, P1)
proc get_className*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_className(self, P1)
proc put_id*(self: ptr IHTMLElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_id(self, P1)
proc get_id*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_id(self, P1)
proc get_tagName*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_tagName(self, P1)
proc get_parentElement*(self: ptr IHTMLElement, P1: ptr LPHTMLELEMENT): HRESULT {.inline, discardable.} = self.lpVtbl.get_parentElement(self, P1)
proc get_style*(self: ptr IHTMLElement, P1: ptr LPHTMLSTYLE): HRESULT {.inline, discardable.} = self.lpVtbl.get_style(self, P1)
proc put_onhelp*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onhelp(self, P1)
proc get_onhelp*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onhelp(self, P1)
proc put_onclick*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onclick(self, P1)
proc get_onclick*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onclick(self, P1)
proc put_ondblclick*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_ondblclick(self, P1)
proc get_ondblclick*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_ondblclick(self, P1)
proc put_onkeydown*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onkeydown(self, P1)
proc get_onkeydown*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onkeydown(self, P1)
proc put_onkeyup*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onkeyup(self, P1)
proc get_onkeyup*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onkeyup(self, P1)
proc put_onkeypress*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onkeypress(self, P1)
proc get_onkeypress*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onkeypress(self, P1)
proc put_onmouseout*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmouseout(self, P1)
proc get_onmouseout*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmouseout(self, P1)
proc put_onmouseover*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmouseover(self, P1)
proc get_onmouseover*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmouseover(self, P1)
proc put_onmousemove*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmousemove(self, P1)
proc get_onmousemove*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmousemove(self, P1)
proc put_onmousedown*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmousedown(self, P1)
proc get_onmousedown*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmousedown(self, P1)
proc put_onmouseup*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmouseup(self, P1)
proc get_onmouseup*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmouseup(self, P1)
proc get_document*(self: ptr IHTMLElement, P1: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_document(self, P1)
proc put_title*(self: ptr IHTMLElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_title(self, P1)
proc get_title*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_title(self, P1)
proc put_language*(self: ptr IHTMLElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_language(self, P1)
proc get_language*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_language(self, P1)
proc put_onselectstart*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onselectstart(self, P1)
proc get_onselectstart*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onselectstart(self, P1)
proc scrollIntoView*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.scrollIntoView(self, P1)
proc contains*(self: ptr IHTMLElement, P1: LPHTMLELEMENT, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.contains(self, P1, P2)
proc get_source3Index*(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_source3Index(self, P1)
proc get_recordNumber*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_recordNumber(self, P1)
proc put_lang*(self: ptr IHTMLElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_lang(self, P1)
proc get_lang*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_lang(self, P1)
proc get_offsetLeft*(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_offsetLeft(self, P1)
proc get_offsetTop*(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_offsetTop(self, P1)
proc get_offsetWidth*(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_offsetWidth(self, P1)
proc get_offsetHeight*(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_offsetHeight(self, P1)
proc get_offsetParent*(self: ptr IHTMLElement, P1: ptr LPHTMLELEMENT): HRESULT {.inline, discardable.} = self.lpVtbl.get_offsetParent(self, P1)
proc put_innerHTML*(self: ptr IHTMLElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_innerHTML(self, P1)
proc get_innerHTML*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_innerHTML(self, P1)
proc put_innerText*(self: ptr IHTMLElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_innerText(self, P1)
proc get_innerText*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_innerText(self, P1)
proc put_outerHTML*(self: ptr IHTMLElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_outerHTML(self, P1)
proc get_outerHTML*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_outerHTML(self, P1)
proc put_outerText*(self: ptr IHTMLElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_outerText(self, P1)
proc get_outerText*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_outerText(self, P1)
proc insertAdjacentHTML*(self: ptr IHTMLElement, P1: BSTR, P2: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.insertAdjacentHTML(self, P1, P2)
proc insertAdjacentText*(self: ptr IHTMLElement, P1: BSTR, P2: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.insertAdjacentText(self, P1, P2)
proc get_parentTextEdit*(self: ptr IHTMLElement, P1: ptr LPHTMLELEMENT): HRESULT {.inline, discardable.} = self.lpVtbl.get_parentTextEdit(self, P1)
proc isTextEdit*(self: ptr IHTMLElement, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.isTextEdit(self, P1)
proc click*(self: ptr IHTMLElement): HRESULT {.inline, discardable.} = self.lpVtbl.click(self)
proc get_filters*(self: ptr IHTMLElement, P1: ptr LPHTMLFILTERSCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_filters(self, P1)
proc put_ondragstart*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_ondragstart(self, P1)
proc get_ondragstart*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_ondragstart(self, P1)
proc toString*(self: ptr IHTMLElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.toString(self, P1)
proc put_onbeforeupdate*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onbeforeupdate(self, P1)
proc get_onbeforeupdate*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onbeforeupdate(self, P1)
proc put_onafterupdate*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onafterupdate(self, P1)
proc get_onafterupdate*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onafterupdate(self, P1)
proc put_onerrorupdate*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onerrorupdate(self, P1)
proc get_onerrorupdate*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onerrorupdate(self, P1)
proc put_onrowexit*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onrowexit(self, P1)
proc get_onrowexit*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onrowexit(self, P1)
proc put_onrowenter*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onrowenter(self, P1)
proc get_onrowenter*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onrowenter(self, P1)
proc put_ondatasetchanged*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_ondatasetchanged(self, P1)
proc get_ondatasetchanged*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_ondatasetchanged(self, P1)
proc put_ondataavailable*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_ondataavailable(self, P1)
proc get_ondataavailable*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_ondataavailable(self, P1)
proc put_ondatasetcomplete*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_ondatasetcomplete(self, P1)
proc get_ondatasetcomplete*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_ondatasetcomplete(self, P1)
proc put_onfilterchange*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onfilterchange(self, P1)
proc get_onfilterchange*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onfilterchange(self, P1)
proc get_children*(self: ptr IHTMLElement, P1: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_children(self, P1)
proc get_all*(self: ptr IHTMLElement, P1: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_all(self, P1)
converter winim_converter_IHTMLFramesCollection2*(x: ptr IHTMLFramesCollection2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLFramesCollection2*(x: ptr IHTMLFramesCollection2): ptr IDispatch = cast[ptr IDispatch](x)
proc item*(self: ptr IHTMLFramesCollection2, P1: ptr VARIANT, P2: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.item(self, P1, P2)
proc get_length*(self: ptr IHTMLFramesCollection2, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_length(self, P1)
converter winim_converter_IHTMLWindow2*(x: ptr IHTMLWindow2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLWindow2*(x: ptr IHTMLWindow2): ptr IHTMLFramesCollection2 = cast[ptr IHTMLFramesCollection2](x)
converter winim_converter_IHTMLWindow2*(x: ptr IHTMLWindow2): ptr IDispatch = cast[ptr IDispatch](x)
proc get_frames*(self: ptr IHTMLWindow2, P1: ptr IHTMLFramesCollection2): HRESULT {.inline, discardable.} = self.lpVtbl.get_frames(self, P1)
proc put_defaultStatus*(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_defaultStatus(self, P1)
proc get_defaultStatus*(self: ptr IHTMLWindow2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_defaultStatus(self, P1)
proc put_status*(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_status(self, P1)
proc get_status*(self: ptr IHTMLWindow2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_status(self, P1)
proc setTimeout*(self: ptr IHTMLWindow2, P1: BSTR, P2: LONG, P3: ptr VARIANT, P4: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.setTimeout(self, P1, P2, P3, P4)
proc clearTimeout*(self: ptr IHTMLWindow2, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.clearTimeout(self, P1)
proc alert*(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.alert(self, P1)
proc confirm*(self: ptr IHTMLWindow2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.confirm(self, P1, P2)
proc prompt*(self: ptr IHTMLWindow2, P1: BSTR, P2: BSTR, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.prompt(self, P1, P2, P3)
proc get_Image*(self: ptr IHTMLWindow2, P1: ptr LPHTMLIMAGEELEMENTFACTORY): HRESULT {.inline, discardable.} = self.lpVtbl.get_Image(self, P1)
proc get_location*(self: ptr IHTMLWindow2, P1: ptr LPHTMLLOCATION): HRESULT {.inline, discardable.} = self.lpVtbl.get_location(self, P1)
proc get_history*(self: ptr IHTMLWindow2, P1: ptr LPOMHISTORY): HRESULT {.inline, discardable.} = self.lpVtbl.get_history(self, P1)
proc close*(self: ptr IHTMLWindow2): HRESULT {.inline, discardable.} = self.lpVtbl.close(self)
proc put_opener*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_opener(self, P1)
proc get_opener*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_opener(self, P1)
proc get_navigator*(self: ptr IHTMLWindow2, P1: ptr LPOMNAVIGATOR): HRESULT {.inline, discardable.} = self.lpVtbl.get_navigator(self, P1)
proc put_name*(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_name(self, P1)
proc get_name*(self: ptr IHTMLWindow2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_name(self, P1)
proc get_parent*(self: ptr IHTMLWindow2, P1: ptr LPHTMLWINDOW2): HRESULT {.inline, discardable.} = self.lpVtbl.get_parent(self, P1)
proc open*(self: ptr IHTMLWindow2, P1: BSTR, P2: BSTR, P3: BSTR, P4: VARIANT_BOOL, P5: ptr LPHTMLWINDOW2): HRESULT {.inline, discardable.} = self.lpVtbl.open(self, P1, P2, P3, P4, P5)
proc get_self*(self: ptr IHTMLWindow2, P1: ptr LPHTMLWINDOW2): HRESULT {.inline, discardable.} = self.lpVtbl.get_self(self, P1)
proc get_top*(self: ptr IHTMLWindow2, P1: ptr LPHTMLWINDOW2): HRESULT {.inline, discardable.} = self.lpVtbl.get_top(self, P1)
proc get_window*(self: ptr IHTMLWindow2, P1: ptr LPHTMLWINDOW2): HRESULT {.inline, discardable.} = self.lpVtbl.get_window(self, P1)
proc navigate*(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.navigate(self, P1)
proc put_onfocus*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onfocus(self, P1)
proc get_onfocus*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onfocus(self, P1)
proc put_onblur*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onblur(self, P1)
proc get_onblur*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onblur(self, P1)
proc put_onload*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onload(self, P1)
proc get_onload*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onload(self, P1)
proc put_onbeforeunload*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onbeforeunload(self, P1)
proc get_onbeforeunload*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onbeforeunload(self, P1)
proc put_onunload*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onunload(self, P1)
proc get_onunload*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onunload(self, P1)
proc put_onhelp*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onhelp(self, P1)
proc get_onhelp*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onhelp(self, P1)
proc put_onerror*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onerror(self, P1)
proc get_onerror*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onerror(self, P1)
proc put_onresize*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onresize(self, P1)
proc get_onresize*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onresize(self, P1)
proc put_onscroll*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onscroll(self, P1)
proc get_onscroll*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onscroll(self, P1)
proc get_document*(self: ptr IHTMLWindow2, P1: ptr IHTMLDocument2): HRESULT {.inline, discardable.} = self.lpVtbl.get_document(self, P1)
proc get_event*(self: ptr IHTMLWindow2, P1: ptr LPHTMLEVENTOBJ): HRESULT {.inline, discardable.} = self.lpVtbl.get_event(self, P1)
proc get_newEnum*(self: ptr IHTMLWindow2, P1: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.get_newEnum(self, P1)
proc showModalDialog*(self: ptr IHTMLWindow2, P1: BSTR, P2: ptr VARIANT, P3: ptr VARIANT, P4: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.showModalDialog(self, P1, P2, P3, P4)
proc showHelp*(self: ptr IHTMLWindow2, P1: BSTR, P2: VARIANT, P3: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.showHelp(self, P1, P2, P3)
proc get_screen*(self: ptr IHTMLWindow2, P1: ptr LPHTMLSCREEN): HRESULT {.inline, discardable.} = self.lpVtbl.get_screen(self, P1)
proc get_Option*(self: ptr IHTMLWindow2, P1: ptr LPHTMLOPTIONELEMENTFACTORY): HRESULT {.inline, discardable.} = self.lpVtbl.get_Option(self, P1)
proc focus*(self: ptr IHTMLWindow2): HRESULT {.inline, discardable.} = self.lpVtbl.focus(self)
proc get_closed*(self: ptr IHTMLWindow2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_closed(self, P1)
proc blur*(self: ptr IHTMLWindow2): HRESULT {.inline, discardable.} = self.lpVtbl.blur(self)
proc scroll*(self: ptr IHTMLWindow2, P1: int64, P2: int64): HRESULT {.inline, discardable.} = self.lpVtbl.scroll(self, P1, P2)
proc get_clientInformation*(self: ptr IHTMLWindow2, P1: ptr LPOMNAVIGATOR): HRESULT {.inline, discardable.} = self.lpVtbl.get_clientInformation(self, P1)
proc setInterval*(self: ptr IHTMLWindow2, P1: BSTR, P2: int64, P3: ptr VARIANT, P4: ptr int64): HRESULT {.inline, discardable.} = self.lpVtbl.setInterval(self, P1, P2, P3, P4)
proc clearInterval*(self: ptr IHTMLWindow2, P1: int64): HRESULT {.inline, discardable.} = self.lpVtbl.clearInterval(self, P1)
proc put_offscreenBuffering*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_offscreenBuffering(self, P1)
proc get_offscreenBuffering*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_offscreenBuffering(self, P1)
proc execScript*(self: ptr IHTMLWindow2, P1: BSTR, P2: BSTR, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.execScript(self, P1, P2, P3)
proc toString*(self: ptr IHTMLWindow2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.toString(self, P1)
proc scrollBy*(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.scrollBy(self, P1, P2)
proc scrollTo*(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.scrollTo(self, P1, P2)
proc moveTo*(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.moveTo(self, P1, P2)
proc moveBy*(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.moveBy(self, P1, P2)
proc resizeTo*(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.resizeTo(self, P1, P2)
proc resizeBy*(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.resizeBy(self, P1, P2)
proc get_external*(self: ptr IHTMLWindow2, P1: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_external(self, P1)
converter winim_converter_IHTMLFrameBase*(x: ptr IHTMLFrameBase): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLFrameBase*(x: ptr IHTMLFrameBase): ptr IDispatch = cast[ptr IDispatch](x)
proc put_src*(self: ptr IHTMLFrameBase, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_src(self, P1)
proc get_src*(self: ptr IHTMLFrameBase, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_src(self, P1)
proc put_name*(self: ptr IHTMLFrameBase, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_name(self, P1)
proc get_name*(self: ptr IHTMLFrameBase, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_name(self, P1)
proc put_border*(self: ptr IHTMLFrameBase, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_border(self, P1)
proc get_border*(self: ptr IHTMLFrameBase, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_border(self, P1)
proc put_frameBorder*(self: ptr IHTMLFrameBase, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_frameBorder(self, P1)
proc get_frameBorder*(self: ptr IHTMLFrameBase, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_frameBorder(self, P1)
proc put_frameSpacing*(self: ptr IHTMLFrameBase, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_frameSpacing(self, P1)
proc get_frameSpacing*(self: ptr IHTMLFrameBase, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_frameSpacing(self, P1)
proc put_marginWidth*(self: ptr IHTMLFrameBase, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_marginWidth(self, P1)
proc get_marginWidth*(self: ptr IHTMLFrameBase, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_marginWidth(self, P1)
proc put_marginHeight*(self: ptr IHTMLFrameBase, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_marginHeight(self, P1)
proc get_marginHeight*(self: ptr IHTMLFrameBase, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_marginHeight(self, P1)
proc put_noResize*(self: ptr IHTMLFrameBase, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_noResize(self, P1)
proc get_noResize*(self: ptr IHTMLFrameBase, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_noResize(self, P1)
proc put_scrolling*(self: ptr IHTMLFrameBase, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_scrolling(self, P1)
proc get_scrolling*(self: ptr IHTMLFrameBase, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_scrolling(self, P1)
converter winim_converter_IHTMLFrameBase2*(x: ptr IHTMLFrameBase2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLFrameBase2*(x: ptr IHTMLFrameBase2): ptr IDispatch = cast[ptr IDispatch](x)
proc get_contentWindow*(self: ptr IHTMLFrameBase2, P1: ptr IHTMLWindow2): HRESULT {.inline, discardable.} = self.lpVtbl.get_contentWindow(self, P1)
proc put_onload*(self: ptr IHTMLFrameBase2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onload(self, P1)
proc get_onload*(self: ptr IHTMLFrameBase2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onload(self, P1)
proc put_onreadystatechange*(self: ptr IHTMLFrameBase2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onreadystatechange(self, P1)
proc get_onreadystatechange*(self: ptr IHTMLFrameBase2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onreadystatechange(self, P1)
proc get_readyState*(self: ptr IHTMLFrameBase2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_readyState(self, P1)
proc put_allowTransparency*(self: ptr IHTMLFrameBase2, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_allowTransparency(self, P1)
proc get_allowTransparency*(self: ptr IHTMLFrameBase2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_allowTransparency(self, P1)
converter winim_converter_IHTMLFrameBase3*(x: ptr IHTMLFrameBase3): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLFrameBase3*(x: ptr IHTMLFrameBase3): ptr IDispatch = cast[ptr IDispatch](x)
proc put_longDesc*(self: ptr IHTMLFrameBase3, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_longDesc(self, P1)
proc get_longDesc*(self: ptr IHTMLFrameBase3, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_longDesc(self, P1)
converter winim_converter_IHTMLBodyElement*(x: ptr IHTMLBodyElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLBodyElement*(x: ptr IHTMLBodyElement): ptr IDispatch = cast[ptr IDispatch](x)
proc put_background*(self: ptr IHTMLBodyElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_background(self, P1)
proc get_background*(self: ptr IHTMLBodyElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_background(self, P1)
proc put_bgProperties*(self: ptr IHTMLBodyElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_bgProperties(self, P1)
proc get_bgProperties*(self: ptr IHTMLBodyElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_bgProperties(self, P1)
proc put_leftMargin*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_leftMargin(self, P1)
proc get_leftMargin*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_leftMargin(self, P1)
proc put_topMargin*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_topMargin(self, P1)
proc get_topMargin*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_topMargin(self, P1)
proc put_rightMargin*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_rightMargin(self, P1)
proc get_rightMargin*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_rightMargin(self, P1)
proc put_bottomMargin*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_bottomMargin(self, P1)
proc get_bottomMargin*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_bottomMargin(self, P1)
proc put_noWrap*(self: ptr IHTMLBodyElement, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_noWrap(self, P1)
proc get_noWrap*(self: ptr IHTMLBodyElement, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_noWrap(self, P1)
proc put_bgColor*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_bgColor(self, P1)
proc get_bgColor*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_bgColor(self, P1)
proc put_text*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_text(self, P1)
proc get_text*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_text(self, P1)
proc put_link*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_link(self, P1)
proc get_link*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_link(self, P1)
proc put_vLink*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_vLink(self, P1)
proc get_vLink*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_vLink(self, P1)
proc put_aLink*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_aLink(self, P1)
proc get_aLink*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_aLink(self, P1)
proc put_onload*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onload(self, P1)
proc get_onload*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onload(self, P1)
proc put_onunload*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onunload(self, P1)
proc get_onunload*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onunload(self, P1)
proc put_scroll*(self: ptr IHTMLBodyElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_scroll(self, P1)
proc get_scroll*(self: ptr IHTMLBodyElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_scroll(self, P1)
proc put_onselect*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onselect(self, P1)
proc get_onselect*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onselect(self, P1)
proc put_onbeforeunload*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onbeforeunload(self, P1)
proc get_onbeforeunload*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onbeforeunload(self, P1)
proc createTextRange*(self: ptr IHTMLBodyElement, P1: ptr IHTMLTxtRange): HRESULT {.inline, discardable.} = self.lpVtbl.createTextRange(self, P1)
converter winim_converter_IHTMLBodyElement2*(x: ptr IHTMLBodyElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLBodyElement2*(x: ptr IHTMLBodyElement2): ptr IDispatch = cast[ptr IDispatch](x)
proc put_onbeforeprint*(self: ptr IHTMLBodyElement2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onbeforeprint(self, P1)
proc get_onbeforeprint*(self: ptr IHTMLBodyElement2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onbeforeprint(self, P1)
proc put_onafterprint*(self: ptr IHTMLBodyElement2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onafterprint(self, P1)
proc get_onafterprint*(self: ptr IHTMLBodyElement2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onafterprint(self, P1)

# objext/objsafe.nim

const
  INTERFACESAFE_FOR_UNTRUSTED_CALLER* = 1
  INTERFACESAFE_FOR_UNTRUSTED_DATA* = 2

type
  IObjectSafety* {.pure.} = object
    lpVtbl*: ptr IObjectSafetyVtbl
  IObjectSafetyVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetInterfaceSafetyOptions*: proc(self: ptr IObjectSafety, P1: REFIID, P2: ptr DWORD, P3: ptr DWORD): HRESULT {.stdcall.}
    SetInterfaceSafetyOptions*: proc(self: ptr IObjectSafety, P1: REFIID, P2: DWORD, P3: DWORD): HRESULT {.stdcall.}

converter winim_converter_IObjectSafety*(x: ptr IObjectSafety): ptr IUnknown = cast[ptr IUnknown](x)
proc GetInterfaceSafetyOptions*(self: ptr IObjectSafety, P1: REFIID, P2: ptr DWORD, P3: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetInterfaceSafetyOptions(self, P1, P2, P3)
proc SetInterfaceSafetyOptions*(self: ptr IObjectSafety, P1: REFIID, P2: DWORD, P3: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetInterfaceSafetyOptions(self, P1, P2, P3)

# objext/ole.nim

type
  OLE_LPCSTR* = LPCSTR

const
  OT_LINK* = 1
  OT_EMBEDDED* = 2
  OT_STATIC* = 3
  OLEVERB_PRIMARY* = 0
  OF_SET* = 1
  OF_GET* = 2
  OF_HANDLER* = 4
  # OLESTATUS* = enum
  ole_ok* = 0
  ole_wait_for_release* = 1
  ole_busy* = 2
  ole_error_protect_only* = 3
  ole_error_memory* = 4
  ole_error_stream* = 5
  ole_error_static* = 6
  ole_error_blank* = 7
  ole_error_draw* = 8
  ole_error_metafile* = 9
  ole_error_abort* = 10
  ole_error_clipboard* = 11
  ole_error_format* = 12
  ole_error_object* = 13
  ole_error_option* = 14
  ole_error_protocol* = 15
  ole_error_address* = 16
  ole_error_not_equal* = 17
  ole_error_handle* = 18
  ole_error_generic* = 19
  ole_error_class* = 20
  ole_error_syntax* = 21
  ole_error_datatype* = 22
  ole_error_palette* = 23
  ole_error_not_link* = 24
  ole_error_not_empty* = 25
  ole_error_size* = 26
  ole_error_drive* = 27
  ole_error_network* = 28
  ole_error_name* = 29
  ole_error_template* = 30
  ole_error_new* = 31
  ole_error_edit* = 32
  ole_error_open* = 33
  ole_error_not_open* = 34
  ole_error_launch* = 35
  ole_error_comm* = 36
  ole_error_terminate* = 37
  ole_error_command* = 38
  ole_error_show* = 39
  ole_error_doverb* = 40
  ole_error_advise_native* = 41
  ole_error_advise_pict* = 42
  ole_error_advise_rename* = 43
  ole_error_poke_native* = 44
  ole_error_request_native* = 45
  ole_error_request_pict* = 46
  ole_error_server_blocked* = 47
  ole_error_registration* = 48
  ole_error_already_registered* = 49
  ole_error_task* = 50
  ole_error_outofdate* = 51
  ole_error_cant_update_client* = 52
  ole_error_update* = 53
  ole_error_setdata_format* = 54
  ole_error_static_from_other_os* = 55
  ole_error_file_ver* = 56
  ole_warn_delete_data* = 1000
  # OLE_NOTIFICATION* = enum
  ole_changed* = 0
  ole_saved* = 1
  ole_closed* = 2
  ole_renamed* = 3
  ole_query_paint* = 4
  ole_release* = 5
  ole_query_retry* = 6
  # OLE_RELEASE_METHOD* = enum
  ole_none* = 0
  ole_delete* = 1
  ole_lnkpaste* = 2
  ole_embpaste* = 3
  ole_show* = 4
  ole_run* = 5
  ole_activate* = 6
  ole_update* = 7
  ole_close* = 8
  ole_reconnect* = 9
  ole_setupdateoptions* = 10
  ole_serverunlaunch* = 11
  ole_loadfromstream* = 12
  ole_setdata* = 13
  ole_requestdata* = 14
  ole_other* = 15
  ole_create* = 16
  ole_createfromtemplate* = 17
  ole_createlinkfromfile* = 18
  ole_copyfromlnk* = 19
  ole_createfromfile* = 20
  ole_createinvisible* = 21
  # OLEOPT_RENDER* = enum
  olerender_none* = 0
  olerender_draw* = 1
  olerender_format* = 2
  # OLEOPT_UPDATE* = enum
  oleupdate_always* = 0
  oleupdate_onsave* = 1
  oleupdate_oncall* = 2
  oleupdate_onclose* = 3
  # OLE_SERVER_USE* = enum
  OLE_SERVER_MULTI* = 0
  OLE_SERVER_SINGLE* = 1

type
  OLETARGETDEVICE* {.final, pure.} = object
    otdDeviceNameOffset*: USHORT
    otdDriverNameOffset*: USHORT
    otdPortNameOffset*: USHORT
    otdExtDevmodeOffset*: USHORT
    otdExtDevmodeSize*: USHORT
    otdEnvironmentOffset*: USHORT
    otdEnvironmentSize*: USHORT
    otdData*: array[1, BYTE]
  LPOLETARGETDEVICE* = ptr OLETARGETDEVICE
  OLESTATUS* = int32
  OLE_NOTIFICATION* = int32
  OLE_RELEASE_METHOD* = int32
  OLEOPT_RENDER* = int32
  OLECLIPFORMAT* = WORD
  OLEOPT_UPDATE* = int32
  HOBJECT* = HANDLE
  LHSERVER* = LONG
  LHCLIENTDOC* = LONG
  LHSERVERDOC* = LONG
  OLEOBJECTVTBL* {.final, pure.} = object
    QueryProtocol*: proc (P1: POLEOBJECT, P2: OLE_LPCSTR): pointer {.stdcall.}
    Release*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    Show*: proc (P1: POLEOBJECT, P2: BOOL): OLESTATUS {.stdcall.}
    DoVerb*: proc (P1: POLEOBJECT, P2: UINT, P3: BOOL, P4: BOOL): OLESTATUS {.stdcall.}
    GetData*: proc (P1: POLEOBJECT, P2: OLECLIPFORMAT, P3: ptr HANDLE): OLESTATUS {.stdcall.}
    SetData*: proc (P1: POLEOBJECT, P2: OLECLIPFORMAT, P3: HANDLE): OLESTATUS {.stdcall.}
    SetTargetDevice*: proc (P1: POLEOBJECT, P2: HGLOBAL): OLESTATUS {.stdcall.}
    SetBounds*: proc (P1: POLEOBJECT, P2: ptr RECT): OLESTATUS {.stdcall.}
    EnumFormats*: proc (P1: POLEOBJECT, P2: OLECLIPFORMAT): OLECLIPFORMAT {.stdcall.}
    SetColorScheme*: proc (P1: POLEOBJECT, P2: ptr LOGPALETTE): OLESTATUS {.stdcall.}
    Delete*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    SetHostNames*: proc (P1: POLEOBJECT, P2: OLE_LPCSTR, P3: OLE_LPCSTR): OLESTATUS {.stdcall.}
    SaveToStream*: proc (P1: POLEOBJECT, P2: LPOLESTREAM): OLESTATUS {.stdcall.}
    Clone*: proc (P1: POLEOBJECT, P2: LPOLECLIENT, P3: LHCLIENTDOC, P4: OLE_LPCSTR, P5: ptr POLEOBJECT): OLESTATUS {.stdcall.}
    CopyFromLink*: proc (P1: POLEOBJECT, P2: LPOLECLIENT, P3: LHCLIENTDOC, P4: OLE_LPCSTR, P5: ptr POLEOBJECT): OLESTATUS {.stdcall.}
    Equal*: proc (P1: POLEOBJECT, P2: POLEOBJECT): OLESTATUS {.stdcall.}
    CopyToClipboard*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    Draw*: proc (P1: POLEOBJECT, P2: HDC, P3: ptr RECT, P4: ptr RECT, P5: HDC): OLESTATUS {.stdcall.}
    Activate*: proc (P1: POLEOBJECT, P2: UINT, P3: BOOL, P4: BOOL, P5: HWND, P6: ptr RECT): OLESTATUS {.stdcall.}
    Execute*: proc (P1: POLEOBJECT, P2: HGLOBAL, P3: UINT): OLESTATUS {.stdcall.}
    Close*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    Update*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    Reconnect*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    ObjectConvert*: proc (P1: POLEOBJECT, P2: OLE_LPCSTR, P3: LPOLECLIENT, P4: LHCLIENTDOC, P5: OLE_LPCSTR, P6: POLEOBJECT): OLESTATUS {.stdcall.}
    GetLinkUpdateOptions*: proc (P1: POLEOBJECT, P2: ptr OLEOPT_UPDATE): OLESTATUS {.stdcall.}
    SetLinkUpdateOptions*: proc (P1: POLEOBJECT, P2: OLEOPT_UPDATE): OLESTATUS {.stdcall.}
    Rename*: proc (P1: POLEOBJECT, P2: OLE_LPCSTR): OLESTATUS {.stdcall.}
    QueryName*: proc (P1: POLEOBJECT, P2: LPSTR, P3: ptr UINT): OLESTATUS {.stdcall.}
    QueryType*: proc (P1: POLEOBJECT, P2: ptr LONG): OLESTATUS {.stdcall.}
    QueryBounds*: proc (P1: POLEOBJECT, P2: ptr RECT): OLESTATUS {.stdcall.}
    QuerySize*: proc (P1: POLEOBJECT, P2: ptr DWORD): OLESTATUS {.stdcall.}
    QueryOpen*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    QueryOutOfDate*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    QueryReleaseStatus*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    QueryReleaseError*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    QueryReleaseMethod*: proc (P1: POLEOBJECT): OLE_RELEASE_METHOD {.stdcall.}
    RequestData*: proc (P1: POLEOBJECT, P2: OLECLIPFORMAT): OLESTATUS {.stdcall.}
    ObjectLong*: proc (P1: POLEOBJECT, P2: UINT, P3: ptr LONG): OLESTATUS {.stdcall.}
    ChangeData*: proc (P1: POLEOBJECT, P2: HANDLE, P3: LPOLECLIENT, P4: BOOL): OLESTATUS {.stdcall.}
  LPOLEOBJECTVTBL* = ptr OLEOBJECTVTBL
  OLEOBJECT* {.final, pure.} = object
    lpvtbl*: LPOLEOBJECTVTBL
  POLEOBJECT* = ptr OLEOBJECT # renamed from LPOLEOBJECT
  OLECLIENTVTBL* {.final, pure.} = object
    CallBack*: proc (P1: LPOLECLIENT, P2: OLE_NOTIFICATION, P3: POLEOBJECT): int {.stdcall.}
  LPOLECLIENTVTBL* = ptr OLECLIENTVTBL
  OLECLIENT* {.final, pure.} = object
    lpvtbl*: LPOLECLIENTVTBL
  LPOLECLIENT* = ptr OLECLIENT
  OLESTREAMVTBL* {.final, pure.} = object
     Get*: proc (P1: LPOLESTREAM, P2: pointer, P3: DWORD): DWORD {.stdcall.}
     Put*: proc (P1: LPOLESTREAM, P2: pointer, P3: DWORD): DWORD {.stdcall.}
  LPOLESTREAMVTBL* = ptr OLESTREAMVTBL
  OLESTREAM* {.final, pure.} = object
    lpstbl*: LPOLESTREAMVTBL
  LPOLESTREAM* = ptr OLESTREAM
  OLE_SERVER_USE* = int32
  OLESERVERVTBL* {.final, pure.} = object
    Open*: proc (P1: LPOLESERVER, P2: LHSERVERDOC, P3: OLE_LPCSTR, P4: ptr LPOLESERVERDOC): OLESTATUS {.stdcall.}
    Create*: proc (P1: LPOLESERVER, P2: LHSERVERDOC, P3: OLE_LPCSTR, P4: OLE_LPCSTR, P5: ptr LPOLESERVERDOC): OLESTATUS {.stdcall.}
    CreateFromTemplate*: proc (P1: LPOLESERVER, P2: LHSERVERDOC, P3: OLE_LPCSTR, P4: OLE_LPCSTR, P5: OLE_LPCSTR, P6: ptr LPOLESERVERDOC): OLESTATUS {.stdcall.}
    Edit*: proc (P1: LPOLESERVER, P2: LHSERVERDOC, P3: OLE_LPCSTR, P4: OLE_LPCSTR, P5: ptr LPOLESERVERDOC): OLESTATUS {.stdcall.}
    Exit*: proc (P1: LPOLESERVER): OLESTATUS {.stdcall.}
    Release*: proc (P1: LPOLESERVER): OLESTATUS {.stdcall.}
    Execute*: proc (P1: LPOLESERVER, P2: HGLOBAL): OLESTATUS {.stdcall.}
  LPOLESERVERVTBL* = ptr OLESERVERVTBL
  OLESERVER* {.final, pure.} = object
    lpvtbl*: LPOLESERVERVTBL
  LPOLESERVER* = ptr OLESERVER
  OLESERVERDOCVTBL* {.final, pure.} = object
    Save*: proc (P1: LPOLESERVERDOC): OLESTATUS {.stdcall.}
    Close*: proc (P1: LPOLESERVERDOC): OLESTATUS {.stdcall.}
    SetHostNames*: proc (P1: LPOLESERVERDOC, P2: OLE_LPCSTR, P3: OLE_LPCSTR): OLESTATUS {.stdcall.}
    SetDocDimensions*: proc (P1: LPOLESERVERDOC, P2: ptr RECT): OLESTATUS {.stdcall.}
    GetObject*: proc (P1: LPOLESERVERDOC, P2: OLE_LPCSTR, P3: ptr POLEOBJECT, P4: LPOLECLIENT): OLESTATUS {.stdcall.}
    Release*: proc (P1: LPOLESERVERDOC): OLESTATUS {.stdcall.}
    SetColorScheme*: proc (P1: LPOLESERVERDOC, P2: ptr LOGPALETTE): OLESTATUS {.stdcall.}
    Execute*: proc (P1: LPOLESERVERDOC, P2: HGLOBAL): OLESTATUS {.stdcall.}
  LPOLESERVERDOCVTBL* = ptr OLESERVERDOCVTBL
  OLESERVERDOC* {.final, pure.} = object
    lpvtbl*: LPOLESERVERDOCVTBL
  LPOLESERVERDOC* = ptr OLESERVERDOC

proc OleDelete*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRelease*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleSaveToStream*(P1: POLEOBJECT, P2: LPOLESTREAM): OLESTATUS {.winapi, dynlib: "ole32", importc.}
proc OleEqual*(P1: POLEOBJECT, P2: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleCopyToClipboard*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleSetHostNames*(P1: POLEOBJECT, P2: LPCSTR, P3: LPCSTR): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleSetTargetDevice*(P1: POLEOBJECT, P2: HGLOBAL): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleSetBounds*(P1: POLEOBJECT, P2: LPCRECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleSetColorScheme*(P1: POLEOBJECT, P2: ptr LOGPALETTE): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQueryBounds*(P1: POLEOBJECT, P2: ptr RECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQuerySize*(P1: POLEOBJECT, P2: ptr DWORD): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleDraw*(P1: POLEOBJECT, P2: HDC, P3: LPCRECT, P4: LPCRECT, P5: HDC): OLESTATUS {.winapi, dynlib: "ole32", importc.}
proc OleQueryOpen*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleActivate*(P1: POLEOBJECT, P2: UINT, P3: BOOL, P4: BOOL, P5: HWND, P6: LPCRECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleExecute*(P1: POLEOBJECT, P2: HGLOBAL, P3: UINT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleClose*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleUpdate*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleReconnect*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleGetLinkUpdateOptions*(P1: POLEOBJECT, P2: ptr OLEOPT_UPDATE): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleSetLinkUpdateOptions*(P1: POLEOBJECT, P2: OLEOPT_UPDATE): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQueryProtocol*(P1: POLEOBJECT, P2: LPCSTR): pointer {.winapi, dynlib: "olecli32", importc.}
proc OleQueryReleaseStatus*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQueryReleaseError*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQueryReleaseMethod*(P1: POLEOBJECT): OLE_RELEASE_METHOD {.winapi, dynlib: "olecli32", importc.}
proc OleQueryType*(P1: POLEOBJECT, P2: ptr LONG): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQueryClientVersion*(): DWORD {.winapi, dynlib: "olecli32", importc.}
proc OleQueryServerVersion*(): DWORD {.winapi, dynlib: "olecli32", importc.}
proc OleEnumFormats*(P1: POLEOBJECT, P2: OLECLIPFORMAT): OLECLIPFORMAT {.winapi, dynlib: "olecli32", importc.}
proc OleGetData*(P1: POLEOBJECT, P2: OLECLIPFORMAT, P3: ptr HANDLE): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleSetData*(P1: POLEOBJECT, P2: OLECLIPFORMAT, P3: HANDLE): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQueryOutOfDate*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRequestData*(P1: POLEOBJECT, P2: OLECLIPFORMAT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQueryLinkFromClip*(P1: LPCSTR, P2: OLEOPT_RENDER, P3: OLECLIPFORMAT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQueryCreateFromClip*(P1: LPCSTR, P2: OLEOPT_RENDER, P3: OLECLIPFORMAT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleCreateFromClip*(P1: LPCSTR, P2: LPOLECLIENT, P3: LHCLIENTDOC, P4: LPCSTR, P5: ptr POLEOBJECT, P6: OLEOPT_RENDER, P7: OLECLIPFORMAT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleCreateLinkFromClip*(P1: LPCSTR, P2: LPOLECLIENT, P3: LHCLIENTDOC, P4: LPCSTR, P5: ptr POLEOBJECT, P6: OLEOPT_RENDER, P7: OLECLIPFORMAT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleCreateFromFile*(P1: LPCSTR, P2: LPOLECLIENT, P3: LPCSTR, P4: LPCSTR, P5: LHCLIENTDOC, P6: LPCSTR, P7: ptr POLEOBJECT, P8: OLEOPT_RENDER, P9: OLECLIPFORMAT): OLESTATUS {.winapi, dynlib: "ole32", importc.}
proc OleCreateLinkFromFile*(P1: LPCSTR, P2: LPOLECLIENT, P3: LPCSTR, P4: LPCSTR, P5: LPCSTR, P6: LHCLIENTDOC, P7: LPCSTR, P8: ptr POLEOBJECT, P9: OLEOPT_RENDER, P10: OLECLIPFORMAT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleLoadFromStream*(P1: LPOLESTREAM, P2: LPCSTR, P3: LPOLECLIENT, P4: LHCLIENTDOC, P5: LPCSTR, P6: ptr POLEOBJECT): OLESTATUS {.winapi, dynlib: "ole32", importc.}
proc OleCreate*(P1: LPCSTR, P2: LPOLECLIENT, P3: LPCSTR, P4: LHCLIENTDOC, P5: LPCSTR, P6: ptr POLEOBJECT, P7: OLEOPT_RENDER, P8: OLECLIPFORMAT): OLESTATUS {.winapi, dynlib: "ole32", importc.}
proc OleCreateInvisible*(P1: LPCSTR, P2: LPOLECLIENT, P3: LPCSTR, P4: LHCLIENTDOC, P5: LPCSTR, P6: ptr POLEOBJECT, P7: OLEOPT_RENDER, P8: OLECLIPFORMAT, P9: BOOL): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleCreateFromTemplate*(P1: LPCSTR, P2: LPOLECLIENT, P3: LPCSTR, P4: LHCLIENTDOC, P5: LPCSTR, P6: ptr POLEOBJECT, P7: OLEOPT_RENDER, P8: OLECLIPFORMAT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleClone*(P1: POLEOBJECT, P2: LPOLECLIENT, P3: LHCLIENTDOC, P4: LPCSTR, P5: ptr POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleCopyFromLink*(P1: POLEOBJECT, P2: LPCSTR, P3: LPOLECLIENT, P4: LHCLIENTDOC, P5: LPCSTR, P6: ptr POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleObjectConvert*(P1: POLEOBJECT, P2: LPCSTR, P3: LPOLECLIENT, P4: LHCLIENTDOC, P5: LPCSTR, P6: ptr POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRename*(P1: POLEOBJECT, P2: LPCSTR): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQueryName*(P1: POLEOBJECT, P2: LPSTR, P3: ptr UINT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRevokeObject*(P1: LPOLECLIENT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleIsDcMeta*(P1: HDC): BOOL {.winapi, dynlib: "olecli32", importc.}
proc OleRegisterClientDoc*(P1: LPCSTR, P2: LPCSTR, P3: LONG, P4: ptr LHCLIENTDOC): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRevokeClientDoc*(P1: LHCLIENTDOC): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRenameClientDoc*(P1: LHCLIENTDOC, P2: LPCSTR): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRevertClientDoc*(P1: LHCLIENTDOC): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleSavedClientDoc*(P1: LHCLIENTDOC): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleEnumObjects*(P1: LHCLIENTDOC, P2: ptr POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRegisterServer*(P1: LPCSTR, P2: LPOLESERVER, P3: ptr LHSERVER, P4: HINSTANCE, P5: OLE_SERVER_USE): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRevokeServer*(P1: LHSERVER): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleBlockServer*(P1: LHSERVER): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleUnblockServer*(P1: LHSERVER, P2: ptr BOOL): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleLockServer*(P1: POLEOBJECT, P2: ptr LHSERVER): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleUnlockServer*(P1: LHSERVER): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRegisterServerDoc*(P1: LHSERVER, P2: LPCSTR, P3: LPOLESERVERDOC, P4: ptr LHSERVERDOC): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRevokeServerDoc*(P1: LHSERVERDOC): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRenameServerDoc*(P1: LHSERVERDOC, P2: LPCSTR): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRevertServerDoc*(P1: LHSERVERDOC): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleSavedServerDoc*(P1: LHSERVERDOC): OLESTATUS {.winapi, dynlib: "olecli32", importc.}

# objext/ole2.nim

const
  E_DRAW* = VIEW_E_DRAW
  DATA_E_FORMATETC* = DV_E_FORMATETC
  OLEIVERB_PRIMARY* = 0
  OLEIVERB_SHOW* = -1
  OLEIVERB_OPEN* = -2
  OLEIVERB_HIDE* = -3
  OLEIVERB_UIACTIVATE* = -4
  OLEIVERB_INPLACEACTIVATE* = -5
  OLEIVERB_DISCARDUNDOSTATE* = -6
  EMBDHLP_INPROC_HANDLER* = 0x0000
  EMBDHLP_INPROC_SERVER* = 0x0001
  EMBDHLP_CREATENOW* = 0x00000000
  EMBDHLP_DELAYCREATE* = 0x00010000

# proc CreateDataAdviseHolder*(P1: ptr LPDATAADVISEHOLDER): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleBuildVersion*(): DWORD {.winapi, dynlib: "ole32", importc.}
proc ReadClassStg*(P1: LPSTORAGE, P2: ptr CLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc WriteClassStg*(P1: LPSTORAGE, P2: REFCLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc ReadClassStm*(P1: LPSTREAM, P2: ptr CLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc WriteClassStm*(P1: LPSTREAM, P2: REFCLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc WriteFmtUserTypeStg*(P1: LPSTORAGE, P2: CLIPFORMAT, P3: LPOLESTR): HRESULT {.winapi, dynlib: "ole32", importc.}
proc ReadFmtUserTypeStg*(P1: LPSTORAGE, P2: ptr CLIPFORMAT, P3: ptr LPOLESTR): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleInitialize*(P1: PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleUninitialize*(): void {.winapi, dynlib: "ole32", importc.}
proc OleQueryLinkFromData*(P1: LPDATAOBJECT): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleQueryCreateFromData*(P1: LPDATAOBJECT): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleCreate*(P1: REFCLSID, P2: REFIID, P3: DWORD, P4: LPFORMATETC, P5: LPOLECLIENTSITE, P6: LPSTORAGE, P7: ptr PVOID): HRESULT {.winapi, dynlib: "olecli32", importc.}
proc OleCreateFromData*(P1: LPDATAOBJECT, P2: REFIID, P3: DWORD, P4: LPFORMATETC, P5: LPOLECLIENTSITE, P6: LPSTORAGE, P7: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleCreateLinkFromData*(P1: LPDATAOBJECT, P2: REFIID, P3: DWORD, P4: LPFORMATETC, P5: LPOLECLIENTSITE, P6: LPSTORAGE, P7: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleCreateStaticFromData*(P1: LPDATAOBJECT, P2: REFIID, P3: DWORD, P4: LPFORMATETC, P5: LPOLECLIENTSITE, P6: LPSTORAGE, P7: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleCreateLink*(P1: LPMONIKER, P2: REFIID, P3: DWORD, P4: LPFORMATETC, P5: LPOLECLIENTSITE, P6: LPSTORAGE, P7: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleCreateLinkToFile*(P1: LPCOLESTR, P2: REFIID, P3: DWORD, P4: LPFORMATETC, P5: LPOLECLIENTSITE, P6: LPSTORAGE, P7: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleCreateFromFile*(P1: REFCLSID, P2: LPCOLESTR, P3: REFIID, P4: DWORD, P5: LPFORMATETC, P6: LPOLECLIENTSITE, P7: LPSTORAGE, P8: ptr PVOID): HRESULT {.winapi, dynlib: "olecli32", importc.}
proc OleLoad*(P1: LPSTORAGE, P2: REFIID, P3: LPOLECLIENTSITE, P4: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleSave*(P1: LPPERSISTSTORAGE, P2: LPSTORAGE, P3: BOOL): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleLoadFromStream*(P1: LPSTREAM, P2: REFIID, P3: ptr PVOID): HRESULT {.winapi, dynlib: "olecli32", importc.}
proc OleSaveToStream*(P1: LPPERSISTSTREAM, P2: LPSTREAM): HRESULT {.winapi, dynlib: "olecli32", importc.}
proc OleSetContainedObject*(P1: LPUNKNOWN, P2: BOOL): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleNoteObjectVisible*(P1: LPUNKNOWN, P2: BOOL): HRESULT {.winapi, dynlib: "ole32", importc.}
proc RegisterDragDrop*(P1: HWND, P2: LPDROPTARGET): HRESULT {.winapi, dynlib: "ole32", importc.}
proc RevokeDragDrop*(P1: HWND): HRESULT {.winapi, dynlib: "ole32", importc.}
proc DoDragDrop*(P1: LPDATAOBJECT, P2: LPDROPSOURCE, P3: DWORD, P4: PDWORD): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleSetClipboard*(P1: LPDATAOBJECT): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleGetClipboard*(P1: ptr LPDATAOBJECT): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleFlushClipboard*(): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleIsCurrentClipboard*(P1: LPDATAOBJECT): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleCreateMenuDescriptor*(P1: HMENU, P2: LPOLEMENUGROUPWIDTHS): HOLEMENU {.winapi, dynlib: "ole32", importc.}
proc OleSetMenuDescriptor*(P1: HOLEMENU, P2: HWND, P3: HWND, P4: LPOLEINPLACEFRAME, P5: LPOLEINPLACEACTIVEOBJECT): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleDestroyMenuDescriptor*(P1: HOLEMENU): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleTranslateAccelerator*(P1: LPOLEINPLACEFRAME, P2: LPOLEINPLACEFRAMEINFO, P3: LPMSG): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleDuplicateData*(P1: HANDLE, P2: CLIPFORMAT, P3: UINT): HANDLE {.winapi, dynlib: "ole32", importc.}
proc OleDraw*(P1: LPUNKNOWN, P2: DWORD, P3: HDC, P4: LPCRECT): HRESULT {.winapi, dynlib: "olecli32", importc.}
proc OleRun*(P1: LPUNKNOWN): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleIsRunning*(P1: LPOLEOBJECT): BOOL {.winapi, dynlib: "ole32", importc.}
proc OleLockRunning*(P1: LPUNKNOWN, P2: BOOL, P3: BOOL): HRESULT {.winapi, dynlib: "ole32", importc.}
proc ReleaseStgMedium*(P1: LPSTGMEDIUM): void {.winapi, dynlib: "ole32", importc.}
proc CreateOleAdviseHolder*(P1: ptr LPOLEADVISEHOLDER): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleCreateDefaultHandler*(P1: REFCLSID, P2: LPUNKNOWN, P3: REFIID, P4: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleCreateEmbeddingHelper*(P1: REFCLSID, P2: LPUNKNOWN, P3: DWORD, P4: LPCLASSFACTORY, P5: REFIID, P6: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc IsAccelerator*(P1: HACCEL, P2: int32, P3: LPMSG, P4: ptr WORD): BOOL {.winapi, dynlib: "ole32", importc.}
proc OleGetIconOfFile*(P1: LPOLESTR, P2: BOOL): HGLOBAL {.winapi, dynlib: "ole32", importc.}
proc OleGetIconOfClass*(P1: REFCLSID, P2: LPOLESTR, P3: BOOL): HGLOBAL {.winapi, dynlib: "ole32", importc.}
proc OleMetafilePictFromIconAndLabel*(P1: HICON, P2: LPOLESTR, P3: LPOLESTR, P4: UINT): HGLOBAL {.winapi, dynlib: "ole32", importc.}
proc OleRegGetUserType*(P1: REFCLSID, P2: DWORD, P3: ptr LPOLESTR): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleRegGetMiscStatus*(P1: REFCLSID, P2: DWORD, P3: ptr DWORD): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleRegEnumFormatEtc*(P1: REFCLSID, P2: DWORD, P3: ptr LPENUMFORMATETC): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleRegEnumVerbs*(P1: REFCLSID, P2: ptr LPENUMOLEVERB): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleConvertOLESTREAMToIStorage*(P1: LPOLESTREAM, P2: LPSTORAGE, P3: ptr DVTARGETDEVICE): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleConvertIStorageToOLESTREAM*(P1: LPSTORAGE, P2: LPOLESTREAM): HRESULT {.winapi, dynlib: "ole32", importc.}
proc GetHGlobalFromILockBytes*(P1: LPLOCKBYTES, P2: ptr HGLOBAL): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CreateILockBytesOnHGlobal*(P1: HGLOBAL, P2: BOOL, P3: ptr LPLOCKBYTES): HRESULT {.winapi, dynlib: "ole32", importc.}
proc GetHGlobalFromStream*(P1: LPSTREAM, P2: ptr HGLOBAL): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CreateStreamOnHGlobal*(P1: HGLOBAL, P2: BOOL, P3: ptr LPSTREAM): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleDoAutoConvert*(P1: LPSTORAGE, P2: LPCLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleGetAutoConvert*(P1: REFCLSID, P2: LPCLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleSetAutoConvert*(P1: REFCLSID, P2: REFCLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc GetConvertStg*(P1: LPSTORAGE): HRESULT {.winapi, dynlib: "ole32", importc.}
proc SetConvertStg*(P1: LPSTORAGE, P2: BOOL): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleConvertIStorageToOLESTREAMEx*(P1: LPSTORAGE, P2: CLIPFORMAT, P3: LONG, P4: LONG, P5: DWORD, P6: LPSTGMEDIUM, P7: LPOLESTREAM): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleConvertOLESTREAMToIStorageEx*(P1: LPOLESTREAM, P2: LPSTORAGE, P3: ptr CLIPFORMAT, P4: ptr LONG, P5: ptr LONG, P6: ptr DWORD, P7: LPSTGMEDIUM): HRESULT {.winapi, dynlib: "ole32", importc.}

# objext/oleacc.nim
const
  # SELFLAG* = enum
  SELFLAG_NONE* = 0
  SELFLAG_TAKEFOCUS* = 1
  SELFLAG_TAKESELECTION* = 2
  SELFLAG_EXTENDSELECTION* = 4
  SELFLAG_ADDSELECTION* = 8
  SELFLAG_REMOVESELECTION* = 16

const
  DISPID_ACC_PARENT* = -5000
  DISPID_ACC_CHILDCOUNT* = -5001
  DISPID_ACC_CHILD* = -5002
  DISPID_ACC_NAME* = -5003
  DISPID_ACC_VALUE* = -5004
  DISPID_ACC_DESCRIPTION* = -5005
  DISPID_ACC_ROLE* = -5006
  DISPID_ACC_STATE* = -5007
  DISPID_ACC_HELP* = -5008
  DISPID_ACC_HELPTOPIC* = -5009
  DISPID_ACC_KEYBOARDSHORTCUT* = -5010
  DISPID_ACC_FOCUS* = -5011
  DISPID_ACC_SELECTION* = -5012
  DISPID_ACC_DEFAULTACTION* = -5013
  DISPID_ACC_SELECT* = -5014
  DISPID_ACC_LOCATION* = -5015
  DISPID_ACC_NAVIGATE* = -5016
  DISPID_ACC_HITTEST* = -5017
  DISPID_ACC_DODEFAULTACTION* = -5018
  NAVDIR_UP* = 1
  NAVDIR_DOWN* = 2
  NAVDIR_LEFT* = 3
  NAVDIR_RIGHT* = 4
  NAVDIR_NEXT* = 5
  NAVDIR_PREVIOUS* = 6
  NAVDIR_FIRSTCHILD* = 7
  NAVDIR_LASTCHILD* = 8
  ROLE_SYSTEM_TITLEBAR* = 1
  ROLE_SYSTEM_MENUBAR* = 2
  ROLE_SYSTEM_SCROLLBAR* = 3
  ROLE_SYSTEM_GRIP* = 4
  ROLE_SYSTEM_SOUND* = 5
  ROLE_SYSTEM_CURSOR* = 6
  ROLE_SYSTEM_CARET* = 7
  ROLE_SYSTEM_ALERT* = 8
  ROLE_SYSTEM_WINDOW* = 9
  ROLE_SYSTEM_CLIENT* = 10
  ROLE_SYSTEM_MENUPOPUP* = 11
  ROLE_SYSTEM_MENUITEM* = 12
  ROLE_SYSTEM_TOOLTIP* = 13
  ROLE_SYSTEM_APPLICATION* = 14
  ROLE_SYSTEM_DOCUMENT* = 15
  ROLE_SYSTEM_PANE* = 16
  ROLE_SYSTEM_CHART* = 17
  ROLE_SYSTEM_DIALOG* = 18
  ROLE_SYSTEM_BORDER* = 19
  ROLE_SYSTEM_GROUPING* = 20
  ROLE_SYSTEM_SEPARATOR* = 21
  ROLE_SYSTEM_TOOLBAR* = 22
  ROLE_SYSTEM_STATUSBAR* = 23
  ROLE_SYSTEM_TABLE* = 24
  ROLE_SYSTEM_COLUMNHEADER* = 25
  ROLE_SYSTEM_ROWHEADER* = 26
  ROLE_SYSTEM_COLUMN* = 27
  ROLE_SYSTEM_ROW* = 28
  ROLE_SYSTEM_CELL* = 29
  ROLE_SYSTEM_LINK* = 30
  ROLE_SYSTEM_HELPBALLOON* = 31
  ROLE_SYSTEM_CHARACTER* = 32
  ROLE_SYSTEM_LIST* = 33
  ROLE_SYSTEM_LISTITEM* = 34
  ROLE_SYSTEM_OUTLINE* = 35
  ROLE_SYSTEM_OUTLINEITEM* = 36
  ROLE_SYSTEM_PAGETAB* = 37
  ROLE_SYSTEM_PROPERTYPAGE* = 38
  ROLE_SYSTEM_INDICATOR* = 39
  ROLE_SYSTEM_GRAPHIC* = 40
  ROLE_SYSTEM_STATICTEXT* = 41
  ROLE_SYSTEM_TEXT* = 42
  ROLE_SYSTEM_PUSHBUTTON* = 43
  ROLE_SYSTEM_CHECKBUTTON* = 44
  ROLE_SYSTEM_RADIOBUTTON* = 45
  ROLE_SYSTEM_COMBOBOX* = 46
  ROLE_SYSTEM_DROPLIST* = 47
  ROLE_SYSTEM_PROGRESSBAR* = 48
  ROLE_SYSTEM_DIAL* = 49
  ROLE_SYSTEM_HOTKEYFIELD* = 50
  ROLE_SYSTEM_SLIDER* = 51
  ROLE_SYSTEM_SPINBUTTON* = 52
  ROLE_SYSTEM_DIAGRAM* = 53
  ROLE_SYSTEM_ANIMATION* = 54
  ROLE_SYSTEM_EQUATION* = 55
  ROLE_SYSTEM_BUTTONDROPDOWN* = 56
  ROLE_SYSTEM_BUTTONMENU* = 57
  ROLE_SYSTEM_BUTTONDROPDOWNGRID* = 58
  ROLE_SYSTEM_WHITESPACE* = 59
  ROLE_SYSTEM_PAGETABLIST* = 60
  ROLE_SYSTEM_CLOCK* = 61
  STATE_SYSTEM_UNAVAILABLE* = 0x00000001
  STATE_SYSTEM_SELECTED* = 0x00000002
  STATE_SYSTEM_FOCUSED* = 0x00000004
  STATE_SYSTEM_PRESSED* = 0x00000008
  STATE_SYSTEM_CHECKED* = 0x00000010
  STATE_SYSTEM_MIXED* = 0x00000020
  STATE_SYSTEM_READONLY* = 0x00000040
  STATE_SYSTEM_HOTTRACKED* = 0x00000080
  STATE_SYSTEM_DEFAULT* = 0x00000100
  STATE_SYSTEM_EXPANDED* = 0x00000200
  STATE_SYSTEM_COLLAPSED* = 0x00000400
  STATE_SYSTEM_BUSY* = 0x00000800
  STATE_SYSTEM_FLOATING* = 0x00001000
  STATE_SYSTEM_MARQUEED* = 0x00002000
  STATE_SYSTEM_ANIMATED* = 0x00004000
  STATE_SYSTEM_INVISIBLE* = 0x00008000
  STATE_SYSTEM_OFFSCREEN* = 0x00010000
  STATE_SYSTEM_SIZEABLE* = 0x00020000
  STATE_SYSTEM_MOVEABLE* = 0x00040000
  STATE_SYSTEM_SELFVOICING* = 0x00080000
  STATE_SYSTEM_FOCUSABLE* = 0x00100000
  STATE_SYSTEM_SELECTABLE* = 0x00200000
  STATE_SYSTEM_LINKED* = 0x00400000
  STATE_SYSTEM_TRAVERSED* = 0x00800000
  STATE_SYSTEM_MULTISELECTABLE* = 0x01000000
  STATE_SYSTEM_EXTSELECTABLE* = 0x02000000
  STATE_SYSTEM_ALERT_LOW* = 0x04000000
  STATE_SYSTEM_ALERT_MEDIUM* = 0x08000000
  STATE_SYSTEM_ALERT_HIGH* = 0x10000000
  STATE_SYSTEM_VALID* = 0x1fffffff

type
  SELFLAG* = int32

const
  SELFLAG_VALID* = 0x0000001F

type
  IAccessible* {.pure.} = object
    lpVtbl*: ptr IAccessibleVtbl
  IAccessibleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_accParent*: proc(self: ptr IAccessible, P1: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_accChildCount*: proc(self: ptr IAccessible, P1: ptr int32): HRESULT {.stdcall.}
    get_accChild*: proc(self: ptr IAccessible, P1: VARIANT, P2: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_accName*: proc(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.stdcall.}
    get_accValue*: proc(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.stdcall.}
    get_accDescription*: proc(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.stdcall.}
    get_accRole*: proc(self: ptr IAccessible, P1: VARIANT, P2: ptr VARIANT): HRESULT {.stdcall.}
    get_accState*: proc(self: ptr IAccessible, P1: VARIANT, P2: ptr VARIANT): HRESULT {.stdcall.}
    get_accHelp*: proc(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.stdcall.}
    get_accHelpTopic*: proc(self: ptr IAccessible, P1: ptr BSTR, P2: VARIANT, P3: ptr int32): HRESULT {.stdcall.}
    get_accKeyboardShortcut*: proc(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.stdcall.}
    get_accFocus*: proc(self: ptr IAccessible, P1: ptr VARIANT): HRESULT {.stdcall.}
    get_accSelection*: proc(self: ptr IAccessible, P1: ptr VARIANT): HRESULT {.stdcall.}
    get_accDefaultAction*: proc(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.stdcall.}
    accSelect*: proc(self: ptr IAccessible, P1: int32, P2: VARIANT): HRESULT {.stdcall.}
    accLocation*: proc(self: ptr IAccessible, P1: ptr int32, P2: ptr int32, P3: ptr int32, P4: ptr int32, P5: VARIANT): HRESULT {.stdcall.}
    accNavigate*: proc(self: ptr IAccessible, P1: int32, P2: VARIANT, P3: ptr VARIANT): HRESULT {.stdcall.}
    accHitTest*: proc(self: ptr IAccessible, P1: int32, P2: int32, P3: ptr VARIANT): HRESULT {.stdcall.}
    accDoDefaultAction*: proc(self: ptr IAccessible, P1: VARIANT): HRESULT {.stdcall.}
    put_accName*: proc(self: ptr IAccessible, P1: VARIANT, P2: BSTR): HRESULT {.stdcall.}
    put_accValue*: proc(self: ptr IAccessible, P1: VARIANT, P2: BSTR): HRESULT {.stdcall.}
  LPACCESSIBLE* = ptr IAccessible

proc AccessibleChildren*(P1: ptr IAccessible, P2: LONG, P3: LONG, P4: ptr VARIANT, P5: ptr LONG): HRESULT {.winapi, dynlib: "oleacc", importc.}
proc AccessibleObjectFromEvent*(P1: HWND, P2: DWORD, P3: DWORD, P4: ptr IAccessible, P5: ptr VARIANT): HRESULT {.winapi, dynlib: "oleacc", importc.}
proc AccessibleObjectFromPoint*(P1: POINT, P2: ptr ptr IAccessible, P3: ptr VARIANT): HRESULT {.winapi, dynlib: "oleacc", importc.}
proc AccessibleObjectFromWindow*(P1: HWND, P2: DWORD, P3: REFIID, P4: ptr pointer): HRESULT {.winapi, dynlib: "oleacc", importc.}
proc CreateStdAccessibleObject*(P1: HWND, P2: LONG, P3: REFIID, P4: ptr pointer): HRESULT {.winapi, dynlib: "oleacc", importc.}
proc CreateStdAccessibleProxyA*(P1: HWND, P2: LPCSTR, P3: LONG, P4: REFIID, P5: ptr pointer): HRESULT {.winapi, dynlib: "oleacc", importc.}
proc CreateStdAccessibleProxyW*(P1: HWND, P2: LPCWSTR, P3: LONG, P4: REFIID, P5: ptr pointer): HRESULT {.winapi, dynlib: "oleacc", importc.}
proc GetOleaccVersionInfo*(P1: ptr DWORD, P2: ptr DWORD): void {.winapi, dynlib: "oleacc", importc.}
proc GetRoleTextA*(P1: DWORD, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "oleacc", importc.}
proc GetRoleTextW*(P1: DWORD, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "oleacc", importc.}
proc GetStateTextA*(P1: DWORD, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "oleacc", importc.}
proc GetStateTextW*(P1: DWORD, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "oleacc", importc.}
proc LresultFromObject*(P1: REFIID, P2: WPARAM, P3: LPUNKNOWN): LRESULT {.winapi, dynlib: "oleacc", importc.}
proc ObjectFromLresult*(P1: LRESULT, P2: REFIID, P3: WPARAM, P4: ptr pointer): HRESULT {.winapi, dynlib: "oleacc", importc.}
proc WindowFromAccessibleObject*(P1: ptr IAccessible, P2: ptr HWND): HRESULT {.winapi, dynlib: "oleacc", importc.}

when not defined(winansi):
  proc CreateStdAccessibleProxy*(P1: HWND, P2: LPCWSTR, P3: LONG, P4: REFIID, P5: ptr pointer): HRESULT {.winapi, dynlib: "oleacc", importc: "CreateStdAccessibleProxyW".}
  proc GetRoleText*(P1: DWORD, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "oleacc", importc: "GetRoleTextW".}
  proc GetStateText*(P1: DWORD, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "oleacc", importc: "GetStateTextW".}

else:
  proc CreateStdAccessibleProxy*(P1: HWND, P2: LPCSTR, P3: LONG, P4: REFIID, P5: ptr pointer): HRESULT {.winapi, dynlib: "oleacc", importc: "CreateStdAccessibleProxyA".}
  proc GetRoleText*(P1: DWORD, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "oleacc", importc: "GetRoleTextA".}
  proc GetStateText*(P1: DWORD, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "oleacc", importc: "GetStateTextA".}

converter winim_converter_IAccessible*(x: ptr IAccessible): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IAccessible*(x: ptr IAccessible): ptr IDispatch = cast[ptr IDispatch](x)
proc get_accParent*(self: ptr IAccessible, P1: ptr ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_accParent(self, P1)
proc get_accChildCount*(self: ptr IAccessible, P1: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.get_accChildCount(self, P1)
proc get_accChild*(self: ptr IAccessible, P1: VARIANT, P2: ptr ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_accChild(self, P1, P2)
proc get_accName*(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_accName(self, P1, P2)
proc get_accValue*(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_accValue(self, P1, P2)
proc get_accDescription*(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_accDescription(self, P1, P2)
proc get_accRole*(self: ptr IAccessible, P1: VARIANT, P2: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_accRole(self, P1, P2)
proc get_accState*(self: ptr IAccessible, P1: VARIANT, P2: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_accState(self, P1, P2)
proc get_accHelp*(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_accHelp(self, P1, P2)
proc get_accHelpTopic*(self: ptr IAccessible, P1: ptr BSTR, P2: VARIANT, P3: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.get_accHelpTopic(self, P1, P2, P3)
proc get_accKeyboardShortcut*(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_accKeyboardShortcut(self, P1, P2)
proc get_accFocus*(self: ptr IAccessible, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_accFocus(self, P1)
proc get_accSelection*(self: ptr IAccessible, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_accSelection(self, P1)
proc get_accDefaultAction*(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_accDefaultAction(self, P1, P2)
proc accSelect*(self: ptr IAccessible, P1: int32, P2: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.accSelect(self, P1, P2)
proc accLocation*(self: ptr IAccessible, P1: ptr int32, P2: ptr int32, P3: ptr int32, P4: ptr int32, P5: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.accLocation(self, P1, P2, P3, P4, P5)
proc accNavigate*(self: ptr IAccessible, P1: int32, P2: VARIANT, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.accNavigate(self, P1, P2, P3)
proc accHitTest*(self: ptr IAccessible, P1: int32, P2: int32, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.accHitTest(self, P1, P2, P3)
proc accDoDefaultAction*(self: ptr IAccessible, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.accDoDefaultAction(self, P1)
proc put_accName*(self: ptr IAccessible, P1: VARIANT, P2: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_accName(self, P1, P2)
proc put_accValue*(self: ptr IAccessible, P1: VARIANT, P2: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_accValue(self, P1, P2)

# objext/oleauto.nim

const
  STDOLE_MAJORVERNUM* = 1
  STDOLE_MINORVERNUM* = 0
  STDOLE_LCID* = 0
  VARIANT_NOVALUEPROP* = 0x01
  VARIANT_ALPHABOOL* = 0x02
  VARIANT_NOUSEOVERRIDE* = 0x04
  VARIANT_LOCALBOOL* = 0x08
  VAR_TIMEVALUEONLY* = 0x0001
  VAR_DATEVALUEONLY* = 0x0002
  VAR_VALIDDATE* = 0x0004
  VAR_CALENDAR_HIJRI* = 0x0008
  VAR_LOCALBOOL* = 0x0010
  VAR_FORMAT_NOSUBSTITUTE* = 0x0020
  VAR_FOURDIGITYEARS* = 0x0040
  VAR_CALENDAR_THAI* = 0x0080
  VAR_CALENDAR_GREGORIAN* = 0x0100
  MEMBERID_NIL* = DISPID_UNKNOWN
  ID_DEFAULTINST* = -2
  DISPATCH_METHOD* = 1
  DISPATCH_PROPERTYGET* = 2
  DISPATCH_PROPERTYPUT* = 4
  DISPATCH_PROPERTYPUTREF* = 8
  ACTIVEOBJECT_STRONG* = 0
  ACTIVEOBJECT_WEAK* = 1
  VARCMP_LT* = 0
  VARCMP_EQ* = 1
  VARCMP_GT* = 2
  VARCMP_NULL* = 3
  LOCALE_USE_NLS* = 0x10000000
  VARIANT_NOUSEROVERRIDE* = 0x04
  VARIANT_CALENDAR_HIJRI* = 0x08
  VARIANT_CALENDAR_THAI* = 0x20
  VARIANT_CALENDAR_GREGORIAN* = 0x40
  VARIANT_USE_NLS* = 0x80
  NUMPRS_LEADING_WHITE* = 0x00001
  NUMPRS_TRAILING_WHITE* = 0x00002
  NUMPRS_LEADING_PLUS* = 0x00004
  NUMPRS_TRAILING_PLUS* = 0x00008
  NUMPRS_LEADING_MINUS* = 0x00010
  NUMPRS_TRAILING_MINUS* = 0x00020
  NUMPRS_HEX_OCT* = 0x00040
  NUMPRS_PARENS* = 0x00080
  NUMPRS_DECIMAL* = 0x00100
  NUMPRS_THOUSANDS* = 0x00200
  NUMPRS_CURRENCY* = 0x00400
  NUMPRS_EXPONENT* = 0x00800
  NUMPRS_USE_ALL* = 0x01000
  NUMPRS_STD* = 0x01FFF
  NUMPRS_NEG* = 0x10000
  NUMPRS_INEXACT* = 0x20000
  VTBIT_I1* = 1  shl  VT_I1
  VTBIT_UI1* = 1  shl  VT_UI1
  VTBIT_I2* = 1  shl  VT_I2
  VTBIT_UI2* = 1  shl  VT_UI2
  VTBIT_I4* = 1  shl  VT_I4
  VTBIT_UI4* = 1  shl  VT_UI4
  VTBIT_I8* = 1  shl  VT_I8
  VTBIT_UI8* = 1  shl  VT_UI8
  VTBIT_R4* = 1  shl  VT_R4
  VTBIT_R8* = 1  shl  VT_R8
  VTBIT_CY* = 1  shl  VT_CY
  VTBIT_DECIMAL* = 1  shl  VT_DECIMAL
  # REGKIND* = enum
  REGKIND_DEFAULT* = 0
  REGKIND_REGISTER* = 1
  REGKIND_NONE* = 2

type
  REGKIND* = int32
  PARAMDATA* {.final, pure.} = object
    szName*: ptr OLECHAR
    vt*: VARTYPE
  LPPARAMDATA* = ptr PARAMDATA
  METHODDATA* {.final, pure.} = object
    szName*: ptr OLECHAR
    ppdata*: ptr PARAMDATA
    dispid*: DISPID
    iMeth*: UINT
    cc*: CALLCONV
    cArgs*: UINT
    wFlags*: WORD
    vtReturn*: VARTYPE
  LPMETHODDATA* = ptr METHODDATA
  INTERFACEDATA* {.final, pure.} = object
    pmethdata*: ptr METHODDATA
    cMembers*: UINT
  LPINTERFACEDATA* = ptr INTERFACEDATA
  UDATE* {.final, pure.} = object
    st*: SYSTEMTIME
    wDayOfYear*: USHORT
  NUMPARSE* {.final, pure.} = object
    cDig*: int32
    dwInFlags*: uint32
    dwOutFlags*: uint32
    cchUsed*: int32
    nBaseShift*: int32
    nPwr10*: int32
  ICreateTypeInfo* {.pure.} = object
    lpVtbl*: ptr ICreateTypeInfoVtbl
  ICreateTypeInfoVtbl* {.pure, inheritable.} = object
  ICreateTypeInfo2* {.pure.} = object
    lpVtbl*: ptr ICreateTypeInfo2Vtbl
  ICreateTypeInfo2Vtbl* {.pure, inheritable.} = object
  ICreateTypeLib* {.pure.} = object
    lpVtbl*: ptr ICreateTypeLibVtbl
  ICreateTypeLibVtbl* {.pure, inheritable.} = object
  ICreateTypeLib2* {.pure.} = object
    lpVtbl*: ptr ICreateTypeLib2Vtbl
  ICreateTypeLib2Vtbl* {.pure, inheritable.} = object
  LPCREATETYPEINFO* = ptr ICreateTypeInfo
  LPCREATETYPEINFO2* = ptr ICreateTypeInfo2
  LPCREATETYPELIB* = ptr ICreateTypeLib
  LPCREATETYPELIB2* = ptr ICreateTypeLib2

proc SysAllocString*(P1: ptr OLECHAR): BSTR {.winapi, dynlib: "oleaut32", importc.}
proc SysReAllocString*(P1: ptr BSTR, P2: ptr OLECHAR): int32 {.winapi, dynlib: "oleaut32", importc.}
proc SysAllocStringLen*(P1: ptr OLECHAR, P2: uint32): BSTR {.winapi, dynlib: "oleaut32", importc.}
proc SysReAllocStringLen*(P1: ptr BSTR, P2: ptr OLECHAR, P3: uint32): int32 {.winapi, dynlib: "oleaut32", importc.}
proc SysFreeString*(P1: BSTR): void {.winapi, dynlib: "oleaut32", importc.}
proc SysStringLen*(P1: BSTR): uint32 {.winapi, dynlib: "oleaut32", importc.}
proc SysStringByteLen*(P1: BSTR): uint32 {.winapi, dynlib: "oleaut32", importc.}
proc SysAllocStringByteLen*(P1: cstring, P2: uint32): BSTR {.winapi, dynlib: "oleaut32", importc.}
proc DosDateTimeToVariantTime*(P1: uint16, P2: uint16, P3: ptr float64): int32 {.winapi, dynlib: "oleaut32", importc.}
proc VariantTimeToDosDateTime*(P1: float64, P2: ptr uint16, P3: ptr uint16): int32 {.winapi, dynlib: "oleaut32", importc.}
proc VariantTimeToSystemTime*(P1: float64, P2: LPSYSTEMTIME): int32 {.winapi, dynlib: "oleaut32", importc.}
proc SystemTimeToVariantTime*(P1: LPSYSTEMTIME, P2: ptr float64): int32 {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromUdate*(P1: ptr UDATE, P2: ULONG, P3: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromUdateEx*(P1: ptr UDATE, P2: LCID, P3: ULONG, P4: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUdateFromDate*(P1: DATE, P2: ULONG, P3: ptr UDATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayAllocDescriptor*(P1: uint32, P2: ptr ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayAllocData*(P1: ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayCreate*(P1: VARTYPE, P2: uint32, P3: ptr SAFEARRAYBOUND): ptr SAFEARRAY {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayDestroyDescriptor*(P1: ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayDestroyData*(P1: ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayDestroy*(P1: ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayRedim*(P1: ptr SAFEARRAY, P2: ptr SAFEARRAYBOUND): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayGetDim*(P1: ptr SAFEARRAY): uint32 {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayGetElemsize*(P1: ptr SAFEARRAY): uint32 {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayGetUBound*(P1: ptr SAFEARRAY, P2: uint32, P3: ptr int32): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayGetLBound*(P1: ptr SAFEARRAY, P2: uint32, P3: ptr int32): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayLock*(P1: ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayUnlock*(P1: ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayAccessData*(P1: ptr SAFEARRAY, P2: ptr pointer): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayUnaccessData*(P1: ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayGetElement*(P1: ptr SAFEARRAY, P2: ptr int32, P3: pointer): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayPutElement*(P1: ptr SAFEARRAY, P2: ptr int32, P3: pointer): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayCopy*(P1: ptr SAFEARRAY, P2: ptr ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayPtrOfIndex*(P1: ptr SAFEARRAY, P2: ptr int32, P3: ptr pointer): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayCreateVector*(P1: VARTYPE, P2: LONG, P3: ULONG): ptr SAFEARRAY {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayCreateVectorEx*(P1: VARTYPE, P2: LONG, P3: ULONG, P4: LPVOID): ptr SAFEARRAY {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayAllocDescriptorEx*(P1: VARTYPE, P2: UINT, P3: ptr ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayGetVartype*(P1: ptr SAFEARRAY, P2: ptr VARTYPE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArraySetRecordInfo*(P1: ptr SAFEARRAY, P2: ptr IRecordInfo): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayGetRecordInfo*(P1: ptr SAFEARRAY, P2: ptr ptr IRecordInfo): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArraySetIID*(P1: ptr SAFEARRAY, P2: REFGUID): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayGetIID*(P1: ptr SAFEARRAY, P2: ptr GUID): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VariantInit*(P1: ptr VARIANTARG): void {.winapi, dynlib: "oleaut32", importc.}
proc VariantClear*(P1: ptr VARIANTARG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VariantCopy*(P1: ptr VARIANTARG, P2: ptr VARIANTARG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VariantCopyInd*(P1: ptr VARIANT, P2: ptr VARIANTARG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VariantChangeType*(P1: ptr VARIANTARG, P2: ptr VARIANTARG, P3: uint16, P4: VARTYPE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VariantChangeTypeEx*(P1: ptr VARIANTARG, P2: ptr VARIANTARG, P3: LCID, P4: uint16, P5: VARTYPE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc LHashValOfNameSysA*(P1: SYSKIND, P2: LCID, P3: cstring): ULONG {.winapi, dynlib: "oleaut32", importc.}
proc LHashValOfNameSys*(P1: SYSKIND, P2: LCID, P3: ptr OLECHAR): ULONG {.winapi, dynlib: "oleaut32", importc.}
proc LoadTypeLib*(P1: ptr OLECHAR, P2: ptr LPTYPELIB): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc LoadTypeLibEx*(P1: LPCOLESTR, P2: REGKIND, P3: ptr LPTYPELIB): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc LoadRegTypeLib*(P1: REFGUID, P2: WORD, P3: WORD, P4: LCID, P5: ptr LPTYPELIB): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc QueryPathOfRegTypeLib*(P1: REFGUID, P2: uint16, P3: uint16, P4: LCID, P5: LPBSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc RegisterTypeLib*(P1: LPTYPELIB, P2: ptr OLECHAR, P3: ptr OLECHAR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc UnRegisterTypeLib*(P1: REFGUID, P2: WORD, P3: WORD, P4: LCID, P5: SYSKIND): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc CreateTypeLib*(P1: SYSKIND, P2: ptr OLECHAR, P3: ptr LPCREATETYPELIB): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc DispGetParam*(P1: ptr DISPPARAMS, P2: UINT, P3: VARTYPE, P4: ptr VARIANT, P5: ptr UINT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc DispGetIDsOfNames*(P1: LPTYPEINFO, P2: ptr ptr OLECHAR, P3: UINT, P4: ptr DISPID): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc DispInvoke*(P1: pointer, P2: LPTYPEINFO, P3: DISPID, P4: WORD, P5: ptr DISPPARAMS, P6: ptr VARIANT, P7: ptr EXCEPINFO, P8: ptr UINT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc CreateDispTypeInfo*(P1: ptr INTERFACEDATA, P2: LCID, P3: ptr LPTYPEINFO): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc CreateStdDispatch*(P1: ptr IUnknown, P2: pointer, P3: LPTYPEINFO, P4: ptr ptr IUnknown): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc RegisterActiveObject*(P1: ptr IUnknown, P2: REFCLSID, P3: DWORD, P4: ptr DWORD): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc RevokeActiveObject*(P1: DWORD, P2: pointer): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc GetActiveObject*(P1: REFCLSID, P2: pointer, P3: ptr ptr IUnknown): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SetErrorInfo*(P1: uint32, P2: LPERRORINFO): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc GetErrorInfo*(P1: uint32, P2: ptr LPERRORINFO): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc CreateErrorInfo*(P1: ptr LPCREATEERRORINFO): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OaBuildVersion*(): uint32 {.winapi, dynlib: "oleaut32", importc.}
proc VectorFromBstr*(P1: BSTR, P2: ptr ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc BstrFromVector*(P1: ptr SAFEARRAY, P2: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarParseNumFromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr NUMPARSE, P5: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarNumFromParseNum*(P1: ptr NUMPARSE, P2: ptr BYTE, P3: ULONG, P4: ptr VARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarAdd*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarSub*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarMul*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDiv*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromI2*(P1: SHORT, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromI4*(P1: LONG, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromI8*(P1: LONG64, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromR4*(P1: FLOAT, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromR8*(P1: DOUBLE, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromDate*(P1: DATE, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromBool*(P1: VARIANT_BOOL, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromI1*(P1: int8, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromUI2*(P1: USHORT, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromUI4*(P1: ULONG, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromUI8*(P1: ULONG64, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromCy*(P1: CY, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromDec*(P1: ptr DECIMAL, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromUI1*(P1: BYTE, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromI4*(P1: LONG, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromI8*(P1: LONG64, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromR4*(P1: FLOAT, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromR8*(P1: DOUBLE, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromDate*(P1: DATE, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromBool*(P1: VARIANT_BOOL, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromI1*(P1: int8, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromUI2*(P1: USHORT, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromUI4*(P1: ULONG, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromUI8*(P1: ULONG64, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromCy*(P1: CY, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromDec*(P1: ptr DECIMAL, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromUI1*(P1: BYTE, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromI2*(P1: SHORT, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromI8*(P1: LONG64, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromR4*(P1: FLOAT, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromR8*(P1: DOUBLE, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromDate*(P1: DATE, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromBool*(P1: VARIANT_BOOL, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromI1*(P1: int8, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromUI2*(P1: USHORT, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromUI4*(P1: ULONG, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromUI8*(P1: ULONG64, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromCy*(P1: CY, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromDec*(P1: ptr DECIMAL, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromUI1*(P1: BYTE, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromI2*(P1: SHORT, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromI4*(P1: LONG, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromR4*(P1: FLOAT, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromR8*(P1: DOUBLE, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromDate*(P1: DATE, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromBool*(P1: VARIANT_BOOL, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromI1*(P1: int8, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromUI2*(P1: USHORT, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromUI4*(P1: ULONG, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromUI8*(P1: ULONG64, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromDec*(pdecIn: ptr DECIMAL, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromInt*(intIn: INT, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromCy*(P1: CY, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromUI1*(P1: BYTE, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromI2*(P1: SHORT, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromI4*(P1: LONG, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromI8*(P1: LONG64, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromR8*(P1: DOUBLE, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromDate*(P1: DATE, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromBool*(P1: VARIANT_BOOL, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromI1*(P1: int8, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromUI2*(P1: USHORT, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromUI4*(P1: ULONG, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromUI8*(P1: ULONG64, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromCy*(P1: CY, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromDec*(P1: ptr DECIMAL, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromUI1*(P1: BYTE, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromI2*(P1: SHORT, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromI4*(P1: LONG, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromI8*(P1: LONG64, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromR4*(P1: FLOAT, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromDate*(P1: DATE, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromBool*(P1: VARIANT_BOOL, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromI1*(P1: int8, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromUI2*(P1: USHORT, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromUI4*(P1: ULONG, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromUI8*(P1: ULONG64, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromCy*(P1: CY, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromDec*(P1: ptr DECIMAL, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromUI1*(P1: BYTE, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromI2*(P1: SHORT, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromI4*(P1: LONG, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromI8*(P1: LONG64, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromR4*(P1: FLOAT, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromR8*(P1: DOUBLE, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromI1*(P1: int8, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromUI2*(P1: USHORT, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromUI4*(P1: ULONG, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromUI8*(P1: ULONG64, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromBool*(P1: VARIANT_BOOL, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromCy*(P1: CY, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromDec*(P1: ptr DECIMAL, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromUI1*(P1: BYTE, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromI2*(sIn: SHORT, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromI4*(P1: LONG, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromI8*(P1: LONG64, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromR4*(P1: FLOAT, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromR8*(P1: DOUBLE, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromDate*(P1: DATE, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromBool*(P1: VARIANT_BOOL, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromI1*(P1: int8, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromUI2*(P1: USHORT, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromUI4*(P1: ULONG, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromUI8*(P1: ULONG64, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromDec*(P1: ptr DECIMAL, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromUI1*(P1: BYTE, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromI2*(P1: SHORT, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromI4*(P1: LONG, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromI8*(P1: LONG64, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromR4*(P1: FLOAT, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromR8*(P1: DOUBLE, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromDate*(P1: DATE, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromBool*(P1: VARIANT_BOOL, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromI1*(P1: int8, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromUI2*(P1: USHORT, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromUI8*(P1: ULONG64, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromUI4*(P1: ULONG, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromCy*(P1: CY, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromDec*(P1: ptr DECIMAL, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromDisp*(P1: ptr IDispatch, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromUI1*(P1: BYTE, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromI2*(P1: SHORT, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromI4*(P1: LONG, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromI8*(P1: LONG64, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromR4*(P1: FLOAT, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromR8*(P1: DOUBLE, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromDate*(P1: DATE, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromI1*(P1: int8, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromUI2*(P1: USHORT, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromUI4*(P1: ULONG, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromUI8*(P1: ULONG64, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromCy*(P1: CY, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromDec*(P1: ptr DECIMAL, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromUI1*(P1: BYTE, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromI2*(P1: SHORT, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromI4*(P1: LONG, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromI8*(P1: LONG64, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromR4*(P1: FLOAT, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromR8*(P1: DOUBLE, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromDate*(P1: DATE, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromBool*(P1: VARIANT_BOOL, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromUI2*(P1: USHORT, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromUI4*(P1: ULONG, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromUI8*(P1: ULONG64, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromCy*(P1: CY, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromDec*(P1: ptr DECIMAL, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromUI1*(P1: BYTE, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromI2*(P1: SHORT, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromI4*(P1: LONG, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromI8*(P1: LONG64, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromR4*(P1: FLOAT, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromR8*(P1: DOUBLE, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromDate*(P1: DATE, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromBool*(P1: VARIANT_BOOL, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromI1*(P1: int8, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromUI4*(P1: ULONG, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromUI8*(P1: ULONG64, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromCy*(P1: CY, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromDec*(P1: ptr DECIMAL, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromUI1*(P1: BYTE, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromI2*(P1: SHORT, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromI4*(P1: LONG, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromI8*(P1: LONG64, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromR4*(P1: FLOAT, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromR8*(P1: DOUBLE, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromDate*(P1: DATE, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromBool*(P1: VARIANT_BOOL, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromI1*(P1: int8, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromUI2*(P1: USHORT, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromUI8*(P1: ULONG64, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromCy*(P1: CY, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromDec*(P1: ptr DECIMAL, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromUI1*(P1: BYTE, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromI2*(P1: SHORT, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromI4*(P1: LONG, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromI8*(P1: LONG64, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromR4*(P1: FLOAT, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromR8*(P1: DOUBLE, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromDate*(P1: DATE, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromBool*(P1: VARIANT_BOOL, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromI1*(P1: int8, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromUI2*(P1: USHORT, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromUI4*(P1: ULONG, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromDec*(P1: ptr DECIMAL, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromInt*(P1: INT, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromCy*(P1: CY, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromUI1*(P1: BYTE, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromI2*(P1: SHORT, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromI4*(P1: LONG, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromI8*(P1: LONG64, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromR4*(P1: FLOAT, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromR8*(P1: DOUBLE, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromDate*(P1: DATE, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromBool*(P1: VARIANT_BOOL, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromI1*(P1: int8, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromUI2*(P1: USHORT, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromUI4*(P1: ULONG, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromUI8*(P1: ULONG64, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromCy*(P1: CY, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecNeg*(P1: ptr DECIMAL, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4CmpR8*(P1: float32, P2: float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8Pow*(P1: float64, P2: float64, P3: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8Round*(P1: float64, P2: int32, P3: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecAbs*(P1: ptr DECIMAL, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecAdd*(P1: ptr DECIMAL, P2: ptr DECIMAL, P3: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecCmp*(P1: ptr DECIMAL, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecCmpR8*(P1: ptr DECIMAL, P2: DOUBLE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecDiv*(P1: ptr DECIMAL, P2: ptr DECIMAL, P3: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFix*(P1: ptr DECIMAL, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecInt*(P1: ptr DECIMAL, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecMul*(P1: ptr DECIMAL, P2: ptr DECIMAL, P3: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecRound*(P1: ptr DECIMAL, P2: int32, P3: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecSub*(P1: ptr DECIMAL, P2: ptr DECIMAL, P3: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyAbs*(P1: CY, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyAdd*(P1: CY, P2: CY, P3: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyCmp*(P1: CY, P2: CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyCmpR8*(P1: CY, P2: DOUBLE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFix*(P1: CY, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyInt*(P1: CY, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyMul*(P1: CY, P2: CY, P3: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyMulI4*(P1: CY, P2: LONG, P3: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyMulI8*(P1: CY, P2: LONG64, P3: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyNeg*(P1: CY, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyRound*(P1: CY, P2: INT, P3: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCySub*(P1: CY, P2: CY, P3: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarAnd*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCat*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarEqv*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarIdiv*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarImp*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarMod*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarOr*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarPow*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarXor*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarAbs*(P1: LPVARIANT, P2: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarFix*(P1: LPVARIANT, P2: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarInt*(P1: LPVARIANT, P2: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarNeg*(P1: LPVARIANT, P2: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarNot*(P1: LPVARIANT, P2: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarRound*(P1: LPVARIANT, P2: int32, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCmp*(P1: LPVARIANT, P2: LPVARIANT, P3: LCID, P4: ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrCmp*(P1: BSTR, P2: BSTR, P3: LCID, P4: ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrCat*(P1: BSTR, P2: BSTR, P3: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}

converter winim_converter_ICreateTypeInfo*(x: ptr ICreateTypeInfo): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ICreateTypeInfo2*(x: ptr ICreateTypeInfo2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ICreateTypeLib*(x: ptr ICreateTypeLib): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ICreateTypeLib2*(x: ptr ICreateTypeLib2): ptr IUnknown = cast[ptr IUnknown](x)

# objext/olectl.nim

template ITF_ERROR_SCODE_FOR_D(c: int): SCODE =
  (SEVERITY_ERROR.SCODE shl 31) or (FACILITY_ITF.int shl 16) or c

template ITF_SUCCESS_SCODE_FOR_D(c: int): SCODE =
  (SEVERITY_SUCCESS.SCODE shl 31) or (FACILITY_ITF.int shl 16) or c

template STD_CTL_SCODE(c: int): SCODE =
  (SEVERITY_ERROR.SCODE shl 31) or (FACILITY_CONTROL.int shl 16) or c

const
  CTL_E_ILLEGALFUNCTIONCALL* = (STD_CTL_SCODE( 5 )).SCODE
  CTL_E_OVERFLOW* = (STD_CTL_SCODE( 6 )).SCODE
  CTL_E_OUTOFMEMORY* = (STD_CTL_SCODE( 7 )).SCODE
  CTL_E_DIVISIONBYZERO* = (STD_CTL_SCODE( 11 )).SCODE
  CTL_E_OUTOFSTRINGSPACE* = (STD_CTL_SCODE( 14 )).SCODE
  CTL_E_OUTOFSTACKSPACE* = (STD_CTL_SCODE( 28 )).SCODE
  CTL_E_BADFILENAMEORNUMBER* = (STD_CTL_SCODE( 52 )).SCODE
  CTL_E_FILENOTFOUND* = (STD_CTL_SCODE( 53 )).SCODE
  CTL_E_BADFILEMODE* = (STD_CTL_SCODE( 54 )).SCODE
  CTL_E_FILEALREADYOPEN* = (STD_CTL_SCODE( 55 )).SCODE
  CTL_E_DEVICEIOERROR* = (STD_CTL_SCODE( 57 )).SCODE
  CTL_E_FILEALREADYEXISTS* = (STD_CTL_SCODE( 58 )).SCODE
  CTL_E_BADRECORDLENGTH* = (STD_CTL_SCODE( 59 )).SCODE
  CTL_E_DISKFULL* = (STD_CTL_SCODE( 61 )).SCODE
  CTL_E_BADRECORDNUMBER* = (STD_CTL_SCODE( 63 )).SCODE
  CTL_E_BADFILENAME* = (STD_CTL_SCODE( 64 )).SCODE
  CTL_E_TOOMANYFILES* = (STD_CTL_SCODE( 67 )).SCODE
  CTL_E_DEVICEUNAVAILABLE* = (STD_CTL_SCODE( 68 )).SCODE
  CTL_E_PERMISSIONDENIED* = (STD_CTL_SCODE( 70 )).SCODE
  CTL_E_DISKNOTREADY* = (STD_CTL_SCODE( 71 )).SCODE
  CTL_E_PATHFILEACCESSERROR* = (STD_CTL_SCODE( 75 )).SCODE
  CTL_E_PATHNOTFOUND* = (STD_CTL_SCODE( 76 )).SCODE
  CTL_E_INVALIDPATTERNSTRING* = (STD_CTL_SCODE( 93 )).SCODE
  CTL_E_INVALIDUSEOFNULL* = (STD_CTL_SCODE( 94 )).SCODE
  CTL_E_INVALIDFILEFORMAT* = (STD_CTL_SCODE( 321 )).SCODE
  CTL_E_INVALIDPROPERTYVALUE* = (STD_CTL_SCODE( 380 )).SCODE
  CTL_E_INVALIDPROPERTYARRAYINDEX* = (STD_CTL_SCODE( 381 )).SCODE
  CTL_E_SETNOTSUPPORTEDATRUNTIME* = (STD_CTL_SCODE( 382 )).SCODE
  CTL_E_SETNOTSUPPORTED* = (STD_CTL_SCODE( 383 )).SCODE
  CTL_E_NEEDPROPERTYARRAYINDEX* = (STD_CTL_SCODE( 385 )).SCODE
  CTL_E_SETNOTPERMITTED* = (STD_CTL_SCODE( 387 )).SCODE
  CTL_E_GETNOTSUPPORTEDATRUNTIME* = (STD_CTL_SCODE( 393 )).SCODE
  CTL_E_GETNOTSUPPORTED* = (STD_CTL_SCODE( 394 )).SCODE
  CTL_E_PROPERTYNOTFOUND* = (STD_CTL_SCODE( 422 )).SCODE
  CTL_E_INVALIDCLIPBOARDFORMAT* = (STD_CTL_SCODE( 460 )).SCODE
  CTL_E_INVALIDPICTURE* = (STD_CTL_SCODE( 481 )).SCODE
  CTL_E_PRINTERERROR* = (STD_CTL_SCODE( 482 )).SCODE
  CTL_E_CANTSAVEFILETOTEMP* = (STD_CTL_SCODE( 735 )).SCODE
  CTL_E_SEARCHTEXTNOTFOUND* = (STD_CTL_SCODE( 744 )).SCODE
  CTL_E_REPLACEMENTSTOOLONG* = (STD_CTL_SCODE( 746 )).SCODE
  CTL_E_CUSTOM_FIRST* = (STD_CTL_SCODE( 600 )).SCODE
  CLASS_E_NOTLICENSED* = CLASSFACTORY_E_FIRST+2.SCODE
  CONNECT_E_FIRST* = (ITF_ERROR_SCODE_FOR_D( 0x200 )).SCODE
  CONNECT_E_LAST* = (ITF_ERROR_SCODE_FOR_D( 0x20F )).SCODE
  CONNECT_S_FIRST* = (ITF_SUCCESS_SCODE_FOR_D( 0x200 )).SCODE
  CONNECT_S_LAST* = (ITF_SUCCESS_SCODE_FOR_D( 0x20F )).SCODE
  CONNECT_E_NOCONNECTION* = (CONNECT_E_FIRST + 0).SCODE
  CONNECT_E_ADVISELIMIT* = (CONNECT_E_FIRST + 1).SCODE
  CONNECT_E_CANNOTCONNECT* = (CONNECT_E_FIRST + 2).SCODE
  CONNECT_E_OVERRIDDEN* = (CONNECT_E_FIRST + 3).SCODE
  SELFREG_E_FIRST* = (ITF_ERROR_SCODE_FOR_D( 0x200 )).SCODE
  SELFREG_E_LAST* = (ITF_ERROR_SCODE_FOR_D( 0x20F )).SCODE
  SELFREG_S_FIRST* = (ITF_SUCCESS_SCODE_FOR_D( 0x200 )).SCODE
  SELFREG_S_LAST* = (ITF_SUCCESS_SCODE_FOR_D( 0x20F )).SCODE
  SELFREG_E_TYPELIB* = (SELFREG_E_FIRST + 0).SCODE
  SELFREG_E_CLASS* = (SELFREG_E_FIRST + 1).SCODE
  PERPROP_E_FIRST* = (ITF_ERROR_SCODE_FOR_D( 0x200 )).SCODE
  PERPROP_E_LAST* = (ITF_ERROR_SCODE_FOR_D( 0x20F )).SCODE
  PERPROP_S_FIRST* = (ITF_SUCCESS_SCODE_FOR_D( 0x200 )).SCODE
  PERPROP_S_LAST* = (ITF_SUCCESS_SCODE_FOR_D( 0x20F )).SCODE
  PERPROP_E_NOPAGEAVAILABLE* = PERPROP_E_FIRST.SCODE
  OLEMISC_RECOMPOSEONRESIZE* = 0x1
  OLEMISC_ONLYICONIC* = 0x2
  OLEMISC_INSERTNOTREPLACE* = 0x4
  OLEMISC_STATIC* = 0x8
  OLEMISC_CANTLINKINSIDE* = 0x10
  OLEMISC_CANLINKBYOLE1* = 0x20
  OLEMISC_ISLINKOBJECT* = 0x40
  OLEMISC_INSIDEOUT* = 0x80
  OLEMISC_ACTIVATEWHENVISIBLE* = 0x100
  OLEMISC_RENDERINGISDEVICEINDEPENDENT* = 0x200
  OLEMISC_INVISIBLEATRUNTIME* = 0x400
  OLEMISC_ALWAYSRUN* = 0x800
  OLEMISC_ACTSLIKEBUTTON* = 0x1000
  OLEMISC_ACTSLIKELABEL* = 0x2000
  OLEMISC_NOUIACTIVATE* = 0x4000
  OLEMISC_ALIGNABLE* = 0x8000
  OLEMISC_SIMPLEFRAME* = 0x10000
  OLEMISC_SETCLIENTSITEFIRST* = 0x20000
  OLEMISC_IMEMODE* = 0x40000
  OLEMISC_IGNOREACTIVATEWHENVISIBLE* = 0x80000
  OLEMISC_WANTSTOMENUMERGE* = 0x100000
  OLEMISC_SUPPORTSMULTILEVELUNDO* = 0x200000
  OLEIVERB_PROPERTIES* = -7
  VT_STREAMED_PROPSET* = 73
  VT_STORED_PROPSET* = 74
  VT_BLOB_PROPSET* = 75
  VT_VERBOSE_ENUM* = 76
  VT_COLOR* = VT_I4
  VT_XPOS_PIXELS* = VT_I4
  VT_YPOS_PIXELS* = VT_I4
  VT_XSIZE_PIXELS* = VT_I4
  VT_YSIZE_PIXELS* = VT_I4
  VT_XPOS_HIMETRIC* = VT_I4
  VT_YPOS_HIMETRIC* = VT_I4
  VT_XSIZE_HIMETRIC* = VT_I4
  VT_YSIZE_HIMETRIC* = VT_I4
  VT_TRISTATE* = VT_I2
  VT_OPTEXCLUSIVE* = VT_BOOL
  VT_FONT* = VT_DISPATCH
  VT_PICTURE* = VT_DISPATCH
  VT_HANDLE* = VT_I4
  OCM_BASE* = WM_USER + 0x1c00
  OCM_COMMAND* = OCM_BASE + WM_COMMAND
  OCM_CTLCOLORBTN* = OCM_BASE + WM_CTLCOLORBTN
  OCM_CTLCOLOREDIT* = OCM_BASE + WM_CTLCOLOREDIT
  OCM_CTLCOLORDLG* = OCM_BASE + WM_CTLCOLORDLG
  OCM_CTLCOLORLISTBOX* = OCM_BASE + WM_CTLCOLORLISTBOX
  OCM_CTLCOLORMSGBOX* = OCM_BASE + WM_CTLCOLORMSGBOX
  OCM_CTLCOLORSCROLLBAR* = OCM_BASE + WM_CTLCOLORSCROLLBAR
  OCM_CTLCOLORSTATIC* = OCM_BASE + WM_CTLCOLORSTATIC
  OCM_DRAWITEM* = OCM_BASE + WM_DRAWITEM
  OCM_MEASUREITEM* = OCM_BASE + WM_MEASUREITEM
  OCM_DELETEITEM* = OCM_BASE + WM_DELETEITEM
  OCM_VKEYTOITEM* = OCM_BASE + WM_VKEYTOITEM
  OCM_CHARTOITEM* = OCM_BASE + WM_CHARTOITEM
  OCM_COMPAREITEM* = OCM_BASE + WM_COMPAREITEM
  OCM_HSCROLL* = OCM_BASE + WM_HSCROLL
  OCM_VSCROLL* = OCM_BASE + WM_VSCROLL
  OCM_PARENTNOTIFY* = OCM_BASE + WM_PARENTNOTIFY
  OCM_NOTIFY* = OCM_BASE + WM_NOTIFY
  CTRLINFO_EATS_RETURN* = 1
  CTRLINFO_EATS_ESCAPE* = 2
  XFORMCOORDS_POSITION* = 1
  XFORMCOORDS_SIZE* = 2
  XFORMCOORDS_HIMETRICTOCONTAINER* = 4
  XFORMCOORDS_CONTAINERTOHIMETRIC* = 8
  GUIDKIND_DEFAULT_SOURCE_DISP_IID* = 1
  PROPPAGESTATUS_DIRTY* = 1
  PROPPAGESTATUS_VALIDATE* = 2
  PICTURE_SCALABLE* = 1
  PICTURE_TRANSPARENT* = 2
  PICTYPE_UNINITIALIZED* = -1
  PICTYPE_NONE* = 0
  PICTYPE_BITMAP* = 1
  PICTYPE_METAFILE* = 2
  PICTYPE_ICON* = 3
  PICTYPE_ENHMETAFILE* = 4
  DISPID_AUTOSIZE* = -500
  DISPID_BACKCOLOR* = -501
  DISPID_BACKSTYLE* = -502
  DISPID_BORDERCOLOR* = -503
  DISPID_BORDERSTYLE* = -504
  DISPID_BORDERWIDTH* = -505
  DISPID_DRAWMODE* = -507
  DISPID_DRAWSTYLE* = -508
  DISPID_DRAWWIDTH* = -509
  DISPID_FILLCOLOR* = -510
  DISPID_FILLSTYLE* = -511
  DISPID_FONT* = -512
  DISPID_FORECOLOR* = -513
  DISPID_ENABLED* = -514
  DISPID_HWND* = -515
  DISPID_TABSTOP* = -516
  DISPID_TEXT* = -517
  DISPID_CAPTION* = -518
  DISPID_BORDERVISIBLE* = -519
  DISPID_APPEARANCE* = -520
  DISPID_MOUSEPOINTER* = -521
  DISPID_MOUSEICON* = -522
  DISPID_PICTURE* = -523
  DISPID_VALID* = -524
  DISPID_REFRESH* = -550
  DISPID_DOCLICK* = -551
  DISPID_ABOUTBOX* = -552
  DISPID_CLICK* = -600
  DISPID_DBLCLICK* = -601
  DISPID_KEYDOWN* = -602
  DISPID_KEYPRESS* = -603
  DISPID_KEYUP* = -604
  DISPID_MOUSEDOWN* = -605
  DISPID_MOUSEMOVE* = -606
  DISPID_MOUSEUP* = -607
  DISPID_ERROREVENT* = -608
  DISPID_AMBIENT_BACKCOLOR* = -701
  DISPID_AMBIENT_DISPLAYNAME* = -702
  DISPID_AMBIENT_FONT* = -703
  DISPID_AMBIENT_FORECOLOR* = -704
  DISPID_AMBIENT_LOCALEID* = -705
  DISPID_AMBIENT_MESSAGEREFLECT* = -706
  DISPID_AMBIENT_SCALEUNITS* = -707
  DISPID_AMBIENT_TEXTALIGN* = -708
  DISPID_AMBIENT_USERMODE* = -709
  DISPID_AMBIENT_UIDEAD* = -710
  DISPID_AMBIENT_SHOWGRABHANDLES* = -711
  DISPID_AMBIENT_SHOWHATCHING* = -712
  DISPID_AMBIENT_DISPLAYASDEFAULT* = -713
  DISPID_AMBIENT_SUPPORTSMNEMONICS* = -714
  DISPID_AMBIENT_AUTOCLIP* = -715
  DISPID_AMBIENT_APPEARANCE* = -716
  DISPID_AMBIENT_CODEPAGE* = -725
  DISPID_AMBIENT_PALETTE* = -726
  DISPID_AMBIENT_CHARSET* = -727
  DISPID_AMBIENT_RIGHTTOLEFT* = -732
  DISPID_AMBIENT_TOPTOBOTTOM* = -733
  DISPID_FONT_NAME* = 0
  DISPID_FONT_SIZE* = 2
  DISPID_FONT_BOLD* = 3
  DISPID_FONT_ITALIC* = 4
  DISPID_FONT_UNDER* = 5
  DISPID_FONT_STRIKE* = 6
  DISPID_FONT_WEIGHT* = 7
  DISPID_FONT_CHARSET* = 8
  DISPID_PICT_HANDLE* = 0
  DISPID_PICT_HPAL* = 2
  DISPID_PICT_TYPE* = 3
  DISPID_PICT_WIDTH* = 4
  DISPID_PICT_HEIGHT* = 5
  DISPID_PICT_RENDER* = 6
  # OLE_TRISTATE* = enum
  triUnchecked* = 0
  triChecked1* = 1
  triGray* = 2

type
  LPOLECONTROL* = ptr IOleControl
  LPOLECONTROLSITE* = ptr IOleControlSite
  LPSIMPLEFRAMESITE* = ptr ISimpleFrameSite
  LPPERSISTPROPERTYBAG* = ptr IPersistPropertyBag
  LPPERSISTSTREAMINIT* = ptr IPersistStreamInit
  LPPERSISTMEMORY* = ptr IPersistMemory
  LPPROPERTYNOTIFYSINK* = ptr IPropertyNotifySink
  LPPROVIDECLASSINFO* = ptr IProvideClassInfo
  LPPROVIDECLASSINFO2* = ptr IProvideClassInfo2
  LPCONNECTIONPOINTCONTAINER* = ptr IConnectionPointContainer
  LPCLASSFACTORY2* = ptr IClassFactory2
  LPSPECIFYPROPERTYPAGES* = ptr ISpecifyPropertyPages
  LPPERPROPERTYBROWSING* = ptr IPerPropertyBrowsing
  LPPROPERTYPAGE* = ptr IPropertyPage
  LPPROPERTYPAGE2* = ptr IPropertyPage2
  LPPICTURE* = ptr IPicture
  LPPICTUREDISP* = ptr IPictureDisp
  OLE_XPOS_PIXELS* = int32
  OLE_YPOS_PIXELS* = int32
  OLE_XSIZE_PIXELS* = int32
  OLE_YSIZE_PIXELS* = int32
  OLE_XPOS_CONTAINER* = float32
  OLE_YPOS_CONTAINER* = float32
  OLE_XSIZE_CONTAINER* = float32
  OLE_OPTEXCLUSIVE* = VARIANT_BOOL
  OLE_CANCELBOOL* = VARIANT_BOOL
  OLE_ENABLEDEFAULTBOOL* = VARIANT_BOOL
  OLE_TRISTATE* = int32
  OCPFIPARAMS* {.final, pure.} = object
    cbStructSize*: ULONG
    hWndOwner*: HWND
    x*: int32
    y*: int32
    lpszCaption*: LPCOLESTR
    cObjects*: ULONG
    lplpUnk*: ptr LPUNKNOWN
    cPages*: ULONG
    lpPages*: ptr CLSID
    lcid*: LCID
    dispidInitialProperty*: DISPID
  LPOCPFIPARAMS* = ptr OCPFIPARAMS
  FONTDESC* {.final, pure.} = object
    cbSizeofstruct*: UINT
    lpstrName*: LPOLESTR
    cySize*: CY
    sWeight*: SHORT
    sCharset*: SHORT
    fItalic*: BOOL
    fUnderline*: BOOL
    fStrikethrough*: BOOL
  LPFONTDESC* = ptr FONTDESC
  PICTDESC_UNION1_emf* {.final, pure.} = object
    hemf*: HENHMETAFILE
  PICTDESC_UNION1_icon* {.final, pure.} = object
    hicon*: HICON
  PICTDESC_UNION1_wmf* {.final, pure.} = object
    hmeta*: HMETAFILE
    xExt*: int32
    yExt*: int32
  PICTDESC_UNION1_bmp* {.final, pure.} = object
    hbitmap*: HBITMAP
    hpal*: HPALETTE
  PICTDESC_UNION1* {.final, union, pure.} = object
    bmp*: PICTDESC_UNION1_bmp
    wmf*: PICTDESC_UNION1_wmf
    icon*: PICTDESC_UNION1_icon
    emf*: PICTDESC_UNION1_emf
  PICTDESC* {.final, pure.} = object
    cbSizeofstruct*: UINT
    picType*: UINT
    u1*: PICTDESC_UNION1
  LPPICTDESC* = ptr PICTDESC

proc DllRegisterServer*(): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc DllUnregisterServer*(): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleCreateFontIndirect*(P1: LPFONTDESC, P2: REFIID, P3: ptr PVOID): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleCreatePictureIndirect*(P1: LPPICTDESC, P2: REFIID, P3: BOOL, P4: ptr PVOID): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleCreatePropertyFrame*(P1: HWND, P2: UINT, P3: UINT, P4: LPCOLESTR, P5: ULONG, P6: ptr LPUNKNOWN, P7: ULONG, P8: LPCLSID, P9: LCID, P10: DWORD, P11: PVOID): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleCreatePropertyFrameIndirect*(P1: LPOCPFIPARAMS): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleIconToCursor*(P1: HINSTANCE, P2: HICON): HCURSOR {.winapi, dynlib: "oleaut32", importc.}
proc OleLoadPicture*(P1: LPSTREAM, P2: LONG, P3: BOOL, P4: REFIID, P5: ptr PVOID): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleLoadPictureEx*(P1: LPSTREAM, P2: LONG, P3: BOOL, P4: REFIID, P5: DWORD, P6: DWORD, P7: DWORD, P8: ptr LPVOID): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleLoadPicturePath*(P1: LPOLESTR, P2: LPUNKNOWN, P3: DWORD, P4: OLE_COLOR, P5: REFIID, P6: ptr LPVOID): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleLoadPictureFile*(P1: VARIANT, P2: ptr LPDISPATCH): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleLoadPictureFileEx*(P1: VARIANT, P2: DWORD, P3: DWORD, P4: DWORD, P5: ptr LPDISPATCH): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleSavePictureFile*(P1: LPDISPATCH, P2: BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleTranslateColor*(P1: OLE_COLOR, P2: HPALETTE, P3: ptr COLORREF): HRESULT {.winapi, dynlib: "oleaut32", importc.}

# objext/oledlg.nim

const
  PS_MAXLINKTYPES* = 8
  OLESTDDELIM* = "\\"
  SZOLEUI_MSG_HELP* = "OLEUI_MSG_HELP"
  SZOLEUI_MSG_ENDDIALOG* = "OLEUI_MSG_ENDDIALOG"
  SZOLEUI_MSG_BROWSE* = "OLEUI_MSG_BROWSE"
  SZOLEUI_MSG_CHANGEICON* = "OLEUI_MSG_CHANGEICON"
  SZOLEUI_MSG_CLOSEBUSYDIALOG* = "OLEUI_MSG_CLOSEBUSYDIALOG"
  SZOLEUI_MSG_CONVERT* = "OLEUI_MSG_CONVERT"
  SZOLEUI_MSG_CHANGESOURCE* = "OLEUI_MSG_CHANGESOURCE"
  SZOLEUI_MSG_ADDCONTROL* = "OLEUI_MSG_ADDCONTROL"
  SZOLEUI_MSG_BROWSE_OFN* = "OLEUI_MSG_BROWSE_OFN"
  PROP_HWND_CHGICONDLG* = "HWND_CIDLG"
  IDC_OLEUIHELP* = 99
  IDC_IO_CREATENEW* = 2100
  IDC_IO_CREATEFROMFILE* = 2101
  IDC_IO_LINKFILE* = 2102
  IDC_IO_OBJECTTYPELIST* = 2103
  IDC_IO_DISPLAYASICON* = 2104
  IDC_IO_CHANGEICON* = 2105
  IDC_IO_FILE* = 2106
  IDC_IO_FILEDISPLAY* = 2107
  IDC_IO_RESULTIMAGE* = 2108
  IDC_IO_RESULTTEXT* = 2109
  IDC_IO_ICONDISPLAY* = 2110
  IDC_IO_OBJECTTYPETEXT* = 2111
  IDC_IO_FILETEXT* = 2112
  IDC_IO_FILETYPE* = 2113
  IDC_IO_INSERTCONTROL* = 2114
  IDC_IO_ADDCONTROL* = 2115
  IDC_IO_CONTROLTYPELIST* = 2116
  IDC_PS_PASTE* = 500
  IDC_PS_PASTELINK* = 501
  IDC_PS_SOURCETEXT* = 502
  IDC_PS_PASTELIST* = 503
  IDC_PS_PASTELINKLIST* = 504
  IDC_PS_DISPLAYLIST* = 505
  IDC_PS_DISPLAYASICON* = 506
  IDC_PS_ICONDISPLAY* = 507
  IDC_PS_CHANGEICON* = 508
  IDC_PS_RESULTIMAGE* = 509
  IDC_PS_RESULTTEXT* = 510
  IDC_CI_GROUP* = 120
  IDC_CI_CURRENT* = 121
  IDC_CI_CURRENTICON* = 122
  IDC_CI_DEFAULT* = 123
  IDC_CI_DEFAULTICON* = 124
  IDC_CI_FROMFILE* = 125
  IDC_CI_FROMFILEEDIT* = 126
  IDC_CI_ICONLIST* = 127
  IDC_CI_LABEL* = 128
  IDC_CI_LABELEDIT* = 129
  IDC_CI_BROWSE* = 130
  IDC_CI_ICONDISPLAY* = 131
  IDC_CV_OBJECTTYPE* = 150
  IDC_CV_DISPLAYASICON* = 152
  IDC_CV_CHANGEICON* = 153
  IDC_CV_ACTIVATELIST* = 154
  IDC_CV_CONVERTTO* = 155
  IDC_CV_ACTIVATEAS* = 156
  IDC_CV_RESULTTEXT* = 157
  IDC_CV_CONVERTLIST* = 158
  IDC_CV_ICONDISPLAY* = 165
  IDC_EL_CHANGESOURCE* = 201
  IDC_EL_AUTOMATIC* = 202
  IDC_EL_CANCELLINK* = 209
  IDC_EL_UPDATENOW* = 210
  IDC_EL_OPENSOURCE* = 211
  IDC_EL_MANUAL* = 212
  IDC_EL_LINKSOURCE* = 216
  IDC_EL_LINKTYPE* = 217
  IDC_EL_LINKSLISTBOX* = 206
  IDC_EL_COL1* = 220
  IDC_EL_COL2* = 221
  IDC_EL_COL3* = 222
  IDC_BZ_RETRY* = 600
  IDC_BZ_ICON* = 601
  IDC_BZ_MESSAGE1* = 602
  IDC_BZ_SWITCHTO* = 604
  IDC_UL_METER* = 1029
  IDC_UL_STOP* = 1030
  IDC_UL_PERCENT* = 1031
  IDC_UL_PROGRESS* = 1032
  IDC_PU_LINKS* = 900
  IDC_PU_TEXT* = 901
  IDC_PU_CONVERT* = 902
  IDC_PU_ICON* = 908
  IDC_GP_OBJECTNAME* = 1009
  IDC_GP_OBJECTTYPE* = 1010
  IDC_GP_OBJECTSIZE* = 1011
  IDC_GP_CONVERT* = 1013
  IDC_GP_OBJECTICON* = 1014
  IDC_GP_OBJECTLOCATION* = 1022
  IDC_VP_PERCENT* = 1000
  IDC_VP_CHANGEICON* = 1001
  IDC_VP_EDITABLE* = 1002
  IDC_VP_ASICON* = 1003
  IDC_VP_RELATIVE* = 1005
  IDC_VP_SPIN* = 1006
  IDC_VP_SCALETXT* = 1034
  IDC_VP_ICONDISPLAY* = 1021
  IDC_VP_RESULTIMAGE* = 1033
  IDC_LP_OPENSOURCE* = 1006
  IDC_LP_UPDATENOW* = 1007
  IDC_LP_BREAKLINK* = 1008
  IDC_LP_LINKSOURCE* = 1012
  IDC_LP_CHANGESOURCE* = 1015
  IDC_LP_AUTOMATIC* = 1016
  IDC_LP_MANUAL* = 1017
  IDC_LP_DATE* = 1018
  IDC_LP_TIME* = 1019
  IDD_INSERTOBJECT* = 1000
  IDD_CHANGEICON* = 1001
  IDD_CONVERT* = 1002
  IDD_PASTESPECIAL* = 1003
  IDD_EDITLINKS* = 1004
  IDD_BUSY* = 1006
  IDD_UPDATELINKS* = 1007
  IDD_CHANGESOURCE* = 1009
  IDD_INSERTFILEBROWSE* = 1010
  IDD_CHANGEICONBROWSE* = 1011
  IDD_CONVERTONLY* = 1012
  IDD_CHANGESOURCE4* = 1013
  IDD_GNRLPROPS* = 1100
  IDD_VIEWPROPS* = 1101
  IDD_LINKPROPS* = 1102
  IDD_CANNOTUPDATELINK* = 1008
  IDD_LINKSOURCEUNAVAILABLE* = 1020
  IDD_SERVERNOTFOUND* = 1023
  IDD_OUTOFMEMORY* = 1024
  IDD_SERVERNOTREGW* = 1021
  IDD_LINKTYPECHANGEDW* = 1022
  IDD_SERVERNOTREGA* = 1025
  IDD_LINKTYPECHANGEDA* = 1026
  ID_BROWSE_CHANGEICON* = 1
  ID_BROWSE_INSERTFILE* = 2
  ID_BROWSE_ADDCONTROL* = 3
  ID_BROWSE_CHANGESOURCE* = 4
  OLEUI_FALSE* = 0
  OLEUI_SUCCESS* = 1
  OLEUI_OK* = 1
  OLEUI_CANCEL* = 2
  OLEUI_ERR_STANDARDMIN* = 100
  OLEUI_ERR_STRUCTURENULL* = 101
  OLEUI_ERR_STRUCTUREINVALID* = 102
  OLEUI_ERR_CBSTRUCTINCORRECT* = 103
  OLEUI_ERR_HWNDOWNERINVALID* = 104
  OLEUI_ERR_LPSZCAPTIONINVALID* = 105
  OLEUI_ERR_LPFNHOOKINVALID* = 106
  OLEUI_ERR_HINSTANCEINVALID* = 107
  OLEUI_ERR_LPSZTEMPLATEINVALID* = 108
  OLEUI_ERR_HRESOURCEINVALID* = 109
  OLEUI_ERR_FINDTEMPLATEFAILURE* = 110
  OLEUI_ERR_LOADTEMPLATEFAILURE* = 111
  OLEUI_ERR_DIALOGFAILURE* = 112
  OLEUI_ERR_LOCALMEMALLOC* = 113
  OLEUI_ERR_GLOBALMEMALLOC* = 114
  OLEUI_ERR_LOADSTRING* = 115
  OLEUI_ERR_OLEMEMALLOC* = 116
  OLEUI_ERR_STANDARDMAX* = 116
  OPF_OBJECTISLINK* = 1
  OPF_NOFILLDEFAULT* = 2
  OPF_SHOWHELP* = 4
  OPF_DISABLECONVERT* = 8
  OLEUI_OPERR_SUBPROPNULL* = OLEUI_ERR_STANDARDMAX
  OLEUI_OPERR_SUBPROPINVALID* = ( OLEUI_ERR_STANDARDMAX+1 )
  OLEUI_OPERR_PROPSHEETNULL* = ( OLEUI_ERR_STANDARDMAX+2 )
  OLEUI_OPERR_PROPSHEETINVALID* = ( OLEUI_ERR_STANDARDMAX+3 )
  OLEUI_OPERR_SUPPROP* = ( OLEUI_ERR_STANDARDMAX+4 )
  OLEUI_OPERR_PROPSINVALID* = ( OLEUI_ERR_STANDARDMAX+5 )
  OLEUI_OPERR_PAGESINCORRECT* = ( OLEUI_ERR_STANDARDMAX+6 )
  OLEUI_OPERR_INVALIDPAGES* = ( OLEUI_ERR_STANDARDMAX+7 )
  OLEUI_OPERR_NOTSUPPORTED* = ( OLEUI_ERR_STANDARDMAX+8 )
  OLEUI_OPERR_DLGPROCNOTNULL* = ( OLEUI_ERR_STANDARDMAX+9 )
  OLEUI_OPERR_LPARAMNOTZERO* = ( OLEUI_ERR_STANDARDMAX+10 )
  OLEUI_GPERR_STRINGINVALID* = ( OLEUI_ERR_STANDARDMAX+11 )
  OLEUI_GPERR_CLASSIDINVALID* = ( OLEUI_ERR_STANDARDMAX+12 )
  OLEUI_GPERR_LPCLSIDEXCLUDEINVALID* = ( OLEUI_ERR_STANDARDMAX+13 )
  OLEUI_GPERR_CBFORMATINVALID* = ( OLEUI_ERR_STANDARDMAX+14 )
  OLEUI_VPERR_METAPICTINVALID* = ( OLEUI_ERR_STANDARDMAX+15 )
  OLEUI_VPERR_DVASPECTINVALID* = ( OLEUI_ERR_STANDARDMAX+16 )
  OLEUI_LPERR_LINKCNTRNULL* = ( OLEUI_ERR_STANDARDMAX+17 )
  OLEUI_LPERR_LINKCNTRINVALID* = ( OLEUI_ERR_STANDARDMAX+18 )
  OLEUI_OPERR_PROPERTYSHEET* = ( OLEUI_ERR_STANDARDMAX+19 )
  OLEUI_OPERR_OBJINFOINVALID* = ( OLEUI_ERR_STANDARDMAX+20 )
  OLEUI_OPERR_LINKINFOINVALID* = ( OLEUI_ERR_STANDARDMAX+21 )
  OLEUI_QUERY_GETCLASSID* = 65280
  OLEUI_QUERY_LINKBROKEN* = 65281
  IOF_SHOWHELP* = 1
  IOF_SELECTCREATENEW* = 2
  IOF_SELECTCREATEFROMFILE* = 4
  IOF_CHECKLINK* = 8
  IOF_CHECKDISPLAYASICON* = 16
  IOF_CREATENEWOBJECT* = 32
  IOF_CREATEFILEOBJECT* = 64
  IOF_CREATELINKOBJECT* = 128
  IOF_DISABLELINK* = 256
  IOF_VERIFYSERVERSEXIST* = 512
  IOF_DISABLEDISPLAYASICON* = 1024
  IOF_HIDECHANGEICON* = 2048
  IOF_SHOWINSERTCONTROL* = 4096
  IOF_SELECTCREATECONTROL* = 8192
  OLEUI_IOERR_LPSZFILEINVALID* = OLEUI_ERR_STANDARDMAX
  OLEUI_IOERR_LPSZLABELINVALID* = ( OLEUI_ERR_STANDARDMAX+1 )
  OLEUI_IOERR_HICONINVALID* = ( OLEUI_ERR_STANDARDMAX+2 )
  OLEUI_IOERR_LPFORMATETCINVALID* = ( OLEUI_ERR_STANDARDMAX+3 )
  OLEUI_IOERR_PPVOBJINVALID* = ( OLEUI_ERR_STANDARDMAX+4 )
  OLEUI_IOERR_LPIOLECLIENTSITEINVALID* = ( OLEUI_ERR_STANDARDMAX+5 )
  OLEUI_IOERR_LPISTORAGEINVALID* = ( OLEUI_ERR_STANDARDMAX+6 )
  OLEUI_IOERR_SCODEHASERROR* = ( OLEUI_ERR_STANDARDMAX+7 )
  OLEUI_IOERR_LPCLSIDEXCLUDEINVALID* = ( OLEUI_ERR_STANDARDMAX+8 )
  OLEUI_IOERR_CCHFILEINVALID* = ( OLEUI_ERR_STANDARDMAX+9 )
  PSF_SHOWHELP* = 1
  PSF_SELECTPASTE* = 2
  PSF_SELECTPASTELINK* = 4
  PSF_CHECKDISPLAYASICON* = 8
  PSF_DISABLEDISPLAYASICON* = 16
  PSF_HIDECHANGEICON* = 32
  PSF_STAYONCLIPBOARDCHANGE* = 64
  PSF_NOREFRESHDATAOBJECT* = 128
  OLEUI_IOERR_SRCDATAOBJECTINVALID* = OLEUI_ERR_STANDARDMAX
  OLEUI_IOERR_ARRPASTEENTRIESINVALID* = ( OLEUI_ERR_STANDARDMAX+1 )
  OLEUI_IOERR_ARRLINKTYPESINVALID* = ( OLEUI_ERR_STANDARDMAX+2 )
  OLEUI_PSERR_CLIPBOARDCHANGED* = ( OLEUI_ERR_STANDARDMAX+3 )
  OLEUI_PSERR_GETCLIPBOARDFAILED* = ( OLEUI_ERR_STANDARDMAX+4 )
  OLEUI_ELERR_LINKCNTRNULL* = OLEUI_ERR_STANDARDMAX
  OLEUI_ELERR_LINKCNTRINVALID* = ( OLEUI_ERR_STANDARDMAX+1 )
  ELF_SHOWHELP* = 1
  ELF_DISABLEUPDATENOW* = 2
  ELF_DISABLEOPENSOURCE* = 4
  ELF_DISABLECHANGESOURCE* = 8
  ELF_DISABLECANCELLINK* = 16
  CIF_SHOWHELP* = 1
  CIF_SELECTCURRENT* = 2
  CIF_SELECTDEFAULT* = 4
  CIF_SELECTFROMFILE* = 8
  CIF_USEICONEXE* = 16
  OLEUI_CIERR_MUSTHAVECLSID* = OLEUI_ERR_STANDARDMAX
  OLEUI_CIERR_MUSTHAVECURRENTMETAFILE* = OLEUI_ERR_STANDARDMAX+1
  OLEUI_CIERR_SZICONEXEINVALID* = OLEUI_ERR_STANDARDMAX+2
  CF_SHOWHELPBUTTON* = 1
  CF_SETCONVERTDEFAULT* = 2
  CF_SETACTIVATEDEFAULT* = 4
  CF_SELECTCONVERTTO* = 8
  CF_SELECTACTIVATEAS* = 16
  CF_DISABLEDISPLAYASICON* = 32
  CF_DISABLEACTIVATEAS* = 64
  CF_HIDECHANGEICON* = 128
  CF_CONVERTONLY* = 256
  OLEUI_CTERR_CLASSIDINVALID* = OLEUI_ERR_STANDARDMAX+1
  OLEUI_CTERR_DVASPECTINVALID* = OLEUI_ERR_STANDARDMAX+2
  OLEUI_CTERR_CBFORMATINVALID* = OLEUI_ERR_STANDARDMAX+3
  OLEUI_CTERR_HMETAPICTINVALID* = OLEUI_ERR_STANDARDMAX+4
  OLEUI_CTERR_STRINGINVALID* = OLEUI_ERR_STANDARDMAX+5
  BZ_DISABLECANCELBUTTON* = 1
  BZ_DISABLESWITCHTOBUTTON* = 2
  BZ_DISABLERETRYBUTTON* = 4
  BZ_NOTRESPONDINGDIALOG* = 8
  OLEUI_BZERR_HTASKINVALID* = OLEUI_ERR_STANDARDMAX
  OLEUI_BZ_SWITCHTOSELECTED* = OLEUI_ERR_STANDARDMAX+1
  OLEUI_BZ_RETRYSELECTED* = OLEUI_ERR_STANDARDMAX+2
  OLEUI_BZ_CALLUNBLOCKED* = OLEUI_ERR_STANDARDMAX+3
  CSF_SHOWHELP* = 1
  CSF_VALIDSOURCE* = 2
  CSF_ONLYGETSOURCE* = 4
  CSF_EXPLORER* = 8
  OLEUI_CSERR_LINKCNTRNULL* = OLEUI_ERR_STANDARDMAX
  OLEUI_CSERR_LINKCNTRINVALID* = OLEUI_ERR_STANDARDMAX+1
  OLEUI_CSERR_FROMNOTNULL* = OLEUI_ERR_STANDARDMAX+2
  OLEUI_CSERR_TONOTNULL* = OLEUI_ERR_STANDARDMAX+3
  OLEUI_CSERR_SOURCENULL* = OLEUI_ERR_STANDARDMAX+4
  OLEUI_CSERR_SOURCEINVALID* = OLEUI_ERR_STANDARDMAX+5
  OLEUI_CSERR_SOURCEPARSERROR* = OLEUI_ERR_STANDARDMAX+6
  OLEUI_CSERR_SOURCEPARSEERROR* = OLEUI_ERR_STANDARDMAX+7
  VPF_SELECTRELATIVE* = 1
  VPF_DISABLERELATIVE* = 2
  VPF_DISABLESCALE* = 4

type
  LPFNOLEUIHOOK* = proc (P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): UINT {.stdcall.}

type
  TOLEUIINSERTOBJECTW* {.final, pure.} = object # renamed from OLEUIINSERTOBJECTW
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCWSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCWSTR
    hResource*: HRSRC
    clsid*: CLSID
    lpszFile*: LPWSTR
    cchFile*: UINT
    cClsidExclude*: UINT
    lpClsidExclude*: LPCLSID
    iid*: IID
    oleRender*: DWORD
    lpFormatEtc*: LPFORMATETC
    lpIOleClientSite*: LPOLECLIENTSITE
    lpIStorage*: LPSTORAGE
    ppvObj*: ptr PVOID
    sc*: SCODE
    hMetaPict*: HGLOBAL
  POLEUIINSERTOBJECTW* = ptr TOLEUIINSERTOBJECTW
  LPOLEUIINSERTOBJECTW* = ptr TOLEUIINSERTOBJECTW
  TOLEUIINSERTOBJECTA* {.final, pure.} = object # renamed from OLEUIINSERTOBJECTA
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCSTR
    hResource*: HRSRC
    clsid*: CLSID
    lpszFile*: LPSTR
    cchFile*: UINT
    cClsidExclude*: UINT
    lpClsidExclude*: LPCLSID
    iid*: IID
    oleRender*: DWORD
    lpFormatEtc*: LPFORMATETC
    lpIOleClientSite*: LPOLECLIENTSITE
    lpIStorage*: LPSTORAGE
    ppvObj*: ptr PVOID
    sc*: SCODE
    hMetaPict*: HGLOBAL
  POLEUIINSERTOBJECTA* = ptr TOLEUIINSERTOBJECTA
  LPOLEUIINSERTOBJECTA* = ptr TOLEUIINSERTOBJECTA

proc OleUIInsertObjectW*(P1: LPOLEUIINSERTOBJECTW): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIInsertObjectA*(P1: LPOLEUIINSERTOBJECTA): UINT {.winapi, dynlib: "oledlg", importc.}

const
  # OLEUIPASTEFLAG* = enum
  OLEUIPASTE_PASTEONLY* = 0
  OLEUIPASTE_LINKTYPE1* = 1
  OLEUIPASTE_LINKTYPE2* = 2
  OLEUIPASTE_LINKTYPE3* = 4
  OLEUIPASTE_LINKTYPE4* = 8
  OLEUIPASTE_LINKTYPE5* = 16
  OLEUIPASTE_LINKTYPE6* = 32
  OLEUIPASTE_LINKTYPE7* = 64
  OLEUIPASTE_LINKTYPE8* = 128
  OLEUIPASTE_PASTE* = 512
  OLEUIPASTE_LINKANYTYPE* = 1024
  OLEUIPASTE_ENABLEICON* = 2048

type
  OLEUIPASTEFLAG* = int32
  OLEUIPASTEENTRYW* {.final, pure.} = object
    fmtetc*: FORMATETC
    lpstrFormatName*: LPCWSTR
    lpstrResultText*: LPCWSTR
    dwFlags*: DWORD
    dwScratchSpace*: DWORD
  POLEUIPASTEENTRYW* = ptr OLEUIPASTEENTRYW
  LPOLEUIPASTEENTRYW* = ptr OLEUIPASTEENTRYW
  OLEUIPASTEENTRYA* {.final, pure.} = object
    fmtetc*: FORMATETC
    lpstrFormatName*: LPCSTR
    lpstrResultText*: LPCSTR
    dwFlags*: DWORD
    dwScratchSpace*: DWORD
  POLEUIPASTEENTRYA* = ptr OLEUIPASTEENTRYA
  LPOLEUIPASTEENTRYA* = ptr OLEUIPASTEENTRYA
  TOLEUIPASTESPECIALW* {.final, pure.} = object # renamed from OLEUIPASTESPECIALW
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCWSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCWSTR
    hResource*: HRSRC
    lpSrcDataObj*: LPDATAOBJECT
    arrPasteEntries*: LPOLEUIPASTEENTRYW
    cPasteEntries*: int32
    arrLinkTypes*: ptr UINT
    cLinkTypes*: int32
    cClsidExclude*: UINT
    lpClsidExclude*: LPCLSID
    nSelectedIndex*: int32
    fLink*: BOOL
    hMetaPict*: HGLOBAL
    sizel*: SIZEL
  POLEUIPASTESPECIALW* = ptr TOLEUIPASTESPECIALW
  LPOLEUIPASTESPECIALW* = ptr TOLEUIPASTESPECIALW
  TOLEUIPASTESPECIALA* {.final, pure.} = object # renamed from OLEUIPASTESPECIALA
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCSTR
    hResource*: HRSRC
    lpSrcDataObj*: LPDATAOBJECT
    arrPasteEntries*: LPOLEUIPASTEENTRYA
    cPasteEntries*: int32
    arrLinkTypes*: ptr UINT
    cLinkTypes*: int32
    cClsidExclude*: UINT
    lpClsidExclude*: LPCLSID
    nSelectedIndex*: int32
    fLink*: BOOL
    hMetaPict*: HGLOBAL
    sizel*: SIZEL
  POLEUIPASTESPECIALA* = ptr TOLEUIPASTESPECIALA
  LPOLEUIPASTESPECIALA* = ptr TOLEUIPASTESPECIALA
  IOleUILinkContainerW* {.pure.} = object
    lpVtbl*: ptr IOleUILinkContainerWVtbl
  IOleUILinkContainerWVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetNextLink*: proc(self: ptr IOleUILinkContainerW, dwLink: DWORD): DWORD {.stdcall.}
    SetLinkUpdateOptions*: proc(self: ptr IOleUILinkContainerW, P1: DWORD, P2: DWORD): HRESULT {.stdcall.}
    GetLinkUpdateOptions*: proc(self: ptr IOleUILinkContainerW, P1: DWORD, P2: PDWORD): HRESULT {.stdcall.}
    SetLinkSource*: proc(self: ptr IOleUILinkContainerW, P1: DWORD, P2: LPWSTR, P3: ULONG, P4: PULONG, P5: BOOL): HRESULT {.stdcall.}
    GetLinkSource*: proc(self: ptr IOleUILinkContainerW, P1: DWORD, P2: ptr LPWSTR, P3: PULONG, P4: ptr LPWSTR, P5: ptr LPWSTR, P6: ptr BOOL, P7: ptr BOOL): HRESULT {.stdcall.}
    OpenLinkSource*: proc(self: ptr IOleUILinkContainerW, P1: DWORD): HRESULT {.stdcall.}
    UpdateLink*: proc(self: ptr IOleUILinkContainerW, P1: DWORD, P2: BOOL, P3: BOOL): HRESULT {.stdcall.}
    CancelLink*: proc(self: ptr IOleUILinkContainerW, P1: DWORD): HRESULT {.stdcall.}
  LPOLEUILINKCONTAINERW* = ptr IOleUILinkContainerW
  IOleUILinkContainerA* {.pure.} = object
    lpVtbl*: ptr IOleUILinkContainerAVtbl
  IOleUILinkContainerAVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetNextLink*: proc(self: ptr IOleUILinkContainerA, P1: DWORD): DWORD {.stdcall.}
    SetLinkUpdateOptions*: proc(self: ptr IOleUILinkContainerA, P1: DWORD, P2: DWORD): HRESULT {.stdcall.}
    GetLinkUpdateOptions*: proc(self: ptr IOleUILinkContainerA, P1: DWORD, P2: PDWORD): HRESULT {.stdcall.}
    SetLinkSource*: proc(self: ptr IOleUILinkContainerA, P1: DWORD, P2: LPSTR, P3: ULONG, P4: PULONG, P5: BOOL): HRESULT {.stdcall.}
    GetLinkSource*: proc(self: ptr IOleUILinkContainerA, P1: DWORD, P2: ptr LPSTR, P3: PULONG, P4: ptr LPSTR, P5: ptr LPSTR, P6: ptr BOOL, P7: ptr BOOL): HRESULT {.stdcall.}
    OpenLinkSource*: proc(self: ptr IOleUILinkContainerA, P1: DWORD): HRESULT {.stdcall.}
    UpdateLink*: proc(self: ptr IOleUILinkContainerA, P1: DWORD, P2: BOOL, P3: BOOL): HRESULT {.stdcall.}
    CancelLink*: proc(self: ptr IOleUILinkContainerA, P1: DWORD): HRESULT {.stdcall.}
  LPOLEUILINKCONTAINERA* = ptr IOleUILinkContainerA
  TOLEUIEDITLINKSW* {.final, pure.} = object # renamed from OLEUIEDITLINKSW
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCWSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCWSTR
    hResource*: HRSRC
    lpOleUILinkContainer*: LPOLEUILINKCONTAINERW
  POLEUIEDITLINKSW* = ptr TOLEUIEDITLINKSW
  LPOLEUIEDITLINKSW* = ptr TOLEUIEDITLINKSW
  TOLEUIEDITLINKSA* {.final, pure.} = object # renamed from OLEUIEDITLINKSA
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCSTR
    hResource*: HRSRC
    lpOleUILinkContainer*: LPOLEUILINKCONTAINERA
  POLEUIEDITLINKSA* = ptr TOLEUIEDITLINKSA
  LPOLEUIEDITLINKSA* = ptr TOLEUIEDITLINKSA
  TOLEUICHANGEICONW* {.final, pure.} = object # renamed from OLEUICHANGEICONW
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCWSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCWSTR
    hResource*: HRSRC
    hMetaPict*: HGLOBAL
    clsid*: CLSID
    szIconExe*: array[MAX_PATH, WCHAR]
    cchIconExe*: int32
  POLEUICHANGEICONW* = ptr TOLEUICHANGEICONW
  LPOLEUICHANGEICONW* = ptr TOLEUICHANGEICONW
  TOLEUICHANGEICONA* {.final, pure.} = object # renamed from OLEUICHANGEICONA
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCSTR
    hResource*: HRSRC
    hMetaPict*: HGLOBAL
    clsid*: CLSID
    szIconExe*: array[MAX_PATH, CHAR]
    cchIconExe*: int32
  POLEUICHANGEICONA* = ptr TOLEUICHANGEICONA
  LPOLEUICHANGEICONA* = ptr TOLEUICHANGEICONA
  TOLEUICONVERTW* {.final, pure.} = object # renamed from OLEUICONVERTW
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCWSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCWSTR
    hResource*: HRSRC
    clsid*: CLSID
    clsidConvertDefault*: CLSID
    clsidActivateDefault*: CLSID
    clsidNew*: CLSID
    dvAspect*: DWORD
    wFormat*: WORD
    fIsLinkedObject*: BOOL
    hMetaPict*: HGLOBAL
    lpszUserType*: LPWSTR
    fObjectsIconChanged*: BOOL
    lpszDefLabel*: LPWSTR
    cClsidExclude*: UINT
    lpClsidExclude*: LPCLSID
  POLEUICONVERTW* = ptr TOLEUICONVERTW
  LPOLEUICONVERTW* = ptr TOLEUICONVERTW
  TOLEUICONVERTA* {.final, pure.} = object # renamed from OLEUICONVERTA
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCSTR
    hResource*: HRSRC
    clsid*: CLSID
    clsidConvertDefault*: CLSID
    clsidActivateDefault*: CLSID
    clsidNew*: CLSID
    dvAspect*: DWORD
    wFormat*: WORD
    fIsLinkedObject*: BOOL
    hMetaPict*: HGLOBAL
    lpszUserType*: LPSTR
    fObjectsIconChanged*: BOOL
    lpszDefLabel*: LPSTR
    cClsidExclude*: UINT
    lpClsidExclude*: LPCLSID
  POLEUICONVERTA* = ptr TOLEUICONVERTA
  LPOLEUICONVERTA* = ptr TOLEUICONVERTA
  TOLEUIBUSYW* {.final, pure.} = object # renamed from OLEUIBUSYW
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCWSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCWSTR
    hResource*: HRSRC
    hTask*: HTASK
    lphWndDialog*: ptr HWND
  POLEUIBUSYW* = ptr TOLEUIBUSYW
  LPOLEUIBUSYW* = ptr TOLEUIBUSYW
  TOLEUIBUSYA* {.final, pure.} = object # renamed from OLEUIBUSYA
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCSTR
    hResource*: HRSRC
    hTask*: HTASK
    lphWndDialog*: ptr HWND
  POLEUIBUSYA* = ptr TOLEUIBUSYA
  LPOLEUIBUSYA* = ptr TOLEUIBUSYA
  TOLEUICHANGESOURCEW* {.final, pure.} = object # renamed from OLEUICHANGESOURCEW
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCWSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCWSTR
    hResource*: HRSRC
    lpOFN*: ptr OPENFILENAMEW
    dwReserved1*: array[4, DWORD]
    lpOleUILinkContainer*: LPOLEUILINKCONTAINERW
    dwLink*: DWORD
    lpszDisplayName*: LPWSTR
    nFileLength*: ULONG
    lpszFrom*: LPWSTR
    lpszTo*: LPWSTR
  POLEUICHANGESOURCEW* = ptr TOLEUICHANGESOURCEW
  LPOLEUICHANGESOURCEW* = ptr TOLEUICHANGESOURCEW
  TOLEUICHANGESOURCEA* {.final, pure.} = object # renamed from OLEUICHANGESOURCEA
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCSTR
    hResource*: HRSRC
    lpOFN*: ptr OPENFILENAMEA
    dwReserved1*: array[4, DWORD]
    lpOleUILinkContainer*: LPOLEUILINKCONTAINERA
    dwLink*: DWORD
    lpszDisplayName*: LPSTR
    nFileLength*: ULONG
    lpszFrom*: LPSTR
    lpszTo*: LPSTR
  POLEUICHANGESOURCEA* = ptr TOLEUICHANGESOURCEA
  LPOLEUICHANGESOURCEA* = ptr TOLEUICHANGESOURCEA
  IOleUIObjInfoW* {.pure.} = object
    lpVtbl*: ptr IOleUIObjInfoWVtbl
  IOleUIObjInfoWVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetObjectInfo*: proc(self: ptr IOleUIObjInfoW, P1: DWORD, P2: PDWORD, P3: ptr LPWSTR, P4: ptr LPWSTR, P5: ptr LPWSTR, P6: ptr LPWSTR): HRESULT {.stdcall.}
    GetConvertInfo*: proc(self: ptr IOleUIObjInfoW, P1: DWORD, P2: ptr CLSID, P3: PWORD, P4: ptr CLSID, P5: ptr LPCLSID, P6: ptr UINT): HRESULT {.stdcall.}
    ConvertObject*: proc(self: ptr IOleUIObjInfoW, P1: DWORD, P2: REFCLSID): HRESULT {.stdcall.}
    GetViewInfo*: proc(self: ptr IOleUIObjInfoW, P1: DWORD, P2: ptr HGLOBAL, P3: PDWORD, P4: ptr int32): HRESULT {.stdcall.}
    SetViewInfo*: proc(self: ptr IOleUIObjInfoW, P1: DWORD, P2: HGLOBAL, P3: DWORD, P4: int32, P5: BOOL): HRESULT {.stdcall.}
  LPOLEUIOBJINFOW* = ptr IOleUIObjInfoW
  IOleUIObjInfoA* {.pure.} = object
    lpVtbl*: ptr IOleUIObjInfoAVtbl
  IOleUIObjInfoAVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetObjectInfo*: proc(self: ptr IOleUIObjInfoA, P1: DWORD, P2: PDWORD, P3: ptr LPSTR, P4: ptr LPSTR, P5: ptr LPSTR, P6: ptr LPSTR): HRESULT {.stdcall.}
    GetConvertInfo*: proc(self: ptr IOleUIObjInfoA, P1: DWORD, P2: ptr CLSID, P3: PWORD, P4: ptr CLSID, P5: ptr LPCLSID, P6: ptr UINT): HRESULT {.stdcall.}
    ConvertObject*: proc(self: ptr IOleUIObjInfoA, P1: DWORD, P2: REFCLSID): HRESULT {.stdcall.}
    GetViewInfo*: proc(self: ptr IOleUIObjInfoA, P1: DWORD, P2: ptr HGLOBAL, P3: PDWORD, P4: ptr int32): HRESULT {.stdcall.}
    SetViewInfo*: proc(self: ptr IOleUIObjInfoA, P1: DWORD, P2: HGLOBAL, P3: DWORD, P4: int32, P5: BOOL): HRESULT {.stdcall.}
  LPOLEUIOBJINFOA* = ptr IOleUIObjInfoA
  IOleUILinkInfoW* {.pure.} = object
    lpVtbl*: ptr IOleUILinkInfoWVtbl
  IOleUILinkInfoWVtbl* {.pure, inheritable.} = object of IOleUILinkContainerWVtbl
    GetLastUpdate*: proc(self: ptr IOleUILinkInfoW, P1: DWORD, P2: ptr FILETIME): HRESULT {.stdcall.}
  LPOLEUILINKINFOW* = ptr IOleUILinkInfoW
  IOleUILinkInfoA* {.pure.} = object
    lpVtbl*: ptr IOleUILinkInfoAVtbl
  IOleUILinkInfoAVtbl* {.pure, inheritable.} = object of IOleUILinkContainerAVtbl
    GetLastUpdate*: proc(self: ptr IOleUILinkInfoA, P1: DWORD, P2: ptr FILETIME): HRESULT {.stdcall.}
  LPOLEUILINKINFOA* = ptr IOleUILinkInfoA
  OLEUIGNRLPROPSW* {.final, pure.} = object
    cbStruct*: DWORD
    dwFlags*: DWORD
    dwReserved1*: array[2, DWORD]
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    dwReserved2*: array[3, DWORD]
    lpOP*: ptr OLEUIOBJECTPROPSW
  POLEUIGNRLPROPSW* = ptr OLEUIGNRLPROPSW
  LPOLEUIGNRLPROPSW* = ptr OLEUIGNRLPROPSW
  OLEUIGNRLPROPSA* {.final, pure.} = object
    cbStruct*: DWORD
    dwFlags*: DWORD
    dwReserved1*: array[2, DWORD]
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    dwReserved2*: array[3, DWORD]
    lpOP*: ptr OLEUIOBJECTPROPSA
  POLEUIGNRLPROPSA* = ptr OLEUIGNRLPROPSA
  LPOLEUIGNRLPROPSA* = ptr OLEUIGNRLPROPSA
  OLEUIVIEWPROPSW* {.final, pure.} = object
    cbStruct*: DWORD
    dwFlags*: DWORD
    dwReserved1*: array[2, DWORD]
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    dwReserved2*: array[3, DWORD]
    lpOP*: ptr OLEUIOBJECTPROPSW
    nScaleMin*: int32
    nScaleMax*: int32
  POLEUIVIEWPROPSW* = ptr OLEUIVIEWPROPSW
  LPOLEUIVIEWPROPSW* = ptr OLEUIVIEWPROPSW
  OLEUIVIEWPROPSA* {.final, pure.} = object
    cbStruct*: DWORD
    dwFlags*: DWORD
    dwReserved1*: array[2, DWORD]
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    dwReserved2*: array[3, DWORD]
    lpOP*: ptr OLEUIOBJECTPROPSA
    nScaleMin*: int32
    nScaleMax*: int32
  POLEUIVIEWPROPSA* = ptr OLEUIVIEWPROPSA
  LPOLEUIVIEWPROPSA* = ptr OLEUIVIEWPROPSA
  OLEUILINKPROPSW* {.final, pure.} = object
    cbStruct*: DWORD
    dwFlags*: DWORD
    dwReserved1*: array[2, DWORD]
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    dwReserved2*: array[3, DWORD]
    lpOP*: ptr OLEUIOBJECTPROPSW
  POLEUILINKPROPSW* = ptr OLEUILINKPROPSW
  LPOLEUILINKPROPSW* = ptr OLEUILINKPROPSW
  OLEUILINKPROPSA* {.final, pure.} = object
    cbStruct*: DWORD
    dwFlags*: DWORD
    dwReserved1*: array[2, DWORD]
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    dwReserved2*: array[3, DWORD]
    lpOP*: ptr OLEUIOBJECTPROPSA
  POLEUILINKPROPSA* = ptr OLEUILINKPROPSA
  LPOLEUILINKPROPSA* = ptr OLEUILINKPROPSA
  OLEUIOBJECTPROPSW* {.final, pure.} = object
    cbStruct*: DWORD
    dwFlags*: DWORD
    lpPS*: LPPROPSHEETHEADERW
    dwObject*: DWORD
    lpObjInfo*: LPOLEUIOBJINFOW
    dwLink*: DWORD
    lpLinkInfo*: LPOLEUILINKINFOW
    lpGP*: LPOLEUIGNRLPROPSW
    lpVP*: LPOLEUIVIEWPROPSW
    lpLP*: LPOLEUILINKPROPSW
  POLEUIOBJECTPROPSW* = ptr OLEUIOBJECTPROPSW
  LPOLEUIOBJECTPROPSW* = ptr OLEUIOBJECTPROPSW
  OLEUIOBJECTPROPSA* {.final, pure.} = object
    cbStruct*: DWORD
    dwFlags*: DWORD
    lpPS*: LPPROPSHEETHEADERA
    dwObject*: DWORD
    lpObjInfo*: LPOLEUIOBJINFOA
    dwLink*: DWORD
    lpLinkInfo*: LPOLEUILINKINFOA
    lpGP*: LPOLEUIGNRLPROPSA
    lpVP*: LPOLEUIVIEWPROPSA
    lpLP*: LPOLEUILINKPROPSA
  POLEUIOBJECTPROPSA* = ptr OLEUIOBJECTPROPSA
  LPOLEUIOBJECTPROPSA* = ptr OLEUIOBJECTPROPSA
proc OleUIAddVerbMenuW*(P1: LPOLEOBJECT, P2: LPCWSTR, P3: HMENU, P4: UINT, P5: UINT, P6: UINT, P7: BOOL, P8: UINT, P9: ptr HMENU): BOOL {.winapi, dynlib: "oledlg", importc.}
proc OleUIAddVerbMenuA*(P1: LPOLEOBJECT, P2: LPCSTR, P3: HMENU, P4: UINT, P5: UINT, P6: UINT, P7: BOOL, P8: UINT, P9: ptr HMENU): BOOL {.winapi, dynlib: "oledlg", importc.}
proc OleUIBusyW*(P1: LPOLEUIBUSYW): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIBusyA*(P1: LPOLEUIBUSYA): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUICanConvertOrActivateAs*(P1: REFCLSID, P2: BOOL, P3: WORD): BOOL {.winapi, dynlib: "oledlg", importc.}
proc OleUIChangeIconW*(P1: LPOLEUICHANGEICONW): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIChangeIconA*(P1: LPOLEUICHANGEICONA): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIChangeSourceW*(P1: LPOLEUICHANGESOURCEW): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIChangeSourceA*(P1: LPOLEUICHANGESOURCEA): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIConvertW*(P1: LPOLEUICONVERTW): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIConvertA*(P1: LPOLEUICONVERTA): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIEditLinksW*(P1: LPOLEUIEDITLINKSW): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIEditLinksA*(P1: LPOLEUIEDITLINKSA): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIObjectPropertiesW*(P1: LPOLEUIOBJECTPROPSW): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIObjectPropertiesA*(P1: LPOLEUIOBJECTPROPSA): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIPasteSpecialW*(P1: LPOLEUIPASTESPECIALW): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIPasteSpecialA*(P1: LPOLEUIPASTESPECIALA): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIUpdateLinksW*(P1: LPOLEUILINKCONTAINERW, P2: HWND, P3: LPWSTR, P4: int32): BOOL {.winapi, dynlib: "oledlg", importc.}
proc OleUIUpdateLinksA*(P1: LPOLEUILINKCONTAINERA, P2: HWND, P3: LPSTR, P4: int32): BOOL {.winapi, dynlib: "oledlg", importc.}
proc OleUIPromptUserW*(P1: int32, P2: HWND): int32 {.winapi, dynlib: "oledlg", varargs, importc.}
proc OleUIPromptUserA*(P1: int32, P2: HWND): int32 {.winapi, dynlib: "oledlg", varargs, importc.}

when not defined(winansi):
  const
    IDD_SERVERNOTREG* = IDD_SERVERNOTREGW
    IDD_LINKTYPECHANGED* = IDD_LINKTYPECHANGEDW

  proc OleUIUpdateLinks*(P1: LPOLEUILINKCONTAINERW, P2: HWND, P3: LPWSTR, P4: int32): BOOL {.winapi, dynlib: "oledlg", importc: "OleUIUpdateLinksW".}
  proc OleUIAddVerbMenu*(P1: LPOLEOBJECT, P2: LPCWSTR, P3: HMENU, P4: UINT, P5: UINT, P6: UINT, P7: BOOL, P8: UINT, P9: ptr HMENU): BOOL {.winapi, dynlib: "oledlg", importc: "OleUIAddVerbMenuW".}

  type
    OLEUIOBJECTPROPS* = OLEUIOBJECTPROPSW
    POLEUIOBJECTPROPS* = POLEUIOBJECTPROPSW
    LPOLEUIOBJECTPROPS* = LPOLEUIOBJECTPROPSW

  proc OleUIObjectProperties*(P1: LPOLEUIOBJECTPROPSW): UINT {.winapi, dynlib: "oledlg", importc: "OleUIObjectPropertiesW".}

  type
    TOLEUIINSERTOBJECT* = TOLEUIINSERTOBJECTW
    POLEUIINSERTOBJECT* = POLEUIINSERTOBJECTW
    LPOLEUIINSERTOBJECT* = LPOLEUIINSERTOBJECTW

  proc OleUIInsertObject*(P1: LPOLEUIINSERTOBJECTW): UINT {.winapi, dynlib: "oledlg", importc: "OleUIInsertObjectW".}
  proc OleUIPromptUser*(P1: int32, P2: HWND): int32 {.winapi, dynlib: "oledlg", varargs, importc: "OleUIPromptUserW".}

  type
    OLEUIPASTEENTRY* = OLEUIPASTEENTRYW
    POLEUIPASTEENTRY* = POLEUIPASTEENTRYW
    LPOLEUIPASTEENTRY* = LPOLEUIPASTEENTRYW
    TOLEUIPASTESPECIAL* = TOLEUIPASTESPECIALW
    POLEUIPASTESPECIAL* = POLEUIPASTESPECIALW
    LPOLEUIPASTESPECIAL* = LPOLEUIPASTESPECIALW

  proc OleUIPasteSpecial*(P1: LPOLEUIPASTESPECIALW): UINT {.winapi, dynlib: "oledlg", importc: "OleUIPasteSpecialW".}

  type
    IOleUILinkContainer* = ptr IOleUILinkContainerW
    LPOLEUILINKCONTAINER* = LPOLEUILINKCONTAINERW
    TOLEUIEDITLINKS* = TOLEUIEDITLINKSW
    POLEUIEDITLINKS* = POLEUIEDITLINKSW
    LPOLEUIEDITLINKS* = LPOLEUIEDITLINKSW

  proc OleUIEditLinks*(P1: LPOLEUIEDITLINKSW): UINT {.winapi, dynlib: "oledlg", importc: "OleUIEditLinksW".}

  type
    TOLEUICHANGEICON* = TOLEUICHANGEICONW
    POLEUICHANGEICON* = POLEUICHANGEICONW
    LPOLEUICHANGEICON* = LPOLEUICHANGEICONW

  proc OleUIChangeIcon*(P1: LPOLEUICHANGEICONW): UINT {.winapi, dynlib: "oledlg", importc: "OleUIChangeIconW".}

  type
    TOLEUICONVERT* = TOLEUICONVERTW
    POLEUICONVERT* = POLEUICONVERTW
    LPOLEUICONVERT* = LPOLEUICONVERTW

  proc OleUIConvert*(P1: LPOLEUICONVERTW): UINT {.winapi, dynlib: "oledlg", importc: "OleUIConvertW".}

  type
    TOLEUIBUSY* = TOLEUIBUSYW
    POLEUIBUSY* = POLEUIBUSYW
    LPOLEUIBUSY* = LPOLEUIBUSYW

  proc OleUIBusy*(P1: LPOLEUIBUSYW): UINT {.winapi, dynlib: "oledlg", importc: "OleUIBusyW".}

  type
    TOLEUICHANGESOURCE* = TOLEUICHANGESOURCEW
    POLEUICHANGESOURCE* = POLEUICHANGESOURCEW
    LPOLEUICHANGESOURCE* = LPOLEUICHANGESOURCEW

  proc OleUIChangeSource*(P1: LPOLEUICHANGESOURCEW): UINT {.winapi, dynlib: "oledlg", importc: "OleUIChangeSourceW".}

  type
    IOleUIObjInfo* = ptr IOleUIObjInfoW
    LPOLEUIOBJINFO* = LPOLEUIOBJINFOW
    IOleUILinkInfo* = ptr IOleUILinkInfoW
    LPOLEUILINKINFO* = LPOLEUILINKINFOW
    OLEUIGNRLPROPS* = OLEUIGNRLPROPSW
    POLEUIGNRLPROPS* = POLEUIGNRLPROPSW
    LPOLEUIGNRLPROPS* = LPOLEUIGNRLPROPSW
    OLEUIVIEWPROPS* = OLEUIVIEWPROPSW
    POLEUIVIEWPROPS* = POLEUIVIEWPROPSW
    LPOLEUIVIEWPROPS* = LPOLEUIVIEWPROPSW
    OLEUILINKPROPS* = OLEUILINKPROPSW
    POLEUILINKPROPS* = POLEUILINKPROPSW
    LPOLEUILINKPROPS* = LPOLEUILINKPROPSW

else:
  const
    IDD_SERVERNOTREG* = IDD_SERVERNOTREGA
    IDD_LINKTYPECHANGED* = IDD_LINKTYPECHANGEDA

  proc OleUIUpdateLinks*(P1: LPOLEUILINKCONTAINERA, P2: HWND, P3: LPSTR, P4: int32): BOOL {.winapi, dynlib: "oledlg", importc: "OleUIUpdateLinksA".}
  proc OleUIAddVerbMenu*(P1: LPOLEOBJECT, P2: LPCSTR, P3: HMENU, P4: UINT, P5: UINT, P6: UINT, P7: BOOL, P8: UINT, P9: ptr HMENU): BOOL {.winapi, dynlib: "oledlg", importc: "OleUIAddVerbMenuA".}

  type
    OLEUIOBJECTPROPS* = OLEUIOBJECTPROPSA
    POLEUIOBJECTPROPS* = POLEUIOBJECTPROPSA
    LPOLEUIOBJECTPROPS* = LPOLEUIOBJECTPROPSA

  proc OleUIObjectProperties*(P1: LPOLEUIOBJECTPROPSA): UINT {.winapi, dynlib: "oledlg", importc: "OleUIObjectPropertiesA".}

  type
    TOLEUIINSERTOBJECT* = TOLEUIINSERTOBJECTA
    POLEUIINSERTOBJECT* = POLEUIINSERTOBJECTA
    LPOLEUIINSERTOBJECT* = LPOLEUIINSERTOBJECTA

  proc OleUIInsertObject*(P1: LPOLEUIINSERTOBJECTA): UINT {.winapi, dynlib: "oledlg", importc: "OleUIInsertObjectA".}
  proc OleUIPromptUser*(P1: int32, P2: HWND): int32 {.winapi, dynlib: "oledlg", varargs, importc: "OleUIPromptUserA".}

  type
    OLEUIPASTEENTRY* = OLEUIPASTEENTRYA
    POLEUIPASTEENTRY* = POLEUIPASTEENTRYA
    LPOLEUIPASTEENTRY* = LPOLEUIPASTEENTRYA
    TOLEUIPASTESPECIAL* = TOLEUIPASTESPECIALA
    POLEUIPASTESPECIAL* = POLEUIPASTESPECIALA
    LPOLEUIPASTESPECIAL* = LPOLEUIPASTESPECIALA

  proc OleUIPasteSpecial*(P1: LPOLEUIPASTESPECIALA): UINT {.winapi, dynlib: "oledlg", importc: "OleUIPasteSpecialA".}

  type
    IOleUILinkContainer* = ptr IOleUILinkContainerA
    LPOLEUILINKCONTAINER* = LPOLEUILINKCONTAINERA
    TOLEUIEDITLINKS* = TOLEUIEDITLINKSA
    POLEUIEDITLINKS* = POLEUIEDITLINKSA
    LPOLEUIEDITLINKS* = LPOLEUIEDITLINKSA

  proc OleUIEditLinks*(P1: LPOLEUIEDITLINKSA): UINT {.winapi, dynlib: "oledlg", importc: "OleUIEditLinksA".}

  type
    TOLEUICHANGEICON* = TOLEUICHANGEICONA
    POLEUICHANGEICON* = POLEUICHANGEICONA
    LPOLEUICHANGEICON* = LPOLEUICHANGEICONA

  proc OleUIChangeIcon*(P1: LPOLEUICHANGEICONA): UINT {.winapi, dynlib: "oledlg", importc: "OleUIChangeIconA".}

  type
    TOLEUICONVERT* = TOLEUICONVERTA
    POLEUICONVERT* = POLEUICONVERTA
    LPOLEUICONVERT* = LPOLEUICONVERTA

  proc OleUIConvert*(P1: LPOLEUICONVERTA): UINT {.winapi, dynlib: "oledlg", importc: "OleUIConvertA".}

  type
    TOLEUIBUSY* = TOLEUIBUSYA
    POLEUIBUSY* = POLEUIBUSYA
    LPOLEUIBUSY* = LPOLEUIBUSYA

  proc OleUIBusy*(P1: LPOLEUIBUSYA): UINT {.winapi, dynlib: "oledlg", importc: "OleUIBusyA".}

  type
    TOLEUICHANGESOURCE* = TOLEUICHANGESOURCEA
    POLEUICHANGESOURCE* = POLEUICHANGESOURCEA
    LPOLEUICHANGESOURCE* = LPOLEUICHANGESOURCEA

  proc OleUIChangeSource*(P1: LPOLEUICHANGESOURCEA): UINT {.winapi, dynlib: "oledlg", importc: "OleUIChangeSourceA".}

  type
    IOleUIObjInfo* = ptr IOleUIObjInfoA
    LPOLEUIOBJINFO* = LPOLEUIOBJINFOA
    IOleUILinkInfo* = ptr IOleUILinkInfoA
    LPOLEUILINKINFO* = LPOLEUILINKINFOA
    OLEUIGNRLPROPS* = OLEUIGNRLPROPSA
    POLEUIGNRLPROPS* = POLEUIGNRLPROPSA
    LPOLEUIGNRLPROPS* = LPOLEUIGNRLPROPSA
    OLEUIVIEWPROPS* = OLEUIVIEWPROPSA
    POLEUIVIEWPROPS* = POLEUIVIEWPROPSA
    LPOLEUIVIEWPROPS* = LPOLEUIVIEWPROPSA
    OLEUILINKPROPS* = OLEUILINKPROPSA
    POLEUILINKPROPS* = POLEUILINKPROPSA
    LPOLEUILINKPROPS* = LPOLEUILINKPROPSA

converter winim_converter_IOleUILinkContainerW*(x: ptr IOleUILinkContainerW): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IOleUILinkContainerW, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IOleUILinkContainerW): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IOleUILinkContainerW): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetNextLink*(self: ptr IOleUILinkContainerW, dwLink: DWORD): DWORD {.inline, discardable.} = self.lpVtbl.GetNextLink(self, dwLink)
proc SetLinkUpdateOptions*(self: ptr IOleUILinkContainerW, P1: DWORD, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetLinkUpdateOptions(self, P1, P2)
proc GetLinkUpdateOptions*(self: ptr IOleUILinkContainerW, P1: DWORD, P2: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetLinkUpdateOptions(self, P1, P2)
proc SetLinkSource*(self: ptr IOleUILinkContainerW, P1: DWORD, P2: LPWSTR, P3: ULONG, P4: PULONG, P5: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetLinkSource(self, P1, P2, P3, P4, P5)
proc GetLinkSource*(self: ptr IOleUILinkContainerW, P1: DWORD, P2: ptr LPWSTR, P3: PULONG, P4: ptr LPWSTR, P5: ptr LPWSTR, P6: ptr BOOL, P7: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetLinkSource(self, P1, P2, P3, P4, P5, P6, P7)
proc OpenLinkSource*(self: ptr IOleUILinkContainerW, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OpenLinkSource(self, P1)
proc UpdateLink*(self: ptr IOleUILinkContainerW, P1: DWORD, P2: BOOL, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateLink(self, P1, P2, P3)
proc CancelLink*(self: ptr IOleUILinkContainerW, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.CancelLink(self, P1)
converter winim_converter_IOleUILinkContainerA*(x: ptr IOleUILinkContainerA): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IOleUILinkContainerA, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IOleUILinkContainerA): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IOleUILinkContainerA): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetNextLink*(self: ptr IOleUILinkContainerA, P1: DWORD): DWORD {.inline, discardable.} = self.lpVtbl.GetNextLink(self, P1)
proc SetLinkUpdateOptions*(self: ptr IOleUILinkContainerA, P1: DWORD, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetLinkUpdateOptions(self, P1, P2)
proc GetLinkUpdateOptions*(self: ptr IOleUILinkContainerA, P1: DWORD, P2: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetLinkUpdateOptions(self, P1, P2)
proc SetLinkSource*(self: ptr IOleUILinkContainerA, P1: DWORD, P2: LPSTR, P3: ULONG, P4: PULONG, P5: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetLinkSource(self, P1, P2, P3, P4, P5)
proc GetLinkSource*(self: ptr IOleUILinkContainerA, P1: DWORD, P2: ptr LPSTR, P3: PULONG, P4: ptr LPSTR, P5: ptr LPSTR, P6: ptr BOOL, P7: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetLinkSource(self, P1, P2, P3, P4, P5, P6, P7)
proc OpenLinkSource*(self: ptr IOleUILinkContainerA, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OpenLinkSource(self, P1)
proc UpdateLink*(self: ptr IOleUILinkContainerA, P1: DWORD, P2: BOOL, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateLink(self, P1, P2, P3)
proc CancelLink*(self: ptr IOleUILinkContainerA, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.CancelLink(self, P1)
converter winim_converter_IOleUIObjInfoW*(x: ptr IOleUIObjInfoW): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IOleUIObjInfoW, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IOleUIObjInfoW): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IOleUIObjInfoW): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetObjectInfo*(self: ptr IOleUIObjInfoW, P1: DWORD, P2: PDWORD, P3: ptr LPWSTR, P4: ptr LPWSTR, P5: ptr LPWSTR, P6: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetObjectInfo(self, P1, P2, P3, P4, P5, P6)
proc GetConvertInfo*(self: ptr IOleUIObjInfoW, P1: DWORD, P2: ptr CLSID, P3: PWORD, P4: ptr CLSID, P5: ptr LPCLSID, P6: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetConvertInfo(self, P1, P2, P3, P4, P5, P6)
proc ConvertObject*(self: ptr IOleUIObjInfoW, P1: DWORD, P2: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.ConvertObject(self, P1, P2)
proc GetViewInfo*(self: ptr IOleUIObjInfoW, P1: DWORD, P2: ptr HGLOBAL, P3: PDWORD, P4: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetViewInfo(self, P1, P2, P3, P4)
proc SetViewInfo*(self: ptr IOleUIObjInfoW, P1: DWORD, P2: HGLOBAL, P3: DWORD, P4: int32, P5: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetViewInfo(self, P1, P2, P3, P4, P5)
converter winim_converter_IOleUIObjInfoA*(x: ptr IOleUIObjInfoA): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IOleUIObjInfoA, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IOleUIObjInfoA): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IOleUIObjInfoA): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetObjectInfo*(self: ptr IOleUIObjInfoA, P1: DWORD, P2: PDWORD, P3: ptr LPSTR, P4: ptr LPSTR, P5: ptr LPSTR, P6: ptr LPSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetObjectInfo(self, P1, P2, P3, P4, P5, P6)
proc GetConvertInfo*(self: ptr IOleUIObjInfoA, P1: DWORD, P2: ptr CLSID, P3: PWORD, P4: ptr CLSID, P5: ptr LPCLSID, P6: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetConvertInfo(self, P1, P2, P3, P4, P5, P6)
proc ConvertObject*(self: ptr IOleUIObjInfoA, P1: DWORD, P2: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.ConvertObject(self, P1, P2)
proc GetViewInfo*(self: ptr IOleUIObjInfoA, P1: DWORD, P2: ptr HGLOBAL, P3: PDWORD, P4: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetViewInfo(self, P1, P2, P3, P4)
proc SetViewInfo*(self: ptr IOleUIObjInfoA, P1: DWORD, P2: HGLOBAL, P3: DWORD, P4: int32, P5: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetViewInfo(self, P1, P2, P3, P4, P5)
converter winim_converter_IOleUILinkInfoW*(x: ptr IOleUILinkInfoW): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOleUILinkInfoW*(x: ptr IOleUILinkInfoW): ptr IOleUILinkContainerW = cast[ptr IOleUILinkContainerW](x)
proc QueryInterface*(self: ptr IOleUILinkInfoW, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IOleUILinkInfoW): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IOleUILinkInfoW): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetNextLink*(self: ptr IOleUILinkInfoW, P1: DWORD): DWORD {.inline, discardable.} = self.lpVtbl.GetNextLink(self, P1)
proc SetLinkUpdateOptions*(self: ptr IOleUILinkInfoW, P1: DWORD, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetLinkUpdateOptions(self, P1, P2)
proc GetLinkUpdateOptions*(self: ptr IOleUILinkInfoW, P1: DWORD, P2: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetLinkUpdateOptions(self, P1, P2)
proc SetLinkSource*(self: ptr IOleUILinkInfoW, P1: DWORD, P2: LPWSTR, P3: ULONG, P4: PULONG, P5: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetLinkSource(self, P1, P2, P3, P4, P5)
proc GetLinkSource*(self: ptr IOleUILinkInfoW, P1: DWORD, P2: ptr LPWSTR, P3: PULONG, P4: ptr LPWSTR, P5: ptr LPWSTR, P6: ptr BOOL, P7: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetLinkSource(self, P1, P2, P3, P4, P5, P6, P7)
proc OpenLinkSource*(self: ptr IOleUILinkInfoW, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OpenLinkSource(self, P1)
proc UpdateLink*(self: ptr IOleUILinkInfoW, P1: DWORD, P2: BOOL, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateLink(self, P1, P2, P3)
proc CancelLink*(self: ptr IOleUILinkInfoW, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.CancelLink(self, P1)
proc GetLastUpdate*(self: ptr IOleUILinkInfoW, P1: DWORD, P2: ptr FILETIME): HRESULT {.inline, discardable.} = self.lpVtbl.GetLastUpdate(self, P1, P2)
converter winim_converter_IOleUILinkInfoA*(x: ptr IOleUILinkInfoA): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOleUILinkInfoA*(x: ptr IOleUILinkInfoA): ptr IOleUILinkContainerA = cast[ptr IOleUILinkContainerA](x)
proc QueryInterface*(self: ptr IOleUILinkInfoA, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IOleUILinkInfoA): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IOleUILinkInfoA): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetNextLink*(self: ptr IOleUILinkInfoA, P1: DWORD): DWORD {.inline, discardable.} = self.lpVtbl.GetNextLink(self, P1)
proc SetLinkUpdateOptions*(self: ptr IOleUILinkInfoA, P1: DWORD, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetLinkUpdateOptions(self, P1, P2)
proc GetLinkUpdateOptions*(self: ptr IOleUILinkInfoA, P1: DWORD, P2: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetLinkUpdateOptions(self, P1, P2)
proc SetLinkSource*(self: ptr IOleUILinkInfoA, P1: DWORD, P2: LPSTR, P3: ULONG, P4: PULONG, P5: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetLinkSource(self, P1, P2, P3, P4, P5)
proc GetLinkSource*(self: ptr IOleUILinkInfoA, P1: DWORD, P2: ptr LPSTR, P3: PULONG, P4: ptr LPSTR, P5: ptr LPSTR, P6: ptr BOOL, P7: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetLinkSource(self, P1, P2, P3, P4, P5, P6, P7)
proc OpenLinkSource*(self: ptr IOleUILinkInfoA, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OpenLinkSource(self, P1)
proc UpdateLink*(self: ptr IOleUILinkInfoA, P1: DWORD, P2: BOOL, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateLink(self, P1, P2, P3)
proc CancelLink*(self: ptr IOleUILinkInfoA, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.CancelLink(self, P1)
proc GetLastUpdate*(self: ptr IOleUILinkInfoA, P1: DWORD, P2: ptr FILETIME): HRESULT {.inline, discardable.} = self.lpVtbl.GetLastUpdate(self, P1, P2)

# objext/richole.nim

const
  REO_GETOBJ_NO_INTERFACES* = 0
  REO_GETOBJ_POLEOBJ* = 1
  REO_GETOBJ_PSTG* = 2
  REO_GETOBJ_POLESITE* = 4
  REO_GETOBJ_ALL_INTERFACES* = 7
  REO_CP_SELECTION* = 0xFFFFFFFF'u32
  REO_IOB_SELECTION* = 0xFFFFFFFF'u32
  REO_IOB_USE_CP* = 0xFFFFFFFE'u32
  REO_NULL* = 0
  REO_READWRITEMASK* = 0x3F
  REO_DONTNEEDPALETTE* = 32
  REO_BLANK* = 16
  REO_DYNAMICSIZE* = 8
  REO_INVERTEDSELECT* = 4
  REO_BELOWBASELINE* = 2
  REO_RESIZABLE* = 1
  REO_LINK* = 0x80000000'u32
  REO_STATIC* = 0x40000000
  REO_SELECTED* = 0x08000000
  REO_OPEN* = 0x4000000
  REO_INPLACEACTIVE* = 0x2000000
  REO_HILITED* = 0x1000000
  REO_LINKAVAILABLE* = 0x800000
  REO_GETMETAFILE* = 0x400000
  RECO_PASTE* = 0
  RECO_DROP* = 1
  RECO_COPY* = 2
  RECO_CUT* = 3
  RECO_DRAG* = 4

type
  REOBJECT* {.final, pure.} = object
    cbStruct*: DWORD
    cp*: LONG
    clsid*: CLSID
    poleobj*: LPOLEOBJECT
    pstg*: LPSTORAGE
    polesite*: LPOLECLIENTSITE
    sizel*: SIZEL
    dvaspect*: DWORD
    dwFlags*: DWORD
    dwUser*: DWORD
  IRichEditOle* {.pure.} = object
    lpVtbl*: ptr IRichEditOleVtbl
  IRichEditOleVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetClientSite*: proc(self: ptr IRichEditOle, P1: ptr LPOLECLIENTSITE): HRESULT {.stdcall.}
    GetObjectCount*: proc(self: ptr IRichEditOle): LONG {.stdcall.}
    GetLinkCount*: proc(self: ptr IRichEditOle): LONG {.stdcall.}
    GetObject*: proc(self: ptr IRichEditOle, P1: LONG, P2: ptr REOBJECT, P3: DWORD): HRESULT {.stdcall.}
    InsertObject*: proc(self: ptr IRichEditOle, P1: ptr REOBJECT): HRESULT {.stdcall.}
    ConvertObject*: proc(self: ptr IRichEditOle, P1: LONG, P2: REFCLSID, P3: LPCSTR): HRESULT {.stdcall.}
    ActivateAs*: proc(self: ptr IRichEditOle, P1: REFCLSID, P2: REFCLSID): HRESULT {.stdcall.}
    SetHostNames*: proc(self: ptr IRichEditOle, P1: LPCSTR, P2: LPCSTR): HRESULT {.stdcall.}
    SetLinkAvailable*: proc(self: ptr IRichEditOle, P1: LONG, P2: BOOL): HRESULT {.stdcall.}
    SetDvaspect*: proc(self: ptr IRichEditOle, P1: LONG, P2: DWORD): HRESULT {.stdcall.}
    HandsOffStorage*: proc(self: ptr IRichEditOle, P1: LONG): HRESULT {.stdcall.}
    SaveCompleted*: proc(self: ptr IRichEditOle, P1: LONG, P2: LPSTORAGE): HRESULT {.stdcall.}
    InPlaceDeactivate*: proc(self: ptr IRichEditOle): HRESULT {.stdcall.}
    ContextSensitiveHelp*: proc(self: ptr IRichEditOle, P1: BOOL): HRESULT {.stdcall.}
    GetClipboardData*: proc(self: ptr IRichEditOle, P1: ptr CHARRANGE, P2: DWORD, P3: ptr LPDATAOBJECT): HRESULT {.stdcall.}
    ImportDataObject*: proc(self: ptr IRichEditOle, P1: LPDATAOBJECT, P2: CLIPFORMAT, P3: HGLOBAL): HRESULT {.stdcall.}
  LPRICHEDITOLE* = ptr IRichEditOle
  IRichEditOleCallback* {.pure.} = object
    lpVtbl*: ptr IRichEditOleCallbackVtbl
  IRichEditOleCallbackVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetNewStorage*: proc(self: ptr IRichEditOleCallback, P1: ptr LPSTORAGE): HRESULT {.stdcall.}
    GetInPlaceContext*: proc(self: ptr IRichEditOleCallback, P1: ptr LPOLEINPLACEFRAME, P2: ptr LPOLEINPLACEUIWINDOW, P3: LPOLEINPLACEFRAMEINFO): HRESULT {.stdcall.}
    ShowContainerUI*: proc(self: ptr IRichEditOleCallback, P1: BOOL): HRESULT {.stdcall.}
    QueryInsertObject*: proc(self: ptr IRichEditOleCallback, P1: LPCLSID, P2: LPSTORAGE, P3: LONG): HRESULT {.stdcall.}
    DeleteObject*: proc(self: ptr IRichEditOleCallback, P1: LPOLEOBJECT): HRESULT {.stdcall.}
    QueryAcceptData*: proc(self: ptr IRichEditOleCallback, P1: LPDATAOBJECT, P2: ptr CLIPFORMAT, P3: DWORD, P4: BOOL, P5: HGLOBAL): HRESULT {.stdcall.}
    ContextSensitiveHelp*: proc(self: ptr IRichEditOleCallback, P1: BOOL): HRESULT {.stdcall.}
    GetClipboardData*: proc(self: ptr IRichEditOleCallback, P1: ptr CHARRANGE, P2: DWORD, P3: ptr LPDATAOBJECT): HRESULT {.stdcall.}
    GetDragDropEffect*: proc(self: ptr IRichEditOleCallback, P1: BOOL, P2: DWORD, P3: PDWORD): HRESULT {.stdcall.}
    GetContextMenu*: proc(self: ptr IRichEditOleCallback, P1: WORD, P2: LPOLEOBJECT, P3: ptr CHARRANGE, P4: ptr HMENU): HRESULT {.stdcall.}
  LPRICHEDITOLECALLBACK* = ptr IRichEditOleCallback

converter winim_converter_IRichEditOle*(x: ptr IRichEditOle): ptr IUnknown = cast[ptr IUnknown](x)
proc GetClientSite*(self: ptr IRichEditOle, P1: ptr LPOLECLIENTSITE): HRESULT {.inline, discardable.} = self.lpVtbl.GetClientSite(self, P1)
proc GetObjectCount*(self: ptr IRichEditOle): LONG {.inline, discardable.} = self.lpVtbl.GetObjectCount(self)
proc GetLinkCount*(self: ptr IRichEditOle): LONG {.inline, discardable.} = self.lpVtbl.GetLinkCount(self)
proc GetObject*(self: ptr IRichEditOle, P1: LONG, P2: ptr REOBJECT, P3: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetObject(self, P1, P2, P3)
proc InsertObject*(self: ptr IRichEditOle, P1: ptr REOBJECT): HRESULT {.inline, discardable.} = self.lpVtbl.InsertObject(self, P1)
proc ConvertObject*(self: ptr IRichEditOle, P1: LONG, P2: REFCLSID, P3: LPCSTR): HRESULT {.inline, discardable.} = self.lpVtbl.ConvertObject(self, P1, P2, P3)
proc ActivateAs*(self: ptr IRichEditOle, P1: REFCLSID, P2: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.ActivateAs(self, P1, P2)
proc SetHostNames*(self: ptr IRichEditOle, P1: LPCSTR, P2: LPCSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetHostNames(self, P1, P2)
proc SetLinkAvailable*(self: ptr IRichEditOle, P1: LONG, P2: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetLinkAvailable(self, P1, P2)
proc SetDvaspect*(self: ptr IRichEditOle, P1: LONG, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetDvaspect(self, P1, P2)
proc HandsOffStorage*(self: ptr IRichEditOle, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.HandsOffStorage(self, P1)
proc SaveCompleted*(self: ptr IRichEditOle, P1: LONG, P2: LPSTORAGE): HRESULT {.inline, discardable.} = self.lpVtbl.SaveCompleted(self, P1, P2)
proc InPlaceDeactivate*(self: ptr IRichEditOle): HRESULT {.inline, discardable.} = self.lpVtbl.InPlaceDeactivate(self)
proc ContextSensitiveHelp*(self: ptr IRichEditOle, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ContextSensitiveHelp(self, P1)
proc GetClipboardData*(self: ptr IRichEditOle, P1: ptr CHARRANGE, P2: DWORD, P3: ptr LPDATAOBJECT): HRESULT {.inline, discardable.} = self.lpVtbl.GetClipboardData(self, P1, P2, P3)
proc ImportDataObject*(self: ptr IRichEditOle, P1: LPDATAOBJECT, P2: CLIPFORMAT, P3: HGLOBAL): HRESULT {.inline, discardable.} = self.lpVtbl.ImportDataObject(self, P1, P2, P3)
converter winim_converter_IRichEditOleCallback*(x: ptr IRichEditOleCallback): ptr IUnknown = cast[ptr IUnknown](x)
proc GetNewStorage*(self: ptr IRichEditOleCallback, P1: ptr LPSTORAGE): HRESULT {.inline, discardable.} = self.lpVtbl.GetNewStorage(self, P1)
proc GetInPlaceContext*(self: ptr IRichEditOleCallback, P1: ptr LPOLEINPLACEFRAME, P2: ptr LPOLEINPLACEUIWINDOW, P3: LPOLEINPLACEFRAMEINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetInPlaceContext(self, P1, P2, P3)
proc ShowContainerUI*(self: ptr IRichEditOleCallback, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ShowContainerUI(self, P1)
proc QueryInsertObject*(self: ptr IRichEditOleCallback, P1: LPCLSID, P2: LPSTORAGE, P3: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInsertObject(self, P1, P2, P3)
proc DeleteObject*(self: ptr IRichEditOleCallback, P1: LPOLEOBJECT): HRESULT {.inline, discardable.} = self.lpVtbl.DeleteObject(self, P1)
proc QueryAcceptData*(self: ptr IRichEditOleCallback, P1: LPDATAOBJECT, P2: ptr CLIPFORMAT, P3: DWORD, P4: BOOL, P5: HGLOBAL): HRESULT {.inline, discardable.} = self.lpVtbl.QueryAcceptData(self, P1, P2, P3, P4, P5)
proc ContextSensitiveHelp*(self: ptr IRichEditOleCallback, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ContextSensitiveHelp(self, P1)
proc GetClipboardData*(self: ptr IRichEditOleCallback, P1: ptr CHARRANGE, P2: DWORD, P3: ptr LPDATAOBJECT): HRESULT {.inline, discardable.} = self.lpVtbl.GetClipboardData(self, P1, P2, P3)
proc GetDragDropEffect*(self: ptr IRichEditOleCallback, P1: BOOL, P2: DWORD, P3: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetDragDropEffect(self, P1, P2, P3)
proc GetContextMenu*(self: ptr IRichEditOleCallback, P1: WORD, P2: LPOLEOBJECT, P3: ptr CHARRANGE, P4: ptr HMENU): HRESULT {.inline, discardable.} = self.lpVtbl.GetContextMenu(self, P1, P2, P3, P4)

# objext/shtypes.nim

const
  # STRRET_TYPE* = enum
  STRRET_WSTR* = 0x00000000
  STRRET_OFFSET* = 0x00000001
  STRRET_CSTR* = 0x00000002
  # PERCEIVED* = enum
  PERCEIVED_TYPE_FIRST* = - 3
  PERCEIVED_TYPE_UNSPECIFIED* = - 2
  PERCEIVED_TYPE_FOLDER* = - 1
  PERCEIVED_TYPE_UNKNOWN* = 0
  PERCEIVED_TYPE_TEXT* = 1
  PERCEIVED_TYPE_IMAGE* = 2
  PERCEIVED_TYPE_AUDIO* = 3
  PERCEIVED_TYPE_VIDEO* = 4
  PERCEIVED_TYPE_COMPRESSED* = 5
  PERCEIVED_TYPE_DOCUMENT* = 6
  PERCEIVED_TYPE_SYSTEM* = 7
  PERCEIVED_TYPE_APPLICATION* = 8
  PERCEIVED_TYPE_GAMEMEDIA* = 9
  PERCEIVED_TYPE_CONTACTS* = 10
  # SHCOLSTATE* = enum
  SHCOLSTATE_DEFAULT* = 0x00000000
  SHCOLSTATE_TYPE_STR* = 0x00000001
  SHCOLSTATE_TYPE_INT* = 0x00000002
  SHCOLSTATE_TYPE_DATE* = 0x00000003
  SHCOLSTATE_TYPEMASK* = 0x0000000F
  SHCOLSTATE_ONBYDEFAULT* = 0x00000010
  SHCOLSTATE_SLOW* = 0x00000020
  SHCOLSTATE_EXTENDED* = 0x00000040
  SHCOLSTATE_SECONDARYUI* = 0x00000080
  SHCOLSTATE_HIDDEN* = 0x00000100
  SHCOLSTATE_PREFER_VARCMP* = 0x00000200
  SHCOLSTATE_PREFER_FMTCMP* = 0x00000400
  SHCOLSTATE_NOSORTBYFOLDERNESS* = 0x00000800
  SHCOLSTATE_FIXED_WIDTH* = 0x00001000
  SHCOLSTATE_NODPISCALE* = 0x00002000
  SHCOLSTATE_FIXED_RATIO* = 0x00004000
  SHCOLSTATE_DISPLAYMASK* = 0x0000F000
  SHCOLSTATE_VIEWONLY* = 0x00010000
  SHCOLSTATE_BATCHREAD* = 0x00020000
  SHCOLSTATE_NO_GROUPBY* = 0x00040000
  # DEVICE_SCALE_FACTOR* = enum
  SCALE_100_PERCENT* = 100
  SCALE_140_PERCENT* = 140
  SCALE_180_PERCENT* = 180

type
  # SHITEMID* {.final, pure.} = object
  #   cb*: USHORT
  #   abID*: array[1, BYTE]
  # LPSHITEMID* = ptr SHITEMID
  # LPCSHITEMID* = ptr SHITEMID
  # ITEMIDLIST* {.final, pure.} = object
  #   mkid*: SHITEMID
  ITEMIDLIST_RELATIVE* = ITEMIDLIST
  ITEMID_CHILD* = ITEMIDLIST
  ITEMIDLIST_ABSOLUTE* = ITEMIDLIST
  wirePIDL* = ptr BYTE_BLOB
  # LPITEMIDLIST* = ptr ITEMIDLIST
  # LPCITEMIDLIST* = ptr ITEMIDLIST
  PIDLIST_ABSOLUTE* = LPITEMIDLIST
  PCIDLIST_ABSOLUTE* = LPCITEMIDLIST
  PCUIDLIST_ABSOLUTE* = LPCITEMIDLIST
  PIDLIST_RELATIVE* = LPITEMIDLIST
  PCIDLIST_RELATIVE* = LPCITEMIDLIST
  PUIDLIST_RELATIVE* = LPITEMIDLIST
  PCUIDLIST_RELATIVE* = LPCITEMIDLIST
  PITEMID_CHILD* = LPITEMIDLIST
  PCITEMID_CHILD* = LPCITEMIDLIST
  PUITEMID_CHILD* = LPITEMIDLIST
  PCUITEMID_CHILD* = LPCITEMIDLIST
  PCUITEMID_CHILD_ARRAY* = ptr LPCITEMIDLIST
  PCUIDLIST_RELATIVE_ARRAY* = ptr LPCITEMIDLIST
  PCIDLIST_ABSOLUTE_ARRAY* = ptr LPCITEMIDLIST
  PCUIDLIST_ABSOLUTE_ARRAY* = ptr LPCITEMIDLIST
  # STRRET_U1* {.final, union, pure.} = object
  #   pOleStr*: LPWSTR
  #   uOffset*: UINT
  #   cStr*: array[260, char]
  # STRRET* = object
  #   uType*: UINT
  #   u1*: STRRET_U1
  # LPSTRRET* = ptr STRRET
  # SHELLDETAILS* {.final, pure.} = object
  #   fmt*: cint
  #   cxChar*: cint
  #   str*: STRRET
  # LPSHELLDETAILS* = ptr SHELLDETAILS

const
  PERCEIVED_TYPE_CUSTOM* = PERCEIVED_TYPE_FIRST
  PERCEIVED_TYPE_LAST* = PERCEIVED_TYPE_CONTACTS
  PERCEIVEDFLAG_UNDEFINED* = 0x00000000
  PERCEIVEDFLAG_SOFTCODED* = 0x00000001
  PERCEIVEDFLAG_HARDCODED* = 0x00000002
  PERCEIVEDFLAG_NATIVESUPPORT* = 0x00000004
  PERCEIVEDFLAG_GDIPLUS* = 0x00000010
  PERCEIVEDFLAG_WMSDK* = 0x00000020
  PERCEIVEDFLAG_ZIPFOLDER* = 0x00000040

type
  PERCEIVEDFLAG* = DWORD
  COMDLG_FILTERSPEC* {.final, pure.} = object
    pszName*: LPCWSTR
    pszSpec*: LPCWSTR
  KNOWNFOLDERID* = GUID
  REFKNOWNFOLDERID* = ptr KNOWNFOLDERID
  KF_REDIRECT_FLAGS* = DWORD
  FOLDERTYPEID* = GUID
  REFFOLDERTYPEID* = ptr FOLDERTYPEID
  TASKOWNERID* = GUID
  REFTASKOWNERID* = ptr TASKOWNERID
  ELEMENTID* = GUID
  REFELEMENTID* = ptr ELEMENTID
  PROPERTYKEY* {.final, pure.} = object
    fmtid: GUID
    pid: DWORD
  REFPROPVARIANT* = ptr PROPVARIANT

# objext/structuredquerycondition.nim

const
  # tagCONDITION_TYPE* = enum
  CT_AND_CONDITION* = 0
  CT_OR_CONDITION* = 1
  CT_NOT_CONDITION* = 2
  CT_LEAF_CONDITION* = 3
  # tagCONDITION_OPERATION* = enum
  COP_IMPLICIT* = 0
  COP_EQUAL* = 1
  COP_NOTEQUAL* = 2
  COP_LESSTHAN* = 3
  COP_GREATERTHAN* = 4
  COP_LESSTHANOREQUAL* = 5
  COP_GREATERTHANOREQUAL* = 6
  COP_VALUE_STARTSWITH* = 7
  COP_VALUE_ENDSWITH* = 8
  COP_VALUE_CONTAINS* = 9
  COP_VALUE_NOTCONTAINS* = 10
  COP_DOSWILDCARDS* = 11
  COP_WORD_EQUAL* = 12
  COP_WORD_STARTSWITH* = 13
  COP_APPLICATION_SPECIFIC* = 14

type
  IRichChunk* {.pure.} = object
    lpVtbl*: ptr IRichChunkVtbl
  IRichChunkVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetData*: proc(self: ptr IRichChunk, pFirstPos: ptr ULONG, pLength: ptr ULONG, ppsz: ptr LPWSTR, pValue: ptr PROPVARIANT): HRESULT {.stdcall.}
  ICondition* {.pure.} = object
    lpVtbl*: ptr IConditionVtbl
  IConditionVtbl* {.pure, inheritable.} = object of IPersistStreamVtbl
    GetConditionType*: proc(self: ptr ICondition, pNodeType: ptr int32): HRESULT {.stdcall.}
    GetSubConditions*: proc(self: ptr ICondition, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetComparisonInfo*: proc(self: ptr ICondition, ppszPropertyName: ptr LPWSTR, pcop: ptr int32, ppropvar: ptr PROPVARIANT): HRESULT {.stdcall.}
    GetValueType*: proc(self: ptr ICondition, ppszValueTypeName: ptr LPWSTR): HRESULT {.stdcall.}
    GetValueNormalization*: proc(self: ptr ICondition, ppszNormalization: ptr LPWSTR): HRESULT {.stdcall.}
    GetInputTerms*: proc(self: ptr ICondition, ppPropertyTerm: ptr ptr IRichChunk, ppOperationTerm: ptr ptr IRichChunk, ppValueTerm: ptr ptr IRichChunk): HRESULT {.stdcall.}
    Clone*: proc(self: ptr ICondition, ppc: ptr ptr ICondition): HRESULT {.stdcall.}
  ICondition2* {.pure.} = object
    lpVtbl*: ptr ICondition2Vtbl
  ICondition2Vtbl* {.pure, inheritable.} = object of IConditionVtbl
    GetLocale*: proc(self: ptr ICondition2, ppszLocaleName: ptr LPWSTR): HRESULT {.stdcall.}
    GetLeafConditionInfo*: proc(self: ptr ICondition2, ppropkey: ptr PROPERTYKEY, pcop: ptr int32, ppropvar: ptr PROPVARIANT): HRESULT {.stdcall.}

converter winim_converter_IRichChunk*(x: ptr IRichChunk): ptr IUnknown = cast[ptr IUnknown](x)
proc GetData*(self: ptr IRichChunk, pFirstPos: ptr ULONG, pLength: ptr ULONG, ppsz: ptr LPWSTR, pValue: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetData(self, pFirstPos, pLength, ppsz, pValue)
converter winim_converter_ICondition*(x: ptr ICondition): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ICondition*(x: ptr ICondition): ptr IPersist = cast[ptr IPersist](x)
converter winim_converter_ICondition*(x: ptr ICondition): ptr IPersistStream = cast[ptr IPersistStream](x)
proc GetConditionType*(self: ptr ICondition, pNodeType: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetConditionType(self, pNodeType)
proc GetSubConditions*(self: ptr ICondition, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetSubConditions(self, riid, ppv)
proc GetComparisonInfo*(self: ptr ICondition, ppszPropertyName: ptr LPWSTR, pcop: ptr int32, ppropvar: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetComparisonInfo(self, ppszPropertyName, pcop, ppropvar)
proc GetValueType*(self: ptr ICondition, ppszValueTypeName: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetValueType(self, ppszValueTypeName)
proc GetValueNormalization*(self: ptr ICondition, ppszNormalization: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetValueNormalization(self, ppszNormalization)
proc GetInputTerms*(self: ptr ICondition, ppPropertyTerm: ptr ptr IRichChunk, ppOperationTerm: ptr ptr IRichChunk, ppValueTerm: ptr ptr IRichChunk): HRESULT {.inline, discardable.} = self.lpVtbl.GetInputTerms(self, ppPropertyTerm, ppOperationTerm, ppValueTerm)
proc Clone*(self: ptr ICondition, ppc: ptr ptr ICondition): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, ppc)
converter winim_converter_ICondition2*(x: ptr ICondition2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ICondition2*(x: ptr ICondition2): ptr IPersist = cast[ptr IPersist](x)
converter winim_converter_ICondition2*(x: ptr ICondition2): ptr ICondition = cast[ptr ICondition](x)
converter winim_converter_ICondition2*(x: ptr ICondition2): ptr IPersistStream = cast[ptr IPersistStream](x)
proc GetLocale*(self: ptr ICondition2, ppszLocaleName: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetLocale(self, ppszLocaleName)
proc GetLeafConditionInfo*(self: ptr ICondition2, ppropkey: ptr PROPERTYKEY, pcop: ptr int32, ppropvar: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetLeafConditionInfo(self, ppropkey, pcop, ppropvar)


# objext/propsys.nim

const
  # GETPROPERTYSTOREFLAGS* = enum
  GPS_DEFAULT* = 0x0
  GPS_HANDLERPROPERTIESONLY* = 0x1
  GPS_READWRITE* = 0x2
  GPS_TEMPORARY* = 0x4
  GPS_FASTPROPERTIESONLY* = 0x8
  GPS_OPENSLOWITEM* = 0x10
  GPS_DELAYCREATION* = 0x20
  GPS_BESTEFFORT* = 0x40
  GPS_NO_OPLOCK* = 0x80
  GPS_PREFERQUERYPROPERTIES* = 0x100
  GPS_MASK_VALID* = 0x1ff
  #* PKA_FLAGS* = enum
  PKA_SET* = 0
  PKA_APPEND* = 1
  PKA_DELETE* = 2
  #* PSC_STATE* = enum
  PSC_NORMAL* = 0
  PSC_NOTINSOURCE* = 1
  PSC_DIRTY* = 2
  PSC_READONLY* = 3
  #* PROPENUMTYPE* = enum
  PET_DISCRETEVALUE* = 0
  PET_RANGEDVALUE* = 1
  PET_DEFAULTVALUE* = 2
  PET_ENDRANGE* = 3
  #* PROPDESC_TYPE_FLAGS* = enum
  PDTF_DEFAULT* = 0x0
  PDTF_MULTIPLEVALUES* = 0x1
  PDTF_ISINNATE* = 0x2
  PDTF_ISGROUP* = 0x4
  PDTF_CANGROUPBY* = 0x8
  PDTF_CANSTACKBY* = 0x10
  PDTF_ISTREEPROPERTY* = 0x20
  PDTF_INCLUDEINFULLTEXTQUERY* = 0x40
  PDTF_ISVIEWABLE* = 0x80
  PDTF_ISQUERYABLE* = 0x100
  PDTF_CANBEPURGED* = 0x200
  PDTF_SEARCHRAWVALUE* = 0x400
  PDTF_ISSYSTEMPROPERTY* = -2147483648
  PDTF_MASK_ALL* = -2147481601
  #* PROPDESC_VIEW_FLAGS* = enum
  PDVF_DEFAULT* = 0x0
  PDVF_CENTERALIGN* = 0x1
  PDVF_RIGHTALIGN* = 0x2
  PDVF_BEGINNEWGROUP* = 0x4
  PDVF_FILLAREA* = 0x8
  PDVF_SORTDESCENDING* = 0x10
  PDVF_SHOWONLYIFPRESENT* = 0x20
  PDVF_SHOWBYDEFAULT* = 0x40
  PDVF_SHOWINPRIMARYLIST* = 0x80
  PDVF_SHOWINSECONDARYLIST* = 0x100
  PDVF_HIDELABEL* = 0x200
  PDVF_HIDDEN* = 0x800
  PDVF_CANWRAP* = 0x1000
  PDVF_MASK_ALL* = 0x1bff
  #* PROPDESC_DISPLAYTYPE* = enum
  PDDT_STRING* = 0
  PDDT_NUMBER* = 1
  PDDT_BOOLEAN* = 2
  PDDT_DATETIME* = 3
  PDDT_ENUMERATED* = 4
  #* PROPDESC_GROUPING_RANGE* = enum
  PDGR_DISCRETE* = 0
  PDGR_ALPHANUMERIC* = 1
  PDGR_SIZE* = 2
  PDGR_DYNAMIC* = 3
  PDGR_DATE* = 4
  PDGR_PERCENT* = 5
  PDGR_ENUMERATED* = 6
  #* PROPDESC_FORMAT_FLAGS* = enum
  PDFF_DEFAULT* = 0x0
  PDFF_PREFIXNAME* = 0x1
  PDFF_FILENAME* = 0x2
  PDFF_ALWAYSKB* = 0x4
  PDFF_RESERVED_RIGHTTOLEFT* = 0x8
  PDFF_SHORTTIME* = 0x10
  PDFF_LONGTIME* = 0x20
  PDFF_HIDETIME* = 0x40
  PDFF_SHORTDATE* = 0x80
  PDFF_LONGDATE* = 0x100
  PDFF_HIDEDATE* = 0x200
  PDFF_RELATIVEDATE* = 0x400
  PDFF_USEEDITINVITATION* = 0x800
  PDFF_READONLY* = 0x1000
  PDFF_NOAUTOREADINGORDER* = 0x2000
  #* PROPDESC_SORTDESCRIPTION* = enum
  PDSD_GENERAL* = 0
  PDSD_A_Z* = 1
  PDSD_LOWEST_HIGHEST* = 2
  PDSD_SMALLEST_BIGGEST* = 3
  PDSD_OLDEST_NEWEST* = 4
  #* PROPDESC_RELATIVEDESCRIPTION_TYPE* = enum
  PDRDT_GENERAL* = 0
  PDRDT_DATE* = 1
  PDRDT_SIZE* = 2
  PDRDT_COUNT* = 3
  PDRDT_REVISION* = 4
  PDRDT_LENGTH* = 5
  PDRDT_DURATION* = 6
  PDRDT_SPEED* = 7
  PDRDT_RATE* = 8
  PDRDT_RATING* = 9
  PDRDT_PRIORITY* = 10
  #* PROPDESC_AGGREGATION_TYPE* = enum
  PDAT_DEFAULT* = 0
  PDAT_FIRST* = 1
  PDAT_SUM* = 2
  PDAT_AVERAGE* = 3
  PDAT_DATERANGE* = 4
  PDAT_UNION* = 5
  PDAT_MAX* = 6
  PDAT_MIN* = 7
  #* PROPDESC_CONDITION_TYPE* = enum
  PDCOT_NONE* = 0
  PDCOT_STRING* = 1
  PDCOT_SIZE* = 2
  PDCOT_DATETIME* = 3
  PDCOT_BOOLEAN* = 4
  PDCOT_NUMBER* = 5
  #* PROPDESC_SEARCHINFO_FLAGS* = enum
  PDSIF_DEFAULT* = 0x0
  PDSIF_ININVERTEDINDEX* = 0x1
  PDSIF_ISCOLUMN* = 0x2
  PDSIF_ISCOLUMNSPARSE* = 0x4
  PDSIF_ALWAYSINCLUDE* = 0x8
  PDSIF_USEFORTYPEAHEAD* = 0x10
  #* PROPDESC_COLUMNINDEX_TYPE* = enum
  PDCIT_NONE* = 0
  PDCIT_ONDISK* = 1
  PDCIT_INMEMORY* = 2
  PDCIT_ONDEMAND* = 3
  PDCIT_ONDISKALL* = 4
  PDCIT_ONDISKVECTOR* = 5
  #* PROPDESC_ENUMFILTER* = enum
  PDEF_ALL* = 0
  PDEF_SYSTEM* = 1
  PDEF_NONSYSTEM* = 2
  PDEF_VIEWABLE* = 3
  PDEF_QUERYABLE* = 4
  PDEF_INFULLTEXTQUERY* = 5
  PDEF_COLUMN* = 6

type
  SERIALIZEDPROPSTORAGE = object
  REFPROPERTYKEY* = ptr PROPERTYKEY
  LPPROPERTYSTORE* = ptr IPropertyStore
  PERSIST_SPROPSTORE_FLAGS* = cint
  PUSERIALIZEDPROPSTORAGE* = ptr SERIALIZEDPROPSTORAGE
  PCUSERIALIZEDPROPSTORAGE* = ptr SERIALIZEDPROPSTORAGE

  IInitializeWithFile* {.pure.} = object
    lpVtbl*: ptr IInitializeWithFileVtbl
  IInitializeWithFileVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IInitializeWithFile, pszFilePath: LPCWSTR, grfMode: DWORD): HRESULT {.stdcall.}
  IInitializeWithStream* {.pure.} = object
    lpVtbl*: ptr IInitializeWithStreamVtbl
  IInitializeWithStreamVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IInitializeWithStream, pstream: ptr IStream, grfMode: DWORD): HRESULT {.stdcall.}
  IPropertyStore* {.pure.} = object
    lpVtbl*: ptr IPropertyStoreVtbl
  IPropertyStoreVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCount*: proc(self: ptr IPropertyStore, cProps: ptr DWORD): HRESULT {.stdcall.}
    GetAt*: proc(self: ptr IPropertyStore, iProp: DWORD, pkey: ptr PROPERTYKEY): HRESULT {.stdcall.}
    GetValue*: proc(self: ptr IPropertyStore, key: REFPROPERTYKEY, pv: ptr PROPVARIANT): HRESULT {.stdcall.}
    SetValue*: proc(self: ptr IPropertyStore, key: REFPROPERTYKEY, propvar: REFPROPVARIANT): HRESULT {.stdcall.}
    Commit*: proc(self: ptr IPropertyStore): HRESULT {.stdcall.}
  INamedPropertyStore* {.pure.} = object
    lpVtbl*: ptr INamedPropertyStoreVtbl
  INamedPropertyStoreVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetNamedValue*: proc(self: ptr INamedPropertyStore, pszName: LPCWSTR, ppropvar: ptr PROPVARIANT): HRESULT {.stdcall.}
    SetNamedValue*: proc(self: ptr INamedPropertyStore, pszName: LPCWSTR, propvar: REFPROPVARIANT): HRESULT {.stdcall.}
    GetNameCount*: proc(self: ptr INamedPropertyStore, pdwCount: ptr DWORD): HRESULT {.stdcall.}
    GetNameAt*: proc(self: ptr INamedPropertyStore, iProp: DWORD, pbstrName: ptr BSTR): HRESULT {.stdcall.}
  IObjectWithPropertyKey* {.pure.} = object
    lpVtbl*: ptr IObjectWithPropertyKeyVtbl
  IObjectWithPropertyKeyVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetPropertyKey*: proc(self: ptr IObjectWithPropertyKey, key: REFPROPERTYKEY): HRESULT {.stdcall.}
    GetPropertyKey*: proc(self: ptr IObjectWithPropertyKey, pkey: ptr PROPERTYKEY): HRESULT {.stdcall.}
  IPropertyChange* {.pure.} = object
    lpVtbl*: ptr IPropertyChangeVtbl
  IPropertyChangeVtbl* {.pure, inheritable.} = object of IObjectWithPropertyKeyVtbl
    ApplyToPropVariant*: proc(self: ptr IPropertyChange, propvarIn: REFPROPVARIANT, ppropvarOut: ptr PROPVARIANT): HRESULT {.stdcall.}
  IPropertyChangeArray* {.pure.} = object
    lpVtbl*: ptr IPropertyChangeArrayVtbl
  IPropertyChangeArrayVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCount*: proc(self: ptr IPropertyChangeArray, pcOperations: ptr UINT): HRESULT {.stdcall.}
    GetAt*: proc(self: ptr IPropertyChangeArray, iIndex: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    InsertAt*: proc(self: ptr IPropertyChangeArray, iIndex: UINT, ppropChange: ptr IPropertyChange): HRESULT {.stdcall.}
    Append*: proc(self: ptr IPropertyChangeArray, ppropChange: ptr IPropertyChange): HRESULT {.stdcall.}
    AppendOrReplace*: proc(self: ptr IPropertyChangeArray, ppropChange: ptr IPropertyChange): HRESULT {.stdcall.}
    RemoveAt*: proc(self: ptr IPropertyChangeArray, iIndex: UINT): HRESULT {.stdcall.}
    IsKeyInArray*: proc(self: ptr IPropertyChangeArray, key: REFPROPERTYKEY): HRESULT {.stdcall.}
  IPropertyStoreCapabilities* {.pure.} = object
    lpVtbl*: ptr IPropertyStoreCapabilitiesVtbl
  IPropertyStoreCapabilitiesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    IsPropertyWritable*: proc(self: ptr IPropertyStoreCapabilities, key: REFPROPERTYKEY): HRESULT {.stdcall.}
  IPropertyStoreCache* {.pure.} = object
    lpVtbl*: ptr IPropertyStoreCacheVtbl
  IPropertyStoreCacheVtbl* {.pure, inheritable.} = object of IPropertyStoreVtbl
    GetState*: proc(self: ptr IPropertyStoreCache, key: REFPROPERTYKEY, pstate: ptr int32): HRESULT {.stdcall.}
    GetValueAndState*: proc(self: ptr IPropertyStoreCache, key: REFPROPERTYKEY, ppropvar: ptr PROPVARIANT, pstate: ptr int32): HRESULT {.stdcall.}
    SetState*: proc(self: ptr IPropertyStoreCache, key: REFPROPERTYKEY, state: int32): HRESULT {.stdcall.}
    SetValueAndState*: proc(self: ptr IPropertyStoreCache, key: REFPROPERTYKEY, ppropvar: ptr PROPVARIANT, state: int32): HRESULT {.stdcall.}
  IPropertyEnumType* {.pure.} = object
    lpVtbl*: ptr IPropertyEnumTypeVtbl
  IPropertyEnumTypeVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetEnumType*: proc(self: ptr IPropertyEnumType, penumtype: ptr int32): HRESULT {.stdcall.}
    GetValue*: proc(self: ptr IPropertyEnumType, ppropvar: ptr PROPVARIANT): HRESULT {.stdcall.}
    GetRangeMinValue*: proc(self: ptr IPropertyEnumType, ppropvarMin: ptr PROPVARIANT): HRESULT {.stdcall.}
    GetRangeSetValue*: proc(self: ptr IPropertyEnumType, ppropvarSet: ptr PROPVARIANT): HRESULT {.stdcall.}
    GetDisplayText*: proc(self: ptr IPropertyEnumType, ppszDisplay: ptr LPWSTR): HRESULT {.stdcall.}
  IPropertyEnumType2* {.pure.} = object
    lpVtbl*: ptr IPropertyEnumType2Vtbl
  IPropertyEnumType2Vtbl* {.pure, inheritable.} = object of IPropertyEnumTypeVtbl
    GetImageReference*: proc(self: ptr IPropertyEnumType2, ppszImageRes: ptr LPWSTR): HRESULT {.stdcall.}
  IPropertyEnumTypeList* {.pure.} = object
    lpVtbl*: ptr IPropertyEnumTypeListVtbl
  IPropertyEnumTypeListVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCount*: proc(self: ptr IPropertyEnumTypeList, pctypes: ptr UINT): HRESULT {.stdcall.}
    GetAt*: proc(self: ptr IPropertyEnumTypeList, itype: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetConditionAt*: proc(self: ptr IPropertyEnumTypeList, nIndex: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    FindMatchingIndex*: proc(self: ptr IPropertyEnumTypeList, propvarCmp: REFPROPVARIANT, pnIndex: ptr UINT): HRESULT {.stdcall.}
  IPropertyDescription* {.pure.} = object
    lpVtbl*: ptr IPropertyDescriptionVtbl
  IPropertyDescriptionVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetPropertyKey*: proc(self: ptr IPropertyDescription, pkey: ptr PROPERTYKEY): HRESULT {.stdcall.}
    GetCanonicalName*: proc(self: ptr IPropertyDescription, ppszName: ptr LPWSTR): HRESULT {.stdcall.}
    GetPropertyType*: proc(self: ptr IPropertyDescription, pvartype: ptr VARTYPE): HRESULT {.stdcall.}
    GetDisplayName*: proc(self: ptr IPropertyDescription, ppszName: ptr LPWSTR): HRESULT {.stdcall.}
    GetEditInvitation*: proc(self: ptr IPropertyDescription, ppszInvite: ptr LPWSTR): HRESULT {.stdcall.}
    GetTypeFlags*: proc(self: ptr IPropertyDescription, mask: int32, ppdtFlags: ptr int32): HRESULT {.stdcall.}
    GetViewFlags*: proc(self: ptr IPropertyDescription, ppdvFlags: ptr int32): HRESULT {.stdcall.}
    GetDefaultColumnWidth*: proc(self: ptr IPropertyDescription, pcxChars: ptr UINT): HRESULT {.stdcall.}
    GetDisplayType*: proc(self: ptr IPropertyDescription, pdisplaytype: ptr int32): HRESULT {.stdcall.}
    GetColumnState*: proc(self: ptr IPropertyDescription, pcsFlags: ptr SHCOLSTATEF): HRESULT {.stdcall.}
    GetGroupingRange*: proc(self: ptr IPropertyDescription, pgr: ptr int32): HRESULT {.stdcall.}
    GetRelativeDescriptionType*: proc(self: ptr IPropertyDescription, prdt: ptr int32): HRESULT {.stdcall.}
    GetRelativeDescription*: proc(self: ptr IPropertyDescription, propvar1: REFPROPVARIANT, propvar2: REFPROPVARIANT, ppszDesc1: ptr LPWSTR, ppszDesc2: ptr LPWSTR): HRESULT {.stdcall.}
    GetSortDescription*: proc(self: ptr IPropertyDescription, psd: ptr int32): HRESULT {.stdcall.}
    GetSortDescriptionLabel*: proc(self: ptr IPropertyDescription, fDescending: WINBOOL, ppszDescription: ptr LPWSTR): HRESULT {.stdcall.}
    GetAggregationType*: proc(self: ptr IPropertyDescription, paggtype: ptr int32): HRESULT {.stdcall.}
    GetConditionType*: proc(self: ptr IPropertyDescription, pcontype: ptr int32, popDefault: ptr int32): HRESULT {.stdcall.}
    GetEnumTypeList*: proc(self: ptr IPropertyDescription, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    CoerceToCanonicalValue*: proc(self: ptr IPropertyDescription, ppropvar: ptr PROPVARIANT): HRESULT {.stdcall.}
    FormatForDisplay*: proc(self: ptr IPropertyDescription, propvar: REFPROPVARIANT, pdfFlags: int32, ppszDisplay: ptr LPWSTR): HRESULT {.stdcall.}
    IsValueCanonical*: proc(self: ptr IPropertyDescription, propvar: REFPROPVARIANT): HRESULT {.stdcall.}
  IPropertyDescription2* {.pure.} = object
    lpVtbl*: ptr IPropertyDescription2Vtbl
  IPropertyDescription2Vtbl* {.pure, inheritable.} = object of IPropertyDescriptionVtbl
    GetImageReferenceForValue*: proc(self: ptr IPropertyDescription2, propvar: REFPROPVARIANT, ppszImageRes: ptr LPWSTR): HRESULT {.stdcall.}
  IPropertyDescriptionAliasInfo* {.pure.} = object
    lpVtbl*: ptr IPropertyDescriptionAliasInfoVtbl
  IPropertyDescriptionAliasInfoVtbl* {.pure, inheritable.} = object of IPropertyDescriptionVtbl
    GetSortByAlias*: proc(self: ptr IPropertyDescriptionAliasInfo, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetAdditionalSortByAliases*: proc(self: ptr IPropertyDescriptionAliasInfo, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IPropertyDescriptionSearchInfo* {.pure.} = object
    lpVtbl*: ptr IPropertyDescriptionSearchInfoVtbl
  IPropertyDescriptionSearchInfoVtbl* {.pure, inheritable.} = object of IPropertyDescriptionVtbl
    GetSearchInfoFlags*: proc(self: ptr IPropertyDescriptionSearchInfo, ppdsiFlags: ptr int32): HRESULT {.stdcall.}
    GetColumnIndexType*: proc(self: ptr IPropertyDescriptionSearchInfo, ppdciType: ptr int32): HRESULT {.stdcall.}
    GetProjectionString*: proc(self: ptr IPropertyDescriptionSearchInfo, ppszProjection: ptr LPWSTR): HRESULT {.stdcall.}
    GetMaxSize*: proc(self: ptr IPropertyDescriptionSearchInfo, pcbMaxSize: ptr UINT): HRESULT {.stdcall.}
  IPropertyDescriptionRelatedPropertyInfo* {.pure.} = object
    lpVtbl*: ptr IPropertyDescriptionRelatedPropertyInfoVtbl
  IPropertyDescriptionRelatedPropertyInfoVtbl* {.pure, inheritable.} = object of IPropertyDescriptionVtbl
    GetRelatedProperty*: proc(self: ptr IPropertyDescriptionRelatedPropertyInfo, pszRelationshipName: LPCWSTR, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IPropertySystem* {.pure.} = object
    lpVtbl*: ptr IPropertySystemVtbl
  IPropertySystemVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetPropertyDescription*: proc(self: ptr IPropertySystem, propkey: REFPROPERTYKEY, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetPropertyDescriptionByName*: proc(self: ptr IPropertySystem, pszCanonicalName: LPCWSTR, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetPropertyDescriptionListFromString*: proc(self: ptr IPropertySystem, pszPropList: LPCWSTR, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    EnumeratePropertyDescriptions*: proc(self: ptr IPropertySystem, filterOn: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    FormatForDisplay*: proc(self: ptr IPropertySystem, key: REFPROPERTYKEY, propvar: REFPROPVARIANT, pdff: int32, pszText: LPWSTR, cchText: DWORD): HRESULT {.stdcall.}
    FormatForDisplayAlloc*: proc(self: ptr IPropertySystem, key: REFPROPERTYKEY, propvar: REFPROPVARIANT, pdff: int32, ppszDisplay: ptr LPWSTR): HRESULT {.stdcall.}
    RegisterPropertySchema*: proc(self: ptr IPropertySystem, pszPath: LPCWSTR): HRESULT {.stdcall.}
    UnregisterPropertySchema*: proc(self: ptr IPropertySystem, pszPath: LPCWSTR): HRESULT {.stdcall.}
    RefreshPropertySchema*: proc(self: ptr IPropertySystem): HRESULT {.stdcall.}
  IPropertyDescriptionList* {.pure.} = object
    lpVtbl*: ptr IPropertyDescriptionListVtbl
  IPropertyDescriptionListVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCount*: proc(self: ptr IPropertyDescriptionList, pcElem: ptr UINT): HRESULT {.stdcall.}
    GetAt*: proc(self: ptr IPropertyDescriptionList, iElem: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IPropertyStoreFactory* {.pure.} = object
    lpVtbl*: ptr IPropertyStoreFactoryVtbl
  IPropertyStoreFactoryVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetPropertyStore*: proc(self: ptr IPropertyStoreFactory, flags: int32, pUnkFactory: ptr IUnknown, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetPropertyStoreForKeys*: proc(self: ptr IPropertyStoreFactory, rgKeys: ptr PROPERTYKEY, cKeys: UINT, flags: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IDelayedPropertyStoreFactory* {.pure.} = object
    lpVtbl*: ptr IDelayedPropertyStoreFactoryVtbl
  IDelayedPropertyStoreFactoryVtbl* {.pure, inheritable.} = object of IPropertyStoreFactoryVtbl
    GetDelayedPropertyStore*: proc(self: ptr IDelayedPropertyStoreFactory, flags: int32, dwStoreId: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IPersistSerializedPropStorage* {.pure.} = object
    lpVtbl*: ptr IPersistSerializedPropStorageVtbl
  IPersistSerializedPropStorageVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetFlags*: proc(self: ptr IPersistSerializedPropStorage, flags: PERSIST_SPROPSTORE_FLAGS): HRESULT {.stdcall.}
    SetPropertyStorage*: proc(self: ptr IPersistSerializedPropStorage, psps: PCUSERIALIZEDPROPSTORAGE, cb: DWORD): HRESULT {.stdcall.}
    GetPropertyStorage*: proc(self: ptr IPersistSerializedPropStorage, ppsps: ptr ptr SERIALIZEDPROPSTORAGE, pcb: ptr DWORD): HRESULT {.stdcall.}
  IPersistSerializedPropStorage2* {.pure.} = object
    lpVtbl*: ptr IPersistSerializedPropStorage2Vtbl
  IPersistSerializedPropStorage2Vtbl* {.pure, inheritable.} = object of IPersistSerializedPropStorageVtbl
    GetPropertyStorageSize*: proc(self: ptr IPersistSerializedPropStorage2, pcb: ptr DWORD): HRESULT {.stdcall.}
    GetPropertyStorageBuffer*: proc(self: ptr IPersistSerializedPropStorage2, psps: ptr SERIALIZEDPROPSTORAGE, cb: DWORD, pcbWritten: ptr DWORD): HRESULT {.stdcall.}
  IPropertySystemChangeNotify* {.pure.} = object
    lpVtbl*: ptr IPropertySystemChangeNotifyVtbl
  IPropertySystemChangeNotifyVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SchemaRefreshed*: proc(self: ptr IPropertySystemChangeNotify): HRESULT {.stdcall.}
  ICreateObject* {.pure.} = object
    lpVtbl*: ptr ICreateObjectVtbl
  ICreateObjectVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CreateObject*: proc(self: ptr ICreateObject, clsid: REFCLSID, pUnkOuter: ptr IUnknown, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}

converter winim_converter_IInitializeWithFile*(x: ptr IInitializeWithFile): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IInitializeWithFile, pszFilePath: LPCWSTR, grfMode: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, pszFilePath, grfMode)
converter winim_converter_IInitializeWithStream*(x: ptr IInitializeWithStream): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IInitializeWithStream, pstream: ptr IStream, grfMode: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, pstream, grfMode)
converter winim_converter_IPropertyStore*(x: ptr IPropertyStore): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCount*(self: ptr IPropertyStore, cProps: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetCount(self, cProps)
proc GetAt*(self: ptr IPropertyStore, iProp: DWORD, pkey: ptr PROPERTYKEY): HRESULT {.inline, discardable.} = self.lpVtbl.GetAt(self, iProp, pkey)
proc GetValue*(self: ptr IPropertyStore, key: REFPROPERTYKEY, pv: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetValue(self, key, pv)
proc SetValue*(self: ptr IPropertyStore, key: REFPROPERTYKEY, propvar: REFPROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.SetValue(self, key, propvar)
proc Commit*(self: ptr IPropertyStore): HRESULT {.inline, discardable.} = self.lpVtbl.Commit(self)
converter winim_converter_INamedPropertyStore*(x: ptr INamedPropertyStore): ptr IUnknown = cast[ptr IUnknown](x)
proc GetNamedValue*(self: ptr INamedPropertyStore, pszName: LPCWSTR, ppropvar: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetNamedValue(self, pszName, ppropvar)
proc SetNamedValue*(self: ptr INamedPropertyStore, pszName: LPCWSTR, propvar: REFPROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.SetNamedValue(self, pszName, propvar)
proc GetNameCount*(self: ptr INamedPropertyStore, pdwCount: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetNameCount(self, pdwCount)
proc GetNameAt*(self: ptr INamedPropertyStore, iProp: DWORD, pbstrName: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetNameAt(self, iProp, pbstrName)
converter winim_converter_IObjectWithPropertyKey*(x: ptr IObjectWithPropertyKey): ptr IUnknown = cast[ptr IUnknown](x)
proc SetPropertyKey*(self: ptr IObjectWithPropertyKey, key: REFPROPERTYKEY): HRESULT {.inline, discardable.} = self.lpVtbl.SetPropertyKey(self, key)
proc GetPropertyKey*(self: ptr IObjectWithPropertyKey, pkey: ptr PROPERTYKEY): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyKey(self, pkey)
converter winim_converter_IPropertyChange*(x: ptr IPropertyChange): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPropertyChange*(x: ptr IPropertyChange): ptr IObjectWithPropertyKey = cast[ptr IObjectWithPropertyKey](x)
proc ApplyToPropVariant*(self: ptr IPropertyChange, propvarIn: REFPROPVARIANT, ppropvarOut: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.ApplyToPropVariant(self, propvarIn, ppropvarOut)
converter winim_converter_IPropertyChangeArray*(x: ptr IPropertyChangeArray): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCount*(self: ptr IPropertyChangeArray, pcOperations: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCount(self, pcOperations)
proc GetAt*(self: ptr IPropertyChangeArray, iIndex: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetAt(self, iIndex, riid, ppv)
proc InsertAt*(self: ptr IPropertyChangeArray, iIndex: UINT, ppropChange: ptr IPropertyChange): HRESULT {.inline, discardable.} = self.lpVtbl.InsertAt(self, iIndex, ppropChange)
proc Append*(self: ptr IPropertyChangeArray, ppropChange: ptr IPropertyChange): HRESULT {.inline, discardable.} = self.lpVtbl.Append(self, ppropChange)
proc AppendOrReplace*(self: ptr IPropertyChangeArray, ppropChange: ptr IPropertyChange): HRESULT {.inline, discardable.} = self.lpVtbl.AppendOrReplace(self, ppropChange)
proc RemoveAt*(self: ptr IPropertyChangeArray, iIndex: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveAt(self, iIndex)
proc IsKeyInArray*(self: ptr IPropertyChangeArray, key: REFPROPERTYKEY): HRESULT {.inline, discardable.} = self.lpVtbl.IsKeyInArray(self, key)
converter winim_converter_IPropertyStoreCapabilities*(x: ptr IPropertyStoreCapabilities): ptr IUnknown = cast[ptr IUnknown](x)
proc IsPropertyWritable*(self: ptr IPropertyStoreCapabilities, key: REFPROPERTYKEY): HRESULT {.inline, discardable.} = self.lpVtbl.IsPropertyWritable(self, key)
converter winim_converter_IPropertyStoreCache*(x: ptr IPropertyStoreCache): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPropertyStoreCache*(x: ptr IPropertyStoreCache): ptr IPropertyStore = cast[ptr IPropertyStore](x)
proc GetState*(self: ptr IPropertyStoreCache, key: REFPROPERTYKEY, pstate: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetState(self, key, pstate)
proc GetValueAndState*(self: ptr IPropertyStoreCache, key: REFPROPERTYKEY, ppropvar: ptr PROPVARIANT, pstate: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetValueAndState(self, key, ppropvar, pstate)
proc SetState*(self: ptr IPropertyStoreCache, key: REFPROPERTYKEY, state: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetState(self, key, state)
proc SetValueAndState*(self: ptr IPropertyStoreCache, key: REFPROPERTYKEY, ppropvar: ptr PROPVARIANT, state: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetValueAndState(self, key, ppropvar, state)
converter winim_converter_IPropertyEnumType*(x: ptr IPropertyEnumType): ptr IUnknown = cast[ptr IUnknown](x)
proc GetEnumType*(self: ptr IPropertyEnumType, penumtype: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetEnumType(self, penumtype)
proc GetValue*(self: ptr IPropertyEnumType, ppropvar: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetValue(self, ppropvar)
proc GetRangeMinValue*(self: ptr IPropertyEnumType, ppropvarMin: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetRangeMinValue(self, ppropvarMin)
proc GetRangeSetValue*(self: ptr IPropertyEnumType, ppropvarSet: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetRangeSetValue(self, ppropvarSet)
proc GetDisplayText*(self: ptr IPropertyEnumType, ppszDisplay: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDisplayText(self, ppszDisplay)
converter winim_converter_IPropertyEnumType2*(x: ptr IPropertyEnumType2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPropertyEnumType2*(x: ptr IPropertyEnumType2): ptr IPropertyEnumType = cast[ptr IPropertyEnumType](x)
proc GetImageReference*(self: ptr IPropertyEnumType2, ppszImageRes: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetImageReference(self, ppszImageRes)
converter winim_converter_IPropertyEnumTypeList*(x: ptr IPropertyEnumTypeList): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCount*(self: ptr IPropertyEnumTypeList, pctypes: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCount(self, pctypes)
proc GetAt*(self: ptr IPropertyEnumTypeList, itype: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetAt(self, itype, riid, ppv)
proc GetConditionAt*(self: ptr IPropertyEnumTypeList, nIndex: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetConditionAt(self, nIndex, riid, ppv)
proc FindMatchingIndex*(self: ptr IPropertyEnumTypeList, propvarCmp: REFPROPVARIANT, pnIndex: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.FindMatchingIndex(self, propvarCmp, pnIndex)
converter winim_converter_IPropertyDescription*(x: ptr IPropertyDescription): ptr IUnknown = cast[ptr IUnknown](x)
proc GetPropertyKey*(self: ptr IPropertyDescription, pkey: ptr PROPERTYKEY): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyKey(self, pkey)
proc GetCanonicalName*(self: ptr IPropertyDescription, ppszName: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetCanonicalName(self, ppszName)
proc GetPropertyType*(self: ptr IPropertyDescription, pvartype: ptr VARTYPE): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyType(self, pvartype)
proc GetDisplayName*(self: ptr IPropertyDescription, ppszName: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDisplayName(self, ppszName)
proc GetEditInvitation*(self: ptr IPropertyDescription, ppszInvite: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetEditInvitation(self, ppszInvite)
proc GetTypeFlags*(self: ptr IPropertyDescription, mask: int32, ppdtFlags: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetTypeFlags(self, mask, ppdtFlags)
proc GetViewFlags*(self: ptr IPropertyDescription, ppdvFlags: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetViewFlags(self, ppdvFlags)
proc GetDefaultColumnWidth*(self: ptr IPropertyDescription, pcxChars: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultColumnWidth(self, pcxChars)
proc GetDisplayType*(self: ptr IPropertyDescription, pdisplaytype: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetDisplayType(self, pdisplaytype)
proc GetColumnState*(self: ptr IPropertyDescription, pcsFlags: ptr SHCOLSTATEF): HRESULT {.inline, discardable.} = self.lpVtbl.GetColumnState(self, pcsFlags)
proc GetGroupingRange*(self: ptr IPropertyDescription, pgr: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetGroupingRange(self, pgr)
proc GetRelativeDescriptionType*(self: ptr IPropertyDescription, prdt: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetRelativeDescriptionType(self, prdt)
proc GetRelativeDescription*(self: ptr IPropertyDescription, propvar1: REFPROPVARIANT, propvar2: REFPROPVARIANT, ppszDesc1: ptr LPWSTR, ppszDesc2: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetRelativeDescription(self, propvar1, propvar2, ppszDesc1, ppszDesc2)
proc GetSortDescription*(self: ptr IPropertyDescription, psd: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetSortDescription(self, psd)
proc GetSortDescriptionLabel*(self: ptr IPropertyDescription, fDescending: WINBOOL, ppszDescription: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetSortDescriptionLabel(self, fDescending, ppszDescription)
proc GetAggregationType*(self: ptr IPropertyDescription, paggtype: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetAggregationType(self, paggtype)
proc GetConditionType*(self: ptr IPropertyDescription, pcontype: ptr int32, popDefault: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetConditionType(self, pcontype, popDefault)
proc GetEnumTypeList*(self: ptr IPropertyDescription, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetEnumTypeList(self, riid, ppv)
proc CoerceToCanonicalValue*(self: ptr IPropertyDescription, ppropvar: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.CoerceToCanonicalValue(self, ppropvar)
proc FormatForDisplay*(self: ptr IPropertyDescription, propvar: REFPROPVARIANT, pdfFlags: int32, ppszDisplay: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.FormatForDisplay(self, propvar, pdfFlags, ppszDisplay)
proc IsValueCanonical*(self: ptr IPropertyDescription, propvar: REFPROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.IsValueCanonical(self, propvar)
converter winim_converter_IPropertyDescription2*(x: ptr IPropertyDescription2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPropertyDescription2*(x: ptr IPropertyDescription2): ptr IPropertyDescription = cast[ptr IPropertyDescription](x)
proc GetImageReferenceForValue*(self: ptr IPropertyDescription2, propvar: REFPROPVARIANT, ppszImageRes: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetImageReferenceForValue(self, propvar, ppszImageRes)
converter winim_converter_IPropertyDescriptionAliasInfo*(x: ptr IPropertyDescriptionAliasInfo): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPropertyDescriptionAliasInfo*(x: ptr IPropertyDescriptionAliasInfo): ptr IPropertyDescription = cast[ptr IPropertyDescription](x)
proc GetSortByAlias*(self: ptr IPropertyDescriptionAliasInfo, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetSortByAlias(self, riid, ppv)
proc GetAdditionalSortByAliases*(self: ptr IPropertyDescriptionAliasInfo, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetAdditionalSortByAliases(self, riid, ppv)
converter winim_converter_IPropertyDescriptionSearchInfo*(x: ptr IPropertyDescriptionSearchInfo): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPropertyDescriptionSearchInfo*(x: ptr IPropertyDescriptionSearchInfo): ptr IPropertyDescription = cast[ptr IPropertyDescription](x)
proc GetSearchInfoFlags*(self: ptr IPropertyDescriptionSearchInfo, ppdsiFlags: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetSearchInfoFlags(self, ppdsiFlags)
proc GetColumnIndexType*(self: ptr IPropertyDescriptionSearchInfo, ppdciType: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetColumnIndexType(self, ppdciType)
proc GetProjectionString*(self: ptr IPropertyDescriptionSearchInfo, ppszProjection: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetProjectionString(self, ppszProjection)
proc GetMaxSize*(self: ptr IPropertyDescriptionSearchInfo, pcbMaxSize: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetMaxSize(self, pcbMaxSize)
converter winim_converter_IPropertyDescriptionRelatedPropertyInfo*(x: ptr IPropertyDescriptionRelatedPropertyInfo): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPropertyDescriptionRelatedPropertyInfo*(x: ptr IPropertyDescriptionRelatedPropertyInfo): ptr IPropertyDescription = cast[ptr IPropertyDescription](x)
proc GetRelatedProperty*(self: ptr IPropertyDescriptionRelatedPropertyInfo, pszRelationshipName: LPCWSTR, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetRelatedProperty(self, pszRelationshipName, riid, ppv)
converter winim_converter_IPropertySystem*(x: ptr IPropertySystem): ptr IUnknown = cast[ptr IUnknown](x)
proc GetPropertyDescription*(self: ptr IPropertySystem, propkey: REFPROPERTYKEY, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyDescription(self, propkey, riid, ppv)
proc GetPropertyDescriptionByName*(self: ptr IPropertySystem, pszCanonicalName: LPCWSTR, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyDescriptionByName(self, pszCanonicalName, riid, ppv)
proc GetPropertyDescriptionListFromString*(self: ptr IPropertySystem, pszPropList: LPCWSTR, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyDescriptionListFromString(self, pszPropList, riid, ppv)
proc EnumeratePropertyDescriptions*(self: ptr IPropertySystem, filterOn: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.EnumeratePropertyDescriptions(self, filterOn, riid, ppv)
proc FormatForDisplay*(self: ptr IPropertySystem, key: REFPROPERTYKEY, propvar: REFPROPVARIANT, pdff: int32, pszText: LPWSTR, cchText: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.FormatForDisplay(self, key, propvar, pdff, pszText, cchText)
proc FormatForDisplayAlloc*(self: ptr IPropertySystem, key: REFPROPERTYKEY, propvar: REFPROPVARIANT, pdff: int32, ppszDisplay: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.FormatForDisplayAlloc(self, key, propvar, pdff, ppszDisplay)
proc RegisterPropertySchema*(self: ptr IPropertySystem, pszPath: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.RegisterPropertySchema(self, pszPath)
proc UnregisterPropertySchema*(self: ptr IPropertySystem, pszPath: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.UnregisterPropertySchema(self, pszPath)
proc RefreshPropertySchema*(self: ptr IPropertySystem): HRESULT {.inline, discardable.} = self.lpVtbl.RefreshPropertySchema(self)
converter winim_converter_IPropertyDescriptionList*(x: ptr IPropertyDescriptionList): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCount*(self: ptr IPropertyDescriptionList, pcElem: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCount(self, pcElem)
proc GetAt*(self: ptr IPropertyDescriptionList, iElem: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetAt(self, iElem, riid, ppv)
converter winim_converter_IPropertyStoreFactory*(x: ptr IPropertyStoreFactory): ptr IUnknown = cast[ptr IUnknown](x)
proc GetPropertyStore*(self: ptr IPropertyStoreFactory, flags: int32, pUnkFactory: ptr IUnknown, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyStore(self, flags, pUnkFactory, riid, ppv)
proc GetPropertyStoreForKeys*(self: ptr IPropertyStoreFactory, rgKeys: ptr PROPERTYKEY, cKeys: UINT, flags: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyStoreForKeys(self, rgKeys, cKeys, flags, riid, ppv)
converter winim_converter_IDelayedPropertyStoreFactory*(x: ptr IDelayedPropertyStoreFactory): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IDelayedPropertyStoreFactory*(x: ptr IDelayedPropertyStoreFactory): ptr IPropertyStoreFactory = cast[ptr IPropertyStoreFactory](x)
proc GetDelayedPropertyStore*(self: ptr IDelayedPropertyStoreFactory, flags: int32, dwStoreId: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetDelayedPropertyStore(self, flags, dwStoreId, riid, ppv)
converter winim_converter_IPersistSerializedPropStorage*(x: ptr IPersistSerializedPropStorage): ptr IUnknown = cast[ptr IUnknown](x)
proc SetFlags*(self: ptr IPersistSerializedPropStorage, flags: PERSIST_SPROPSTORE_FLAGS): HRESULT {.inline, discardable.} = self.lpVtbl.SetFlags(self, flags)
proc SetPropertyStorage*(self: ptr IPersistSerializedPropStorage, psps: PCUSERIALIZEDPROPSTORAGE, cb: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetPropertyStorage(self, psps, cb)
proc GetPropertyStorage*(self: ptr IPersistSerializedPropStorage, ppsps: ptr ptr SERIALIZEDPROPSTORAGE, pcb: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyStorage(self, ppsps, pcb)
converter winim_converter_IPersistSerializedPropStorage2*(x: ptr IPersistSerializedPropStorage2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistSerializedPropStorage2*(x: ptr IPersistSerializedPropStorage2): ptr IPersistSerializedPropStorage = cast[ptr IPersistSerializedPropStorage](x)
proc GetPropertyStorageSize*(self: ptr IPersistSerializedPropStorage2, pcb: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyStorageSize(self, pcb)
proc GetPropertyStorageBuffer*(self: ptr IPersistSerializedPropStorage2, psps: ptr SERIALIZEDPROPSTORAGE, cb: DWORD, pcbWritten: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyStorageBuffer(self, psps, cb, pcbWritten)
converter winim_converter_IPropertySystemChangeNotify*(x: ptr IPropertySystemChangeNotify): ptr IUnknown = cast[ptr IUnknown](x)
proc SchemaRefreshed*(self: ptr IPropertySystemChangeNotify): HRESULT {.inline, discardable.} = self.lpVtbl.SchemaRefreshed(self)
converter winim_converter_ICreateObject*(x: ptr ICreateObject): ptr IUnknown = cast[ptr IUnknown](x)
proc CreateObject*(self: ptr ICreateObject, clsid: REFCLSID, pUnkOuter: ptr IUnknown, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.CreateObject(self, clsid, pUnkOuter, riid, ppv)

# objext/shobjidl.nim

type
  IXMLDOMDocument = object
  IObjectArray = object

const
  # FOLDER_ENUM_MODE* = enum
  FEM_VIEWRESULT* = 0
  FEM_NAVIGATION* = 1
  # FOLDERFLAGS* = enum
  FWF_NONE* = 0x0
  FWF_AUTOARRANGE* = 0x1
  FWF_ABBREVIATEDNAMES* = 0x2
  FWF_SNAPTOGRID* = 0x4
  FWF_OWNERDATA* = 0x8
  FWF_BESTFITWINDOW* = 0x10
  FWF_DESKTOP* = 0x20
  FWF_SINGLESEL* = 0x40
  FWF_NOSUBFOLDERS* = 0x80
  FWF_TRANSPARENT* = 0x100
  FWF_NOCLIENTEDGE* = 0x200
  FWF_NOSCROLL* = 0x400
  FWF_ALIGNLEFT* = 0x800
  FWF_NOICONS* = 0x1000
  FWF_SHOWSELALWAYS* = 0x2000
  FWF_NOVISIBLE* = 0x4000
  FWF_SINGLECLICKACTIVATE* = 0x8000
  FWF_NOWEBVIEW* = 0x10000
  FWF_HIDEFILENAMES* = 0x20000
  FWF_CHECKSELECT* = 0x40000
  FWF_NOENUMREFRESH* = 0x80000
  FWF_NOGROUPING* = 0x100000
  FWF_FULLROWSELECT* = 0x200000
  FWF_NOFILTERS* = 0x400000
  FWF_NOCOLUMNHEADER* = 0x800000
  FWF_NOHEADERINALLVIEWS* = 0x1000000
  FWF_EXTENDEDTILES* = 0x2000000
  FWF_TRICHECKSELECT* = 0x4000000
  FWF_AUTOCHECKSELECT* = 0x8000000
  FWF_NOBROWSERVIEWSTATE* = 0x10000000
  FWF_SUBSETGROUPS* = 0x20000000
  FWF_USESEARCHFOLDER* = 0x40000000
  FWF_ALLOWRTLREADING* = -2147483648
  # FOLDERVIEWMODE* = enum
  FVM_AUTO* = -1
  FVM_FIRST* = 1
  FVM_ICON* = 1
  FVM_SMALLICON* = 2
  FVM_LIST* = 3
  FVM_DETAILS* = 4
  FVM_THUMBNAIL* = 5
  FVM_TILE* = 6
  FVM_THUMBSTRIP* = 7
  FVM_CONTENT* = 8
  FVM_LAST* = 8
  # FOLDERLOGICALVIEWMODE* = enum
  FLVM_UNSPECIFIED* = -1
  FLVM_FIRST* = 1
  FLVM_DETAILS* = 1
  FLVM_TILES* = 2
  FLVM_ICONS* = 3
  FLVM_LIST* = 4
  FLVM_CONTENT* = 5
  FLVM_LAST* = 5
  # FOLDERVIEWOPTIONS* = enum
  FVO_DEFAULT* = 0x0
  FVO_VISTALAYOUT* = 0x1
  FVO_CUSTOMPOSITION* = 0x2
  FVO_CUSTOMORDERING* = 0x4
  FVO_SUPPORTHYPERLINKS* = 0x8
  FVO_NOANIMATIONS* = 0x10
  FVO_NOSCROLLTIPS* = 0x20
  # SVSIF* = enum
  SVSI_DESELECT* = 0x0
  SVSI_SELECT* = 0x1
  SVSI_EDIT* = 0x3
  SVSI_DESELECTOTHERS* = 0x4
  SVSI_ENSUREVISIBLE* = 0x8
  SVSI_FOCUSED* = 0x10
  SVSI_TRANSLATEPT* = 0x20
  SVSI_SELECTIONMARK* = 0x40
  SVSI_POSITIONITEM* = 0x80
  SVSI_CHECK* = 0x100
  SVSI_CHECK2* = 0x200
  SVSI_KEYBOARDSELECT* = 0x401
  SVSI_NOTAKEFOCUS* = 0x40000000
  # SVGIO* = enum
  SVGIO_BACKGROUND* = 0x0
  SVGIO_SELECTION* = 0x1
  SVGIO_ALLVIEW* = 0x2
  SVGIO_CHECKED* = 0x3
  SVGIO_TYPE_MASK* = 0xf
  SVGIO_FLAG_VIEWORDER* = -2147483648
  # SVUIA_STATUS* = enum
  SVUIA_DEACTIVATE* = 0
  SVUIA_ACTIVATE_NOFOCUS* = 1
  SVUIA_ACTIVATE_FOCUS* = 2
  SVUIA_INPLACEACTIVATE* = 3
  # FVTEXTTYPE* = enum
  FVST_EMPTYTEXT* = 0
  # VPWATERMARKFLAGS* = enum
  VPWF_DEFAULT* = 0x0
  VPWF_ALPHABLEND* = 0x1
  # VPCOLORFLAGS* = enum
  VPCF_TEXT* = 1
  VPCF_BACKGROUND* = 2
  VPCF_SORTCOLUMN* = 3
  VPCF_SUBTEXT* = 4
  VPCF_TEXTBACKGROUND* = 5
  # CM_MASK* = enum
  CM_MASK_WIDTH* = 0x1
  CM_MASK_DEFAULTWIDTH* = 0x2
  CM_MASK_IDEALWIDTH* = 0x4
  CM_MASK_NAME* = 0x8
  CM_MASK_STATE* = 0x10
  # CM_STATE* = enum
  CM_STATE_NONE* = 0x0
  CM_STATE_VISIBLE* = 0x1
  CM_STATE_FIXEDWIDTH* = 0x2
  CM_STATE_NOSORTBYFOLDERNESS* = 0x4
  CM_STATE_ALWAYSVISIBLE* = 0x8
  # CM_ENUM_FLAGS* = enum
  CM_ENUM_ALL* = 0x1
  CM_ENUM_VISIBLE* = 0x2
  # CM_SET_WIDTH_VALUE* = enum
  CM_WIDTH_USEDEFAULT* = -1
  CM_WIDTH_AUTOSIZE* = -2
  # SIGDN* = enum
  SIGDN_NORMALDISPLAY* = 0x0
  SIGDN_PARENTRELATIVEPARSING* = -2147385343
  SIGDN_DESKTOPABSOLUTEPARSING* = -2147319808
  SIGDN_PARENTRELATIVEEDITING* = -2147282943
  SIGDN_DESKTOPABSOLUTEEDITING* = -2147172352
  SIGDN_FILESYSPATH* = -2147123200
  SIGDN_URL* = -2147057664
  SIGDN_PARENTRELATIVEFORADDRESSBAR* = -2146975743
  SIGDN_PARENTRELATIVE* = -2146959359
  SIGDN_PARENTRELATIVEFORUI* = -2146877439
  # DATAOBJ_GET_ITEM_FLAGS* = enum
  DOGIF_DEFAULT* = 0x0
  DOGIF_TRAVERSE_LINK* = 0x1
  DOGIF_NO_HDROP* = 0x2
  DOGIF_NO_URL* = 0x4
  DOGIF_ONLY_IF_ONE* = 0x8
  # STGOP* = enum
  STGOP_MOVE* = 1
  STGOP_COPY* = 2
  STGOP_SYNC* = 3
  STGOP_REMOVE* = 5
  STGOP_RENAME* = 6
  STGOP_APPLYPROPERTIES* = 8
  STGOP_NEW* = 10
  # SIATTRIBFLAGS* = enum
  SIATTRIBFLAGS_AND* = 0x1
  SIATTRIBFLAGS_OR* = 0x2
  SIATTRIBFLAGS_APPCOMPAT* = 0x3
  SIATTRIBFLAGS_MASK* = 0x3
  SIATTRIBFLAGS_ALLITEMS* = 0x4000
  # CATEGORYINFO_FLAGS* = enum
  CATINFO_NORMAL* = 0x0
  CATINFO_COLLAPSED* = 0x1
  CATINFO_HIDDEN* = 0x2
  CATINFO_EXPANDED* = 0x4
  CATINFO_NOHEADER* = 0x8
  CATINFO_NOTCOLLAPSIBLE* = 0x10
  CATINFO_NOHEADERCOUNT* = 0x20
  CATINFO_SUBSETTED* = 0x40
  # CATSORT_FLAGS* = enum
  CATSORT_DEFAULT* = 0x0
  CATSORT_NAME* = 0x1
  # DSH_FLAGS* = enum
  DSH_ALLOWDROPDESCRIPTIONTEXT* = 0x1
  # SLR_FLAGS* = enum
  SLR_NO_UI* = 0x1
  SLR_ANY_MATCH* = 0x2
  SLR_UPDATE* = 0x4
  SLR_NOUPDATE* = 0x8
  SLR_NOSEARCH* = 0x10
  SLR_NOTRACK* = 0x20
  SLR_NOLINKINFO* = 0x40
  SLR_INVOKE_MSI* = 0x80
  SLR_NO_UI_WITH_MSG_PUMP* = 0x101
  SLR_OFFER_DELETE_WITHOUT_FILE* = 0x200
  SLR_KNOWNFOLDER* = 0x400
  SLR_MACHINE_IN_LOCAL_TARGET* = 0x800
  SLR_UPDATE_MACHINE_AND_SID* = 0x1000
  # SLGP_FLAGS* = enum
  SLGP_SHORTPATH* = 0x1
  SLGP_UNCPRIORITY* = 0x2
  SLGP_RAWPATH* = 0x4
  SLGP_RELATIVEPRIORITY* = 0x8
  # SPACTION* = enum
  SPACTION_NONE* = 0
  SPACTION_MOVING* = 1
  SPACTION_COPYING* = 2
  SPACTION_RECYCLING* = 3
  SPACTION_APPLYINGATTRIBS* = 4
  SPACTION_DOWNLOADING* = 5
  SPACTION_SEARCHING_INTERNET* = 6
  SPACTION_CALCULATING* = 7
  SPACTION_UPLOADING* = 8
  SPACTION_SEARCHING_FILES* = 9
  SPACTION_DELETING* = 10
  SPACTION_RENAMING* = 11
  SPACTION_FORMATTING* = 12
  SPACTION_COPY_MOVING* = 13
  # SPTEXT* = enum
  SPTEXT_ACTIONDESCRIPTION* = 1
  SPTEXT_ACTIONDETAIL* = 2
  # THUMBBUTTONFLAGS* = enum
  THBF_ENABLED* = 0x0
  THBF_DISABLED* = 0x1
  THBF_DISMISSONCLICK* = 0x2
  THBF_NOBACKGROUND* = 0x4
  THBF_HIDDEN* = 0x8
  THBF_NONINTERACTIVE* = 0x10
  # THUMBBUTTONMASK* = enum
  THB_BITMAP* = 0x1
  THB_ICON* = 0x2
  THB_TOOLTIP* = 0x4
  THB_FLAGS* = 0x8
  # TBPFLAG* = enum
  TBPF_NOPROGRESS* = 0x0
  TBPF_INDETERMINATE* = 0x1
  TBPF_NORMAL* = 0x2
  TBPF_ERROR* = 0x4
  TBPF_PAUSED* = 0x8
  # STPFLAG* = enum
  STPF_NONE* = 0x0
  STPF_USEAPPTHUMBNAILALWAYS* = 0x1
  STPF_USEAPPTHUMBNAILWHENACTIVE* = 0x2
  STPF_USEAPPPEEKALWAYS* = 0x4
  STPF_USEAPPPEEKWHENACTIVE* = 0x8
  # EXPLORER_BROWSER_OPTIONS* = enum
  EBO_NONE* = 0x0
  EBO_NAVIGATEONCE* = 0x1
  EBO_SHOWFRAMES* = 0x2
  EBO_ALWAYSNAVIGATE* = 0x4
  EBO_NOTRAVELLOG* = 0x8
  EBO_NOWRAPPERWINDOW* = 0x10
  EBO_HTMLSHAREPOINTVIEW* = 0x20
  EBO_NOBORDER* = 0x40
  EBO_NOPERSISTVIEWSTATE* = 0x80
  # EXPLORER_BROWSER_FILL_FLAGS* = enum
  EBF_NONE* = 0x0
  EBF_SELECTFROMDATAOBJECT* = 0x100
  EBF_NODROPTARGET* = 0x200
  # PDOPSTATUS* = enum
  PDOPS_RUNNING* = 1
  PDOPS_PAUSED* = 2
  PDOPS_CANCELLED* = 3
  PDOPS_STOPPED* = 4
  PDOPS_ERRORS* = 5
  # NAMESPACEWALKFLAG* = enum
  NSWF_DEFAULT* = 0x0
  NSWF_NONE_IMPLIES_ALL* = 0x1
  NSWF_ONE_IMPLIES_ALL* = 0x2
  NSWF_DONT_TRAVERSE_LINKS* = 0x4
  NSWF_DONT_ACCUMULATE_RESULT* = 0x8
  NSWF_TRAVERSE_STREAM_JUNCTIONS* = 0x10
  NSWF_FILESYSTEM_ONLY* = 0x20
  NSWF_SHOW_PROGRESS* = 0x40
  NSWF_FLAG_VIEWORDER* = 0x80
  NSWF_IGNORE_AUTOPLAY_HIDA* = 0x100
  NSWF_ASYNC* = 0x200
  NSWF_DONT_RESOLVE_LINKS* = 0x400
  NSWF_ACCUMULATE_FOLDERS* = 0x800
  NSWF_DONT_SORT* = 0x1000
  NSWF_USE_TRANSFER_MEDIUM* = 0x2000
  NSWF_DONT_TRAVERSE_STREAM_JUNCTIONS* = 0x4000
  NSWF_ANY_IMPLIES_ALL* = 0x8000
  # FILE_USAGE_TYPE* = enum
  FUT_PLAYING* = 0
  FUT_EDITING* = 1
  FUT_GENERIC* = 2
  # FDE_OVERWRITE_RESPONSE* = enum
  FDEOR_DEFAULT* = 0
  FDEOR_ACCEPT* = 1
  FDEOR_REFUSE* = 2
  # FDE_SHAREVIOLATION_RESPONSE* = enum
  FDESVR_DEFAULT* = 0
  FDESVR_ACCEPT* = 1
  FDESVR_REFUSE* = 2
  # FDAP = enum
  FDAP_BOTTOM* = 0
  FDAP_TOP* = 1
  # CDCONTROLSTATEF* = enum
  CDCS_INACTIVE* = 0x0
  CDCS_ENABLED* = 0x1
  CDCS_VISIBLE* = 0x2
  CDCS_ENABLEDVISIBLE* = 0x3
  # ASSOCIATIONLEVEL* = enum
  AL_MACHINE* = 0
  AL_EFFECTIVE* = 1
  AL_USER* = 2
  # ASSOCIATIONTYPE* = enum
  AT_FILEEXTENSION* = 0
  AT_URLPROTOCOL* = 1
  AT_STARTMENUCLIENT* = 2
  AT_MIMETYPE* = 3
  # NWMF = enum
  NWMF_UNLOADING* = 0x1
  NWMF_USERINITED* = 0x2
  NWMF_FIRST* = 0x4
  NWMF_OVERRIDEKEY* = 0x8
  NWMF_SHOWHELP* = 0x10
  NWMF_HTMLDIALOG* = 0x20
  NWMF_FROMDIALOGCHILD* = 0x40
  NWMF_USERREQUESTED* = 0x80
  NWMF_USERALLOWED* = 0x100
  NWMF_FORCEWINDOW* = 0x10000
  NWMF_FORCETAB* = 0x20000
  NWMF_SUGGESTWINDOW* = 0x40000
  NWMF_SUGGESTTAB* = 0x80000
  NWMF_INACTIVETAB* = 0x100000
  # ATTACHMENT_PROMPT* = enum
  ATTACHMENT_PROMPT_NONE* = 0x0
  ATTACHMENT_PROMPT_SAVE* = 0x1
  ATTACHMENT_PROMPT_EXEC* = 0x2
  ATTACHMENT_PROMPT_EXEC_OR_SAVE* = 0x3
  # ATTACHMENT_ACTION* = enum
  ATTACHMENT_ACTION_CANCEL* = 0x0
  ATTACHMENT_ACTION_SAVE* = 0x1
  ATTACHMENT_ACTION_EXEC* = 0x2
  # KF_CATEGORY* = enum
  KF_CATEGORY_VIRTUAL* = 1
  KF_CATEGORY_FIXED* = 2
  KF_CATEGORY_COMMON* = 3
  KF_CATEGORY_PERUSER* = 4
  # FFFP_MODE* = enum
  FFFP_EXACTMATCH* = 0
  FFFP_NEARESTPARENTMATCH* = 1
  # SHARE_ROLE* = enum
  SHARE_ROLE_INVALID* = -1
  SHARE_ROLE_READER* = 0
  SHARE_ROLE_CONTRIBUTOR* = 1
  SHARE_ROLE_CO_OWNER* = 2
  SHARE_ROLE_OWNER* = 3
  SHARE_ROLE_CUSTOM* = 4
  SHARE_ROLE_MIXED* = 5
  # DEF_SHARE_ID* = enum
  DEFSHAREID_USERS* = 1
  DEFSHAREID_PUBLIC* = 2
  # NSTCGNI* = enum
  NSTCGNI_NEXT* = 0
  NSTCGNI_NEXTVISIBLE* = 1
  NSTCGNI_PREV* = 2
  NSTCGNI_PREVVISIBLE* = 3
  NSTCGNI_PARENT* = 4
  NSTCGNI_CHILD* = 5
  NSTCGNI_FIRSTVISIBLE* = 6
  NSTCGNI_LASTVISIBLE* = 7
  # NSTCSTYLE2* = enum
  NSTCS2_DEFAULT* = 0x0
  NSTCS2_INTERRUPTNOTIFICATIONS* = 0x1
  NSTCS2_SHOWNULLSPACEMENU* = 0x2
  NSTCS2_DISPLAYPADDING* = 0x4
  NSTCS2_DISPLAYPINNEDONLY* = 0x8
  NTSCS2_NOSINGLETONAUTOEXPAND* = 0x10
  NTSCS2_NEVERINSERTNONENUMERATED* = 0x20
  # NSTCFOLDERCAPABILITIES* = enum
  NSTCFC_NONE* = 0x0
  NSTCFC_PINNEDITEMFILTERING* = 0x1
  NSTCFC_DELAY_REGISTER_NOTIFY* = 0x2
  # CPVIEW* = enum
  CPVIEW_CLASSIC* = 0
  CPVIEW_ALLITEMS* = CPVIEW_CLASSIC
  CPVIEW_CATEGORY* = 1
  CPVIEW_HOME* = CPVIEW_CATEGORY
  # _KNOWNDESTCATEGORY* = enum
  KDC_FREQUENT* = 1
  KDC_RECENT* = 2
  # _APPDOCLISTTYPE* = enum
  ADLT_RECENT* = 0
  ADLT_FREQUENT* = 1
  # _DESKTOP_SLIDESHOW_OPTIONS* = enum
  DSO_SHUFFLEIMAGES* = 0x1
  # _DESKTOP_SLIDESHOW_STATE* = enum
  DSS_ENABLED* = 0x1
  DSS_SLIDESHOW* = 0x2
  DSS_DISABLED_BY_REMOTE_SESSION* = 0x4
  # _DESKTOP_SLIDESHOW_DIRECTION* = enum
  DSD_FORWARD* = 0
  DSD_BACKWARD* = 1
  # _DESKTOP_WALLPAPER_POSITION* = enum
  DWPOS_CENTER* = 0
  DWPOS_TILE* = 1
  DWPOS_STRETCH* = 2
  DWPOS_FIT* = 3
  DWPOS_FILL* = 4
  DWPOS_SPAN* = 5
  # HOMEGROUPSHARINGCHOICES* = enum
  HGSC_NONE* = 0x0
  HGSC_MUSICLIBRARY* = 0x1
  HGSC_PICTURESLIBRARY* = 0x2
  HGSC_VIDEOSLIBRARY* = 0x4
  HGSC_DOCUMENTSLIBRARY* = 0x8
  HGSC_PRINTERS* = 0x10
  # LIBRARYFOLDERFILTER* = enum
  LFF_FORCEFILESYSTEM* = 1
  LFF_STORAGEITEMS* = 2
  LFF_ALLITEMS* = 3
  # LIBRARYOPTIONFLAGS* = enum
  LOF_DEFAULT* = 0x0
  LOF_PINNEDTONAVPANE* = 0x1
  LOF_MASK_ALL* = 0x1
  # DEFAULTSAVEFOLDERTYPE* = enum
  DSFT_DETECT* = 1
  DSFT_PRIVATE* = 2
  DSFT_PUBLIC* = 3
  # LIBRARYSAVEFLAGS* = enum
  LSF_FAILIFTHERE* = 0x0
  LSF_OVERRIDEEXISTING* = 0x1
  LSF_MAKEUNIQUENAME* = 0x2
  # PBM_EVENT* = enum
  PE_DUCKSESSION* = 1
  PE_UNDUCKSESSION* = 2
  # PBM_SESSION_TYPE* = enum
  ST_COMMUNICATION* = 1
  ST_MEDIA* = 2
  # PBM_PLAY_STATE* = enum
  PS_PLAYING* = 1
  PS_PAUSED* = 2
  PS_STOPPED* = 3
  # PBM_MUTE_STATE* = enum
  MS_MUTED* = 1
  MS_UNMUTED* = 2
  # DEFAULT_FOLDER_MENU_RESTRICTIONS* = enum
  DFMR_DEFAULT* = 0x0
  DFMR_NO_STATIC_VERBS* = 0x8
  DFMR_STATIC_VERBS_ONLY* = 0x10
  DFMR_NO_RESOURCE_VERBS* = 0x20
  DFMR_OPTIN_HANDLERS_ONLY* = 0x40
  DFMR_RESOURCE_AND_FOLDER_VERBS_ONLY* = 0x80
  DFMR_USE_SPECIFIED_HANDLERS* = 0x100
  DFMR_USE_SPECIFIED_VERBS* = 0x200
  DFMR_NO_ASYNC_VERBS* = 0x400
  # ACTIVATEOPTIONS* = enum
  AO_NONE* = 0x0
  AO_DESIGNMODE* = 0x1
  AO_NOERRORUI* = 0x2
  AO_NOSPLASHSCREEN* = 0x4
  # LIBRARYMANAGEDIALOGOPTIONS* = enum
  LMD_DEFAULT* = 0x0
  LMD_ALLOWUNINDEXABLENETWORKLOCATIONS* = 0x1
  # ASSOC_FILTER* = enum
  ASSOC_FILTER_NONE* = 0x0
  ASSOC_FILTER_RECOMMENDED* = 0x1
  # UNDOCK_REASON* = enum
  UR_RESOLUTION_CHANGE* = 0
  UR_MONITOR_DISCONNECT* = 1
  # MONITOR_APP_VISIBILITY* = enum
  MAV_UNKNOWN* = 0
  MAV_NO_APP_VISIBLE* = 1
  MAV_APP_VISIBLE* = 2
  # PACKAGE_EXECUTION_STATE* = enum
  PES_UNKNOWN* = 0
  PES_RUNNING* = 1
  PES_SUSPENDING* = 2
  PES_SUSPENDED* = 3
  PES_TERMINATED* = 4
  # AHE_TYPE* = enum
  AHE_DESKTOP* = 0
  AHE_IMMERSIVE* = 1
  # EC_HOST_UI_MODE* = enum
  ECHUIM_DESKTOP* = 0
  ECHUIM_IMMERSIVE* = 1
  ECHUIM_SYSTEM_LAUNCHER* = 2
  # APPLICATION_VIEW_STATE* = enum
  AVS_FULLSCREEN_LANDSCAPE* = 0
  AVS_FILLED* = 1
  AVS_SNAPPED* = 2
  AVS_FULLSCREEN_PORTRAIT* = 3
  # EDGE_GESTURE_KIND* = enum
  EGK_TOUCH* = 0
  EGK_KEYBOARD* = 1
  EGK_MOUSE* = 2

type
  # CMINVOKECOMMANDINFO* {.final, pure.} = object
  #   cbSize*: DWORD
  #   fMask*: DWORD
  #   hwnd*: HWND
  #   lpVerb*: LPCSTR
  #   lpParameters*: LPCSTR
  #   lpDirectory*: LPCSTR
  #   nShow*: cint
  #   dwHotKey*: DWORD
  #   hIcon*: HANDLE
  # LPCMINVOKECOMMANDINFO* = ptr CMINVOKECOMMANDINFO
  PCCMINVOKECOMMANDINFO* = ptr CMINVOKECOMMANDINFO
  CMINVOKECOMMANDINFOEX* {.final, pure.} = object
    cbSize*: DWORD
    fMask*: DWORD
    hwnd*: HWND
    lpVerb*: LPCSTR
    lpParameters*: LPCSTR
    lpDirectory*: LPCSTR
    nShow*: cint
    dwHotKey*: DWORD
    hIcon*: HANDLE
    lpTitle*: LPCSTR
    lpVerbW*: LPCWSTR
    lpParametersW*: LPCWSTR
    lpDirectoryW*: LPCWSTR
    lpTitleW*: LPCWSTR
    ptInvoke*: POINT
  LPCMINVOKECOMMANDINFOEX* = ptr CMINVOKECOMMANDINFOEX
  PCCMINVOKECOMMANDINFOEX* = ptr CMINVOKECOMMANDINFOEX
  LPCONTEXTMENU3* = ptr IContextMenu3
  # PERSIST_FOLDER_TARGET_INFO* {.final, pure.} = object
  #   pidlTargetFolder*: PIDLIST_ABSOLUTE
  #   szTargetParsingName*: array[260, WCHAR]
  #   szNetworkProvider*: array[260, WCHAR]
  #   dwAttributes*: DWORD
  #   csidl*: cint
  # LPENUMIDLIST* = ptr IEnumIDList
  SHGDNF* = DWORD
  SHCONTF* = DWORD
  SFGAOF* = ULONG
  # LPSHELLFOLDER* = ptr IShellFolder
  # EXTRASEARCH* {.final, pure.} = object
  #   guidSearch*: GUID
  #   wszFriendlyName*: array[80, WCHAR]
  #   wszUrl*: array[2084, WCHAR]
  # LPENUMEXTRASEARCH* = ptr IEnumExtraSearch
  # LPVIEWSETTINGS* = cstring
  # FOLDERSETTINGS* {.final, pure.} = object
  #   ViewMode*: UINT
  #   fFlags*: UINT
  # LPFOLDERSETTINGS* = ptr FOLDERSETTINGS
  # LPCFOLDERSETTINGS* = ptr FOLDERSETTINGS
  PFOLDERSETTINGS* = ptr FOLDERSETTINGS
  SVSIF* = UINT
  SVGIO* = cint
  LPFNSVADDPROPSHEETPAGE* = LPFNADDPROPSHEETPAGE
  # LPSHELLVIEW* = ptr IShellView
  # SHELLVIEWID* = GUID
  # SV2CVW2_PARAMS* {.final, pure.} = object
  #   cbSize*: DWORD
  #   psvPrev*: ptr IShellView
  #   pfs*: LPCFOLDERSETTINGS
  #   psbOwner*: ptr IShellBrowser
  #   prcView*: ptr RECT
  #   pvid*: ptr SHELLVIEWID
  #   hwndView*: HWND
  SV3CVW3_FLAGS* = DWORD
  SORTDIRECTION* = cint
  SORTCOLUMN* {.final, pure.} = object
    propkey*: PROPERTYKEY
    direction*: SORTDIRECTION
  DEPRECATED_HRESULT* = HRESULT
  # LPCOMMDLGBROWSER* = ptr ICommDlgBrowser
  LPCOMMDLGBROWSER2* = ptr ICommDlgBrowser2
  CM_COLUMNINFO* {.final, pure.} = object
    cbSize*: DWORD
    dwMask*: DWORD
    dwState*: DWORD
    uWidth*: UINT
    uDefaultWidth*: UINT
    uIdealWidth*: UINT
    wszName*: array[80, WCHAR]
  LPTBBUTTONSB* = LPTBBUTTON
  # LPSHELLBROWSER* = ptr IShellBrowser
  SICHINTF* = DWORD
  SIIGBF* = cint
  STGTRANSCONFIRMATION* = GUID
  LPSTGTRANSCONFIRMATION* = ptr GUID
  TRANSFER_SOURCE_FLAGS* = DWORD
  TRANSFER_ADVISE_STATE* = DWORD
  SHELL_ITEM_RESOURCE* {.final, pure.} = object
    guidType*: GUID
    szName*: array[260, WCHAR]
  PROPERTYUI_NAME_FLAGS* = DWORD
  PROPERTYUI_FLAGS* = DWORD
  PROPERTYUI_FORMAT_FLAGS* = DWORD
  TCATEGORY_INFO* {.final, pure.} = object # renamed from CATEGORY_INFO
    cif*: int32
    wszName*: array[260, WCHAR]
  # SHDRAGIMAGE* {.final, pure.} = object
  #   sizeDragImage*: SIZE
  #   ptOffset*: POINT
  #   hbmpDragImage*: HBITMAP
  #   crColorKey*: COLORREF
  SPINITF* = DWORD
  SPBEGINF* = DWORD
  # LPSHELLEXTINIT* = ptr IShellExtInit
  EXPPS* = UINT
  # LPSHELLPROPSHEETEXT* = ptr IShellPropSheetExt
  LPEXTRACTIMAGE* = ptr IExtractImage
  LPEXTRACTIMAGE2* = ptr IExtractImage2
  DESKBANDINFO* {.final, pure.} = object
    dwMask*: DWORD
    ptMinSize*: POINTL
    ptMaxSize*: POINTL
    ptIntegral*: POINTL
    ptActual*: POINTL
    wszTitle*: array[256, WCHAR]
    dwModeFlags*: DWORD
    crBkgnd*: COLORREF
  # HIMAGELIST* = ptr IUnknown
  THUMBBUTTON* {.final, pure.} = object
    dwMask*: int32
    iId*: UINT
    iBitmap*: UINT
    hIcon*: HICON
    szTip*: array[260, WCHAR]
    dwFlags*: int32
  LPTHUMBBUTTON* = ptr THUMBBUTTON
  OPPROGDLGF* = DWORD
  PDMODE* = DWORD
  BANDSITEINFO* {.final, pure.} = object
    dwMask*: DWORD
    dwState*: DWORD
    dwStyle*: DWORD
  CDBE_ACTIONS* = DWORD
  MP_POPUPFLAGS* = cint
  FILEOPENDIALOGOPTIONS* = DWORD
  DELEGATEITEMID* {.final, pure.} = object
    cbSize*: WORD
    wOuter*: WORD
    cbInner*: WORD
    rgb*: array[1, BYTE]
  PCDELEGATEITEMID* = ptr DELEGATEITEMID
  PDELEGATEITEMID* = ptr DELEGATEITEMID
  LPBROWSERFRAMEOPTIONS* = ptr IBrowserFrameOptions
  BROWSERFRAMEOPTIONS* = DWORD
  SMDATA* {.final, pure.} = object
    dwMask*: DWORD
    dwFlags*: DWORD
    hmenu*: HMENU
    hwnd*: HWND
    uId*: UINT
    uIdParent*: UINT
    uIdAncestor*: UINT
    punk*: ptr IUnknown
    pidlFolder*: PIDLIST_ABSOLUTE
    pidlItem*: PUITEMID_CHILD
    psf*: ptr IShellFolder
    pvUserData*: pointer
  LPSMDATA* = ptr SMDATA
  SMINFO* {.final, pure.} = object
    dwMask*: DWORD
    dwType*: DWORD
    dwFlags*: DWORD
    iIcon*: cint
  SMCSHCHANGENOTIFYSTRUCT* {.final, pure.} = object
    lEvent*: LONG
    pidl1*: PCIDLIST_ABSOLUTE
    pidl2*: PCIDLIST_ABSOLUTE
  KF_DEFINITION_FLAGS* = DWORD
  # KF_REDIRECT_FLAGS* = DWORD
  KF_REDIRECTION_CAPABILITIES* = DWORD
  KNOWNFOLDER_DEFINITION* {.final, pure.} = object
    category*: int32
    pszName*: LPWSTR
    pszDescription*: LPWSTR
    fidParent*: KNOWNFOLDERID
    pszRelativePath*: LPWSTR
    pszParsingName*: LPWSTR
    pszTooltip*: LPWSTR
    pszLocalizedName*: LPWSTR
    pszIcon*: LPWSTR
    pszSecurity*: LPWSTR
    dwAttributes*: DWORD
    kfdFlags*: KF_DEFINITION_FLAGS
    ftidType*: FOLDERTYPEID
  NMCII_FLAGS* = cint
  NMCSAEI_FLAGS* = cint
  NSTCSTYLE* = DWORD
  NSTCROOTSTYLE* = DWORD
  NSTCITEMSTATE* = DWORD
  NSTCEHITTEST* = DWORD
  NSTCECLICKTYPE* = DWORD
  NSTCCUSTOMDRAW* {.final, pure.} = object
    psi*: ptr IShellItem
    uItemState*: UINT
    nstcis*: NSTCITEMSTATE
    pszText*: LPCWSTR
    iImage*: cint
    himl*: HIMAGELIST
    iLevel*: cint
    iIndent*: cint
  PREVIEWHANDLERFRAMEINFO* {.final, pure.} = object
    haccel*: HACCEL
    cAccelEntries*: UINT
  EXPLORERPANE* = GUID
  REFEXPLORERPANE* = ptr EXPLORERPANE
  EXPLORERPANESTATE* = DWORD
  EXPCMDSTATE* = DWORD
  EXPCMDFLAGS* = DWORD
  HTHEME* = HANDLE
  PZZWSTR* = ptr WCHAR
  IContextMenu3* {.pure.} = object
    lpVtbl*: ptr IContextMenu3Vtbl
  IContextMenu3Vtbl* {.pure, inheritable.} = object of IContextMenu2Vtbl
    HandleMenuMsg2*: proc(self: ptr IContextMenu3, uMsg: UINT, wParam: WPARAM, lParam: LPARAM, plResult: ptr LRESULT): HRESULT {.stdcall.}
  IExecuteCommand* {.pure.} = object
    lpVtbl*: ptr IExecuteCommandVtbl
  IExecuteCommandVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetKeyState*: proc(self: ptr IExecuteCommand, grfKeyState: DWORD): HRESULT {.stdcall.}
    SetParameters*: proc(self: ptr IExecuteCommand, pszParameters: LPCWSTR): HRESULT {.stdcall.}
    SetPosition*: proc(self: ptr IExecuteCommand, pt: POINT): HRESULT {.stdcall.}
    SetShowWindow*: proc(self: ptr IExecuteCommand, nShow: int32): HRESULT {.stdcall.}
    SetNoShowUI*: proc(self: ptr IExecuteCommand, fNoShowUI: WINBOOL): HRESULT {.stdcall.}
    SetDirectory*: proc(self: ptr IExecuteCommand, pszDirectory: LPCWSTR): HRESULT {.stdcall.}
    Execute*: proc(self: ptr IExecuteCommand): HRESULT {.stdcall.}
  IRunnableTask* {.pure.} = object
    lpVtbl*: ptr IRunnableTaskVtbl
  IRunnableTaskVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Run*: proc(self: ptr IRunnableTask): HRESULT {.stdcall.}
    Kill*: proc(self: ptr IRunnableTask, bWait: WINBOOL): HRESULT {.stdcall.}
    Suspend*: proc(self: ptr IRunnableTask): HRESULT {.stdcall.}
    Resume*: proc(self: ptr IRunnableTask): HRESULT {.stdcall.}
    IsRunning*: proc(self: ptr IRunnableTask): ULONG {.stdcall.}
  IShellTaskScheduler* {.pure.} = object
    lpVtbl*: ptr IShellTaskSchedulerVtbl
  IShellTaskSchedulerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AddTask*: proc(self: ptr IShellTaskScheduler, prt: ptr IRunnableTask, rtoid: REFTASKOWNERID, lParam: DWORD_PTR, dwPriority: DWORD): HRESULT {.stdcall.}
    RemoveTasks*: proc(self: ptr IShellTaskScheduler, rtoid: REFTASKOWNERID, lParam: DWORD_PTR, bWaitIfRunning: WINBOOL): HRESULT {.stdcall.}
    CountTasks*: proc(self: ptr IShellTaskScheduler, rtoid: REFTASKOWNERID): UINT {.stdcall.}
    Status*: proc(self: ptr IShellTaskScheduler, dwReleaseStatus: DWORD, dwThreadTimeout: DWORD): HRESULT {.stdcall.}
  IQueryCodePage* {.pure.} = object
    lpVtbl*: ptr IQueryCodePageVtbl
  IQueryCodePageVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCodePage*: proc(self: ptr IQueryCodePage, puiCodePage: ptr UINT): HRESULT {.stdcall.}
    SetCodePage*: proc(self: ptr IQueryCodePage, uiCodePage: UINT): HRESULT {.stdcall.}
  IPersistIDList* {.pure.} = object
    lpVtbl*: ptr IPersistIDListVtbl
  IPersistIDListVtbl* {.pure, inheritable.} = object of IPersistVtbl
    SetIDList*: proc(self: ptr IPersistIDList, pidl: PCIDLIST_ABSOLUTE): HRESULT {.stdcall.}
    GetIDList*: proc(self: ptr IPersistIDList, ppidl: ptr PIDLIST_ABSOLUTE): HRESULT {.stdcall.}
  IEnumFullIDList* {.pure.} = object
    lpVtbl*: ptr IEnumFullIDListVtbl
  IEnumFullIDListVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumFullIDList, celt: ULONG, rgelt: ptr PIDLIST_ABSOLUTE, pceltFetched: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumFullIDList, celt: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumFullIDList): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumFullIDList, ppenum: ptr ptr IEnumFullIDList): HRESULT {.stdcall.}
  IObjectWithFolderEnumMode* {.pure.} = object
    lpVtbl*: ptr IObjectWithFolderEnumModeVtbl
  IObjectWithFolderEnumModeVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetMode*: proc(self: ptr IObjectWithFolderEnumMode, feMode: int32): HRESULT {.stdcall.}
    GetMode*: proc(self: ptr IObjectWithFolderEnumMode, pfeMode: ptr int32): HRESULT {.stdcall.}
  IParseAndCreateItem* {.pure.} = object
    lpVtbl*: ptr IParseAndCreateItemVtbl
  IParseAndCreateItemVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetItem*: proc(self: ptr IParseAndCreateItem, psi: ptr IShellItem): HRESULT {.stdcall.}
    GetItem*: proc(self: ptr IParseAndCreateItem, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IFolderViewOptions* {.pure.} = object
    lpVtbl*: ptr IFolderViewOptionsVtbl
  IFolderViewOptionsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetFolderViewOptions*: proc(self: ptr IFolderViewOptions, fvoMask: int32, fvoFlags: int32): HRESULT {.stdcall.}
    GetFolderViewOptions*: proc(self: ptr IFolderViewOptions, pfvoFlags: ptr int32): HRESULT {.stdcall.}
  IShellView3* {.pure.} = object
    lpVtbl*: ptr IShellView3Vtbl
  IShellView3Vtbl* {.pure, inheritable.} = object of IShellView2Vtbl
    CreateViewWindow3*: proc(self: ptr IShellView3, psbOwner: ptr IShellBrowser, psvPrev: ptr IShellView, dwViewFlags: SV3CVW3_FLAGS, dwMask: int32, dwFlags: int32, fvMode: int32, pvid: ptr SHELLVIEWID, prcView: ptr RECT, phwndView: ptr HWND): HRESULT {.stdcall.}
  IFolderView* {.pure.} = object
    lpVtbl*: ptr IFolderViewVtbl
  IFolderViewVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCurrentViewMode*: proc(self: ptr IFolderView, pViewMode: ptr UINT): HRESULT {.stdcall.}
    SetCurrentViewMode*: proc(self: ptr IFolderView, ViewMode: UINT): HRESULT {.stdcall.}
    GetFolder*: proc(self: ptr IFolderView, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    Item*: proc(self: ptr IFolderView, iItemIndex: int32, ppidl: ptr PITEMID_CHILD): HRESULT {.stdcall.}
    ItemCount*: proc(self: ptr IFolderView, uFlags: UINT, pcItems: ptr int32): HRESULT {.stdcall.}
    Items*: proc(self: ptr IFolderView, uFlags: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetSelectionMarkedItem*: proc(self: ptr IFolderView, piItem: ptr int32): HRESULT {.stdcall.}
    GetFocusedItem*: proc(self: ptr IFolderView, piItem: ptr int32): HRESULT {.stdcall.}
    GetItemPosition*: proc(self: ptr IFolderView, pidl: PCUITEMID_CHILD, ppt: ptr POINT): HRESULT {.stdcall.}
    GetSpacing*: proc(self: ptr IFolderView, ppt: ptr POINT): HRESULT {.stdcall.}
    GetDefaultSpacing*: proc(self: ptr IFolderView, ppt: ptr POINT): HRESULT {.stdcall.}
    GetAutoArrange*: proc(self: ptr IFolderView): HRESULT {.stdcall.}
    SelectItem*: proc(self: ptr IFolderView, iItem: int32, dwFlags: DWORD): HRESULT {.stdcall.}
    SelectAndPositionItems*: proc(self: ptr IFolderView, cidl: UINT, apidl: PCUITEMID_CHILD_ARRAY, apt: ptr POINT, dwFlags: DWORD): HRESULT {.stdcall.}
  ISearchBoxInfo* {.pure.} = object
    lpVtbl*: ptr ISearchBoxInfoVtbl
  ISearchBoxInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCondition*: proc(self: ptr ISearchBoxInfo, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetText*: proc(self: ptr ISearchBoxInfo, ppsz: ptr LPWSTR): HRESULT {.stdcall.}
  IFolderView2* {.pure.} = object
    lpVtbl*: ptr IFolderView2Vtbl
  IFolderView2Vtbl* {.pure, inheritable.} = object of IFolderViewVtbl
    SetGroupBy*: proc(self: ptr IFolderView2, key: REFPROPERTYKEY, fAscending: WINBOOL): HRESULT {.stdcall.}
    GetGroupBy*: proc(self: ptr IFolderView2, pkey: ptr PROPERTYKEY, pfAscending: ptr WINBOOL): HRESULT {.stdcall.}
    SetViewProperty*: proc(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, propkey: REFPROPERTYKEY, propvar: REFPROPVARIANT): HRESULT {.stdcall.}
    GetViewProperty*: proc(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, propkey: REFPROPERTYKEY, ppropvar: ptr PROPVARIANT): HRESULT {.stdcall.}
    SetTileViewProperties*: proc(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, pszPropList: LPCWSTR): HRESULT {.stdcall.}
    SetExtendedTileViewProperties*: proc(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, pszPropList: LPCWSTR): HRESULT {.stdcall.}
    SetText*: proc(self: ptr IFolderView2, iType: int32, pwszText: LPCWSTR): HRESULT {.stdcall.}
    SetCurrentFolderFlags*: proc(self: ptr IFolderView2, dwMask: DWORD, dwFlags: DWORD): HRESULT {.stdcall.}
    GetCurrentFolderFlags*: proc(self: ptr IFolderView2, pdwFlags: ptr DWORD): HRESULT {.stdcall.}
    GetSortColumnCount*: proc(self: ptr IFolderView2, pcColumns: ptr int32): HRESULT {.stdcall.}
    SetSortColumns*: proc(self: ptr IFolderView2, rgSortColumns: ptr SORTCOLUMN, cColumns: int32): HRESULT {.stdcall.}
    GetSortColumns*: proc(self: ptr IFolderView2, rgSortColumns: ptr SORTCOLUMN, cColumns: int32): HRESULT {.stdcall.}
    GetItem*: proc(self: ptr IFolderView2, iItem: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetVisibleItem*: proc(self: ptr IFolderView2, iStart: int32, fPrevious: WINBOOL, piItem: ptr int32): HRESULT {.stdcall.}
    GetSelectedItem*: proc(self: ptr IFolderView2, iStart: int32, piItem: ptr int32): HRESULT {.stdcall.}
    GetSelection*: proc(self: ptr IFolderView2, fNoneImpliesFolder: WINBOOL, ppsia: ptr ptr IShellItemArray): HRESULT {.stdcall.}
    GetSelectionState*: proc(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, pdwFlags: ptr DWORD): HRESULT {.stdcall.}
    InvokeVerbOnSelection*: proc(self: ptr IFolderView2, pszVerb: LPCSTR): HRESULT {.stdcall.}
    SetViewModeAndIconSize*: proc(self: ptr IFolderView2, uViewMode: int32, iImageSize: int32): HRESULT {.stdcall.}
    GetViewModeAndIconSize*: proc(self: ptr IFolderView2, puViewMode: ptr int32, piImageSize: ptr int32): HRESULT {.stdcall.}
    SetGroupSubsetCount*: proc(self: ptr IFolderView2, cVisibleRows: UINT): HRESULT {.stdcall.}
    GetGroupSubsetCount*: proc(self: ptr IFolderView2, pcVisibleRows: ptr UINT): HRESULT {.stdcall.}
    SetRedraw*: proc(self: ptr IFolderView2, fRedrawOn: WINBOOL): HRESULT {.stdcall.}
    IsMoveInSameFolder*: proc(self: ptr IFolderView2): HRESULT {.stdcall.}
    DoRename*: proc(self: ptr IFolderView2): HRESULT {.stdcall.}
  IFolderViewSettings* {.pure.} = object
    lpVtbl*: ptr IFolderViewSettingsVtbl
  IFolderViewSettingsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetColumnPropertyList*: proc(self: ptr IFolderViewSettings, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetGroupByProperty*: proc(self: ptr IFolderViewSettings, pkey: ptr PROPERTYKEY, pfGroupAscending: ptr WINBOOL): HRESULT {.stdcall.}
    GetViewMode*: proc(self: ptr IFolderViewSettings, plvm: ptr int32): HRESULT {.stdcall.}
    GetIconSize*: proc(self: ptr IFolderViewSettings, puIconSize: ptr UINT): HRESULT {.stdcall.}
    GetFolderFlags*: proc(self: ptr IFolderViewSettings, pfolderMask: ptr int32, pfolderFlags: ptr int32): HRESULT {.stdcall.}
    GetSortColumns*: proc(self: ptr IFolderViewSettings, rgSortColumns: ptr SORTCOLUMN, cColumnsIn: UINT, pcColumnsOut: ptr UINT): HRESULT {.stdcall.}
    GetGroupSubsetCount*: proc(self: ptr IFolderViewSettings, pcVisibleRows: ptr UINT): HRESULT {.stdcall.}
  IPreviewHandlerVisuals* {.pure.} = object
    lpVtbl*: ptr IPreviewHandlerVisualsVtbl
  IPreviewHandlerVisualsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetBackgroundColor*: proc(self: ptr IPreviewHandlerVisuals, color: COLORREF): HRESULT {.stdcall.}
    SetFont*: proc(self: ptr IPreviewHandlerVisuals, plf: ptr LOGFONTW): HRESULT {.stdcall.}
    SetTextColor*: proc(self: ptr IPreviewHandlerVisuals, color: COLORREF): HRESULT {.stdcall.}
  IVisualProperties* {.pure.} = object
    lpVtbl*: ptr IVisualPropertiesVtbl
  IVisualPropertiesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetWatermark*: proc(self: ptr IVisualProperties, hbmp: HBITMAP, vpwf: int32): HRESULT {.stdcall.}
    SetColor*: proc(self: ptr IVisualProperties, vpcf: int32, cr: COLORREF): HRESULT {.stdcall.}
    GetColor*: proc(self: ptr IVisualProperties, vpcf: int32, pcr: ptr COLORREF): HRESULT {.stdcall.}
    SetItemHeight*: proc(self: ptr IVisualProperties, cyItemInPixels: int32): HRESULT {.stdcall.}
    GetItemHeight*: proc(self: ptr IVisualProperties, cyItemInPixels: ptr int32): HRESULT {.stdcall.}
    SetFont*: proc(self: ptr IVisualProperties, plf: ptr LOGFONTW, bRedraw: WINBOOL): HRESULT {.stdcall.}
    GetFont*: proc(self: ptr IVisualProperties, plf: ptr LOGFONTW): HRESULT {.stdcall.}
    SetTheme*: proc(self: ptr IVisualProperties, pszSubAppName: LPCWSTR, pszSubIdList: LPCWSTR): HRESULT {.stdcall.}
  ICommDlgBrowser2* {.pure.} = object
    lpVtbl*: ptr ICommDlgBrowser2Vtbl
  ICommDlgBrowser2Vtbl* {.pure, inheritable.} = object of ICommDlgBrowserVtbl
    Notify*: proc(self: ptr ICommDlgBrowser2, ppshv: ptr IShellView, dwNotifyType: DWORD): HRESULT {.stdcall.}
    GetDefaultMenuText*: proc(self: ptr ICommDlgBrowser2, ppshv: ptr IShellView, pszText: LPWSTR, cchMax: int32): HRESULT {.stdcall.}
    GetViewFlags*: proc(self: ptr ICommDlgBrowser2, pdwFlags: ptr DWORD): HRESULT {.stdcall.}
  ICommDlgBrowser3* {.pure.} = object
    lpVtbl*: ptr ICommDlgBrowser3Vtbl
  ICommDlgBrowser3Vtbl* {.pure, inheritable.} = object of ICommDlgBrowser2Vtbl
    OnColumnClicked*: proc(self: ptr ICommDlgBrowser3, ppshv: ptr IShellView, iColumn: int32): HRESULT {.stdcall.}
    GetCurrentFilter*: proc(self: ptr ICommDlgBrowser3, pszFileSpec: LPWSTR, cchFileSpec: int32): HRESULT {.stdcall.}
    OnPreViewCreated*: proc(self: ptr ICommDlgBrowser3, ppshv: ptr IShellView): HRESULT {.stdcall.}
  IColumnManager* {.pure.} = object
    lpVtbl*: ptr IColumnManagerVtbl
  IColumnManagerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetColumnInfo*: proc(self: ptr IColumnManager, propkey: REFPROPERTYKEY, pcmci: ptr CM_COLUMNINFO): HRESULT {.stdcall.}
    GetColumnInfo*: proc(self: ptr IColumnManager, propkey: REFPROPERTYKEY, pcmci: ptr CM_COLUMNINFO): HRESULT {.stdcall.}
    GetColumnCount*: proc(self: ptr IColumnManager, dwFlags: int32, puCount: ptr UINT): HRESULT {.stdcall.}
    GetColumns*: proc(self: ptr IColumnManager, dwFlags: int32, rgkeyOrder: ptr PROPERTYKEY, cColumns: UINT): HRESULT {.stdcall.}
    SetColumns*: proc(self: ptr IColumnManager, rgkeyOrder: ptr PROPERTYKEY, cVisible: UINT): HRESULT {.stdcall.}
  IFolderFilterSite* {.pure.} = object
    lpVtbl*: ptr IFolderFilterSiteVtbl
  IFolderFilterSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetFilter*: proc(self: ptr IFolderFilterSite, punk: ptr IUnknown): HRESULT {.stdcall.}
  IFolderFilter* {.pure.} = object
    lpVtbl*: ptr IFolderFilterVtbl
  IFolderFilterVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ShouldShow*: proc(self: ptr IFolderFilter, psf: ptr IShellFolder, pidlFolder: PCIDLIST_ABSOLUTE, pidlItem: PCUITEMID_CHILD): HRESULT {.stdcall.}
    GetEnumFlags*: proc(self: ptr IFolderFilter, psf: ptr IShellFolder, pidlFolder: PCIDLIST_ABSOLUTE, phwnd: ptr HWND, pgrfFlags: ptr DWORD): HRESULT {.stdcall.}
  IInputObjectSite* {.pure.} = object
    lpVtbl*: ptr IInputObjectSiteVtbl
  IInputObjectSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnFocusChangeIS*: proc(self: ptr IInputObjectSite, punkObj: ptr IUnknown, fSetFocus: WINBOOL): HRESULT {.stdcall.}
  IInputObject* {.pure.} = object
    lpVtbl*: ptr IInputObjectVtbl
  IInputObjectVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    UIActivateIO*: proc(self: ptr IInputObject, fActivate: WINBOOL, pMsg: ptr MSG): HRESULT {.stdcall.}
    HasFocusIO*: proc(self: ptr IInputObject): HRESULT {.stdcall.}
    TranslateAcceleratorIO*: proc(self: ptr IInputObject, pMsg: ptr MSG): HRESULT {.stdcall.}
  IInputObject2* {.pure.} = object
    lpVtbl*: ptr IInputObject2Vtbl
  IInputObject2Vtbl* {.pure, inheritable.} = object of IInputObjectVtbl
    TranslateAcceleratorGlobal*: proc(self: ptr IInputObject2, pMsg: ptr MSG): HRESULT {.stdcall.}
  IProfferService* {.pure.} = object
    lpVtbl*: ptr IProfferServiceVtbl
  IProfferServiceVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ProfferService*: proc(self: ptr IProfferService, guidService: REFGUID, psp: ptr IServiceProvider, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    RevokeService*: proc(self: ptr IProfferService, dwCookie: DWORD): HRESULT {.stdcall.}
  IShellItem* {.pure.} = object
    lpVtbl*: ptr IShellItemVtbl
  IShellItemVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    BindToHandler*: proc(self: ptr IShellItem, pbc: ptr IBindCtx, bhid: REFGUID, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetParent*: proc(self: ptr IShellItem, ppsi: ptr ptr IShellItem): HRESULT {.stdcall.}
    GetDisplayName*: proc(self: ptr IShellItem, sigdnName: int32, ppszName: ptr LPWSTR): HRESULT {.stdcall.}
    GetAttributes*: proc(self: ptr IShellItem, sfgaoMask: SFGAOF, psfgaoAttribs: ptr SFGAOF): HRESULT {.stdcall.}
    Compare*: proc(self: ptr IShellItem, psi: ptr IShellItem, hint: SICHINTF, piOrder: ptr int32): HRESULT {.stdcall.}
  IShellItem2* {.pure.} = object
    lpVtbl*: ptr IShellItem2Vtbl
  IShellItem2Vtbl* {.pure, inheritable.} = object of IShellItemVtbl
    GetPropertyStore*: proc(self: ptr IShellItem2, flags: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetPropertyStoreWithCreateObject*: proc(self: ptr IShellItem2, flags: int32, punkCreateObject: ptr IUnknown, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetPropertyStoreForKeys*: proc(self: ptr IShellItem2, rgKeys: ptr PROPERTYKEY, cKeys: UINT, flags: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetPropertyDescriptionList*: proc(self: ptr IShellItem2, keyType: REFPROPERTYKEY, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    Update*: proc(self: ptr IShellItem2, pbc: ptr IBindCtx): HRESULT {.stdcall.}
    GetProperty*: proc(self: ptr IShellItem2, key: REFPROPERTYKEY, ppropvar: ptr PROPVARIANT): HRESULT {.stdcall.}
    GetCLSID*: proc(self: ptr IShellItem2, key: REFPROPERTYKEY, pclsid: ptr CLSID): HRESULT {.stdcall.}
    GetFileTime*: proc(self: ptr IShellItem2, key: REFPROPERTYKEY, pft: ptr FILETIME): HRESULT {.stdcall.}
    GetInt32*: proc(self: ptr IShellItem2, key: REFPROPERTYKEY, pi: ptr int32): HRESULT {.stdcall.}
    GetString*: proc(self: ptr IShellItem2, key: REFPROPERTYKEY, ppsz: ptr LPWSTR): HRESULT {.stdcall.}
    GetUInt32*: proc(self: ptr IShellItem2, key: REFPROPERTYKEY, pui: ptr ULONG): HRESULT {.stdcall.}
    GetUInt64*: proc(self: ptr IShellItem2, key: REFPROPERTYKEY, pull: ptr ULONGLONG): HRESULT {.stdcall.}
    GetBool*: proc(self: ptr IShellItem2, key: REFPROPERTYKEY, pf: ptr WINBOOL): HRESULT {.stdcall.}
  IShellItemImageFactory* {.pure.} = object
    lpVtbl*: ptr IShellItemImageFactoryVtbl
  IShellItemImageFactoryVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetImage*: proc(self: ptr IShellItemImageFactory, size: SIZE, flags: SIIGBF, phbm: ptr HBITMAP): HRESULT {.stdcall.}
  IUserAccountChangeCallback* {.pure.} = object
    lpVtbl*: ptr IUserAccountChangeCallbackVtbl
  IUserAccountChangeCallbackVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnPictureChange*: proc(self: ptr IUserAccountChangeCallback, pszUserName: LPCWSTR): HRESULT {.stdcall.}
  IEnumShellItems* {.pure.} = object
    lpVtbl*: ptr IEnumShellItemsVtbl
  IEnumShellItemsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumShellItems, celt: ULONG, rgelt: ptr ptr IShellItem, pceltFetched: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumShellItems, celt: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumShellItems): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumShellItems, ppenum: ptr ptr IEnumShellItems): HRESULT {.stdcall.}
  ITransferAdviseSink* {.pure.} = object
    lpVtbl*: ptr ITransferAdviseSinkVtbl
  ITransferAdviseSinkVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    UpdateProgress*: proc(self: ptr ITransferAdviseSink, ullSizeCurrent: ULONGLONG, ullSizeTotal: ULONGLONG, nFilesCurrent: int32, nFilesTotal: int32, nFoldersCurrent: int32, nFoldersTotal: int32): HRESULT {.stdcall.}
    UpdateTransferState*: proc(self: ptr ITransferAdviseSink, ts: TRANSFER_ADVISE_STATE): HRESULT {.stdcall.}
    ConfirmOverwrite*: proc(self: ptr ITransferAdviseSink, psiSource: ptr IShellItem, psiDestParent: ptr IShellItem, pszName: LPCWSTR): HRESULT {.stdcall.}
    ConfirmEncryptionLoss*: proc(self: ptr ITransferAdviseSink, psiSource: ptr IShellItem): HRESULT {.stdcall.}
    FileFailure*: proc(self: ptr ITransferAdviseSink, psi: ptr IShellItem, pszItem: LPCWSTR, hrError: HRESULT, pszRename: LPWSTR, cchRename: ULONG): HRESULT {.stdcall.}
    SubStreamFailure*: proc(self: ptr ITransferAdviseSink, psi: ptr IShellItem, pszStreamName: LPCWSTR, hrError: HRESULT): HRESULT {.stdcall.}
    PropertyFailure*: proc(self: ptr ITransferAdviseSink, psi: ptr IShellItem, pkey: ptr PROPERTYKEY, hrError: HRESULT): HRESULT {.stdcall.}
  ITransferSource* {.pure.} = object
    lpVtbl*: ptr ITransferSourceVtbl
  ITransferSourceVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Advise*: proc(self: ptr ITransferSource, psink: ptr ITransferAdviseSink, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr ITransferSource, dwCookie: DWORD): HRESULT {.stdcall.}
    SetProperties*: proc(self: ptr ITransferSource, pproparray: ptr IPropertyChangeArray): HRESULT {.stdcall.}
    OpenItem*: proc(self: ptr ITransferSource, psi: ptr IShellItem, flags: TRANSFER_SOURCE_FLAGS, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    MoveItem*: proc(self: ptr ITransferSource, psi: ptr IShellItem, psiParentDst: ptr IShellItem, pszNameDst: LPCWSTR, flags: TRANSFER_SOURCE_FLAGS, ppsiNew: ptr ptr IShellItem): HRESULT {.stdcall.}
    RecycleItem*: proc(self: ptr ITransferSource, psiSource: ptr IShellItem, psiParentDest: ptr IShellItem, flags: TRANSFER_SOURCE_FLAGS, ppsiNewDest: ptr ptr IShellItem): HRESULT {.stdcall.}
    RemoveItem*: proc(self: ptr ITransferSource, psiSource: ptr IShellItem, flags: TRANSFER_SOURCE_FLAGS): HRESULT {.stdcall.}
    RenameItem*: proc(self: ptr ITransferSource, psiSource: ptr IShellItem, pszNewName: LPCWSTR, flags: TRANSFER_SOURCE_FLAGS, ppsiNewDest: ptr ptr IShellItem): HRESULT {.stdcall.}
    LinkItem*: proc(self: ptr ITransferSource, psiSource: ptr IShellItem, psiParentDest: ptr IShellItem, pszNewName: LPCWSTR, flags: TRANSFER_SOURCE_FLAGS, ppsiNewDest: ptr ptr IShellItem): HRESULT {.stdcall.}
    ApplyPropertiesToItem*: proc(self: ptr ITransferSource, psiSource: ptr IShellItem, ppsiNew: ptr ptr IShellItem): HRESULT {.stdcall.}
    GetDefaultDestinationName*: proc(self: ptr ITransferSource, psiSource: ptr IShellItem, psiParentDest: ptr IShellItem, ppszDestinationName: ptr LPWSTR): HRESULT {.stdcall.}
    EnterFolder*: proc(self: ptr ITransferSource, psiChildFolderDest: ptr IShellItem): HRESULT {.stdcall.}
    LeaveFolder*: proc(self: ptr ITransferSource, psiChildFolderDest: ptr IShellItem): HRESULT {.stdcall.}
  IEnumResources* {.pure.} = object
    lpVtbl*: ptr IEnumResourcesVtbl
  IEnumResourcesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumResources, celt: ULONG, psir: ptr SHELL_ITEM_RESOURCE, pceltFetched: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumResources, celt: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumResources): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumResources, ppenumr: ptr ptr IEnumResources): HRESULT {.stdcall.}
  IShellItemResources* {.pure.} = object
    lpVtbl*: ptr IShellItemResourcesVtbl
  IShellItemResourcesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetAttributes*: proc(self: ptr IShellItemResources, pdwAttributes: ptr DWORD): HRESULT {.stdcall.}
    GetSize*: proc(self: ptr IShellItemResources, pullSize: ptr ULONGLONG): HRESULT {.stdcall.}
    GetTimes*: proc(self: ptr IShellItemResources, pftCreation: ptr FILETIME, pftWrite: ptr FILETIME, pftAccess: ptr FILETIME): HRESULT {.stdcall.}
    SetTimes*: proc(self: ptr IShellItemResources, pftCreation: ptr FILETIME, pftWrite: ptr FILETIME, pftAccess: ptr FILETIME): HRESULT {.stdcall.}
    GetResourceDescription*: proc(self: ptr IShellItemResources, pcsir: ptr SHELL_ITEM_RESOURCE, ppszDescription: ptr LPWSTR): HRESULT {.stdcall.}
    EnumResources*: proc(self: ptr IShellItemResources, ppenumr: ptr ptr IEnumResources): HRESULT {.stdcall.}
    SupportsResource*: proc(self: ptr IShellItemResources, pcsir: ptr SHELL_ITEM_RESOURCE): HRESULT {.stdcall.}
    OpenResource*: proc(self: ptr IShellItemResources, pcsir: ptr SHELL_ITEM_RESOURCE, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    CreateResource*: proc(self: ptr IShellItemResources, pcsir: ptr SHELL_ITEM_RESOURCE, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    MarkForDelete*: proc(self: ptr IShellItemResources): HRESULT {.stdcall.}
  ITransferDestination* {.pure.} = object
    lpVtbl*: ptr ITransferDestinationVtbl
  ITransferDestinationVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Advise*: proc(self: ptr ITransferDestination, psink: ptr ITransferAdviseSink, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr ITransferDestination, dwCookie: DWORD): HRESULT {.stdcall.}
    CreateItem*: proc(self: ptr ITransferDestination, pszName: LPCWSTR, dwAttributes: DWORD, ullSize: ULONGLONG, flags: TRANSFER_SOURCE_FLAGS, riidItem: REFIID, ppvItem: ptr pointer, riidResources: REFIID, ppvResources: ptr pointer): HRESULT {.stdcall.}
  IStreamAsync* {.pure.} = object
    lpVtbl*: ptr IStreamAsyncVtbl
  IStreamAsyncVtbl* {.pure, inheritable.} = object of IStreamVtbl
    ReadAsync*: proc(self: ptr IStreamAsync, pv: pointer, cb: DWORD, pcbRead: LPDWORD, lpOverlapped: LPOVERLAPPED): HRESULT {.stdcall.}
    WriteAsync*: proc(self: ptr IStreamAsync, lpBuffer: pointer, cb: DWORD, pcbWritten: LPDWORD, lpOverlapped: LPOVERLAPPED): HRESULT {.stdcall.}
    OverlappedResult*: proc(self: ptr IStreamAsync, lpOverlapped: LPOVERLAPPED, lpNumberOfBytesTransferred: LPDWORD, bWait: WINBOOL): HRESULT {.stdcall.}
    CancelIo*: proc(self: ptr IStreamAsync): HRESULT {.stdcall.}
  IStreamUnbufferedInfo* {.pure.} = object
    lpVtbl*: ptr IStreamUnbufferedInfoVtbl
  IStreamUnbufferedInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetSectorSize*: proc(self: ptr IStreamUnbufferedInfo, pcbSectorSize: ptr ULONG): HRESULT {.stdcall.}
  IFileOperationProgressSink* {.pure.} = object
    lpVtbl*: ptr IFileOperationProgressSinkVtbl
  IFileOperationProgressSinkVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    StartOperations*: proc(self: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
    FinishOperations*: proc(self: ptr IFileOperationProgressSink, hrResult: HRESULT): HRESULT {.stdcall.}
    PreRenameItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, pszNewName: LPCWSTR): HRESULT {.stdcall.}
    PostRenameItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, pszNewName: LPCWSTR, hrRename: HRESULT, psiNewlyCreated: ptr IShellItem): HRESULT {.stdcall.}
    PreMoveItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR): HRESULT {.stdcall.}
    PostMoveItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR, hrMove: HRESULT, psiNewlyCreated: ptr IShellItem): HRESULT {.stdcall.}
    PreCopyItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR): HRESULT {.stdcall.}
    PostCopyItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR, hrCopy: HRESULT, psiNewlyCreated: ptr IShellItem): HRESULT {.stdcall.}
    PreDeleteItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem): HRESULT {.stdcall.}
    PostDeleteItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, hrDelete: HRESULT, psiNewlyCreated: ptr IShellItem): HRESULT {.stdcall.}
    PreNewItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR): HRESULT {.stdcall.}
    PostNewItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR, pszTemplateName: LPCWSTR, dwFileAttributes: DWORD, hrNew: HRESULT, psiNewItem: ptr IShellItem): HRESULT {.stdcall.}
    UpdateProgress*: proc(self: ptr IFileOperationProgressSink, iWorkTotal: UINT, iWorkSoFar: UINT): HRESULT {.stdcall.}
    ResetTimer*: proc(self: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
    PauseTimer*: proc(self: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
    ResumeTimer*: proc(self: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
  IShellItemArray* {.pure.} = object
    lpVtbl*: ptr IShellItemArrayVtbl
  IShellItemArrayVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    BindToHandler*: proc(self: ptr IShellItemArray, pbc: ptr IBindCtx, bhid: REFGUID, riid: REFIID, ppvOut: ptr pointer): HRESULT {.stdcall.}
    GetPropertyStore*: proc(self: ptr IShellItemArray, flags: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetPropertyDescriptionList*: proc(self: ptr IShellItemArray, keyType: REFPROPERTYKEY, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetAttributes*: proc(self: ptr IShellItemArray, AttribFlags: int32, sfgaoMask: SFGAOF, psfgaoAttribs: ptr SFGAOF): HRESULT {.stdcall.}
    GetCount*: proc(self: ptr IShellItemArray, pdwNumItems: ptr DWORD): HRESULT {.stdcall.}
    GetItemAt*: proc(self: ptr IShellItemArray, dwIndex: DWORD, ppsi: ptr ptr IShellItem): HRESULT {.stdcall.}
    EnumItems*: proc(self: ptr IShellItemArray, ppenumShellItems: ptr ptr IEnumShellItems): HRESULT {.stdcall.}
  IInitializeWithItem* {.pure.} = object
    lpVtbl*: ptr IInitializeWithItemVtbl
  IInitializeWithItemVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IInitializeWithItem, psi: ptr IShellItem, grfMode: DWORD): HRESULT {.stdcall.}
  IObjectWithSelection* {.pure.} = object
    lpVtbl*: ptr IObjectWithSelectionVtbl
  IObjectWithSelectionVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetSelection*: proc(self: ptr IObjectWithSelection, psia: ptr IShellItemArray): HRESULT {.stdcall.}
    GetSelection*: proc(self: ptr IObjectWithSelection, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IObjectWithBackReferences* {.pure.} = object
    lpVtbl*: ptr IObjectWithBackReferencesVtbl
  IObjectWithBackReferencesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    RemoveBackReferences*: proc(self: ptr IObjectWithBackReferences): HRESULT {.stdcall.}
  IPropertyUI* {.pure.} = object
    lpVtbl*: ptr IPropertyUIVtbl
  IPropertyUIVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ParsePropertyName*: proc(self: ptr IPropertyUI, pszName: LPCWSTR, pfmtid: ptr FMTID, ppid: ptr PROPID, pchEaten: ptr ULONG): HRESULT {.stdcall.}
    GetCannonicalName*: proc(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pwszText: LPWSTR, cchText: DWORD): HRESULT {.stdcall.}
    GetDisplayName*: proc(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, flags: PROPERTYUI_NAME_FLAGS, pwszText: LPWSTR, cchText: DWORD): HRESULT {.stdcall.}
    GetPropertyDescription*: proc(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pwszText: LPWSTR, cchText: DWORD): HRESULT {.stdcall.}
    GetDefaultWidth*: proc(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pcxChars: ptr ULONG): HRESULT {.stdcall.}
    GetFlags*: proc(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pflags: ptr PROPERTYUI_FLAGS): HRESULT {.stdcall.}
    FormatForDisplay*: proc(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, ppropvar: ptr PROPVARIANT, puiff: PROPERTYUI_FORMAT_FLAGS, pwszText: LPWSTR, cchText: DWORD): HRESULT {.stdcall.}
    GetHelpInfo*: proc(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pwszHelpFile: LPWSTR, cch: DWORD, puHelpID: ptr UINT): HRESULT {.stdcall.}
  ICategoryProvider* {.pure.} = object
    lpVtbl*: ptr ICategoryProviderVtbl
  ICategoryProviderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CanCategorizeOnSCID*: proc(self: ptr ICategoryProvider, pscid: ptr SHCOLUMNID): HRESULT {.stdcall.}
    GetDefaultCategory*: proc(self: ptr ICategoryProvider, pguid: ptr GUID, pscid: ptr SHCOLUMNID): HRESULT {.stdcall.}
    GetCategoryForSCID*: proc(self: ptr ICategoryProvider, pscid: ptr SHCOLUMNID, pguid: ptr GUID): HRESULT {.stdcall.}
    EnumCategories*: proc(self: ptr ICategoryProvider, penum: ptr ptr IEnumGUID): HRESULT {.stdcall.}
    GetCategoryName*: proc(self: ptr ICategoryProvider, pguid: ptr GUID, pszName: LPWSTR, cch: UINT): HRESULT {.stdcall.}
    CreateCategory*: proc(self: ptr ICategoryProvider, pguid: ptr GUID, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  ICategorizer* {.pure.} = object
    lpVtbl*: ptr ICategorizerVtbl
  ICategorizerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetDescription*: proc(self: ptr ICategorizer, pszDesc: LPWSTR, cch: UINT): HRESULT {.stdcall.}
    GetCategory*: proc(self: ptr ICategorizer, cidl: UINT, apidl: PCUITEMID_CHILD_ARRAY, rgCategoryIds: ptr DWORD): HRESULT {.stdcall.}
    GetCategoryInfo*: proc(self: ptr ICategorizer, dwCategoryId: DWORD, pci: ptr TCATEGORY_INFO): HRESULT {.stdcall.}
    CompareCategory*: proc(self: ptr ICategorizer, csfFlags: int32, dwCategoryId1: DWORD, dwCategoryId2: DWORD): HRESULT {.stdcall.}
  IDragSourceHelper2* {.pure.} = object
    lpVtbl*: ptr IDragSourceHelper2Vtbl
  IDragSourceHelper2Vtbl* {.pure, inheritable.} = object of IDragSourceHelperVtbl
    SetFlags*: proc(self: ptr IDragSourceHelper2, dwFlags: DWORD): HRESULT {.stdcall.}
  IShellLinkDataList* {.pure.} = object
    lpVtbl*: ptr IShellLinkDataListVtbl
  IShellLinkDataListVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AddDataBlock*: proc(self: ptr IShellLinkDataList, pDataBlock: pointer): HRESULT {.stdcall.}
    CopyDataBlock*: proc(self: ptr IShellLinkDataList, dwSig: DWORD, ppDataBlock: ptr pointer): HRESULT {.stdcall.}
    RemoveDataBlock*: proc(self: ptr IShellLinkDataList, dwSig: DWORD): HRESULT {.stdcall.}
    GetFlags*: proc(self: ptr IShellLinkDataList, pdwFlags: ptr DWORD): HRESULT {.stdcall.}
    SetFlags*: proc(self: ptr IShellLinkDataList, dwFlags: DWORD): HRESULT {.stdcall.}
  IResolveShellLink* {.pure.} = object
    lpVtbl*: ptr IResolveShellLinkVtbl
  IResolveShellLinkVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ResolveShellLink*: proc(self: ptr IResolveShellLink, punkLink: ptr IUnknown, hwnd: HWND, fFlags: DWORD): HRESULT {.stdcall.}
  IActionProgressDialog* {.pure.} = object
    lpVtbl*: ptr IActionProgressDialogVtbl
  IActionProgressDialogVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IActionProgressDialog, flags: SPINITF, pszTitle: LPCWSTR, pszCancel: LPCWSTR): HRESULT {.stdcall.}
    Stop*: proc(self: ptr IActionProgressDialog): HRESULT {.stdcall.}
  IHWEventHandler* {.pure.} = object
    lpVtbl*: ptr IHWEventHandlerVtbl
  IHWEventHandlerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IHWEventHandler, pszParams: LPCWSTR): HRESULT {.stdcall.}
    HandleEvent*: proc(self: ptr IHWEventHandler, pszDeviceID: LPCWSTR, pszAltDeviceID: LPCWSTR, pszEventType: LPCWSTR): HRESULT {.stdcall.}
    HandleEventWithContent*: proc(self: ptr IHWEventHandler, pszDeviceID: LPCWSTR, pszAltDeviceID: LPCWSTR, pszEventType: LPCWSTR, pszContentTypeHandler: LPCWSTR, pdataobject: ptr IDataObject): HRESULT {.stdcall.}
  IHWEventHandler2* {.pure.} = object
    lpVtbl*: ptr IHWEventHandler2Vtbl
  IHWEventHandler2Vtbl* {.pure, inheritable.} = object of IHWEventHandlerVtbl
    HandleEventWithHWND*: proc(self: ptr IHWEventHandler2, pszDeviceID: LPCWSTR, pszAltDeviceID: LPCWSTR, pszEventType: LPCWSTR, hwndOwner: HWND): HRESULT {.stdcall.}
  IQueryCancelAutoPlay* {.pure.} = object
    lpVtbl*: ptr IQueryCancelAutoPlayVtbl
  IQueryCancelAutoPlayVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AllowAutoPlay*: proc(self: ptr IQueryCancelAutoPlay, pszPath: LPCWSTR, dwContentType: DWORD, pszLabel: LPCWSTR, dwSerialNumber: DWORD): HRESULT {.stdcall.}
  IDynamicHWHandler* {.pure.} = object
    lpVtbl*: ptr IDynamicHWHandlerVtbl
  IDynamicHWHandlerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetDynamicInfo*: proc(self: ptr IDynamicHWHandler, pszDeviceID: LPCWSTR, dwContentType: DWORD, ppszAction: ptr LPWSTR): HRESULT {.stdcall.}
  IActionProgress* {.pure.} = object
    lpVtbl*: ptr IActionProgressVtbl
  IActionProgressVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Begin*: proc(self: ptr IActionProgress, action: int32, flags: SPBEGINF): HRESULT {.stdcall.}
    UpdateProgress*: proc(self: ptr IActionProgress, ulCompleted: ULONGLONG, ulTotal: ULONGLONG): HRESULT {.stdcall.}
    UpdateText*: proc(self: ptr IActionProgress, sptext: int32, pszText: LPCWSTR, fMayCompact: WINBOOL): HRESULT {.stdcall.}
    QueryCancel*: proc(self: ptr IActionProgress, pfCancelled: ptr WINBOOL): HRESULT {.stdcall.}
    ResetCancel*: proc(self: ptr IActionProgress): HRESULT {.stdcall.}
    End*: proc(self: ptr IActionProgress): HRESULT {.stdcall.}
  IRemoteComputer* {.pure.} = object
    lpVtbl*: ptr IRemoteComputerVtbl
  IRemoteComputerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IRemoteComputer, pszMachine: LPCWSTR, bEnumerating: WINBOOL): HRESULT {.stdcall.}
  IQueryContinue* {.pure.} = object
    lpVtbl*: ptr IQueryContinueVtbl
  IQueryContinueVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    QueryContinue*: proc(self: ptr IQueryContinue): HRESULT {.stdcall.}
  IObjectWithCancelEvent* {.pure.} = object
    lpVtbl*: ptr IObjectWithCancelEventVtbl
  IObjectWithCancelEventVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCancelEvent*: proc(self: ptr IObjectWithCancelEvent, phEvent: ptr HANDLE): HRESULT {.stdcall.}
  IUserNotification* {.pure.} = object
    lpVtbl*: ptr IUserNotificationVtbl
  IUserNotificationVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetBalloonInfo*: proc(self: ptr IUserNotification, pszTitle: LPCWSTR, pszText: LPCWSTR, dwInfoFlags: DWORD): HRESULT {.stdcall.}
    SetBalloonRetry*: proc(self: ptr IUserNotification, dwShowTime: DWORD, dwInterval: DWORD, cRetryCount: UINT): HRESULT {.stdcall.}
    SetIconInfo*: proc(self: ptr IUserNotification, hIcon: HICON, pszToolTip: LPCWSTR): HRESULT {.stdcall.}
    Show*: proc(self: ptr IUserNotification, pqc: ptr IQueryContinue, dwContinuePollInterval: DWORD): HRESULT {.stdcall.}
    PlaySound*: proc(self: ptr IUserNotification, pszSoundName: LPCWSTR): HRESULT {.stdcall.}
  IUserNotificationCallback* {.pure.} = object
    lpVtbl*: ptr IUserNotificationCallbackVtbl
  IUserNotificationCallbackVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnBalloonUserClick*: proc(self: ptr IUserNotificationCallback, pt: ptr POINT): HRESULT {.stdcall.}
    OnLeftClick*: proc(self: ptr IUserNotificationCallback, pt: ptr POINT): HRESULT {.stdcall.}
    OnContextMenu*: proc(self: ptr IUserNotificationCallback, pt: ptr POINT): HRESULT {.stdcall.}
  IUserNotification2* {.pure.} = object
    lpVtbl*: ptr IUserNotification2Vtbl
  IUserNotification2Vtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetBalloonInfo*: proc(self: ptr IUserNotification2, pszTitle: LPCWSTR, pszText: LPCWSTR, dwInfoFlags: DWORD): HRESULT {.stdcall.}
    SetBalloonRetry*: proc(self: ptr IUserNotification2, dwShowTime: DWORD, dwInterval: DWORD, cRetryCount: UINT): HRESULT {.stdcall.}
    SetIconInfo*: proc(self: ptr IUserNotification2, hIcon: HICON, pszToolTip: LPCWSTR): HRESULT {.stdcall.}
    Show*: proc(self: ptr IUserNotification2, pqc: ptr IQueryContinue, dwContinuePollInterval: DWORD, pSink: ptr IUserNotificationCallback): HRESULT {.stdcall.}
    PlaySound*: proc(self: ptr IUserNotification2, pszSoundName: LPCWSTR): HRESULT {.stdcall.}
  IItemNameLimits* {.pure.} = object
    lpVtbl*: ptr IItemNameLimitsVtbl
  IItemNameLimitsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetValidCharacters*: proc(self: ptr IItemNameLimits, ppwszValidChars: ptr LPWSTR, ppwszInvalidChars: ptr LPWSTR): HRESULT {.stdcall.}
    GetMaxLength*: proc(self: ptr IItemNameLimits, pszName: LPCWSTR, piMaxNameLen: ptr int32): HRESULT {.stdcall.}
  ISearchFolderItemFactory* {.pure.} = object
    lpVtbl*: ptr ISearchFolderItemFactoryVtbl
  ISearchFolderItemFactoryVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetDisplayName*: proc(self: ptr ISearchFolderItemFactory, pszDisplayName: LPCWSTR): HRESULT {.stdcall.}
    SetFolderTypeID*: proc(self: ptr ISearchFolderItemFactory, ftid: FOLDERTYPEID): HRESULT {.stdcall.}
    SetFolderLogicalViewMode*: proc(self: ptr ISearchFolderItemFactory, flvm: int32): HRESULT {.stdcall.}
    SetIconSize*: proc(self: ptr ISearchFolderItemFactory, iIconSize: int32): HRESULT {.stdcall.}
    SetVisibleColumns*: proc(self: ptr ISearchFolderItemFactory, cVisibleColumns: UINT, rgKey: ptr PROPERTYKEY): HRESULT {.stdcall.}
    SetSortColumns*: proc(self: ptr ISearchFolderItemFactory, cSortColumns: UINT, rgSortColumns: ptr SORTCOLUMN): HRESULT {.stdcall.}
    SetGroupColumn*: proc(self: ptr ISearchFolderItemFactory, keyGroup: REFPROPERTYKEY): HRESULT {.stdcall.}
    SetStacks*: proc(self: ptr ISearchFolderItemFactory, cStackKeys: UINT, rgStackKeys: ptr PROPERTYKEY): HRESULT {.stdcall.}
    SetScope*: proc(self: ptr ISearchFolderItemFactory, psiaScope: ptr IShellItemArray): HRESULT {.stdcall.}
    SetCondition*: proc(self: ptr ISearchFolderItemFactory, pCondition: ptr ICondition): HRESULT {.stdcall.}
    GetShellItem*: proc(self: ptr ISearchFolderItemFactory, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetIDList*: proc(self: ptr ISearchFolderItemFactory, ppidl: ptr PIDLIST_ABSOLUTE): HRESULT {.stdcall.}
  IExtractImage* {.pure.} = object
    lpVtbl*: ptr IExtractImageVtbl
  IExtractImageVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetLocation*: proc(self: ptr IExtractImage, pszPathBuffer: LPWSTR, cch: DWORD, pdwPriority: ptr DWORD, prgSize: ptr SIZE, dwRecClrDepth: DWORD, pdwFlags: ptr DWORD): HRESULT {.stdcall.}
    Extract*: proc(self: ptr IExtractImage, phBmpThumbnail: ptr HBITMAP): HRESULT {.stdcall.}
  IExtractImage2* {.pure.} = object
    lpVtbl*: ptr IExtractImage2Vtbl
  IExtractImage2Vtbl* {.pure, inheritable.} = object of IExtractImageVtbl
    GetDateStamp*: proc(self: ptr IExtractImage2, pDateStamp: ptr FILETIME): HRESULT {.stdcall.}
  IThumbnailHandlerFactory* {.pure.} = object
    lpVtbl*: ptr IThumbnailHandlerFactoryVtbl
  IThumbnailHandlerFactoryVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetThumbnailHandler*: proc(self: ptr IThumbnailHandlerFactory, pidlChild: PCUITEMID_CHILD, pbc: ptr IBindCtx, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IParentAndItem* {.pure.} = object
    lpVtbl*: ptr IParentAndItemVtbl
  IParentAndItemVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetParentAndItem*: proc(self: ptr IParentAndItem, pidlParent: PCIDLIST_ABSOLUTE, psf: ptr IShellFolder, pidlChild: PCUITEMID_CHILD): HRESULT {.stdcall.}
    GetParentAndItem*: proc(self: ptr IParentAndItem, ppidlParent: ptr PIDLIST_ABSOLUTE, ppsf: ptr ptr IShellFolder, ppidlChild: ptr PITEMID_CHILD): HRESULT {.stdcall.}
  IDockingWindow* {.pure.} = object
    lpVtbl*: ptr IDockingWindowVtbl
  IDockingWindowVtbl* {.pure, inheritable.} = object of IOleWindowVtbl
    ShowDW*: proc(self: ptr IDockingWindow, fShow: WINBOOL): HRESULT {.stdcall.}
    CloseDW*: proc(self: ptr IDockingWindow, dwReserved: DWORD): HRESULT {.stdcall.}
    ResizeBorderDW*: proc(self: ptr IDockingWindow, prcBorder: LPCRECT, punkToolbarSite: ptr IUnknown, fReserved: WINBOOL): HRESULT {.stdcall.}
  IDeskBand* {.pure.} = object
    lpVtbl*: ptr IDeskBandVtbl
  IDeskBandVtbl* {.pure, inheritable.} = object of IDockingWindowVtbl
    GetBandInfo*: proc(self: ptr IDeskBand, dwBandID: DWORD, dwViewMode: DWORD, pdbi: ptr DESKBANDINFO): HRESULT {.stdcall.}
  IDeskBandInfo* {.pure.} = object
    lpVtbl*: ptr IDeskBandInfoVtbl
  IDeskBandInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetDefaultBandWidth*: proc(self: ptr IDeskBandInfo, dwBandID: DWORD, dwViewMode: DWORD, pnWidth: ptr int32): HRESULT {.stdcall.}
  IDeskBand2* {.pure.} = object
    lpVtbl*: ptr IDeskBand2Vtbl
  IDeskBand2Vtbl* {.pure, inheritable.} = object of IDeskBandVtbl
    CanRenderComposited*: proc(self: ptr IDeskBand2, pfCanRenderComposited: ptr WINBOOL): HRESULT {.stdcall.}
    SetCompositionState*: proc(self: ptr IDeskBand2, fCompositionEnabled: WINBOOL): HRESULT {.stdcall.}
    GetCompositionState*: proc(self: ptr IDeskBand2, pfCompositionEnabled: ptr WINBOOL): HRESULT {.stdcall.}
  ITaskbarList* {.pure.} = object
    lpVtbl*: ptr ITaskbarListVtbl
  ITaskbarListVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    HrInit*: proc(self: ptr ITaskbarList): HRESULT {.stdcall.}
    AddTab*: proc(self: ptr ITaskbarList, hwnd: HWND): HRESULT {.stdcall.}
    DeleteTab*: proc(self: ptr ITaskbarList, hwnd: HWND): HRESULT {.stdcall.}
    ActivateTab*: proc(self: ptr ITaskbarList, hwnd: HWND): HRESULT {.stdcall.}
    SetActiveAlt*: proc(self: ptr ITaskbarList, hwnd: HWND): HRESULT {.stdcall.}
  ITaskbarList2* {.pure.} = object
    lpVtbl*: ptr ITaskbarList2Vtbl
  ITaskbarList2Vtbl* {.pure, inheritable.} = object of ITaskbarListVtbl
    MarkFullscreenWindow*: proc(self: ptr ITaskbarList2, hwnd: HWND, fFullscreen: WINBOOL): HRESULT {.stdcall.}
  ITaskbarList3* {.pure.} = object
    lpVtbl*: ptr ITaskbarList3Vtbl
  ITaskbarList3Vtbl* {.pure, inheritable.} = object of ITaskbarList2Vtbl
    SetProgressValue*: proc(self: ptr ITaskbarList3, hwnd: HWND, ullCompleted: ULONGLONG, ullTotal: ULONGLONG): HRESULT {.stdcall.}
    SetProgressState*: proc(self: ptr ITaskbarList3, hwnd: HWND, tbpFlags: int32): HRESULT {.stdcall.}
    RegisterTab*: proc(self: ptr ITaskbarList3, hwndTab: HWND, hwndMDI: HWND): HRESULT {.stdcall.}
    UnregisterTab*: proc(self: ptr ITaskbarList3, hwndTab: HWND): HRESULT {.stdcall.}
    SetTabOrder*: proc(self: ptr ITaskbarList3, hwndTab: HWND, hwndInsertBefore: HWND): HRESULT {.stdcall.}
    SetTabActive*: proc(self: ptr ITaskbarList3, hwndTab: HWND, hwndMDI: HWND, dwReserved: DWORD): HRESULT {.stdcall.}
    ThumbBarAddButtons*: proc(self: ptr ITaskbarList3, hwnd: HWND, cButtons: UINT, pButton: LPTHUMBBUTTON): HRESULT {.stdcall.}
    ThumbBarUpdateButtons*: proc(self: ptr ITaskbarList3, hwnd: HWND, cButtons: UINT, pButton: LPTHUMBBUTTON): HRESULT {.stdcall.}
    ThumbBarSetImageList*: proc(self: ptr ITaskbarList3, hwnd: HWND, himl: HIMAGELIST): HRESULT {.stdcall.}
    SetOverlayIcon*: proc(self: ptr ITaskbarList3, hwnd: HWND, hIcon: HICON, pszDescription: LPCWSTR): HRESULT {.stdcall.}
    SetThumbnailTooltip*: proc(self: ptr ITaskbarList3, hwnd: HWND, pszTip: LPCWSTR): HRESULT {.stdcall.}
    SetThumbnailClip*: proc(self: ptr ITaskbarList3, hwnd: HWND, prcClip: ptr RECT): HRESULT {.stdcall.}
  ITaskbarList4* {.pure.} = object
    lpVtbl*: ptr ITaskbarList4Vtbl
  ITaskbarList4Vtbl* {.pure, inheritable.} = object of ITaskbarList3Vtbl
    SetTabProperties*: proc(self: ptr ITaskbarList4, hwndTab: HWND, stpFlags: int32): HRESULT {.stdcall.}
  IStartMenuPinnedList* {.pure.} = object
    lpVtbl*: ptr IStartMenuPinnedListVtbl
  IStartMenuPinnedListVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    RemoveFromList*: proc(self: ptr IStartMenuPinnedList, pitem: ptr IShellItem): HRESULT {.stdcall.}
  ICDBurn* {.pure.} = object
    lpVtbl*: ptr ICDBurnVtbl
  ICDBurnVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetRecorderDriveLetter*: proc(self: ptr ICDBurn, pszDrive: LPWSTR, cch: UINT): HRESULT {.stdcall.}
    Burn*: proc(self: ptr ICDBurn, hwnd: HWND): HRESULT {.stdcall.}
    HasRecordableDrive*: proc(self: ptr ICDBurn, pfHasRecorder: ptr WINBOOL): HRESULT {.stdcall.}
  IWizardSite* {.pure.} = object
    lpVtbl*: ptr IWizardSiteVtbl
  IWizardSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetPreviousPage*: proc(self: ptr IWizardSite, phpage: ptr HPROPSHEETPAGE): HRESULT {.stdcall.}
    GetNextPage*: proc(self: ptr IWizardSite, phpage: ptr HPROPSHEETPAGE): HRESULT {.stdcall.}
    GetCancelledPage*: proc(self: ptr IWizardSite, phpage: ptr HPROPSHEETPAGE): HRESULT {.stdcall.}
  IWizardExtension* {.pure.} = object
    lpVtbl*: ptr IWizardExtensionVtbl
  IWizardExtensionVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AddPages*: proc(self: ptr IWizardExtension, aPages: ptr HPROPSHEETPAGE, cPages: UINT, pnPagesAdded: ptr UINT): HRESULT {.stdcall.}
    GetFirstPage*: proc(self: ptr IWizardExtension, phpage: ptr HPROPSHEETPAGE): HRESULT {.stdcall.}
    GetLastPage*: proc(self: ptr IWizardExtension, phpage: ptr HPROPSHEETPAGE): HRESULT {.stdcall.}
  IWebWizardExtension* {.pure.} = object
    lpVtbl*: ptr IWebWizardExtensionVtbl
  IWebWizardExtensionVtbl* {.pure, inheritable.} = object of IWizardExtensionVtbl
    SetInitialURL*: proc(self: ptr IWebWizardExtension, pszURL: LPCWSTR): HRESULT {.stdcall.}
    SetErrorURL*: proc(self: ptr IWebWizardExtension, pszErrorURL: LPCWSTR): HRESULT {.stdcall.}
  IPublishingWizard* {.pure.} = object
    lpVtbl*: ptr IPublishingWizardVtbl
  IPublishingWizardVtbl* {.pure, inheritable.} = object of IWizardExtensionVtbl
    Initialize*: proc(self: ptr IPublishingWizard, pdo: ptr IDataObject, dwOptions: DWORD, pszServiceScope: LPCWSTR): HRESULT {.stdcall.}
    GetTransferManifest*: proc(self: ptr IPublishingWizard, phrFromTransfer: ptr HRESULT, pdocManifest: ptr ptr IXMLDOMDocument): HRESULT {.stdcall.}
  IFolderViewHost* {.pure.} = object
    lpVtbl*: ptr IFolderViewHostVtbl
  IFolderViewHostVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IFolderViewHost, hwndParent: HWND, pdo: ptr IDataObject, prc: ptr RECT): HRESULT {.stdcall.}
  IExplorerBrowserEvents* {.pure.} = object
    lpVtbl*: ptr IExplorerBrowserEventsVtbl
  IExplorerBrowserEventsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnNavigationPending*: proc(self: ptr IExplorerBrowserEvents, pidlFolder: PCIDLIST_ABSOLUTE): HRESULT {.stdcall.}
    OnViewCreated*: proc(self: ptr IExplorerBrowserEvents, psv: ptr IShellView): HRESULT {.stdcall.}
    OnNavigationComplete*: proc(self: ptr IExplorerBrowserEvents, pidlFolder: PCIDLIST_ABSOLUTE): HRESULT {.stdcall.}
    OnNavigationFailed*: proc(self: ptr IExplorerBrowserEvents, pidlFolder: PCIDLIST_ABSOLUTE): HRESULT {.stdcall.}
  IExplorerBrowser* {.pure.} = object
    lpVtbl*: ptr IExplorerBrowserVtbl
  IExplorerBrowserVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IExplorerBrowser, hwndParent: HWND, prc: ptr RECT, pfs: ptr FOLDERSETTINGS): HRESULT {.stdcall.}
    Destroy*: proc(self: ptr IExplorerBrowser): HRESULT {.stdcall.}
    SetRect*: proc(self: ptr IExplorerBrowser, phdwp: ptr HDWP, rcBrowser: RECT): HRESULT {.stdcall.}
    SetPropertyBag*: proc(self: ptr IExplorerBrowser, pszPropertyBag: LPCWSTR): HRESULT {.stdcall.}
    SetEmptyText*: proc(self: ptr IExplorerBrowser, pszEmptyText: LPCWSTR): HRESULT {.stdcall.}
    SetFolderSettings*: proc(self: ptr IExplorerBrowser, pfs: ptr FOLDERSETTINGS): HRESULT {.stdcall.}
    Advise*: proc(self: ptr IExplorerBrowser, psbe: ptr IExplorerBrowserEvents, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr IExplorerBrowser, dwCookie: DWORD): HRESULT {.stdcall.}
    SetOptions*: proc(self: ptr IExplorerBrowser, dwFlag: int32): HRESULT {.stdcall.}
    GetOptions*: proc(self: ptr IExplorerBrowser, pdwFlag: ptr int32): HRESULT {.stdcall.}
    BrowseToIDList*: proc(self: ptr IExplorerBrowser, pidl: PCUIDLIST_RELATIVE, uFlags: UINT): HRESULT {.stdcall.}
    BrowseToObject*: proc(self: ptr IExplorerBrowser, punk: ptr IUnknown, uFlags: UINT): HRESULT {.stdcall.}
    FillFromObject*: proc(self: ptr IExplorerBrowser, punk: ptr IUnknown, dwFlags: int32): HRESULT {.stdcall.}
    RemoveAll*: proc(self: ptr IExplorerBrowser): HRESULT {.stdcall.}
    GetCurrentView*: proc(self: ptr IExplorerBrowser, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IAccessibleObject* {.pure.} = object
    lpVtbl*: ptr IAccessibleObjectVtbl
  IAccessibleObjectVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetAccessibleName*: proc(self: ptr IAccessibleObject, pszName: LPCWSTR): HRESULT {.stdcall.}
  IResultsFolder* {.pure.} = object
    lpVtbl*: ptr IResultsFolderVtbl
  IResultsFolderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AddItem*: proc(self: ptr IResultsFolder, psi: ptr IShellItem): HRESULT {.stdcall.}
    AddIDList*: proc(self: ptr IResultsFolder, pidl: PCIDLIST_ABSOLUTE, ppidlAdded: ptr PITEMID_CHILD): HRESULT {.stdcall.}
    RemoveItem*: proc(self: ptr IResultsFolder, psi: ptr IShellItem): HRESULT {.stdcall.}
    RemoveIDList*: proc(self: ptr IResultsFolder, pidl: PCIDLIST_ABSOLUTE): HRESULT {.stdcall.}
    RemoveAll*: proc(self: ptr IResultsFolder): HRESULT {.stdcall.}
  IEnumObjects* {.pure.} = object
    lpVtbl*: ptr IEnumObjectsVtbl
  IEnumObjectsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumObjects, celt: ULONG, riid: REFIID, rgelt: ptr pointer, pceltFetched: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumObjects, celt: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumObjects): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumObjects, ppenum: ptr ptr IEnumObjects): HRESULT {.stdcall.}
  IOperationsProgressDialog* {.pure.} = object
    lpVtbl*: ptr IOperationsProgressDialogVtbl
  IOperationsProgressDialogVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    StartProgressDialog*: proc(self: ptr IOperationsProgressDialog, hwndOwner: HWND, flags: OPPROGDLGF): HRESULT {.stdcall.}
    StopProgressDialog*: proc(self: ptr IOperationsProgressDialog): HRESULT {.stdcall.}
    SetOperation*: proc(self: ptr IOperationsProgressDialog, action: int32): HRESULT {.stdcall.}
    SetMode*: proc(self: ptr IOperationsProgressDialog, mode: PDMODE): HRESULT {.stdcall.}
    UpdateProgress*: proc(self: ptr IOperationsProgressDialog, ullPointsCurrent: ULONGLONG, ullPointsTotal: ULONGLONG, ullSizeCurrent: ULONGLONG, ullSizeTotal: ULONGLONG, ullItemsCurrent: ULONGLONG, ullItemsTotal: ULONGLONG): HRESULT {.stdcall.}
    UpdateLocations*: proc(self: ptr IOperationsProgressDialog, psiSource: ptr IShellItem, psiTarget: ptr IShellItem, psiItem: ptr IShellItem): HRESULT {.stdcall.}
    ResetTimer*: proc(self: ptr IOperationsProgressDialog): HRESULT {.stdcall.}
    PauseTimer*: proc(self: ptr IOperationsProgressDialog): HRESULT {.stdcall.}
    ResumeTimer*: proc(self: ptr IOperationsProgressDialog): HRESULT {.stdcall.}
    GetMilliseconds*: proc(self: ptr IOperationsProgressDialog, pullElapsed: ptr ULONGLONG, pullRemaining: ptr ULONGLONG): HRESULT {.stdcall.}
    GetOperationStatus*: proc(self: ptr IOperationsProgressDialog, popstatus: ptr int32): HRESULT {.stdcall.}
  IIOCancelInformation* {.pure.} = object
    lpVtbl*: ptr IIOCancelInformationVtbl
  IIOCancelInformationVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetCancelInformation*: proc(self: ptr IIOCancelInformation, dwThreadID: DWORD, uMsgCancel: UINT): HRESULT {.stdcall.}
    GetCancelInformation*: proc(self: ptr IIOCancelInformation, pdwThreadID: ptr DWORD, puMsgCancel: ptr UINT): HRESULT {.stdcall.}
  IFileOperation* {.pure.} = object
    lpVtbl*: ptr IFileOperationVtbl
  IFileOperationVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Advise*: proc(self: ptr IFileOperation, pfops: ptr IFileOperationProgressSink, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr IFileOperation, dwCookie: DWORD): HRESULT {.stdcall.}
    SetOperationFlags*: proc(self: ptr IFileOperation, dwOperationFlags: DWORD): HRESULT {.stdcall.}
    SetProgressMessage*: proc(self: ptr IFileOperation, pszMessage: LPCWSTR): HRESULT {.stdcall.}
    SetProgressDialog*: proc(self: ptr IFileOperation, popd: ptr IOperationsProgressDialog): HRESULT {.stdcall.}
    SetProperties*: proc(self: ptr IFileOperation, pproparray: ptr IPropertyChangeArray): HRESULT {.stdcall.}
    SetOwnerWindow*: proc(self: ptr IFileOperation, hwndOwner: HWND): HRESULT {.stdcall.}
    ApplyPropertiesToItem*: proc(self: ptr IFileOperation, psiItem: ptr IShellItem): HRESULT {.stdcall.}
    ApplyPropertiesToItems*: proc(self: ptr IFileOperation, punkItems: ptr IUnknown): HRESULT {.stdcall.}
    RenameItem*: proc(self: ptr IFileOperation, psiItem: ptr IShellItem, pszNewName: LPCWSTR, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
    RenameItems*: proc(self: ptr IFileOperation, pUnkItems: ptr IUnknown, pszNewName: LPCWSTR): HRESULT {.stdcall.}
    MoveItem*: proc(self: ptr IFileOperation, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
    MoveItems*: proc(self: ptr IFileOperation, punkItems: ptr IUnknown, psiDestinationFolder: ptr IShellItem): HRESULT {.stdcall.}
    CopyItem*: proc(self: ptr IFileOperation, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszCopyName: LPCWSTR, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
    CopyItems*: proc(self: ptr IFileOperation, punkItems: ptr IUnknown, psiDestinationFolder: ptr IShellItem): HRESULT {.stdcall.}
    DeleteItem*: proc(self: ptr IFileOperation, psiItem: ptr IShellItem, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
    DeleteItems*: proc(self: ptr IFileOperation, punkItems: ptr IUnknown): HRESULT {.stdcall.}
    NewItem*: proc(self: ptr IFileOperation, psiDestinationFolder: ptr IShellItem, dwFileAttributes: DWORD, pszName: LPCWSTR, pszTemplateName: LPCWSTR, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
    PerformOperations*: proc(self: ptr IFileOperation): HRESULT {.stdcall.}
    GetAnyOperationsAborted*: proc(self: ptr IFileOperation, pfAnyOperationsAborted: ptr WINBOOL): HRESULT {.stdcall.}
  IObjectProvider* {.pure.} = object
    lpVtbl*: ptr IObjectProviderVtbl
  IObjectProviderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    QueryObject*: proc(self: ptr IObjectProvider, guidObject: REFGUID, riid: REFIID, ppvOut: ptr pointer): HRESULT {.stdcall.}
  INamespaceWalkCB* {.pure.} = object
    lpVtbl*: ptr INamespaceWalkCBVtbl
  INamespaceWalkCBVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    FoundItem*: proc(self: ptr INamespaceWalkCB, psf: ptr IShellFolder, pidl: PCUITEMID_CHILD): HRESULT {.stdcall.}
    EnterFolder*: proc(self: ptr INamespaceWalkCB, psf: ptr IShellFolder, pidl: PCUITEMID_CHILD): HRESULT {.stdcall.}
    LeaveFolder*: proc(self: ptr INamespaceWalkCB, psf: ptr IShellFolder, pidl: PCUITEMID_CHILD): HRESULT {.stdcall.}
    InitializeProgressDialog*: proc(self: ptr INamespaceWalkCB, ppszTitle: ptr LPWSTR, ppszCancel: ptr LPWSTR): HRESULT {.stdcall.}
  INamespaceWalkCB2* {.pure.} = object
    lpVtbl*: ptr INamespaceWalkCB2Vtbl
  INamespaceWalkCB2Vtbl* {.pure, inheritable.} = object of INamespaceWalkCBVtbl
    WalkComplete*: proc(self: ptr INamespaceWalkCB2, hr: HRESULT): HRESULT {.stdcall.}
  INamespaceWalk* {.pure.} = object
    lpVtbl*: ptr INamespaceWalkVtbl
  INamespaceWalkVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Walk*: proc(self: ptr INamespaceWalk, punkToWalk: ptr IUnknown, dwFlags: DWORD, cDepth: int32, pnswcb: ptr INamespaceWalkCB): HRESULT {.stdcall.}
    GetIDArrayResult*: proc(self: ptr INamespaceWalk, pcItems: ptr UINT, prgpidl: ptr ptr PIDLIST_ABSOLUTE): HRESULT {.stdcall.}
  IAutoCompleteDropDown* {.pure.} = object
    lpVtbl*: ptr IAutoCompleteDropDownVtbl
  IAutoCompleteDropDownVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetDropDownStatus*: proc(self: ptr IAutoCompleteDropDown, pdwFlags: ptr DWORD, ppwszString: ptr LPWSTR): HRESULT {.stdcall.}
    ResetEnumerator*: proc(self: ptr IAutoCompleteDropDown): HRESULT {.stdcall.}
  IBandSite* {.pure.} = object
    lpVtbl*: ptr IBandSiteVtbl
  IBandSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AddBand*: proc(self: ptr IBandSite, punk: ptr IUnknown): HRESULT {.stdcall.}
    EnumBands*: proc(self: ptr IBandSite, uBand: UINT, pdwBandID: ptr DWORD): HRESULT {.stdcall.}
    QueryBand*: proc(self: ptr IBandSite, dwBandID: DWORD, ppstb: ptr ptr IDeskBand, pdwState: ptr DWORD, pszName: LPWSTR, cchName: int32): HRESULT {.stdcall.}
    SetBandState*: proc(self: ptr IBandSite, dwBandID: DWORD, dwMask: DWORD, dwState: DWORD): HRESULT {.stdcall.}
    RemoveBand*: proc(self: ptr IBandSite, dwBandID: DWORD): HRESULT {.stdcall.}
    GetBandObject*: proc(self: ptr IBandSite, dwBandID: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    SetBandSiteInfo*: proc(self: ptr IBandSite, pbsinfo: ptr BANDSITEINFO): HRESULT {.stdcall.}
    GetBandSiteInfo*: proc(self: ptr IBandSite, pbsinfo: ptr BANDSITEINFO): HRESULT {.stdcall.}
  IModalWindow* {.pure.} = object
    lpVtbl*: ptr IModalWindowVtbl
  IModalWindowVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Show*: proc(self: ptr IModalWindow, hwndOwner: HWND): HRESULT {.stdcall.}
  ICDBurnExt* {.pure.} = object
    lpVtbl*: ptr ICDBurnExtVtbl
  ICDBurnExtVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetSupportedActionTypes*: proc(self: ptr ICDBurnExt, pdwActions: ptr CDBE_ACTIONS): HRESULT {.stdcall.}
  IContextMenuSite* {.pure.} = object
    lpVtbl*: ptr IContextMenuSiteVtbl
  IContextMenuSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    DoContextMenuPopup*: proc(self: ptr IContextMenuSite, punkContextMenu: ptr IUnknown, fFlags: UINT, pt: POINT): HRESULT {.stdcall.}
  IEnumReadyCallback* {.pure.} = object
    lpVtbl*: ptr IEnumReadyCallbackVtbl
  IEnumReadyCallbackVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    EnumReady*: proc(self: ptr IEnumReadyCallback): HRESULT {.stdcall.}
  IEnumerableView* {.pure.} = object
    lpVtbl*: ptr IEnumerableViewVtbl
  IEnumerableViewVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetEnumReadyCallback*: proc(self: ptr IEnumerableView, percb: ptr IEnumReadyCallback): HRESULT {.stdcall.}
    CreateEnumIDListFromContents*: proc(self: ptr IEnumerableView, pidlFolder: PCIDLIST_ABSOLUTE, dwEnumFlags: DWORD, ppEnumIDList: ptr ptr IEnumIDList): HRESULT {.stdcall.}
  IInsertItem* {.pure.} = object
    lpVtbl*: ptr IInsertItemVtbl
  IInsertItemVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    InsertItem*: proc(self: ptr IInsertItem, pidl: PCUIDLIST_RELATIVE): HRESULT {.stdcall.}
  IMenuBand* {.pure.} = object
    lpVtbl*: ptr IMenuBandVtbl
  IMenuBandVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    IsMenuMessage*: proc(self: ptr IMenuBand, pmsg: ptr MSG): HRESULT {.stdcall.}
    TranslateMenuMessage*: proc(self: ptr IMenuBand, pmsg: ptr MSG, plRet: ptr LRESULT): HRESULT {.stdcall.}
  IFolderBandPriv* {.pure.} = object
    lpVtbl*: ptr IFolderBandPrivVtbl
  IFolderBandPrivVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetCascade*: proc(self: ptr IFolderBandPriv, fCascade: WINBOOL): HRESULT {.stdcall.}
    SetAccelerators*: proc(self: ptr IFolderBandPriv, fAccelerators: WINBOOL): HRESULT {.stdcall.}
    SetNoIcons*: proc(self: ptr IFolderBandPriv, fNoIcons: WINBOOL): HRESULT {.stdcall.}
    SetNoText*: proc(self: ptr IFolderBandPriv, fNoText: WINBOOL): HRESULT {.stdcall.}
  IRegTreeItem* {.pure.} = object
    lpVtbl*: ptr IRegTreeItemVtbl
  IRegTreeItemVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCheckState*: proc(self: ptr IRegTreeItem, pbCheck: ptr WINBOOL): HRESULT {.stdcall.}
    SetCheckState*: proc(self: ptr IRegTreeItem, bCheck: WINBOOL): HRESULT {.stdcall.}
  IImageRecompress* {.pure.} = object
    lpVtbl*: ptr IImageRecompressVtbl
  IImageRecompressVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    RecompressImage*: proc(self: ptr IImageRecompress, psi: ptr IShellItem, cx: int32, cy: int32, iQuality: int32, pstg: ptr IStorage, ppstrmOut: ptr ptr IStream): HRESULT {.stdcall.}
  IDeskBar* {.pure.} = object
    lpVtbl*: ptr IDeskBarVtbl
  IDeskBarVtbl* {.pure, inheritable.} = object of IOleWindowVtbl
    SetClient*: proc(self: ptr IDeskBar, punkClient: ptr IUnknown): HRESULT {.stdcall.}
    GetClient*: proc(self: ptr IDeskBar, ppunkClient: ptr ptr IUnknown): HRESULT {.stdcall.}
    OnPosRectChangeDB*: proc(self: ptr IDeskBar, prc: ptr RECT): HRESULT {.stdcall.}
  IMenuPopup* {.pure.} = object
    lpVtbl*: ptr IMenuPopupVtbl
  IMenuPopupVtbl* {.pure, inheritable.} = object of IDeskBarVtbl
    Popup*: proc(self: ptr IMenuPopup, ppt: ptr POINTL, prcExclude: ptr RECTL, dwFlags: MP_POPUPFLAGS): HRESULT {.stdcall.}
    OnSelect*: proc(self: ptr IMenuPopup, dwSelectType: DWORD): HRESULT {.stdcall.}
    SetSubMenu*: proc(self: ptr IMenuPopup, pmp: ptr IMenuPopup, fSet: WINBOOL): HRESULT {.stdcall.}
  IFileIsInUse* {.pure.} = object
    lpVtbl*: ptr IFileIsInUseVtbl
  IFileIsInUseVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetAppName*: proc(self: ptr IFileIsInUse, ppszName: ptr LPWSTR): HRESULT {.stdcall.}
    GetUsage*: proc(self: ptr IFileIsInUse, pfut: ptr int32): HRESULT {.stdcall.}
    GetCapabilities*: proc(self: ptr IFileIsInUse, pdwCapFlags: ptr DWORD): HRESULT {.stdcall.}
    GetSwitchToHWND*: proc(self: ptr IFileIsInUse, phwnd: ptr HWND): HRESULT {.stdcall.}
    CloseFile*: proc(self: ptr IFileIsInUse): HRESULT {.stdcall.}
  IFileDialogEvents* {.pure.} = object
    lpVtbl*: ptr IFileDialogEventsVtbl
  IFileDialogEventsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnFileOk*: proc(self: ptr IFileDialogEvents, pfd: ptr IFileDialog): HRESULT {.stdcall.}
    OnFolderChanging*: proc(self: ptr IFileDialogEvents, pfd: ptr IFileDialog, psiFolder: ptr IShellItem): HRESULT {.stdcall.}
    OnFolderChange*: proc(self: ptr IFileDialogEvents, pfd: ptr IFileDialog): HRESULT {.stdcall.}
    OnSelectionChange*: proc(self: ptr IFileDialogEvents, pfd: ptr IFileDialog): HRESULT {.stdcall.}
    OnShareViolation*: proc(self: ptr IFileDialogEvents, pfd: ptr IFileDialog, psi: ptr IShellItem, pResponse: ptr int32): HRESULT {.stdcall.}
    OnTypeChange*: proc(self: ptr IFileDialogEvents, pfd: ptr IFileDialog): HRESULT {.stdcall.}
    OnOverwrite*: proc(self: ptr IFileDialogEvents, pfd: ptr IFileDialog, psi: ptr IShellItem, pResponse: ptr int32): HRESULT {.stdcall.}
  IFileDialog* {.pure.} = object
    lpVtbl*: ptr IFileDialogVtbl
  IFileDialogVtbl* {.pure, inheritable.} = object of IModalWindowVtbl
    SetFileTypes*: proc(self: ptr IFileDialog, cFileTypes: UINT, rgFilterSpec: ptr COMDLG_FILTERSPEC): HRESULT {.stdcall.}
    SetFileTypeIndex*: proc(self: ptr IFileDialog, iFileType: UINT): HRESULT {.stdcall.}
    GetFileTypeIndex*: proc(self: ptr IFileDialog, piFileType: ptr UINT): HRESULT {.stdcall.}
    Advise*: proc(self: ptr IFileDialog, pfde: ptr IFileDialogEvents, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr IFileDialog, dwCookie: DWORD): HRESULT {.stdcall.}
    SetOptions*: proc(self: ptr IFileDialog, fos: FILEOPENDIALOGOPTIONS): HRESULT {.stdcall.}
    GetOptions*: proc(self: ptr IFileDialog, pfos: ptr FILEOPENDIALOGOPTIONS): HRESULT {.stdcall.}
    SetDefaultFolder*: proc(self: ptr IFileDialog, psi: ptr IShellItem): HRESULT {.stdcall.}
    SetFolder*: proc(self: ptr IFileDialog, psi: ptr IShellItem): HRESULT {.stdcall.}
    GetFolder*: proc(self: ptr IFileDialog, ppsi: ptr ptr IShellItem): HRESULT {.stdcall.}
    GetCurrentSelection*: proc(self: ptr IFileDialog, ppsi: ptr ptr IShellItem): HRESULT {.stdcall.}
    SetFileName*: proc(self: ptr IFileDialog, pszName: LPCWSTR): HRESULT {.stdcall.}
    GetFileName*: proc(self: ptr IFileDialog, pszName: ptr LPWSTR): HRESULT {.stdcall.}
    SetTitle*: proc(self: ptr IFileDialog, pszTitle: LPCWSTR): HRESULT {.stdcall.}
    SetOkButtonLabel*: proc(self: ptr IFileDialog, pszText: LPCWSTR): HRESULT {.stdcall.}
    SetFileNameLabel*: proc(self: ptr IFileDialog, pszLabel: LPCWSTR): HRESULT {.stdcall.}
    GetResult*: proc(self: ptr IFileDialog, ppsi: ptr ptr IShellItem): HRESULT {.stdcall.}
    AddPlace*: proc(self: ptr IFileDialog, psi: ptr IShellItem, fdap: int32): HRESULT {.stdcall.}
    SetDefaultExtension*: proc(self: ptr IFileDialog, pszDefaultExtension: LPCWSTR): HRESULT {.stdcall.}
    Close*: proc(self: ptr IFileDialog, hr: HRESULT): HRESULT {.stdcall.}
    SetClientGuid*: proc(self: ptr IFileDialog, guid: REFGUID): HRESULT {.stdcall.}
    ClearClientData*: proc(self: ptr IFileDialog): HRESULT {.stdcall.}
    SetFilter*: proc(self: ptr IFileDialog, pFilter: ptr IShellItemFilter): HRESULT {.stdcall.}
  IFileSaveDialog* {.pure.} = object
    lpVtbl*: ptr IFileSaveDialogVtbl
  IFileSaveDialogVtbl* {.pure, inheritable.} = object of IFileDialogVtbl
    SetSaveAsItem*: proc(self: ptr IFileSaveDialog, psi: ptr IShellItem): HRESULT {.stdcall.}
    SetProperties*: proc(self: ptr IFileSaveDialog, pStore: ptr IPropertyStore): HRESULT {.stdcall.}
    SetCollectedProperties*: proc(self: ptr IFileSaveDialog, pList: ptr IPropertyDescriptionList, fAppendDefault: WINBOOL): HRESULT {.stdcall.}
    GetProperties*: proc(self: ptr IFileSaveDialog, ppStore: ptr ptr IPropertyStore): HRESULT {.stdcall.}
    ApplyProperties*: proc(self: ptr IFileSaveDialog, psi: ptr IShellItem, pStore: ptr IPropertyStore, hwnd: HWND, pSink: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
  IFileOpenDialog* {.pure.} = object
    lpVtbl*: ptr IFileOpenDialogVtbl
  IFileOpenDialogVtbl* {.pure, inheritable.} = object of IFileDialogVtbl
    GetResults*: proc(self: ptr IFileOpenDialog, ppenum: ptr ptr IShellItemArray): HRESULT {.stdcall.}
    GetSelectedItems*: proc(self: ptr IFileOpenDialog, ppsai: ptr ptr IShellItemArray): HRESULT {.stdcall.}
  IFileDialogCustomize* {.pure.} = object
    lpVtbl*: ptr IFileDialogCustomizeVtbl
  IFileDialogCustomizeVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    EnableOpenDropDown*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.stdcall.}
    AddMenu*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR): HRESULT {.stdcall.}
    AddPushButton*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR): HRESULT {.stdcall.}
    AddComboBox*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.stdcall.}
    AddRadioButtonList*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.stdcall.}
    AddCheckButton*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR, bChecked: WINBOOL): HRESULT {.stdcall.}
    AddEditBox*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszText: LPCWSTR): HRESULT {.stdcall.}
    AddSeparator*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.stdcall.}
    AddText*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszText: LPCWSTR): HRESULT {.stdcall.}
    SetControlLabel*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR): HRESULT {.stdcall.}
    GetControlState*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pdwState: ptr int32): HRESULT {.stdcall.}
    SetControlState*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwState: int32): HRESULT {.stdcall.}
    GetEditBoxText*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, ppszText: ptr ptr WCHAR): HRESULT {.stdcall.}
    SetEditBoxText*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszText: LPCWSTR): HRESULT {.stdcall.}
    GetCheckButtonState*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pbChecked: ptr WINBOOL): HRESULT {.stdcall.}
    SetCheckButtonState*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, bChecked: WINBOOL): HRESULT {.stdcall.}
    AddControlItem*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD, pszLabel: LPCWSTR): HRESULT {.stdcall.}
    RemoveControlItem*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD): HRESULT {.stdcall.}
    RemoveAllControlItems*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.stdcall.}
    GetControlItemState*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD, pdwState: ptr int32): HRESULT {.stdcall.}
    SetControlItemState*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD, dwState: int32): HRESULT {.stdcall.}
    GetSelectedControlItem*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pdwIDItem: ptr DWORD): HRESULT {.stdcall.}
    SetSelectedControlItem*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD): HRESULT {.stdcall.}
    StartVisualGroup*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR): HRESULT {.stdcall.}
    EndVisualGroup*: proc(self: ptr IFileDialogCustomize): HRESULT {.stdcall.}
    MakeProminent*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.stdcall.}
    SetControlItemText*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD, pszLabel: LPCWSTR): HRESULT {.stdcall.}
  IFileDialogControlEvents* {.pure.} = object
    lpVtbl*: ptr IFileDialogControlEventsVtbl
  IFileDialogControlEventsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnItemSelected*: proc(self: ptr IFileDialogControlEvents, pfdc: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD): HRESULT {.stdcall.}
    OnButtonClicked*: proc(self: ptr IFileDialogControlEvents, pfdc: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.stdcall.}
    OnCheckButtonToggled*: proc(self: ptr IFileDialogControlEvents, pfdc: ptr IFileDialogCustomize, dwIDCtl: DWORD, bChecked: WINBOOL): HRESULT {.stdcall.}
    OnControlActivating*: proc(self: ptr IFileDialogControlEvents, pfdc: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.stdcall.}
  IFileDialog2* {.pure.} = object
    lpVtbl*: ptr IFileDialog2Vtbl
  IFileDialog2Vtbl* {.pure, inheritable.} = object of IFileDialogVtbl
    SetCancelButtonLabel*: proc(self: ptr IFileDialog2, pszLabel: LPCWSTR): HRESULT {.stdcall.}
    SetNavigationRoot*: proc(self: ptr IFileDialog2, psi: ptr IShellItem): HRESULT {.stdcall.}
  IApplicationAssociationRegistration* {.pure.} = object
    lpVtbl*: ptr IApplicationAssociationRegistrationVtbl
  IApplicationAssociationRegistrationVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    QueryCurrentDefault*: proc(self: ptr IApplicationAssociationRegistration, pszQuery: LPCWSTR, atQueryType: int32, alQueryLevel: int32, ppszAssociation: ptr LPWSTR): HRESULT {.stdcall.}
    QueryAppIsDefault*: proc(self: ptr IApplicationAssociationRegistration, pszQuery: LPCWSTR, atQueryType: int32, alQueryLevel: int32, pszAppRegistryName: LPCWSTR, pfDefault: ptr WINBOOL): HRESULT {.stdcall.}
    QueryAppIsDefaultAll*: proc(self: ptr IApplicationAssociationRegistration, alQueryLevel: int32, pszAppRegistryName: LPCWSTR, pfDefault: ptr WINBOOL): HRESULT {.stdcall.}
    SetAppAsDefault*: proc(self: ptr IApplicationAssociationRegistration, pszAppRegistryName: LPCWSTR, pszSet: LPCWSTR, atSetType: int32): HRESULT {.stdcall.}
    SetAppAsDefaultAll*: proc(self: ptr IApplicationAssociationRegistration, pszAppRegistryName: LPCWSTR): HRESULT {.stdcall.}
    ClearUserAssociations*: proc(self: ptr IApplicationAssociationRegistration): HRESULT {.stdcall.}
  IApplicationAssociationRegistrationUI* {.pure.} = object
    lpVtbl*: ptr IApplicationAssociationRegistrationUIVtbl
  IApplicationAssociationRegistrationUIVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    LaunchAdvancedAssociationUI*: proc(self: ptr IApplicationAssociationRegistrationUI, pszAppRegistryName: LPCWSTR): HRESULT {.stdcall.}
  IDelegateFolder* {.pure.} = object
    lpVtbl*: ptr IDelegateFolderVtbl
  IDelegateFolderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetItemAlloc*: proc(self: ptr IDelegateFolder, pmalloc: ptr IMalloc): HRESULT {.stdcall.}
  IBrowserFrameOptions* {.pure.} = object
    lpVtbl*: ptr IBrowserFrameOptionsVtbl
  IBrowserFrameOptionsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetFrameOptions*: proc(self: ptr IBrowserFrameOptions, dwMask: BROWSERFRAMEOPTIONS, pdwOptions: ptr BROWSERFRAMEOPTIONS): HRESULT {.stdcall.}
  INewWindowManager* {.pure.} = object
    lpVtbl*: ptr INewWindowManagerVtbl
  INewWindowManagerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    EvaluateNewWindow*: proc(self: ptr INewWindowManager, pszUrl: LPCWSTR, pszName: LPCWSTR, pszUrlContext: LPCWSTR, pszFeatures: LPCWSTR, fReplace: WINBOOL, dwFlags: DWORD, dwUserActionTime: DWORD): HRESULT {.stdcall.}
  IAttachmentExecute* {.pure.} = object
    lpVtbl*: ptr IAttachmentExecuteVtbl
  IAttachmentExecuteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetClientTitle*: proc(self: ptr IAttachmentExecute, pszTitle: LPCWSTR): HRESULT {.stdcall.}
    SetClientGuid*: proc(self: ptr IAttachmentExecute, guid: REFGUID): HRESULT {.stdcall.}
    SetLocalPath*: proc(self: ptr IAttachmentExecute, pszLocalPath: LPCWSTR): HRESULT {.stdcall.}
    SetFileName*: proc(self: ptr IAttachmentExecute, pszFileName: LPCWSTR): HRESULT {.stdcall.}
    SetSource*: proc(self: ptr IAttachmentExecute, pszSource: LPCWSTR): HRESULT {.stdcall.}
    SetReferrer*: proc(self: ptr IAttachmentExecute, pszReferrer: LPCWSTR): HRESULT {.stdcall.}
    CheckPolicy*: proc(self: ptr IAttachmentExecute): HRESULT {.stdcall.}
    Prompt*: proc(self: ptr IAttachmentExecute, hwnd: HWND, prompt: int32, paction: ptr int32): HRESULT {.stdcall.}
    Save*: proc(self: ptr IAttachmentExecute): HRESULT {.stdcall.}
    Execute*: proc(self: ptr IAttachmentExecute, hwnd: HWND, pszVerb: LPCWSTR, phProcess: ptr HANDLE): HRESULT {.stdcall.}
    SaveWithUI*: proc(self: ptr IAttachmentExecute, hwnd: HWND): HRESULT {.stdcall.}
    ClearClientState*: proc(self: ptr IAttachmentExecute): HRESULT {.stdcall.}
  IShellMenuCallback* {.pure.} = object
    lpVtbl*: ptr IShellMenuCallbackVtbl
  IShellMenuCallbackVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CallbackSM*: proc(self: ptr IShellMenuCallback, psmd: LPSMDATA, uMsg: UINT, wParam: WPARAM, lParam: LPARAM): HRESULT {.stdcall.}
  IShellMenu* {.pure.} = object
    lpVtbl*: ptr IShellMenuVtbl
  IShellMenuVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IShellMenu, psmc: ptr IShellMenuCallback, uId: UINT, uIdAncestor: UINT, dwFlags: DWORD): HRESULT {.stdcall.}
    GetMenuInfo*: proc(self: ptr IShellMenu, ppsmc: ptr ptr IShellMenuCallback, puId: ptr UINT, puIdAncestor: ptr UINT, pdwFlags: ptr DWORD): HRESULT {.stdcall.}
    SetShellFolder*: proc(self: ptr IShellMenu, psf: ptr IShellFolder, pidlFolder: PCIDLIST_ABSOLUTE, hKey: HKEY, dwFlags: DWORD): HRESULT {.stdcall.}
    GetShellFolder*: proc(self: ptr IShellMenu, pdwFlags: ptr DWORD, ppidl: ptr PIDLIST_ABSOLUTE, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    SetMenu*: proc(self: ptr IShellMenu, hmenu: HMENU, hwnd: HWND, dwFlags: DWORD): HRESULT {.stdcall.}
    GetMenu*: proc(self: ptr IShellMenu, phmenu: ptr HMENU, phwnd: ptr HWND, pdwFlags: ptr DWORD): HRESULT {.stdcall.}
    InvalidateItem*: proc(self: ptr IShellMenu, psmd: LPSMDATA, dwFlags: DWORD): HRESULT {.stdcall.}
    GetState*: proc(self: ptr IShellMenu, psmd: LPSMDATA): HRESULT {.stdcall.}
    SetMenuToolbar*: proc(self: ptr IShellMenu, punk: ptr IUnknown, dwFlags: DWORD): HRESULT {.stdcall.}
  IShellRunDll* {.pure.} = object
    lpVtbl*: ptr IShellRunDllVtbl
  IShellRunDllVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Run*: proc(self: ptr IShellRunDll, pszArgs: LPCWSTR): HRESULT {.stdcall.}
  IKnownFolder* {.pure.} = object
    lpVtbl*: ptr IKnownFolderVtbl
  IKnownFolderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetId*: proc(self: ptr IKnownFolder, pkfid: ptr KNOWNFOLDERID): HRESULT {.stdcall.}
    GetCategory*: proc(self: ptr IKnownFolder, pCategory: ptr int32): HRESULT {.stdcall.}
    GetShellItem*: proc(self: ptr IKnownFolder, dwFlags: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetPath*: proc(self: ptr IKnownFolder, dwFlags: DWORD, ppszPath: ptr LPWSTR): HRESULT {.stdcall.}
    SetPath*: proc(self: ptr IKnownFolder, dwFlags: DWORD, pszPath: LPCWSTR): HRESULT {.stdcall.}
    GetIDList*: proc(self: ptr IKnownFolder, dwFlags: DWORD, ppidl: ptr PIDLIST_ABSOLUTE): HRESULT {.stdcall.}
    GetFolderType*: proc(self: ptr IKnownFolder, pftid: ptr FOLDERTYPEID): HRESULT {.stdcall.}
    GetRedirectionCapabilities*: proc(self: ptr IKnownFolder, pCapabilities: ptr KF_REDIRECTION_CAPABILITIES): HRESULT {.stdcall.}
    GetFolderDefinition*: proc(self: ptr IKnownFolder, pKFD: ptr KNOWNFOLDER_DEFINITION): HRESULT {.stdcall.}
  IKnownFolderManager* {.pure.} = object
    lpVtbl*: ptr IKnownFolderManagerVtbl
  IKnownFolderManagerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    FolderIdFromCsidl*: proc(self: ptr IKnownFolderManager, nCsidl: int32, pfid: ptr KNOWNFOLDERID): HRESULT {.stdcall.}
    FolderIdToCsidl*: proc(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID, pnCsidl: ptr int32): HRESULT {.stdcall.}
    GetFolderIds*: proc(self: ptr IKnownFolderManager, ppKFId: ptr ptr KNOWNFOLDERID, pCount: ptr UINT): HRESULT {.stdcall.}
    GetFolder*: proc(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID, ppkf: ptr ptr IKnownFolder): HRESULT {.stdcall.}
    GetFolderByName*: proc(self: ptr IKnownFolderManager, pszCanonicalName: LPCWSTR, ppkf: ptr ptr IKnownFolder): HRESULT {.stdcall.}
    RegisterFolder*: proc(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID, pKFD: ptr KNOWNFOLDER_DEFINITION): HRESULT {.stdcall.}
    UnregisterFolder*: proc(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID): HRESULT {.stdcall.}
    FindFolderFromPath*: proc(self: ptr IKnownFolderManager, pszPath: LPCWSTR, mode: int32, ppkf: ptr ptr IKnownFolder): HRESULT {.stdcall.}
    FindFolderFromIDList*: proc(self: ptr IKnownFolderManager, pidl: PCIDLIST_ABSOLUTE, ppkf: ptr ptr IKnownFolder): HRESULT {.stdcall.}
    Redirect*: proc(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID, hwnd: HWND, flags: KF_REDIRECT_FLAGS, pszTargetPath: LPCWSTR, cFolders: UINT, pExclusion: ptr KNOWNFOLDERID, ppszError: ptr LPWSTR): HRESULT {.stdcall.}
  ISharingConfigurationManager* {.pure.} = object
    lpVtbl*: ptr ISharingConfigurationManagerVtbl
  ISharingConfigurationManagerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CreateShare*: proc(self: ptr ISharingConfigurationManager, dsid: int32, role: int32): HRESULT {.stdcall.}
    DeleteShare*: proc(self: ptr ISharingConfigurationManager, dsid: int32): HRESULT {.stdcall.}
    ShareExists*: proc(self: ptr ISharingConfigurationManager, dsid: int32): HRESULT {.stdcall.}
    GetSharePermissions*: proc(self: ptr ISharingConfigurationManager, dsid: int32, pRole: ptr int32): HRESULT {.stdcall.}
    SharePrinters*: proc(self: ptr ISharingConfigurationManager): HRESULT {.stdcall.}
    StopSharingPrinters*: proc(self: ptr ISharingConfigurationManager): HRESULT {.stdcall.}
    ArePrintersShared*: proc(self: ptr ISharingConfigurationManager): HRESULT {.stdcall.}
  IPreviousVersionsInfo* {.pure.} = object
    lpVtbl*: ptr IPreviousVersionsInfoVtbl
  IPreviousVersionsInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AreSnapshotsAvailable*: proc(self: ptr IPreviousVersionsInfo, pszPath: LPCWSTR, fOkToBeSlow: WINBOOL, pfAvailable: ptr WINBOOL): HRESULT {.stdcall.}
  IRelatedItem* {.pure.} = object
    lpVtbl*: ptr IRelatedItemVtbl
  IRelatedItemVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetItemIDList*: proc(self: ptr IRelatedItem, ppidl: ptr PIDLIST_ABSOLUTE): HRESULT {.stdcall.}
    GetItem*: proc(self: ptr IRelatedItem, ppsi: ptr ptr IShellItem): HRESULT {.stdcall.}
  IIdentityName* {.pure.} = object
    lpVtbl*: ptr IIdentityNameVtbl
  IIdentityNameVtbl* {.pure, inheritable.} = object of IRelatedItemVtbl
  IDelegateItem* {.pure.} = object
    lpVtbl*: ptr IDelegateItemVtbl
  IDelegateItemVtbl* {.pure, inheritable.} = object of IRelatedItemVtbl
  ICurrentItem* {.pure.} = object
    lpVtbl*: ptr ICurrentItemVtbl
  ICurrentItemVtbl* {.pure, inheritable.} = object of IRelatedItemVtbl
  ITransferMediumItem* {.pure.} = object
    lpVtbl*: ptr ITransferMediumItemVtbl
  ITransferMediumItemVtbl* {.pure, inheritable.} = object of IRelatedItemVtbl
  IUseToBrowseItem* {.pure.} = object
    lpVtbl*: ptr IUseToBrowseItemVtbl
  IUseToBrowseItemVtbl* {.pure, inheritable.} = object of IRelatedItemVtbl
  IDisplayItem* {.pure.} = object
    lpVtbl*: ptr IDisplayItemVtbl
  IDisplayItemVtbl* {.pure, inheritable.} = object of IRelatedItemVtbl
  IViewStateIdentityItem* {.pure.} = object
    lpVtbl*: ptr IViewStateIdentityItemVtbl
  IViewStateIdentityItemVtbl* {.pure, inheritable.} = object of IRelatedItemVtbl
  IPreviewItem* {.pure.} = object
    lpVtbl*: ptr IPreviewItemVtbl
  IPreviewItemVtbl* {.pure, inheritable.} = object of IRelatedItemVtbl
  IDestinationStreamFactory* {.pure.} = object
    lpVtbl*: ptr IDestinationStreamFactoryVtbl
  IDestinationStreamFactoryVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetDestinationStream*: proc(self: ptr IDestinationStreamFactory, ppstm: ptr ptr IStream): HRESULT {.stdcall.}
  INewMenuClient* {.pure.} = object
    lpVtbl*: ptr INewMenuClientVtbl
  INewMenuClientVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    IncludeItems*: proc(self: ptr INewMenuClient, pflags: ptr NMCII_FLAGS): HRESULT {.stdcall.}
    SelectAndEditItem*: proc(self: ptr INewMenuClient, pidlItem: PCIDLIST_ABSOLUTE, flags: NMCSAEI_FLAGS): HRESULT {.stdcall.}
  IInitializeWithBindCtx* {.pure.} = object
    lpVtbl*: ptr IInitializeWithBindCtxVtbl
  IInitializeWithBindCtxVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IInitializeWithBindCtx, pbc: ptr IBindCtx): HRESULT {.stdcall.}
  IShellItemFilter* {.pure.} = object
    lpVtbl*: ptr IShellItemFilterVtbl
  IShellItemFilterVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    IncludeItem*: proc(self: ptr IShellItemFilter, psi: ptr IShellItem): HRESULT {.stdcall.}
    GetEnumFlagsForItem*: proc(self: ptr IShellItemFilter, psi: ptr IShellItem, pgrfFlags: ptr SHCONTF): HRESULT {.stdcall.}
  INameSpaceTreeControl* {.pure.} = object
    lpVtbl*: ptr INameSpaceTreeControlVtbl
  INameSpaceTreeControlVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr INameSpaceTreeControl, hwndParent: HWND, prc: ptr RECT, nsctsFlags: NSTCSTYLE): HRESULT {.stdcall.}
    TreeAdvise*: proc(self: ptr INameSpaceTreeControl, punk: ptr IUnknown, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    TreeUnadvise*: proc(self: ptr INameSpaceTreeControl, dwCookie: DWORD): HRESULT {.stdcall.}
    AppendRoot*: proc(self: ptr INameSpaceTreeControl, psiRoot: ptr IShellItem, grfEnumFlags: SHCONTF, grfRootStyle: NSTCROOTSTYLE, pif: ptr IShellItemFilter): HRESULT {.stdcall.}
    InsertRoot*: proc(self: ptr INameSpaceTreeControl, iIndex: int32, psiRoot: ptr IShellItem, grfEnumFlags: SHCONTF, grfRootStyle: NSTCROOTSTYLE, pif: ptr IShellItemFilter): HRESULT {.stdcall.}
    RemoveRoot*: proc(self: ptr INameSpaceTreeControl, psiRoot: ptr IShellItem): HRESULT {.stdcall.}
    RemoveAllRoots*: proc(self: ptr INameSpaceTreeControl): HRESULT {.stdcall.}
    GetRootItems*: proc(self: ptr INameSpaceTreeControl, ppsiaRootItems: ptr ptr IShellItemArray): HRESULT {.stdcall.}
    SetItemState*: proc(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, nstcisMask: NSTCITEMSTATE, nstcisFlags: NSTCITEMSTATE): HRESULT {.stdcall.}
    GetItemState*: proc(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, nstcisMask: NSTCITEMSTATE, pnstcisFlags: ptr NSTCITEMSTATE): HRESULT {.stdcall.}
    GetSelectedItems*: proc(self: ptr INameSpaceTreeControl, psiaItems: ptr ptr IShellItemArray): HRESULT {.stdcall.}
    GetItemCustomState*: proc(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, piStateNumber: ptr int32): HRESULT {.stdcall.}
    SetItemCustomState*: proc(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, iStateNumber: int32): HRESULT {.stdcall.}
    EnsureItemVisible*: proc(self: ptr INameSpaceTreeControl, psi: ptr IShellItem): HRESULT {.stdcall.}
    SetTheme*: proc(self: ptr INameSpaceTreeControl, pszTheme: LPCWSTR): HRESULT {.stdcall.}
    GetNextItem*: proc(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, nstcgi: int32, ppsiNext: ptr ptr IShellItem): HRESULT {.stdcall.}
    HitTest*: proc(self: ptr INameSpaceTreeControl, ppt: ptr POINT, ppsiOut: ptr ptr IShellItem): HRESULT {.stdcall.}
    GetItemRect*: proc(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, prect: ptr RECT): HRESULT {.stdcall.}
    CollapseAll*: proc(self: ptr INameSpaceTreeControl): HRESULT {.stdcall.}
  INameSpaceTreeControl2* {.pure.} = object
    lpVtbl*: ptr INameSpaceTreeControl2Vtbl
  INameSpaceTreeControl2Vtbl* {.pure, inheritable.} = object of INameSpaceTreeControlVtbl
    SetControlStyle*: proc(self: ptr INameSpaceTreeControl2, nstcsMask: NSTCSTYLE, nstcsStyle: NSTCSTYLE): HRESULT {.stdcall.}
    GetControlStyle*: proc(self: ptr INameSpaceTreeControl2, nstcsMask: NSTCSTYLE, pnstcsStyle: ptr NSTCSTYLE): HRESULT {.stdcall.}
    SetControlStyle2*: proc(self: ptr INameSpaceTreeControl2, nstcsMask: int32, nstcsStyle: int32): HRESULT {.stdcall.}
    GetControlStyle2*: proc(self: ptr INameSpaceTreeControl2, nstcsMask: int32, pnstcsStyle: ptr int32): HRESULT {.stdcall.}
  INameSpaceTreeControlEvents* {.pure.} = object
    lpVtbl*: ptr INameSpaceTreeControlEventsVtbl
  INameSpaceTreeControlEventsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnItemClick*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, nstceHitTest: NSTCEHITTEST, nstceClickType: NSTCECLICKTYPE): HRESULT {.stdcall.}
    OnPropertyItemCommit*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.stdcall.}
    OnItemStateChanging*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, nstcisMask: NSTCITEMSTATE, nstcisState: NSTCITEMSTATE): HRESULT {.stdcall.}
    OnItemStateChanged*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, nstcisMask: NSTCITEMSTATE, nstcisState: NSTCITEMSTATE): HRESULT {.stdcall.}
    OnSelectionChanged*: proc(self: ptr INameSpaceTreeControlEvents, psiaSelection: ptr IShellItemArray): HRESULT {.stdcall.}
    OnKeyboardInput*: proc(self: ptr INameSpaceTreeControlEvents, uMsg: UINT, wParam: WPARAM, lParam: LPARAM): HRESULT {.stdcall.}
    OnBeforeExpand*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.stdcall.}
    OnAfterExpand*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.stdcall.}
    OnBeginLabelEdit*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.stdcall.}
    OnEndLabelEdit*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.stdcall.}
    OnGetToolTip*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, pszTip: LPWSTR, cchTip: int32): HRESULT {.stdcall.}
    OnBeforeItemDelete*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.stdcall.}
    OnItemAdded*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, fIsRoot: WINBOOL): HRESULT {.stdcall.}
    OnItemDeleted*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, fIsRoot: WINBOOL): HRESULT {.stdcall.}
    OnBeforeContextMenu*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    OnAfterContextMenu*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, pcmIn: ptr IContextMenu, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    OnBeforeStateImageChange*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.stdcall.}
    OnGetDefaultIconIndex*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, piDefaultIcon: ptr int32, piOpenIcon: ptr int32): HRESULT {.stdcall.}
  INameSpaceTreeControlDropHandler* {.pure.} = object
    lpVtbl*: ptr INameSpaceTreeControlDropHandlerVtbl
  INameSpaceTreeControlDropHandlerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnDragEnter*: proc(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, fOutsideSource: WINBOOL, grfKeyState: DWORD, pdwEffect: ptr DWORD): HRESULT {.stdcall.}
    OnDragOver*: proc(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, grfKeyState: DWORD, pdwEffect: ptr DWORD): HRESULT {.stdcall.}
    OnDragPosition*: proc(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, iNewPosition: int32, iOldPosition: int32): HRESULT {.stdcall.}
    OnDrop*: proc(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, iPosition: int32, grfKeyState: DWORD, pdwEffect: ptr DWORD): HRESULT {.stdcall.}
    OnDropPosition*: proc(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, iNewPosition: int32, iOldPosition: int32): HRESULT {.stdcall.}
    OnDragLeave*: proc(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem): HRESULT {.stdcall.}
  INameSpaceTreeAccessible* {.pure.} = object
    lpVtbl*: ptr INameSpaceTreeAccessibleVtbl
  INameSpaceTreeAccessibleVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnGetDefaultAccessibilityAction*: proc(self: ptr INameSpaceTreeAccessible, psi: ptr IShellItem, pbstrDefaultAction: ptr BSTR): HRESULT {.stdcall.}
    OnDoDefaultAccessibilityAction*: proc(self: ptr INameSpaceTreeAccessible, psi: ptr IShellItem): HRESULT {.stdcall.}
    OnGetAccessibilityRole*: proc(self: ptr INameSpaceTreeAccessible, psi: ptr IShellItem, pvarRole: ptr VARIANT): HRESULT {.stdcall.}
  INameSpaceTreeControlCustomDraw* {.pure.} = object
    lpVtbl*: ptr INameSpaceTreeControlCustomDrawVtbl
  INameSpaceTreeControlCustomDrawVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    PrePaint*: proc(self: ptr INameSpaceTreeControlCustomDraw, hdc: HDC, prc: ptr RECT, plres: ptr LRESULT): HRESULT {.stdcall.}
    PostPaint*: proc(self: ptr INameSpaceTreeControlCustomDraw, hdc: HDC, prc: ptr RECT): HRESULT {.stdcall.}
    ItemPrePaint*: proc(self: ptr INameSpaceTreeControlCustomDraw, hdc: HDC, prc: ptr RECT, pnstccdItem: ptr NSTCCUSTOMDRAW, pclrText: ptr COLORREF, pclrTextBk: ptr COLORREF, plres: ptr LRESULT): HRESULT {.stdcall.}
    ItemPostPaint*: proc(self: ptr INameSpaceTreeControlCustomDraw, hdc: HDC, prc: ptr RECT, pnstccdItem: ptr NSTCCUSTOMDRAW): HRESULT {.stdcall.}
  INameSpaceTreeControlFolderCapabilities* {.pure.} = object
    lpVtbl*: ptr INameSpaceTreeControlFolderCapabilitiesVtbl
  INameSpaceTreeControlFolderCapabilitiesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetFolderCapabilities*: proc(self: ptr INameSpaceTreeControlFolderCapabilities, nfcMask: int32, pnfcValue: ptr int32): HRESULT {.stdcall.}
  IPreviewHandler* {.pure.} = object
    lpVtbl*: ptr IPreviewHandlerVtbl
  IPreviewHandlerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetWindow*: proc(self: ptr IPreviewHandler, hwnd: HWND, prc: ptr RECT): HRESULT {.stdcall.}
    SetRect*: proc(self: ptr IPreviewHandler, prc: ptr RECT): HRESULT {.stdcall.}
    DoPreview*: proc(self: ptr IPreviewHandler): HRESULT {.stdcall.}
    Unload*: proc(self: ptr IPreviewHandler): HRESULT {.stdcall.}
    SetFocus*: proc(self: ptr IPreviewHandler): HRESULT {.stdcall.}
    QueryFocus*: proc(self: ptr IPreviewHandler, phwnd: ptr HWND): HRESULT {.stdcall.}
    TranslateAccelerator*: proc(self: ptr IPreviewHandler, pmsg: ptr MSG): HRESULT {.stdcall.}
  IPreviewHandlerFrame* {.pure.} = object
    lpVtbl*: ptr IPreviewHandlerFrameVtbl
  IPreviewHandlerFrameVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetWindowContext*: proc(self: ptr IPreviewHandlerFrame, pinfo: ptr PREVIEWHANDLERFRAMEINFO): HRESULT {.stdcall.}
    TranslateAccelerator*: proc(self: ptr IPreviewHandlerFrame, pmsg: ptr MSG): HRESULT {.stdcall.}
  ITrayDeskBand* {.pure.} = object
    lpVtbl*: ptr ITrayDeskBandVtbl
  ITrayDeskBandVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ShowDeskBand*: proc(self: ptr ITrayDeskBand, clsid: REFCLSID): HRESULT {.stdcall.}
    HideDeskBand*: proc(self: ptr ITrayDeskBand, clsid: REFCLSID): HRESULT {.stdcall.}
    IsDeskBandShown*: proc(self: ptr ITrayDeskBand, clsid: REFCLSID): HRESULT {.stdcall.}
    DeskBandRegistrationChanged*: proc(self: ptr ITrayDeskBand): HRESULT {.stdcall.}
  IBandHost* {.pure.} = object
    lpVtbl*: ptr IBandHostVtbl
  IBandHostVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CreateBand*: proc(self: ptr IBandHost, rclsidBand: REFCLSID, fAvailable: WINBOOL, fVisible: WINBOOL, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    SetBandAvailability*: proc(self: ptr IBandHost, rclsidBand: REFCLSID, fAvailable: WINBOOL): HRESULT {.stdcall.}
    DestroyBand*: proc(self: ptr IBandHost, rclsidBand: REFCLSID): HRESULT {.stdcall.}
  IExplorerPaneVisibility* {.pure.} = object
    lpVtbl*: ptr IExplorerPaneVisibilityVtbl
  IExplorerPaneVisibilityVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetPaneState*: proc(self: ptr IExplorerPaneVisibility, ep: REFEXPLORERPANE, peps: ptr EXPLORERPANESTATE): HRESULT {.stdcall.}
  IContextMenuCB* {.pure.} = object
    lpVtbl*: ptr IContextMenuCBVtbl
  IContextMenuCBVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CallBack*: proc(self: ptr IContextMenuCB, psf: ptr IShellFolder, hwndOwner: HWND, pdtobj: ptr IDataObject, uMsg: UINT, wParam: WPARAM, lParam: LPARAM): HRESULT {.stdcall.}
  IDefaultExtractIconInit* {.pure.} = object
    lpVtbl*: ptr IDefaultExtractIconInitVtbl
  IDefaultExtractIconInitVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetFlags*: proc(self: ptr IDefaultExtractIconInit, uFlags: UINT): HRESULT {.stdcall.}
    SetKey*: proc(self: ptr IDefaultExtractIconInit, hkey: HKEY): HRESULT {.stdcall.}
    SetNormalIcon*: proc(self: ptr IDefaultExtractIconInit, pszFile: LPCWSTR, iIcon: int32): HRESULT {.stdcall.}
    SetOpenIcon*: proc(self: ptr IDefaultExtractIconInit, pszFile: LPCWSTR, iIcon: int32): HRESULT {.stdcall.}
    SetShortcutIcon*: proc(self: ptr IDefaultExtractIconInit, pszFile: LPCWSTR, iIcon: int32): HRESULT {.stdcall.}
    SetDefaultIcon*: proc(self: ptr IDefaultExtractIconInit, pszFile: LPCWSTR, iIcon: int32): HRESULT {.stdcall.}
  IExplorerCommand* {.pure.} = object
    lpVtbl*: ptr IExplorerCommandVtbl
  IExplorerCommandVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetTitle*: proc(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, ppszName: ptr LPWSTR): HRESULT {.stdcall.}
    GetIcon*: proc(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, ppszIcon: ptr LPWSTR): HRESULT {.stdcall.}
    GetToolTip*: proc(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, ppszInfotip: ptr LPWSTR): HRESULT {.stdcall.}
    GetCanonicalName*: proc(self: ptr IExplorerCommand, pguidCommandName: ptr GUID): HRESULT {.stdcall.}
    GetState*: proc(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, fOkToBeSlow: WINBOOL, pCmdState: ptr EXPCMDSTATE): HRESULT {.stdcall.}
    Invoke*: proc(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, pbc: ptr IBindCtx): HRESULT {.stdcall.}
    GetFlags*: proc(self: ptr IExplorerCommand, pFlags: ptr EXPCMDFLAGS): HRESULT {.stdcall.}
    EnumSubCommands*: proc(self: ptr IExplorerCommand, ppEnum: ptr ptr IEnumExplorerCommand): HRESULT {.stdcall.}
  IExplorerCommandState* {.pure.} = object
    lpVtbl*: ptr IExplorerCommandStateVtbl
  IExplorerCommandStateVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetState*: proc(self: ptr IExplorerCommandState, psiItemArray: ptr IShellItemArray, fOkToBeSlow: WINBOOL, pCmdState: ptr EXPCMDSTATE): HRESULT {.stdcall.}
  IInitializeCommand* {.pure.} = object
    lpVtbl*: ptr IInitializeCommandVtbl
  IInitializeCommandVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IInitializeCommand, pszCommandName: LPCWSTR, ppb: ptr IPropertyBag): HRESULT {.stdcall.}
  IEnumExplorerCommand* {.pure.} = object
    lpVtbl*: ptr IEnumExplorerCommandVtbl
  IEnumExplorerCommandVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumExplorerCommand, celt: ULONG, pUICommand: ptr ptr IExplorerCommand, pceltFetched: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumExplorerCommand, celt: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumExplorerCommand): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumExplorerCommand, ppenum: ptr ptr IEnumExplorerCommand): HRESULT {.stdcall.}
  IExplorerCommandProvider* {.pure.} = object
    lpVtbl*: ptr IExplorerCommandProviderVtbl
  IExplorerCommandProviderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCommands*: proc(self: ptr IExplorerCommandProvider, punkSite: ptr IUnknown, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetCommand*: proc(self: ptr IExplorerCommandProvider, rguidCommandId: REFGUID, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IInitializeNetworkFolder* {.pure.} = object
    lpVtbl*: ptr IInitializeNetworkFolderVtbl
  IInitializeNetworkFolderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IInitializeNetworkFolder, pidl: PCIDLIST_ABSOLUTE, pidlTarget: PCIDLIST_ABSOLUTE, uDisplayType: UINT, pszResName: LPCWSTR, pszProvider: LPCWSTR): HRESULT {.stdcall.}
  IOpenControlPanel* {.pure.} = object
    lpVtbl*: ptr IOpenControlPanelVtbl
  IOpenControlPanelVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Open*: proc(self: ptr IOpenControlPanel, pszName: LPCWSTR, pszPage: LPCWSTR, punkSite: ptr IUnknown): HRESULT {.stdcall.}
    GetPath*: proc(self: ptr IOpenControlPanel, pszName: LPCWSTR, pszPath: LPWSTR, cchPath: UINT): HRESULT {.stdcall.}
    GetCurrentView*: proc(self: ptr IOpenControlPanel, pView: ptr int32): HRESULT {.stdcall.}
  IComputerInfoChangeNotify* {.pure.} = object
    lpVtbl*: ptr IComputerInfoChangeNotifyVtbl
  IComputerInfoChangeNotifyVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ComputerInfoChanged*: proc(self: ptr IComputerInfoChangeNotify): HRESULT {.stdcall.}
  IFileSystemBindData2* {.pure.} = object
    lpVtbl*: ptr IFileSystemBindData2Vtbl
  IFileSystemBindData2Vtbl* {.pure, inheritable.} = object of IFileSystemBindDataVtbl
    SetFileID*: proc(self: ptr IFileSystemBindData2, liFileID: LARGE_INTEGER): HRESULT {.stdcall.}
    GetFileID*: proc(self: ptr IFileSystemBindData2, pliFileID: ptr LARGE_INTEGER): HRESULT {.stdcall.}
    SetJunctionCLSID*: proc(self: ptr IFileSystemBindData2, clsid: REFCLSID): HRESULT {.stdcall.}
    GetJunctionCLSID*: proc(self: ptr IFileSystemBindData2, pclsid: ptr CLSID): HRESULT {.stdcall.}
  ICustomDestinationList* {.pure.} = object
    lpVtbl*: ptr ICustomDestinationListVtbl
  ICustomDestinationListVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetAppID*: proc(self: ptr ICustomDestinationList, pszAppID: LPCWSTR): HRESULT {.stdcall.}
    BeginList*: proc(self: ptr ICustomDestinationList, pcMinSlots: ptr UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    AppendCategory*: proc(self: ptr ICustomDestinationList, pszCategory: LPCWSTR, poa: ptr IObjectArray): HRESULT {.stdcall.}
    AppendKnownCategory*: proc(self: ptr ICustomDestinationList, category: int32): HRESULT {.stdcall.}
    AddUserTasks*: proc(self: ptr ICustomDestinationList, poa: ptr IObjectArray): HRESULT {.stdcall.}
    CommitList*: proc(self: ptr ICustomDestinationList): HRESULT {.stdcall.}
    GetRemovedDestinations*: proc(self: ptr ICustomDestinationList, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    DeleteList*: proc(self: ptr ICustomDestinationList, pszAppID: LPCWSTR): HRESULT {.stdcall.}
    AbortList*: proc(self: ptr ICustomDestinationList): HRESULT {.stdcall.}
  IApplicationDestinations* {.pure.} = object
    lpVtbl*: ptr IApplicationDestinationsVtbl
  IApplicationDestinationsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetAppID*: proc(self: ptr IApplicationDestinations, pszAppID: LPCWSTR): HRESULT {.stdcall.}
    RemoveDestination*: proc(self: ptr IApplicationDestinations, punk: ptr IUnknown): HRESULT {.stdcall.}
    RemoveAllDestinations*: proc(self: ptr IApplicationDestinations): HRESULT {.stdcall.}
  IApplicationDocumentLists* {.pure.} = object
    lpVtbl*: ptr IApplicationDocumentListsVtbl
  IApplicationDocumentListsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetAppID*: proc(self: ptr IApplicationDocumentLists, pszAppID: LPCWSTR): HRESULT {.stdcall.}
    GetList*: proc(self: ptr IApplicationDocumentLists, listtype: int32, cItemsDesired: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IObjectWithAppUserModelID* {.pure.} = object
    lpVtbl*: ptr IObjectWithAppUserModelIDVtbl
  IObjectWithAppUserModelIDVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetAppID*: proc(self: ptr IObjectWithAppUserModelID, pszAppID: LPCWSTR): HRESULT {.stdcall.}
    GetAppID*: proc(self: ptr IObjectWithAppUserModelID, ppszAppID: ptr LPWSTR): HRESULT {.stdcall.}
  IObjectWithProgID* {.pure.} = object
    lpVtbl*: ptr IObjectWithProgIDVtbl
  IObjectWithProgIDVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetProgID*: proc(self: ptr IObjectWithProgID, pszProgID: LPCWSTR): HRESULT {.stdcall.}
    GetProgID*: proc(self: ptr IObjectWithProgID, ppszProgID: ptr LPWSTR): HRESULT {.stdcall.}
  IUpdateIDList* {.pure.} = object
    lpVtbl*: ptr IUpdateIDListVtbl
  IUpdateIDListVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Update*: proc(self: ptr IUpdateIDList, pbc: ptr IBindCtx, pidlIn: PCUITEMID_CHILD, ppidlOut: ptr PITEMID_CHILD): HRESULT {.stdcall.}
  IDesktopGadget* {.pure.} = object
    lpVtbl*: ptr IDesktopGadgetVtbl
  IDesktopGadgetVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    RunGadget*: proc(self: ptr IDesktopGadget, gadgetPath: LPCWSTR): HRESULT {.stdcall.}
  IDesktopWallpaper* {.pure.} = object
    lpVtbl*: ptr IDesktopWallpaperVtbl
  IDesktopWallpaperVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetWallpaper*: proc(self: ptr IDesktopWallpaper, monitorID: LPCWSTR, wallpaper: LPCWSTR): HRESULT {.stdcall.}
    GetWallpaper*: proc(self: ptr IDesktopWallpaper, monitorID: LPCWSTR, wallpaper: ptr LPWSTR): HRESULT {.stdcall.}
    GetMonitorDevicePathAt*: proc(self: ptr IDesktopWallpaper, monitorIndex: UINT, monitorID: ptr LPWSTR): HRESULT {.stdcall.}
    GetMonitorDevicePathCount*: proc(self: ptr IDesktopWallpaper, count: ptr UINT): HRESULT {.stdcall.}
    GetMonitorRECT*: proc(self: ptr IDesktopWallpaper, monitorID: LPCWSTR, displayRect: ptr RECT): HRESULT {.stdcall.}
    SetBackgroundColor*: proc(self: ptr IDesktopWallpaper, color: COLORREF): HRESULT {.stdcall.}
    GetBackgroundColor*: proc(self: ptr IDesktopWallpaper, color: ptr COLORREF): HRESULT {.stdcall.}
    SetPosition*: proc(self: ptr IDesktopWallpaper, position: int32): HRESULT {.stdcall.}
    GetPosition*: proc(self: ptr IDesktopWallpaper, position: ptr int32): HRESULT {.stdcall.}
    SetSlideshow*: proc(self: ptr IDesktopWallpaper, items: ptr IShellItemArray): HRESULT {.stdcall.}
    GetSlideshow*: proc(self: ptr IDesktopWallpaper, items: ptr ptr IShellItemArray): HRESULT {.stdcall.}
    SetSlideshowOptions*: proc(self: ptr IDesktopWallpaper, options: int32, slideshowTick: UINT): HRESULT {.stdcall.}
    GetSlideshowOptions*: proc(self: ptr IDesktopWallpaper, options: ptr int32, slideshowTick: ptr UINT): HRESULT {.stdcall.}
    AdvanceSlideshow*: proc(self: ptr IDesktopWallpaper, monitorID: LPCWSTR, direction: int32): HRESULT {.stdcall.}
    GetStatus*: proc(self: ptr IDesktopWallpaper, state: ptr int32): HRESULT {.stdcall.}
    Enable*: proc(self: ptr IDesktopWallpaper, enable: WINBOOL): HRESULT {.stdcall.}
  IHomeGroup* {.pure.} = object
    lpVtbl*: ptr IHomeGroupVtbl
  IHomeGroupVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    IsMember*: proc(self: ptr IHomeGroup, member: ptr WINBOOL): HRESULT {.stdcall.}
    ShowSharingWizard*: proc(self: ptr IHomeGroup, owner: HWND, sharingchoices: ptr int32): HRESULT {.stdcall.}
  IInitializeWithPropertyStore* {.pure.} = object
    lpVtbl*: ptr IInitializeWithPropertyStoreVtbl
  IInitializeWithPropertyStoreVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IInitializeWithPropertyStore, pps: ptr IPropertyStore): HRESULT {.stdcall.}
  IOpenSearchSource* {.pure.} = object
    lpVtbl*: ptr IOpenSearchSourceVtbl
  IOpenSearchSourceVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetResults*: proc(self: ptr IOpenSearchSource, hwnd: HWND, pszQuery: LPCWSTR, dwStartIndex: DWORD, dwCount: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IShellLibrary* {.pure.} = object
    lpVtbl*: ptr IShellLibraryVtbl
  IShellLibraryVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    LoadLibraryFromItem*: proc(self: ptr IShellLibrary, psiLibrary: ptr IShellItem, grfMode: DWORD): HRESULT {.stdcall.}
    LoadLibraryFromKnownFolder*: proc(self: ptr IShellLibrary, kfidLibrary: REFKNOWNFOLDERID, grfMode: DWORD): HRESULT {.stdcall.}
    AddFolder*: proc(self: ptr IShellLibrary, psiLocation: ptr IShellItem): HRESULT {.stdcall.}
    RemoveFolder*: proc(self: ptr IShellLibrary, psiLocation: ptr IShellItem): HRESULT {.stdcall.}
    GetFolders*: proc(self: ptr IShellLibrary, lff: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    ResolveFolder*: proc(self: ptr IShellLibrary, psiFolderToResolve: ptr IShellItem, dwTimeout: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetDefaultSaveFolder*: proc(self: ptr IShellLibrary, dsft: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    SetDefaultSaveFolder*: proc(self: ptr IShellLibrary, dsft: int32, psi: ptr IShellItem): HRESULT {.stdcall.}
    GetOptions*: proc(self: ptr IShellLibrary, plofOptions: ptr int32): HRESULT {.stdcall.}
    SetOptions*: proc(self: ptr IShellLibrary, lofMask: int32, lofOptions: int32): HRESULT {.stdcall.}
    GetFolderType*: proc(self: ptr IShellLibrary, pftid: ptr FOLDERTYPEID): HRESULT {.stdcall.}
    SetFolderType*: proc(self: ptr IShellLibrary, ftid: REFFOLDERTYPEID): HRESULT {.stdcall.}
    GetIcon*: proc(self: ptr IShellLibrary, ppszIcon: ptr LPWSTR): HRESULT {.stdcall.}
    SetIcon*: proc(self: ptr IShellLibrary, pszIcon: LPCWSTR): HRESULT {.stdcall.}
    Commit*: proc(self: ptr IShellLibrary): HRESULT {.stdcall.}
    Save*: proc(self: ptr IShellLibrary, psiFolderToSaveIn: ptr IShellItem, pszLibraryName: LPCWSTR, lsf: int32, ppsiSavedTo: ptr ptr IShellItem): HRESULT {.stdcall.}
    SaveInKnownFolder*: proc(self: ptr IShellLibrary, kfidToSaveIn: REFKNOWNFOLDERID, pszLibraryName: LPCWSTR, lsf: int32, ppsiSavedTo: ptr ptr IShellItem): HRESULT {.stdcall.}
  IPlaybackManagerEvents* {.pure.} = object
    lpVtbl*: ptr IPlaybackManagerEventsVtbl
  IPlaybackManagerEventsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnPlaybackManagerEvent*: proc(self: ptr IPlaybackManagerEvents, dwSessionId: DWORD, mediaEvent: int32): HRESULT {.stdcall.}
  IPlaybackManager* {.pure.} = object
    lpVtbl*: ptr IPlaybackManagerVtbl
  IPlaybackManagerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Advise*: proc(self: ptr IPlaybackManager, typ: int32, pEvents: ptr IPlaybackManagerEvents, pdwSessionId: ptr DWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr IPlaybackManager, dwSessionId: DWORD): HRESULT {.stdcall.}
    ChangeSessionState*: proc(self: ptr IPlaybackManager, dwSessionId: DWORD, state: int32, mute: int32): HRESULT {.stdcall.}
  IDefaultFolderMenuInitialize* {.pure.} = object
    lpVtbl*: ptr IDefaultFolderMenuInitializeVtbl
  IDefaultFolderMenuInitializeVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IDefaultFolderMenuInitialize, hwnd: HWND, pcmcb: ptr IContextMenuCB, pidlFolder: PCIDLIST_ABSOLUTE, psf: ptr IShellFolder, cidl: UINT, apidl: PCUITEMID_CHILD_ARRAY, punkAssociation: ptr IUnknown, cKeys: UINT, aKeys: ptr HKEY): HRESULT {.stdcall.}
    SetMenuRestrictions*: proc(self: ptr IDefaultFolderMenuInitialize, dfmrValues: int32): HRESULT {.stdcall.}
    GetMenuRestrictions*: proc(self: ptr IDefaultFolderMenuInitialize, dfmrMask: int32, pdfmrValues: ptr int32): HRESULT {.stdcall.}
    SetHandlerClsid*: proc(self: ptr IDefaultFolderMenuInitialize, rclsid: REFCLSID): HRESULT {.stdcall.}
  IApplicationActivationManager* {.pure.} = object
    lpVtbl*: ptr IApplicationActivationManagerVtbl
  IApplicationActivationManagerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ActivateApplication*: proc(self: ptr IApplicationActivationManager, appUserModelId: LPCWSTR, arguments: LPCWSTR, options: int32, processId: ptr DWORD): HRESULT {.stdcall.}
    ActivateForFile*: proc(self: ptr IApplicationActivationManager, appUserModelId: LPCWSTR, itemArray: ptr IShellItemArray, verb: LPCWSTR, processId: ptr DWORD): HRESULT {.stdcall.}
    ActivateForProtocol*: proc(self: ptr IApplicationActivationManager, appUserModelId: LPCWSTR, itemArray: ptr IShellItemArray, processId: ptr DWORD): HRESULT {.stdcall.}
  IAssocHandlerInvoker* {.pure.} = object
    lpVtbl*: ptr IAssocHandlerInvokerVtbl
  IAssocHandlerInvokerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SupportsSelection*: proc(self: ptr IAssocHandlerInvoker): HRESULT {.stdcall.}
    Invoke*: proc(self: ptr IAssocHandlerInvoker): HRESULT {.stdcall.}
  IAssocHandler* {.pure.} = object
    lpVtbl*: ptr IAssocHandlerVtbl
  IAssocHandlerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetName*: proc(self: ptr IAssocHandler, ppsz: ptr LPWSTR): HRESULT {.stdcall.}
    GetUIName*: proc(self: ptr IAssocHandler, ppsz: ptr LPWSTR): HRESULT {.stdcall.}
    GetIconLocation*: proc(self: ptr IAssocHandler, ppszPath: ptr LPWSTR, pIndex: ptr int32): HRESULT {.stdcall.}
    IsRecommended*: proc(self: ptr IAssocHandler): HRESULT {.stdcall.}
    MakeDefault*: proc(self: ptr IAssocHandler, pszDescription: LPCWSTR): HRESULT {.stdcall.}
    Invoke*: proc(self: ptr IAssocHandler, pdo: ptr IDataObject): HRESULT {.stdcall.}
    CreateInvoker*: proc(self: ptr IAssocHandler, pdo: ptr IDataObject, ppInvoker: ptr ptr IAssocHandlerInvoker): HRESULT {.stdcall.}
  IEnumAssocHandlers* {.pure.} = object
    lpVtbl*: ptr IEnumAssocHandlersVtbl
  IEnumAssocHandlersVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumAssocHandlers, celt: ULONG, rgelt: ptr ptr IAssocHandler, pceltFetched: ptr ULONG): HRESULT {.stdcall.}
  IDataObjectProvider* {.pure.} = object
    lpVtbl*: ptr IDataObjectProviderVtbl
  IDataObjectProviderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetDataObject*: proc(self: ptr IDataObjectProvider, dataObject: ptr ptr IDataObject): HRESULT {.stdcall.}
    SetDataObject*: proc(self: ptr IDataObjectProvider, dataObject: ptr IDataObject): HRESULT {.stdcall.}
  IDataTransferManagerInterop* {.pure.} = object
    lpVtbl*: ptr IDataTransferManagerInteropVtbl
  IDataTransferManagerInteropVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetForWindow*: proc(self: ptr IDataTransferManagerInterop, appWindow: HWND, riid: REFIID, dataTransferManager: ptr pointer): HRESULT {.stdcall.}
    ShowShareUIForWindow*: proc(self: ptr IDataTransferManagerInterop, appWindow: HWND): HRESULT {.stdcall.}
  IFrameworkInputPaneHandler* {.pure.} = object
    lpVtbl*: ptr IFrameworkInputPaneHandlerVtbl
  IFrameworkInputPaneHandlerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Showing*: proc(self: ptr IFrameworkInputPaneHandler, prcInputPaneScreenLocation: ptr RECT, fEnsureFocusedElementInView: WINBOOL): HRESULT {.stdcall.}
    Hiding*: proc(self: ptr IFrameworkInputPaneHandler, fEnsureFocusedElementInView: WINBOOL): HRESULT {.stdcall.}
  IFrameworkInputPane* {.pure.} = object
    lpVtbl*: ptr IFrameworkInputPaneVtbl
  IFrameworkInputPaneVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Advise*: proc(self: ptr IFrameworkInputPane, pWindow: ptr IUnknown, pHandler: ptr IFrameworkInputPaneHandler, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    AdviseWithHWND*: proc(self: ptr IFrameworkInputPane, hwnd: HWND, pHandler: ptr IFrameworkInputPaneHandler, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr IFrameworkInputPane, dwCookie: DWORD): HRESULT {.stdcall.}
    Location*: proc(self: ptr IFrameworkInputPane, prcInputPaneScreenLocation: ptr RECT): HRESULT {.stdcall.}
  ISearchableApplication* {.pure.} = object
    lpVtbl*: ptr ISearchableApplicationVtbl
  ISearchableApplicationVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetSearchWindow*: proc(self: ptr ISearchableApplication, hwnd: ptr HWND): HRESULT {.stdcall.}
  IAccessibilityDockingServiceCallback* {.pure.} = object
    lpVtbl*: ptr IAccessibilityDockingServiceCallbackVtbl
  IAccessibilityDockingServiceCallbackVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Undocked*: proc(self: ptr IAccessibilityDockingServiceCallback, undockReason: int32): HRESULT {.stdcall.}
  IAccessibilityDockingService* {.pure.} = object
    lpVtbl*: ptr IAccessibilityDockingServiceVtbl
  IAccessibilityDockingServiceVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetAvailableSize*: proc(self: ptr IAccessibilityDockingService, hMonitor: HMONITOR, pcxFixed: ptr UINT, pcyMax: ptr UINT): HRESULT {.stdcall.}
    DockWindow*: proc(self: ptr IAccessibilityDockingService, hwnd: HWND, hMonitor: HMONITOR, cyRequested: UINT, pCallback: ptr IAccessibilityDockingServiceCallback): HRESULT {.stdcall.}
    UndockWindow*: proc(self: ptr IAccessibilityDockingService, hwnd: HWND): HRESULT {.stdcall.}
  IAppVisibilityEvents* {.pure.} = object
    lpVtbl*: ptr IAppVisibilityEventsVtbl
  IAppVisibilityEventsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AppVisibilityOnMonitorChanged*: proc(self: ptr IAppVisibilityEvents, hMonitor: HMONITOR, previousMode: int32, currentMode: int32): HRESULT {.stdcall.}
    LauncherVisibilityChange*: proc(self: ptr IAppVisibilityEvents, currentVisibleState: WINBOOL): HRESULT {.stdcall.}
  IAppVisibility* {.pure.} = object
    lpVtbl*: ptr IAppVisibilityVtbl
  IAppVisibilityVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetAppVisibilityOnMonitor*: proc(self: ptr IAppVisibility, hMonitor: HMONITOR, pMode: ptr int32): HRESULT {.stdcall.}
    IsLauncherVisible*: proc(self: ptr IAppVisibility, pfVisible: ptr WINBOOL): HRESULT {.stdcall.}
    Advise*: proc(self: ptr IAppVisibility, pCallback: ptr IAppVisibilityEvents, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr IAppVisibility, dwCookie: DWORD): HRESULT {.stdcall.}
  IPackageExecutionStateChangeNotification* {.pure.} = object
    lpVtbl*: ptr IPackageExecutionStateChangeNotificationVtbl
  IPackageExecutionStateChangeNotificationVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnStateChanged*: proc(self: ptr IPackageExecutionStateChangeNotification, pszPackageFullName: LPCWSTR, pesNewState: int32): HRESULT {.stdcall.}
  IPackageDebugSettings* {.pure.} = object
    lpVtbl*: ptr IPackageDebugSettingsVtbl
  IPackageDebugSettingsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    EnableDebugging*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, debuggerCommandLine: LPCWSTR, environment: PZZWSTR): HRESULT {.stdcall.}
    DisableDebugging*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.stdcall.}
    Suspend*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.stdcall.}
    Resume*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.stdcall.}
    TerminateAllProcesses*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.stdcall.}
    SetTargetSessionId*: proc(self: ptr IPackageDebugSettings, sessionId: ULONG): HRESULT {.stdcall.}
    EnumerateBackgroundTasks*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, taskCount: ptr ULONG, taskIds: ptr LPCGUID, taskNames: ptr ptr LPCWSTR): HRESULT {.stdcall.}
    ActivateBackgroundTask*: proc(self: ptr IPackageDebugSettings, taskId: LPCGUID): HRESULT {.stdcall.}
    StartServicing*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.stdcall.}
    StopServicing*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.stdcall.}
    StartSessionRedirection*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, sessionId: ULONG): HRESULT {.stdcall.}
    StopSessionRedirection*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.stdcall.}
    GetPackageExecutionState*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, packageExecutionState: ptr int32): HRESULT {.stdcall.}
    RegisterForPackageStateChanges*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, pPackageExecutionStateChangeNotification: ptr IPackageExecutionStateChangeNotification, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    UnregisterForPackageStateChanges*: proc(self: ptr IPackageDebugSettings, dwCookie: DWORD): HRESULT {.stdcall.}
  IExecuteCommandApplicationHostEnvironment* {.pure.} = object
    lpVtbl*: ptr IExecuteCommandApplicationHostEnvironmentVtbl
  IExecuteCommandApplicationHostEnvironmentVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetValue*: proc(self: ptr IExecuteCommandApplicationHostEnvironment, pahe: ptr int32): HRESULT {.stdcall.}
  IExecuteCommandHost* {.pure.} = object
    lpVtbl*: ptr IExecuteCommandHostVtbl
  IExecuteCommandHostVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetUIMode*: proc(self: ptr IExecuteCommandHost, pUIMode: ptr int32): HRESULT {.stdcall.}
  IApplicationDesignModeSettings* {.pure.} = object
    lpVtbl*: ptr IApplicationDesignModeSettingsVtbl
  IApplicationDesignModeSettingsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetNativeDisplaySize*: proc(self: ptr IApplicationDesignModeSettings, sizeNativeDisplay: SIZE): HRESULT {.stdcall.}
    SetScaleFactor*: proc(self: ptr IApplicationDesignModeSettings, scaleFactor: int32): HRESULT {.stdcall.}
    SetApplicationViewState*: proc(self: ptr IApplicationDesignModeSettings, viewState: int32): HRESULT {.stdcall.}
    ComputeApplicationSize*: proc(self: ptr IApplicationDesignModeSettings, psizeApplication: ptr SIZE): HRESULT {.stdcall.}
    IsApplicationViewStateSupported*: proc(self: ptr IApplicationDesignModeSettings, viewState: int32, sizeNativeDisplay: SIZE, scaleFactor: int32, pfSupported: ptr WINBOOL): HRESULT {.stdcall.}
    TriggerEdgeGesture*: proc(self: ptr IApplicationDesignModeSettings, edgeGestureKind: int32): HRESULT {.stdcall.}
  IInitializeWithWindow* {.pure.} = object
    lpVtbl*: ptr IInitializeWithWindowVtbl
  IInitializeWithWindowVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IInitializeWithWindow, hwnd: HWND): HRESULT {.stdcall.}
  IHandlerInfo* {.pure.} = object
    lpVtbl*: ptr IHandlerInfoVtbl
  IHandlerInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetApplicationDisplayName*: proc(self: ptr IHandlerInfo, value: ptr LPWSTR): HRESULT {.stdcall.}
    GetApplicationPublisher*: proc(self: ptr IHandlerInfo, value: ptr LPWSTR): HRESULT {.stdcall.}
    GetApplicationIconReference*: proc(self: ptr IHandlerInfo, value: ptr LPWSTR): HRESULT {.stdcall.}
  IHandlerActivationHost* {.pure.} = object
    lpVtbl*: ptr IHandlerActivationHostVtbl
  IHandlerActivationHostVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    BeforeCoCreateInstance*: proc(self: ptr IHandlerActivationHost, clsidHandler: REFCLSID, itemsBeingActivated: ptr IShellItemArray, handlerInfo: ptr IHandlerInfo): HRESULT {.stdcall.}
    BeforeCreateProcess*: proc(self: ptr IHandlerActivationHost, applicationPath: LPCWSTR, commandLine: LPCWSTR, handlerInfo: ptr IHandlerInfo): HRESULT {.stdcall.}

converter winim_converter_IContextMenu3*(x: ptr IContextMenu3): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IContextMenu3*(x: ptr IContextMenu3): ptr IContextMenu = cast[ptr IContextMenu](x)
converter winim_converter_IContextMenu3*(x: ptr IContextMenu3): ptr IContextMenu2 = cast[ptr IContextMenu2](x)
proc HandleMenuMsg2*(self: ptr IContextMenu3, uMsg: UINT, wParam: WPARAM, lParam: LPARAM, plResult: ptr LRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.HandleMenuMsg2(self, uMsg, wParam, lParam, plResult)
converter winim_converter_IExecuteCommand*(x: ptr IExecuteCommand): ptr IUnknown = cast[ptr IUnknown](x)
proc SetKeyState*(self: ptr IExecuteCommand, grfKeyState: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetKeyState(self, grfKeyState)
proc SetParameters*(self: ptr IExecuteCommand, pszParameters: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetParameters(self, pszParameters)
proc SetPosition*(self: ptr IExecuteCommand, pt: POINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetPosition(self, pt)
proc SetShowWindow*(self: ptr IExecuteCommand, nShow: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetShowWindow(self, nShow)
proc SetNoShowUI*(self: ptr IExecuteCommand, fNoShowUI: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetNoShowUI(self, fNoShowUI)
proc SetDirectory*(self: ptr IExecuteCommand, pszDirectory: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetDirectory(self, pszDirectory)
proc Execute*(self: ptr IExecuteCommand): HRESULT {.inline, discardable.} = self.lpVtbl.Execute(self)
converter winim_converter_IRunnableTask*(x: ptr IRunnableTask): ptr IUnknown = cast[ptr IUnknown](x)
proc Run*(self: ptr IRunnableTask): HRESULT {.inline, discardable.} = self.lpVtbl.Run(self)
proc Kill*(self: ptr IRunnableTask, bWait: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Kill(self, bWait)
proc Suspend*(self: ptr IRunnableTask): HRESULT {.inline, discardable.} = self.lpVtbl.Suspend(self)
proc Resume*(self: ptr IRunnableTask): HRESULT {.inline, discardable.} = self.lpVtbl.Resume(self)
proc IsRunning*(self: ptr IRunnableTask): ULONG {.inline, discardable.} = self.lpVtbl.IsRunning(self)
converter winim_converter_IShellTaskScheduler*(x: ptr IShellTaskScheduler): ptr IUnknown = cast[ptr IUnknown](x)
proc AddTask*(self: ptr IShellTaskScheduler, prt: ptr IRunnableTask, rtoid: REFTASKOWNERID, lParam: DWORD_PTR, dwPriority: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.AddTask(self, prt, rtoid, lParam, dwPriority)
proc RemoveTasks*(self: ptr IShellTaskScheduler, rtoid: REFTASKOWNERID, lParam: DWORD_PTR, bWaitIfRunning: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveTasks(self, rtoid, lParam, bWaitIfRunning)
proc CountTasks*(self: ptr IShellTaskScheduler, rtoid: REFTASKOWNERID): UINT {.inline, discardable.} = self.lpVtbl.CountTasks(self, rtoid)
proc Status*(self: ptr IShellTaskScheduler, dwReleaseStatus: DWORD, dwThreadTimeout: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Status(self, dwReleaseStatus, dwThreadTimeout)
converter winim_converter_IQueryCodePage*(x: ptr IQueryCodePage): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCodePage*(self: ptr IQueryCodePage, puiCodePage: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCodePage(self, puiCodePage)
proc SetCodePage*(self: ptr IQueryCodePage, uiCodePage: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetCodePage(self, uiCodePage)
converter winim_converter_IPersistIDList*(x: ptr IPersistIDList): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistIDList*(x: ptr IPersistIDList): ptr IPersist = cast[ptr IPersist](x)
proc SetIDList*(self: ptr IPersistIDList, pidl: PCIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.SetIDList(self, pidl)
proc GetIDList*(self: ptr IPersistIDList, ppidl: ptr PIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.GetIDList(self, ppidl)
converter winim_converter_IEnumFullIDList*(x: ptr IEnumFullIDList): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumFullIDList, celt: ULONG, rgelt: ptr PIDLIST_ABSOLUTE, pceltFetched: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, celt, rgelt, pceltFetched)
proc Skip*(self: ptr IEnumFullIDList, celt: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, celt)
proc Reset*(self: ptr IEnumFullIDList): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumFullIDList, ppenum: ptr ptr IEnumFullIDList): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, ppenum)
converter winim_converter_IObjectWithFolderEnumMode*(x: ptr IObjectWithFolderEnumMode): ptr IUnknown = cast[ptr IUnknown](x)
proc SetMode*(self: ptr IObjectWithFolderEnumMode, feMode: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetMode(self, feMode)
proc GetMode*(self: ptr IObjectWithFolderEnumMode, pfeMode: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetMode(self, pfeMode)
converter winim_converter_IParseAndCreateItem*(x: ptr IParseAndCreateItem): ptr IUnknown = cast[ptr IUnknown](x)
proc SetItem*(self: ptr IParseAndCreateItem, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.SetItem(self, psi)
proc GetItem*(self: ptr IParseAndCreateItem, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetItem(self, riid, ppv)
converter winim_converter_IFolderViewOptions*(x: ptr IFolderViewOptions): ptr IUnknown = cast[ptr IUnknown](x)
proc SetFolderViewOptions*(self: ptr IFolderViewOptions, fvoMask: int32, fvoFlags: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetFolderViewOptions(self, fvoMask, fvoFlags)
proc GetFolderViewOptions*(self: ptr IFolderViewOptions, pfvoFlags: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolderViewOptions(self, pfvoFlags)
converter winim_converter_IShellView3*(x: ptr IShellView3): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IShellView3*(x: ptr IShellView3): ptr IShellView = cast[ptr IShellView](x)
converter winim_converter_IShellView3*(x: ptr IShellView3): ptr IShellView2 = cast[ptr IShellView2](x)
proc CreateViewWindow3*(self: ptr IShellView3, psbOwner: ptr IShellBrowser, psvPrev: ptr IShellView, dwViewFlags: SV3CVW3_FLAGS, dwMask: int32, dwFlags: int32, fvMode: int32, pvid: ptr SHELLVIEWID, prcView: ptr RECT, phwndView: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.CreateViewWindow3(self, psbOwner, psvPrev, dwViewFlags, dwMask, dwFlags, fvMode, pvid, prcView, phwndView)
converter winim_converter_IFolderView*(x: ptr IFolderView): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCurrentViewMode*(self: ptr IFolderView, pViewMode: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurrentViewMode(self, pViewMode)
proc SetCurrentViewMode*(self: ptr IFolderView, ViewMode: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetCurrentViewMode(self, ViewMode)
proc GetFolder*(self: ptr IFolderView, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolder(self, riid, ppv)
proc Item*(self: ptr IFolderView, iItemIndex: int32, ppidl: ptr PITEMID_CHILD): HRESULT {.inline, discardable.} = self.lpVtbl.Item(self, iItemIndex, ppidl)
proc ItemCount*(self: ptr IFolderView, uFlags: UINT, pcItems: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.ItemCount(self, uFlags, pcItems)
proc Items*(self: ptr IFolderView, uFlags: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.Items(self, uFlags, riid, ppv)
proc GetSelectionMarkedItem*(self: ptr IFolderView, piItem: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetSelectionMarkedItem(self, piItem)
proc GetFocusedItem*(self: ptr IFolderView, piItem: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetFocusedItem(self, piItem)
proc GetItemPosition*(self: ptr IFolderView, pidl: PCUITEMID_CHILD, ppt: ptr POINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemPosition(self, pidl, ppt)
proc GetSpacing*(self: ptr IFolderView, ppt: ptr POINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetSpacing(self, ppt)
proc GetDefaultSpacing*(self: ptr IFolderView, ppt: ptr POINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultSpacing(self, ppt)
proc GetAutoArrange*(self: ptr IFolderView): HRESULT {.inline, discardable.} = self.lpVtbl.GetAutoArrange(self)
proc SelectItem*(self: ptr IFolderView, iItem: int32, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SelectItem(self, iItem, dwFlags)
proc SelectAndPositionItems*(self: ptr IFolderView, cidl: UINT, apidl: PCUITEMID_CHILD_ARRAY, apt: ptr POINT, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SelectAndPositionItems(self, cidl, apidl, apt, dwFlags)
converter winim_converter_ISearchBoxInfo*(x: ptr ISearchBoxInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCondition*(self: ptr ISearchBoxInfo, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetCondition(self, riid, ppv)
proc GetText*(self: ptr ISearchBoxInfo, ppsz: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetText(self, ppsz)
converter winim_converter_IFolderView2*(x: ptr IFolderView2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IFolderView2*(x: ptr IFolderView2): ptr IFolderView = cast[ptr IFolderView](x)
proc SetGroupBy*(self: ptr IFolderView2, key: REFPROPERTYKEY, fAscending: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetGroupBy(self, key, fAscending)
proc GetGroupBy*(self: ptr IFolderView2, pkey: ptr PROPERTYKEY, pfAscending: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetGroupBy(self, pkey, pfAscending)
proc SetViewProperty*(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, propkey: REFPROPERTYKEY, propvar: REFPROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.SetViewProperty(self, pidl, propkey, propvar)
proc GetViewProperty*(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, propkey: REFPROPERTYKEY, ppropvar: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetViewProperty(self, pidl, propkey, ppropvar)
proc SetTileViewProperties*(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, pszPropList: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetTileViewProperties(self, pidl, pszPropList)
proc SetExtendedTileViewProperties*(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, pszPropList: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetExtendedTileViewProperties(self, pidl, pszPropList)
proc SetText*(self: ptr IFolderView2, iType: int32, pwszText: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetText(self, iType, pwszText)
proc SetCurrentFolderFlags*(self: ptr IFolderView2, dwMask: DWORD, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetCurrentFolderFlags(self, dwMask, dwFlags)
proc GetCurrentFolderFlags*(self: ptr IFolderView2, pdwFlags: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurrentFolderFlags(self, pdwFlags)
proc GetSortColumnCount*(self: ptr IFolderView2, pcColumns: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetSortColumnCount(self, pcColumns)
proc SetSortColumns*(self: ptr IFolderView2, rgSortColumns: ptr SORTCOLUMN, cColumns: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetSortColumns(self, rgSortColumns, cColumns)
proc GetSortColumns*(self: ptr IFolderView2, rgSortColumns: ptr SORTCOLUMN, cColumns: int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetSortColumns(self, rgSortColumns, cColumns)
proc GetItem*(self: ptr IFolderView2, iItem: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetItem(self, iItem, riid, ppv)
proc GetVisibleItem*(self: ptr IFolderView2, iStart: int32, fPrevious: WINBOOL, piItem: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetVisibleItem(self, iStart, fPrevious, piItem)
proc GetSelectedItem*(self: ptr IFolderView2, iStart: int32, piItem: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetSelectedItem(self, iStart, piItem)
proc GetSelection*(self: ptr IFolderView2, fNoneImpliesFolder: WINBOOL, ppsia: ptr ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.GetSelection(self, fNoneImpliesFolder, ppsia)
proc GetSelectionState*(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, pdwFlags: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetSelectionState(self, pidl, pdwFlags)
proc InvokeVerbOnSelection*(self: ptr IFolderView2, pszVerb: LPCSTR): HRESULT {.inline, discardable.} = self.lpVtbl.InvokeVerbOnSelection(self, pszVerb)
proc SetViewModeAndIconSize*(self: ptr IFolderView2, uViewMode: int32, iImageSize: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetViewModeAndIconSize(self, uViewMode, iImageSize)
proc GetViewModeAndIconSize*(self: ptr IFolderView2, puViewMode: ptr int32, piImageSize: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetViewModeAndIconSize(self, puViewMode, piImageSize)
proc SetGroupSubsetCount*(self: ptr IFolderView2, cVisibleRows: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetGroupSubsetCount(self, cVisibleRows)
proc GetGroupSubsetCount*(self: ptr IFolderView2, pcVisibleRows: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetGroupSubsetCount(self, pcVisibleRows)
proc SetRedraw*(self: ptr IFolderView2, fRedrawOn: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetRedraw(self, fRedrawOn)
proc IsMoveInSameFolder*(self: ptr IFolderView2): HRESULT {.inline, discardable.} = self.lpVtbl.IsMoveInSameFolder(self)
proc DoRename*(self: ptr IFolderView2): HRESULT {.inline, discardable.} = self.lpVtbl.DoRename(self)
converter winim_converter_IFolderViewSettings*(x: ptr IFolderViewSettings): ptr IUnknown = cast[ptr IUnknown](x)
proc GetColumnPropertyList*(self: ptr IFolderViewSettings, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetColumnPropertyList(self, riid, ppv)
proc GetGroupByProperty*(self: ptr IFolderViewSettings, pkey: ptr PROPERTYKEY, pfGroupAscending: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetGroupByProperty(self, pkey, pfGroupAscending)
proc GetViewMode*(self: ptr IFolderViewSettings, plvm: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetViewMode(self, plvm)
proc GetIconSize*(self: ptr IFolderViewSettings, puIconSize: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetIconSize(self, puIconSize)
proc GetFolderFlags*(self: ptr IFolderViewSettings, pfolderMask: ptr int32, pfolderFlags: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolderFlags(self, pfolderMask, pfolderFlags)
proc GetSortColumns*(self: ptr IFolderViewSettings, rgSortColumns: ptr SORTCOLUMN, cColumnsIn: UINT, pcColumnsOut: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetSortColumns(self, rgSortColumns, cColumnsIn, pcColumnsOut)
proc GetGroupSubsetCount*(self: ptr IFolderViewSettings, pcVisibleRows: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetGroupSubsetCount(self, pcVisibleRows)
converter winim_converter_IPreviewHandlerVisuals*(x: ptr IPreviewHandlerVisuals): ptr IUnknown = cast[ptr IUnknown](x)
proc SetBackgroundColor*(self: ptr IPreviewHandlerVisuals, color: COLORREF): HRESULT {.inline, discardable.} = self.lpVtbl.SetBackgroundColor(self, color)
proc SetFont*(self: ptr IPreviewHandlerVisuals, plf: ptr LOGFONTW): HRESULT {.inline, discardable.} = self.lpVtbl.SetFont(self, plf)
proc SetTextColor*(self: ptr IPreviewHandlerVisuals, color: COLORREF): HRESULT {.inline, discardable.} = self.lpVtbl.SetTextColor(self, color)
converter winim_converter_IVisualProperties*(x: ptr IVisualProperties): ptr IUnknown = cast[ptr IUnknown](x)
proc SetWatermark*(self: ptr IVisualProperties, hbmp: HBITMAP, vpwf: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetWatermark(self, hbmp, vpwf)
proc SetColor*(self: ptr IVisualProperties, vpcf: int32, cr: COLORREF): HRESULT {.inline, discardable.} = self.lpVtbl.SetColor(self, vpcf, cr)
proc GetColor*(self: ptr IVisualProperties, vpcf: int32, pcr: ptr COLORREF): HRESULT {.inline, discardable.} = self.lpVtbl.GetColor(self, vpcf, pcr)
proc SetItemHeight*(self: ptr IVisualProperties, cyItemInPixels: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetItemHeight(self, cyItemInPixels)
proc GetItemHeight*(self: ptr IVisualProperties, cyItemInPixels: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemHeight(self, cyItemInPixels)
proc SetFont*(self: ptr IVisualProperties, plf: ptr LOGFONTW, bRedraw: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetFont(self, plf, bRedraw)
proc GetFont*(self: ptr IVisualProperties, plf: ptr LOGFONTW): HRESULT {.inline, discardable.} = self.lpVtbl.GetFont(self, plf)
proc SetTheme*(self: ptr IVisualProperties, pszSubAppName: LPCWSTR, pszSubIdList: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetTheme(self, pszSubAppName, pszSubIdList)
converter winim_converter_ICommDlgBrowser2*(x: ptr ICommDlgBrowser2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ICommDlgBrowser2*(x: ptr ICommDlgBrowser2): ptr ICommDlgBrowser = cast[ptr ICommDlgBrowser](x)
proc Notify*(self: ptr ICommDlgBrowser2, ppshv: ptr IShellView, dwNotifyType: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Notify(self, ppshv, dwNotifyType)
proc GetDefaultMenuText*(self: ptr ICommDlgBrowser2, ppshv: ptr IShellView, pszText: LPWSTR, cchMax: int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultMenuText(self, ppshv, pszText, cchMax)
proc GetViewFlags*(self: ptr ICommDlgBrowser2, pdwFlags: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetViewFlags(self, pdwFlags)
converter winim_converter_ICommDlgBrowser3*(x: ptr ICommDlgBrowser3): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ICommDlgBrowser3*(x: ptr ICommDlgBrowser3): ptr ICommDlgBrowser2 = cast[ptr ICommDlgBrowser2](x)
converter winim_converter_ICommDlgBrowser3*(x: ptr ICommDlgBrowser3): ptr ICommDlgBrowser = cast[ptr ICommDlgBrowser](x)
proc OnColumnClicked*(self: ptr ICommDlgBrowser3, ppshv: ptr IShellView, iColumn: int32): HRESULT {.inline, discardable.} = self.lpVtbl.OnColumnClicked(self, ppshv, iColumn)
proc GetCurrentFilter*(self: ptr ICommDlgBrowser3, pszFileSpec: LPWSTR, cchFileSpec: int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurrentFilter(self, pszFileSpec, cchFileSpec)
proc OnPreViewCreated*(self: ptr ICommDlgBrowser3, ppshv: ptr IShellView): HRESULT {.inline, discardable.} = self.lpVtbl.OnPreViewCreated(self, ppshv)
converter winim_converter_IColumnManager*(x: ptr IColumnManager): ptr IUnknown = cast[ptr IUnknown](x)
proc SetColumnInfo*(self: ptr IColumnManager, propkey: REFPROPERTYKEY, pcmci: ptr CM_COLUMNINFO): HRESULT {.inline, discardable.} = self.lpVtbl.SetColumnInfo(self, propkey, pcmci)
proc GetColumnInfo*(self: ptr IColumnManager, propkey: REFPROPERTYKEY, pcmci: ptr CM_COLUMNINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetColumnInfo(self, propkey, pcmci)
proc GetColumnCount*(self: ptr IColumnManager, dwFlags: int32, puCount: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetColumnCount(self, dwFlags, puCount)
proc GetColumns*(self: ptr IColumnManager, dwFlags: int32, rgkeyOrder: ptr PROPERTYKEY, cColumns: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetColumns(self, dwFlags, rgkeyOrder, cColumns)
proc SetColumns*(self: ptr IColumnManager, rgkeyOrder: ptr PROPERTYKEY, cVisible: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetColumns(self, rgkeyOrder, cVisible)
converter winim_converter_IFolderFilterSite*(x: ptr IFolderFilterSite): ptr IUnknown = cast[ptr IUnknown](x)
proc SetFilter*(self: ptr IFolderFilterSite, punk: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.SetFilter(self, punk)
converter winim_converter_IFolderFilter*(x: ptr IFolderFilter): ptr IUnknown = cast[ptr IUnknown](x)
proc ShouldShow*(self: ptr IFolderFilter, psf: ptr IShellFolder, pidlFolder: PCIDLIST_ABSOLUTE, pidlItem: PCUITEMID_CHILD): HRESULT {.inline, discardable.} = self.lpVtbl.ShouldShow(self, psf, pidlFolder, pidlItem)
proc GetEnumFlags*(self: ptr IFolderFilter, psf: ptr IShellFolder, pidlFolder: PCIDLIST_ABSOLUTE, phwnd: ptr HWND, pgrfFlags: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetEnumFlags(self, psf, pidlFolder, phwnd, pgrfFlags)
converter winim_converter_IInputObjectSite*(x: ptr IInputObjectSite): ptr IUnknown = cast[ptr IUnknown](x)
proc OnFocusChangeIS*(self: ptr IInputObjectSite, punkObj: ptr IUnknown, fSetFocus: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnFocusChangeIS(self, punkObj, fSetFocus)
converter winim_converter_IInputObject*(x: ptr IInputObject): ptr IUnknown = cast[ptr IUnknown](x)
proc UIActivateIO*(self: ptr IInputObject, fActivate: WINBOOL, pMsg: ptr MSG): HRESULT {.inline, discardable.} = self.lpVtbl.UIActivateIO(self, fActivate, pMsg)
proc HasFocusIO*(self: ptr IInputObject): HRESULT {.inline, discardable.} = self.lpVtbl.HasFocusIO(self)
proc TranslateAcceleratorIO*(self: ptr IInputObject, pMsg: ptr MSG): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAcceleratorIO(self, pMsg)
converter winim_converter_IInputObject2*(x: ptr IInputObject2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IInputObject2*(x: ptr IInputObject2): ptr IInputObject = cast[ptr IInputObject](x)
proc TranslateAcceleratorGlobal*(self: ptr IInputObject2, pMsg: ptr MSG): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAcceleratorGlobal(self, pMsg)
converter winim_converter_IProfferService*(x: ptr IProfferService): ptr IUnknown = cast[ptr IUnknown](x)
proc ProfferService*(self: ptr IProfferService, guidService: REFGUID, psp: ptr IServiceProvider, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.ProfferService(self, guidService, psp, pdwCookie)
proc RevokeService*(self: ptr IProfferService, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.RevokeService(self, dwCookie)
converter winim_converter_IShellItem*(x: ptr IShellItem): ptr IUnknown = cast[ptr IUnknown](x)
proc BindToHandler*(self: ptr IShellItem, pbc: ptr IBindCtx, bhid: REFGUID, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.BindToHandler(self, pbc, bhid, riid, ppv)
proc GetParent*(self: ptr IShellItem, ppsi: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.GetParent(self, ppsi)
proc GetDisplayName*(self: ptr IShellItem, sigdnName: int32, ppszName: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDisplayName(self, sigdnName, ppszName)
proc GetAttributes*(self: ptr IShellItem, sfgaoMask: SFGAOF, psfgaoAttribs: ptr SFGAOF): HRESULT {.inline, discardable.} = self.lpVtbl.GetAttributes(self, sfgaoMask, psfgaoAttribs)
proc Compare*(self: ptr IShellItem, psi: ptr IShellItem, hint: SICHINTF, piOrder: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.Compare(self, psi, hint, piOrder)
converter winim_converter_IShellItem2*(x: ptr IShellItem2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IShellItem2*(x: ptr IShellItem2): ptr IShellItem = cast[ptr IShellItem](x)
proc GetPropertyStore*(self: ptr IShellItem2, flags: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyStore(self, flags, riid, ppv)
proc GetPropertyStoreWithCreateObject*(self: ptr IShellItem2, flags: int32, punkCreateObject: ptr IUnknown, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyStoreWithCreateObject(self, flags, punkCreateObject, riid, ppv)
proc GetPropertyStoreForKeys*(self: ptr IShellItem2, rgKeys: ptr PROPERTYKEY, cKeys: UINT, flags: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyStoreForKeys(self, rgKeys, cKeys, flags, riid, ppv)
proc GetPropertyDescriptionList*(self: ptr IShellItem2, keyType: REFPROPERTYKEY, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyDescriptionList(self, keyType, riid, ppv)
proc Update*(self: ptr IShellItem2, pbc: ptr IBindCtx): HRESULT {.inline, discardable.} = self.lpVtbl.Update(self, pbc)
proc GetProperty*(self: ptr IShellItem2, key: REFPROPERTYKEY, ppropvar: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetProperty(self, key, ppropvar)
proc GetCLSID*(self: ptr IShellItem2, key: REFPROPERTYKEY, pclsid: ptr CLSID): HRESULT {.inline, discardable.} = self.lpVtbl.GetCLSID(self, key, pclsid)
proc GetFileTime*(self: ptr IShellItem2, key: REFPROPERTYKEY, pft: ptr FILETIME): HRESULT {.inline, discardable.} = self.lpVtbl.GetFileTime(self, key, pft)
proc GetInt32*(self: ptr IShellItem2, key: REFPROPERTYKEY, pi: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetInt32(self, key, pi)
proc GetString*(self: ptr IShellItem2, key: REFPROPERTYKEY, ppsz: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetString(self, key, ppsz)
proc GetUInt32*(self: ptr IShellItem2, key: REFPROPERTYKEY, pui: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetUInt32(self, key, pui)
proc GetUInt64*(self: ptr IShellItem2, key: REFPROPERTYKEY, pull: ptr ULONGLONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetUInt64(self, key, pull)
proc GetBool*(self: ptr IShellItem2, key: REFPROPERTYKEY, pf: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetBool(self, key, pf)
converter winim_converter_IShellItemImageFactory*(x: ptr IShellItemImageFactory): ptr IUnknown = cast[ptr IUnknown](x)
proc GetImage*(self: ptr IShellItemImageFactory, size: SIZE, flags: SIIGBF, phbm: ptr HBITMAP): HRESULT {.inline, discardable.} = self.lpVtbl.GetImage(self, size, flags, phbm)
converter winim_converter_IUserAccountChangeCallback*(x: ptr IUserAccountChangeCallback): ptr IUnknown = cast[ptr IUnknown](x)
proc OnPictureChange*(self: ptr IUserAccountChangeCallback, pszUserName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.OnPictureChange(self, pszUserName)
converter winim_converter_IEnumShellItems*(x: ptr IEnumShellItems): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumShellItems, celt: ULONG, rgelt: ptr ptr IShellItem, pceltFetched: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, celt, rgelt, pceltFetched)
proc Skip*(self: ptr IEnumShellItems, celt: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, celt)
proc Reset*(self: ptr IEnumShellItems): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumShellItems, ppenum: ptr ptr IEnumShellItems): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, ppenum)
converter winim_converter_ITransferAdviseSink*(x: ptr ITransferAdviseSink): ptr IUnknown = cast[ptr IUnknown](x)
proc UpdateProgress*(self: ptr ITransferAdviseSink, ullSizeCurrent: ULONGLONG, ullSizeTotal: ULONGLONG, nFilesCurrent: int32, nFilesTotal: int32, nFoldersCurrent: int32, nFoldersTotal: int32): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateProgress(self, ullSizeCurrent, ullSizeTotal, nFilesCurrent, nFilesTotal, nFoldersCurrent, nFoldersTotal)
proc UpdateTransferState*(self: ptr ITransferAdviseSink, ts: TRANSFER_ADVISE_STATE): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateTransferState(self, ts)
proc ConfirmOverwrite*(self: ptr ITransferAdviseSink, psiSource: ptr IShellItem, psiDestParent: ptr IShellItem, pszName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.ConfirmOverwrite(self, psiSource, psiDestParent, pszName)
proc ConfirmEncryptionLoss*(self: ptr ITransferAdviseSink, psiSource: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.ConfirmEncryptionLoss(self, psiSource)
proc FileFailure*(self: ptr ITransferAdviseSink, psi: ptr IShellItem, pszItem: LPCWSTR, hrError: HRESULT, pszRename: LPWSTR, cchRename: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.FileFailure(self, psi, pszItem, hrError, pszRename, cchRename)
proc SubStreamFailure*(self: ptr ITransferAdviseSink, psi: ptr IShellItem, pszStreamName: LPCWSTR, hrError: HRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.SubStreamFailure(self, psi, pszStreamName, hrError)
proc PropertyFailure*(self: ptr ITransferAdviseSink, psi: ptr IShellItem, pkey: ptr PROPERTYKEY, hrError: HRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.PropertyFailure(self, psi, pkey, hrError)
converter winim_converter_ITransferSource*(x: ptr ITransferSource): ptr IUnknown = cast[ptr IUnknown](x)
proc Advise*(self: ptr ITransferSource, psink: ptr ITransferAdviseSink, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, psink, pdwCookie)
proc Unadvise*(self: ptr ITransferSource, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, dwCookie)
proc SetProperties*(self: ptr ITransferSource, pproparray: ptr IPropertyChangeArray): HRESULT {.inline, discardable.} = self.lpVtbl.SetProperties(self, pproparray)
proc OpenItem*(self: ptr ITransferSource, psi: ptr IShellItem, flags: TRANSFER_SOURCE_FLAGS, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.OpenItem(self, psi, flags, riid, ppv)
proc MoveItem*(self: ptr ITransferSource, psi: ptr IShellItem, psiParentDst: ptr IShellItem, pszNameDst: LPCWSTR, flags: TRANSFER_SOURCE_FLAGS, ppsiNew: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.MoveItem(self, psi, psiParentDst, pszNameDst, flags, ppsiNew)
proc RecycleItem*(self: ptr ITransferSource, psiSource: ptr IShellItem, psiParentDest: ptr IShellItem, flags: TRANSFER_SOURCE_FLAGS, ppsiNewDest: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.RecycleItem(self, psiSource, psiParentDest, flags, ppsiNewDest)
proc RemoveItem*(self: ptr ITransferSource, psiSource: ptr IShellItem, flags: TRANSFER_SOURCE_FLAGS): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveItem(self, psiSource, flags)
proc RenameItem*(self: ptr ITransferSource, psiSource: ptr IShellItem, pszNewName: LPCWSTR, flags: TRANSFER_SOURCE_FLAGS, ppsiNewDest: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.RenameItem(self, psiSource, pszNewName, flags, ppsiNewDest)
proc LinkItem*(self: ptr ITransferSource, psiSource: ptr IShellItem, psiParentDest: ptr IShellItem, pszNewName: LPCWSTR, flags: TRANSFER_SOURCE_FLAGS, ppsiNewDest: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.LinkItem(self, psiSource, psiParentDest, pszNewName, flags, ppsiNewDest)
proc ApplyPropertiesToItem*(self: ptr ITransferSource, psiSource: ptr IShellItem, ppsiNew: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.ApplyPropertiesToItem(self, psiSource, ppsiNew)
proc GetDefaultDestinationName*(self: ptr ITransferSource, psiSource: ptr IShellItem, psiParentDest: ptr IShellItem, ppszDestinationName: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultDestinationName(self, psiSource, psiParentDest, ppszDestinationName)
proc EnterFolder*(self: ptr ITransferSource, psiChildFolderDest: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.EnterFolder(self, psiChildFolderDest)
proc LeaveFolder*(self: ptr ITransferSource, psiChildFolderDest: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.LeaveFolder(self, psiChildFolderDest)
converter winim_converter_IEnumResources*(x: ptr IEnumResources): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumResources, celt: ULONG, psir: ptr SHELL_ITEM_RESOURCE, pceltFetched: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, celt, psir, pceltFetched)
proc Skip*(self: ptr IEnumResources, celt: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, celt)
proc Reset*(self: ptr IEnumResources): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumResources, ppenumr: ptr ptr IEnumResources): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, ppenumr)
converter winim_converter_IShellItemResources*(x: ptr IShellItemResources): ptr IUnknown = cast[ptr IUnknown](x)
proc GetAttributes*(self: ptr IShellItemResources, pdwAttributes: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetAttributes(self, pdwAttributes)
proc GetSize*(self: ptr IShellItemResources, pullSize: ptr ULONGLONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetSize(self, pullSize)
proc GetTimes*(self: ptr IShellItemResources, pftCreation: ptr FILETIME, pftWrite: ptr FILETIME, pftAccess: ptr FILETIME): HRESULT {.inline, discardable.} = self.lpVtbl.GetTimes(self, pftCreation, pftWrite, pftAccess)
proc SetTimes*(self: ptr IShellItemResources, pftCreation: ptr FILETIME, pftWrite: ptr FILETIME, pftAccess: ptr FILETIME): HRESULT {.inline, discardable.} = self.lpVtbl.SetTimes(self, pftCreation, pftWrite, pftAccess)
proc GetResourceDescription*(self: ptr IShellItemResources, pcsir: ptr SHELL_ITEM_RESOURCE, ppszDescription: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetResourceDescription(self, pcsir, ppszDescription)
proc EnumResources*(self: ptr IShellItemResources, ppenumr: ptr ptr IEnumResources): HRESULT {.inline, discardable.} = self.lpVtbl.EnumResources(self, ppenumr)
proc SupportsResource*(self: ptr IShellItemResources, pcsir: ptr SHELL_ITEM_RESOURCE): HRESULT {.inline, discardable.} = self.lpVtbl.SupportsResource(self, pcsir)
proc OpenResource*(self: ptr IShellItemResources, pcsir: ptr SHELL_ITEM_RESOURCE, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.OpenResource(self, pcsir, riid, ppv)
proc CreateResource*(self: ptr IShellItemResources, pcsir: ptr SHELL_ITEM_RESOURCE, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.CreateResource(self, pcsir, riid, ppv)
proc MarkForDelete*(self: ptr IShellItemResources): HRESULT {.inline, discardable.} = self.lpVtbl.MarkForDelete(self)
converter winim_converter_ITransferDestination*(x: ptr ITransferDestination): ptr IUnknown = cast[ptr IUnknown](x)
proc Advise*(self: ptr ITransferDestination, psink: ptr ITransferAdviseSink, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, psink, pdwCookie)
proc Unadvise*(self: ptr ITransferDestination, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, dwCookie)
proc CreateItem*(self: ptr ITransferDestination, pszName: LPCWSTR, dwAttributes: DWORD, ullSize: ULONGLONG, flags: TRANSFER_SOURCE_FLAGS, riidItem: REFIID, ppvItem: ptr pointer, riidResources: REFIID, ppvResources: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.CreateItem(self, pszName, dwAttributes, ullSize, flags, riidItem, ppvItem, riidResources, ppvResources)
converter winim_converter_IStreamAsync*(x: ptr IStreamAsync): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IStreamAsync*(x: ptr IStreamAsync): ptr IStream = cast[ptr IStream](x)
proc ReadAsync*(self: ptr IStreamAsync, pv: pointer, cb: DWORD, pcbRead: LPDWORD, lpOverlapped: LPOVERLAPPED): HRESULT {.inline, discardable.} = self.lpVtbl.ReadAsync(self, pv, cb, pcbRead, lpOverlapped)
proc WriteAsync*(self: ptr IStreamAsync, lpBuffer: pointer, cb: DWORD, pcbWritten: LPDWORD, lpOverlapped: LPOVERLAPPED): HRESULT {.inline, discardable.} = self.lpVtbl.WriteAsync(self, lpBuffer, cb, pcbWritten, lpOverlapped)
proc OverlappedResult*(self: ptr IStreamAsync, lpOverlapped: LPOVERLAPPED, lpNumberOfBytesTransferred: LPDWORD, bWait: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OverlappedResult(self, lpOverlapped, lpNumberOfBytesTransferred, bWait)
proc CancelIo*(self: ptr IStreamAsync): HRESULT {.inline, discardable.} = self.lpVtbl.CancelIo(self)
converter winim_converter_IStreamUnbufferedInfo*(x: ptr IStreamUnbufferedInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc GetSectorSize*(self: ptr IStreamUnbufferedInfo, pcbSectorSize: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetSectorSize(self, pcbSectorSize)
converter winim_converter_IFileOperationProgressSink*(x: ptr IFileOperationProgressSink): ptr IUnknown = cast[ptr IUnknown](x)
proc StartOperations*(self: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.StartOperations(self)
proc FinishOperations*(self: ptr IFileOperationProgressSink, hrResult: HRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.FinishOperations(self, hrResult)
proc PreRenameItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, pszNewName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.PreRenameItem(self, dwFlags, psiItem, pszNewName)
proc PostRenameItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, pszNewName: LPCWSTR, hrRename: HRESULT, psiNewlyCreated: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.PostRenameItem(self, dwFlags, psiItem, pszNewName, hrRename, psiNewlyCreated)
proc PreMoveItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.PreMoveItem(self, dwFlags, psiItem, psiDestinationFolder, pszNewName)
proc PostMoveItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR, hrMove: HRESULT, psiNewlyCreated: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.PostMoveItem(self, dwFlags, psiItem, psiDestinationFolder, pszNewName, hrMove, psiNewlyCreated)
proc PreCopyItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.PreCopyItem(self, dwFlags, psiItem, psiDestinationFolder, pszNewName)
proc PostCopyItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR, hrCopy: HRESULT, psiNewlyCreated: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.PostCopyItem(self, dwFlags, psiItem, psiDestinationFolder, pszNewName, hrCopy, psiNewlyCreated)
proc PreDeleteItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.PreDeleteItem(self, dwFlags, psiItem)
proc PostDeleteItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, hrDelete: HRESULT, psiNewlyCreated: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.PostDeleteItem(self, dwFlags, psiItem, hrDelete, psiNewlyCreated)
proc PreNewItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.PreNewItem(self, dwFlags, psiDestinationFolder, pszNewName)
proc PostNewItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR, pszTemplateName: LPCWSTR, dwFileAttributes: DWORD, hrNew: HRESULT, psiNewItem: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.PostNewItem(self, dwFlags, psiDestinationFolder, pszNewName, pszTemplateName, dwFileAttributes, hrNew, psiNewItem)
proc UpdateProgress*(self: ptr IFileOperationProgressSink, iWorkTotal: UINT, iWorkSoFar: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateProgress(self, iWorkTotal, iWorkSoFar)
proc ResetTimer*(self: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.ResetTimer(self)
proc PauseTimer*(self: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.PauseTimer(self)
proc ResumeTimer*(self: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.ResumeTimer(self)
converter winim_converter_IShellItemArray*(x: ptr IShellItemArray): ptr IUnknown = cast[ptr IUnknown](x)
proc BindToHandler*(self: ptr IShellItemArray, pbc: ptr IBindCtx, bhid: REFGUID, riid: REFIID, ppvOut: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.BindToHandler(self, pbc, bhid, riid, ppvOut)
proc GetPropertyStore*(self: ptr IShellItemArray, flags: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyStore(self, flags, riid, ppv)
proc GetPropertyDescriptionList*(self: ptr IShellItemArray, keyType: REFPROPERTYKEY, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyDescriptionList(self, keyType, riid, ppv)
proc GetAttributes*(self: ptr IShellItemArray, AttribFlags: int32, sfgaoMask: SFGAOF, psfgaoAttribs: ptr SFGAOF): HRESULT {.inline, discardable.} = self.lpVtbl.GetAttributes(self, AttribFlags, sfgaoMask, psfgaoAttribs)
proc GetCount*(self: ptr IShellItemArray, pdwNumItems: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetCount(self, pdwNumItems)
proc GetItemAt*(self: ptr IShellItemArray, dwIndex: DWORD, ppsi: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemAt(self, dwIndex, ppsi)
proc EnumItems*(self: ptr IShellItemArray, ppenumShellItems: ptr ptr IEnumShellItems): HRESULT {.inline, discardable.} = self.lpVtbl.EnumItems(self, ppenumShellItems)
converter winim_converter_IInitializeWithItem*(x: ptr IInitializeWithItem): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IInitializeWithItem, psi: ptr IShellItem, grfMode: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, psi, grfMode)
converter winim_converter_IObjectWithSelection*(x: ptr IObjectWithSelection): ptr IUnknown = cast[ptr IUnknown](x)
proc SetSelection*(self: ptr IObjectWithSelection, psia: ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.SetSelection(self, psia)
proc GetSelection*(self: ptr IObjectWithSelection, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetSelection(self, riid, ppv)
converter winim_converter_IObjectWithBackReferences*(x: ptr IObjectWithBackReferences): ptr IUnknown = cast[ptr IUnknown](x)
proc RemoveBackReferences*(self: ptr IObjectWithBackReferences): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveBackReferences(self)
converter winim_converter_IPropertyUI*(x: ptr IPropertyUI): ptr IUnknown = cast[ptr IUnknown](x)
proc ParsePropertyName*(self: ptr IPropertyUI, pszName: LPCWSTR, pfmtid: ptr FMTID, ppid: ptr PROPID, pchEaten: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.ParsePropertyName(self, pszName, pfmtid, ppid, pchEaten)
proc GetCannonicalName*(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pwszText: LPWSTR, cchText: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetCannonicalName(self, fmtid, pid, pwszText, cchText)
proc GetDisplayName*(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, flags: PROPERTYUI_NAME_FLAGS, pwszText: LPWSTR, cchText: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetDisplayName(self, fmtid, pid, flags, pwszText, cchText)
proc GetPropertyDescription*(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pwszText: LPWSTR, cchText: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyDescription(self, fmtid, pid, pwszText, cchText)
proc GetDefaultWidth*(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pcxChars: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultWidth(self, fmtid, pid, pcxChars)
proc GetFlags*(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pflags: ptr PROPERTYUI_FLAGS): HRESULT {.inline, discardable.} = self.lpVtbl.GetFlags(self, fmtid, pid, pflags)
proc FormatForDisplay*(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, ppropvar: ptr PROPVARIANT, puiff: PROPERTYUI_FORMAT_FLAGS, pwszText: LPWSTR, cchText: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.FormatForDisplay(self, fmtid, pid, ppropvar, puiff, pwszText, cchText)
proc GetHelpInfo*(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pwszHelpFile: LPWSTR, cch: DWORD, puHelpID: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetHelpInfo(self, fmtid, pid, pwszHelpFile, cch, puHelpID)
converter winim_converter_ICategoryProvider*(x: ptr ICategoryProvider): ptr IUnknown = cast[ptr IUnknown](x)
proc CanCategorizeOnSCID*(self: ptr ICategoryProvider, pscid: ptr SHCOLUMNID): HRESULT {.inline, discardable.} = self.lpVtbl.CanCategorizeOnSCID(self, pscid)
proc GetDefaultCategory*(self: ptr ICategoryProvider, pguid: ptr GUID, pscid: ptr SHCOLUMNID): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultCategory(self, pguid, pscid)
proc GetCategoryForSCID*(self: ptr ICategoryProvider, pscid: ptr SHCOLUMNID, pguid: ptr GUID): HRESULT {.inline, discardable.} = self.lpVtbl.GetCategoryForSCID(self, pscid, pguid)
proc EnumCategories*(self: ptr ICategoryProvider, penum: ptr ptr IEnumGUID): HRESULT {.inline, discardable.} = self.lpVtbl.EnumCategories(self, penum)
proc GetCategoryName*(self: ptr ICategoryProvider, pguid: ptr GUID, pszName: LPWSTR, cch: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCategoryName(self, pguid, pszName, cch)
proc CreateCategory*(self: ptr ICategoryProvider, pguid: ptr GUID, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.CreateCategory(self, pguid, riid, ppv)
converter winim_converter_ICategorizer*(x: ptr ICategorizer): ptr IUnknown = cast[ptr IUnknown](x)
proc GetDescription*(self: ptr ICategorizer, pszDesc: LPWSTR, cch: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetDescription(self, pszDesc, cch)
proc GetCategory*(self: ptr ICategorizer, cidl: UINT, apidl: PCUITEMID_CHILD_ARRAY, rgCategoryIds: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetCategory(self, cidl, apidl, rgCategoryIds)
proc GetCategoryInfo*(self: ptr ICategorizer, dwCategoryId: DWORD, pci: ptr TCATEGORY_INFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetCategoryInfo(self, dwCategoryId, pci)
proc CompareCategory*(self: ptr ICategorizer, csfFlags: int32, dwCategoryId1: DWORD, dwCategoryId2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.CompareCategory(self, csfFlags, dwCategoryId1, dwCategoryId2)
converter winim_converter_IDragSourceHelper2*(x: ptr IDragSourceHelper2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IDragSourceHelper2*(x: ptr IDragSourceHelper2): ptr IDragSourceHelper = cast[ptr IDragSourceHelper](x)
proc SetFlags*(self: ptr IDragSourceHelper2, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetFlags(self, dwFlags)
converter winim_converter_IShellLinkDataList*(x: ptr IShellLinkDataList): ptr IUnknown = cast[ptr IUnknown](x)
proc AddDataBlock*(self: ptr IShellLinkDataList, pDataBlock: pointer): HRESULT {.inline, discardable.} = self.lpVtbl.AddDataBlock(self, pDataBlock)
proc CopyDataBlock*(self: ptr IShellLinkDataList, dwSig: DWORD, ppDataBlock: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.CopyDataBlock(self, dwSig, ppDataBlock)
proc RemoveDataBlock*(self: ptr IShellLinkDataList, dwSig: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveDataBlock(self, dwSig)
proc GetFlags*(self: ptr IShellLinkDataList, pdwFlags: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetFlags(self, pdwFlags)
proc SetFlags*(self: ptr IShellLinkDataList, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetFlags(self, dwFlags)
converter winim_converter_IResolveShellLink*(x: ptr IResolveShellLink): ptr IUnknown = cast[ptr IUnknown](x)
proc ResolveShellLink*(self: ptr IResolveShellLink, punkLink: ptr IUnknown, hwnd: HWND, fFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.ResolveShellLink(self, punkLink, hwnd, fFlags)
converter winim_converter_IActionProgressDialog*(x: ptr IActionProgressDialog): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IActionProgressDialog, flags: SPINITF, pszTitle: LPCWSTR, pszCancel: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, flags, pszTitle, pszCancel)
proc Stop*(self: ptr IActionProgressDialog): HRESULT {.inline, discardable.} = self.lpVtbl.Stop(self)
converter winim_converter_IHWEventHandler*(x: ptr IHWEventHandler): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IHWEventHandler, pszParams: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, pszParams)
proc HandleEvent*(self: ptr IHWEventHandler, pszDeviceID: LPCWSTR, pszAltDeviceID: LPCWSTR, pszEventType: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.HandleEvent(self, pszDeviceID, pszAltDeviceID, pszEventType)
proc HandleEventWithContent*(self: ptr IHWEventHandler, pszDeviceID: LPCWSTR, pszAltDeviceID: LPCWSTR, pszEventType: LPCWSTR, pszContentTypeHandler: LPCWSTR, pdataobject: ptr IDataObject): HRESULT {.inline, discardable.} = self.lpVtbl.HandleEventWithContent(self, pszDeviceID, pszAltDeviceID, pszEventType, pszContentTypeHandler, pdataobject)
converter winim_converter_IHWEventHandler2*(x: ptr IHWEventHandler2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHWEventHandler2*(x: ptr IHWEventHandler2): ptr IHWEventHandler = cast[ptr IHWEventHandler](x)
proc HandleEventWithHWND*(self: ptr IHWEventHandler2, pszDeviceID: LPCWSTR, pszAltDeviceID: LPCWSTR, pszEventType: LPCWSTR, hwndOwner: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.HandleEventWithHWND(self, pszDeviceID, pszAltDeviceID, pszEventType, hwndOwner)
converter winim_converter_IQueryCancelAutoPlay*(x: ptr IQueryCancelAutoPlay): ptr IUnknown = cast[ptr IUnknown](x)
proc AllowAutoPlay*(self: ptr IQueryCancelAutoPlay, pszPath: LPCWSTR, dwContentType: DWORD, pszLabel: LPCWSTR, dwSerialNumber: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.AllowAutoPlay(self, pszPath, dwContentType, pszLabel, dwSerialNumber)
converter winim_converter_IDynamicHWHandler*(x: ptr IDynamicHWHandler): ptr IUnknown = cast[ptr IUnknown](x)
proc GetDynamicInfo*(self: ptr IDynamicHWHandler, pszDeviceID: LPCWSTR, dwContentType: DWORD, ppszAction: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDynamicInfo(self, pszDeviceID, dwContentType, ppszAction)
converter winim_converter_IActionProgress*(x: ptr IActionProgress): ptr IUnknown = cast[ptr IUnknown](x)
proc Begin*(self: ptr IActionProgress, action: int32, flags: SPBEGINF): HRESULT {.inline, discardable.} = self.lpVtbl.Begin(self, action, flags)
proc UpdateProgress*(self: ptr IActionProgress, ulCompleted: ULONGLONG, ulTotal: ULONGLONG): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateProgress(self, ulCompleted, ulTotal)
proc UpdateText*(self: ptr IActionProgress, sptext: int32, pszText: LPCWSTR, fMayCompact: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateText(self, sptext, pszText, fMayCompact)
proc QueryCancel*(self: ptr IActionProgress, pfCancelled: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.QueryCancel(self, pfCancelled)
proc ResetCancel*(self: ptr IActionProgress): HRESULT {.inline, discardable.} = self.lpVtbl.ResetCancel(self)
proc End*(self: ptr IActionProgress): HRESULT {.inline, discardable.} = self.lpVtbl.End(self)
converter winim_converter_IRemoteComputer*(x: ptr IRemoteComputer): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IRemoteComputer, pszMachine: LPCWSTR, bEnumerating: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, pszMachine, bEnumerating)
converter winim_converter_IQueryContinue*(x: ptr IQueryContinue): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryContinue*(self: ptr IQueryContinue): HRESULT {.inline, discardable.} = self.lpVtbl.QueryContinue(self)
converter winim_converter_IObjectWithCancelEvent*(x: ptr IObjectWithCancelEvent): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCancelEvent*(self: ptr IObjectWithCancelEvent, phEvent: ptr HANDLE): HRESULT {.inline, discardable.} = self.lpVtbl.GetCancelEvent(self, phEvent)
converter winim_converter_IUserNotification*(x: ptr IUserNotification): ptr IUnknown = cast[ptr IUnknown](x)
proc SetBalloonInfo*(self: ptr IUserNotification, pszTitle: LPCWSTR, pszText: LPCWSTR, dwInfoFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetBalloonInfo(self, pszTitle, pszText, dwInfoFlags)
proc SetBalloonRetry*(self: ptr IUserNotification, dwShowTime: DWORD, dwInterval: DWORD, cRetryCount: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetBalloonRetry(self, dwShowTime, dwInterval, cRetryCount)
proc SetIconInfo*(self: ptr IUserNotification, hIcon: HICON, pszToolTip: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetIconInfo(self, hIcon, pszToolTip)
proc Show*(self: ptr IUserNotification, pqc: ptr IQueryContinue, dwContinuePollInterval: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Show(self, pqc, dwContinuePollInterval)
proc PlaySound*(self: ptr IUserNotification, pszSoundName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.PlaySound(self, pszSoundName)
converter winim_converter_IUserNotificationCallback*(x: ptr IUserNotificationCallback): ptr IUnknown = cast[ptr IUnknown](x)
proc OnBalloonUserClick*(self: ptr IUserNotificationCallback, pt: ptr POINT): HRESULT {.inline, discardable.} = self.lpVtbl.OnBalloonUserClick(self, pt)
proc OnLeftClick*(self: ptr IUserNotificationCallback, pt: ptr POINT): HRESULT {.inline, discardable.} = self.lpVtbl.OnLeftClick(self, pt)
proc OnContextMenu*(self: ptr IUserNotificationCallback, pt: ptr POINT): HRESULT {.inline, discardable.} = self.lpVtbl.OnContextMenu(self, pt)
converter winim_converter_IUserNotification2*(x: ptr IUserNotification2): ptr IUnknown = cast[ptr IUnknown](x)
proc SetBalloonInfo*(self: ptr IUserNotification2, pszTitle: LPCWSTR, pszText: LPCWSTR, dwInfoFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetBalloonInfo(self, pszTitle, pszText, dwInfoFlags)
proc SetBalloonRetry*(self: ptr IUserNotification2, dwShowTime: DWORD, dwInterval: DWORD, cRetryCount: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetBalloonRetry(self, dwShowTime, dwInterval, cRetryCount)
proc SetIconInfo*(self: ptr IUserNotification2, hIcon: HICON, pszToolTip: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetIconInfo(self, hIcon, pszToolTip)
proc Show*(self: ptr IUserNotification2, pqc: ptr IQueryContinue, dwContinuePollInterval: DWORD, pSink: ptr IUserNotificationCallback): HRESULT {.inline, discardable.} = self.lpVtbl.Show(self, pqc, dwContinuePollInterval, pSink)
proc PlaySound*(self: ptr IUserNotification2, pszSoundName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.PlaySound(self, pszSoundName)
converter winim_converter_IItemNameLimits*(x: ptr IItemNameLimits): ptr IUnknown = cast[ptr IUnknown](x)
proc GetValidCharacters*(self: ptr IItemNameLimits, ppwszValidChars: ptr LPWSTR, ppwszInvalidChars: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetValidCharacters(self, ppwszValidChars, ppwszInvalidChars)
proc GetMaxLength*(self: ptr IItemNameLimits, pszName: LPCWSTR, piMaxNameLen: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetMaxLength(self, pszName, piMaxNameLen)
converter winim_converter_ISearchFolderItemFactory*(x: ptr ISearchFolderItemFactory): ptr IUnknown = cast[ptr IUnknown](x)
proc SetDisplayName*(self: ptr ISearchFolderItemFactory, pszDisplayName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetDisplayName(self, pszDisplayName)
proc SetFolderTypeID*(self: ptr ISearchFolderItemFactory, ftid: FOLDERTYPEID): HRESULT {.inline, discardable.} = self.lpVtbl.SetFolderTypeID(self, ftid)
proc SetFolderLogicalViewMode*(self: ptr ISearchFolderItemFactory, flvm: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetFolderLogicalViewMode(self, flvm)
proc SetIconSize*(self: ptr ISearchFolderItemFactory, iIconSize: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetIconSize(self, iIconSize)
proc SetVisibleColumns*(self: ptr ISearchFolderItemFactory, cVisibleColumns: UINT, rgKey: ptr PROPERTYKEY): HRESULT {.inline, discardable.} = self.lpVtbl.SetVisibleColumns(self, cVisibleColumns, rgKey)
proc SetSortColumns*(self: ptr ISearchFolderItemFactory, cSortColumns: UINT, rgSortColumns: ptr SORTCOLUMN): HRESULT {.inline, discardable.} = self.lpVtbl.SetSortColumns(self, cSortColumns, rgSortColumns)
proc SetGroupColumn*(self: ptr ISearchFolderItemFactory, keyGroup: REFPROPERTYKEY): HRESULT {.inline, discardable.} = self.lpVtbl.SetGroupColumn(self, keyGroup)
proc SetStacks*(self: ptr ISearchFolderItemFactory, cStackKeys: UINT, rgStackKeys: ptr PROPERTYKEY): HRESULT {.inline, discardable.} = self.lpVtbl.SetStacks(self, cStackKeys, rgStackKeys)
proc SetScope*(self: ptr ISearchFolderItemFactory, psiaScope: ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.SetScope(self, psiaScope)
proc SetCondition*(self: ptr ISearchFolderItemFactory, pCondition: ptr ICondition): HRESULT {.inline, discardable.} = self.lpVtbl.SetCondition(self, pCondition)
proc GetShellItem*(self: ptr ISearchFolderItemFactory, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetShellItem(self, riid, ppv)
proc GetIDList*(self: ptr ISearchFolderItemFactory, ppidl: ptr PIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.GetIDList(self, ppidl)
converter winim_converter_IExtractImage*(x: ptr IExtractImage): ptr IUnknown = cast[ptr IUnknown](x)
proc GetLocation*(self: ptr IExtractImage, pszPathBuffer: LPWSTR, cch: DWORD, pdwPriority: ptr DWORD, prgSize: ptr SIZE, dwRecClrDepth: DWORD, pdwFlags: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetLocation(self, pszPathBuffer, cch, pdwPriority, prgSize, dwRecClrDepth, pdwFlags)
proc Extract*(self: ptr IExtractImage, phBmpThumbnail: ptr HBITMAP): HRESULT {.inline, discardable.} = self.lpVtbl.Extract(self, phBmpThumbnail)
converter winim_converter_IExtractImage2*(x: ptr IExtractImage2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IExtractImage2*(x: ptr IExtractImage2): ptr IExtractImage = cast[ptr IExtractImage](x)
proc GetDateStamp*(self: ptr IExtractImage2, pDateStamp: ptr FILETIME): HRESULT {.inline, discardable.} = self.lpVtbl.GetDateStamp(self, pDateStamp)
converter winim_converter_IThumbnailHandlerFactory*(x: ptr IThumbnailHandlerFactory): ptr IUnknown = cast[ptr IUnknown](x)
proc GetThumbnailHandler*(self: ptr IThumbnailHandlerFactory, pidlChild: PCUITEMID_CHILD, pbc: ptr IBindCtx, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetThumbnailHandler(self, pidlChild, pbc, riid, ppv)
converter winim_converter_IParentAndItem*(x: ptr IParentAndItem): ptr IUnknown = cast[ptr IUnknown](x)
proc SetParentAndItem*(self: ptr IParentAndItem, pidlParent: PCIDLIST_ABSOLUTE, psf: ptr IShellFolder, pidlChild: PCUITEMID_CHILD): HRESULT {.inline, discardable.} = self.lpVtbl.SetParentAndItem(self, pidlParent, psf, pidlChild)
proc GetParentAndItem*(self: ptr IParentAndItem, ppidlParent: ptr PIDLIST_ABSOLUTE, ppsf: ptr ptr IShellFolder, ppidlChild: ptr PITEMID_CHILD): HRESULT {.inline, discardable.} = self.lpVtbl.GetParentAndItem(self, ppidlParent, ppsf, ppidlChild)
converter winim_converter_IDockingWindow*(x: ptr IDockingWindow): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IDockingWindow*(x: ptr IDockingWindow): ptr IOleWindow = cast[ptr IOleWindow](x)
proc ShowDW*(self: ptr IDockingWindow, fShow: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ShowDW(self, fShow)
proc CloseDW*(self: ptr IDockingWindow, dwReserved: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.CloseDW(self, dwReserved)
proc ResizeBorderDW*(self: ptr IDockingWindow, prcBorder: LPCRECT, punkToolbarSite: ptr IUnknown, fReserved: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ResizeBorderDW(self, prcBorder, punkToolbarSite, fReserved)
converter winim_converter_IDeskBand*(x: ptr IDeskBand): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IDeskBand*(x: ptr IDeskBand): ptr IDockingWindow = cast[ptr IDockingWindow](x)
converter winim_converter_IDeskBand*(x: ptr IDeskBand): ptr IOleWindow = cast[ptr IOleWindow](x)
proc GetBandInfo*(self: ptr IDeskBand, dwBandID: DWORD, dwViewMode: DWORD, pdbi: ptr DESKBANDINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetBandInfo(self, dwBandID, dwViewMode, pdbi)
converter winim_converter_IDeskBandInfo*(x: ptr IDeskBandInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc GetDefaultBandWidth*(self: ptr IDeskBandInfo, dwBandID: DWORD, dwViewMode: DWORD, pnWidth: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultBandWidth(self, dwBandID, dwViewMode, pnWidth)
converter winim_converter_IDeskBand2*(x: ptr IDeskBand2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IDeskBand2*(x: ptr IDeskBand2): ptr IDeskBand = cast[ptr IDeskBand](x)
converter winim_converter_IDeskBand2*(x: ptr IDeskBand2): ptr IDockingWindow = cast[ptr IDockingWindow](x)
converter winim_converter_IDeskBand2*(x: ptr IDeskBand2): ptr IOleWindow = cast[ptr IOleWindow](x)
proc CanRenderComposited*(self: ptr IDeskBand2, pfCanRenderComposited: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.CanRenderComposited(self, pfCanRenderComposited)
proc SetCompositionState*(self: ptr IDeskBand2, fCompositionEnabled: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetCompositionState(self, fCompositionEnabled)
proc GetCompositionState*(self: ptr IDeskBand2, pfCompositionEnabled: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetCompositionState(self, pfCompositionEnabled)
converter winim_converter_ITaskbarList*(x: ptr ITaskbarList): ptr IUnknown = cast[ptr IUnknown](x)
proc HrInit*(self: ptr ITaskbarList): HRESULT {.inline, discardable.} = self.lpVtbl.HrInit(self)
proc AddTab*(self: ptr ITaskbarList, hwnd: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.AddTab(self, hwnd)
proc DeleteTab*(self: ptr ITaskbarList, hwnd: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.DeleteTab(self, hwnd)
proc ActivateTab*(self: ptr ITaskbarList, hwnd: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.ActivateTab(self, hwnd)
proc SetActiveAlt*(self: ptr ITaskbarList, hwnd: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.SetActiveAlt(self, hwnd)
converter winim_converter_ITaskbarList2*(x: ptr ITaskbarList2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ITaskbarList2*(x: ptr ITaskbarList2): ptr ITaskbarList = cast[ptr ITaskbarList](x)
proc MarkFullscreenWindow*(self: ptr ITaskbarList2, hwnd: HWND, fFullscreen: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.MarkFullscreenWindow(self, hwnd, fFullscreen)
converter winim_converter_ITaskbarList3*(x: ptr ITaskbarList3): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ITaskbarList3*(x: ptr ITaskbarList3): ptr ITaskbarList2 = cast[ptr ITaskbarList2](x)
converter winim_converter_ITaskbarList3*(x: ptr ITaskbarList3): ptr ITaskbarList = cast[ptr ITaskbarList](x)
proc SetProgressValue*(self: ptr ITaskbarList3, hwnd: HWND, ullCompleted: ULONGLONG, ullTotal: ULONGLONG): HRESULT {.inline, discardable.} = self.lpVtbl.SetProgressValue(self, hwnd, ullCompleted, ullTotal)
proc SetProgressState*(self: ptr ITaskbarList3, hwnd: HWND, tbpFlags: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetProgressState(self, hwnd, tbpFlags)
proc RegisterTab*(self: ptr ITaskbarList3, hwndTab: HWND, hwndMDI: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.RegisterTab(self, hwndTab, hwndMDI)
proc UnregisterTab*(self: ptr ITaskbarList3, hwndTab: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.UnregisterTab(self, hwndTab)
proc SetTabOrder*(self: ptr ITaskbarList3, hwndTab: HWND, hwndInsertBefore: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.SetTabOrder(self, hwndTab, hwndInsertBefore)
proc SetTabActive*(self: ptr ITaskbarList3, hwndTab: HWND, hwndMDI: HWND, dwReserved: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetTabActive(self, hwndTab, hwndMDI, dwReserved)
proc ThumbBarAddButtons*(self: ptr ITaskbarList3, hwnd: HWND, cButtons: UINT, pButton: LPTHUMBBUTTON): HRESULT {.inline, discardable.} = self.lpVtbl.ThumbBarAddButtons(self, hwnd, cButtons, pButton)
proc ThumbBarUpdateButtons*(self: ptr ITaskbarList3, hwnd: HWND, cButtons: UINT, pButton: LPTHUMBBUTTON): HRESULT {.inline, discardable.} = self.lpVtbl.ThumbBarUpdateButtons(self, hwnd, cButtons, pButton)
proc ThumbBarSetImageList*(self: ptr ITaskbarList3, hwnd: HWND, himl: HIMAGELIST): HRESULT {.inline, discardable.} = self.lpVtbl.ThumbBarSetImageList(self, hwnd, himl)
proc SetOverlayIcon*(self: ptr ITaskbarList3, hwnd: HWND, hIcon: HICON, pszDescription: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetOverlayIcon(self, hwnd, hIcon, pszDescription)
proc SetThumbnailTooltip*(self: ptr ITaskbarList3, hwnd: HWND, pszTip: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetThumbnailTooltip(self, hwnd, pszTip)
proc SetThumbnailClip*(self: ptr ITaskbarList3, hwnd: HWND, prcClip: ptr RECT): HRESULT {.inline, discardable.} = self.lpVtbl.SetThumbnailClip(self, hwnd, prcClip)
converter winim_converter_ITaskbarList4*(x: ptr ITaskbarList4): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ITaskbarList4*(x: ptr ITaskbarList4): ptr ITaskbarList3 = cast[ptr ITaskbarList3](x)
converter winim_converter_ITaskbarList4*(x: ptr ITaskbarList4): ptr ITaskbarList2 = cast[ptr ITaskbarList2](x)
converter winim_converter_ITaskbarList4*(x: ptr ITaskbarList4): ptr ITaskbarList = cast[ptr ITaskbarList](x)
proc SetTabProperties*(self: ptr ITaskbarList4, hwndTab: HWND, stpFlags: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetTabProperties(self, hwndTab, stpFlags)
converter winim_converter_IStartMenuPinnedList*(x: ptr IStartMenuPinnedList): ptr IUnknown = cast[ptr IUnknown](x)
proc RemoveFromList*(self: ptr IStartMenuPinnedList, pitem: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveFromList(self, pitem)
converter winim_converter_ICDBurn*(x: ptr ICDBurn): ptr IUnknown = cast[ptr IUnknown](x)
proc GetRecorderDriveLetter*(self: ptr ICDBurn, pszDrive: LPWSTR, cch: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetRecorderDriveLetter(self, pszDrive, cch)
proc Burn*(self: ptr ICDBurn, hwnd: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.Burn(self, hwnd)
proc HasRecordableDrive*(self: ptr ICDBurn, pfHasRecorder: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.HasRecordableDrive(self, pfHasRecorder)
converter winim_converter_IWizardSite*(x: ptr IWizardSite): ptr IUnknown = cast[ptr IUnknown](x)
proc GetPreviousPage*(self: ptr IWizardSite, phpage: ptr HPROPSHEETPAGE): HRESULT {.inline, discardable.} = self.lpVtbl.GetPreviousPage(self, phpage)
proc GetNextPage*(self: ptr IWizardSite, phpage: ptr HPROPSHEETPAGE): HRESULT {.inline, discardable.} = self.lpVtbl.GetNextPage(self, phpage)
proc GetCancelledPage*(self: ptr IWizardSite, phpage: ptr HPROPSHEETPAGE): HRESULT {.inline, discardable.} = self.lpVtbl.GetCancelledPage(self, phpage)
converter winim_converter_IWizardExtension*(x: ptr IWizardExtension): ptr IUnknown = cast[ptr IUnknown](x)
proc AddPages*(self: ptr IWizardExtension, aPages: ptr HPROPSHEETPAGE, cPages: UINT, pnPagesAdded: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.AddPages(self, aPages, cPages, pnPagesAdded)
proc GetFirstPage*(self: ptr IWizardExtension, phpage: ptr HPROPSHEETPAGE): HRESULT {.inline, discardable.} = self.lpVtbl.GetFirstPage(self, phpage)
proc GetLastPage*(self: ptr IWizardExtension, phpage: ptr HPROPSHEETPAGE): HRESULT {.inline, discardable.} = self.lpVtbl.GetLastPage(self, phpage)
converter winim_converter_IWebWizardExtension*(x: ptr IWebWizardExtension): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IWebWizardExtension*(x: ptr IWebWizardExtension): ptr IWizardExtension = cast[ptr IWizardExtension](x)
proc SetInitialURL*(self: ptr IWebWizardExtension, pszURL: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetInitialURL(self, pszURL)
proc SetErrorURL*(self: ptr IWebWizardExtension, pszErrorURL: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetErrorURL(self, pszErrorURL)
converter winim_converter_IPublishingWizard*(x: ptr IPublishingWizard): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPublishingWizard*(x: ptr IPublishingWizard): ptr IWizardExtension = cast[ptr IWizardExtension](x)
proc Initialize*(self: ptr IPublishingWizard, pdo: ptr IDataObject, dwOptions: DWORD, pszServiceScope: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, pdo, dwOptions, pszServiceScope)
proc GetTransferManifest*(self: ptr IPublishingWizard, phrFromTransfer: ptr HRESULT, pdocManifest: ptr ptr IXMLDOMDocument): HRESULT {.inline, discardable.} = self.lpVtbl.GetTransferManifest(self, phrFromTransfer, pdocManifest)
converter winim_converter_IFolderViewHost*(x: ptr IFolderViewHost): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IFolderViewHost, hwndParent: HWND, pdo: ptr IDataObject, prc: ptr RECT): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, hwndParent, pdo, prc)
converter winim_converter_IExplorerBrowserEvents*(x: ptr IExplorerBrowserEvents): ptr IUnknown = cast[ptr IUnknown](x)
proc OnNavigationPending*(self: ptr IExplorerBrowserEvents, pidlFolder: PCIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.OnNavigationPending(self, pidlFolder)
proc OnViewCreated*(self: ptr IExplorerBrowserEvents, psv: ptr IShellView): HRESULT {.inline, discardable.} = self.lpVtbl.OnViewCreated(self, psv)
proc OnNavigationComplete*(self: ptr IExplorerBrowserEvents, pidlFolder: PCIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.OnNavigationComplete(self, pidlFolder)
proc OnNavigationFailed*(self: ptr IExplorerBrowserEvents, pidlFolder: PCIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.OnNavigationFailed(self, pidlFolder)
converter winim_converter_IExplorerBrowser*(x: ptr IExplorerBrowser): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IExplorerBrowser, hwndParent: HWND, prc: ptr RECT, pfs: ptr FOLDERSETTINGS): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, hwndParent, prc, pfs)
proc Destroy*(self: ptr IExplorerBrowser): HRESULT {.inline, discardable.} = self.lpVtbl.Destroy(self)
proc SetRect*(self: ptr IExplorerBrowser, phdwp: ptr HDWP, rcBrowser: RECT): HRESULT {.inline, discardable.} = self.lpVtbl.SetRect(self, phdwp, rcBrowser)
proc SetPropertyBag*(self: ptr IExplorerBrowser, pszPropertyBag: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetPropertyBag(self, pszPropertyBag)
proc SetEmptyText*(self: ptr IExplorerBrowser, pszEmptyText: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetEmptyText(self, pszEmptyText)
proc SetFolderSettings*(self: ptr IExplorerBrowser, pfs: ptr FOLDERSETTINGS): HRESULT {.inline, discardable.} = self.lpVtbl.SetFolderSettings(self, pfs)
proc Advise*(self: ptr IExplorerBrowser, psbe: ptr IExplorerBrowserEvents, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, psbe, pdwCookie)
proc Unadvise*(self: ptr IExplorerBrowser, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, dwCookie)
proc SetOptions*(self: ptr IExplorerBrowser, dwFlag: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetOptions(self, dwFlag)
proc GetOptions*(self: ptr IExplorerBrowser, pdwFlag: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetOptions(self, pdwFlag)
proc BrowseToIDList*(self: ptr IExplorerBrowser, pidl: PCUIDLIST_RELATIVE, uFlags: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.BrowseToIDList(self, pidl, uFlags)
proc BrowseToObject*(self: ptr IExplorerBrowser, punk: ptr IUnknown, uFlags: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.BrowseToObject(self, punk, uFlags)
proc FillFromObject*(self: ptr IExplorerBrowser, punk: ptr IUnknown, dwFlags: int32): HRESULT {.inline, discardable.} = self.lpVtbl.FillFromObject(self, punk, dwFlags)
proc RemoveAll*(self: ptr IExplorerBrowser): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveAll(self)
proc GetCurrentView*(self: ptr IExplorerBrowser, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurrentView(self, riid, ppv)
converter winim_converter_IAccessibleObject*(x: ptr IAccessibleObject): ptr IUnknown = cast[ptr IUnknown](x)
proc SetAccessibleName*(self: ptr IAccessibleObject, pszName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetAccessibleName(self, pszName)
converter winim_converter_IResultsFolder*(x: ptr IResultsFolder): ptr IUnknown = cast[ptr IUnknown](x)
proc AddItem*(self: ptr IResultsFolder, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.AddItem(self, psi)
proc AddIDList*(self: ptr IResultsFolder, pidl: PCIDLIST_ABSOLUTE, ppidlAdded: ptr PITEMID_CHILD): HRESULT {.inline, discardable.} = self.lpVtbl.AddIDList(self, pidl, ppidlAdded)
proc RemoveItem*(self: ptr IResultsFolder, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveItem(self, psi)
proc RemoveIDList*(self: ptr IResultsFolder, pidl: PCIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveIDList(self, pidl)
proc RemoveAll*(self: ptr IResultsFolder): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveAll(self)
converter winim_converter_IEnumObjects*(x: ptr IEnumObjects): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumObjects, celt: ULONG, riid: REFIID, rgelt: ptr pointer, pceltFetched: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, celt, riid, rgelt, pceltFetched)
proc Skip*(self: ptr IEnumObjects, celt: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, celt)
proc Reset*(self: ptr IEnumObjects): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumObjects, ppenum: ptr ptr IEnumObjects): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, ppenum)
converter winim_converter_IOperationsProgressDialog*(x: ptr IOperationsProgressDialog): ptr IUnknown = cast[ptr IUnknown](x)
proc StartProgressDialog*(self: ptr IOperationsProgressDialog, hwndOwner: HWND, flags: OPPROGDLGF): HRESULT {.inline, discardable.} = self.lpVtbl.StartProgressDialog(self, hwndOwner, flags)
proc StopProgressDialog*(self: ptr IOperationsProgressDialog): HRESULT {.inline, discardable.} = self.lpVtbl.StopProgressDialog(self)
proc SetOperation*(self: ptr IOperationsProgressDialog, action: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetOperation(self, action)
proc SetMode*(self: ptr IOperationsProgressDialog, mode: PDMODE): HRESULT {.inline, discardable.} = self.lpVtbl.SetMode(self, mode)
proc UpdateProgress*(self: ptr IOperationsProgressDialog, ullPointsCurrent: ULONGLONG, ullPointsTotal: ULONGLONG, ullSizeCurrent: ULONGLONG, ullSizeTotal: ULONGLONG, ullItemsCurrent: ULONGLONG, ullItemsTotal: ULONGLONG): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateProgress(self, ullPointsCurrent, ullPointsTotal, ullSizeCurrent, ullSizeTotal, ullItemsCurrent, ullItemsTotal)
proc UpdateLocations*(self: ptr IOperationsProgressDialog, psiSource: ptr IShellItem, psiTarget: ptr IShellItem, psiItem: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateLocations(self, psiSource, psiTarget, psiItem)
proc ResetTimer*(self: ptr IOperationsProgressDialog): HRESULT {.inline, discardable.} = self.lpVtbl.ResetTimer(self)
proc PauseTimer*(self: ptr IOperationsProgressDialog): HRESULT {.inline, discardable.} = self.lpVtbl.PauseTimer(self)
proc ResumeTimer*(self: ptr IOperationsProgressDialog): HRESULT {.inline, discardable.} = self.lpVtbl.ResumeTimer(self)
proc GetMilliseconds*(self: ptr IOperationsProgressDialog, pullElapsed: ptr ULONGLONG, pullRemaining: ptr ULONGLONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetMilliseconds(self, pullElapsed, pullRemaining)
proc GetOperationStatus*(self: ptr IOperationsProgressDialog, popstatus: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetOperationStatus(self, popstatus)
converter winim_converter_IIOCancelInformation*(x: ptr IIOCancelInformation): ptr IUnknown = cast[ptr IUnknown](x)
proc SetCancelInformation*(self: ptr IIOCancelInformation, dwThreadID: DWORD, uMsgCancel: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetCancelInformation(self, dwThreadID, uMsgCancel)
proc GetCancelInformation*(self: ptr IIOCancelInformation, pdwThreadID: ptr DWORD, puMsgCancel: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCancelInformation(self, pdwThreadID, puMsgCancel)
converter winim_converter_IFileOperation*(x: ptr IFileOperation): ptr IUnknown = cast[ptr IUnknown](x)
proc Advise*(self: ptr IFileOperation, pfops: ptr IFileOperationProgressSink, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, pfops, pdwCookie)
proc Unadvise*(self: ptr IFileOperation, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, dwCookie)
proc SetOperationFlags*(self: ptr IFileOperation, dwOperationFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetOperationFlags(self, dwOperationFlags)
proc SetProgressMessage*(self: ptr IFileOperation, pszMessage: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetProgressMessage(self, pszMessage)
proc SetProgressDialog*(self: ptr IFileOperation, popd: ptr IOperationsProgressDialog): HRESULT {.inline, discardable.} = self.lpVtbl.SetProgressDialog(self, popd)
proc SetProperties*(self: ptr IFileOperation, pproparray: ptr IPropertyChangeArray): HRESULT {.inline, discardable.} = self.lpVtbl.SetProperties(self, pproparray)
proc SetOwnerWindow*(self: ptr IFileOperation, hwndOwner: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.SetOwnerWindow(self, hwndOwner)
proc ApplyPropertiesToItem*(self: ptr IFileOperation, psiItem: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.ApplyPropertiesToItem(self, psiItem)
proc ApplyPropertiesToItems*(self: ptr IFileOperation, punkItems: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.ApplyPropertiesToItems(self, punkItems)
proc RenameItem*(self: ptr IFileOperation, psiItem: ptr IShellItem, pszNewName: LPCWSTR, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.RenameItem(self, psiItem, pszNewName, pfopsItem)
proc RenameItems*(self: ptr IFileOperation, pUnkItems: ptr IUnknown, pszNewName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.RenameItems(self, pUnkItems, pszNewName)
proc MoveItem*(self: ptr IFileOperation, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.MoveItem(self, psiItem, psiDestinationFolder, pszNewName, pfopsItem)
proc MoveItems*(self: ptr IFileOperation, punkItems: ptr IUnknown, psiDestinationFolder: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.MoveItems(self, punkItems, psiDestinationFolder)
proc CopyItem*(self: ptr IFileOperation, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszCopyName: LPCWSTR, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.CopyItem(self, psiItem, psiDestinationFolder, pszCopyName, pfopsItem)
proc CopyItems*(self: ptr IFileOperation, punkItems: ptr IUnknown, psiDestinationFolder: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.CopyItems(self, punkItems, psiDestinationFolder)
proc DeleteItem*(self: ptr IFileOperation, psiItem: ptr IShellItem, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.DeleteItem(self, psiItem, pfopsItem)
proc DeleteItems*(self: ptr IFileOperation, punkItems: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.DeleteItems(self, punkItems)
proc NewItem*(self: ptr IFileOperation, psiDestinationFolder: ptr IShellItem, dwFileAttributes: DWORD, pszName: LPCWSTR, pszTemplateName: LPCWSTR, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.NewItem(self, psiDestinationFolder, dwFileAttributes, pszName, pszTemplateName, pfopsItem)
proc PerformOperations*(self: ptr IFileOperation): HRESULT {.inline, discardable.} = self.lpVtbl.PerformOperations(self)
proc GetAnyOperationsAborted*(self: ptr IFileOperation, pfAnyOperationsAborted: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetAnyOperationsAborted(self, pfAnyOperationsAborted)
converter winim_converter_IObjectProvider*(x: ptr IObjectProvider): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryObject*(self: ptr IObjectProvider, guidObject: REFGUID, riid: REFIID, ppvOut: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.QueryObject(self, guidObject, riid, ppvOut)
converter winim_converter_INamespaceWalkCB*(x: ptr INamespaceWalkCB): ptr IUnknown = cast[ptr IUnknown](x)
proc FoundItem*(self: ptr INamespaceWalkCB, psf: ptr IShellFolder, pidl: PCUITEMID_CHILD): HRESULT {.inline, discardable.} = self.lpVtbl.FoundItem(self, psf, pidl)
proc EnterFolder*(self: ptr INamespaceWalkCB, psf: ptr IShellFolder, pidl: PCUITEMID_CHILD): HRESULT {.inline, discardable.} = self.lpVtbl.EnterFolder(self, psf, pidl)
proc LeaveFolder*(self: ptr INamespaceWalkCB, psf: ptr IShellFolder, pidl: PCUITEMID_CHILD): HRESULT {.inline, discardable.} = self.lpVtbl.LeaveFolder(self, psf, pidl)
proc InitializeProgressDialog*(self: ptr INamespaceWalkCB, ppszTitle: ptr LPWSTR, ppszCancel: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.InitializeProgressDialog(self, ppszTitle, ppszCancel)
converter winim_converter_INamespaceWalkCB2*(x: ptr INamespaceWalkCB2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_INamespaceWalkCB2*(x: ptr INamespaceWalkCB2): ptr INamespaceWalkCB = cast[ptr INamespaceWalkCB](x)
proc WalkComplete*(self: ptr INamespaceWalkCB2, hr: HRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.WalkComplete(self, hr)
converter winim_converter_INamespaceWalk*(x: ptr INamespaceWalk): ptr IUnknown = cast[ptr IUnknown](x)
proc Walk*(self: ptr INamespaceWalk, punkToWalk: ptr IUnknown, dwFlags: DWORD, cDepth: int32, pnswcb: ptr INamespaceWalkCB): HRESULT {.inline, discardable.} = self.lpVtbl.Walk(self, punkToWalk, dwFlags, cDepth, pnswcb)
proc GetIDArrayResult*(self: ptr INamespaceWalk, pcItems: ptr UINT, prgpidl: ptr ptr PIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.GetIDArrayResult(self, pcItems, prgpidl)
converter winim_converter_IAutoCompleteDropDown*(x: ptr IAutoCompleteDropDown): ptr IUnknown = cast[ptr IUnknown](x)
proc GetDropDownStatus*(self: ptr IAutoCompleteDropDown, pdwFlags: ptr DWORD, ppwszString: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDropDownStatus(self, pdwFlags, ppwszString)
proc ResetEnumerator*(self: ptr IAutoCompleteDropDown): HRESULT {.inline, discardable.} = self.lpVtbl.ResetEnumerator(self)
converter winim_converter_IBandSite*(x: ptr IBandSite): ptr IUnknown = cast[ptr IUnknown](x)
proc AddBand*(self: ptr IBandSite, punk: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.AddBand(self, punk)
proc EnumBands*(self: ptr IBandSite, uBand: UINT, pdwBandID: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.EnumBands(self, uBand, pdwBandID)
proc QueryBand*(self: ptr IBandSite, dwBandID: DWORD, ppstb: ptr ptr IDeskBand, pdwState: ptr DWORD, pszName: LPWSTR, cchName: int32): HRESULT {.inline, discardable.} = self.lpVtbl.QueryBand(self, dwBandID, ppstb, pdwState, pszName, cchName)
proc SetBandState*(self: ptr IBandSite, dwBandID: DWORD, dwMask: DWORD, dwState: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetBandState(self, dwBandID, dwMask, dwState)
proc RemoveBand*(self: ptr IBandSite, dwBandID: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveBand(self, dwBandID)
proc GetBandObject*(self: ptr IBandSite, dwBandID: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetBandObject(self, dwBandID, riid, ppv)
proc SetBandSiteInfo*(self: ptr IBandSite, pbsinfo: ptr BANDSITEINFO): HRESULT {.inline, discardable.} = self.lpVtbl.SetBandSiteInfo(self, pbsinfo)
proc GetBandSiteInfo*(self: ptr IBandSite, pbsinfo: ptr BANDSITEINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetBandSiteInfo(self, pbsinfo)
converter winim_converter_IModalWindow*(x: ptr IModalWindow): ptr IUnknown = cast[ptr IUnknown](x)
proc Show*(self: ptr IModalWindow, hwndOwner: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.Show(self, hwndOwner)
converter winim_converter_ICDBurnExt*(x: ptr ICDBurnExt): ptr IUnknown = cast[ptr IUnknown](x)
proc GetSupportedActionTypes*(self: ptr ICDBurnExt, pdwActions: ptr CDBE_ACTIONS): HRESULT {.inline, discardable.} = self.lpVtbl.GetSupportedActionTypes(self, pdwActions)
converter winim_converter_IContextMenuSite*(x: ptr IContextMenuSite): ptr IUnknown = cast[ptr IUnknown](x)
proc DoContextMenuPopup*(self: ptr IContextMenuSite, punkContextMenu: ptr IUnknown, fFlags: UINT, pt: POINT): HRESULT {.inline, discardable.} = self.lpVtbl.DoContextMenuPopup(self, punkContextMenu, fFlags, pt)
converter winim_converter_IEnumReadyCallback*(x: ptr IEnumReadyCallback): ptr IUnknown = cast[ptr IUnknown](x)
proc EnumReady*(self: ptr IEnumReadyCallback): HRESULT {.inline, discardable.} = self.lpVtbl.EnumReady(self)
converter winim_converter_IEnumerableView*(x: ptr IEnumerableView): ptr IUnknown = cast[ptr IUnknown](x)
proc SetEnumReadyCallback*(self: ptr IEnumerableView, percb: ptr IEnumReadyCallback): HRESULT {.inline, discardable.} = self.lpVtbl.SetEnumReadyCallback(self, percb)
proc CreateEnumIDListFromContents*(self: ptr IEnumerableView, pidlFolder: PCIDLIST_ABSOLUTE, dwEnumFlags: DWORD, ppEnumIDList: ptr ptr IEnumIDList): HRESULT {.inline, discardable.} = self.lpVtbl.CreateEnumIDListFromContents(self, pidlFolder, dwEnumFlags, ppEnumIDList)
converter winim_converter_IInsertItem*(x: ptr IInsertItem): ptr IUnknown = cast[ptr IUnknown](x)
proc InsertItem*(self: ptr IInsertItem, pidl: PCUIDLIST_RELATIVE): HRESULT {.inline, discardable.} = self.lpVtbl.InsertItem(self, pidl)
converter winim_converter_IMenuBand*(x: ptr IMenuBand): ptr IUnknown = cast[ptr IUnknown](x)
proc IsMenuMessage*(self: ptr IMenuBand, pmsg: ptr MSG): HRESULT {.inline, discardable.} = self.lpVtbl.IsMenuMessage(self, pmsg)
proc TranslateMenuMessage*(self: ptr IMenuBand, pmsg: ptr MSG, plRet: ptr LRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateMenuMessage(self, pmsg, plRet)
converter winim_converter_IFolderBandPriv*(x: ptr IFolderBandPriv): ptr IUnknown = cast[ptr IUnknown](x)
proc SetCascade*(self: ptr IFolderBandPriv, fCascade: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetCascade(self, fCascade)
proc SetAccelerators*(self: ptr IFolderBandPriv, fAccelerators: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetAccelerators(self, fAccelerators)
proc SetNoIcons*(self: ptr IFolderBandPriv, fNoIcons: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetNoIcons(self, fNoIcons)
proc SetNoText*(self: ptr IFolderBandPriv, fNoText: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetNoText(self, fNoText)
converter winim_converter_IRegTreeItem*(x: ptr IRegTreeItem): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCheckState*(self: ptr IRegTreeItem, pbCheck: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetCheckState(self, pbCheck)
proc SetCheckState*(self: ptr IRegTreeItem, bCheck: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetCheckState(self, bCheck)
converter winim_converter_IImageRecompress*(x: ptr IImageRecompress): ptr IUnknown = cast[ptr IUnknown](x)
proc RecompressImage*(self: ptr IImageRecompress, psi: ptr IShellItem, cx: int32, cy: int32, iQuality: int32, pstg: ptr IStorage, ppstrmOut: ptr ptr IStream): HRESULT {.inline, discardable.} = self.lpVtbl.RecompressImage(self, psi, cx, cy, iQuality, pstg, ppstrmOut)
converter winim_converter_IDeskBar*(x: ptr IDeskBar): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IDeskBar*(x: ptr IDeskBar): ptr IOleWindow = cast[ptr IOleWindow](x)
proc SetClient*(self: ptr IDeskBar, punkClient: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.SetClient(self, punkClient)
proc GetClient*(self: ptr IDeskBar, ppunkClient: ptr ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.GetClient(self, ppunkClient)
proc OnPosRectChangeDB*(self: ptr IDeskBar, prc: ptr RECT): HRESULT {.inline, discardable.} = self.lpVtbl.OnPosRectChangeDB(self, prc)
converter winim_converter_IMenuPopup*(x: ptr IMenuPopup): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IMenuPopup*(x: ptr IMenuPopup): ptr IDeskBar = cast[ptr IDeskBar](x)
converter winim_converter_IMenuPopup*(x: ptr IMenuPopup): ptr IOleWindow = cast[ptr IOleWindow](x)
proc Popup*(self: ptr IMenuPopup, ppt: ptr POINTL, prcExclude: ptr RECTL, dwFlags: MP_POPUPFLAGS): HRESULT {.inline, discardable.} = self.lpVtbl.Popup(self, ppt, prcExclude, dwFlags)
proc OnSelect*(self: ptr IMenuPopup, dwSelectType: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnSelect(self, dwSelectType)
proc SetSubMenu*(self: ptr IMenuPopup, pmp: ptr IMenuPopup, fSet: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetSubMenu(self, pmp, fSet)
converter winim_converter_IFileIsInUse*(x: ptr IFileIsInUse): ptr IUnknown = cast[ptr IUnknown](x)
proc GetAppName*(self: ptr IFileIsInUse, ppszName: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetAppName(self, ppszName)
proc GetUsage*(self: ptr IFileIsInUse, pfut: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetUsage(self, pfut)
proc GetCapabilities*(self: ptr IFileIsInUse, pdwCapFlags: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetCapabilities(self, pdwCapFlags)
proc GetSwitchToHWND*(self: ptr IFileIsInUse, phwnd: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.GetSwitchToHWND(self, phwnd)
proc CloseFile*(self: ptr IFileIsInUse): HRESULT {.inline, discardable.} = self.lpVtbl.CloseFile(self)
converter winim_converter_IFileDialogEvents*(x: ptr IFileDialogEvents): ptr IUnknown = cast[ptr IUnknown](x)
proc OnFileOk*(self: ptr IFileDialogEvents, pfd: ptr IFileDialog): HRESULT {.inline, discardable.} = self.lpVtbl.OnFileOk(self, pfd)
proc OnFolderChanging*(self: ptr IFileDialogEvents, pfd: ptr IFileDialog, psiFolder: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnFolderChanging(self, pfd, psiFolder)
proc OnFolderChange*(self: ptr IFileDialogEvents, pfd: ptr IFileDialog): HRESULT {.inline, discardable.} = self.lpVtbl.OnFolderChange(self, pfd)
proc OnSelectionChange*(self: ptr IFileDialogEvents, pfd: ptr IFileDialog): HRESULT {.inline, discardable.} = self.lpVtbl.OnSelectionChange(self, pfd)
proc OnShareViolation*(self: ptr IFileDialogEvents, pfd: ptr IFileDialog, psi: ptr IShellItem, pResponse: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.OnShareViolation(self, pfd, psi, pResponse)
proc OnTypeChange*(self: ptr IFileDialogEvents, pfd: ptr IFileDialog): HRESULT {.inline, discardable.} = self.lpVtbl.OnTypeChange(self, pfd)
proc OnOverwrite*(self: ptr IFileDialogEvents, pfd: ptr IFileDialog, psi: ptr IShellItem, pResponse: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.OnOverwrite(self, pfd, psi, pResponse)
converter winim_converter_IFileDialog*(x: ptr IFileDialog): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IFileDialog*(x: ptr IFileDialog): ptr IModalWindow = cast[ptr IModalWindow](x)
proc SetFileTypes*(self: ptr IFileDialog, cFileTypes: UINT, rgFilterSpec: ptr COMDLG_FILTERSPEC): HRESULT {.inline, discardable.} = self.lpVtbl.SetFileTypes(self, cFileTypes, rgFilterSpec)
proc SetFileTypeIndex*(self: ptr IFileDialog, iFileType: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetFileTypeIndex(self, iFileType)
proc GetFileTypeIndex*(self: ptr IFileDialog, piFileType: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetFileTypeIndex(self, piFileType)
proc Advise*(self: ptr IFileDialog, pfde: ptr IFileDialogEvents, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, pfde, pdwCookie)
proc Unadvise*(self: ptr IFileDialog, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, dwCookie)
proc SetOptions*(self: ptr IFileDialog, fos: FILEOPENDIALOGOPTIONS): HRESULT {.inline, discardable.} = self.lpVtbl.SetOptions(self, fos)
proc GetOptions*(self: ptr IFileDialog, pfos: ptr FILEOPENDIALOGOPTIONS): HRESULT {.inline, discardable.} = self.lpVtbl.GetOptions(self, pfos)
proc SetDefaultFolder*(self: ptr IFileDialog, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.SetDefaultFolder(self, psi)
proc SetFolder*(self: ptr IFileDialog, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.SetFolder(self, psi)
proc GetFolder*(self: ptr IFileDialog, ppsi: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolder(self, ppsi)
proc GetCurrentSelection*(self: ptr IFileDialog, ppsi: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurrentSelection(self, ppsi)
proc SetFileName*(self: ptr IFileDialog, pszName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetFileName(self, pszName)
proc GetFileName*(self: ptr IFileDialog, pszName: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetFileName(self, pszName)
proc SetTitle*(self: ptr IFileDialog, pszTitle: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetTitle(self, pszTitle)
proc SetOkButtonLabel*(self: ptr IFileDialog, pszText: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetOkButtonLabel(self, pszText)
proc SetFileNameLabel*(self: ptr IFileDialog, pszLabel: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetFileNameLabel(self, pszLabel)
proc GetResult*(self: ptr IFileDialog, ppsi: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.GetResult(self, ppsi)
proc AddPlace*(self: ptr IFileDialog, psi: ptr IShellItem, fdap: int32): HRESULT {.inline, discardable.} = self.lpVtbl.AddPlace(self, psi, fdap)
proc SetDefaultExtension*(self: ptr IFileDialog, pszDefaultExtension: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetDefaultExtension(self, pszDefaultExtension)
proc Close*(self: ptr IFileDialog, hr: HRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.Close(self, hr)
proc SetClientGuid*(self: ptr IFileDialog, guid: REFGUID): HRESULT {.inline, discardable.} = self.lpVtbl.SetClientGuid(self, guid)
proc ClearClientData*(self: ptr IFileDialog): HRESULT {.inline, discardable.} = self.lpVtbl.ClearClientData(self)
proc SetFilter*(self: ptr IFileDialog, pFilter: ptr IShellItemFilter): HRESULT {.inline, discardable.} = self.lpVtbl.SetFilter(self, pFilter)
converter winim_converter_IFileSaveDialog*(x: ptr IFileSaveDialog): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IFileSaveDialog*(x: ptr IFileSaveDialog): ptr IFileDialog = cast[ptr IFileDialog](x)
converter winim_converter_IFileSaveDialog*(x: ptr IFileSaveDialog): ptr IModalWindow = cast[ptr IModalWindow](x)
proc SetSaveAsItem*(self: ptr IFileSaveDialog, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.SetSaveAsItem(self, psi)
proc SetProperties*(self: ptr IFileSaveDialog, pStore: ptr IPropertyStore): HRESULT {.inline, discardable.} = self.lpVtbl.SetProperties(self, pStore)
proc SetCollectedProperties*(self: ptr IFileSaveDialog, pList: ptr IPropertyDescriptionList, fAppendDefault: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetCollectedProperties(self, pList, fAppendDefault)
proc GetProperties*(self: ptr IFileSaveDialog, ppStore: ptr ptr IPropertyStore): HRESULT {.inline, discardable.} = self.lpVtbl.GetProperties(self, ppStore)
proc ApplyProperties*(self: ptr IFileSaveDialog, psi: ptr IShellItem, pStore: ptr IPropertyStore, hwnd: HWND, pSink: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.ApplyProperties(self, psi, pStore, hwnd, pSink)
converter winim_converter_IFileOpenDialog*(x: ptr IFileOpenDialog): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IFileOpenDialog*(x: ptr IFileOpenDialog): ptr IFileDialog = cast[ptr IFileDialog](x)
converter winim_converter_IFileOpenDialog*(x: ptr IFileOpenDialog): ptr IModalWindow = cast[ptr IModalWindow](x)
proc GetResults*(self: ptr IFileOpenDialog, ppenum: ptr ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.GetResults(self, ppenum)
proc GetSelectedItems*(self: ptr IFileOpenDialog, ppsai: ptr ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.GetSelectedItems(self, ppsai)
converter winim_converter_IFileDialogCustomize*(x: ptr IFileDialogCustomize): ptr IUnknown = cast[ptr IUnknown](x)
proc EnableOpenDropDown*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.EnableOpenDropDown(self, dwIDCtl)
proc AddMenu*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.AddMenu(self, dwIDCtl, pszLabel)
proc AddPushButton*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.AddPushButton(self, dwIDCtl, pszLabel)
proc AddComboBox*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.AddComboBox(self, dwIDCtl)
proc AddRadioButtonList*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.AddRadioButtonList(self, dwIDCtl)
proc AddCheckButton*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR, bChecked: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.AddCheckButton(self, dwIDCtl, pszLabel, bChecked)
proc AddEditBox*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszText: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.AddEditBox(self, dwIDCtl, pszText)
proc AddSeparator*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.AddSeparator(self, dwIDCtl)
proc AddText*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszText: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.AddText(self, dwIDCtl, pszText)
proc SetControlLabel*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetControlLabel(self, dwIDCtl, pszLabel)
proc GetControlState*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pdwState: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetControlState(self, dwIDCtl, pdwState)
proc SetControlState*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwState: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetControlState(self, dwIDCtl, dwState)
proc GetEditBoxText*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, ppszText: ptr ptr WCHAR): HRESULT {.inline, discardable.} = self.lpVtbl.GetEditBoxText(self, dwIDCtl, ppszText)
proc SetEditBoxText*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszText: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetEditBoxText(self, dwIDCtl, pszText)
proc GetCheckButtonState*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pbChecked: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetCheckButtonState(self, dwIDCtl, pbChecked)
proc SetCheckButtonState*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, bChecked: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetCheckButtonState(self, dwIDCtl, bChecked)
proc AddControlItem*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD, pszLabel: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.AddControlItem(self, dwIDCtl, dwIDItem, pszLabel)
proc RemoveControlItem*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveControlItem(self, dwIDCtl, dwIDItem)
proc RemoveAllControlItems*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveAllControlItems(self, dwIDCtl)
proc GetControlItemState*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD, pdwState: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetControlItemState(self, dwIDCtl, dwIDItem, pdwState)
proc SetControlItemState*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD, dwState: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetControlItemState(self, dwIDCtl, dwIDItem, dwState)
proc GetSelectedControlItem*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pdwIDItem: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetSelectedControlItem(self, dwIDCtl, pdwIDItem)
proc SetSelectedControlItem*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetSelectedControlItem(self, dwIDCtl, dwIDItem)
proc StartVisualGroup*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.StartVisualGroup(self, dwIDCtl, pszLabel)
proc EndVisualGroup*(self: ptr IFileDialogCustomize): HRESULT {.inline, discardable.} = self.lpVtbl.EndVisualGroup(self)
proc MakeProminent*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.MakeProminent(self, dwIDCtl)
proc SetControlItemText*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD, pszLabel: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetControlItemText(self, dwIDCtl, dwIDItem, pszLabel)
converter winim_converter_IFileDialogControlEvents*(x: ptr IFileDialogControlEvents): ptr IUnknown = cast[ptr IUnknown](x)
proc OnItemSelected*(self: ptr IFileDialogControlEvents, pfdc: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnItemSelected(self, pfdc, dwIDCtl, dwIDItem)
proc OnButtonClicked*(self: ptr IFileDialogControlEvents, pfdc: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnButtonClicked(self, pfdc, dwIDCtl)
proc OnCheckButtonToggled*(self: ptr IFileDialogControlEvents, pfdc: ptr IFileDialogCustomize, dwIDCtl: DWORD, bChecked: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnCheckButtonToggled(self, pfdc, dwIDCtl, bChecked)
proc OnControlActivating*(self: ptr IFileDialogControlEvents, pfdc: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnControlActivating(self, pfdc, dwIDCtl)
converter winim_converter_IFileDialog2*(x: ptr IFileDialog2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IFileDialog2*(x: ptr IFileDialog2): ptr IFileDialog = cast[ptr IFileDialog](x)
converter winim_converter_IFileDialog2*(x: ptr IFileDialog2): ptr IModalWindow = cast[ptr IModalWindow](x)
proc SetCancelButtonLabel*(self: ptr IFileDialog2, pszLabel: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetCancelButtonLabel(self, pszLabel)
proc SetNavigationRoot*(self: ptr IFileDialog2, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.SetNavigationRoot(self, psi)
converter winim_converter_IApplicationAssociationRegistration*(x: ptr IApplicationAssociationRegistration): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryCurrentDefault*(self: ptr IApplicationAssociationRegistration, pszQuery: LPCWSTR, atQueryType: int32, alQueryLevel: int32, ppszAssociation: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.QueryCurrentDefault(self, pszQuery, atQueryType, alQueryLevel, ppszAssociation)
proc QueryAppIsDefault*(self: ptr IApplicationAssociationRegistration, pszQuery: LPCWSTR, atQueryType: int32, alQueryLevel: int32, pszAppRegistryName: LPCWSTR, pfDefault: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.QueryAppIsDefault(self, pszQuery, atQueryType, alQueryLevel, pszAppRegistryName, pfDefault)
proc QueryAppIsDefaultAll*(self: ptr IApplicationAssociationRegistration, alQueryLevel: int32, pszAppRegistryName: LPCWSTR, pfDefault: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.QueryAppIsDefaultAll(self, alQueryLevel, pszAppRegistryName, pfDefault)
proc SetAppAsDefault*(self: ptr IApplicationAssociationRegistration, pszAppRegistryName: LPCWSTR, pszSet: LPCWSTR, atSetType: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetAppAsDefault(self, pszAppRegistryName, pszSet, atSetType)
proc SetAppAsDefaultAll*(self: ptr IApplicationAssociationRegistration, pszAppRegistryName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetAppAsDefaultAll(self, pszAppRegistryName)
proc ClearUserAssociations*(self: ptr IApplicationAssociationRegistration): HRESULT {.inline, discardable.} = self.lpVtbl.ClearUserAssociations(self)
converter winim_converter_IApplicationAssociationRegistrationUI*(x: ptr IApplicationAssociationRegistrationUI): ptr IUnknown = cast[ptr IUnknown](x)
proc LaunchAdvancedAssociationUI*(self: ptr IApplicationAssociationRegistrationUI, pszAppRegistryName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.LaunchAdvancedAssociationUI(self, pszAppRegistryName)
converter winim_converter_IDelegateFolder*(x: ptr IDelegateFolder): ptr IUnknown = cast[ptr IUnknown](x)
proc SetItemAlloc*(self: ptr IDelegateFolder, pmalloc: ptr IMalloc): HRESULT {.inline, discardable.} = self.lpVtbl.SetItemAlloc(self, pmalloc)
converter winim_converter_IBrowserFrameOptions*(x: ptr IBrowserFrameOptions): ptr IUnknown = cast[ptr IUnknown](x)
proc GetFrameOptions*(self: ptr IBrowserFrameOptions, dwMask: BROWSERFRAMEOPTIONS, pdwOptions: ptr BROWSERFRAMEOPTIONS): HRESULT {.inline, discardable.} = self.lpVtbl.GetFrameOptions(self, dwMask, pdwOptions)
converter winim_converter_INewWindowManager*(x: ptr INewWindowManager): ptr IUnknown = cast[ptr IUnknown](x)
proc EvaluateNewWindow*(self: ptr INewWindowManager, pszUrl: LPCWSTR, pszName: LPCWSTR, pszUrlContext: LPCWSTR, pszFeatures: LPCWSTR, fReplace: WINBOOL, dwFlags: DWORD, dwUserActionTime: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.EvaluateNewWindow(self, pszUrl, pszName, pszUrlContext, pszFeatures, fReplace, dwFlags, dwUserActionTime)
converter winim_converter_IAttachmentExecute*(x: ptr IAttachmentExecute): ptr IUnknown = cast[ptr IUnknown](x)
proc SetClientTitle*(self: ptr IAttachmentExecute, pszTitle: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetClientTitle(self, pszTitle)
proc SetClientGuid*(self: ptr IAttachmentExecute, guid: REFGUID): HRESULT {.inline, discardable.} = self.lpVtbl.SetClientGuid(self, guid)
proc SetLocalPath*(self: ptr IAttachmentExecute, pszLocalPath: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetLocalPath(self, pszLocalPath)
proc SetFileName*(self: ptr IAttachmentExecute, pszFileName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetFileName(self, pszFileName)
proc SetSource*(self: ptr IAttachmentExecute, pszSource: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetSource(self, pszSource)
proc SetReferrer*(self: ptr IAttachmentExecute, pszReferrer: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetReferrer(self, pszReferrer)
proc CheckPolicy*(self: ptr IAttachmentExecute): HRESULT {.inline, discardable.} = self.lpVtbl.CheckPolicy(self)
proc Prompt*(self: ptr IAttachmentExecute, hwnd: HWND, prompt: int32, paction: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.Prompt(self, hwnd, prompt, paction)
proc Save*(self: ptr IAttachmentExecute): HRESULT {.inline, discardable.} = self.lpVtbl.Save(self)
proc Execute*(self: ptr IAttachmentExecute, hwnd: HWND, pszVerb: LPCWSTR, phProcess: ptr HANDLE): HRESULT {.inline, discardable.} = self.lpVtbl.Execute(self, hwnd, pszVerb, phProcess)
proc SaveWithUI*(self: ptr IAttachmentExecute, hwnd: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.SaveWithUI(self, hwnd)
proc ClearClientState*(self: ptr IAttachmentExecute): HRESULT {.inline, discardable.} = self.lpVtbl.ClearClientState(self)
converter winim_converter_IShellMenuCallback*(x: ptr IShellMenuCallback): ptr IUnknown = cast[ptr IUnknown](x)
proc CallbackSM*(self: ptr IShellMenuCallback, psmd: LPSMDATA, uMsg: UINT, wParam: WPARAM, lParam: LPARAM): HRESULT {.inline, discardable.} = self.lpVtbl.CallbackSM(self, psmd, uMsg, wParam, lParam)
converter winim_converter_IShellMenu*(x: ptr IShellMenu): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IShellMenu, psmc: ptr IShellMenuCallback, uId: UINT, uIdAncestor: UINT, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, psmc, uId, uIdAncestor, dwFlags)
proc GetMenuInfo*(self: ptr IShellMenu, ppsmc: ptr ptr IShellMenuCallback, puId: ptr UINT, puIdAncestor: ptr UINT, pdwFlags: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetMenuInfo(self, ppsmc, puId, puIdAncestor, pdwFlags)
proc SetShellFolder*(self: ptr IShellMenu, psf: ptr IShellFolder, pidlFolder: PCIDLIST_ABSOLUTE, hKey: HKEY, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetShellFolder(self, psf, pidlFolder, hKey, dwFlags)
proc GetShellFolder*(self: ptr IShellMenu, pdwFlags: ptr DWORD, ppidl: ptr PIDLIST_ABSOLUTE, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetShellFolder(self, pdwFlags, ppidl, riid, ppv)
proc SetMenu*(self: ptr IShellMenu, hmenu: HMENU, hwnd: HWND, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetMenu(self, hmenu, hwnd, dwFlags)
proc GetMenu*(self: ptr IShellMenu, phmenu: ptr HMENU, phwnd: ptr HWND, pdwFlags: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetMenu(self, phmenu, phwnd, pdwFlags)
proc InvalidateItem*(self: ptr IShellMenu, psmd: LPSMDATA, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.InvalidateItem(self, psmd, dwFlags)
proc GetState*(self: ptr IShellMenu, psmd: LPSMDATA): HRESULT {.inline, discardable.} = self.lpVtbl.GetState(self, psmd)
proc SetMenuToolbar*(self: ptr IShellMenu, punk: ptr IUnknown, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetMenuToolbar(self, punk, dwFlags)
converter winim_converter_IShellRunDll*(x: ptr IShellRunDll): ptr IUnknown = cast[ptr IUnknown](x)
proc Run*(self: ptr IShellRunDll, pszArgs: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.Run(self, pszArgs)
converter winim_converter_IKnownFolder*(x: ptr IKnownFolder): ptr IUnknown = cast[ptr IUnknown](x)
proc GetId*(self: ptr IKnownFolder, pkfid: ptr KNOWNFOLDERID): HRESULT {.inline, discardable.} = self.lpVtbl.GetId(self, pkfid)
proc GetCategory*(self: ptr IKnownFolder, pCategory: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetCategory(self, pCategory)
proc GetShellItem*(self: ptr IKnownFolder, dwFlags: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetShellItem(self, dwFlags, riid, ppv)
proc GetPath*(self: ptr IKnownFolder, dwFlags: DWORD, ppszPath: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetPath(self, dwFlags, ppszPath)
proc SetPath*(self: ptr IKnownFolder, dwFlags: DWORD, pszPath: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetPath(self, dwFlags, pszPath)
proc GetIDList*(self: ptr IKnownFolder, dwFlags: DWORD, ppidl: ptr PIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.GetIDList(self, dwFlags, ppidl)
proc GetFolderType*(self: ptr IKnownFolder, pftid: ptr FOLDERTYPEID): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolderType(self, pftid)
proc GetRedirectionCapabilities*(self: ptr IKnownFolder, pCapabilities: ptr KF_REDIRECTION_CAPABILITIES): HRESULT {.inline, discardable.} = self.lpVtbl.GetRedirectionCapabilities(self, pCapabilities)
proc GetFolderDefinition*(self: ptr IKnownFolder, pKFD: ptr KNOWNFOLDER_DEFINITION): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolderDefinition(self, pKFD)
converter winim_converter_IKnownFolderManager*(x: ptr IKnownFolderManager): ptr IUnknown = cast[ptr IUnknown](x)
proc FolderIdFromCsidl*(self: ptr IKnownFolderManager, nCsidl: int32, pfid: ptr KNOWNFOLDERID): HRESULT {.inline, discardable.} = self.lpVtbl.FolderIdFromCsidl(self, nCsidl, pfid)
proc FolderIdToCsidl*(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID, pnCsidl: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.FolderIdToCsidl(self, rfid, pnCsidl)
proc GetFolderIds*(self: ptr IKnownFolderManager, ppKFId: ptr ptr KNOWNFOLDERID, pCount: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolderIds(self, ppKFId, pCount)
proc GetFolder*(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID, ppkf: ptr ptr IKnownFolder): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolder(self, rfid, ppkf)
proc GetFolderByName*(self: ptr IKnownFolderManager, pszCanonicalName: LPCWSTR, ppkf: ptr ptr IKnownFolder): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolderByName(self, pszCanonicalName, ppkf)
proc RegisterFolder*(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID, pKFD: ptr KNOWNFOLDER_DEFINITION): HRESULT {.inline, discardable.} = self.lpVtbl.RegisterFolder(self, rfid, pKFD)
proc UnregisterFolder*(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID): HRESULT {.inline, discardable.} = self.lpVtbl.UnregisterFolder(self, rfid)
proc FindFolderFromPath*(self: ptr IKnownFolderManager, pszPath: LPCWSTR, mode: int32, ppkf: ptr ptr IKnownFolder): HRESULT {.inline, discardable.} = self.lpVtbl.FindFolderFromPath(self, pszPath, mode, ppkf)
proc FindFolderFromIDList*(self: ptr IKnownFolderManager, pidl: PCIDLIST_ABSOLUTE, ppkf: ptr ptr IKnownFolder): HRESULT {.inline, discardable.} = self.lpVtbl.FindFolderFromIDList(self, pidl, ppkf)
proc Redirect*(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID, hwnd: HWND, flags: KF_REDIRECT_FLAGS, pszTargetPath: LPCWSTR, cFolders: UINT, pExclusion: ptr KNOWNFOLDERID, ppszError: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.Redirect(self, rfid, hwnd, flags, pszTargetPath, cFolders, pExclusion, ppszError)
converter winim_converter_ISharingConfigurationManager*(x: ptr ISharingConfigurationManager): ptr IUnknown = cast[ptr IUnknown](x)
proc CreateShare*(self: ptr ISharingConfigurationManager, dsid: int32, role: int32): HRESULT {.inline, discardable.} = self.lpVtbl.CreateShare(self, dsid, role)
proc DeleteShare*(self: ptr ISharingConfigurationManager, dsid: int32): HRESULT {.inline, discardable.} = self.lpVtbl.DeleteShare(self, dsid)
proc ShareExists*(self: ptr ISharingConfigurationManager, dsid: int32): HRESULT {.inline, discardable.} = self.lpVtbl.ShareExists(self, dsid)
proc GetSharePermissions*(self: ptr ISharingConfigurationManager, dsid: int32, pRole: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetSharePermissions(self, dsid, pRole)
proc SharePrinters*(self: ptr ISharingConfigurationManager): HRESULT {.inline, discardable.} = self.lpVtbl.SharePrinters(self)
proc StopSharingPrinters*(self: ptr ISharingConfigurationManager): HRESULT {.inline, discardable.} = self.lpVtbl.StopSharingPrinters(self)
proc ArePrintersShared*(self: ptr ISharingConfigurationManager): HRESULT {.inline, discardable.} = self.lpVtbl.ArePrintersShared(self)
converter winim_converter_IPreviousVersionsInfo*(x: ptr IPreviousVersionsInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc AreSnapshotsAvailable*(self: ptr IPreviousVersionsInfo, pszPath: LPCWSTR, fOkToBeSlow: WINBOOL, pfAvailable: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.AreSnapshotsAvailable(self, pszPath, fOkToBeSlow, pfAvailable)
converter winim_converter_IRelatedItem*(x: ptr IRelatedItem): ptr IUnknown = cast[ptr IUnknown](x)
proc GetItemIDList*(self: ptr IRelatedItem, ppidl: ptr PIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemIDList(self, ppidl)
proc GetItem*(self: ptr IRelatedItem, ppsi: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.GetItem(self, ppsi)
converter winim_converter_IIdentityName*(x: ptr IIdentityName): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IIdentityName*(x: ptr IIdentityName): ptr IRelatedItem = cast[ptr IRelatedItem](x)
converter winim_converter_IDelegateItem*(x: ptr IDelegateItem): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IDelegateItem*(x: ptr IDelegateItem): ptr IRelatedItem = cast[ptr IRelatedItem](x)
converter winim_converter_ICurrentItem*(x: ptr ICurrentItem): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ICurrentItem*(x: ptr ICurrentItem): ptr IRelatedItem = cast[ptr IRelatedItem](x)
converter winim_converter_ITransferMediumItem*(x: ptr ITransferMediumItem): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ITransferMediumItem*(x: ptr ITransferMediumItem): ptr IRelatedItem = cast[ptr IRelatedItem](x)
converter winim_converter_IUseToBrowseItem*(x: ptr IUseToBrowseItem): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IUseToBrowseItem*(x: ptr IUseToBrowseItem): ptr IRelatedItem = cast[ptr IRelatedItem](x)
converter winim_converter_IDisplayItem*(x: ptr IDisplayItem): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IDisplayItem*(x: ptr IDisplayItem): ptr IRelatedItem = cast[ptr IRelatedItem](x)
converter winim_converter_IViewStateIdentityItem*(x: ptr IViewStateIdentityItem): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IViewStateIdentityItem*(x: ptr IViewStateIdentityItem): ptr IRelatedItem = cast[ptr IRelatedItem](x)
converter winim_converter_IPreviewItem*(x: ptr IPreviewItem): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPreviewItem*(x: ptr IPreviewItem): ptr IRelatedItem = cast[ptr IRelatedItem](x)
converter winim_converter_IDestinationStreamFactory*(x: ptr IDestinationStreamFactory): ptr IUnknown = cast[ptr IUnknown](x)
proc GetDestinationStream*(self: ptr IDestinationStreamFactory, ppstm: ptr ptr IStream): HRESULT {.inline, discardable.} = self.lpVtbl.GetDestinationStream(self, ppstm)
converter winim_converter_INewMenuClient*(x: ptr INewMenuClient): ptr IUnknown = cast[ptr IUnknown](x)
proc IncludeItems*(self: ptr INewMenuClient, pflags: ptr NMCII_FLAGS): HRESULT {.inline, discardable.} = self.lpVtbl.IncludeItems(self, pflags)
proc SelectAndEditItem*(self: ptr INewMenuClient, pidlItem: PCIDLIST_ABSOLUTE, flags: NMCSAEI_FLAGS): HRESULT {.inline, discardable.} = self.lpVtbl.SelectAndEditItem(self, pidlItem, flags)
converter winim_converter_IInitializeWithBindCtx*(x: ptr IInitializeWithBindCtx): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IInitializeWithBindCtx, pbc: ptr IBindCtx): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, pbc)
converter winim_converter_IShellItemFilter*(x: ptr IShellItemFilter): ptr IUnknown = cast[ptr IUnknown](x)
proc IncludeItem*(self: ptr IShellItemFilter, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.IncludeItem(self, psi)
proc GetEnumFlagsForItem*(self: ptr IShellItemFilter, psi: ptr IShellItem, pgrfFlags: ptr SHCONTF): HRESULT {.inline, discardable.} = self.lpVtbl.GetEnumFlagsForItem(self, psi, pgrfFlags)
converter winim_converter_INameSpaceTreeControl*(x: ptr INameSpaceTreeControl): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr INameSpaceTreeControl, hwndParent: HWND, prc: ptr RECT, nsctsFlags: NSTCSTYLE): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, hwndParent, prc, nsctsFlags)
proc TreeAdvise*(self: ptr INameSpaceTreeControl, punk: ptr IUnknown, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.TreeAdvise(self, punk, pdwCookie)
proc TreeUnadvise*(self: ptr INameSpaceTreeControl, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.TreeUnadvise(self, dwCookie)
proc AppendRoot*(self: ptr INameSpaceTreeControl, psiRoot: ptr IShellItem, grfEnumFlags: SHCONTF, grfRootStyle: NSTCROOTSTYLE, pif: ptr IShellItemFilter): HRESULT {.inline, discardable.} = self.lpVtbl.AppendRoot(self, psiRoot, grfEnumFlags, grfRootStyle, pif)
proc InsertRoot*(self: ptr INameSpaceTreeControl, iIndex: int32, psiRoot: ptr IShellItem, grfEnumFlags: SHCONTF, grfRootStyle: NSTCROOTSTYLE, pif: ptr IShellItemFilter): HRESULT {.inline, discardable.} = self.lpVtbl.InsertRoot(self, iIndex, psiRoot, grfEnumFlags, grfRootStyle, pif)
proc RemoveRoot*(self: ptr INameSpaceTreeControl, psiRoot: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveRoot(self, psiRoot)
proc RemoveAllRoots*(self: ptr INameSpaceTreeControl): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveAllRoots(self)
proc GetRootItems*(self: ptr INameSpaceTreeControl, ppsiaRootItems: ptr ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.GetRootItems(self, ppsiaRootItems)
proc SetItemState*(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, nstcisMask: NSTCITEMSTATE, nstcisFlags: NSTCITEMSTATE): HRESULT {.inline, discardable.} = self.lpVtbl.SetItemState(self, psi, nstcisMask, nstcisFlags)
proc GetItemState*(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, nstcisMask: NSTCITEMSTATE, pnstcisFlags: ptr NSTCITEMSTATE): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemState(self, psi, nstcisMask, pnstcisFlags)
proc GetSelectedItems*(self: ptr INameSpaceTreeControl, psiaItems: ptr ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.GetSelectedItems(self, psiaItems)
proc GetItemCustomState*(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, piStateNumber: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemCustomState(self, psi, piStateNumber)
proc SetItemCustomState*(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, iStateNumber: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetItemCustomState(self, psi, iStateNumber)
proc EnsureItemVisible*(self: ptr INameSpaceTreeControl, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.EnsureItemVisible(self, psi)
proc SetTheme*(self: ptr INameSpaceTreeControl, pszTheme: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetTheme(self, pszTheme)
proc GetNextItem*(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, nstcgi: int32, ppsiNext: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.GetNextItem(self, psi, nstcgi, ppsiNext)
proc HitTest*(self: ptr INameSpaceTreeControl, ppt: ptr POINT, ppsiOut: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.HitTest(self, ppt, ppsiOut)
proc GetItemRect*(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, prect: ptr RECT): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemRect(self, psi, prect)
proc CollapseAll*(self: ptr INameSpaceTreeControl): HRESULT {.inline, discardable.} = self.lpVtbl.CollapseAll(self)
converter winim_converter_INameSpaceTreeControl2*(x: ptr INameSpaceTreeControl2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_INameSpaceTreeControl2*(x: ptr INameSpaceTreeControl2): ptr INameSpaceTreeControl = cast[ptr INameSpaceTreeControl](x)
proc SetControlStyle*(self: ptr INameSpaceTreeControl2, nstcsMask: NSTCSTYLE, nstcsStyle: NSTCSTYLE): HRESULT {.inline, discardable.} = self.lpVtbl.SetControlStyle(self, nstcsMask, nstcsStyle)
proc GetControlStyle*(self: ptr INameSpaceTreeControl2, nstcsMask: NSTCSTYLE, pnstcsStyle: ptr NSTCSTYLE): HRESULT {.inline, discardable.} = self.lpVtbl.GetControlStyle(self, nstcsMask, pnstcsStyle)
proc SetControlStyle2*(self: ptr INameSpaceTreeControl2, nstcsMask: int32, nstcsStyle: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetControlStyle2(self, nstcsMask, nstcsStyle)
proc GetControlStyle2*(self: ptr INameSpaceTreeControl2, nstcsMask: int32, pnstcsStyle: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetControlStyle2(self, nstcsMask, pnstcsStyle)
converter winim_converter_INameSpaceTreeControlEvents*(x: ptr INameSpaceTreeControlEvents): ptr IUnknown = cast[ptr IUnknown](x)
proc OnItemClick*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, nstceHitTest: NSTCEHITTEST, nstceClickType: NSTCECLICKTYPE): HRESULT {.inline, discardable.} = self.lpVtbl.OnItemClick(self, psi, nstceHitTest, nstceClickType)
proc OnPropertyItemCommit*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnPropertyItemCommit(self, psi)
proc OnItemStateChanging*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, nstcisMask: NSTCITEMSTATE, nstcisState: NSTCITEMSTATE): HRESULT {.inline, discardable.} = self.lpVtbl.OnItemStateChanging(self, psi, nstcisMask, nstcisState)
proc OnItemStateChanged*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, nstcisMask: NSTCITEMSTATE, nstcisState: NSTCITEMSTATE): HRESULT {.inline, discardable.} = self.lpVtbl.OnItemStateChanged(self, psi, nstcisMask, nstcisState)
proc OnSelectionChanged*(self: ptr INameSpaceTreeControlEvents, psiaSelection: ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.OnSelectionChanged(self, psiaSelection)
proc OnKeyboardInput*(self: ptr INameSpaceTreeControlEvents, uMsg: UINT, wParam: WPARAM, lParam: LPARAM): HRESULT {.inline, discardable.} = self.lpVtbl.OnKeyboardInput(self, uMsg, wParam, lParam)
proc OnBeforeExpand*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnBeforeExpand(self, psi)
proc OnAfterExpand*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnAfterExpand(self, psi)
proc OnBeginLabelEdit*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnBeginLabelEdit(self, psi)
proc OnEndLabelEdit*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnEndLabelEdit(self, psi)
proc OnGetToolTip*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, pszTip: LPWSTR, cchTip: int32): HRESULT {.inline, discardable.} = self.lpVtbl.OnGetToolTip(self, psi, pszTip, cchTip)
proc OnBeforeItemDelete*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnBeforeItemDelete(self, psi)
proc OnItemAdded*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, fIsRoot: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnItemAdded(self, psi, fIsRoot)
proc OnItemDeleted*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, fIsRoot: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnItemDeleted(self, psi, fIsRoot)
proc OnBeforeContextMenu*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.OnBeforeContextMenu(self, psi, riid, ppv)
proc OnAfterContextMenu*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, pcmIn: ptr IContextMenu, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.OnAfterContextMenu(self, psi, pcmIn, riid, ppv)
proc OnBeforeStateImageChange*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnBeforeStateImageChange(self, psi)
proc OnGetDefaultIconIndex*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, piDefaultIcon: ptr int32, piOpenIcon: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.OnGetDefaultIconIndex(self, psi, piDefaultIcon, piOpenIcon)
converter winim_converter_INameSpaceTreeControlDropHandler*(x: ptr INameSpaceTreeControlDropHandler): ptr IUnknown = cast[ptr IUnknown](x)
proc OnDragEnter*(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, fOutsideSource: WINBOOL, grfKeyState: DWORD, pdwEffect: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnDragEnter(self, psiOver, psiaData, fOutsideSource, grfKeyState, pdwEffect)
proc OnDragOver*(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, grfKeyState: DWORD, pdwEffect: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnDragOver(self, psiOver, psiaData, grfKeyState, pdwEffect)
proc OnDragPosition*(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, iNewPosition: int32, iOldPosition: int32): HRESULT {.inline, discardable.} = self.lpVtbl.OnDragPosition(self, psiOver, psiaData, iNewPosition, iOldPosition)
proc OnDrop*(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, iPosition: int32, grfKeyState: DWORD, pdwEffect: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnDrop(self, psiOver, psiaData, iPosition, grfKeyState, pdwEffect)
proc OnDropPosition*(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, iNewPosition: int32, iOldPosition: int32): HRESULT {.inline, discardable.} = self.lpVtbl.OnDropPosition(self, psiOver, psiaData, iNewPosition, iOldPosition)
proc OnDragLeave*(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnDragLeave(self, psiOver)
converter winim_converter_INameSpaceTreeAccessible*(x: ptr INameSpaceTreeAccessible): ptr IUnknown = cast[ptr IUnknown](x)
proc OnGetDefaultAccessibilityAction*(self: ptr INameSpaceTreeAccessible, psi: ptr IShellItem, pbstrDefaultAction: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.OnGetDefaultAccessibilityAction(self, psi, pbstrDefaultAction)
proc OnDoDefaultAccessibilityAction*(self: ptr INameSpaceTreeAccessible, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnDoDefaultAccessibilityAction(self, psi)
proc OnGetAccessibilityRole*(self: ptr INameSpaceTreeAccessible, psi: ptr IShellItem, pvarRole: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.OnGetAccessibilityRole(self, psi, pvarRole)
converter winim_converter_INameSpaceTreeControlCustomDraw*(x: ptr INameSpaceTreeControlCustomDraw): ptr IUnknown = cast[ptr IUnknown](x)
proc PrePaint*(self: ptr INameSpaceTreeControlCustomDraw, hdc: HDC, prc: ptr RECT, plres: ptr LRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.PrePaint(self, hdc, prc, plres)
proc PostPaint*(self: ptr INameSpaceTreeControlCustomDraw, hdc: HDC, prc: ptr RECT): HRESULT {.inline, discardable.} = self.lpVtbl.PostPaint(self, hdc, prc)
proc ItemPrePaint*(self: ptr INameSpaceTreeControlCustomDraw, hdc: HDC, prc: ptr RECT, pnstccdItem: ptr NSTCCUSTOMDRAW, pclrText: ptr COLORREF, pclrTextBk: ptr COLORREF, plres: ptr LRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.ItemPrePaint(self, hdc, prc, pnstccdItem, pclrText, pclrTextBk, plres)
proc ItemPostPaint*(self: ptr INameSpaceTreeControlCustomDraw, hdc: HDC, prc: ptr RECT, pnstccdItem: ptr NSTCCUSTOMDRAW): HRESULT {.inline, discardable.} = self.lpVtbl.ItemPostPaint(self, hdc, prc, pnstccdItem)
converter winim_converter_INameSpaceTreeControlFolderCapabilities*(x: ptr INameSpaceTreeControlFolderCapabilities): ptr IUnknown = cast[ptr IUnknown](x)
proc GetFolderCapabilities*(self: ptr INameSpaceTreeControlFolderCapabilities, nfcMask: int32, pnfcValue: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolderCapabilities(self, nfcMask, pnfcValue)
converter winim_converter_IPreviewHandler*(x: ptr IPreviewHandler): ptr IUnknown = cast[ptr IUnknown](x)
proc SetWindow*(self: ptr IPreviewHandler, hwnd: HWND, prc: ptr RECT): HRESULT {.inline, discardable.} = self.lpVtbl.SetWindow(self, hwnd, prc)
proc SetRect*(self: ptr IPreviewHandler, prc: ptr RECT): HRESULT {.inline, discardable.} = self.lpVtbl.SetRect(self, prc)
proc DoPreview*(self: ptr IPreviewHandler): HRESULT {.inline, discardable.} = self.lpVtbl.DoPreview(self)
proc Unload*(self: ptr IPreviewHandler): HRESULT {.inline, discardable.} = self.lpVtbl.Unload(self)
proc SetFocus*(self: ptr IPreviewHandler): HRESULT {.inline, discardable.} = self.lpVtbl.SetFocus(self)
proc QueryFocus*(self: ptr IPreviewHandler, phwnd: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.QueryFocus(self, phwnd)
proc TranslateAccelerator*(self: ptr IPreviewHandler, pmsg: ptr MSG): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAccelerator(self, pmsg)
converter winim_converter_IPreviewHandlerFrame*(x: ptr IPreviewHandlerFrame): ptr IUnknown = cast[ptr IUnknown](x)
proc GetWindowContext*(self: ptr IPreviewHandlerFrame, pinfo: ptr PREVIEWHANDLERFRAMEINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetWindowContext(self, pinfo)
proc TranslateAccelerator*(self: ptr IPreviewHandlerFrame, pmsg: ptr MSG): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAccelerator(self, pmsg)
converter winim_converter_ITrayDeskBand*(x: ptr ITrayDeskBand): ptr IUnknown = cast[ptr IUnknown](x)
proc ShowDeskBand*(self: ptr ITrayDeskBand, clsid: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.ShowDeskBand(self, clsid)
proc HideDeskBand*(self: ptr ITrayDeskBand, clsid: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.HideDeskBand(self, clsid)
proc IsDeskBandShown*(self: ptr ITrayDeskBand, clsid: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.IsDeskBandShown(self, clsid)
proc DeskBandRegistrationChanged*(self: ptr ITrayDeskBand): HRESULT {.inline, discardable.} = self.lpVtbl.DeskBandRegistrationChanged(self)
converter winim_converter_IBandHost*(x: ptr IBandHost): ptr IUnknown = cast[ptr IUnknown](x)
proc CreateBand*(self: ptr IBandHost, rclsidBand: REFCLSID, fAvailable: WINBOOL, fVisible: WINBOOL, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.CreateBand(self, rclsidBand, fAvailable, fVisible, riid, ppv)
proc SetBandAvailability*(self: ptr IBandHost, rclsidBand: REFCLSID, fAvailable: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetBandAvailability(self, rclsidBand, fAvailable)
proc DestroyBand*(self: ptr IBandHost, rclsidBand: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.DestroyBand(self, rclsidBand)
converter winim_converter_IExplorerPaneVisibility*(x: ptr IExplorerPaneVisibility): ptr IUnknown = cast[ptr IUnknown](x)
proc GetPaneState*(self: ptr IExplorerPaneVisibility, ep: REFEXPLORERPANE, peps: ptr EXPLORERPANESTATE): HRESULT {.inline, discardable.} = self.lpVtbl.GetPaneState(self, ep, peps)
converter winim_converter_IContextMenuCB*(x: ptr IContextMenuCB): ptr IUnknown = cast[ptr IUnknown](x)
proc CallBack*(self: ptr IContextMenuCB, psf: ptr IShellFolder, hwndOwner: HWND, pdtobj: ptr IDataObject, uMsg: UINT, wParam: WPARAM, lParam: LPARAM): HRESULT {.inline, discardable.} = self.lpVtbl.CallBack(self, psf, hwndOwner, pdtobj, uMsg, wParam, lParam)
converter winim_converter_IDefaultExtractIconInit*(x: ptr IDefaultExtractIconInit): ptr IUnknown = cast[ptr IUnknown](x)
proc SetFlags*(self: ptr IDefaultExtractIconInit, uFlags: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetFlags(self, uFlags)
proc SetKey*(self: ptr IDefaultExtractIconInit, hkey: HKEY): HRESULT {.inline, discardable.} = self.lpVtbl.SetKey(self, hkey)
proc SetNormalIcon*(self: ptr IDefaultExtractIconInit, pszFile: LPCWSTR, iIcon: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetNormalIcon(self, pszFile, iIcon)
proc SetOpenIcon*(self: ptr IDefaultExtractIconInit, pszFile: LPCWSTR, iIcon: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetOpenIcon(self, pszFile, iIcon)
proc SetShortcutIcon*(self: ptr IDefaultExtractIconInit, pszFile: LPCWSTR, iIcon: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetShortcutIcon(self, pszFile, iIcon)
proc SetDefaultIcon*(self: ptr IDefaultExtractIconInit, pszFile: LPCWSTR, iIcon: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetDefaultIcon(self, pszFile, iIcon)
converter winim_converter_IExplorerCommand*(x: ptr IExplorerCommand): ptr IUnknown = cast[ptr IUnknown](x)
proc GetTitle*(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, ppszName: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetTitle(self, psiItemArray, ppszName)
proc GetIcon*(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, ppszIcon: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetIcon(self, psiItemArray, ppszIcon)
proc GetToolTip*(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, ppszInfotip: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetToolTip(self, psiItemArray, ppszInfotip)
proc GetCanonicalName*(self: ptr IExplorerCommand, pguidCommandName: ptr GUID): HRESULT {.inline, discardable.} = self.lpVtbl.GetCanonicalName(self, pguidCommandName)
proc GetState*(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, fOkToBeSlow: WINBOOL, pCmdState: ptr EXPCMDSTATE): HRESULT {.inline, discardable.} = self.lpVtbl.GetState(self, psiItemArray, fOkToBeSlow, pCmdState)
proc Invoke*(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, pbc: ptr IBindCtx): HRESULT {.inline, discardable.} = self.lpVtbl.Invoke(self, psiItemArray, pbc)
proc GetFlags*(self: ptr IExplorerCommand, pFlags: ptr EXPCMDFLAGS): HRESULT {.inline, discardable.} = self.lpVtbl.GetFlags(self, pFlags)
proc EnumSubCommands*(self: ptr IExplorerCommand, ppEnum: ptr ptr IEnumExplorerCommand): HRESULT {.inline, discardable.} = self.lpVtbl.EnumSubCommands(self, ppEnum)
converter winim_converter_IExplorerCommandState*(x: ptr IExplorerCommandState): ptr IUnknown = cast[ptr IUnknown](x)
proc GetState*(self: ptr IExplorerCommandState, psiItemArray: ptr IShellItemArray, fOkToBeSlow: WINBOOL, pCmdState: ptr EXPCMDSTATE): HRESULT {.inline, discardable.} = self.lpVtbl.GetState(self, psiItemArray, fOkToBeSlow, pCmdState)
converter winim_converter_IInitializeCommand*(x: ptr IInitializeCommand): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IInitializeCommand, pszCommandName: LPCWSTR, ppb: ptr IPropertyBag): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, pszCommandName, ppb)
converter winim_converter_IEnumExplorerCommand*(x: ptr IEnumExplorerCommand): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumExplorerCommand, celt: ULONG, pUICommand: ptr ptr IExplorerCommand, pceltFetched: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, celt, pUICommand, pceltFetched)
proc Skip*(self: ptr IEnumExplorerCommand, celt: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, celt)
proc Reset*(self: ptr IEnumExplorerCommand): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumExplorerCommand, ppenum: ptr ptr IEnumExplorerCommand): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, ppenum)
converter winim_converter_IExplorerCommandProvider*(x: ptr IExplorerCommandProvider): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCommands*(self: ptr IExplorerCommandProvider, punkSite: ptr IUnknown, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetCommands(self, punkSite, riid, ppv)
proc GetCommand*(self: ptr IExplorerCommandProvider, rguidCommandId: REFGUID, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetCommand(self, rguidCommandId, riid, ppv)
converter winim_converter_IInitializeNetworkFolder*(x: ptr IInitializeNetworkFolder): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IInitializeNetworkFolder, pidl: PCIDLIST_ABSOLUTE, pidlTarget: PCIDLIST_ABSOLUTE, uDisplayType: UINT, pszResName: LPCWSTR, pszProvider: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, pidl, pidlTarget, uDisplayType, pszResName, pszProvider)
converter winim_converter_IOpenControlPanel*(x: ptr IOpenControlPanel): ptr IUnknown = cast[ptr IUnknown](x)
proc Open*(self: ptr IOpenControlPanel, pszName: LPCWSTR, pszPage: LPCWSTR, punkSite: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.Open(self, pszName, pszPage, punkSite)
proc GetPath*(self: ptr IOpenControlPanel, pszName: LPCWSTR, pszPath: LPWSTR, cchPath: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetPath(self, pszName, pszPath, cchPath)
proc GetCurrentView*(self: ptr IOpenControlPanel, pView: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurrentView(self, pView)
converter winim_converter_IComputerInfoChangeNotify*(x: ptr IComputerInfoChangeNotify): ptr IUnknown = cast[ptr IUnknown](x)
proc ComputerInfoChanged*(self: ptr IComputerInfoChangeNotify): HRESULT {.inline, discardable.} = self.lpVtbl.ComputerInfoChanged(self)
converter winim_converter_IFileSystemBindData2*(x: ptr IFileSystemBindData2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IFileSystemBindData2*(x: ptr IFileSystemBindData2): ptr IFileSystemBindData = cast[ptr IFileSystemBindData](x)
proc SetFileID*(self: ptr IFileSystemBindData2, liFileID: LARGE_INTEGER): HRESULT {.inline, discardable.} = self.lpVtbl.SetFileID(self, liFileID)
proc GetFileID*(self: ptr IFileSystemBindData2, pliFileID: ptr LARGE_INTEGER): HRESULT {.inline, discardable.} = self.lpVtbl.GetFileID(self, pliFileID)
proc SetJunctionCLSID*(self: ptr IFileSystemBindData2, clsid: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.SetJunctionCLSID(self, clsid)
proc GetJunctionCLSID*(self: ptr IFileSystemBindData2, pclsid: ptr CLSID): HRESULT {.inline, discardable.} = self.lpVtbl.GetJunctionCLSID(self, pclsid)
converter winim_converter_ICustomDestinationList*(x: ptr ICustomDestinationList): ptr IUnknown = cast[ptr IUnknown](x)
proc SetAppID*(self: ptr ICustomDestinationList, pszAppID: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetAppID(self, pszAppID)
proc BeginList*(self: ptr ICustomDestinationList, pcMinSlots: ptr UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.BeginList(self, pcMinSlots, riid, ppv)
proc AppendCategory*(self: ptr ICustomDestinationList, pszCategory: LPCWSTR, poa: ptr IObjectArray): HRESULT {.inline, discardable.} = self.lpVtbl.AppendCategory(self, pszCategory, poa)
proc AppendKnownCategory*(self: ptr ICustomDestinationList, category: int32): HRESULT {.inline, discardable.} = self.lpVtbl.AppendKnownCategory(self, category)
proc AddUserTasks*(self: ptr ICustomDestinationList, poa: ptr IObjectArray): HRESULT {.inline, discardable.} = self.lpVtbl.AddUserTasks(self, poa)
proc CommitList*(self: ptr ICustomDestinationList): HRESULT {.inline, discardable.} = self.lpVtbl.CommitList(self)
proc GetRemovedDestinations*(self: ptr ICustomDestinationList, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetRemovedDestinations(self, riid, ppv)
proc DeleteList*(self: ptr ICustomDestinationList, pszAppID: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.DeleteList(self, pszAppID)
proc AbortList*(self: ptr ICustomDestinationList): HRESULT {.inline, discardable.} = self.lpVtbl.AbortList(self)
converter winim_converter_IApplicationDestinations*(x: ptr IApplicationDestinations): ptr IUnknown = cast[ptr IUnknown](x)
proc SetAppID*(self: ptr IApplicationDestinations, pszAppID: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetAppID(self, pszAppID)
proc RemoveDestination*(self: ptr IApplicationDestinations, punk: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveDestination(self, punk)
proc RemoveAllDestinations*(self: ptr IApplicationDestinations): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveAllDestinations(self)
converter winim_converter_IApplicationDocumentLists*(x: ptr IApplicationDocumentLists): ptr IUnknown = cast[ptr IUnknown](x)
proc SetAppID*(self: ptr IApplicationDocumentLists, pszAppID: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetAppID(self, pszAppID)
proc GetList*(self: ptr IApplicationDocumentLists, listtype: int32, cItemsDesired: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetList(self, listtype, cItemsDesired, riid, ppv)
converter winim_converter_IObjectWithAppUserModelID*(x: ptr IObjectWithAppUserModelID): ptr IUnknown = cast[ptr IUnknown](x)
proc SetAppID*(self: ptr IObjectWithAppUserModelID, pszAppID: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetAppID(self, pszAppID)
proc GetAppID*(self: ptr IObjectWithAppUserModelID, ppszAppID: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetAppID(self, ppszAppID)
converter winim_converter_IObjectWithProgID*(x: ptr IObjectWithProgID): ptr IUnknown = cast[ptr IUnknown](x)
proc SetProgID*(self: ptr IObjectWithProgID, pszProgID: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetProgID(self, pszProgID)
proc GetProgID*(self: ptr IObjectWithProgID, ppszProgID: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetProgID(self, ppszProgID)
converter winim_converter_IUpdateIDList*(x: ptr IUpdateIDList): ptr IUnknown = cast[ptr IUnknown](x)
proc Update*(self: ptr IUpdateIDList, pbc: ptr IBindCtx, pidlIn: PCUITEMID_CHILD, ppidlOut: ptr PITEMID_CHILD): HRESULT {.inline, discardable.} = self.lpVtbl.Update(self, pbc, pidlIn, ppidlOut)
converter winim_converter_IDesktopGadget*(x: ptr IDesktopGadget): ptr IUnknown = cast[ptr IUnknown](x)
proc RunGadget*(self: ptr IDesktopGadget, gadgetPath: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.RunGadget(self, gadgetPath)
converter winim_converter_IDesktopWallpaper*(x: ptr IDesktopWallpaper): ptr IUnknown = cast[ptr IUnknown](x)
proc SetWallpaper*(self: ptr IDesktopWallpaper, monitorID: LPCWSTR, wallpaper: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetWallpaper(self, monitorID, wallpaper)
proc GetWallpaper*(self: ptr IDesktopWallpaper, monitorID: LPCWSTR, wallpaper: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetWallpaper(self, monitorID, wallpaper)
proc GetMonitorDevicePathAt*(self: ptr IDesktopWallpaper, monitorIndex: UINT, monitorID: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetMonitorDevicePathAt(self, monitorIndex, monitorID)
proc GetMonitorDevicePathCount*(self: ptr IDesktopWallpaper, count: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetMonitorDevicePathCount(self, count)
proc GetMonitorRECT*(self: ptr IDesktopWallpaper, monitorID: LPCWSTR, displayRect: ptr RECT): HRESULT {.inline, discardable.} = self.lpVtbl.GetMonitorRECT(self, monitorID, displayRect)
proc SetBackgroundColor*(self: ptr IDesktopWallpaper, color: COLORREF): HRESULT {.inline, discardable.} = self.lpVtbl.SetBackgroundColor(self, color)
proc GetBackgroundColor*(self: ptr IDesktopWallpaper, color: ptr COLORREF): HRESULT {.inline, discardable.} = self.lpVtbl.GetBackgroundColor(self, color)
proc SetPosition*(self: ptr IDesktopWallpaper, position: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetPosition(self, position)
proc GetPosition*(self: ptr IDesktopWallpaper, position: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetPosition(self, position)
proc SetSlideshow*(self: ptr IDesktopWallpaper, items: ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.SetSlideshow(self, items)
proc GetSlideshow*(self: ptr IDesktopWallpaper, items: ptr ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.GetSlideshow(self, items)
proc SetSlideshowOptions*(self: ptr IDesktopWallpaper, options: int32, slideshowTick: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetSlideshowOptions(self, options, slideshowTick)
proc GetSlideshowOptions*(self: ptr IDesktopWallpaper, options: ptr int32, slideshowTick: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetSlideshowOptions(self, options, slideshowTick)
proc AdvanceSlideshow*(self: ptr IDesktopWallpaper, monitorID: LPCWSTR, direction: int32): HRESULT {.inline, discardable.} = self.lpVtbl.AdvanceSlideshow(self, monitorID, direction)
proc GetStatus*(self: ptr IDesktopWallpaper, state: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetStatus(self, state)
proc Enable*(self: ptr IDesktopWallpaper, enable: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Enable(self, enable)
converter winim_converter_IHomeGroup*(x: ptr IHomeGroup): ptr IUnknown = cast[ptr IUnknown](x)
proc IsMember*(self: ptr IHomeGroup, member: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.IsMember(self, member)
proc ShowSharingWizard*(self: ptr IHomeGroup, owner: HWND, sharingchoices: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.ShowSharingWizard(self, owner, sharingchoices)
converter winim_converter_IInitializeWithPropertyStore*(x: ptr IInitializeWithPropertyStore): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IInitializeWithPropertyStore, pps: ptr IPropertyStore): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, pps)
converter winim_converter_IOpenSearchSource*(x: ptr IOpenSearchSource): ptr IUnknown = cast[ptr IUnknown](x)
proc GetResults*(self: ptr IOpenSearchSource, hwnd: HWND, pszQuery: LPCWSTR, dwStartIndex: DWORD, dwCount: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetResults(self, hwnd, pszQuery, dwStartIndex, dwCount, riid, ppv)
converter winim_converter_IShellLibrary*(x: ptr IShellLibrary): ptr IUnknown = cast[ptr IUnknown](x)
proc LoadLibraryFromItem*(self: ptr IShellLibrary, psiLibrary: ptr IShellItem, grfMode: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.LoadLibraryFromItem(self, psiLibrary, grfMode)
proc LoadLibraryFromKnownFolder*(self: ptr IShellLibrary, kfidLibrary: REFKNOWNFOLDERID, grfMode: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.LoadLibraryFromKnownFolder(self, kfidLibrary, grfMode)
proc AddFolder*(self: ptr IShellLibrary, psiLocation: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.AddFolder(self, psiLocation)
proc RemoveFolder*(self: ptr IShellLibrary, psiLocation: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveFolder(self, psiLocation)
proc GetFolders*(self: ptr IShellLibrary, lff: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolders(self, lff, riid, ppv)
proc ResolveFolder*(self: ptr IShellLibrary, psiFolderToResolve: ptr IShellItem, dwTimeout: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.ResolveFolder(self, psiFolderToResolve, dwTimeout, riid, ppv)
proc GetDefaultSaveFolder*(self: ptr IShellLibrary, dsft: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultSaveFolder(self, dsft, riid, ppv)
proc SetDefaultSaveFolder*(self: ptr IShellLibrary, dsft: int32, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.SetDefaultSaveFolder(self, dsft, psi)
proc GetOptions*(self: ptr IShellLibrary, plofOptions: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetOptions(self, plofOptions)
proc SetOptions*(self: ptr IShellLibrary, lofMask: int32, lofOptions: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetOptions(self, lofMask, lofOptions)
proc GetFolderType*(self: ptr IShellLibrary, pftid: ptr FOLDERTYPEID): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolderType(self, pftid)
proc SetFolderType*(self: ptr IShellLibrary, ftid: REFFOLDERTYPEID): HRESULT {.inline, discardable.} = self.lpVtbl.SetFolderType(self, ftid)
proc GetIcon*(self: ptr IShellLibrary, ppszIcon: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetIcon(self, ppszIcon)
proc SetIcon*(self: ptr IShellLibrary, pszIcon: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetIcon(self, pszIcon)
proc Commit*(self: ptr IShellLibrary): HRESULT {.inline, discardable.} = self.lpVtbl.Commit(self)
proc Save*(self: ptr IShellLibrary, psiFolderToSaveIn: ptr IShellItem, pszLibraryName: LPCWSTR, lsf: int32, ppsiSavedTo: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.Save(self, psiFolderToSaveIn, pszLibraryName, lsf, ppsiSavedTo)
proc SaveInKnownFolder*(self: ptr IShellLibrary, kfidToSaveIn: REFKNOWNFOLDERID, pszLibraryName: LPCWSTR, lsf: int32, ppsiSavedTo: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.SaveInKnownFolder(self, kfidToSaveIn, pszLibraryName, lsf, ppsiSavedTo)
converter winim_converter_IPlaybackManagerEvents*(x: ptr IPlaybackManagerEvents): ptr IUnknown = cast[ptr IUnknown](x)
proc OnPlaybackManagerEvent*(self: ptr IPlaybackManagerEvents, dwSessionId: DWORD, mediaEvent: int32): HRESULT {.inline, discardable.} = self.lpVtbl.OnPlaybackManagerEvent(self, dwSessionId, mediaEvent)
converter winim_converter_IPlaybackManager*(x: ptr IPlaybackManager): ptr IUnknown = cast[ptr IUnknown](x)
proc Advise*(self: ptr IPlaybackManager, typ: int32, pEvents: ptr IPlaybackManagerEvents, pdwSessionId: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, typ, pEvents, pdwSessionId)
proc Unadvise*(self: ptr IPlaybackManager, dwSessionId: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, dwSessionId)
proc ChangeSessionState*(self: ptr IPlaybackManager, dwSessionId: DWORD, state: int32, mute: int32): HRESULT {.inline, discardable.} = self.lpVtbl.ChangeSessionState(self, dwSessionId, state, mute)
converter winim_converter_IDefaultFolderMenuInitialize*(x: ptr IDefaultFolderMenuInitialize): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IDefaultFolderMenuInitialize, hwnd: HWND, pcmcb: ptr IContextMenuCB, pidlFolder: PCIDLIST_ABSOLUTE, psf: ptr IShellFolder, cidl: UINT, apidl: PCUITEMID_CHILD_ARRAY, punkAssociation: ptr IUnknown, cKeys: UINT, aKeys: ptr HKEY): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, hwnd, pcmcb, pidlFolder, psf, cidl, apidl, punkAssociation, cKeys, aKeys)
proc SetMenuRestrictions*(self: ptr IDefaultFolderMenuInitialize, dfmrValues: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetMenuRestrictions(self, dfmrValues)
proc GetMenuRestrictions*(self: ptr IDefaultFolderMenuInitialize, dfmrMask: int32, pdfmrValues: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetMenuRestrictions(self, dfmrMask, pdfmrValues)
proc SetHandlerClsid*(self: ptr IDefaultFolderMenuInitialize, rclsid: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.SetHandlerClsid(self, rclsid)
converter winim_converter_IApplicationActivationManager*(x: ptr IApplicationActivationManager): ptr IUnknown = cast[ptr IUnknown](x)
proc ActivateApplication*(self: ptr IApplicationActivationManager, appUserModelId: LPCWSTR, arguments: LPCWSTR, options: int32, processId: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.ActivateApplication(self, appUserModelId, arguments, options, processId)
proc ActivateForFile*(self: ptr IApplicationActivationManager, appUserModelId: LPCWSTR, itemArray: ptr IShellItemArray, verb: LPCWSTR, processId: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.ActivateForFile(self, appUserModelId, itemArray, verb, processId)
proc ActivateForProtocol*(self: ptr IApplicationActivationManager, appUserModelId: LPCWSTR, itemArray: ptr IShellItemArray, processId: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.ActivateForProtocol(self, appUserModelId, itemArray, processId)
converter winim_converter_IAssocHandlerInvoker*(x: ptr IAssocHandlerInvoker): ptr IUnknown = cast[ptr IUnknown](x)
proc SupportsSelection*(self: ptr IAssocHandlerInvoker): HRESULT {.inline, discardable.} = self.lpVtbl.SupportsSelection(self)
proc Invoke*(self: ptr IAssocHandlerInvoker): HRESULT {.inline, discardable.} = self.lpVtbl.Invoke(self)
converter winim_converter_IAssocHandler*(x: ptr IAssocHandler): ptr IUnknown = cast[ptr IUnknown](x)
proc GetName*(self: ptr IAssocHandler, ppsz: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetName(self, ppsz)
proc GetUIName*(self: ptr IAssocHandler, ppsz: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetUIName(self, ppsz)
proc GetIconLocation*(self: ptr IAssocHandler, ppszPath: ptr LPWSTR, pIndex: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetIconLocation(self, ppszPath, pIndex)
proc IsRecommended*(self: ptr IAssocHandler): HRESULT {.inline, discardable.} = self.lpVtbl.IsRecommended(self)
proc MakeDefault*(self: ptr IAssocHandler, pszDescription: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.MakeDefault(self, pszDescription)
proc Invoke*(self: ptr IAssocHandler, pdo: ptr IDataObject): HRESULT {.inline, discardable.} = self.lpVtbl.Invoke(self, pdo)
proc CreateInvoker*(self: ptr IAssocHandler, pdo: ptr IDataObject, ppInvoker: ptr ptr IAssocHandlerInvoker): HRESULT {.inline, discardable.} = self.lpVtbl.CreateInvoker(self, pdo, ppInvoker)
converter winim_converter_IEnumAssocHandlers*(x: ptr IEnumAssocHandlers): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumAssocHandlers, celt: ULONG, rgelt: ptr ptr IAssocHandler, pceltFetched: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, celt, rgelt, pceltFetched)
converter winim_converter_IDataObjectProvider*(x: ptr IDataObjectProvider): ptr IUnknown = cast[ptr IUnknown](x)
proc GetDataObject*(self: ptr IDataObjectProvider, dataObject: ptr ptr IDataObject): HRESULT {.inline, discardable.} = self.lpVtbl.GetDataObject(self, dataObject)
proc SetDataObject*(self: ptr IDataObjectProvider, dataObject: ptr IDataObject): HRESULT {.inline, discardable.} = self.lpVtbl.SetDataObject(self, dataObject)
converter winim_converter_IDataTransferManagerInterop*(x: ptr IDataTransferManagerInterop): ptr IUnknown = cast[ptr IUnknown](x)
proc GetForWindow*(self: ptr IDataTransferManagerInterop, appWindow: HWND, riid: REFIID, dataTransferManager: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetForWindow(self, appWindow, riid, dataTransferManager)
proc ShowShareUIForWindow*(self: ptr IDataTransferManagerInterop, appWindow: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.ShowShareUIForWindow(self, appWindow)
converter winim_converter_IFrameworkInputPaneHandler*(x: ptr IFrameworkInputPaneHandler): ptr IUnknown = cast[ptr IUnknown](x)
proc Showing*(self: ptr IFrameworkInputPaneHandler, prcInputPaneScreenLocation: ptr RECT, fEnsureFocusedElementInView: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Showing(self, prcInputPaneScreenLocation, fEnsureFocusedElementInView)
proc Hiding*(self: ptr IFrameworkInputPaneHandler, fEnsureFocusedElementInView: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Hiding(self, fEnsureFocusedElementInView)
converter winim_converter_IFrameworkInputPane*(x: ptr IFrameworkInputPane): ptr IUnknown = cast[ptr IUnknown](x)
proc Advise*(self: ptr IFrameworkInputPane, pWindow: ptr IUnknown, pHandler: ptr IFrameworkInputPaneHandler, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, pWindow, pHandler, pdwCookie)
proc AdviseWithHWND*(self: ptr IFrameworkInputPane, hwnd: HWND, pHandler: ptr IFrameworkInputPaneHandler, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.AdviseWithHWND(self, hwnd, pHandler, pdwCookie)
proc Unadvise*(self: ptr IFrameworkInputPane, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, dwCookie)
proc Location*(self: ptr IFrameworkInputPane, prcInputPaneScreenLocation: ptr RECT): HRESULT {.inline, discardable.} = self.lpVtbl.Location(self, prcInputPaneScreenLocation)
converter winim_converter_ISearchableApplication*(x: ptr ISearchableApplication): ptr IUnknown = cast[ptr IUnknown](x)
proc GetSearchWindow*(self: ptr ISearchableApplication, hwnd: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.GetSearchWindow(self, hwnd)
converter winim_converter_IAccessibilityDockingServiceCallback*(x: ptr IAccessibilityDockingServiceCallback): ptr IUnknown = cast[ptr IUnknown](x)
proc Undocked*(self: ptr IAccessibilityDockingServiceCallback, undockReason: int32): HRESULT {.inline, discardable.} = self.lpVtbl.Undocked(self, undockReason)
converter winim_converter_IAccessibilityDockingService*(x: ptr IAccessibilityDockingService): ptr IUnknown = cast[ptr IUnknown](x)
proc GetAvailableSize*(self: ptr IAccessibilityDockingService, hMonitor: HMONITOR, pcxFixed: ptr UINT, pcyMax: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetAvailableSize(self, hMonitor, pcxFixed, pcyMax)
proc DockWindow*(self: ptr IAccessibilityDockingService, hwnd: HWND, hMonitor: HMONITOR, cyRequested: UINT, pCallback: ptr IAccessibilityDockingServiceCallback): HRESULT {.inline, discardable.} = self.lpVtbl.DockWindow(self, hwnd, hMonitor, cyRequested, pCallback)
proc UndockWindow*(self: ptr IAccessibilityDockingService, hwnd: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.UndockWindow(self, hwnd)
converter winim_converter_IAppVisibilityEvents*(x: ptr IAppVisibilityEvents): ptr IUnknown = cast[ptr IUnknown](x)
proc AppVisibilityOnMonitorChanged*(self: ptr IAppVisibilityEvents, hMonitor: HMONITOR, previousMode: int32, currentMode: int32): HRESULT {.inline, discardable.} = self.lpVtbl.AppVisibilityOnMonitorChanged(self, hMonitor, previousMode, currentMode)
proc LauncherVisibilityChange*(self: ptr IAppVisibilityEvents, currentVisibleState: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.LauncherVisibilityChange(self, currentVisibleState)
converter winim_converter_IAppVisibility*(x: ptr IAppVisibility): ptr IUnknown = cast[ptr IUnknown](x)
proc GetAppVisibilityOnMonitor*(self: ptr IAppVisibility, hMonitor: HMONITOR, pMode: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetAppVisibilityOnMonitor(self, hMonitor, pMode)
proc IsLauncherVisible*(self: ptr IAppVisibility, pfVisible: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.IsLauncherVisible(self, pfVisible)
proc Advise*(self: ptr IAppVisibility, pCallback: ptr IAppVisibilityEvents, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, pCallback, pdwCookie)
proc Unadvise*(self: ptr IAppVisibility, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, dwCookie)
converter winim_converter_IPackageExecutionStateChangeNotification*(x: ptr IPackageExecutionStateChangeNotification): ptr IUnknown = cast[ptr IUnknown](x)
proc OnStateChanged*(self: ptr IPackageExecutionStateChangeNotification, pszPackageFullName: LPCWSTR, pesNewState: int32): HRESULT {.inline, discardable.} = self.lpVtbl.OnStateChanged(self, pszPackageFullName, pesNewState)
converter winim_converter_IPackageDebugSettings*(x: ptr IPackageDebugSettings): ptr IUnknown = cast[ptr IUnknown](x)
proc EnableDebugging*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, debuggerCommandLine: LPCWSTR, environment: PZZWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.EnableDebugging(self, packageFullName, debuggerCommandLine, environment)
proc DisableDebugging*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.DisableDebugging(self, packageFullName)
proc Suspend*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.Suspend(self, packageFullName)
proc Resume*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.Resume(self, packageFullName)
proc TerminateAllProcesses*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.TerminateAllProcesses(self, packageFullName)
proc SetTargetSessionId*(self: ptr IPackageDebugSettings, sessionId: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.SetTargetSessionId(self, sessionId)
proc EnumerateBackgroundTasks*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, taskCount: ptr ULONG, taskIds: ptr LPCGUID, taskNames: ptr ptr LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.EnumerateBackgroundTasks(self, packageFullName, taskCount, taskIds, taskNames)
proc ActivateBackgroundTask*(self: ptr IPackageDebugSettings, taskId: LPCGUID): HRESULT {.inline, discardable.} = self.lpVtbl.ActivateBackgroundTask(self, taskId)
proc StartServicing*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.StartServicing(self, packageFullName)
proc StopServicing*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.StopServicing(self, packageFullName)
proc StartSessionRedirection*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, sessionId: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.StartSessionRedirection(self, packageFullName, sessionId)
proc StopSessionRedirection*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.StopSessionRedirection(self, packageFullName)
proc GetPackageExecutionState*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, packageExecutionState: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetPackageExecutionState(self, packageFullName, packageExecutionState)
proc RegisterForPackageStateChanges*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, pPackageExecutionStateChangeNotification: ptr IPackageExecutionStateChangeNotification, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.RegisterForPackageStateChanges(self, packageFullName, pPackageExecutionStateChangeNotification, pdwCookie)
proc UnregisterForPackageStateChanges*(self: ptr IPackageDebugSettings, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.UnregisterForPackageStateChanges(self, dwCookie)
converter winim_converter_IExecuteCommandApplicationHostEnvironment*(x: ptr IExecuteCommandApplicationHostEnvironment): ptr IUnknown = cast[ptr IUnknown](x)
proc GetValue*(self: ptr IExecuteCommandApplicationHostEnvironment, pahe: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetValue(self, pahe)
converter winim_converter_IExecuteCommandHost*(x: ptr IExecuteCommandHost): ptr IUnknown = cast[ptr IUnknown](x)
proc GetUIMode*(self: ptr IExecuteCommandHost, pUIMode: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetUIMode(self, pUIMode)
converter winim_converter_IApplicationDesignModeSettings*(x: ptr IApplicationDesignModeSettings): ptr IUnknown = cast[ptr IUnknown](x)
proc SetNativeDisplaySize*(self: ptr IApplicationDesignModeSettings, sizeNativeDisplay: SIZE): HRESULT {.inline, discardable.} = self.lpVtbl.SetNativeDisplaySize(self, sizeNativeDisplay)
proc SetScaleFactor*(self: ptr IApplicationDesignModeSettings, scaleFactor: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetScaleFactor(self, scaleFactor)
proc SetApplicationViewState*(self: ptr IApplicationDesignModeSettings, viewState: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetApplicationViewState(self, viewState)
proc ComputeApplicationSize*(self: ptr IApplicationDesignModeSettings, psizeApplication: ptr SIZE): HRESULT {.inline, discardable.} = self.lpVtbl.ComputeApplicationSize(self, psizeApplication)
proc IsApplicationViewStateSupported*(self: ptr IApplicationDesignModeSettings, viewState: int32, sizeNativeDisplay: SIZE, scaleFactor: int32, pfSupported: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.IsApplicationViewStateSupported(self, viewState, sizeNativeDisplay, scaleFactor, pfSupported)
proc TriggerEdgeGesture*(self: ptr IApplicationDesignModeSettings, edgeGestureKind: int32): HRESULT {.inline, discardable.} = self.lpVtbl.TriggerEdgeGesture(self, edgeGestureKind)
converter winim_converter_IInitializeWithWindow*(x: ptr IInitializeWithWindow): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IInitializeWithWindow, hwnd: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, hwnd)
converter winim_converter_IHandlerInfo*(x: ptr IHandlerInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc GetApplicationDisplayName*(self: ptr IHandlerInfo, value: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetApplicationDisplayName(self, value)
proc GetApplicationPublisher*(self: ptr IHandlerInfo, value: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetApplicationPublisher(self, value)
proc GetApplicationIconReference*(self: ptr IHandlerInfo, value: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetApplicationIconReference(self, value)
converter winim_converter_IHandlerActivationHost*(x: ptr IHandlerActivationHost): ptr IUnknown = cast[ptr IUnknown](x)
proc BeforeCoCreateInstance*(self: ptr IHandlerActivationHost, clsidHandler: REFCLSID, itemsBeingActivated: ptr IShellItemArray, handlerInfo: ptr IHandlerInfo): HRESULT {.inline, discardable.} = self.lpVtbl.BeforeCoCreateInstance(self, clsidHandler, itemsBeingActivated, handlerInfo)
proc BeforeCreateProcess*(self: ptr IHandlerActivationHost, applicationPath: LPCWSTR, commandLine: LPCWSTR, handlerInfo: ptr IHandlerInfo): HRESULT {.inline, discardable.} = self.lpVtbl.BeforeCreateProcess(self, applicationPath, commandLine, handlerInfo)



# ext/imagehlp.nim
const
  # IMAGEHLP_STATUS_REASON* = enum
  BindOutOfMemory* = 0
  BindRvaToVaFailed* = 1
  BindNoRoomInImage* = 2
  BindImportModuleFailed* = 3
  BindImportProcedureFailed* = 4
  BindImportModule* = 5
  BindImportProcedure* = 6
  BindForwarder* = 7
  BindForwarderNOT* = 8
  BindImageModified* = 9
  BindExpandFileHeaders* = 10
  BindImageComplete* = 11
  BindMismatchedSymbols* = 12
  BindSymbolsNotUpdated* = 13
  # ADDRESS_MODE* = enum
  AddrMode1616* = 0
  AddrMode1632* = 1
  AddrModeReal* = 2
  AddrModeFlat* = 3
  # SYM_TYPE* = enum
  SymNone* = 0
  SymCoff* = 1
  SymCv* = 2
  SymPdb* = 3
  SymExport* = 4
  SymDeferred* = 5
  SymSym* = 6
  SymDia* = 7
  SymVirtual* = 8

const
  API_VERSION_NUMBER* = 7
  BIND_NO_BOUND_IMPORTS* = 1
  BIND_NO_UPDATE* = 2
  BIND_ALL_IMAGES* = 4
  BIND_CACHE_IMPORT_DLLS* = 8
  CBA_DEFERRED_SYMBOL_LOAD_START* = 1
  CBA_DEFERRED_SYMBOL_LOAD_COMPLETE* = 2
  CBA_DEFERRED_SYMBOL_LOAD_FAILURE* = 3
  CBA_SYMBOLS_UNLOADED* = 4
  CBA_DUPLICATE_SYMBOL* = 5
  CERT_PE_IMAGE_DIGEST_DEBUG_INFO* = 1
  CERT_PE_IMAGE_DIGEST_RESOURCES* = 2
  CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO* = 4
  CERT_PE_IMAGE_DIGEST_NON_PE_INFO* = 8
  CERT_SECTION_TYPE_ANY* = 255
  CHECKSUM_SUCCESS* = 0
  CHECKSUM_OPEN_FAILURE* = 1
  CHECKSUM_MAP_FAILURE* = 2
  CHECKSUM_MAPVIEW_FAILURE* = 3
  CHECKSUM_UNICODE_FAILURE* = 4
  IMAGE_SEPARATION* = 65536
  SPLITSYM_REMOVE_PRIVATE* = 1
  SPLITSYM_EXTRACT_ALL* = 2
  SPLITSYM_SYMBOLPATH_IS_SRC* = 4
  SYMF_OMAP_GENERATED* = 1
  SYMF_OMAP_MODIFIED* = 2
  SYMOPT_CASE_INSENSITIVE* = 1
  SYMOPT_UNDNAME* = 2
  SYMOPT_DEFERRED_LOADS* = 4
  SYMOPT_NO_CPP* = 8
  SYMOPT_LOAD_LINES* = 16
  SYMOPT_OMAP_FIND_NEAREST* = 32
  UNDNAME_COMPLETE* = 0
  UNDNAME_NO_LEADING_UNDERSCORES* = 1
  UNDNAME_NO_MS_KEYWORDS* = 2
  UNDNAME_NO_FUNCTION_RETURNS* = 4
  UNDNAME_NO_ALLOCATION_MODEL* = 8
  UNDNAME_NO_ALLOCATION_LANGUAGE* = 16
  UNDNAME_NO_MS_THISTYPE* = 32
  UNDNAME_NO_CV_THISTYPE* = 64
  UNDNAME_NO_THISTYPE* = 96
  UNDNAME_NO_ACCESS_SPECIFIERS* = 128
  UNDNAME_NO_THROW_SIGNATURES* = 256
  UNDNAME_NO_MEMBER_TYPE* = 512
  UNDNAME_NO_RETURN_UDT_MODEL* = 1024
  UNDNAME_32_BIT_DECODE* = 2048
  UNDNAME_NAME_ONLY* = 4096
  UNDNAME_NO_ARGUMENTS* = 8192
  UNDNAME_NO_SPECIAL_SYMS* = 16384

type
  IMAGEHLP_STATUS_REASON* = int32
  LOADED_IMAGE* {.final, pure.} = object
    ModuleName*: LPSTR
    hFile*: HANDLE
    MappedAddress*: PUCHAR
    FileHeader*: PIMAGE_NT_HEADERS
    LastRvaSection*: PIMAGE_SECTION_HEADER
    NumberOfSections*: ULONG
    Sections*: PIMAGE_SECTION_HEADER
    Characteristics*: ULONG
    fSystemImage*: BOOLEAN
    fDOSImage*: BOOLEAN
    Links*: LIST_ENTRY
    SizeOfImage*: ULONG
  PLOADED_IMAGE* = ptr LOADED_IMAGE
  IMAGE_DEBUG_INFORMATION* {.final, pure.} = object
    List*: LIST_ENTRY
    Size*: DWORD
    MappedBase*: PVOID
    Machine*: USHORT
    Characteristics*: USHORT
    CheckSum*: DWORD
    ImageBase*: DWORD
    SizeOfImage*: DWORD
    NumberOfSections*: DWORD
    Sections*: PIMAGE_SECTION_HEADER
    ExportedNamesSize*: DWORD
    ExportedNames*: LPSTR
    NumberOfFunctionTableEntries*: DWORD
    FunctionTableEntries*: PIMAGE_FUNCTION_ENTRY
    LowestFunctionStartingAddress*: DWORD
    HighestFunctionEndingAddress*: DWORD
    NumberOfFpoTableEntries*: DWORD
    FpoTableEntries*: PFPO_DATA
    SizeOfCoffSymbols*: DWORD
    CoffSymbols*: PIMAGE_COFF_SYMBOLS_HEADER
    SizeOfCodeViewSymbols*: DWORD
    CodeViewSymbols*: PVOID
    ImageFilePath*: LPSTR
    ImageFileName*: LPSTR
    DebugFilePath*: LPSTR
    TimeDateStamp*: DWORD
    RomImage*: BOOL
    DebugDirectory*: PIMAGE_DEBUG_DIRECTORY
    NumberOfDebugDirectories*: DWORD
    Reserved*: array[3, DWORD]
  PIMAGE_DEBUG_INFORMATION* = ptr IMAGE_DEBUG_INFORMATION
  ADDRESS_MODE* = int32
  ADDRESS* {.final, pure.} = object
    Offset*: DWORD
    Segment*: WORD
    Mode*: ADDRESS_MODE
  LPADDRESS* = ptr ADDRESS
  KDHELP* {.final, pure.} = object
    Thread*: DWORD
    ThCallbackStack*: DWORD
    NextCallback*: DWORD
    FramePointer*: DWORD
    KiCallUserMode*: DWORD
    KeUserCallbackDispatcher*: DWORD
    SystemRangeStart*: DWORD
  PKDHELP* = ptr KDHELP
  STACKFRAME* {.final, pure.} = object
    AddrPC*: ADDRESS
    AddrReturn*: ADDRESS
    AddrFrame*: ADDRESS
    AddrStack*: ADDRESS
    FuncTableEntry*: LPVOID
    Params*: array[4, DWORD]
    Far*: BOOL
    Virtual*: BOOL
    Reserved*: array[3, DWORD]
    KdHelp*: KDHELP
  LPSTACKFRAME* = ptr STACKFRAME
  API_VERSION* {.final, pure.} = object
    MajorVersion*: USHORT
    MinorVersion*: USHORT
    Revision*: USHORT
    Reserved*: USHORT
  LPAPI_VERSION* = ptr API_VERSION
  SYM_TYPE* = int32
  IMAGEHLP_SYMBOL* {.final, pure.} = object
    SizeOfStruct*: DWORD
    Address*: DWORD
    Size*: DWORD
    Flags*: DWORD
    MaxNameLength*: DWORD
    Name*: array[1, CHAR]
  PIMAGEHLP_SYMBOL* = ptr IMAGEHLP_SYMBOL
  IMAGEHLP_MODULE* {.final, pure.} = object
    SizeOfStruct*: DWORD
    BaseOfImage*: DWORD
    ImageSize*: DWORD
    TimeDateStamp*: DWORD
    CheckSum*: DWORD
    NumSyms*: DWORD
    SymType*: SYM_TYPE
    ModuleName*: array[32, CHAR]
    ImageName*: array[256, CHAR]
    LoadedImageName*: array[256, CHAR]
  PIMAGEHLP_MODULE* = ptr IMAGEHLP_MODULE
  IMAGEHLP_LINE* {.final, pure.} = object
    SizeOfStruct*: DWORD
    Key*: DWORD
    LineNumber*: DWORD
    FileName*: PCHAR
    Address*: DWORD
  PIMAGEHLP_LINE* = ptr IMAGEHLP_LINE
  IMAGEHLP_DEFERRED_SYMBOL_LOAD* {.final, pure.} = object
    SizeOfStruct*: DWORD
    BaseOfImage*: DWORD
    CheckSum*: DWORD
    TimeDateStamp*: DWORD
    FileName*: array[MAX_PATH, CHAR]
    Reparse*: BOOLEAN
  PIMAGEHLP_DEFERRED_SYMBOL_LOAD* = ptr IMAGEHLP_DEFERRED_SYMBOL_LOAD
  IMAGEHLP_DUPLICATE_SYMBOL* {.final, pure.} = object
    SizeOfStruct*: DWORD
    NumberOfDups*: DWORD
    Symbol*: PIMAGEHLP_SYMBOL
    SelectedSymbol*: ULONG
  PIMAGEHLP_DUPLICATE_SYMBOL* = ptr IMAGEHLP_DUPLICATE_SYMBOL
  DIGEST_HANDLE* = HANDLE
  PIMAGEHLP_STATUS_ROUTINE* = proc (P1: IMAGEHLP_STATUS_REASON, P2: LPSTR, P3: LPSTR, P4: ULONG, P5: ULONG): BOOL {.stdcall.}
  PREAD_PROCESS_MEMORY_ROUTINE* = proc (P1: HANDLE, P2: LPCVOID, P3: LPVOID, P4: DWORD, P5: LPDWORD): BOOL {.stdcall.}
  PFUNCTION_TABLE_ACCESS_ROUTINE* = proc (P1: HANDLE, P2: DWORD): LPVOID {.stdcall.}
  PGET_MODULE_BASE_ROUTINE* = proc (P1: HANDLE, P2: DWORD): DWORD {.stdcall.}
  PTRANSLATE_ADDRESS_ROUTINE* = proc (P1: HANDLE, P2: HANDLE, P3: LPADDRESS): DWORD {.stdcall.}
  PSYM_ENUMMODULES_CALLBACK* = proc (P1: LPSTR, P2: ULONG, P3: PVOID): BOOL {.stdcall.}
  PSYM_ENUMSYMBOLS_CALLBACK* = proc (P1: LPSTR, P2: ULONG, P3: ULONG, P4: PVOID): BOOL {.stdcall.}
  PENUMLOADED_MODULES_CALLBACK* = proc (P1: LPSTR, P2: ULONG, P3: ULONG, P4: PVOID): BOOL {.stdcall.}
  PSYMBOL_REGISTERED_CALLBACK* = proc (P1: HANDLE, P2: ULONG, P3: PVOID, P4: PVOID): BOOL {.stdcall.}
  DIGEST_FUNCTION* = proc (refdata: DIGEST_HANDLE, pData: PBYTE, dwLength: DWORD): BOOL {.stdcall.}

proc CheckSumMappedFile*(P1: LPVOID, P2: DWORD, P3: LPDWORD, P4: LPDWORD): PIMAGE_NT_HEADERS {.winapi, dynlib: "imagehlp", importc.}
proc MapFileAndCheckSumA*(P1: LPSTR, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "imagehlp", importc.}
proc MapFileAndCheckSumW*(P1: PWSTR, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "imagehlp", importc.}
proc TouchFileTimes*(P1: HANDLE, P2: LPSYSTEMTIME): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SplitSymbols*(P1: LPSTR, P2: LPSTR, P3: LPSTR, P4: DWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc FindDebugInfoFile*(P1: LPSTR, P2: LPSTR, P3: LPSTR): HANDLE {.winapi, dynlib: "imagehlp", importc.}
proc FindExecutableImage*(P1: LPSTR, P2: LPSTR, P3: LPSTR): HANDLE {.winapi, dynlib: "imagehlp", importc.}
proc UpdateDebugInfoFile*(P1: LPSTR, P2: LPSTR, P3: LPSTR, P4: PIMAGE_NT_HEADERS): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc UpdateDebugInfoFileEx*(P1: LPSTR, P2: LPSTR, P3: LPSTR, P4: PIMAGE_NT_HEADERS, P5: DWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc BindImage*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc BindImageEx*(P1: DWORD, P2: LPSTR, P3: LPSTR, P4: LPSTR, P5: PIMAGEHLP_STATUS_ROUTINE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ReBaseImage*(P1: LPSTR, P2: LPSTR, P3: BOOL, P4: BOOL, P5: BOOL, P6: ULONG, P7: ptr ULONG, P8: ptr ULONG, P9: ptr ULONG, P10: ptr ULONG, P11: ULONG): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ImageLoad*(P1: LPSTR, P2: LPSTR): PLOADED_IMAGE {.winapi, dynlib: "imagehlp", importc.}
proc ImageUnload*(P1: PLOADED_IMAGE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ImageNtHeader*(P1: PVOID): PIMAGE_NT_HEADERS {.winapi, dynlib: "imagehlp", importc.}
proc ImageDirectoryEntryToData*(P1: PVOID, P2: BOOLEAN, P3: USHORT, P4: PULONG): PVOID {.winapi, dynlib: "imagehlp", importc.}
proc ImageRvaToSection*(P1: PIMAGE_NT_HEADERS, P2: PVOID, P3: ULONG): PIMAGE_SECTION_HEADER {.winapi, dynlib: "imagehlp", importc.}
proc ImageRvaToVa*(P1: PIMAGE_NT_HEADERS, P2: PVOID, P3: ULONG, P4: ptr PIMAGE_SECTION_HEADER): PVOID {.winapi, dynlib: "imagehlp", importc.}
proc MapAndLoad*(P1: LPSTR, P2: LPSTR, P3: PLOADED_IMAGE, P4: BOOL, P5: BOOL): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc GetImageConfigInformation*(P1: PLOADED_IMAGE, P2: PIMAGE_LOAD_CONFIG_DIRECTORY): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc GetImageUnusedHeaderBytes*(P1: PLOADED_IMAGE, P2: LPDWORD): DWORD {.winapi, dynlib: "imagehlp", importc.}
proc SetImageConfigInformation*(P1: PLOADED_IMAGE, P2: PIMAGE_LOAD_CONFIG_DIRECTORY): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc UnMapAndLoad*(P1: PLOADED_IMAGE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc MapDebugInformation*(P1: HANDLE, P2: LPSTR, P3: LPSTR, P4: DWORD): PIMAGE_DEBUG_INFORMATION {.winapi, dynlib: "imagehlp", importc.}
proc UnmapDebugInformation*(P1: PIMAGE_DEBUG_INFORMATION): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SearchTreeForFile*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc MakeSureDirectoryPathExists*(P1: LPCSTR): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc UnDecorateSymbolName*(P1: LPCSTR, P2: LPSTR, P3: DWORD, P4: DWORD): DWORD {.winapi, dynlib: "imagehlp", importc.}
proc StackWalk*(P1: DWORD, P2: HANDLE, P3: HANDLE, P4: LPSTACKFRAME, P5: LPVOID, P6: PREAD_PROCESS_MEMORY_ROUTINE, P7: PFUNCTION_TABLE_ACCESS_ROUTINE, P8: PGET_MODULE_BASE_ROUTINE, P9: PTRANSLATE_ADDRESS_ROUTINE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ImagehlpApiVersion*(): LPAPI_VERSION {.winapi, dynlib: "imagehlp", importc.}
proc ImagehlpApiVersionEx*(P1: LPAPI_VERSION): LPAPI_VERSION {.winapi, dynlib: "imagehlp", importc.}
proc GetTimestampForLoadedLibrary*(P1: HMODULE): DWORD {.winapi, dynlib: "imagehlp", importc.}
proc RemovePrivateCvSymbolic*(P1: PCHAR, P2: ptr PCHAR, P3: ptr ULONG): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc RemoveRelocations*(P1: PCHAR): VOID {.winapi, dynlib: "imagehlp", importc.}
proc SymSetOptions*(P1: DWORD): DWORD {.winapi, dynlib: "imagehlp", importc.}
proc SymGetOptions*(): DWORD {.winapi, dynlib: "imagehlp", importc.}
proc SymCleanup*(P1: HANDLE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymEnumerateModules*(P1: HANDLE, P2: PSYM_ENUMMODULES_CALLBACK, P3: PVOID): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymEnumerateSymbols*(P1: HANDLE, P2: DWORD, P3: PSYM_ENUMSYMBOLS_CALLBACK, P4: PVOID): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc EnumerateLoadedModules*(P1: HANDLE, P2: PENUMLOADED_MODULES_CALLBACK, P3: PVOID): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymFunctionTableAccess*(P1: HANDLE, P2: DWORD): LPVOID {.winapi, dynlib: "imagehlp", importc.}
proc SymGetModuleInfo*(P1: HANDLE, P2: DWORD, P3: PIMAGEHLP_MODULE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymGetModuleBase*(P1: HANDLE, P2: DWORD): DWORD {.winapi, dynlib: "imagehlp", importc.}
proc SymGetSymFromAddr*(P1: HANDLE, P2: DWORD, P3: PDWORD, P4: PIMAGEHLP_SYMBOL): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymGetSymFromName*(P1: HANDLE, P2: LPSTR, P3: PIMAGEHLP_SYMBOL): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymGetSymNext*(P1: HANDLE, P2: PIMAGEHLP_SYMBOL): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymGetSymPrev*(P1: HANDLE, P2: PIMAGEHLP_SYMBOL): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymGetLineFromAddr*(P1: HANDLE, P2: DWORD, P3: PDWORD, P4: PIMAGEHLP_LINE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymGetLineFromName*(P1: HANDLE, P2: LPSTR, P3: LPSTR, P4: DWORD, P5: PLONG, P6: PIMAGEHLP_LINE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymGetLineNext*(P1: HANDLE, P2: PIMAGEHLP_LINE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymGetLinePrev*(P1: HANDLE, P2: PIMAGEHLP_LINE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymMatchFileName*(P1: LPSTR, P2: LPSTR, P3: ptr LPSTR, P4: ptr LPSTR): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymInitialize*(P1: HANDLE, P2: LPSTR, P3: BOOL): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymGetSearchPath*(P1: HANDLE, P2: LPSTR, P3: DWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymSetSearchPath*(P1: HANDLE, P2: LPSTR): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymLoadModule*(P1: HANDLE, P2: HANDLE, P3: PSTR, P4: PSTR, P5: DWORD, P6: DWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymUnloadModule*(P1: HANDLE, P2: DWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymUnDName*(P1: PIMAGEHLP_SYMBOL, P2: LPSTR, P3: DWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymRegisterCallback*(P1: HANDLE, P2: PSYMBOL_REGISTERED_CALLBACK, P3: PVOID): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ImageGetDigestStream*(P1: HANDLE, P2: DWORD, P3: DIGEST_FUNCTION, P4: DIGEST_HANDLE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ImageAddCertificate*(P1: HANDLE, P2: LPWIN_CERTIFICATE, P3: PDWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ImageRemoveCertificate*(P1: HANDLE, P2: DWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ImageEnumerateCertificates*(P1: HANDLE, P2: WORD, P3: PDWORD, P4: PDWORD, P5: DWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ImageGetCertificateData*(P1: HANDLE, P2: DWORD, P3: LPWIN_CERTIFICATE, P4: PDWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ImageGetCertificateHeader*(P1: HANDLE, P2: DWORD, P3: LPWIN_CERTIFICATE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc CopyPdb*(P1: ptr CHAR, P2: ptr CHAR, P3: BOOL): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc RemovePrivateCvSymbolicEx*(P1: PCHAR, P2: ULONG, P3: ptr PCHAR, P4: ptr ULONG): BOOL {.winapi, dynlib: "imagehlp", importc.}

when not defined(winansi):
  proc MapFileAndCheckSum*(P1: PWSTR, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "imagehlp", importc: "MapFileAndCheckSumW".}

else:
  proc MapFileAndCheckSum*(P1: LPSTR, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "imagehlp", importc: "MapFileAndCheckSumA".}

# ext/imm.nim

const
  WM_CONVERTREQUESTEX* = 0x108
  WM_IME_STARTCOMPOSITION* = 0x10D
  WM_IME_ENDCOMPOSITION* = 0x10E
  WM_IME_COMPOSITION* = 0x10F
  WM_IME_KEYLAST* = 0x10F
  WM_IME_SETCONTEXT* = 0x281
  WM_IME_NOTIFY* = 0x282
  WM_IME_CONTROL* = 0x283
  WM_IME_COMPOSITIONFULL* = 0x284
  WM_IME_SELECT* = 0x285
  WM_IME_CHAR* = 0x286
  WM_IME_REQUEST* = 0x288
  WM_IME_KEYDOWN* = 0x290
  WM_IME_KEYUP* = 0x291
  IMC_GETCANDIDATEPOS* = 7
  IMC_SETCANDIDATEPOS* = 8
  IMC_GETCOMPOSITIONFONT* = 9
  IMC_SETCOMPOSITIONFONT* = 10
  IMC_GETCOMPOSITIONWINDOW* = 11
  IMC_SETCOMPOSITIONWINDOW* = 12
  IMC_GETSTATUSWINDOWPOS* = 15
  IMC_SETSTATUSWINDOWPOS* = 16
  IMC_CLOSESTATUSWINDOW* = 0x21
  IMC_OPENSTATUSWINDOW* = 0x22
  IMN_CLOSESTATUSWINDOW* = 1
  IMN_OPENSTATUSWINDOW* = 2
  IMN_CHANGECANDIDATE* = 3
  IMN_CLOSECANDIDATE* = 4
  IMN_OPENCANDIDATE* = 5
  IMN_SETCONVERSIONMODE* = 6
  IMN_SETSENTENCEMODE* = 7
  IMN_SETOPENSTATUS* = 8
  IMN_SETCANDIDATEPOS* = 9
  IMN_SETCOMPOSITIONFONT* = 10
  IMN_SETCOMPOSITIONWINDOW* = 11
  IMN_SETSTATUSWINDOWPOS* = 12
  IMN_GUIDELINE* = 13
  IMN_PRIVATE* = 14
  NI_OPENCANDIDATE* = 16
  NI_CLOSECANDIDATE* = 17
  NI_SELECTCANDIDATESTR* = 18
  NI_CHANGECANDIDATELIST* = 19
  NI_FINALIZECONVERSIONRESULT* = 20
  NI_COMPOSITIONSTR* = 21
  NI_SETCANDIDATE_PAGESTART* = 22
  NI_SETCANDIDATE_PAGESIZE* = 23
  NI_IMEMENUSELECTED* = 24
  ISC_SHOWUICANDIDATEWINDOW* = 1
  ISC_SHOWUICOMPOSITIONWINDOW* = 0x80000000'i32
  ISC_SHOWUIGUIDELINE* = 0x40000000
  ISC_SHOWUIALLCANDIDATEWINDOW* = 15
  ISC_SHOWUIALL* = -1073741809
  CPS_COMPLETE* = 1
  CPS_CONVERT* = 2
  CPS_REVERT* = 3
  CPS_CANCEL* = 4
  IME_CHOTKEY_IME_NONIME_TOGGLE* = 16
  IME_CHOTKEY_SHAPE_TOGGLE* = 17
  IME_CHOTKEY_SYMBOL_TOGGLE* = 18
  IME_JHOTKEY_CLOSE_OPEN* = 0x30
  IME_KHOTKEY_SHAPE_TOGGLE* = 0x50
  IME_KHOTKEY_HANJACONVERT* = 0x51
  IME_KHOTKEY_ENGLISH* = 0x52
  IME_THOTKEY_IME_NONIME_TOGGLE* = 0x70
  IME_THOTKEY_SHAPE_TOGGLE* = 0x71
  IME_THOTKEY_SYMBOL_TOGGLE* = 0x72
  IME_HOTKEY_DSWITCH_FIRST* = 256
  IME_HOTKEY_DSWITCH_LAST* = 0x11F
  IME_ITHOTKEY_RESEND_RESULTSTR* = 512
  IME_ITHOTKEY_PREVIOUS_COMPOSITION* = 513
  IME_ITHOTKEY_UISTYLE_TOGGLE* = 514
  GCS_COMPREADSTR* = 1
  GCS_COMPREADATTR* = 2
  GCS_COMPREADCLAUSE* = 4
  GCS_COMPSTR* = 8
  GCS_COMPATTR* = 16
  GCS_COMPCLAUSE* = 32
  GCS_CURSORPOS* = 128
  GCS_DELTASTART* = 256
  GCS_RESULTREADSTR* = 512
  GCS_RESULTREADCLAUSE* = 1024
  GCS_RESULTSTR* = 2048
  GCS_RESULTCLAUSE* = 4096
  CS_INSERTCHAR* = 0x2000
  CS_NOMOVECARET* = 0x4000
  IMEVER_0310* = 0x3000A
  IMEVER_0400* = 0x40000
  IME_PROP_AT_CARET* = 0x10000
  IME_PROP_SPECIAL_UI* = 0x20000
  IME_PROP_CANDLIST_START_FROM_1* = 0x40000
  IME_PROP_UNICODE* = 0x80000
  UI_CAP_2700* = 1
  UI_CAP_ROT90* = 2
  UI_CAP_ROTANY* = 4
  SCS_CAP_COMPSTR* = 1
  SCS_CAP_MAKEREAD* = 2
  SELECT_CAP_CONVERSION* = 1
  SELECT_CAP_SENTENCE* = 2
  GGL_LEVEL* = 1
  GGL_INDEX* = 2
  GGL_STRING* = 3
  GGL_PRIVATE* = 4
  GL_LEVEL_NOGUIDELINE* = 0
  GL_LEVEL_FATAL* = 1
  GL_LEVEL_ERROR* = 2
  GL_LEVEL_WARNING* = 3
  GL_LEVEL_INFORMATION* = 4
  GL_ID_UNKNOWN* = 0
  GL_ID_NOMODULE* = 1
  GL_ID_NODICTIONARY* = 16
  GL_ID_CANNOTSAVE* = 17
  GL_ID_NOCONVERT* = 32
  GL_ID_TYPINGERROR* = 33
  GL_ID_TOOMANYSTROKE* = 34
  GL_ID_READINGCONFLICT* = 35
  GL_ID_INPUTREADING* = 36
  GL_ID_INPUTRADICAL* = 37
  GL_ID_INPUTCODE* = 38
  GL_ID_INPUTSYMBOL* = 39
  GL_ID_CHOOSECANDIDATE* = 40
  GL_ID_REVERSECONVERSION* = 41
  GL_ID_PRIVATE_FIRST* = 0x8000
  GL_ID_PRIVATE_LAST* = 0xFFFF
  IGP_GETIMEVERSION* = 0xFFFFFFFC'u32
  IGP_PROPERTY* = 4
  IGP_CONVERSION* = 8
  IGP_SENTENCE* = 12
  IGP_UI* = 16
  IGP_SETCOMPSTR* = 0x14
  IGP_SELECT* = 0x18
  SCS_SETSTR* = GCS_COMPREADSTR or GCS_COMPSTR
  SCS_CHANGEATTR* = GCS_COMPREADATTR or GCS_COMPATTR
  SCS_CHANGECLAUSE* = GCS_COMPREADCLAUSE or GCS_COMPCLAUSE
  ATTR_INPUT* = 0
  ATTR_TARGET_CONVERTED* = 1
  ATTR_CONVERTED* = 2
  ATTR_TARGET_NOTCONVERTED* = 3
  ATTR_INPUT_ERROR* = 4
  ATTR_FIXEDCONVERTED* = 5
  CFS_DEFAULT* = 0
  CFS_RECT* = 1
  CFS_POINT* = 2
  CFS_SCREEN* = 4
  CFS_FORCE_POSITION* = 32
  CFS_CANDIDATEPOS* = 64
  CFS_EXCLUDE* = 128
  GCL_CONVERSION* = 1
  GCL_REVERSECONVERSION* = 2
  GCL_REVERSE_LENGTH* = 3
  IME_CMODE_ALPHANUMERIC* = 0
  IME_CMODE_NATIVE* = 1
  IME_CMODE_CHINESE* = IME_CMODE_NATIVE
  IME_CMODE_HANGEUL* = IME_CMODE_NATIVE
  IME_CMODE_HANGUL* = IME_CMODE_NATIVE
  IME_CMODE_JAPANESE* = IME_CMODE_NATIVE
  IME_CMODE_KATAKANA* = 2
  IME_CMODE_LANGUAGE* = 3
  IME_CMODE_FULLSHAPE* = 8
  IME_CMODE_ROMAN* = 16
  IME_CMODE_CHARCODE* = 32
  IME_CMODE_HANJACONVERT* = 64
  IME_CMODE_SOFTKBD* = 128
  IME_CMODE_NOCONVERSION* = 256
  IME_CMODE_EUDC* = 512
  IME_CMODE_SYMBOL* = 1024
  IME_CMODE_FIXED* = 2048
  IME_SMODE_NONE* = 0
  IME_SMODE_PLAURALCLAUSE* = 1
  IME_SMODE_SINGLECONVERT* = 2
  IME_SMODE_AUTOMATIC* = 4
  IME_SMODE_PHRASEPREDICT* = 8
  IME_CAND_UNKNOWN* = 0
  IME_CAND_READ* = 1
  IME_CAND_CODE* = 2
  IME_CAND_MEANING* = 3
  IME_CAND_RADICAL* = 4
  IME_CAND_STROKE* = 5
  IMM_ERROR_NODATA* = ( -1 )
  IMM_ERROR_GENERAL* = ( -2 )
  IME_CONFIG_GENERAL* = 1
  IME_CONFIG_REGISTERWORD* = 2
  IME_CONFIG_SELECTDICTIONARY* = 3
  IME_ESC_QUERY_SUPPORT* = 3
  IME_ESC_RESERVED_FIRST* = 4
  IME_ESC_RESERVED_LAST* = 0x7FF
  IME_ESC_PRIVATE_FIRST* = 0x800
  IME_ESC_PRIVATE_LAST* = 0xFFF
  IME_ESC_SEQUENCE_TO_INTERNAL* = 0x1001
  IME_ESC_GET_EUDC_DICTIONARY* = 0x1003
  IME_ESC_SET_EUDC_DICTIONARY* = 0x1004
  IME_ESC_MAX_KEY* = 0x1005
  IME_ESC_IME_NAME* = 0x1006
  IME_ESC_SYNC_HOTKEY* = 0x1007
  IME_ESC_HANJA_MODE* = 0x1008
  IME_ESC_AUTOMATA* = 0x1009
  IME_REGWORD_STYLE_EUDC* = 1
  IME_REGWORD_STYLE_USER_FIRST* = 0x80000000'i32
  IME_REGWORD_STYLE_USER_LAST* = -1
  SOFTKEYBOARD_TYPE_T1* = 1
  SOFTKEYBOARD_TYPE_C1* = 2
  IMEMENUITEM_STRING_SIZE* = 80
  # MOD_ALT* = 1
  # MOD_CONTROL* = 2
  # MOD_SHIFT* = 4
  # MOD_WIN* = 8
  # MOD_IGNORE_ALL_MODIFIER* = 1024
  # MOD_ON_KEYUP* = 2048
  # MOD_RIGHT* = 16384
  # MOD_LEFT* = 32768
  IACE_CHILDREN* = 1
  IACE_DEFAULT* = 16
  IACE_IGNORENOCONTEXT* = 32
  IGIMIF_RIGHTMENU* = 1
  IGIMII_CMODE* = 1
  IGIMII_SMODE* = 2
  IGIMII_CONFIGURE* = 4
  IGIMII_TOOLS* = 8
  IGIMII_HELP* = 16
  IGIMII_OTHER* = 32
  IGIMII_INPUTTOOLS* = 64
  IMFT_RADIOCHECK* = 1
  IMFT_SEPARATOR* = 2
  IMFT_SUBMENU* = 4
  IMFS_GRAYED* = MFS_GRAYED
  IMFS_DISABLED* = MFS_DISABLED
  IMFS_CHECKED* = MFS_CHECKED
  IMFS_HILITE* = MFS_HILITE
  IMFS_ENABLED* = MFS_ENABLED
  IMFS_UNCHECKED* = MFS_UNCHECKED
  IMFS_UNHILITE* = MFS_UNHILITE
  IMFS_DEFAULT* = MFS_DEFAULT
  STYLE_DESCRIPTION_SIZE* = 32

type
  HIMC* = DWORD
  HIMCC* = DWORD
  LPHKL* = ptr HKL
  COMPOSITIONFORM* {.final, pure.} = object
    dwStyle*: DWORD
    ptCurrentPos*: POINT
    rcArea*: RECT
  PCOMPOSITIONFORM* = ptr COMPOSITIONFORM
  LPCOMPOSITIONFORM* = ptr COMPOSITIONFORM
  CANDIDATEFORM* {.final, pure.} = object
    dwIndex*: DWORD
    dwStyle*: DWORD
    ptCurrentPos*: POINT
    rcArea*: RECT
  PCANDIDATEFORM* = ptr CANDIDATEFORM
  LPCANDIDATEFORM* = ptr CANDIDATEFORM
  CANDIDATELIST* {.final, pure.} = object
    dwSize*: DWORD
    dwStyle*: DWORD
    dwCount*: DWORD
    dwSelection*: DWORD
    dwPageStart*: DWORD
    dwPageSize*: DWORD
    dwOffset*: array[1, DWORD]
  PCANDIDATELIST* = ptr CANDIDATELIST
  LPCANDIDATELIST* = ptr CANDIDATELIST
  REGISTERWORDA* {.final, pure.} = object
    lpReading*: LPSTR
    lpWord*: LPSTR
  PREGISTERWORDA* = ptr REGISTERWORDA
  LPREGISTERWORDA* = ptr REGISTERWORDA
  REGISTERWORDW* {.final, pure.} = object
    lpReading*: LPWSTR
    lpWord*: LPWSTR
  PREGISTERWORDW* = ptr REGISTERWORDW
  LPREGISTERWORDW* = ptr REGISTERWORDW
  STYLEBUFA* {.final, pure.} = object
    dwStyle*: DWORD
    szDescription*: array[STYLE_DESCRIPTION_SIZE, CHAR]
  PSTYLEBUFA* = ptr STYLEBUFA
  LPSTYLEBUFA* = ptr STYLEBUFA
  STYLEBUFW* {.final, pure.} = object
    dwStyle*: DWORD
    szDescription*: array[STYLE_DESCRIPTION_SIZE, WCHAR]
  PSTYLEBUFW* = ptr STYLEBUFW
  LPSTYLEBUFW* = ptr STYLEBUFW
  IMEMENUITEMINFOA* {.final, pure.} = object
    cbSize*: UINT
    fType*: UINT
    fState*: UINT
    wID*: UINT
    hbmpChecked*: HBITMAP
    hbmpUnchecked*: HBITMAP
    dwItemData*: DWORD
    szString*: array[IMEMENUITEM_STRING_SIZE, CHAR]
    hbmpItem*: HBITMAP
  PIMEMENUITEMINFOA* = ptr IMEMENUITEMINFOA
  LPIMEMENUITEMINFOA* = ptr IMEMENUITEMINFOA
  IMEMENUITEMINFOW* {.final, pure.} = object
    cbSize*: UINT
    fType*: UINT
    fState*: UINT
    wID*: UINT
    hbmpChecked*: HBITMAP
    hbmpUnchecked*: HBITMAP
    dwItemData*: DWORD
    szString*: array[IMEMENUITEM_STRING_SIZE, WCHAR]
    hbmpItem*: HBITMAP
  PIMEMENUITEMINFOW* = ptr IMEMENUITEMINFOW
  LPIMEMENUITEMINFOW* = ptr IMEMENUITEMINFOW
  REGISTERWORDENUMPROCA* = proc (P1: LPCSTR, P2: DWORD, P3: LPCSTR, P4: LPVOID): int32 {.cdecl.}
  REGISTERWORDENUMPROCW* = proc (P1: LPCWSTR, P2: DWORD, P3: LPCWSTR, P4: LPVOID): int32 {.cdecl.}

when not defined(winansi):
  type
    REGISTERWORDENUMPROC* = REGISTERWORDENUMPROCW
    REGISTERWORD* = REGISTERWORDW
    IMEMENUITEMINFO* = IMEMENUITEMINFOW
    STYLEBUF* = STYLEBUFW

else:
  type
    REGISTERWORDENUMPROC* = REGISTERWORDENUMPROCA
    REGISTERWORD* = REGISTERWORDA
    IMEMENUITEMINFO* = IMEMENUITEMINFOA
    STYLEBUF* = STYLEBUFA

type
  PSTYLEBUF* = ptr STYLEBUF
  LPSTYLEBUF* = ptr STYLEBUF
  PREGISTERWORD* = ptr REGISTERWORD
  LPREGISTERWORD* = ptr REGISTERWORD
  PIMEMENUITEMINFO* = ptr IMEMENUITEMINFO
  LPIMEMENUITEMINFO* = ptr IMEMENUITEMINFO

proc ImmInstallIMEA*(P1: LPCSTR, P2: LPCSTR): HKL {.winapi, dynlib: "imm32", importc.}
proc ImmInstallIMEW*(P1: LPCWSTR, P2: LPCWSTR): HKL {.winapi, dynlib: "imm32", importc.}
proc ImmGetDefaultIMEWnd*(P1: HWND): HWND {.winapi, dynlib: "imm32", importc.}
proc ImmGetDescriptionA*(P1: HKL, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "imm32", importc.}
proc ImmGetDescriptionW*(P1: HKL, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "imm32", importc.}
proc ImmGetIMEFileNameA*(P1: HKL, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "imm32", importc.}
proc ImmGetIMEFileNameW*(P1: HKL, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "imm32", importc.}
proc ImmGetProperty*(P1: HKL, P2: DWORD): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmIsIME*(P1: HKL): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmSimulateHotKey*(P1: HWND, P2: DWORD): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmCreateContext*(): HIMC {.winapi, dynlib: "imm32", importc.}
proc ImmDestroyContext*(P1: HIMC): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetContext*(P1: HWND): HIMC {.winapi, dynlib: "imm32", importc.}
proc ImmReleaseContext*(P1: HWND, P2: HIMC): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmAssociateContext*(P1: HWND, P2: HIMC): HIMC {.winapi, dynlib: "imm32", importc.}
proc ImmGetCompositionStringA*(P1: HIMC, P2: DWORD, P3: PVOID, P4: DWORD): LONG {.winapi, dynlib: "imm32", importc.}
proc ImmGetCompositionStringW*(P1: HIMC, P2: DWORD, P3: PVOID, P4: DWORD): LONG {.winapi, dynlib: "imm32", importc.}
proc ImmSetCompositionStringA*(P1: HIMC, P2: DWORD, P3: PCVOID, P4: DWORD, P5: PCVOID, P6: DWORD): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmSetCompositionStringW*(P1: HIMC, P2: DWORD, P3: PCVOID, P4: DWORD, P5: PCVOID, P6: DWORD): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetCandidateListCountA*(P1: HIMC, P2: PDWORD): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmGetCandidateListCountW*(P1: HIMC, P2: PDWORD): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmGetCandidateListA*(P1: HIMC, P2: DWORD, P3: PCANDIDATELIST, P4: DWORD): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmGetCandidateListW*(P1: HIMC, P2: DWORD, P3: PCANDIDATELIST, P4: DWORD): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmGetGuideLineA*(P1: HIMC, P2: DWORD, P3: LPSTR, P4: DWORD): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmGetGuideLineW*(P1: HIMC, P2: DWORD, P3: LPWSTR, P4: DWORD): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmGetConversionStatus*(P1: HIMC, P2: LPDWORD, P3: PDWORD): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmSetConversionStatus*(P1: HIMC, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetOpenStatus*(P1: HIMC): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmSetOpenStatus*(P1: HIMC, P2: BOOL): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetCompositionFontA*(P1: HIMC, P2: LPLOGFONTA): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetCompositionFontW*(P1: HIMC, P2: LPLOGFONTW): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmSetCompositionFontA*(P1: HIMC, P2: LPLOGFONTA): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmSetCompositionFontW*(P1: HIMC, P2: LPLOGFONTW): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmConfigureIMEA*(P1: HKL, P2: HWND, P3: DWORD, P4: PVOID): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmConfigureIMEW*(P1: HKL, P2: HWND, P3: DWORD, P4: PVOID): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmEscapeA*(P1: HKL, P2: HIMC, P3: UINT, P4: PVOID): LRESULT {.winapi, dynlib: "imm32", importc.}
proc ImmEscapeW*(P1: HKL, P2: HIMC, P3: UINT, P4: PVOID): LRESULT {.winapi, dynlib: "imm32", importc.}
proc ImmGetConversionListA*(P1: HKL, P2: HIMC, P3: LPCSTR, P4: PCANDIDATELIST, P5: DWORD, P6: UINT): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmGetConversionListW*(P1: HKL, P2: HIMC, P3: LPCWSTR, P4: PCANDIDATELIST, P5: DWORD, P6: UINT): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmNotifyIME*(P1: HIMC, P2: DWORD, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetStatusWindowPos*(P1: HIMC, P2: LPPOINT): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmSetStatusWindowPos*(P1: HIMC, P2: LPPOINT): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetCompositionWindow*(P1: HIMC, P2: PCOMPOSITIONFORM): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmSetCompositionWindow*(P1: HIMC, P2: PCOMPOSITIONFORM): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetCandidateWindow*(P1: HIMC, P2: DWORD, P3: PCANDIDATEFORM): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmSetCandidateWindow*(P1: HIMC, P2: PCANDIDATEFORM): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmIsUIMessageA*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmIsUIMessageW*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetVirtualKey*(P1: HWND): UINT {.winapi, dynlib: "imm32", importc.}
proc ImmRegisterWordA*(P1: HKL, P2: LPCSTR, P3: DWORD, P4: LPCSTR): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmRegisterWordW*(P1: HKL, P2: LPCWSTR, P3: DWORD, P4: LPCWSTR): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmUnregisterWordA*(P1: HKL, P2: LPCSTR, P3: DWORD, P4: LPCSTR): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmUnregisterWordW*(P1: HKL, P2: LPCWSTR, P3: DWORD, P4: LPCWSTR): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetRegisterWordStyleA*(P1: HKL, P2: UINT, P3: PSTYLEBUFA): UINT {.winapi, dynlib: "imm32", importc.}
proc ImmGetRegisterWordStyleW*(P1: HKL, P2: UINT, P3: PSTYLEBUFW): UINT {.winapi, dynlib: "imm32", importc.}
proc ImmEnumRegisterWordA*(P1: HKL, P2: REGISTERWORDENUMPROCA, P3: LPCSTR, P4: DWORD, P5: LPCSTR, P6: PVOID): UINT {.winapi, dynlib: "imm32", importc.}
proc ImmEnumRegisterWordW*(P1: HKL, P2: REGISTERWORDENUMPROCW, P3: LPCWSTR, P4: DWORD, P5: LPCWSTR, P6: PVOID): UINT {.winapi, dynlib: "imm32", importc.}
proc EnableEUDC*(P1: BOOL): BOOL {.winapi, dynlib: "gdi32", importc.}
proc ImmDisableIME*(P1: DWORD): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetImeMenuItemsA*(P1: HIMC, P2: DWORD, P3: DWORD, P4: LPIMEMENUITEMINFOA, P5: LPIMEMENUITEMINFOA, P6: DWORD): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmGetImeMenuItemsW*(P1: HIMC, P2: DWORD, P3: DWORD, P4: LPIMEMENUITEMINFOW, P5: LPIMEMENUITEMINFOW, P6: DWORD): DWORD {.winapi, dynlib: "imm32", importc.}

when not defined(winansi):
  proc ImmEnumRegisterWord*(P1: HKL, P2: REGISTERWORDENUMPROCW, P3: LPCWSTR, P4: DWORD, P5: LPCWSTR, P6: PVOID): UINT {.winapi, dynlib: "imm32", importc: "ImmEnumRegisterWordW".}
  proc ImmGetRegisterWordStyle*(P1: HKL, P2: UINT, P3: PSTYLEBUFW): UINT {.winapi, dynlib: "imm32", importc: "ImmGetRegisterWordStyleW".}
  proc ImmUnregisterWord*(P1: HKL, P2: LPCWSTR, P3: DWORD, P4: LPCWSTR): BOOL {.winapi, dynlib: "imm32", importc: "ImmUnregisterWordW".}
  proc ImmRegisterWord*(P1: HKL, P2: LPCWSTR, P3: DWORD, P4: LPCWSTR): BOOL {.winapi, dynlib: "imm32", importc: "ImmRegisterWordW".}
  proc ImmInstallIME*(P1: LPCWSTR, P2: LPCWSTR): HKL {.winapi, dynlib: "imm32", importc: "ImmInstallIMEW".}
  proc ImmIsUIMessage*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "imm32", importc: "ImmIsUIMessageW".}
  proc ImmGetConversionList*(P1: HKL, P2: HIMC, P3: LPCWSTR, P4: PCANDIDATELIST, P5: DWORD, P6: UINT): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetConversionListW".}
  proc ImmEscape*(P1: HKL, P2: HIMC, P3: UINT, P4: PVOID): LRESULT {.winapi, dynlib: "imm32", importc: "ImmEscapeW".}
  proc ImmConfigureIME*(P1: HKL, P2: HWND, P3: DWORD, P4: PVOID): BOOL {.winapi, dynlib: "imm32", importc: "ImmConfigureIMEW".}
  proc ImmSetCompositionFont*(P1: HIMC, P2: LPLOGFONTW): BOOL {.winapi, dynlib: "imm32", importc: "ImmSetCompositionFontW".}
  proc ImmGetCompositionFont*(P1: HIMC, P2: LPLOGFONTW): BOOL {.winapi, dynlib: "imm32", importc: "ImmGetCompositionFontW".}
  proc ImmGetGuideLine*(P1: HIMC, P2: DWORD, P3: LPWSTR, P4: DWORD): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetGuideLineW".}
  proc ImmGetCandidateList*(P1: HIMC, P2: DWORD, P3: PCANDIDATELIST, P4: DWORD): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetCandidateListW".}
  proc ImmGetCandidateListCount*(P1: HIMC, P2: PDWORD): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetCandidateListCountW".}
  proc ImmSetCompositionString*(P1: HIMC, P2: DWORD, P3: PCVOID, P4: DWORD, P5: PCVOID, P6: DWORD): BOOL {.winapi, dynlib: "imm32", importc: "ImmSetCompositionStringW".}
  proc ImmGetCompositionString*(P1: HIMC, P2: DWORD, P3: PVOID, P4: DWORD): LONG {.winapi, dynlib: "imm32", importc: "ImmGetCompositionStringW".}
  proc ImmGetDescription*(P1: HKL, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "imm32", importc: "ImmGetDescriptionW".}
  proc ImmGetIMEFileName*(P1: HKL, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "imm32", importc: "ImmGetIMEFileNameW".}
  proc ImmGetImeMenuItems*(P1: HIMC, P2: DWORD, P3: DWORD, P4: LPIMEMENUITEMINFOW, P5: LPIMEMENUITEMINFOW, P6: DWORD): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetImeMenuItemsW".}

else:
  proc ImmEnumRegisterWord*(P1: HKL, P2: REGISTERWORDENUMPROCA, P3: LPCSTR, P4: DWORD, P5: LPCSTR, P6: PVOID): UINT {.winapi, dynlib: "imm32", importc: "ImmEnumRegisterWordA".}
  proc ImmGetRegisterWordStyle*(P1: HKL, P2: UINT, P3: PSTYLEBUFA): UINT {.winapi, dynlib: "imm32", importc: "ImmGetRegisterWordStyleA".}
  proc ImmUnregisterWord*(P1: HKL, P2: LPCSTR, P3: DWORD, P4: LPCSTR): BOOL {.winapi, dynlib: "imm32", importc: "ImmUnregisterWordA".}
  proc ImmRegisterWord*(P1: HKL, P2: LPCSTR, P3: DWORD, P4: LPCSTR): BOOL {.winapi, dynlib: "imm32", importc: "ImmRegisterWordA".}
  proc ImmInstallIME*(P1: LPCSTR, P2: LPCSTR): HKL {.winapi, dynlib: "imm32", importc: "ImmInstallIMEA".}
  proc ImmIsUIMessage*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "imm32", importc: "ImmIsUIMessageA".}
  proc ImmGetConversionList*(P1: HKL, P2: HIMC, P3: LPCSTR, P4: PCANDIDATELIST, P5: DWORD, P6: UINT): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetConversionListA".}
  proc ImmEscape*(P1: HKL, P2: HIMC, P3: UINT, P4: PVOID): LRESULT {.winapi, dynlib: "imm32", importc: "ImmEscapeA".}
  proc ImmConfigureIME*(P1: HKL, P2: HWND, P3: DWORD, P4: PVOID): BOOL {.winapi, dynlib: "imm32", importc: "ImmConfigureIMEA".}
  proc ImmSetCompositionFont*(P1: HIMC, P2: LPLOGFONTA): BOOL {.winapi, dynlib: "imm32", importc: "ImmSetCompositionFontA".}
  proc ImmGetCompositionFont*(P1: HIMC, P2: LPLOGFONTA): BOOL {.winapi, dynlib: "imm32", importc: "ImmGetCompositionFontA".}
  proc ImmGetGuideLine*(P1: HIMC, P2: DWORD, P3: LPSTR, P4: DWORD): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetGuideLineA".}
  proc ImmGetCandidateList*(P1: HIMC, P2: DWORD, P3: PCANDIDATELIST, P4: DWORD): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetCandidateListA".}
  proc ImmGetCandidateListCount*(P1: HIMC, P2: PDWORD): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetCandidateListCountA".}
  proc ImmSetCompositionString*(P1: HIMC, P2: DWORD, P3: PCVOID, P4: DWORD, P5: PCVOID, P6: DWORD): BOOL {.winapi, dynlib: "imm32", importc: "ImmSetCompositionStringA".}
  proc ImmGetCompositionString*(P1: HIMC, P2: DWORD, P3: PVOID, P4: DWORD): LONG {.winapi, dynlib: "imm32", importc: "ImmGetCompositionStringA".}
  proc ImmGetDescription*(P1: HKL, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "imm32", importc: "ImmGetDescriptionA".}
  proc ImmGetIMEFileName*(P1: HKL, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "imm32", importc: "ImmGetIMEFileNameA".}
  proc ImmGetImeMenuItems*(P1: HIMC, P2: DWORD, P3: DWORD, P4: LPIMEMENUITEMINFOW, P5: LPIMEMENUITEMINFOW, P6: DWORD): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetImeMenuItemsW".}

# ext/sqltypes.nim
const
  # T_SQLINTERVAL* = enum
  SQL_IS_YEAR* = 1
  SQL_IS_MONTH* = 2
  SQL_IS_DAY* = 3
  SQL_IS_HOUR* = 4
  SQL_IS_MINUTE* = 5
  SQL_IS_SECOND* = 6
  SQL_IS_YEAR_TO_MONTH* = 7
  SQL_IS_DAY_TO_HOUR* = 8
  SQL_IS_DAY_TO_MINUTE* = 9
  SQL_IS_DAY_TO_SECOND* = 10
  SQL_IS_HOUR_TO_MINUTE* = 11
  SQL_IS_HOUR_TO_SECOND* = 12
  SQL_IS_MINUTE_TO_SECOND* = 13

type
  SCHAR* = int8
  SDWORD* = int32
  SLONG* = int32
  SWORD* = int16
  SSHORT* = int16
  RETCODE* = int16
  UDWORD* = ULONG
  UWORD* = USHORT
  SDOUBLE* = float64
  LDOUBLE* = float64
  SFLOAT* = float32
  PTR* = PVOID
  HENV* = PVOID
  HDBC* = PVOID
  HSTMT* = PVOID
  T_SQLCHAR* = UCHAR  # renamed from SQLCHAR
  T_SQLINTEGER* = int32 # renamed from SQLINTEGER
  T_SQLPOINTER* = PVOID # renamed from SQLPOINTER
  T_SQLSCHAR* = int8  # renamed from SQLSCHAR
  T_SQLSMALLINT* = int16  # renamed from SQLSMALLINT
  T_SQLUINTEGER* = UDWORD # renamed from SQLUINTEGER
  T_SQLUSMALLINT* = USHORT  # renamed from SQLUSMALLINT
  T_SQLWCHAR* = uint16  # renamed from SQLWCHAR
  SQLHANDLE* = HANDLE
  SQLHENV* = SQLHANDLE
  SQLHDBC* = SQLHANDLE
  SQLHSTMT* = SQLHANDLE
  SQLHDESC* = SQLHANDLE
  SQLRETURN* = T_SQLSMALLINT
  SQLHWND* = HWND
  BOOKMARK* = ULONG
  SQLLEN* = T_SQLINTEGER
  T_SQLROWOFFSET* = T_SQLINTEGER # renamed from SQLROWOFFSET
  T_SQLROWCOUNT* = T_SQLUINTEGER # renamed from SQLROWCOUNT
  SQLULEN* = T_SQLUINTEGER
  SQLTRANSID* = DWORD
  SQLSETPOSIROW* = T_SQLUSMALLINT

when not defined(winansi):
  type
    T_SQLTCHAR* = T_SQLWCHAR # renamed from SQLTCHAR

else:
  type
    T_SQLTCHAR* = T_SQLCHAR # renamed from SQLTCHAR

type
  T_SQLDATE* = uint8 # renamed from SQLDATE
  T_SQLDECIMAL* = uint8 # renamed from SQLDECIMAL
  T_SQLDOUBLE* = float64 # renamed from SQLDOUBLE
  T_SQLFLOAT* = float64 # renamed from SQLFLOAT
  T_SQLNUMERIC* = uint8 # renamed from SQLNUMERIC
  T_SQLREAL* = float32 # renamed from SQLREAL
  T_SQLTIME* = uint8 # renamed from SQLTIME
  T_SQLTIMESTAMP* = uint8 # renamed from SQLTIMESTAMP
  T_SQLVARCHAR* = uint8 # renamed from SQLVARCHAR
  ODBCINT64* = int64
  T_SQLBIGINT* = int64 # renamed from SQLBIGINT
  T_SQLUBIGINT* = uint64 # renamed from SQLUBIGINT
  DATE_STRUCT* {.final, pure.} = object
    year*: T_SQLSMALLINT
    month*: T_SQLUSMALLINT
    day*: T_SQLUSMALLINT
  TIME_STRUCT* {.final, pure.} = object
    hour*: T_SQLUSMALLINT
    minute*: T_SQLUSMALLINT
    second*: T_SQLUSMALLINT
  TIMESTAMP_STRUCT* {.final, pure.} = object
    year*: T_SQLSMALLINT
    month*: T_SQLUSMALLINT
    day*: T_SQLUSMALLINT
    hour*: T_SQLUSMALLINT
    minute*: T_SQLUSMALLINT
    second*: T_SQLUSMALLINT
    fraction*: T_SQLUINTEGER
  SQL_DATE_STRUCT* = DATE_STRUCT
  SQL_TIME_STRUCT* = TIME_STRUCT
  SQL_TIMESTAMP_STRUCT* = TIMESTAMP_STRUCT
  T_SQLINTERVAL* = int32 # renamed from SQLINTERVAL
  SQL_YEAR_MONTH_STRUCT* {.final, pure.} = object
    year*: T_SQLUINTEGER
    month*: T_SQLUINTEGER
  SQL_DAY_SECOND_STRUCT* {.final, pure.} = object
    day*: T_SQLUINTEGER
    hour*: T_SQLUINTEGER
    minute*: T_SQLUINTEGER
    second*: T_SQLUINTEGER
    fraction*: T_SQLUINTEGER
  SQL_INTERVAL_STRUCT_intval* {.final, union, pure.} = object
    year_month*: SQL_YEAR_MONTH_STRUCT
    day_second*: SQL_DAY_SECOND_STRUCT
  SQL_INTERVAL_STRUCT* {.final, pure.} = object
    interval_type*: T_SQLINTERVAL
    interval_sign*: T_SQLSMALLINT
    intval*: SQL_INTERVAL_STRUCT_intval

const
  SQL_MAX_NUMERIC_LEN* = 16

type
  SQL_NUMERIC_STRUCT* {.final, pure.} = object
    precision*: T_SQLCHAR
    scale*: T_SQLSCHAR
    sign*: T_SQLCHAR
    val*: array[SQL_MAX_NUMERIC_LEN, T_SQLCHAR]
  T_SQLGUID* = GUID # renamed from SQLGUID

# ext/sql.nim

const
  ODBCVER* = 0x0351
  SQL_ACCESSIBLE_PROCEDURES* = 20
  SQL_ACCESSIBLE_TABLES* = 19
  SQL_ALL_TYPES* = 0
  SQL_ALTER_TABLE* = 86
  SQL_API_SQLALLOCCONNECT* = 1
  SQL_API_SQLALLOCENV* = 2
  SQL_API_SQLALLOCSTMT* = 3
  SQL_API_SQLBINDCOL* = 4
  SQL_API_SQLCANCEL* = 5
  SQL_API_SQLCOLUMNS* = 40
  SQL_API_SQLCONNECT* = 7
  SQL_API_SQLDATASOURCES* = 57
  SQL_API_SQLDESCRIBECOL* = 8
  SQL_API_SQLDISCONNECT* = 9
  SQL_API_SQLERROR* = 10
  SQL_API_SQLEXECDIRECT* = 11
  SQL_API_SQLEXECUTE* = 12
  SQL_API_SQLFETCH* = 13
  SQL_API_SQLFREECONNECT* = 14
  SQL_API_SQLFREEENV* = 15
  SQL_API_SQLFREESTMT* = 16
  SQL_API_SQLGETCONNECTOPTION* = 42
  SQL_API_SQLGETCURSORNAME* = 17
  SQL_API_SQLGETDATA* = 43
  SQL_API_SQLGETFUNCTIONS* = 44
  SQL_API_SQLGETINFO* = 45
  SQL_API_SQLGETSTMTOPTION* = 46
  SQL_API_SQLGETTYPEINFO* = 47
  SQL_API_SQLNUMRESULTCOLS* = 18
  SQL_API_SQLPARAMDATA* = 48
  SQL_API_SQLPREPARE* = 19
  SQL_API_SQLPUTDATA* = 49
  SQL_API_SQLROWCOUNT* = 20
  SQL_API_SQLSETCONNECTOPTION* = 50
  SQL_API_SQLSETCURSORNAME* = 21
  SQL_API_SQLSETPARAM* = 22
  SQL_API_SQLSETSTMTOPTION* = 51
  SQL_API_SQLSPECIALCOLUMNS* = 52
  SQL_API_SQLSTATISTICS* = 53
  SQL_API_SQLTABLES* = 54
  SQL_API_SQLTRANSACT* = 23
  SQL_CB_DELETE* = 0
  SQL_CB_CLOSE* = 1
  SQL_CB_PRESERVE* = 2
  SQL_CHAR* = 1
  SQL_CLOSE* = 0
  SQL_COMMIT* = 0
  SQL_CURSOR_COMMIT_BEHAVIOR* = 23
  SQL_DATA_AT_EXEC* = -2
  SQL_DATA_SOURCE_NAME* = 2
  SQL_DATA_SOURCE_READ_ONLY* = 25
  SQL_DBMS_NAME* = 17
  SQL_DBMS_VER* = 18
  SQL_DECIMAL* = 3
  SQL_DEFAULT_TXN_ISOLATION* = 26
  SQL_DOUBLE* = 8
  SQL_DROP* = 1
  # SQL_ERROR* = -1
  SQL_FD_FETCH_NEXT* = 1
  SQL_FD_FETCH_FIRST* = 2
  SQL_FD_FETCH_LAST* = 4
  SQL_FD_FETCH_PRIOR* = 8
  SQL_FD_FETCH_ABSOLUTE* = 16
  SQL_FD_FETCH_RELATIVE* = 32
  SQL_FETCH_ABSOLUTE* = 5
  SQL_FETCH_DIRECTION* = 8
  SQL_FETCH_FIRST* = 2
  SQL_FETCH_LAST* = 3
  SQL_FETCH_NEXT* = 1
  SQL_FETCH_PRIOR* = 4
  SQL_FETCH_RELATIVE* = 6
  SQL_FLOAT* = 6
  SQL_GD_ANY_COLUMN* = 1
  SQL_GD_ANY_ORDER* = 2
  SQL_GETDATA_EXTENSIONS* = 81
  SQL_IC_LOWER* = 2
  SQL_IC_MIXED* = 4
  SQL_IC_SENSITIVE* = 3
  SQL_IC_UPPER* = 1
  SQL_IDENTIFIER_CASE* = 28
  SQL_IDENTIFIER_QUOTE_CHAR* = 29
  SQL_INDEX_ALL* = 1
  SQL_INDEX_CLUSTERED* = 1
  SQL_INDEX_HASHED* = 2
  SQL_INDEX_OTHER* = 3
  SQL_INDEX_UNIQUE* = 0
  SQL_INTEGER* = 4
  SQL_INTEGRITY* = 73
  SQL_INVALID_HANDLE* = -2
  SQL_MAX_CATALOG_NAME_LEN* = 34
  SQL_MAX_COLUMN_NAME_LEN* = 30
  SQL_MAX_COLUMNS_IN_GROUP_BY* = 97
  SQL_MAX_COLUMNS_IN_INDEX* = 98
  SQL_MAX_COLUMNS_IN_ORDER_BY* = 99
  SQL_MAX_COLUMNS_IN_SELECT* = 100
  SQL_MAX_COLUMNS_IN_TABLE* = 101
  SQL_MAX_CURSOR_NAME_LEN* = 31
  SQL_MAX_INDEX_SIZE* = 102
  SQL_MAX_MESSAGE_LENGTH* = 512
  SQL_MAX_ROW_SIZE* = 104
  SQL_MAX_SCHEMA_NAME_LEN* = 32
  SQL_MAX_STATEMENT_LEN* = 105
  SQL_MAX_TABLE_NAME_LEN* = 35
  SQL_MAX_TABLES_IN_SELECT* = 106
  SQL_MAX_USER_NAME_LEN* = 107
  SQL_MAXIMUM_CATALOG_NAME_LENGTH* = SQL_MAX_CATALOG_NAME_LEN
  SQL_MAXIMUM_COLUMN_NAME_LENGTH* = SQL_MAX_COLUMN_NAME_LEN
  SQL_MAXIMUM_COLUMNS_IN_GROUP_BY* = SQL_MAX_COLUMNS_IN_GROUP_BY
  SQL_MAXIMUM_COLUMNS_IN_INDEX* = SQL_MAX_COLUMNS_IN_INDEX
  SQL_MAXIMUM_COLUMNS_IN_ORDER_BY* = SQL_MAX_COLUMNS_IN_ORDER_BY
  SQL_MAXIMUM_COLUMNS_IN_SELECT* = SQL_MAX_COLUMNS_IN_SELECT
  SQL_MAXIMUM_CURSOR_NAME_LENGTH* = SQL_MAX_CURSOR_NAME_LEN
  SQL_MAXIMUM_INDEX_SIZE* = SQL_MAX_INDEX_SIZE
  SQL_MAXIMUM_ROW_SIZE* = SQL_MAX_ROW_SIZE
  SQL_MAXIMUM_SCHEMA_NAME_LENGTH* = SQL_MAX_SCHEMA_NAME_LEN
  SQL_MAXIMUM_STATEMENT_LENGTH* = SQL_MAX_STATEMENT_LEN
  SQL_MAXIMUM_TABLES_IN_SELECT* = SQL_MAX_TABLES_IN_SELECT
  SQL_MAXIMUM_USER_NAME_LENGTH* = SQL_MAX_USER_NAME_LEN
  SQL_NC_HIGH* = 0
  SQL_NC_LOW* = 1
  SQL_NEED_DATA* = 99
  SQL_NO_NULLS* = 0
  SQL_NTS* = -3
  SQL_NTSL* = -3
  SQL_NULL_COLLATION* = 85
  SQL_NULL_DATA* = -1
  SQL_NULL_HDBC* = 0
  SQL_NULL_HENV* = 0
  SQL_NULL_HSTMT* = 0
  SQL_NULLABLE* = 1
  SQL_NULLABLE_UNKNOWN* = 2
  SQL_NUMERIC* = 2
  SQL_ORDER_BY_COLUMNS_IN_SELECT* = 90
  SQL_PC_PSEUDO* = 2
  SQL_PC_UNKNOWN* = 0
  SQL_REAL* = 7
  SQL_RESET_PARAMS* = 3
  SQL_ROLLBACK* = 1
  SQL_SCCO_LOCK* = 2
  SQL_SCCO_OPT_ROWVER* = 4
  SQL_SCCO_OPT_VALUES* = 8
  SQL_SCCO_READ_ONLY* = 1
  SQL_SCOPE_CURROW* = 0
  SQL_SCOPE_SESSION* = 2
  SQL_SCOPE_TRANSACTION* = 1
  SQL_SCROLL_CONCURRENCY* = 43
  SQL_SEARCH_PATTERN_ESCAPE* = 14
  SQL_SERVER_NAME* = 13
  SQL_SMALLINT* = 5
  SQL_SPECIAL_CHARACTERS* = 94
  SQL_STILL_EXECUTING* = 2
  SQL_SUCCESS* = 0
  SQL_SUCCESS_WITH_INFO* = 1
  SQL_TC_ALL* = 2
  SQL_TC_DDL_COMMIT* = 3
  SQL_TC_DDL_IGNORE* = 4
  SQL_TC_DML* = 1
  SQL_TC_NONE* = 0
  SQL_TXN_CAPABLE* = 46
  SQL_TXN_ISOLATION_OPTION* = 72
  SQL_TXN_READ_COMMITTED* = 2
  SQL_TXN_READ_UNCOMMITTED* = 1
  SQL_TXN_REPEATABLE_READ* = 4
  SQL_TXN_SERIALIZABLE* = 8
  SQL_TRANSACTION_CAPABLE* = SQL_TXN_CAPABLE
  SQL_TRANSACTION_ISOLATION_OPTION* = SQL_TXN_ISOLATION_OPTION
  SQL_TRANSACTION_READ_COMMITTED* = SQL_TXN_READ_COMMITTED
  SQL_TRANSACTION_READ_UNCOMMITTED* = SQL_TXN_READ_UNCOMMITTED
  SQL_TRANSACTION_REPEATABLE_READ* = SQL_TXN_REPEATABLE_READ
  SQL_TRANSACTION_SERIALIZABLE* = SQL_TXN_SERIALIZABLE
  SQL_UNBIND* = 2
  SQL_UNKNOWN_TYPE* = 0
  SQL_USER_NAME* = 47
  SQL_VARCHAR* = 12
  SQL_AT_ADD_COLUMN* = 1
  SQL_AT_DROP_COLUMN* = 2
  SQL_OJ_LEFT* = 1
  SQL_OJ_RIGHT* = 2
  SQL_OJ_FULL* = 4
  SQL_OJ_NESTED* = 8
  SQL_OJ_NOT_ORDERED* = 16
  SQL_OJ_INNER* = 32
  SQL_OJ_ALL_COMPARISON_OPS* = 64
  SQL_AM_CONNECTION* = 1
  SQL_AM_NONE* = 0
  SQL_AM_STATEMENT* = 2
  SQL_API_SQLALLOCHANDLE* = 1001
  SQL_API_SQLBINDPARAM* = 1002
  SQL_API_SQLCLOSECURSOR* = 1003
  SQL_API_SQLCOLATTRIBUTE* = 6
  SQL_API_SQLCOPYDESC* = 1004
  SQL_API_SQLENDTRAN* = 1005
  SQL_API_SQLFETCHSCROLL* = 1021
  SQL_API_SQLFREEHANDLE* = 1006
  SQL_API_SQLGETCONNECTATTR* = 1007
  SQL_API_SQLGETDESCFIELD* = 1008
  SQL_API_SQLGETDESCREC* = 1009
  SQL_API_SQLGETDIAGFIELD* = 1010
  SQL_API_SQLGETDIAGREC* = 1011
  SQL_API_SQLGETENVATTR* = 1012
  SQL_API_SQLGETSTMTATTR* = 1014
  SQL_API_SQLSETCONNECTATTR* = 1016
  SQL_API_SQLSETDESCFIELD* = 1017
  SQL_API_SQLSETDESCREC* = 1018
  SQL_API_SQLSETENVATTR* = 1019
  SQL_API_SQLSETSTMTATTR* = 1020
  SQL_ARD_TYPE* = -99
  SQL_AT_ADD_CONSTRAINT* = 8
  SQL_ATTR_APP_PARAM_DESC* = 10011
  SQL_ATTR_APP_ROW_DESC* = 10010
  SQL_ATTR_AUTO_IPD* = 10001
  SQL_ATTR_CURSOR_SCROLLABLE* = -1
  SQL_ATTR_CURSOR_SENSITIVITY* = -2
  SQL_ATTR_IMP_PARAM_DESC* = 10013
  SQL_ATTR_IMP_ROW_DESC* = 10012
  SQL_ATTR_METADATA_ID* = 10014
  SQL_ATTR_OUTPUT_NTS* = 10001
  SQL_CATALOG_NAME* = 10003
  SQL_CODE_DATE* = 1
  SQL_CODE_TIME* = 2
  SQL_CODE_TIMESTAMP* = 3
  SQL_COLLATION_SEQ* = 10004
  SQL_CURSOR_SENSITIVITY* = 10001
  SQL_DATE_LEN* = 10
  SQL_DATETIME* = 9
  SQL_DEFAULT* = 99
  SQL_DESC_ALLOC_AUTO* = 1
  SQL_DESC_ALLOC_USER* = 2
  SQL_DESC_ALLOC_TYPE* = 1099
  SQL_DESC_COUNT* = 1001
  SQL_DESC_TYPE* = 1002
  SQL_DESC_LENGTH* = 1003
  SQL_DESC_OCTET_LENGTH_PTR* = 1004
  SQL_DESC_PRECISION* = 1005
  SQL_DESC_SCALE* = 1006
  SQL_DESC_DATETIME_INTERVAL_CODE* = 1007
  SQL_DESC_NULLABLE* = 1008
  SQL_DESC_INDICATOR_PTR* = 1009
  SQL_DESC_DATA_PTR* = 1010
  SQL_DESC_NAME* = 1011
  SQL_DESC_UNNAMED* = 1012
  SQL_DESC_OCTET_LENGTH* = 1013
  SQL_DESCRIBE_PARAMETER* = 10002
  SQL_DIAG_ALTER_DOMAIN* = 3
  SQL_DIAG_ALTER_TABLE* = 4
  SQL_DIAG_CALL* = 7
  SQL_DIAG_CLASS_ORIGIN* = 8
  SQL_DIAG_CONNECTION_NAME* = 10
  SQL_DIAG_CREATE_ASSERTION* = 6
  SQL_DIAG_CREATE_CHARACTER_SET* = 8
  SQL_DIAG_CREATE_COLLATION* = 10
  SQL_DIAG_CREATE_DOMAIN* = 23
  SQL_DIAG_CREATE_INDEX* = -1
  SQL_DIAG_CREATE_SCHEMA* = 64
  SQL_DIAG_CREATE_TABLE* = 77
  SQL_DIAG_CREATE_TRANSLATION* = 79
  SQL_DIAG_CREATE_VIEW* = 84
  SQL_DIAG_DELETE_WHERE* = 19
  SQL_DIAG_DROP_ASSERTION* = 24
  SQL_DIAG_DROP_CHARACTER_SET* = 25
  SQL_DIAG_DROP_COLLATION* = 26
  SQL_DIAG_DROP_DOMAIN* = 27
  SQL_DIAG_DROP_INDEX* = ( -2 )
  SQL_DIAG_DROP_SCHEMA* = 31
  SQL_DIAG_DROP_TABLE* = 32
  SQL_DIAG_DROP_TRANSLATION* = 33
  SQL_DIAG_DROP_VIEW* = 36
  SQL_DIAG_DYNAMIC_DELETE_CURSOR* = 38
  SQL_DIAG_DYNAMIC_FUNCTION* = 7
  SQL_DIAG_DYNAMIC_FUNCTION_CODE* = 12
  SQL_DIAG_DYNAMIC_UPDATE_CURSOR* = 81
  SQL_DIAG_GRANT* = 48
  SQL_DIAG_INSERT* = 50
  SQL_DIAG_MESSAGE_TEXT* = 6
  SQL_DIAG_NATIVE* = 5
  SQL_DIAG_NUMBER* = 2
  SQL_DIAG_RETURNCODE* = 1
  SQL_DIAG_REVOKE* = 59
  SQL_DIAG_ROW_COUNT* = 3
  SQL_DIAG_SELECT_CURSOR* = 85
  SQL_DIAG_SERVER_NAME* = 11
  SQL_DIAG_SQLSTATE* = 4
  SQL_DIAG_SUBCLASS_ORIGIN* = 9
  SQL_DIAG_UNKNOWN_STATEMENT* = 0
  SQL_DIAG_UPDATE_WHERE* = 82
  SQL_FALSE* = 0
  SQL_HANDLE_DBC* = 2
  SQL_HANDLE_DESC* = 4
  SQL_HANDLE_ENV* = 1
  SQL_HANDLE_STMT* = 3
  SQL_INSENSITIVE* = 1
  SQL_MAX_CONCURRENT_ACTIVITIES* = 1
  SQL_MAX_DRIVER_CONNECTIONS* = 0
  SQL_MAX_IDENTIFIER_LEN* = 10005
  SQL_MAXIMUM_CONCURRENT_ACTIVITIES* = SQL_MAX_CONCURRENT_ACTIVITIES
  SQL_MAXIMUM_DRIVER_CONNECTIONS* = SQL_MAX_DRIVER_CONNECTIONS
  SQL_MAXIMUM_IDENTIFIER_LENGTH* = SQL_MAX_IDENTIFIER_LEN
  SQL_NAMED* = 0
  SQL_NO_DATA* = 100
  SQL_NONSCROLLABLE* = 0
  SQL_NULL_HANDLE* = 0
  SQL_NULL_HDESC* = 0
  SQL_OJ_CAPABILITIES* = 115
  SQL_OUTER_JOIN_CAPABILITIES* = SQL_OJ_CAPABILITIES
  SQL_PC_NON_PSEUDO* = 1
  SQL_PRED_NONE* = 0
  SQL_PRED_CHAR* = 1
  SQL_PRED_BASIC* = 2
  SQL_ROW_IDENTIFIER* = 1
  SQL_SCROLLABLE* = 1
  SQL_SENSITIVE* = 2
  SQL_TIME_LEN* = 8
  SQL_TIMESTAMP_LEN* = 19
  SQL_TRUE* = 1
  SQL_TYPE_DATE* = 91
  SQL_TYPE_TIME* = 92
  SQL_TYPE_TIMESTAMP* = 93
  SQL_UNNAMED* = 1
  SQL_UNSPECIFIED* = 0
  SQL_XOPEN_CLI_YEAR* = 10000

proc SQLAllocConnect*(P1: SQLHENV, P2: ptr SQLHDBC): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLAllocEnv*(P1: ptr SQLHENV): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLAllocStmt*(P1: SQLHDBC, P2: ptr SQLHSTMT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLError*(P1: SQLHENV, P2: SQLHDBC, P3: SQLHSTMT, P4: ptr T_SQLCHAR, P5: ptr T_SQLINTEGER, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLFreeConnect*(P1: SQLHDBC): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLFreeEnv*(P1: SQLHENV): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetParam*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLSMALLINT, P5: SQLULEN, P6: T_SQLSMALLINT, P7: T_SQLPOINTER, P8: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetConnectOption*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetStmtOption*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetConnectOption*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: SQLULEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetStmtOption*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLROWCOUNT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLBindCol*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: SQLLEN, P6: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLCancel*(P1: SQLHSTMT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLConnect*(P1: SQLHDBC, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDescribeCol*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr SQLULEN, P8: ptr T_SQLSMALLINT, P9: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDisconnect*(P1: SQLHDBC): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLExecDirect*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLExecute*(P1: SQLHSTMT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLFetch*(P1: SQLHSTMT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLFreeStmt*(P1: SQLHSTMT, P2: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetCursorName*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLNumResultCols*(P1: SQLHSTMT, P2: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLPrepare*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLRowCount*(P1: SQLHSTMT, P2: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetCursorName*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLTransact*(P1: SQLHENV, P2: SQLHDBC, P3: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColumns*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetData*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: SQLLEN, P6: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetFunctions*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: ptr T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetInfo*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: T_SQLPOINTER, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetTypeInfo*(P1: SQLHSTMT, P2: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLParamData*(P1: SQLHSTMT, P2: ptr T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLPutData*(P1: SQLHSTMT, P2: T_SQLPOINTER, P3: SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSpecialColumns*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLCHAR, P6: T_SQLSMALLINT, P7: ptr T_SQLCHAR, P8: T_SQLSMALLINT, P9: T_SQLUSMALLINT, P10: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLStatistics*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: T_SQLUSMALLINT, P9: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLTables*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDataSources*(P1: SQLHENV, P2: T_SQLUSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLAllocHandle*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: ptr SQLHANDLE): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLBindParam*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLSMALLINT, P5: SQLULEN, P6: T_SQLSMALLINT, P7: T_SQLPOINTER, P8: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLCloseCursor*(P1: SQLHSTMT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColAttribute*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLUSMALLINT, P4: T_SQLPOINTER, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLCopyDesc*(P1: SQLHDESC, P2: SQLHDESC): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLEndTran*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLFetchScroll*(P1: SQLHSTMT, P2: T_SQLSMALLINT, P3: T_SQLROWOFFSET): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLFreeHandle*(P1: T_SQLSMALLINT, P2: SQLHANDLE): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetConnectAttr*(P1: SQLHDBC, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER, P5: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDescField*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: T_SQLINTEGER, P6: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDescRec*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr T_SQLSMALLINT, P8: ptr SQLLEN, P9: ptr T_SQLSMALLINT, P10: ptr T_SQLSMALLINT, P11: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDiagField*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: T_SQLSMALLINT, P4: T_SQLSMALLINT, P5: T_SQLPOINTER, P6: T_SQLSMALLINT, P7: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDiagRec*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: ptr T_SQLINTEGER, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetEnvAttr*(P1: SQLHENV, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER, P5: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetStmtAttr*(P1: SQLHSTMT, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER, P5: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetConnectAttr*(P1: SQLHDBC, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetDescField*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetDescRec*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLSMALLINT, P5: SQLLEN, P6: T_SQLSMALLINT, P7: T_SQLSMALLINT, P8: T_SQLPOINTER, P9: ptr SQLLEN, P10: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetEnvAttr*(P1: SQLHENV, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetStmtAttr*(P1: SQLHSTMT, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}

# ext/sqlext.nim

const
  # SQL_UNICODE_LONGVARCHAR* = -97
  SQL_SPEC_MAJOR* = 3
  SQL_SPEC_MINOR* = 51
  SQL_SPEC_STRING* = "03.51"
  SQL_ACCESS_MODE* = 101
  SQL_ACTIVE_CONNECTIONS* = 0
  SQL_ACTIVE_STATEMENTS* = 1
  SQL_DATE* = 9
  SQL_TIME* = 10
  SQL_SIGNED_OFFSET* = -20
  SQL_TINYINT* = -6
  SQL_TIMESTAMP* = 11
  SQL_UNSIGNED_OFFSET* = -22
  SQL_ADD* = 4
  SQL_ALL_EXCEPT_LIKE* = 2
  SQL_API_ALL_FUNCTIONS* = 0
  SQL_API_SQLCOLATTRIBUTES* = 6
  SQL_API_SQLDRIVERCONNECT* = 41
  SQL_API_SQLBROWSECONNECT* = 55
  SQL_API_SQLCOLUMNPRIVILEGES* = 56
  SQL_API_SQLDESCRIBEPARAM* = 58
  SQL_API_SQLEXTENDEDFETCH* = 59
  SQL_API_SQLFOREIGNKEYS* = 60
  SQL_API_SQLMORERESULTS* = 61
  SQL_API_SQLNATIVESQL* = 62
  SQL_API_SQLNUMPARAMS* = 63
  SQL_API_SQLPARAMOPTIONS* = 64
  SQL_API_SQLPRIMARYKEYS* = 65
  SQL_API_SQLPROCEDURECOLUMNS* = 66
  SQL_API_SQLPROCEDURES* = 67
  SQL_API_SQLSETPOS* = 68
  SQL_API_SQLSETSCROLLOPTIONS* = 69
  SQL_API_SQLTABLEPRIVILEGES* = 70
  SQL_API_SQLDRIVERS* = 71
  SQL_API_SQLBINDPARAMETER* = 72
  SQL_API_LOADBYORDINAL* = 199
  SQL_ASYNC_ENABLE* = 4
  SQL_ASYNC_ENABLE_OFF* = 0
  SQL_ASYNC_ENABLE_ON* = 1
  SQL_ASYNC_ENABLE_DEFAULT* = SQL_ASYNC_ENABLE_OFF
  SQL_ATTR_CONNECTION_DEAD* = 1209
  SQL_ATTR_READONLY* = 0
  SQL_ATTR_READWRITE_UNKNOWN* = 2
  SQL_ATTR_WRITE* = 1
  SQL_AUTOCOMMIT* = 102
  SQL_AUTOCOMMIT_OFF* = 0
  SQL_AUTOCOMMIT_ON* = 1
  SQL_AUTOCOMMIT_DEFAULT* = SQL_AUTOCOMMIT_ON
  SQL_BEST_ROWID* = 1
  SQL_BIGINT* = -5
  SQL_BINARY* = -2
  SQL_BIND_BY_COLUMN* = 0
  SQL_BIND_TYPE* = 5
  SQL_BIND_TYPE_DEFAULT* = SQL_BIND_BY_COLUMN
  SQL_BIT* = -7
  SQL_BOOKMARK_PERSISTENCE* = 82
  SQL_BP_CLOSE* = 1
  SQL_BP_DELETE* = 2
  SQL_BP_DROP* = 4
  SQL_BP_TRANSACTION* = 8
  SQL_BP_UPDATE* = 16
  SQL_BP_OTHER_HSTMT* = 32
  SQL_BP_SCROLL* = 64
  SQL_C_BINARY* = SQL_BINARY
  SQL_C_BIT* = SQL_BIT
  SQL_C_CHAR* = SQL_CHAR
  SQL_C_DATE* = SQL_DATE
  SQL_C_DOUBLE* = SQL_DOUBLE
  SQL_C_FLOAT* = SQL_REAL
  SQL_C_LONG* = SQL_INTEGER
  SQL_C_SHORT* = SQL_SMALLINT
  SQL_C_SLONG* = SQL_C_LONG+SQL_SIGNED_OFFSET
  SQL_C_SSHORT* = SQL_C_SHORT+SQL_SIGNED_OFFSET
  SQL_C_STINYINT* = SQL_TINYINT+SQL_SIGNED_OFFSET
  SQL_C_TIME* = SQL_TIME
  SQL_C_TIMESTAMP* = SQL_TIMESTAMP
  SQL_C_TINYINT* = SQL_TINYINT
  SQL_C_ULONG* = SQL_C_LONG+SQL_UNSIGNED_OFFSET
  SQL_C_USHORT* = SQL_C_SHORT+SQL_UNSIGNED_OFFSET
  SQL_C_UTINYINT* = SQL_TINYINT+SQL_UNSIGNED_OFFSET
  SQL_C_BOOKMARK* = SQL_C_ULONG
  SQL_C_DEFAULT* = 99
  SQL_CASCADE* = 0
  SQL_CB_NON_NULL* = 1
  SQL_CB_NULL* = 0
  SQL_CC_CLOSE* = SQL_CB_CLOSE
  SQL_CC_DELETE* = SQL_CB_DELETE
  SQL_CC_PRESERVE* = SQL_CB_PRESERVE
  SQL_CD_FALSE* = 0
  SQL_CD_TRUE* = 1
  SQL_CN_ANY* = 2
  SQL_CN_DIFFERENT* = 1
  SQL_CN_NONE* = 0
  SQL_COLUMN_ALIAS* = 87
  SQL_COLUMN_COUNT* = 0
  SQL_COLUMN_NAME* = 1
  SQL_COLUMN_DISPLAY_SIZE* = 6
  SQL_COLUMN_LABEL* = 18
  SQL_COLUMN_LENGTH* = 3
  SQL_COLUMN_MONEY* = 9
  SQL_COLUMN_NULLABLE* = 7
  SQL_COLUMN_OWNER_NAME* = 16
  SQL_COLUMN_PRECISION* = 4
  SQL_COLUMN_QUALIFIER_NAME* = 17
  SQL_COLUMN_SCALE* = 5
  SQL_COLUMN_UNSIGNED* = 8
  SQL_COLUMN_UPDATABLE* = 10
  SQL_COLUMN_AUTO_INCREMENT* = 11
  SQL_COLUMN_CASE_SENSITIVE* = 12
  SQL_COLUMN_SEARCHABLE* = 13
  SQL_COLUMN_TYPE* = 2
  SQL_COLUMN_TYPE_NAME* = 14
  SQL_COLUMN_TABLE_NAME* = 15
  SQL_CONCAT_NULL_BEHAVIOR* = 22
  SQL_CONCUR_READ_ONLY* = 1
  SQL_CONCUR_DEFAULT* = SQL_CONCUR_READ_ONLY
  SQL_CONCUR_LOCK* = 2
  SQL_CONCUR_ROWVER* = 3
  SQL_CONCUR_TIMESTAMP* = SQL_CONCUR_ROWVER
  SQL_CONCUR_VALUES* = 4
  SQL_CONCURRENCY* = 7
  SQL_CONVERT_BIGINT* = 53
  SQL_CONVERT_BINARY* = 54
  SQL_CONVERT_BIT* = 55
  SQL_CONVERT_CHAR* = 56
  SQL_CONVERT_DATE* = 57
  SQL_CONVERT_DECIMAL* = 58
  SQL_CONVERT_DOUBLE* = 59
  SQL_CONVERT_FLOAT* = 60
  SQL_CONVERT_FUNCTIONS* = 48
  SQL_CONVERT_INTEGER* = 61
  SQL_CONVERT_LONGVARBINARY* = 71
  SQL_CONVERT_LONGVARCHAR* = 62
  SQL_CONVERT_NUMERIC* = 63
  SQL_CONVERT_REAL* = 64
  SQL_CONVERT_SMALLINT* = 65
  SQL_CONVERT_TIME* = 66
  SQL_CONVERT_TIMESTAMP* = 67
  SQL_CONVERT_TINYINT* = 68
  SQL_CONVERT_VARBINARY* = 69
  SQL_CONVERT_VARCHAR* = 70
  SQL_CORRELATION_NAME* = 74
  SQL_CR_CLOSE* = SQL_CB_CLOSE
  SQL_CR_DELETE* = SQL_CB_DELETE
  SQL_CR_PRESERVE* = SQL_CB_PRESERVE
  SQL_CUR_USE_IF_NEEDED* = 0
  SQL_CUR_USE_ODBC* = 1
  SQL_CUR_USE_DRIVER* = 2
  SQL_CUR_DEFAULT* = SQL_CUR_USE_DRIVER.ULONG
  SQL_CURRENT_QUALIFIER* = 109
  SQL_CURSOR_DYNAMIC* = 2
  SQL_CURSOR_FORWARD_ONLY* = 0
  SQL_CURSOR_KEYSET_DRIVEN* = 1
  SQL_CURSOR_ROLLBACK_BEHAVIOR* = 24
  SQL_CURSOR_STATIC* = 3
  SQL_CURSOR_TYPE* = 6
  SQL_CURSOR_TYPE_DEFAULT* = SQL_CURSOR_FORWARD_ONLY
  SQL_CV_CASCADED* = 0x00000004
  SQL_CV_CHECK_OPTION* = 0x00000002
  SQL_CV_CREATE_VIEW* = 0x00000001
  SQL_CV_LOCAL* = 0x00000008
  SQL_CVT_BIGINT* = 0x00004000
  SQL_CVT_BINARY* = 0x00000400
  SQL_CVT_BIT* = 0x00001000
  SQL_CVT_CHAR* = 0x00000001
  SQL_CVT_DATE* = 0x00008000
  SQL_CVT_DECIMAL* = 0x00000004
  SQL_CVT_DOUBLE* = 0x00000080
  SQL_CVT_FLOAT* = 0x00000020
  SQL_CVT_INTEGER* = 0x00000008
  SQL_CVT_LONGVARBINARY* = 0x00040000
  SQL_CVT_LONGVARCHAR* = 0x00000200
  SQL_CVT_NUMERIC* = 0x00000002
  SQL_CVT_REAL* = 0x00000040
  SQL_CVT_SMALLINT* = 0x00000010
  SQL_CVT_TIME* = 0x00010000
  SQL_CVT_TIMESTAMP* = 0x00020000
  SQL_CVT_TINYINT* = 0x00002000
  SQL_CVT_VARBINARY* = 0x00000800
  SQL_CVT_VARCHAR* = 0x00000100
  SQL_DATABASE_NAME* = 16
  SQL_DEFAULT_PARAM* = -5
  SQL_DELETE* = 3
  SQL_DRIVER_COMPLETE* = 1
  SQL_DRIVER_COMPLETE_REQUIRED* = 3
  SQL_DRIVER_HDBC* = 3
  SQL_DRIVER_HENV* = 4
  SQL_DRIVER_HLIB* = 76
  SQL_DRIVER_HSTMT* = 5
  SQL_DRIVER_NAME* = 6
  SQL_DRIVER_NOPROMPT* = 0
  SQL_DRIVER_ODBC_VER* = 77
  SQL_DRIVER_PROMPT* = 2
  SQL_DRIVER_VER* = 7
  SQL_DTC_ENLIST_EXPENSIVE* = 1
  SQL_DTC_UNENLIST_EXPENSIVE* = 2
  SQL_DTC_TRANSITION_COST* = 1750
  SQL_ENSURE* = 1
  SQL_ENTIRE_ROWSET* = 0
  SQL_EXPRESSIONS_IN_ORDERBY* = 27
  SQL_FD_FETCH_BOOKMARK* = 128
  SQL_FD_FETCH_PREV* = SQL_FD_FETCH_PRIOR
  SQL_FD_FETCH_RESUME* = 64
  SQL_FETCH_BOOKMARK* = 8
  SQL_FETCH_PREV* = SQL_FETCH_PRIOR
  SQL_FETCH_RESUME* = 7
  SQL_FILE_NOT_SUPPORTED* = 0x0000
  SQL_FILE_TABLE* = 0x0001
  SQL_FILE_QUALIFIER* = 0x0002
  SQL_FILE_CATALOG* = SQL_FILE_QUALIFIER
  SQL_FILE_USAGE* = 84
  SQL_FN_CVT_CONVERT* = 0x00000001
  SQL_FN_NUM_ABS* = 0x00000001
  SQL_FN_NUM_ACOS* = 0x00000002
  SQL_FN_NUM_ASIN* = 0x00000004
  SQL_FN_NUM_ATAN* = 0x00000008
  SQL_FN_NUM_ATAN2* = 0x00000010
  SQL_FN_NUM_CEILING* = 0x00000020
  SQL_FN_NUM_COS* = 0x00000040
  SQL_FN_NUM_COT* = 0x00000080
  SQL_FN_NUM_DEGREES* = 0x00040000
  SQL_FN_NUM_EXP* = 0x00000100
  SQL_FN_NUM_FLOOR* = 0x00000200
  SQL_FN_NUM_LOG* = 0x00000400
  SQL_FN_NUM_LOG10* = 0x00080000
  SQL_FN_NUM_MOD* = 0x00000800
  SQL_FN_NUM_PI* = 0x00010000
  SQL_FN_NUM_POWER* = 0x00100000
  SQL_FN_NUM_RADIANS* = 0x00200000
  SQL_FN_NUM_RAND* = 0x00020000
  SQL_FN_NUM_ROUND* = 0x00400000
  SQL_FN_NUM_SIGN* = 0x00001000
  SQL_FN_NUM_SIN* = 0x00002000
  SQL_FN_NUM_SQRT* = 0x00004000
  SQL_FN_NUM_TAN* = 0x00008000
  SQL_FN_NUM_TRUNCATE* = 0x00800000
  SQL_FN_STR_ASCII* = 0x00002000
  SQL_FN_STR_CHAR* = 0x00004000
  SQL_FN_STR_CONCAT* = 0x00000001
  SQL_FN_STR_DIFFERENCE* = 0x00008000
  SQL_FN_STR_INSERT* = 0x00000002
  SQL_FN_STR_LCASE* = 0x00000040
  SQL_FN_STR_LEFT* = 0x00000004
  SQL_FN_STR_LENGTH* = 0x00000010
  SQL_FN_STR_LOCATE* = 0x00000020
  SQL_FN_STR_LOCATE_2* = 0x00010000
  SQL_FN_STR_LTRIM* = 0x00000008
  SQL_FN_STR_REPEAT* = 0x00000080
  SQL_FN_STR_REPLACE* = 0x00000100
  SQL_FN_STR_RIGHT* = 0x00000200
  SQL_FN_STR_RTRIM* = 0x00000400
  SQL_FN_STR_SOUNDEX* = 0x00020000
  SQL_FN_STR_SPACE* = 0x00040000
  SQL_FN_STR_SUBSTRING* = 0x00000800
  SQL_FN_STR_UCASE* = 0x00001000
  SQL_FN_SYS_DBNAME* = 0x00000002
  SQL_FN_SYS_IFNULL* = 0x00000004
  SQL_FN_SYS_USERNAME* = 0x00000001
  SQL_FN_TD_CURDATE* = 0x00000002
  SQL_FN_TD_CURTIME* = 0x00000200
  SQL_FN_TD_DAYNAME* = 0x00008000
  SQL_FN_TD_DAYOFMONTH* = 0x00000004
  SQL_FN_TD_DAYOFWEEK* = 0x00000008
  SQL_FN_TD_DAYOFYEAR* = 0x00000010
  SQL_FN_TD_HOUR* = 0x00000400
  SQL_FN_TD_MINUTE* = 0x00000800
  SQL_FN_TD_MONTH* = 0x00000020
  SQL_FN_TD_MONTHNAME* = 0x00010000
  SQL_FN_TD_NOW* = 0x00000001
  SQL_FN_TD_QUARTER* = 0x00000040
  SQL_FN_TD_SECOND* = 0x00001000
  SQL_FN_TD_TIMESTAMPADD* = 0x00002000
  SQL_FN_TD_TIMESTAMPDIFF* = 0x00004000
  SQL_FN_TD_WEEK* = 0x00000080
  SQL_FN_TD_YEAR* = 0x00000100
  SQL_FN_TSI_DAY* = 0x00000010
  SQL_FN_TSI_FRAC_SECOND* = 0x00000001
  SQL_FN_TSI_HOUR* = 0x00000008
  SQL_FN_TSI_MINUTE* = 0x00000004
  SQL_FN_TSI_MONTH* = 0x00000040
  SQL_FN_TSI_QUARTER* = 0x00000080
  SQL_FN_TSI_SECOND* = 0x00000002
  SQL_FN_TSI_WEEK* = 0x00000020
  SQL_FN_TSI_YEAR* = 0x00000100
  SQL_GB_GROUP_BY_CONTAINS_SELECT* = 2
  SQL_GB_GROUP_BY_EQUALS_SELECT* = 1
  SQL_GB_NO_RELATION* = 3
  SQL_GB_NOT_SUPPORTED* = 0
  SQL_GD_BLOCK* = 4
  SQL_GD_BOUND* = 8
  SQL_GET_BOOKMARK* = 13
  SQL_GROUP_BY* = 88
  SQL_IGNORE* = -6
  SQL_INFO_FIRST* = 0
  SQL_KEYSET_SIZE* = 8
  SQL_KEYSET_SIZE_DEFAULT* = 0
  SQL_KEYWORDS* = 89
  SQL_LCK_EXCLUSIVE* = 2
  SQL_LCK_NO_CHANGE* = 1
  SQL_LCK_UNLOCK* = 4
  SQL_LEN_BINARY_ATTR_OFFSET* = -100
  SQL_LEN_DATA_AT_EXEC_OFFSET* = -100
  SQL_LIKE_ESCAPE_CLAUSE* = 113
  SQL_LIKE_ONLY* = 1
  SQL_LOCK_EXCLUSIVE* = 1
  SQL_LOCK_NO_CHANGE* = 0
  SQL_LOCK_TYPES* = 78
  SQL_LOCK_UNLOCK* = 2
  SQL_LOGIN_TIMEOUT* = 103
  SQL_LOGIN_TIMEOUT_DEFAULT* = 15
  SQL_LONGVARBINARY* = -4
  SQL_LONGVARCHAR* = -1
  SQL_MAX_BINARY_LITERAL_LEN* = 112
  SQL_MAX_CHAR_LITERAL_LEN* = 108
  SQL_MAX_DSN_LENGTH* = 32
  SQL_MAX_LENGTH* = 3
  SQL_MAX_LENGTH_DEFAULT* = 0
  SQL_MAX_OPTION_STRING_LENGTH* = 256
  SQL_MAX_OWNER_NAME_LEN* = 32
  SQL_MAX_PROCEDURE_NAME_LEN* = 33
  SQL_MAX_QUALIFIER_NAME_LEN* = 34
  SQL_MAX_ROW_SIZE_INCLUDES_LONG* = 103
  SQL_MAX_ROWS* = 1
  SQL_MAX_ROWS_DEFAULT* = 0
  SQL_MODE_READ_WRITE* = 0
  SQL_MODE_READ_ONLY* = 1
  SQL_MODE_DEFAULT* = SQL_MODE_READ_WRITE
  SQL_MULT_RESULT_SETS* = 36
  SQL_MULTIPLE_ACTIVE_TXN* = 37
  SQL_NC_END* = 0x0004
  SQL_NC_START* = 0x0002
  SQL_NEED_LONG_DATA_LEN* = 111
  SQL_NNC_NON_NULL* = 0x0001
  SQL_NNC_NULL* = 0x0000
  SQL_NO_TOTAL* = -4
  SQL_NON_NULLABLE_COLUMNS* = 75
  SQL_NOSCAN_OFF* = 0
  SQL_NOSCAN_ON* = 1
  SQL_NOSCAN* = 2
  SQL_NOSCAN_DEFAULT* = SQL_NOSCAN_OFF
  SQL_NUMERIC_FUNCTIONS* = 49
  SQL_OAC_LEVEL1* = 0x0001
  SQL_OAC_LEVEL2* = 0x0002
  SQL_OAC_NONE* = 0x0000
  SQL_ODBC_API_CONFORMANCE* = 9
  SQL_ODBC_CURSORS* = 110
  SQL_ODBC_SAG_CLI_CONFORMANCE* = 12
  SQL_ODBC_SQL_CONFORMANCE* = 15
  SQL_ODBC_SQL_OPT_IEF* = 73
  SQL_ODBC_VER* = 10
  SQL_OPT_TRACE* = 104
  SQL_OPT_TRACE_FILE_DEFAULT* = "\\SQL.LOG"
  SQL_OPT_TRACE_OFF* = 0
  SQL_OPT_TRACE_DEFAULT* = SQL_OPT_TRACE_OFF
  SQL_OPT_TRACE_ON* = 1
  SQL_OPT_TRACEFILE* = 105
  SQL_OSC_CORE* = 1
  SQL_OSC_EXTENDED* = 2
  SQL_OSC_MINIMUM* = 0
  SQL_OSCC_COMPLIANT* = 1
  SQL_OSCC_NOT_COMPLIANT* = 0
  SQL_OU_DML_STATEMENTS* = 1
  SQL_OU_INDEX_DEFINITION* = 8
  SQL_OU_PRIVILEGE_DEFINITION* = 16
  SQL_OU_PROCEDURE_INVOCATION* = 2
  SQL_OU_TABLE_DEFINITION* = 4
  SQL_OUTER_JOINS* = 38
  SQL_OWNER_TERM* = 39
  SQL_OWNER_USAGE* = 91
  SQL_PACKET_SIZE* = 112
  SQL_PARAM_INPUT* = 1
  SQL_PARAM_INPUT_OUTPUT* = 2
  SQL_PARAM_OUTPUT* = 4
  SQL_PARAM_TYPE_DEFAULT* = SQL_PARAM_INPUT_OUTPUT
  SQL_PARAM_TYPE_UNKNOWN* = 0
  SQL_PC_NOT_PSEUDO* = 1
  SQL_POS_ADD* = 16
  SQL_POS_DELETE* = 8
  SQL_POS_OPERATIONS* = 79
  SQL_POS_POSITION* = 1
  SQL_POS_REFRESH* = 2
  SQL_POS_UPDATE* = 4
  SQL_POSITION* = 0
  SQL_POSITIONED_STATEMENTS* = 80
  SQL_PROCEDURE_TERM* = 40
  # SQL_PROCEDURES* = 21
  SQL_PS_POSITIONED_DELETE* = 1
  SQL_PS_POSITIONED_UPDATE* = 2
  SQL_PS_SELECT_FOR_UPDATE* = 4
  SQL_PT_FUNCTION* = 2
  SQL_PT_PROCEDURE* = 1
  SQL_PT_UNKNOWN* = 0
  SQL_QL_END* = 0x0002
  SQL_QL_START* = 0x0001
  SQL_QU_DML_STATEMENTS* = 1
  SQL_QU_INDEX_DEFINITION* = 8
  SQL_QU_PRIVILEGE_DEFINITION* = 16
  SQL_QU_PROCEDURE_INVOCATION* = 2
  SQL_QU_TABLE_DEFINITION* = 4
  SQL_QUALIFIER_LOCATION* = 114
  SQL_QUALIFIER_NAME_SEPARATOR* = 41
  SQL_QUALIFIER_TERM* = 42
  SQL_QUALIFIER_USAGE* = 92
  SQL_QUERY_TIMEOUT* = 0
  SQL_QUERY_TIMEOUT_DEFAULT* = 0
  SQL_QUICK* = 0
  SQL_QUIET_MODE* = 111
  SQL_QUOTED_IDENTIFIER_CASE* = 93
  SQL_RD_OFF* = 0
  SQL_RD_ON* = 1
  SQL_RD_DEFAULT* = SQL_RD_ON
  SQL_REFRESH* = 1
  SQL_RESTRICT* = 1
  SQL_RESULT_COL* = 3
  SQL_RETRIEVE_DATA* = 11
  SQL_RETURN_VALUE* = 5
  SQL_ROW_ADDED* = 4
  SQL_ROW_DELETED* = 1
  SQL_ROW_ERROR* = 5
  SQL_ROW_NOROW* = 3
  SQL_ROW_NUMBER* = 14
  SQL_ROW_SUCCESS* = 0
  SQL_ROW_UPDATED* = 2
  SQL_ROW_UPDATES* = 11
  SQL_ROWSET_SIZE* = 9
  SQL_ROWSET_SIZE_DEFAULT* = 1
  SQL_ROWVER* = 2
  SQL_SC_NON_UNIQUE* = 0
  SQL_SC_TRY_UNIQUE* = 1
  SQL_SC_UNIQUE* = 2
  SQL_SCCO_OPT_TIMESTAMP* = SQL_SCCO_OPT_ROWVER
  SQL_SCROLL_DYNAMIC* = -2
  SQL_SCROLL_FORWARD_ONLY* = 0
  SQL_SCROLL_KEYSET_DRIVEN* = -1
  SQL_SCROLL_OPTIONS* = 44
  SQL_SCROLL_STATIC* = -3
  SQL_SEARCHABLE* = 3
  SQL_SET_NULL* = 2
  SQL_SETPARAM_VALUE_MAX* = -1
  SQL_SETPOS_MAX_LOCK_VALUE* = SQL_LOCK_UNLOCK
  SQL_SETPOS_MAX_OPTION_VALUE* = SQL_ADD
  SQL_SIMULATE_CURSOR* = 10
  SQL_SO_DYNAMIC* = 4
  SQL_SO_FORWARD_ONLY* = 1
  SQL_SO_KEYSET_DRIVEN* = 2
  SQL_SO_MIXED* = 8
  SQL_SO_STATIC* = 16
  SQL_SQ_COMPARISON* = 1
  SQL_SQ_CORRELATED_SUBQUERIES* = 16
  SQL_SQ_EXISTS* = 2
  SQL_SQ_IN* = 4
  SQL_SQ_QUANTIFIED* = 8
  SQL_SQLSTATE_SIZE* = 5
  SQL_SS_ADDITIONS* = 1
  SQL_SS_DELETIONS* = 2
  SQL_SS_UPDATES* = 4
  SQL_STATIC_SENSITIVITY* = 83
  SQL_STRING_FUNCTIONS* = 50
  SQL_SUBQUERIES* = 95
  SQL_SYSTEM_FUNCTIONS* = 51
  SQL_TABLE_STAT* = 0
  SQL_TABLE_TERM* = 45
  SQL_TIMEDATE_ADD_INTERVALS* = 109
  SQL_TIMEDATE_DIFF_INTERVALS* = 110
  SQL_TIMEDATE_FUNCTIONS* = 52
  SQL_TRANSLATE_DLL* = 106
  SQL_TRANSLATE_OPTION* = 107
  SQL_TXN_ISOLATION* = 108
  SQL_TXN_VERSIONING* = 16
  SQL_TYPE_NULL* = 0
  SQL_U_UNION* = 1
  SQL_U_UNION_ALL* = 2
  SQL_UB_OFF* = 0U
  SQL_UB_DEFAULT* = SQL_UB_OFF
  SQL_UB_ON* = 01U
  SQL_UNION* = 96
  SQL_UNSEARCHABLE* = 0
  SQL_UPDATE* = 2
  SQL_USE_BOOKMARKS* = 12
  SQL_VARBINARY* = -3
  SQL_COLATT_OPT_MAX* = SQL_COLUMN_LABEL
  SQL_COLATT_OPT_MIN* = SQL_COLUMN_COUNT
  SQL_PRED_SEARCHABLE* = SQL_SEARCHABLE
  SQL_NO_DATA_FOUND* = SQL_NO_DATA
  SQL_CODE_YEAR* = 1
  SQL_CODE_MONTH* = 2
  SQL_CODE_DAY* = 3
  SQL_CODE_HOUR* = 4
  SQL_CODE_MINUTE* = 5
  SQL_CODE_SECOND* = 6
  SQL_CODE_YEAR_TO_MONTH* = 7
  SQL_CODE_DAY_TO_HOUR* = 8
  SQL_CODE_DAY_TO_MINUTE* = 9
  SQL_CODE_DAY_TO_SECOND* = 10
  SQL_CODE_HOUR_TO_MINUTE* = 11
  SQL_CODE_HOUR_TO_SECOND* = 12
  SQL_CODE_MINUTE_TO_SECOND* = 13
  SQL_INTERVAL_YEAR* = 100 + SQL_CODE_YEAR
  SQL_INTERVAL_MONTH* = 100 + SQL_CODE_MONTH
  SQL_INTERVAL_DAY* = 100 + SQL_CODE_DAY
  SQL_INTERVAL_HOUR* = 100 + SQL_CODE_HOUR
  SQL_INTERVAL_MINUTE* = 100 + SQL_CODE_MINUTE
  SQL_INTERVAL_SECOND* = 100 + SQL_CODE_SECOND
  SQL_INTERVAL_YEAR_TO_MONTH* = 100 + SQL_CODE_YEAR_TO_MONTH
  SQL_INTERVAL_DAY_TO_HOUR* = 100 + SQL_CODE_DAY_TO_HOUR
  SQL_INTERVAL_DAY_TO_MINUTE* = 100 + SQL_CODE_DAY_TO_MINUTE
  SQL_INTERVAL_DAY_TO_SECOND* = 100 + SQL_CODE_DAY_TO_SECOND
  SQL_INTERVAL_HOUR_TO_MINUTE* = 100 + SQL_CODE_HOUR_TO_MINUTE
  SQL_INTERVAL_HOUR_TO_SECOND* = 100 + SQL_CODE_HOUR_TO_SECOND
  SQL_INTERVAL_MINUTE_TO_SECOND* = 100 + SQL_CODE_MINUTE_TO_SECOND
  # SQL_OJ_CAPABILITIES* = 65003
  SQL_NO_ACTION* = 3
  SQL_SET_DEFAULT* = 4
  SQL_ACTIVE_ENVIRONMENTS* = 116
  SQL_AD_ADD_CONSTRAINT_DEFERRABLE* = 0x00000080
  SQL_AD_ADD_CONSTRAINT_INITIALLY_DEFERRED* = 0x00000020
  SQL_AD_ADD_CONSTRAINT_INITIALLY_IMMEDIATE* = 0x00000040
  SQL_AD_ADD_CONSTRAINT_NON_DEFERRABLE* = 0x00000100
  SQL_AD_ADD_DOMAIN_CONSTRAINT* = 0x00000002
  SQL_AD_ADD_DOMAIN_DEFAULT* = 0x00000008
  SQL_AD_CONSTRAINT_NAME_DEFINITION* = 0x00000001
  SQL_AD_DROP_DOMAIN_CONSTRAINT* = 0x00000004
  SQL_AD_DROP_DOMAIN_DEFAULT* = 0x00000010
  SQL_AF_ALL* = 0x00000040
  SQL_AF_AVG* = 0x00000001
  SQL_AF_COUNT* = 0x00000002
  SQL_AF_DISTINCT* = 0x00000020
  SQL_AF_MAX* = 0x00000004
  SQL_AF_MIN* = 0x00000008
  SQL_AF_SUM* = 0x00000010
  SQL_AGGREGATE_FUNCTIONS* = 169
  SQL_ALL_CATALOGS* = "%"
  SQL_ALL_SCHEMAS* = "%"
  SQL_ALL_TABLE_TYPES* = "%"
  SQL_ALTER_DOMAIN* = 117
  # SQL_AM_CONNECTION* = 1
  # SQL_AM_NONE* = 0
  # SQL_AM_STATEMENT* = 2
  SQL_API_ODBC3_ALL_FUNCTIONS* = 999
  SQL_API_ODBC3_ALL_FUNCTIONS_SIZE* = 250
  SQL_API_SQLALLOCHANDLESTD* = 73
  SQL_API_SQLBULKOPERATIONS* = 24
  SQL_ASYNC_MODE* = 10021
  SQL_AT_ADD_COLUMN_COLLATION* = 0x00000080
  SQL_AT_ADD_COLUMN_DEFAULT* = 0x00000040
  SQL_AT_ADD_COLUMN_SINGLE* = 0x00000020
  SQL_AT_ADD_TABLE_CONSTRAINT* = 0x00001000
  SQL_AT_CONSTRAINT_DEFERRABLE* = 0x00040000
  SQL_AT_CONSTRAINT_INITIALLY_DEFERRED* = 0x00010000
  SQL_AT_CONSTRAINT_INITIALLY_IMMEDIATE* = 0x00020000
  SQL_AT_CONSTRAINT_NAME_DEFINITION* = 0x00008000
  SQL_AT_CONSTRAINT_NON_DEFERRABLE* = 0x00080000
  SQL_AT_DROP_COLUMN_CASCADE* = 0x00000400
  SQL_AT_DROP_COLUMN_DEFAULT* = 0x00000200
  SQL_AT_DROP_COLUMN_RESTRICT* = 0x00000800
  SQL_AT_DROP_TABLE_CONSTRAINT_CASCADE* = 0x00002000
  SQL_AT_DROP_TABLE_CONSTRAINT_RESTRICT* = 0x00004000
  SQL_AT_SET_COLUMN_DEFAULT* = 0x00000100
  SQL_ATTR_ACCESS_MODE* = SQL_ACCESS_MODE
  SQL_ATTR_ASYNC_ENABLE* = 4
  SQL_ATTR_AUTOCOMMIT* = SQL_AUTOCOMMIT
  SQL_ATTR_CONCURRENCY* = SQL_CONCURRENCY
  SQL_ATTR_CONNECTION_POOLING* = 201
  SQL_ATTR_CONNECTION_TIMEOUT* = 113
  SQL_ATTR_CP_MATCH* = 202
  SQL_ATTR_CURRENT_CATALOG* = SQL_CURRENT_QUALIFIER
  SQL_ATTR_CURSOR_TYPE* = SQL_CURSOR_TYPE
  SQL_ATTR_DISCONNECT_BEHAVIOR* = 114
  SQL_ATTR_ENABLE_AUTO_IPD* = 15
  SQL_ATTR_ENLIST_IN_DTC* = 1207
  SQL_ATTR_ENLIST_IN_XA* = 1208
  SQL_ATTR_FETCH_BOOKMARK_PTR* = 16
  SQL_ATTR_KEYSET_SIZE* = SQL_KEYSET_SIZE
  SQL_ATTR_LOGIN_TIMEOUT* = SQL_LOGIN_TIMEOUT
  SQL_ATTR_MAX_LENGTH* = SQL_MAX_LENGTH
  SQL_ATTR_MAX_ROWS* = SQL_MAX_ROWS
  SQL_ATTR_NOSCAN* = SQL_NOSCAN
  SQL_ATTR_ODBC_CURSORS* = SQL_ODBC_CURSORS
  SQL_ATTR_ODBC_VERSION* = 200
  SQL_ATTR_PACKET_SIZE* = SQL_PACKET_SIZE
  SQL_ATTR_PARAM_BIND_OFFSET_PTR* = 17
  SQL_ATTR_PARAM_BIND_TYPE* = 18
  SQL_ATTR_PARAM_OPERATION_PTR* = 19
  SQL_ATTR_PARAM_STATUS_PTR* = 20
  SQL_ATTR_PARAMS_PROCESSED_PTR* = 21
  SQL_ATTR_PARAMSET_SIZE* = 22
  SQL_ATTR_QUERY_TIMEOUT* = SQL_QUERY_TIMEOUT
  SQL_ATTR_QUIET_MODE* = SQL_QUIET_MODE
  SQL_ATTR_RETRIEVE_DATA* = SQL_RETRIEVE_DATA
  SQL_ATTR_ROW_ARRAY_SIZE* = 27
  SQL_ATTR_ROW_BIND_OFFSET_PTR* = 23
  SQL_ATTR_ROW_BIND_TYPE* = SQL_BIND_TYPE
  SQL_ATTR_ROW_NUMBER* = SQL_ROW_NUMBER
  SQL_ATTR_ROW_OPERATION_PTR* = 24
  SQL_ATTR_ROW_STATUS_PTR* = 25
  SQL_ATTR_ROWS_FETCHED_PTR* = 26
  SQL_ATTR_SIMULATE_CURSOR* = SQL_SIMULATE_CURSOR
  SQL_ATTR_TRACE* = SQL_OPT_TRACE
  SQL_ATTR_TRACEFILE* = SQL_OPT_TRACEFILE
  SQL_ATTR_TRANSLATE_LIB* = SQL_TRANSLATE_DLL
  SQL_ATTR_TRANSLATE_OPTION* = SQL_TRANSLATE_OPTION
  SQL_ATTR_TXN_ISOLATION* = SQL_TXN_ISOLATION
  SQL_ATTR_USE_BOOKMARKS* = SQL_USE_BOOKMARKS
  SQL_BATCH_ROW_COUNT* = 120
  SQL_BATCH_SUPPORT* = 121
  SQL_BRC_EXPLICIT* = 0x0000002
  SQL_BRC_PROCEDURES* = 0x0000001
  SQL_BRC_ROLLED_UP* = 0x0000004
  SQL_BS_ROW_COUNT_EXPLICIT* = 0x00000002
  SQL_BS_ROW_COUNT_PROC* = 0x00000008
  SQL_BS_SELECT_EXPLICIT* = 0x00000001
  SQL_BS_SELECT_PROC* = 0x00000004
  SQL_C_INTERVAL_DAY* = SQL_INTERVAL_DAY
  SQL_C_INTERVAL_DAY_TO_HOUR* = SQL_INTERVAL_DAY_TO_HOUR
  SQL_C_INTERVAL_DAY_TO_MINUTE* = SQL_INTERVAL_DAY_TO_MINUTE
  SQL_C_INTERVAL_DAY_TO_SECOND* = SQL_INTERVAL_DAY_TO_SECOND
  SQL_C_INTERVAL_HOUR* = SQL_INTERVAL_HOUR
  SQL_C_INTERVAL_HOUR_TO_MINUTE* = SQL_INTERVAL_HOUR_TO_MINUTE
  SQL_C_INTERVAL_HOUR_TO_SECOND* = SQL_INTERVAL_HOUR_TO_SECOND
  SQL_C_INTERVAL_MINUTE* = SQL_INTERVAL_MINUTE
  SQL_C_INTERVAL_MINUTE_TO_SECOND* = SQL_INTERVAL_MINUTE_TO_SECOND
  SQL_C_INTERVAL_MONTH* = SQL_INTERVAL_MONTH
  SQL_C_INTERVAL_SECOND* = SQL_INTERVAL_SECOND
  SQL_C_INTERVAL_YEAR* = SQL_INTERVAL_YEAR
  SQL_C_INTERVAL_YEAR_TO_MONTH* = SQL_INTERVAL_YEAR_TO_MONTH
  SQL_C_NUMERIC* = SQL_NUMERIC
  SQL_C_SBIGINT* = SQL_BIGINT+SQL_SIGNED_OFFSET
  SQL_C_TYPE_DATE* = SQL_TYPE_DATE
  SQL_C_TYPE_TIME* = SQL_TYPE_TIME
  SQL_C_TYPE_TIMESTAMP* = SQL_TYPE_TIMESTAMP
  SQL_C_UBIGINT* = SQL_BIGINT+SQL_UNSIGNED_OFFSET
  SQL_C_VARBOOKMARK* = SQL_C_BINARY
  SQL_CA_CONSTRAINT_DEFERRABLE* = 0x00000040
  SQL_CA_CONSTRAINT_INITIALLY_DEFERRED* = 0x00000010
  SQL_CA_CONSTRAINT_INITIALLY_IMMEDIATE* = 0x00000020
  SQL_CA_CONSTRAINT_NON_DEFERRABLE* = 0x00000080
  SQL_CA_CREATE_ASSERTION* = 0x00000001
  SQL_CA1_ABSOLUTE* = 0x00000002
  SQL_CA1_BOOKMARK* = 0x00000008
  SQL_CA1_BULK_ADD* = 0x00010000
  SQL_CA1_BULK_DELETE_BY_BOOKMARK* = 0x00040000
  SQL_CA1_BULK_FETCH_BY_BOOKMARK* = 0x00080000
  SQL_CA1_BULK_UPDATE_BY_BOOKMARK* = 0x00020000
  SQL_CA1_LOCK_EXCLUSIVE* = 0x00000080
  SQL_CA1_LOCK_NO_CHANGE* = 0x00000040
  SQL_CA1_LOCK_UNLOCK* = 0x00000100
  SQL_CA1_NEXT* = 0x00000001
  SQL_CA1_POS_DELETE* = 0x00000800
  SQL_CA1_POS_POSITION* = 0x00000200
  SQL_CA1_POS_REFRESH* = 0x00001000
  SQL_CA1_POS_UPDATE* = 0x00000400
  SQL_CA1_POSITIONED_DELETE* = 0x00004000
  SQL_CA1_POSITIONED_UPDATE* = 0x00002000
  SQL_CA1_RELATIVE* = 0x00000004
  SQL_CA1_SELECT_FOR_UPDATE* = 0x00008000
  SQL_CA2_CRC_APPROXIMATE* = 0x00002000
  SQL_CA2_CRC_EXACT* = 0x00001000
  SQL_CA2_LOCK_CONCURRENCY* = 0x00000002
  SQL_CA2_MAX_ROWS_CATALOG* = 0x00000800
  SQL_CA2_MAX_ROWS_DELETE* = 0x00000200
  SQL_CA2_MAX_ROWS_INSERT* = 0x00000100
  SQL_CA2_MAX_ROWS_SELECT* = 0x00000080
  SQL_CA2_MAX_ROWS_UPDATE* = 0x00000400
  SQL_CA2_MAX_ROWS_AFFECTS_ALL* = SQL_CA2_MAX_ROWS_SELECT or SQL_CA2_MAX_ROWS_INSERT or SQL_CA2_MAX_ROWS_DELETE or SQL_CA2_MAX_ROWS_UPDATE or SQL_CA2_MAX_ROWS_CATALOG
  SQL_CA2_OPT_ROWVER_CONCURRENCY* = 0x00000004
  SQL_CA2_OPT_VALUES_CONCURRENCY* = 0x00000008
  SQL_CA2_READ_ONLY_CONCURRENCY* = 0x00000001
  SQL_CA2_SENSITIVITY_ADDITIONS* = 0x00000010
  SQL_CA2_SENSITIVITY_DELETIONS* = 0x00000020
  SQL_CA2_SENSITIVITY_UPDATES* = 0x00000040
  SQL_CA2_SIMULATE_NON_UNIQUE* = 0x00004000
  SQL_CA2_SIMULATE_TRY_UNIQUE* = 0x00008000
  SQL_CA2_SIMULATE_UNIQUE* = 0x00010000
  SQL_CATALOG_LOCATION* = SQL_QUALIFIER_LOCATION
  SQL_CATALOG_NAME_SEPARATOR* = SQL_QUALIFIER_NAME_SEPARATOR
  SQL_CATALOG_TERM* = SQL_QUALIFIER_TERM
  SQL_CATALOG_USAGE* = SQL_QUALIFIER_USAGE
  SQL_CCOL_CREATE_COLLATION* = 0x00000001
  SQL_CCS_COLLATE_CLAUSE* = 0x00000002
  SQL_CCS_CREATE_CHARACTER_SET* = 0x00000001
  SQL_CCS_LIMITED_COLLATION* = 0x00000004
  SQL_CDO_COLLATION* = 0x00000008
  SQL_CDO_CONSTRAINT* = 0x00000004
  SQL_CDO_CONSTRAINT_DEFERRABLE* = 0x00000080
  SQL_CDO_CONSTRAINT_INITIALLY_DEFERRED* = 0x00000020
  SQL_CDO_CONSTRAINT_INITIALLY_IMMEDIATE* = 0x00000040
  SQL_CDO_CONSTRAINT_NAME_DEFINITION* = 0x00000010
  SQL_CDO_CONSTRAINT_NON_DEFERRABLE* = 0x00000100
  SQL_CDO_CREATE_DOMAIN* = 0x00000001
  SQL_CDO_DEFAULT* = 0x00000002
  SQL_CL_END* = SQL_QL_END
  SQL_CL_START* = SQL_QL_START
  SQL_COL_PRED_BASIC* = SQL_ALL_EXCEPT_LIKE
  SQL_COL_PRED_CHAR* = SQL_LIKE_ONLY
  SQL_COLUMN_DRIVER_START* = 1000
  SQL_COLUMN_IGNORE* = SQL_IGNORE
  SQL_COLUMN_NUMBER_UNKNOWN* = -2
  SQL_CONVERT_GUID* = 173
  SQL_CONVERT_WCHAR* = 122
  SQL_CONVERT_INTERVAL_DAY_TIME* = 123
  SQL_CONVERT_INTERVAL_YEAR_MONTH* = 124
  SQL_CONVERT_WLONGVARCHAR* = 125
  SQL_CONVERT_WVARCHAR* = 126
  SQL_CREATE_ASSERTION* = 127
  SQL_CREATE_CHARACTER_SET* = 128
  SQL_CREATE_COLLATION* = 129
  SQL_CREATE_DOMAIN* = 130
  SQL_CREATE_SCHEMA* = 131
  SQL_CREATE_TABLE* = 132
  SQL_CREATE_TRANSLATION* = 133
  SQL_CREATE_VIEW* = 134
  SQL_CP_OFF* = 0
  SQL_CP_DEFAULT* = SQL_CP_OFF
  SQL_CP_ONE_PER_DRIVER* = 1
  SQL_CP_ONE_PER_HENV* = 2
  SQL_CP_STRICT_MATCH* = 0
  SQL_CP_MATCH_DEFAULT* = SQL_CP_STRICT_MATCH
  SQL_CP_RELAXED_MATCH* = 1
  SQL_CS_CREATE_SCHEMA* = 0x00000001
  SQL_CS_AUTHORIZATION* = 0x00000002
  SQL_CS_DEFAULT_CHARACTER_SET* = 0x00000004
  SQL_CT_COLUMN_COLLATION* = 0x00000800
  SQL_CT_COLUMN_CONSTRAINT* = 0x00000200
  SQL_CT_COLUMN_DEFAULT* = 0x00000400
  SQL_CT_COMMIT_DELETE* = 0x00000004
  SQL_CT_COMMIT_PRESERVE* = 0x00000002
  SQL_CT_CONSTRAINT_DEFERRABLE* = 0x00000080
  SQL_CT_CONSTRAINT_INITIALLY_DEFERRED* = 0x00000020
  SQL_CT_CONSTRAINT_INITIALLY_IMMEDIATE* = 0x00000040
  SQL_CT_CONSTRAINT_NAME_DEFINITION* = 0x00002000
  SQL_CT_CONSTRAINT_NON_DEFERRABLE* = 0x00000100
  SQL_CT_CREATE_TABLE* = 0x00000001
  SQL_CT_GLOBAL_TEMPORARY* = 0x00000008
  SQL_CT_LOCAL_TEMPORARY* = 0x00000010
  SQL_CT_TABLE_CONSTRAINT* = 0x00001000
  SQL_CTR_CREATE_TRANSLATION* = 0x00000001
  SQL_CU_DML_STATEMENTS* = SQL_QU_DML_STATEMENTS
  SQL_CU_INDEX_DEFINITION* = SQL_QU_INDEX_DEFINITION
  SQL_CU_PRIVILEGE_DEFINITION* = SQL_QU_PRIVILEGE_DEFINITION
  SQL_CU_PROCEDURE_INVOCATION* = SQL_QU_PROCEDURE_INVOCATION
  SQL_CU_TABLE_DEFINITION* = SQL_QU_TABLE_DEFINITION
  SQL_CVT_INTERVAL_YEAR_MONTH* = 0x00080000
  SQL_CVT_INTERVAL_DAY_TIME* = 0x00100000
  SQL_CVT_WCHAR* = 0x00200000
  SQL_CVT_WLONGVARCHAR* = 0x00400000
  SQL_CVT_WVARCHAR* = 0x00800000
  SQL_CVT_GUID* = 0x01000000
  SQL_DA_DROP_ASSERTION* = 0x00000001
  SQL_DATETIME_LITERALS* = 11
  SQL_DB_DISCONNECT* = 1U
  SQL_DB_RETURN_TO_POOL* = 0U
  SQL_DB_DEFAULT* = SQL_DB_RETURN_TO_POOL
  SQL_DC_DROP_COLLATION* = 0x00000001
  SQL_DCS_DROP_CHARACTER_SET* = 0x00000001
  SQL_DD_CASCADE* = 0x00000004
  SQL_DD_DROP_DOMAIN* = 0x00000001
  SQL_DD_RESTRICT* = 0x00000002
  SQL_DDL_INDEX* = 170
  SQL_DELETE_BY_BOOKMARK* = 6
  SQL_DESC_ARRAY_SIZE* = 20
  SQL_DESC_ARRAY_STATUS_PTR* = 21
  SQL_DESC_AUTO_UNIQUE_VALUE* = SQL_COLUMN_AUTO_INCREMENT
  SQL_DESC_BASE_COLUMN_NAME* = 22
  SQL_DESC_BASE_TABLE_NAME* = 23
  SQL_DESC_BIND_OFFSET_PTR* = 24
  SQL_DESC_BIND_TYPE* = 25
  SQL_DESC_CASE_SENSITIVE* = SQL_COLUMN_CASE_SENSITIVE
  SQL_DESC_CATALOG_NAME* = SQL_COLUMN_QUALIFIER_NAME
  SQL_DESC_CONCISE_TYPE* = SQL_COLUMN_TYPE
  SQL_DESC_DATETIME_INTERVAL_PRECISION* = 26
  SQL_DESC_DISPLAY_SIZE* = SQL_COLUMN_DISPLAY_SIZE
  SQL_DESC_FIXED_PREC_SCALE* = SQL_COLUMN_MONEY
  SQL_DESC_LABEL* = SQL_COLUMN_LABEL
  SQL_DESC_LITERAL_PREFIX* = 27
  SQL_DESC_LITERAL_SUFFIX* = 28
  SQL_DESC_LOCAL_TYPE_NAME* = 29
  SQL_DESC_MAXIMUM_SCALE* = 30
  SQL_DESC_MINIMUM_SCALE* = 31
  SQL_DESC_NUM_PREC_RADIX* = 32
  SQL_DESC_PARAMETER_TYPE* = 33
  SQL_DESC_ROWS_PROCESSED_PTR* = 34
  SQL_DESC_SCHEMA_NAME* = SQL_COLUMN_OWNER_NAME
  SQL_DESC_SEARCHABLE* = SQL_COLUMN_SEARCHABLE
  SQL_DESC_TABLE_NAME* = SQL_COLUMN_TABLE_NAME
  SQL_DESC_TYPE_NAME* = SQL_COLUMN_TYPE_NAME
  SQL_DESC_UNSIGNED* = SQL_COLUMN_UNSIGNED
  SQL_DESC_UPDATABLE* = SQL_COLUMN_UPDATABLE
  SQL_DI_CREATE_INDEX* = 0x00000001
  SQL_DI_DROP_INDEX* = 0x00000002
  SQL_DIAG_COLUMN_NUMBER* = -124
  SQL_DIAG_ROW_NUMBER* = -124
  SQL_DIAG_CURSOR_ROW_COUNT* = -124
  SQL_DL_SQL92_DATE* = 0x00000001
  SQL_DL_SQL92_INTERVAL_DAY* = 0x00000020
  SQL_DL_SQL92_INTERVAL_DAY_TO_HOUR* = 0x00000400
  SQL_DL_SQL92_INTERVAL_DAY_TO_MINUTE* = 0x00000800
  SQL_DL_SQL92_INTERVAL_DAY_TO_SECOND* = 0x00001000
  SQL_DL_SQL92_INTERVAL_HOUR* = 0x00000040
  SQL_DL_SQL92_INTERVAL_HOUR_TO_MINUTE* = 0x00002000
  SQL_DL_SQL92_INTERVAL_HOUR_TO_SECOND* = 0x00004000
  SQL_DL_SQL92_INTERVAL_MINUTE* = 0x00000080
  SQL_DL_SQL92_INTERVAL_MINUTE_TO_SECOND* = 0x00008000
  SQL_DL_SQL92_INTERVAL_MONTH* = 0x00000010
  SQL_DL_SQL92_INTERVAL_SECOND* = 0x00000100
  SQL_DL_SQL92_INTERVAL_YEAR* = 0x00000008
  SQL_DL_SQL92_INTERVAL_YEAR_TO_MONTH* = 0x00000200
  SQL_DL_SQL92_TIME* = 0x00000002
  SQL_DL_SQL92_TIMESTAMP* = 0x00000004
  SQL_DM_VER* = 171
  SQL_DRIVER_HDESC* = 135
  SQL_DROP_ASSERTION* = 136
  SQL_DROP_CHARACTER_SET* = 137
  SQL_DROP_COLLATION* = 138
  SQL_DROP_DOMAIN* = 139
  SQL_DROP_SCHEMA* = 140
  SQL_DROP_TABLE* = 141
  SQL_DROP_TRANSLATION* = 142
  SQL_DROP_VIEW* = 143
  SQL_DS_CASCADE* = 0x00000004
  SQL_DS_DROP_SCHEMA* = 0x00000001
  SQL_DS_RESTRICT* = 0x00000002
  SQL_DT_CASCADE* = 0x00000004
  SQL_DT_DROP_TABLE* = 0x00000001
  SQL_DT_RESTRICT* = 0x00000002
  SQL_DTC_DONE* = 0
  SQL_DTR_DROP_TRANSLATION* = 0x00000001
  SQL_DV_CASCADE* = 0x00000004
  SQL_DV_DROP_VIEW* = 0x00000001
  SQL_DV_RESTRICT* = 0x00000002
  SQL_DYNAMIC_CURSOR_ATTRIBUTES1* = 144
  SQL_DYNAMIC_CURSOR_ATTRIBUTES2* = 145
  SQL_EXT_API_LAST* = SQL_API_SQLBINDPARAMETER
  SQL_EXT_API_START* = 40
  SQL_FETCH_BY_BOOKMARK* = 7
  SQL_FETCH_FIRST_SYSTEM* = 32
  SQL_FETCH_FIRST_USER* = 31
  SQL_FN_CVT_CAST* = 0x00000002
  SQL_FN_STR_BIT_LENGTH* = 0x00080000
  SQL_FN_STR_CHAR_LENGTH* = 0x00100000
  SQL_FN_STR_CHARACTER_LENGTH* = 0x00200000
  SQL_FN_STR_OCTET_LENGTH* = 0x00400000
  SQL_FN_STR_POSITION* = 0x00800000
  SQL_FN_TD_CURRENT_DATE* = 0x00020000
  SQL_FN_TD_CURRENT_TIME* = 0x00040000
  SQL_FN_TD_CURRENT_TIMESTAMP* = 0x00080000
  SQL_FN_TD_EXTRACT* = 0x00100000
  SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1* = 146
  SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2* = 147
  SQL_GB_COLLATE* = 0x0004
  SQL_HANDLE_SENV* = 5
  SQL_IK_NONE* = 0
  SQL_IK_ASC* = 1
  SQL_IK_DESC* = 2
  SQL_IK_ALL* = SQL_IK_ASC or SQL_IK_DESC
  SQL_INDEX_KEYWORDS* = 148
  SQL_INFO_DRIVER_START* = 1000
  SQL_INFO_LAST* = SQL_QUALIFIER_LOCATION
  SQL_INFO_SCHEMA_VIEWS* = 149
  SQL_INITIALLY_DEFERRED* = 5
  SQL_INITIALLY_IMMEDIATE* = 6
  SQL_INSERT_STATEMENT* = 172
  SQL_INTERVAL* = 10
  SQL_IS_INSERT_LITERALS* = 0x00000001
  SQL_IS_INSERT_SEARCHED* = 0x00000002
  SQL_IS_INTEGER* = -6
  SQL_IS_POINTER* = -4
  SQL_IS_SELECT_INTO* = 0x00000004
  SQL_IS_SMALLINT* = -8
  SQL_IS_UINTEGER* = -5
  SQL_IS_USMALLINT* = -7
  SQL_ISV_ASSERTIONS* = 0x00000001
  SQL_ISV_CHARACTER_SETS* = 0x00000002
  SQL_ISV_CHECK_CONSTRAINTS* = 0x00000004
  SQL_ISV_COLLATIONS* = 0x00000008
  SQL_ISV_COLUMN_DOMAIN_USAGE* = 0x00000010
  SQL_ISV_COLUMN_PRIVILEGES* = 0x00000020
  SQL_ISV_COLUMNS* = 0x00000040
  SQL_ISV_CONSTRAINT_COLUMN_USAGE* = 0x00000080
  SQL_ISV_CONSTRAINT_TABLE_USAGE* = 0x00000100
  SQL_ISV_DOMAIN_CONSTRAINTS* = 0x00000200
  SQL_ISV_DOMAINS* = 0x00000400
  SQL_ISV_KEY_COLUMN_USAGE* = 0x00000800
  SQL_ISV_REFERENTIAL_CONSTRAINTS* = 0x00001000
  SQL_ISV_SCHEMATA* = 0x00002000
  SQL_ISV_SQL_LANGUAGES* = 0x00004000
  SQL_ISV_TABLE_CONSTRAINTS* = 0x00008000
  SQL_ISV_TABLE_PRIVILEGES* = 0x00010000
  SQL_ISV_TABLES* = 0x00020000
  SQL_ISV_TRANSLATIONS* = 0x00040000
  SQL_ISV_USAGE_PRIVILEGES* = 0x00080000
  SQL_ISV_VIEW_COLUMN_USAGE* = 0x00100000
  SQL_ISV_VIEW_TABLE_USAGE* = 0x00200000
  SQL_ISV_VIEWS* = 0x00400000
  SQL_KEYSET_CURSOR_ATTRIBUTES1* = 150
  SQL_KEYSET_CURSOR_ATTRIBUTES2* = 151
  SQL_MAX_ASYNC_CONCURRENT_STATEMENTS* = 10022
  SQL_NO_COLUMN_NUMBER* = -1
  SQL_NO_ROW_NUMBER* = -1
  SQL_NOT_DEFERRABLE* = 7
  SQL_NUM_EXTENSIONS* = SQL_EXT_API_LAST-SQL_EXT_API_START+1
  SQL_NUM_FUNCTIONS* = 23
  SQL_ODBC_INTERFACE_CONFORMANCE* = 152
  SQL_OIC_CORE* = 1
  SQL_OIC_LEVEL1* = 2
  SQL_OIC_LEVEL2* = 3
  SQL_OV_ODBC2* = 2
  SQL_OV_ODBC3* = 3
  SQL_PARAM_BIND_BY_COLUMN* = 0
  SQL_PARAM_BIND_TYPE_DEFAULT* = SQL_PARAM_BIND_BY_COLUMN.ULONG
  SQL_PARAM_ARRAY_ROW_COUNTS* = 153
  SQL_PARAM_ARRAY_SELECTS* = 154
  SQL_PARAM_DIAG_UNAVAILABLE* = 1
  SQL_PARAM_ERROR* = 5
  SQL_PARAM_IGNORE* = 1
  SQL_PARAM_PROCEED* = 0
  SQL_PARAM_SUCCESS* = 0
  SQL_PARAM_SUCCESS_WITH_INFO* = 6
  SQL_PARAM_UNUSED* = 7
  SQL_PARC_BATCH* = 1
  SQL_PARC_NO_BATCH* = 2
  SQL_PAS_BATCH* = 1
  SQL_PAS_NO_BATCH* = 2
  SQL_PAS_NO_SELECT* = 3
  SQL_ROW_IGNORE* = 1
  SQL_ROW_NUMBER_UNKNOWN* = -2
  SQL_ROW_PROCEED* = 0
  SQL_ROW_SUCCESS_WITH_INFO* = 6
  SQL_SC_FIPS127_2_TRANSITIONAL* = 0x00000002
  SQL_SC_SQL92_ENTRY* = 0x00000001
  SQL_SC_SQL92_FULL* = 0x00000008
  SQL_SC_SQL92_INTERMEDIATE* = 0x00000004
  SQL_SCC_ISO92_CLI* = 0x00000002
  SQL_SCC_XOPEN_CLI_VERSION1* = 0x00000001
  SQL_SCHEMA_TERM* = SQL_OWNER_TERM
  SQL_SCHEMA_USAGE* = SQL_OWNER_USAGE
  SQL_SDF_CURRENT_DATE* = 0x00000001
  SQL_SDF_CURRENT_TIME* = 0x00000002
  SQL_SDF_CURRENT_TIMESTAMP* = 0x00000004
  SQL_SFKD_CASCADE* = 0x00000001
  SQL_SFKD_NO_ACTION* = 0x00000002
  SQL_SFKD_SET_DEFAULT* = 0x00000004
  SQL_SFKD_SET_NULL* = 0x00000008
  SQL_SFKU_CASCADE* = 0x00000001
  SQL_SFKU_NO_ACTION* = 0x00000002
  SQL_SFKU_SET_DEFAULT* = 0x00000004
  SQL_SFKU_SET_NULL* = 0x00000008
  SQL_SG_DELETE_TABLE* = 0x00000020
  SQL_SG_INSERT_COLUMN* = 0x00000080
  SQL_SG_INSERT_TABLE* = 0x00000040
  SQL_SG_REFERENCES_COLUMN* = 0x00000200
  SQL_SG_REFERENCES_TABLE* = 0x00000100
  SQL_SG_SELECT_TABLE* = 0x00000400
  SQL_SG_UPDATE_COLUMN* = 0x00001000
  SQL_SG_UPDATE_TABLE* = 0x00000800
  SQL_SG_USAGE_ON_CHARACTER_SET* = 0x00000002
  SQL_SG_USAGE_ON_COLLATION* = 0x00000004
  SQL_SG_USAGE_ON_DOMAIN* = 0x00000001
  SQL_SG_USAGE_ON_TRANSLATION* = 0x00000008
  SQL_SG_WITH_GRANT_OPTION* = 0x00000010
  SQL_SNVF_BIT_LENGTH* = 0x00000001
  SQL_SNVF_CHAR_LENGTH* = 0x00000002
  SQL_SNVF_CHARACTER_LENGTH* = 0x00000004
  SQL_SNVF_EXTRACT* = 0x00000008
  SQL_SNVF_OCTET_LENGTH* = 0x00000010
  SQL_SNVF_POSITION* = 0x00000020
  SQL_SP_BETWEEN* = 0x00000800
  SQL_SP_COMPARISON* = 0x00001000
  SQL_SP_EXISTS* = 0x00000001
  SQL_SP_IN* = 0x00000400
  SQL_SP_ISNOTNULL* = 0x00000002
  SQL_SP_ISNULL* = 0x00000004
  SQL_SP_LIKE* = 0x00000200
  SQL_SP_MATCH_FULL* = 0x00000008
  SQL_SP_MATCH_PARTIAL* = 0x00000010
  SQL_SP_MATCH_UNIQUE_FULL* = 0x00000020
  SQL_SP_MATCH_UNIQUE_PARTIAL* = 0x00000040
  SQL_SP_OVERLAPS* = 0x00000080
  SQL_SP_QUANTIFIED_COMPARISON* = 0x00002000
  SQL_SP_UNIQUE* = 0x00000100
  SQL_SQL_CONFORMANCE* = 118
  SQL_SQL92_DATETIME_FUNCTIONS* = 155
  SQL_SQL92_FOREIGN_KEY_DELETE_RULE* = 156
  SQL_SQL92_FOREIGN_KEY_UPDATE_RULE* = 157
  SQL_SQL92_GRANT* = 158
  SQL_SQL92_NUMERIC_VALUE_FUNCTIONS* = 159
  SQL_SQL92_PREDICATES* = 160
  SQL_SQL92_RELATIONAL_JOIN_OPERATORS* = 161
  SQL_SQL92_REVOKE* = 162
  SQL_SQL92_ROW_VALUE_CONSTRUCTOR* = 163
  SQL_SQL92_STRING_FUNCTIONS* = 164
  SQL_SQL92_VALUE_EXPRESSIONS* = 165
  SQL_SR_CASCADE* = 0x00000020
  SQL_SR_DELETE_TABLE* = 0x00000080
  SQL_SR_GRANT_OPTION_FOR* = 0x00000010
  SQL_SR_INSERT_COLUMN* = 0x00000200
  SQL_SR_INSERT_TABLE* = 0x00000100
  SQL_SR_REFERENCES_COLUMN* = 0x00000800
  SQL_SR_REFERENCES_TABLE* = 0x00000400
  SQL_SR_RESTRICT* = 0x00000040
  SQL_SR_SELECT_TABLE* = 0x00001000
  SQL_SR_UPDATE_COLUMN* = 0x00004000
  SQL_SR_UPDATE_TABLE* = 0x00002000
  SQL_SR_USAGE_ON_CHARACTER_SET* = 0x00000002
  SQL_SR_USAGE_ON_COLLATION* = 0x00000004
  SQL_SR_USAGE_ON_DOMAIN* = 0x00000001
  SQL_SR_USAGE_ON_TRANSLATION* = 0x00000008
  SQL_SRJO_CORRESPONDING_CLAUSE* = 0x00000001
  SQL_SRJO_CROSS_JOIN* = 0x00000002
  SQL_SRJO_EXCEPT_JOIN* = 0x00000004
  SQL_SRJO_FULL_OUTER_JOIN* = 0x00000008
  SQL_SRJO_INNER_JOIN* = 0x00000010
  SQL_SRJO_INTERSECT_JOIN* = 0x00000020
  SQL_SRJO_LEFT_OUTER_JOIN* = 0x00000040
  SQL_SRJO_NATURAL_JOIN* = 0x00000080
  SQL_SRJO_RIGHT_OUTER_JOIN* = 0x00000100
  SQL_SRJO_UNION_JOIN* = 0x00000200
  SQL_SRVC_DEFAULT* = 0x00000004
  SQL_SRVC_NULL* = 0x00000002
  SQL_SRVC_ROW_SUBQUERY* = 0x00000008
  SQL_SRVC_VALUE_EXPRESSION* = 0x00000001
  SQL_SSF_CONVERT* = 0x00000001
  SQL_SSF_LOWER* = 0x00000002
  SQL_SSF_SUBSTRING* = 0x00000008
  SQL_SSF_TRANSLATE* = 0x00000010
  SQL_SSF_TRIM_BOTH* = 0x00000020
  SQL_SSF_TRIM_LEADING* = 0x00000040
  SQL_SSF_TRIM_TRAILING* = 0x00000080
  SQL_SSF_UPPER* = 0x00000004
  SQL_STANDARD_CLI_CONFORMANCE* = 166
  SQL_STATIC_CURSOR_ATTRIBUTES1* = 167
  SQL_STATIC_CURSOR_ATTRIBUTES2* = 168
  SQL_SU_DML_STATEMENTS* = SQL_OU_DML_STATEMENTS
  SQL_SU_INDEX_DEFINITION* = SQL_OU_INDEX_DEFINITION
  SQL_SU_PRIVILEGE_DEFINITION* = SQL_OU_PRIVILEGE_DEFINITION
  SQL_SU_PROCEDURE_INVOCATION* = SQL_OU_PROCEDURE_INVOCATION
  SQL_SU_TABLE_DEFINITION* = SQL_OU_TABLE_DEFINITION
  SQL_SVE_CASE* = 0x00000001
  SQL_SVE_CAST* = 0x00000002
  SQL_SVE_COALESCE* = 0x00000004
  SQL_SVE_NULLIF* = 0x00000008
  SQL_UB_FIXED* = SQL_UB_ON
  SQL_UB_VARIABLE* = 2
  SQL_UNION_STATEMENT* = SQL_UNION
  SQL_UPDATE_BY_BOOKMARK* = 5
  SQL_US_UNION* = SQL_U_UNION
  SQL_US_UNION_ALL* = SQL_U_UNION_ALL
  SQL_DESC_ROWVER* = 35
  SQL_GUID* = -11
  SQL_C_GUID* = SQL_GUID
  SQL_ATTR_ANSI_APP* = 115
  SQL_AA_TRUE* = 1
  SQL_AA_FALSE* = 0
  # TRACE_VERSION* = 1000
  TRACE_ON* = 1
  SQL_ODBC_KEYWORDS* = "ABSOLUTE, ACTION, ADA, ADD, ALL, ALLOCATE, ALTER, AND, ANY, ARE, AS, " &
    "ASC, ASSERTION, AT, AUTHORIZATION, AVG, " &
    "BEGIN, BETWEEN, BIT, BIT_LENGTH, BOTH, BY, CASCADE, CASCADED, CASE, CAST, CATALOG, " &
    "CHAR, CHAR_LENGTH, CHARACTER, CHARACTER_LENGTH, CHECK, CLOSE, COALESCE, " &
    "COLLATE, COLLATION, COLUMN, COMMIT, CONNECT, CONNECTION, CONSTRAINT, " &
    "CONSTRAINTS, CONTINUE, CONVERT, CORRESPONDING, COUNT, CREATE, CROSS, CURRENT, " &
    "CURRENT_DATE, CURRENT_TIME, CURRENT_TIMESTAMP, CURRENT_USER, CURSOR, " &
    "DATE, DAY, DEALLOCATE, DEC, DECIMAL, DECLARE, DEFAULT, DEFERRABLE, " &
    "DEFERRED, DELETE, DESC, DESCRIBE, DESCRIPTOR, DIAGNOSTICS, DISCONNECT, " &
    "DISTINCT, DOMAIN, DOUBLE, DROP, " &
    "ELSE, END, END-EXEC, ESCAPE, EXCEPT, EXCEPTION, EXEC, EXECUTE, " &
    "EXISTS, EXTERNAL, EXTRACT, " &
    "FALSE, FETCH, FIRST, FLOAT, FOR, FOREIGN, FORTRAN, FOUND, FROM, FULL, " &
    "GET, GLOBAL, GO, GOTO, GRANT, GROUP, HAVING, HOUR, " &
    "IDENTITY, IMMEDIATE, IN, INCLUDE, INDEX, INDICATOR, INITIALLY, INNER, " &
    "INPUT, INSENSITIVE, INSERT, INT, INTEGER, INTERSECT, INTERVAL, INTO, IS, ISOLATION, " &
    "JOIN, KEY, LANGUAGE, LAST, LEADING, LEFT, LEVEL, LIKE, LOCAL, LOWER, " &
    "MATCH, MAX, MIN, MINUTE, MODULE, MONTH, " &
    "NAMES, NATIONAL, NATURAL, NCHAR, NEXT, NO, NONE, NOT, NULL, NULLIF, NUMERIC, " &
    "OCTET_LENGTH, OF, ON, ONLY, OPEN, OPTION, OR, ORDER, OUTER, OUTPUT, OVERLAPS, " &
    "PAD, PARTIAL, PASCAL, PLI, POSITION, PRECISION, PREPARE, PRESERVE, " &
    "PRIMARY, PRIOR, PRIVILEGES, PROCEDURE, PUBLIC, " &
    "READ, REAL, REFERENCES, RELATIVE, RESTRICT, REVOKE, RIGHT, ROLLBACK, ROWS, " &
    "SCHEMA, SCROLL, SECOND, SECTION, SELECT, SESSION, SESSION_USER, SET, SIZE, " &
    "SMALLINT, SOME, SPACE, SQL, SQLCA, SQLCODE, SQLERROR, SQLSTATE, SQLWARNING, " &
    "SUBSTRING, SUM, SYSTEM_USER, " &
    "TABLE, TEMPORARY, THEN, TIME, TIMESTAMP, TIMEZONE_HOUR, TIMEZONE_MINUTE, " &
    "TO, TRAILING, TRANSACTION, TRANSLATE, TRANSLATION, TRIM, TRUE, " &
    "UNION, UNIQUE, UNKNOWN, UPDATE, UPPER, USAGE, USER, USING, " &
    "VALUE, VALUES, VARCHAR, VARYING, VIEW, WHEN, WHENEVER, WHERE, WITH, WORK, WRITE, " &
    "YEAR, ZONE"

proc SQLDriverConnect*(P1: SQLHDBC, P2: SQLHWND, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLCHAR, P6: T_SQLSMALLINT, P7: ptr T_SQLSMALLINT, P8: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLBrowseConnect*(P1: SQLHDBC, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColumnPrivileges*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColAttributes*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLUSMALLINT, P4: T_SQLPOINTER, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDescribeParam*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: ptr T_SQLSMALLINT, P4: ptr SQLULEN, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLExtendedFetch*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLINTEGER, P4: ptr T_SQLUINTEGER, P5: ptr T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLForeignKeys*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT, P10: ptr T_SQLCHAR, P11: T_SQLSMALLINT, P12: ptr T_SQLCHAR, P13: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLMoreResults*(P1: SQLHSTMT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLNativeSql*(P1: SQLHDBC, P2: ptr T_SQLCHAR, P3: T_SQLINTEGER, P4: ptr T_SQLCHAR, P5: T_SQLINTEGER, P6: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLNumParams*(P1: SQLHSTMT, P2: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLParamOptions*(P1: SQLHSTMT, P2: T_SQLUINTEGER, P3: ptr T_SQLUINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLPrimaryKeys*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLProcedureColumns*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLProcedures*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetPos*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLUSMALLINT, P4: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLTablePrivileges*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDrivers*(P1: SQLHENV, P2: T_SQLUSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLBindParameter*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLSMALLINT, P5: T_SQLSMALLINT, P6: SQLULEN, P7: T_SQLSMALLINT, P8: T_SQLPOINTER, P9: SQLLEN, P10: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetScrollOptions*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: SQLLEN, P4: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc ODBCGetTryWaitValue*(): DWORD {.winapi, dynlib: "odbc32", importc.}
proc ODBCSetTryWaitValue*(P1: DWORD): BOOL {.winapi, dynlib: "odbc32", importc.}
proc TraceOpenLogFile*(P1: LPWSTR, P2: LPWSTR, P3: DWORD): RETCODE {.winapi, dynlib: "odbctrac", importc.}
proc TraceCloseLogFile*(): RETCODE {.winapi, dynlib: "odbctrac", importc.}
proc TraceReturn*(P1: RETCODE, P2: RETCODE): VOID {.winapi, dynlib: "odbctrac", importc.}
proc TraceVersion*(): DWORD {.winapi, dynlib: "odbctrac", importc.}
proc SQLBulkOperations*(P1: SQLHSTMT, P2: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLAllocHandleStd*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: ptr SQLHANDLE): SQLRETURN {.winapi, dynlib: "odbc32", importc.}

# ext/sqlucode.nim

const
  SQL_WCHAR* = -8
  SQL_WVARCHAR* = -9
  SQL_WLONGVARCHAR* = -10
  SQL_C_WCHAR* = SQL_WCHAR
  SQL_SQLSTATE_SIZEW* = 10

when not defined(winansi):
  const
    SQL_C_TCHAR* = SQL_C_WCHAR

else:
  const
    SQL_C_TCHAR* = SQL_C_CHAR

const
  SQL_UNICODE* = SQL_WCHAR
  SQL_UNICODE_VARCHAR* = SQL_WVARCHAR
  SQL_UNICODE_LONGVARCHAR* = SQL_WLONGVARCHAR
  SQL_UNICODE_CHAR* = SQL_WCHAR

proc SQLBrowseConnectA*(P1: SQLHDBC, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLBrowseConnectW*(P1: SQLHDBC, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColAttributeA*(P1: SQLHSTMT, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColAttributeW*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLUSMALLINT, P4: T_SQLPOINTER, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColAttributesA*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLUSMALLINT, P4: T_SQLPOINTER, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColAttributesW*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLUSMALLINT, P4: T_SQLPOINTER, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColumnPrivilegesA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColumnPrivilegesW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColumnsA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColumnsW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLConnectA*(P1: SQLHDBC, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLConnectW*(P1: SQLHDBC, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDataSourcesA*(P1: SQLHENV, P2: T_SQLUSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDataSourcesW*(P1: SQLHENV, P2: T_SQLUSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDescribeColA*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr SQLULEN, P8: ptr T_SQLSMALLINT, P9: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDescribeColW*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr SQLULEN, P8: ptr T_SQLSMALLINT, P9: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDriverConnectA*(P1: SQLHDBC, P2: SQLHWND, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLCHAR, P6: T_SQLSMALLINT, P7: ptr T_SQLSMALLINT, P8: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDriverConnectW*(P1: SQLHDBC, P2: SQLHWND, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLWCHAR, P6: T_SQLSMALLINT, P7: ptr T_SQLSMALLINT, P8: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDriversA*(P1: SQLHENV, P2: T_SQLUSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDriversW*(P1: SQLHENV, P2: T_SQLUSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLErrorA*(P1: SQLHENV, P2: SQLHDBC, P3: SQLHSTMT, P4: ptr T_SQLCHAR, P5: ptr T_SQLINTEGER, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLErrorW*(P1: SQLHENV, P2: SQLHDBC, P3: SQLHSTMT, P4: ptr T_SQLWCHAR, P5: ptr T_SQLINTEGER, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLExecDirectA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLExecDirectW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLForeignKeysA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT, P10: ptr T_SQLCHAR, P11: T_SQLSMALLINT, P12: ptr T_SQLCHAR, P13: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLForeignKeysW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT, P10: ptr T_SQLWCHAR, P11: T_SQLSMALLINT, P12: ptr T_SQLWCHAR, P13: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetConnectAttrA*(P1: SQLHDBC, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER, P5: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetConnectAttrW*(P1: SQLHDBC, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER, P5: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetConnectOptionA*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetConnectOptionW*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetCursorNameA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetCursorNameW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetInfoA*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: T_SQLPOINTER, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetInfoW*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: T_SQLPOINTER, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetTypeInfoA*(P1: SQLHSTMT, P2: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetTypeInfoW*(P1: SQLHSTMT, P2: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLNativeSqlA*(P1: SQLHDBC, P2: ptr T_SQLCHAR, P3: T_SQLINTEGER, P4: ptr T_SQLCHAR, P5: T_SQLINTEGER, P6: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLNativeSqlW*(P1: SQLHDBC, P2: ptr T_SQLWCHAR, P3: T_SQLINTEGER, P4: ptr T_SQLWCHAR, P5: T_SQLINTEGER, P6: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLPrepareA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLPrepareW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLPrimaryKeysA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLPrimaryKeysW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLProcedureColumnsA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLProcedureColumnsW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLProceduresA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLProceduresW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetConnectAttrA*(P1: SQLHDBC, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetConnectAttrW*(P1: SQLHDBC, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetConnectOptionA*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: SQLULEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetConnectOptionW*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: SQLULEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetCursorNameA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetCursorNameW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSpecialColumnsA*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLCHAR, P6: T_SQLSMALLINT, P7: ptr T_SQLCHAR, P8: T_SQLSMALLINT, P9: T_SQLUSMALLINT, P10: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSpecialColumnsW*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLWCHAR, P6: T_SQLSMALLINT, P7: ptr T_SQLWCHAR, P8: T_SQLSMALLINT, P9: T_SQLUSMALLINT, P10: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLStatisticsA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: T_SQLUSMALLINT, P9: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLStatisticsW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: T_SQLUSMALLINT, P9: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLTablePrivilegesA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLTablePrivilegesW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLTablesA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLTablesW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDescFieldA*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: T_SQLINTEGER, P6: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDescFieldW*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: T_SQLINTEGER, P6: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetDescFieldA*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetDescFieldW*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDescRecA*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr T_SQLSMALLINT, P8: ptr SQLLEN, P9: ptr T_SQLSMALLINT, P10: ptr T_SQLSMALLINT, P11: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDescRecW*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr T_SQLSMALLINT, P8: ptr SQLLEN, P9: ptr T_SQLSMALLINT, P10: ptr T_SQLSMALLINT, P11: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDiagFieldA*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: T_SQLSMALLINT, P4: T_SQLSMALLINT, P5: T_SQLPOINTER, P6: T_SQLSMALLINT, P7: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDiagFieldW*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: T_SQLSMALLINT, P4: T_SQLSMALLINT, P5: T_SQLPOINTER, P6: T_SQLSMALLINT, P7: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDiagRecA*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: ptr T_SQLINTEGER, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDiagRecW*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: ptr T_SQLINTEGER, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetStmtAttrA*(P1: SQLHSTMT, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER, P5: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetStmtAttrW*(P1: SQLHSTMT, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER, P5: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetStmtAttrA*(P1: SQLHSTMT, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetStmtAttrW*(P1: SQLHSTMT, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}

when not defined(winansi):
  proc SQLBrowseConnect*(P1: SQLHDBC, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLBrowseConnectW".}
  # proc SQLColAttribute*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLUSMALLINT, P4: T_SQLPOINTER, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLColAttributeW".}
  # proc SQLColAttributes*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLUSMALLINT, P4: T_SQLPOINTER, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLColAttributesW".}
  proc SQLColumnPrivileges*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLColumnPrivilegesW".}
  proc SQLColumns*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLColumnsW".}
  proc SQLConnect*(P1: SQLHDBC, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLConnectW".}
  proc SQLDataSources*(P1: SQLHENV, P2: T_SQLUSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLDataSourcesW".}
  proc SQLDescribeCol*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr SQLULEN, P8: ptr T_SQLSMALLINT, P9: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLDescribeColW".}
  proc SQLDriverConnect*(P1: SQLHDBC, P2: SQLHWND, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLWCHAR, P6: T_SQLSMALLINT, P7: ptr T_SQLSMALLINT, P8: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLDriverConnectW".}
  proc SQLDrivers*(P1: SQLHENV, P2: T_SQLUSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLDriversW".}
  proc SQLError*(P1: SQLHENV, P2: SQLHDBC, P3: SQLHSTMT, P4: ptr T_SQLWCHAR, P5: ptr T_SQLINTEGER, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLErrorW".}
  proc SQLExecDirect*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLExecDirectW".}
  proc SQLForeignKeys*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT, P10: ptr T_SQLWCHAR, P11: T_SQLSMALLINT, P12: ptr T_SQLWCHAR, P13: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLForeignKeysW".}
  # proc SQLGetConnectAttr*(P1: SQLHDBC, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER, P5: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetConnectAttrW".}
  # proc SQLGetConnectOption*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetConnectOptionW".}
  proc SQLGetCursorName*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetCursorNameW".}
  # proc SQLGetDescField*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: T_SQLINTEGER, P6: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetDescFieldW".}
  proc SQLGetDescRec*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr T_SQLSMALLINT, P8: ptr SQLLEN, P9: ptr T_SQLSMALLINT, P10: ptr T_SQLSMALLINT, P11: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetDescRecW".}
  # proc SQLGetDiagField*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: T_SQLSMALLINT, P4: T_SQLSMALLINT, P5: T_SQLPOINTER, P6: T_SQLSMALLINT, P7: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetDiagFieldW".}
  proc SQLGetDiagRec*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: ptr T_SQLINTEGER, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetDiagRecW".}
  # proc SQLGetInfo*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: T_SQLPOINTER, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetInfoW".}
  # proc SQLGetStmtAttr*(P1: SQLHSTMT, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER, P5: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetStmtAttrW".}
  # proc SQLGetTypeInfo*(P1: SQLHSTMT, P2: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetTypeInfoW".}
  proc SQLNativeSql*(P1: SQLHDBC, P2: ptr T_SQLWCHAR, P3: T_SQLINTEGER, P4: ptr T_SQLWCHAR, P5: T_SQLINTEGER, P6: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLNativeSqlW".}
  proc SQLPrepare*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLPrepareW".}
  proc SQLPrimaryKeys*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLPrimaryKeysW".}
  proc SQLProcedureColumns*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLProcedureColumnsW".}
  proc SQLProcedures*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLProceduresW".}
  # proc SQLSetConnectAttr*(P1: SQLHDBC, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLSetConnectAttrW".}
  # proc SQLSetConnectOption*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: SQLULEN): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLSetConnectOptionW".}
  proc SQLSetCursorName*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLSetCursorNameW".}
  # proc SQLSetDescField*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLSetDescFieldW".}
  # proc SQLSetStmtAttr*(P1: SQLHSTMT, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLSetStmtAttrW".}
  proc SQLSpecialColumns*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLWCHAR, P6: T_SQLSMALLINT, P7: ptr T_SQLWCHAR, P8: T_SQLSMALLINT, P9: T_SQLUSMALLINT, P10: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLSpecialColumnsW".}
  proc SQLStatistics*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: T_SQLUSMALLINT, P9: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLStatisticsW".}
  proc SQLTablePrivileges*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLTablePrivilegesW".}
  proc SQLTables*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLTablesW".}

# ext/odbcinst.nim

const
  ODBC_ADD_DSN* = 1
  ODBC_CONFIG_DSN* = 2
  ODBC_REMOVE_DSN* = 3
  ODBC_ADD_SYS_DSN* = 4
  ODBC_CONFIG_SYS_DSN* = 5
  ODBC_REMOVE_SYS_DSN* = 6
  ODBC_REMOVE_DEFAULT_DSN* = 7
  ODBC_INSTALL_INQUIRY* = 1
  ODBC_INSTALL_COMPLETE* = 2
  ODBC_INSTALL_DRIVER* = 1
  ODBC_REMOVE_DRIVER* = 2
  ODBC_CONFIG_DRIVER* = 3
  ODBC_CONFIG_DRIVER_MAX* = 100
  ODBC_BOTH_DSN* = 0
  ODBC_USER_DSN* = 1
  ODBC_SYSTEM_DSN* = 2
  ODBC_ERROR_GENERAL_ERR* = 1
  ODBC_ERROR_INVALID_BUFF_LEN* = 2
  ODBC_ERROR_INVALID_HWND* = 3
  ODBC_ERROR_INVALID_STR* = 4
  ODBC_ERROR_INVALID_REQUEST_TYPE* = 5
  ODBC_ERROR_COMPONENT_NOT_FOUND* = 6
  ODBC_ERROR_INVALID_NAME* = 7
  ODBC_ERROR_INVALID_KEYWORD_VALUE* = 8
  ODBC_ERROR_INVALID_DSN* = 9
  ODBC_ERROR_INVALID_INF* = 10
  ODBC_ERROR_REQUEST_FAILED* = 11
  ODBC_ERROR_INVALID_PATH* = 12
  ODBC_ERROR_LOAD_LIB_FAILED* = 13
  ODBC_ERROR_INVALID_PARAM_SEQUENCE* = 14
  ODBC_ERROR_INVALID_LOG_FILE* = 15
  ODBC_ERROR_USER_CANCELED* = 16
  ODBC_ERROR_USAGE_UPDATE_FAILED* = 17
  ODBC_ERROR_CREATE_DSN_FAILED* = 18
  ODBC_ERROR_WRITING_SYSINFO_FAILED* = 19
  ODBC_ERROR_REMOVE_DSN_FAILED* = 20
  ODBC_ERROR_OUT_OF_MEM* = 21
  ODBC_ERROR_OUTPUT_STRING_TRUNCATED* = 22

proc ConfigDSN*(P1: HWND, P2: WORD, P3: LPCSTR, P4: LPCSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc ConfigDSNW*(P1: HWND, P2: WORD, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc ConfigTranslator*(P1: HWND, P2: ptr DWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLConfigDataSource*(P1: HWND, P2: WORD, P3: LPCSTR, P4: LPCSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLConfigDataSourceW*(P1: HWND, P2: WORD, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLCreateDataSource*(P1: HWND, P2: LPCSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLCreateDataSourceW*(P1: HWND, P2: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLGetAvailableDrivers*(P1: LPCSTR, P2: LPSTR, P3: WORD, P4: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLGetAvailableDriversW*(P1: LPCWSTR, P2: LPWSTR, P3: WORD, P4: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLGetInstalledDrivers*(P1: LPSTR, P2: WORD, P3: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLGetInstalledDriversW*(P1: LPWSTR, P2: WORD, P3: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLGetPrivateProfileString*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: LPSTR, P5: int32, P6: LPCSTR): int32 {.winapi, dynlib: "odbccp32", importc.}
proc SQLGetPrivateProfileStringW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: int32, P6: LPCWSTR): int32 {.winapi, dynlib: "odbccp32", importc.}
proc SQLGetTranslator*(P1: HWND, P2: LPSTR, P3: WORD, P4: ptr WORD, P5: LPSTR, P6: WORD, P7: ptr WORD, P8: ptr DWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLGetTranslatorW*(P1: HWND, P2: LPWSTR, P3: WORD, P4: ptr WORD, P5: LPWSTR, P6: WORD, P7: ptr WORD, P8: ptr DWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallDriver*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: WORD, P5: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallDriverManager*(P1: LPSTR, P2: WORD, P3: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallDriverManagerW*(P1: LPWSTR, P2: WORD, P3: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallDriverW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: WORD, P5: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallODBC*(P1: HWND, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallODBCW*(P1: HWND, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLManageDataSources*(P1: HWND): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLRemoveDefaultDataSource*(): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLRemoveDSNFromIni*(P1: LPCSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLRemoveDSNFromIniW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLValidDSN*(P1: LPCSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLValidDSNW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLWriteDSNToIni*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLWriteDSNToIniW*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLWritePrivateProfileString*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLWritePrivateProfileStringW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc ConfigDriver*(P1: HWND, P2: WORD, P3: LPCSTR, P4: LPCSTR, P5: LPSTR, P6: WORD, P7: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc ConfigDriverW*(P1: HWND, P2: WORD, P3: LPCWSTR, P4: LPCWSTR, P5: LPWSTR, P6: WORD, P7: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLConfigDriver*(P1: HWND, P2: WORD, P3: LPCSTR, P4: LPCSTR, P5: LPSTR, P6: WORD, P7: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLConfigDriverW*(P1: HWND, P2: WORD, P3: LPCWSTR, P4: LPCWSTR, P5: LPWSTR, P6: WORD, P7: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallTranslator*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: LPSTR, P5: WORD, P6: ptr WORD, P7: WORD, P8: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallTranslatorW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: WORD, P6: ptr WORD, P7: WORD, P8: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLRemoveDriver*(P1: LPCSTR, P2: BOOL, P3: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLRemoveDriverManager*(P1: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLRemoveDriverW*(P1: LPCWSTR, P2: BOOL, P3: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLRemoveTranslator*(P1: LPCSTR, P2: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLRemoveTranslatorW*(P1: LPCWSTR, P2: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLGetConfigMode*(P1: ptr UWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallDriverEx*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: WORD, P5: ptr WORD, P6: WORD, P7: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallDriverExW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: WORD, P5: ptr WORD, P6: WORD, P7: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallerError*(P1: WORD, P2: ptr DWORD, P3: LPSTR, P4: WORD, P5: ptr WORD): SQLRETURN {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallerErrorW*(P1: WORD, P2: ptr DWORD, P3: LPWSTR, P4: WORD, P5: ptr WORD): SQLRETURN {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallTranslatorEx*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: WORD, P5: ptr WORD, P6: WORD, P7: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallTranslatorExW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: WORD, P5: ptr WORD, P6: WORD, P7: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLPostInstallerError*(P1: DWORD, P2: LPCSTR): SQLRETURN {.winapi, dynlib: "odbccp32", importc.}
proc SQLPostInstallerErrorW*(P1: DWORD, P2: LPCWSTR): SQLRETURN {.winapi, dynlib: "odbccp32", importc.}
proc SQLReadFileDSN*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: LPSTR, P5: WORD, P6: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLReadFileDSNW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: WORD, P6: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLSetConfigMode*(P1: UWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLWriteFileDSN*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLWriteFileDSNW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}

when not defined(winansi):
  proc SQLConfigDataSource*(P1: HWND, P2: WORD, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLConfigDataSourceW".}
  proc SQLConfigDriver*(P1: HWND, P2: WORD, P3: LPCWSTR, P4: LPCWSTR, P5: LPWSTR, P6: WORD, P7: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLConfigDriverW".}
  proc SQLCreateDataSource*(P1: HWND, P2: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLCreateDataSourceW".}
  proc SQLGetAvailableDrivers*(P1: LPCWSTR, P2: LPWSTR, P3: WORD, P4: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLGetAvailableDriversW".}
  proc SQLGetInstalledDrivers*(P1: LPWSTR, P2: WORD, P3: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLGetInstalledDriversW".}
  proc SQLGetPrivateProfileString*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: int32, P6: LPCWSTR): int32 {.winapi, dynlib: "odbccp32", importc: "SQLGetPrivateProfileStringW".}
  proc SQLGetTranslator*(P1: HWND, P2: LPWSTR, P3: WORD, P4: ptr WORD, P5: LPWSTR, P6: WORD, P7: ptr WORD, P8: ptr DWORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLGetTranslatorW".}
  proc SQLInstallDriver*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: WORD, P5: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLInstallDriverW".}
  proc SQLInstallDriverEx*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: WORD, P5: ptr WORD, P6: WORD, P7: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLInstallDriverExW".}
  proc SQLInstallDriverManager*(P1: LPWSTR, P2: WORD, P3: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLInstallDriverManagerW".}
  proc SQLInstallerError*(P1: WORD, P2: ptr DWORD, P3: LPWSTR, P4: WORD, P5: ptr WORD): SQLRETURN {.winapi, dynlib: "odbccp32", importc: "SQLInstallerErrorW".}
  proc SQLInstallODBC*(P1: HWND, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLInstallODBCW".}
  proc SQLInstallTranslator*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: WORD, P6: ptr WORD, P7: WORD, P8: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLInstallTranslatorW".}
  proc SQLInstallTranslatorEx*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: WORD, P5: ptr WORD, P6: WORD, P7: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLInstallTranslatorExW".}
  proc SQLPostInstallerError*(P1: DWORD, P2: LPCWSTR): SQLRETURN {.winapi, dynlib: "odbccp32", importc: "SQLPostInstallerErrorW".}
  proc SQLReadFileDSN*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: WORD, P6: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLReadFileDSNW".}
  proc SQLRemoveDriver*(P1: LPCWSTR, P2: BOOL, P3: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLRemoveDriverW".}
  proc SQLRemoveDSNFromIni*(P1: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLRemoveDSNFromIniW".}
  proc SQLRemoveTranslator*(P1: LPCWSTR, P2: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLRemoveTranslatorW".}
  proc SQLValidDSN*(P1: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLValidDSNW".}
  proc SQLWriteDSNToIni*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLWriteDSNToIniW".}
  proc SQLWriteFileDSN*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLWriteFileDSNW".}
  proc SQLWritePrivateProfileString*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLWritePrivateProfileStringW".}

# ext/ntdef.nim
const
  # SECTION_INHERIT* = enum
  ViewShare* = 1
  ViewUnmap* = 2

const
  OBJ_INHERIT* = 0x0002
  OBJ_PERMANENT* = 0x0010
  OBJ_EXCLUSIVE* = 0x0020
  OBJ_CASE_INSENSITIVE* = 0x0040
  OBJ_OPENIF* = 0x0080
  OBJ_OPENLINK* = 0x0100
  OBJ_VALID_ATTRIBUTES* = 0x01F2

type
  NTSTATUS* = int32
  PNTSTATUS* = ptr int32
  UNICODE_STRING* {.final, pure.} = object
    Length*: USHORT
    MaximumLength*: USHORT
    Buffer*: PWSTR
  PUNICODE_STRING* = ptr UNICODE_STRING
  PCUNICODE_STRING* = ptr UNICODE_STRING
  STRING* {.final, pure.} = object
    Length*: USHORT
    MaximumLength*: USHORT
    Buffer*: PCHAR
  ANSI_STRING* = STRING
  OEM_STRING* = STRING
  PSTRING* = ptr STRING
  PANSI_STRING* = ptr STRING
  POEM_STRING* = ptr STRING
  PHYSICAL_ADDRESS* = LARGE_INTEGER
  PPHYSICAL_ADDRESS* = ptr LARGE_INTEGER
  SECTION_INHERIT* = int32
  OBJECT_ATTRIBUTES* {.final, pure.} = object
    Length*: ULONG
    RootDirectory*: HANDLE
    ObjectName*: PUNICODE_STRING
    Attributes*: ULONG
    SecurityDescriptor*: PVOID
    SecurityQualityOfService*: PVOID
  POBJECT_ATTRIBUTES* = ptr OBJECT_ATTRIBUTES

proc InitializeObjectAttributes*(p: ptr OBJECT_ATTRIBUTES, n: ptr UNICODE_STRING, a: uint32, r: HANDLE, s: pointer): void =
  p.Length = OBJECT_ATTRIBUTES.sizeof.ULONG
  p.RootDirectory = r
  p.Attributes = a
  p.ObjectName = n
  p.SecurityDescriptor = s
  p.SecurityQualityOfService = nil

proc NT_SUCCESS*(x: int32): bool =
  return x >= 0

# ext/ntsecapi.nim
const
  # MSV1_0_LOGON_SUBMIT_TYPE* = enum
  MsV1_0InteractiveLogon* = 2
  MsV1_0Lm20Logon* = 3
  MsV1_0NetworkLogon* = 4
  MsV1_0SubAuthLogon* = 5
  MsV1_0WorkstationUnlockLogon* = 7
  # MSV1_0_PROFILE_BUFFER_TYPE* = enum
  MsV1_0InteractiveProfile* = 2
  MsV1_0Lm20LogonProfile* = 3
  MsV1_0SmartCardProfile* = 4
  # MSV1_0_AVID* = enum
  MsvAvEOL* = 0
  MsvAvNbComputerName* = 1
  MsvAvNbDomainName* = 2
  MsvAvDnsComputerName* = 3
  MsvAvDnsDomainName* = 4
  # MSV1_0_PROTOCOL_MESSAGE_TYPE* = enum
  MsV1_0Lm20ChallengeRequest* = 0
  MsV1_0Lm20GetChallengeResponse* = 1
  MsV1_0EnumerateUsers* = 2
  MsV1_0GetUserInfo* = 3
  MsV1_0ReLogonUsers* = 4
  MsV1_0ChangePassword* = 5
  MsV1_0ChangeCachedPassword* = 6
  MsV1_0GenericPassthrough* = 7
  MsV1_0CacheLogon* = 8
  MsV1_0SubAuth* = 9
  MsV1_0DeriveCredential* = 10
  MsV1_0CacheLookup* = 11
  # POLICY_LSA_SERVER_ROLE* = enum
  PolicyServerRoleBackup* = 2
  PolicyServerRolePrimary* = 3
  # POLICY_SERVER_ENABLE_STATE* = enum
  PolicyServerEnabled* = 2
  PolicyServerDisabled* = 3
  # POLICY_INFORMATION_CLASS* = enum
  PolicyAuditLogInformation* = 1
  PolicyAuditEventsInformation* = 2
  PolicyPrimaryDomainInformation* = 3
  PolicyPdAccountInformation* = 4
  PolicyAccountDomainInformation* = 5
  PolicyLsaServerRoleInformation* = 6
  PolicyReplicaSourceInformation* = 7
  PolicyDefaultQuotaInformation* = 8
  PolicyModificationInformation* = 9
  PolicyAuditFullSetInformation* = 10
  PolicyAuditFullQueryInformation* = 11
  PolicyDnsDomainInformation* = 12
  PolicyEfsInformation* = 13
  # POLICY_AUDIT_EVENT_TYPE* = enum
  AuditCategorySystem* = 0
  AuditCategoryLogon* = 1
  AuditCategoryObjectAccess* = 2
  AuditCategoryPrivilegeUse* = 3
  AuditCategoryDetailedTracking* = 4
  AuditCategoryPolicyChange* = 5
  AuditCategoryAccountManagement* = 6
  AuditCategoryDirectoryServiceAccess* = 7
  AuditCategoryAccountLogon* = 8
  # POLICY_LOCAL_INFORMATION_CLASS* = enum
  PolicyLocalAuditEventsInformation* = 1
  PolicyLocalPdAccountInformation* = 2
  PolicyLocalAccountDomainInformation* = 3
  PolicyLocalLsaServerRoleInformation* = 4
  PolicyLocalReplicaSourceInformation* = 5
  PolicyLocalModificationInformation* = 6
  PolicyLocalAuditFullSetInformation* = 7
  PolicyLocalAuditFullQueryInformation* = 8
  PolicyLocalDnsDomainInformation* = 9
  PolicyLocalIPSecReferenceInformation* = 10
  PolicyLocalMachinePasswordInformation* = 11
  PolicyLocalQualityOfServiceInformation* = 12
  PolicyLocalPolicyLocationInformation* = 13
  # POLICY_DOMAIN_INFORMATION_CLASS* = enum
  PolicyDomainIPSecReferenceInformation* = 1
  PolicyDomainQualityOfServiceInformation* = 2
  PolicyDomainEfsInformation* = 3
  PolicyDomainPublicKeyInformation* = 4
  PolicyDomainPasswordPolicyInformation* = 5
  PolicyDomainLockoutInformation* = 6
  PolicyDomainKerberosTicketInformation* = 7
  # SECURITY_LOGON_TYPE* = enum
  Interactive* = 2
  Network* = 3
  Batch* = 4
  Service* = 5
  Proxy* = 6
  Unlock* = 7
  # TRUSTED_INFORMATION_CLASS* = enum
  TrustedDomainNameInformation* = 1
  TrustedControllersInformation* = 2
  TrustedPosixOffsetInformation* = 3
  TrustedPasswordInformation* = 4
  TrustedDomainInformationBasic* = 5
  TrustedDomainInformationEx* = 6
  TrustedDomainAuthInformation* = 7
  TrustedDomainFullInformation* = 8

const
  KERB_WRAP_NO_ENCRYPT* = -2147483647
  LOGON_GUEST* = 0x00000001
  LOGON_NOENCRYPTION* = 0x00000002
  LOGON_CACHED_ACCOUNT* = 0x00000004
  LOGON_USED_LM_PASSWORD* = 0x00000008
  LOGON_EXTRA_SIDS* = 0x00000020
  LOGON_SUBAUTH_SESSION_KEY* = 0x00000040
  LOGON_SERVER_TRUST_ACCOUNT* = 0x00000080
  LOGON_NTLMV2_ENABLED* = 0x00000100
  LOGON_RESOURCE_GROUPS* = 0x00000200
  LOGON_PROFILE_PATH_RETURNED* = 0x00000400
  LOGON_GRACE_LOGON* = 0x01000000
  LSA_MODE_PASSWORD_PROTECTED* = 1
  LSA_MODE_INDIVIDUAL_ACCOUNTS* = 2
  LSA_MODE_MANDATORY_ACCESS* = 3
  LSA_MODE_LOG_FULL* = 4
  MSV1_0_CHALLENGE_LENGTH* = 8

proc LSA_SUCCESS*(x: int32): bool =
  return x >= 0

type
  LSA_UNICODE_STRING* = UNICODE_STRING
  PLSA_UNICODE_STRING* = ptr UNICODE_STRING
  LSA_STRING* = STRING
  PLSA_STRING* = ptr STRING
  MSV1_0_LOGON_SUBMIT_TYPE* = int32
  PMSV1_0_LOGON_SUBMIT_TYPE* = ptr MSV1_0_LOGON_SUBMIT_TYPE
  MSV1_0_PROFILE_BUFFER_TYPE* = int32
  PMSV1_0_PROFILE_BUFFER_TYPE* = ptr MSV1_0_PROFILE_BUFFER_TYPE
  MSV1_0_AVID* = int32
  MSV1_0_PROTOCOL_MESSAGE_TYPE* = int32
  PMSV1_0_PROTOCOL_MESSAGE_TYPE* = ptr MSV1_0_PROTOCOL_MESSAGE_TYPE
  POLICY_LSA_SERVER_ROLE* = int32
  PPOLICY_LSA_SERVER_ROLE* = ptr POLICY_LSA_SERVER_ROLE
  POLICY_SERVER_ENABLE_STATE* = int32
  PPOLICY_SERVER_ENABLE_STATE* = ptr POLICY_SERVER_ENABLE_STATE
  POLICY_INFORMATION_CLASS* = int32
  PPOLICY_INFORMATION_CLASS* = ptr POLICY_INFORMATION_CLASS
  POLICY_AUDIT_EVENT_TYPE* = int32
  PPOLICY_AUDIT_EVENT_TYPE* = ptr POLICY_AUDIT_EVENT_TYPE
  POLICY_LOCAL_INFORMATION_CLASS* = int32
  PPOLICY_LOCAL_INFORMATION_CLASS* = ptr POLICY_LOCAL_INFORMATION_CLASS
  POLICY_DOMAIN_INFORMATION_CLASS* = int32
  PPOLICY_DOMAIN_INFORMATION_CLASS* = ptr POLICY_DOMAIN_INFORMATION_CLASS
  SECURITY_LOGON_TYPE* = int32
  PSECURITY_LOGON_TYPE* = ptr SECURITY_LOGON_TYPE
  TRUSTED_INFORMATION_CLASS* = int32
  PTRUSTED_INFORMATION_CLASS* = ptr TRUSTED_INFORMATION_CLASS
  DOMAIN_PASSWORD_INFORMATION* {.final, pure.} = object
    MinPasswordLength*: USHORT
    PasswordHistoryLength*: USHORT
    PasswordProperties*: ULONG
    MaxPasswordAge*: LARGE_INTEGER
    MinPasswordAge*: LARGE_INTEGER
  PDOMAIN_PASSWORD_INFORMATION* = ptr DOMAIN_PASSWORD_INFORMATION
  LSA_ENUMERATION_INFORMATION* {.final, pure.} = object
    Sid*: PSID
  PLSA_ENUMERATION_INFORMATION* = ptr LSA_ENUMERATION_INFORMATION
  LSA_OBJECT_ATTRIBUTES* = OBJECT_ATTRIBUTES
  PLSA_OBJECT_ATTRIBUTES* = ptr OBJECT_ATTRIBUTES
  LSA_TRUST_INFORMATION* {.final, pure.} = object
    Name*: LSA_UNICODE_STRING
    Sid*: PSID
  # TRUSTED_DOMAIN_INFORMATION_BASIC* = LSA_TRUST_INFORMATION
  PLSA_TRUST_INFORMATION* = ptr LSA_TRUST_INFORMATION
  PTRUSTED_DOMAIN_INFORMATION_BASIC* = ptr ptr LSA_TRUST_INFORMATION
  LSA_REFERENCED_DOMAIN_LIST* {.final, pure.} = object
    Entries*: ULONG
    Domains*: PLSA_TRUST_INFORMATION
  PLSA_REFERENCED_DOMAIN_LIST* = ptr LSA_REFERENCED_DOMAIN_LIST
  LSA_TRANSLATED_SID* {.final, pure.} = object
    Use*: SID_NAME_USE
    RelativeId*: ULONG
    DomainIndex*: LONG
  PLSA_TRANSLATED_SID* = ptr LSA_TRANSLATED_SID
  LSA_TRANSLATED_NAME* {.final, pure.} = object
    Use*: SID_NAME_USE
    Name*: LSA_UNICODE_STRING
    DomainIndex*: LONG
  PLSA_TRANSLATED_NAME* = ptr LSA_TRANSLATED_NAME
  TMSV1_0_INTERACTIVE_LOGON* {.final, pure.} = object # renamed from MSV1_0_INTERACTIVE_LOGON
    MessageType*: MSV1_0_LOGON_SUBMIT_TYPE
    LogonDomainName*: UNICODE_STRING
    UserName*: UNICODE_STRING
    Password*: UNICODE_STRING
  PMSV1_0_INTERACTIVE_LOGON* = ptr TMSV1_0_INTERACTIVE_LOGON
  TMSV1_0_INTERACTIVE_PROFILE* {.final, pure.} = object # renamed from MSV1_0_INTERACTIVE_PROFILE
    MessageType*: MSV1_0_PROFILE_BUFFER_TYPE
    LogonCount*: USHORT
    BadPasswordCount*: USHORT
    LogonTime*: LARGE_INTEGER
    LogoffTime*: LARGE_INTEGER
    KickOffTime*: LARGE_INTEGER
    PasswordLastSet*: LARGE_INTEGER
    PasswordCanChange*: LARGE_INTEGER
    PasswordMustChange*: LARGE_INTEGER
    LogonScript*: UNICODE_STRING
    HomeDirectory*: UNICODE_STRING
    FullName*: UNICODE_STRING
    ProfilePath*: UNICODE_STRING
    HomeDirectoryDrive*: UNICODE_STRING
    LogonServer*: UNICODE_STRING
    UserFlags*: ULONG
  PMSV1_0_INTERACTIVE_PROFILE* = ptr TMSV1_0_INTERACTIVE_PROFILE
  TMSV1_0_LM20_LOGON* {.final, pure.} = object # renamed from MSV1_0_LM20_LOGON
    MessageType*: MSV1_0_LOGON_SUBMIT_TYPE
    LogonDomainName*: UNICODE_STRING
    UserName*: UNICODE_STRING
    Workstation*: UNICODE_STRING
    ChallengeToClient*: array[MSV1_0_CHALLENGE_LENGTH, UCHAR]
    CaseSensitiveChallengeResponse*: STRING
    CaseInsensitiveChallengeResponse*: STRING
    ParameterControl*: ULONG
  PMSV1_0_LM20_LOGON* = ptr TMSV1_0_LM20_LOGON

const
  MICROSOFT_KERBEROS_NAME_A* = "Kerberos"
  MICROSOFT_KERBEROS_NAME_W* = "Kerberos"
  MSV1_0_PACKAGE_NAME* = "MICROSOFT_AUTHENTICATION_PACKAGE_V1_0"
  MSV1_0_PACKAGE_NAMEW* = "MICROSOFT_AUTHENTICATION_PACKAGE_V1_0"
  MSV1_0_ALLOW_SERVER_TRUST_ACCOUNT* = 32
  MSV1_0_ALLOW_WORKSTATION_TRUST_ACCOUNT* = 2048
  MSV1_0_CLEARTEXT_PASSWORD_ALLOWED* = 2
  MSV1_0_CRED_LM_PRESENT* = 1
  MSV1_0_CRED_NT_PRESENT* = 2
  MSV1_0_CRED_VERSION* = 0
  MSV1_0_DONT_TRY_GUEST_ACCOUNT* = 16
  MSV1_0_MAX_NTLM3_LIFE* = 1800
  MSV1_0_MAX_AVL_SIZE* = 64000
  MSV1_0_MNS_LOGON* = 16777216
  MSV1_0_LANMAN_SESSION_KEY_LENGTH* = 8
  MSV1_0_NTLM3_RESPONSE_LENGTH* = 16
  MSV1_0_NTLM3_OWF_LENGTH* = 16
  MSV1_0_OWF_PASSWORD_LENGTH* = 16
  MSV1_0_PACKAGE_NAMEW_LENGTH* = (MSV1_0_PACKAGE_NAMEW.sizeof - WCHAR.sizeof)
  MSV1_0_RETURN_USER_PARAMETERS* = 8
  MSV1_0_RETURN_PASSWORD_EXPIRY* = 64
  MSV1_0_RETURN_PROFILE_PATH* = 512
  MSV1_0_SUBAUTHENTICATION_DLL_EX* = 1048576
  MSV1_0_SUBAUTHENTICATION_DLL* = -16777216
  MSV1_0_SUBAUTHENTICATION_DLL_SHIFT* = 24
  MSV1_0_SUBAUTHENTICATION_DLL_RAS* = 2
  MSV1_0_SUBAUTHENTICATION_DLL_IIS* = 132
  MSV1_0_SUBAUTHENTICATION_FLAGS* = -16777216
  MSV1_0_TRY_GUEST_ACCOUNT_ONLY* = 256
  MSV1_0_TRY_SPECIFIED_DOMAIN_ONLY* = 1024
  MSV1_0_UPDATE_LOGON_STATISTICS* = 4
  MSV1_0_USE_CLIENT_CHALLENGE* = 128
  MSV1_0_USER_SESSION_KEY_LENGTH* = 16
  MSV1_0_SUBAUTHENTICATION_KEY* = r"System\CurrentControlSet\Control\Lsa\MSV1_0"
  MSV1_0_SUBAUTHENTICATION_VALUE* = "Auth"
  POLICY_VIEW_LOCAL_INFORMATION* = 0x0001
  POLICY_VIEW_AUDIT_INFORMATION* = 0x0002
  POLICY_GET_PRIVATE_INFORMATION* = 0x0004
  POLICY_TRUST_ADMIN* = 0x0008
  POLICY_CREATE_ACCOUNT* = 0x0010
  POLICY_CREATE_SECRET* = 0x0020
  POLICY_CREATE_PRIVILEGE* = 0x0040
  POLICY_SET_DEFAULT_QUOTA_LIMITS* = 0x0080
  POLICY_SET_AUDIT_REQUIREMENTS* = 0x0100
  POLICY_AUDIT_LOG_ADMIN* = 0x0200
  POLICY_SERVER_ADMIN* = 0x0400
  POLICY_LOOKUP_NAMES* = 0x0800
  POLICY_READ* = (STANDARD_RIGHTS_READ or 0x0006).ACCESS_MASK
  POLICY_WRITE* = (STANDARD_RIGHTS_WRITE or 0x07F8).ACCESS_MASK
  POLICY_EXECUTE* = (STANDARD_RIGHTS_EXECUTE or 0x0801).ACCESS_MASK
  POLICY_ALL_ACCESS* = (STANDARD_RIGHTS_REQUIRED or 0x0FFF).ACCESS_MASK
  POLICY_AUDIT_EVENT_UNCHANGED* = 0
  POLICY_AUDIT_EVENT_SUCCESS* = 1
  POLICY_AUDIT_EVENT_FAILURE* = 2
  POLICY_AUDIT_EVENT_NONE* = 4
  POLICY_AUDIT_EVENT_MASK* = 7
  POLICY_LOCATION_LOCAL* = 1
  POLICY_LOCATION_DS* = 2
  POLICY_MACHINE_POLICY_LOCAL* = 0
  POLICY_MACHINE_POLICY_DEFAULTED* = 1
  POLICY_MACHINE_POLICY_EXPLICIT* = 2
  POLICY_MACHINE_POLICY_UNKNOWN* = 0xFFFFFFFF'u32
  POLICY_QOS_SCHANEL_REQUIRED* = 0x0001
  POLICY_QOS_OUTBOUND_INTEGRITY* = 0x0002
  POLICY_QOS_OUTBOUND_CONFIDENTIALITY* = 0x0004
  POLICY_QOS_INBOUND_INTEGREITY* = 0x0008
  POLICY_QOS_INBOUND_CONFIDENTIALITY* = 0x0010
  POLICY_QOS_ALLOW_LOCAL_ROOT_CERT_STORE* = 0x0020
  POLICY_QOS_RAS_SERVER_ALLOWED* = 0x0040
  POLICY_QOS_DHCP_SERVER_ALLOWD* = 0x0080
  POLICY_KERBEROS_FORWARDABLE* = 1
  POLICY_KERBEROS_PROXYABLE* = 2
  POLICY_KERBEROS_RENEWABLE* = 4
  POLICY_KERBEROS_POSTDATEABLE* = 8
  SAM_PASSWORD_CHANGE_NOTIFY_ROUTINE* = "PasswordChangeNotify"
  SAM_INIT_NOTIFICATION_ROUTINE* = "InitializeChangeNotify"
  SAM_PASSWORD_FILTER_ROUTINE* = "PasswordFilter"
  SE_INTERACTIVE_LOGON_NAME* = "SeInteractiveLogonRight"
  SE_NETWORK_LOGON_NAME* = "SeNetworkLogonRight"
  SE_BATCH_LOGON_NAME* = "SeBatchLogonRight"
  SE_SERVICE_LOGON_NAME* = "SeServiceLogonRight"
  TRUST_ATTRIBUTE_NON_TRANSITIVE* = 1
  TRUST_ATTRIBUTE_UPLEVEL_ONLY* = 2
  TRUST_ATTRIBUTE_TREE_PARENT* = 4194304
  TRUST_ATTRIBUTES_VALID* = -16580609
  TRUST_AUTH_TYPE_NONE* = 0
  TRUST_AUTH_TYPE_NT4OWF* = 1
  TRUST_AUTH_TYPE_CLEAR* = 2
  TRUST_DIRECTION_DISABLED* = 0
  TRUST_DIRECTION_INBOUND* = 1
  TRUST_DIRECTION_OUTBOUND* = 2
  TRUST_DIRECTION_BIDIRECTIONAL* = 3
  TRUST_TYPE_DOWNLEVEL* = 1
  TRUST_TYPE_UPLEVEL* = 2
  TRUST_TYPE_MIT* = 3
  TRUST_TYPE_DCE* = 4

type
  TMSV1_0_SUBAUTH_LOGON* {.final, pure.} = object # renamed from MSV1_0_SUBAUTH_LOGON
    MessageType*: MSV1_0_LOGON_SUBMIT_TYPE
    LogonDomainName*: UNICODE_STRING
    UserName*: UNICODE_STRING
    Workstation*: UNICODE_STRING
    ChallengeToClient*: array[MSV1_0_CHALLENGE_LENGTH, UCHAR]
    AuthenticationInfo1*: STRING
    AuthenticationInfo2*: STRING
    ParameterControl*: ULONG
    SubAuthPackageId*: ULONG
  PMSV1_0_SUBAUTH_LOGON* = ptr TMSV1_0_SUBAUTH_LOGON
  TMSV1_0_LM20_LOGON_PROFILE* {.final, pure.} = object # renamed from MSV1_0_LM20_LOGON_PROFILE
    MessageType*: MSV1_0_PROFILE_BUFFER_TYPE
    KickOffTime*: LARGE_INTEGER
    LogoffTime*: LARGE_INTEGER
    UserFlags*: ULONG
    UserSessionKey*: array[MSV1_0_USER_SESSION_KEY_LENGTH, UCHAR]
    LogonDomainName*: UNICODE_STRING
    LanmanSessionKey*: array[MSV1_0_LANMAN_SESSION_KEY_LENGTH, UCHAR]
    LogonServer*: UNICODE_STRING
    UserParameters*: UNICODE_STRING
  PMSV1_0_LM20_LOGON_PROFILE* = ptr TMSV1_0_LM20_LOGON_PROFILE
  MSV1_0_SUPPLEMENTAL_CREDENTIAL* {.final, pure.} = object
    Version*: ULONG
    Flags*: ULONG
    LmPassword*: array[MSV1_0_OWF_PASSWORD_LENGTH, UCHAR]
    NtPassword*: array[MSV1_0_OWF_PASSWORD_LENGTH, UCHAR]
  PMSV1_0_SUPPLEMENTAL_CREDENTIAL* = ptr MSV1_0_SUPPLEMENTAL_CREDENTIAL
  MSV1_0_NTLM3_RESPONSE* {.final, pure.} = object
    Response*: array[MSV1_0_NTLM3_RESPONSE_LENGTH, UCHAR]
    RespType*: UCHAR
    HiRespType*: UCHAR
    Flags*: USHORT
    MsgWord*: ULONG
    TimeStamp*: ULONGLONG
    ChallengeFromClient*: array[MSV1_0_CHALLENGE_LENGTH, UCHAR]
    AvPairsOff*: ULONG
    Buffer*: array[1, UCHAR]
  PMSV1_0_NTLM3_RESPONSE* = ptr MSV1_0_NTLM3_RESPONSE
  MSV1_0_AV_PAIR* {.final, pure.} = object
    AvId*: USHORT
    AvLen*: USHORT
  PMSV1_0_AV_PAIR* = ptr MSV1_0_AV_PAIR
  MSV1_0_CHANGEPASSWORD_REQUEST* {.final, pure.} = object
    MessageType*: MSV1_0_PROTOCOL_MESSAGE_TYPE
    DomainName*: UNICODE_STRING
    AccountName*: UNICODE_STRING
    OldPassword*: UNICODE_STRING
    NewPassword*: UNICODE_STRING
    Impersonating*: BOOLEAN
  PMSV1_0_CHANGEPASSWORD_REQUEST* = ptr MSV1_0_CHANGEPASSWORD_REQUEST
  MSV1_0_CHANGEPASSWORD_RESPONSE* {.final, pure.} = object
    MessageType*: MSV1_0_PROTOCOL_MESSAGE_TYPE
    PasswordInfoValid*: BOOLEAN
    DomainPasswordInfo*: DOMAIN_PASSWORD_INFORMATION
  PMSV1_0_CHANGEPASSWORD_RESPONSE* = ptr MSV1_0_CHANGEPASSWORD_RESPONSE
  MSV1_0_SUBAUTH_REQUEST* {.final, pure.} = object
    MessageType*: MSV1_0_PROTOCOL_MESSAGE_TYPE
    SubAuthPackageId*: ULONG
    SubAuthInfoLength*: ULONG
    SubAuthSubmitBuffer*: PUCHAR
  PMSV1_0_SUBAUTH_REQUEST* = ptr MSV1_0_SUBAUTH_REQUEST
  MSV1_0_SUBAUTH_RESPONSE* {.final, pure.} = object
    MessageType*: MSV1_0_PROTOCOL_MESSAGE_TYPE
    SubAuthInfoLength*: ULONG
    SubAuthReturnBuffer*: PUCHAR
  PMSV1_0_SUBAUTH_RESPONSE* = ptr MSV1_0_SUBAUTH_RESPONSE

const
  # MSV1_0_NTLM3_INPUT_LENGTH* = (MSV1_0_NTLM3_RESPONSE.sizeof - MSV1_0_NTLM3_RESPONSE_LENGTH.int).SIZE_T
  MSV1_0_DERIVECRED_TYPE_SHA1* = 0

type
  MSV1_0_DERIVECRED_REQUEST* {.final, pure.} = object
    MessageType*: MSV1_0_PROTOCOL_MESSAGE_TYPE
    LogonId*: LUID
    DeriveCredType*: ULONG
    DeriveCredInfoLength*: ULONG
    DeriveCredSubmitBuffer*: array[1, UCHAR]
  PMSV1_0_DERIVECRED_REQUEST* = ptr MSV1_0_DERIVECRED_REQUEST
  MSV1_0_DERIVECRED_RESPONSE* {.final, pure.} = object
    MessageType*: MSV1_0_PROTOCOL_MESSAGE_TYPE
    DeriveCredInfoLength*: ULONG
    DeriveCredReturnBuffer*: array[1, UCHAR]
  PMSV1_0_DERIVECRED_RESPONSE* = ptr MSV1_0_DERIVECRED_RESPONSE
  LSA_ENUMERATION_HANDLE* = uint32
  LSA_OPERATIONAL_MODE* = uint32
  POLICY_AUDIT_EVENT_OPTIONS* = uint32
  PLSA_ENUMERATION_HANDLE* = ptr uint32
  PLSA_OPERATIONAL_MODE* = ptr uint32
  PPOLICY_AUDIT_EVENT_OPTIONS* = ptr uint32
  POLICY_PRIVILEGE_DEFINITION* {.final, pure.} = object
    Name*: LSA_UNICODE_STRING
    LocalValue*: LUID
  PPOLICY_PRIVILEGE_DEFINITION* = ptr POLICY_PRIVILEGE_DEFINITION
  POLICY_AUDIT_LOG_INFO* {.final, pure.} = object
    AuditLogPercentFull*: ULONG
    MaximumLogSize*: ULONG
    AuditRetentionPeriod*: LARGE_INTEGER
    AuditLogFullShutdownInProgress*: BOOLEAN
    TimeToShutdown*: LARGE_INTEGER
    NextAuditRecordId*: ULONG
  PPOLICY_AUDIT_LOG_INFO* = ptr POLICY_AUDIT_LOG_INFO
  POLICY_AUDIT_EVENTS_INFO* {.final, pure.} = object
    AuditingMode*: BOOLEAN
    EventAuditingOptions*: PPOLICY_AUDIT_EVENT_OPTIONS
    MaximumAuditEventCount*: ULONG
  PPOLICY_AUDIT_EVENTS_INFO* = ptr POLICY_AUDIT_EVENTS_INFO
  POLICY_ACCOUNT_DOMAIN_INFO* {.final, pure.} = object
    DomainName*: LSA_UNICODE_STRING
    DomainSid*: PSID
  PPOLICY_ACCOUNT_DOMAIN_INFO* = ptr POLICY_ACCOUNT_DOMAIN_INFO
  POLICY_PRIMARY_DOMAIN_INFO* {.final, pure.} = object
    Name*: LSA_UNICODE_STRING
    Sid*: PSID
  PPOLICY_PRIMARY_DOMAIN_INFO* = ptr POLICY_PRIMARY_DOMAIN_INFO
  POLICY_DNS_DOMAIN_INFO* {.final, pure.} = object
    Name*: LSA_UNICODE_STRING
    DnsDomainName*: LSA_UNICODE_STRING
    DnsTreeName*: LSA_UNICODE_STRING
    DomainGuid*: GUID
    Sid*: PSID
  PPOLICY_DNS_DOMAIN_INFO* = ptr POLICY_DNS_DOMAIN_INFO
  POLICY_PD_ACCOUNT_INFO* {.final, pure.} = object
    Name*: LSA_UNICODE_STRING
  PPOLICY_PD_ACCOUNT_INFO* = ptr POLICY_PD_ACCOUNT_INFO
  POLICY_LSA_SERVER_ROLE_INFO* {.final, pure.} = object
    LsaServerRole*: POLICY_LSA_SERVER_ROLE
  PPOLICY_LSA_SERVER_ROLE_INFO* = ptr POLICY_LSA_SERVER_ROLE_INFO
  POLICY_REPLICA_SOURCE_INFO* {.final, pure.} = object
    ReplicaSource*: LSA_UNICODE_STRING
    ReplicaAccountName*: LSA_UNICODE_STRING
  PPOLICY_REPLICA_SOURCE_INFO* = ptr POLICY_REPLICA_SOURCE_INFO
  POLICY_DEFAULT_QUOTA_INFO* {.final, pure.} = object
    QuotaLimits*: QUOTA_LIMITS
  PPOLICY_DEFAULT_QUOTA_INFO* = ptr POLICY_DEFAULT_QUOTA_INFO
  POLICY_MODIFICATION_INFO* {.final, pure.} = object
    ModifiedId*: LARGE_INTEGER
    DatabaseCreationTime*: LARGE_INTEGER
  PPOLICY_MODIFICATION_INFO* = ptr POLICY_MODIFICATION_INFO
  POLICY_AUDIT_FULL_SET_INFO* {.final, pure.} = object
    ShutDownOnFull*: BOOLEAN
  PPOLICY_AUDIT_FULL_SET_INFO* = ptr POLICY_AUDIT_FULL_SET_INFO
  POLICY_AUDIT_FULL_QUERY_INFO* {.final, pure.} = object
    ShutDownOnFull*: BOOLEAN
    LogIsFull*: BOOLEAN
  PPOLICY_AUDIT_FULL_QUERY_INFO* = ptr POLICY_AUDIT_FULL_QUERY_INFO
  POLICY_EFS_INFO* {.final, pure.} = object
    InfoLength*: ULONG
    EfsBlob*: PUCHAR
  PPOLICY_EFS_INFO* = ptr POLICY_EFS_INFO
  POLICY_LOCAL_IPSEC_REFERENCE_INFO* {.final, pure.} = object
    ObjectPath*: LSA_UNICODE_STRING
  PPOLICY_LOCAL_IPSEC_REFERENCE_INFO* = ptr POLICY_LOCAL_IPSEC_REFERENCE_INFO
  POLICY_LOCAL_MACHINE_PASSWORD_INFO* {.final, pure.} = object
    PasswordChangeInterval*: LARGE_INTEGER
  PPOLICY_LOCAL_MACHINE_PASSWORD_INFO* = ptr POLICY_LOCAL_MACHINE_PASSWORD_INFO
  POLICY_LOCAL_POLICY_LOCATION_INFO* {.final, pure.} = object
    PolicyLocation*: ULONG
  PPOLICY_LOCAL_POLICY_LOCATION_INFO* = ptr POLICY_LOCAL_POLICY_LOCATION_INFO
  POLICY_LOCAL_QUALITY_OF_SERVICE_INFO* {.final, pure.} = object
    QualityOfService*: ULONG
  POLICY_DOMAIN_QUALITY_OF_SERVICE_INFO* = POLICY_LOCAL_QUALITY_OF_SERVICE_INFO
  PPOLICY_LOCAL_QUALITY_OF_SERVICE_INFO* = ptr POLICY_LOCAL_QUALITY_OF_SERVICE_INFO
  PPOLICY_DOMAIN_QUALITY_OF_SERVICE_INFO* = ptr POLICY_LOCAL_QUALITY_OF_SERVICE_INFO
  POLICY_DOMAIN_PUBLIC_KEY_INFO* {.final, pure.} = object
    InfoLength*: ULONG
    PublicKeyInfo*: PUCHAR
  PPOLICY_DOMAIN_PUBLIC_KEY_INFO* = ptr POLICY_DOMAIN_PUBLIC_KEY_INFO
  POLICY_DOMAIN_LOCKOUT_INFO* {.final, pure.} = object
    LockoutDuration*: LARGE_INTEGER
    LockoutObservationWindow*: LARGE_INTEGER
    LockoutThreshold*: USHORT
  PPOLICY_DOMAIN_LOCKOUT_INFO* = ptr POLICY_DOMAIN_LOCKOUT_INFO
  POLICY_DOMAIN_PASSWORD_INFO* {.final, pure.} = object
    MinPasswordLength*: USHORT
    PasswordHistoryLength*: USHORT
    PasswordProperties*: ULONG
    MaxPasswordAge*: LARGE_INTEGER
    MinPasswordAge*: LARGE_INTEGER
  PPOLICY_DOMAIN_PASSWORD_INFO* = ptr POLICY_DOMAIN_PASSWORD_INFO
  POLICY_DOMAIN_KERBEROS_TICKET_INFO* {.final, pure.} = object
    AuthenticationOptions*: ULONG
    MinTicketAge*: LARGE_INTEGER
    MaxTicketAge*: LARGE_INTEGER
    MaxRenewAge*: LARGE_INTEGER
    ProxyLifetime*: LARGE_INTEGER
    ForceLogoff*: LARGE_INTEGER
  PPOLICY_DOMAIN_KERBEROS_TICKET_INFO* = ptr POLICY_DOMAIN_KERBEROS_TICKET_INFO
  LSA_HANDLE* = HANDLE
  PLSA_HANDLE* = ptr HANDLE
  TRUSTED_DOMAIN_NAME_INFO* {.final, pure.} = object
    Name*: LSA_UNICODE_STRING
  PTRUSTED_DOMAIN_NAME_INFO* = ptr TRUSTED_DOMAIN_NAME_INFO
  TRUSTED_CONTROLLERS_INFO* {.final, pure.} = object
    Entries*: ULONG
    Names*: PLSA_UNICODE_STRING
  PTRUSTED_CONTROLLERS_INFO* = ptr TRUSTED_CONTROLLERS_INFO
  TRUSTED_POSIX_OFFSET_INFO* {.final, pure.} = object
    Offset*: ULONG
  PTRUSTED_POSIX_OFFSET_INFO* = ptr TRUSTED_POSIX_OFFSET_INFO
  TRUSTED_PASSWORD_INFO* {.final, pure.} = object
    Password*: LSA_UNICODE_STRING
    OldPassword*: LSA_UNICODE_STRING
  PTRUSTED_PASSWORD_INFO* = ptr TRUSTED_PASSWORD_INFO
  TTRUSTED_DOMAIN_INFORMATION_EX* {.final, pure.} = object # renamed from TRUSTED_DOMAIN_INFORMATION_EX
    Name*: LSA_UNICODE_STRING
    FlatName*: LSA_UNICODE_STRING
    Sid*: PSID
    TrustDirection*: ULONG
    TrustType*: ULONG
    TrustAttributes*: ULONG
  PTRUSTED_DOMAIN_INFORMATION_EX* = ptr TTRUSTED_DOMAIN_INFORMATION_EX
  LSA_AUTH_INFORMATION* {.final, pure.} = object
    LastUpdateTime*: LARGE_INTEGER
    AuthType*: ULONG
    AuthInfoLength*: ULONG
    AuthInfo*: PUCHAR
  PLSA_AUTH_INFORMATION* = ptr LSA_AUTH_INFORMATION
  TTRUSTED_DOMAIN_AUTH_INFORMATION* {.final, pure.} = object # renamed from TRUSTED_DOMAIN_AUTH_INFORMATION
    IncomingAuthInfos*: ULONG
    IncomingAuthenticationInformation*: PLSA_AUTH_INFORMATION
    IncomingPreviousAuthenticationInformation*: PLSA_AUTH_INFORMATION
    OutgoingAuthInfos*: ULONG
    OutgoingAuthenticationInformation*: PLSA_AUTH_INFORMATION
    OutgoingPreviousAuthenticationInformation*: PLSA_AUTH_INFORMATION
  PTRUSTED_DOMAIN_AUTH_INFORMATION* = ptr TTRUSTED_DOMAIN_AUTH_INFORMATION
  TTRUSTED_DOMAIN_FULL_INFORMATION* {.final, pure.} = object # renamed from TRUSTED_DOMAIN_FULL_INFORMATION
    Information*: TTRUSTED_DOMAIN_INFORMATION_EX
    PosixOffset*: TRUSTED_POSIX_OFFSET_INFO
    AuthInformation*: TTRUSTED_DOMAIN_AUTH_INFORMATION
  PTRUSTED_DOMAIN_FULL_INFORMATION* = ptr TTRUSTED_DOMAIN_FULL_INFORMATION

proc LsaAddAccountRights*(P1: LSA_HANDLE, P2: PSID, P3: PLSA_UNICODE_STRING, P4: ULONG): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaCallAuthenticationPackage*(P1: HANDLE, P2: ULONG, P3: PVOID, P4: ULONG, P5: ptr PVOID, P6: PULONG, P7: PNTSTATUS): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaClose*(P1: LSA_HANDLE): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaConnectUntrusted*(P1: PHANDLE): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaCreateTrustedDomainEx*(P1: LSA_HANDLE, P2: PTRUSTED_DOMAIN_INFORMATION_EX, P3: PTRUSTED_DOMAIN_AUTH_INFORMATION, P4: ACCESS_MASK, P5: PLSA_HANDLE): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaDeleteTrustedDomain*(P1: LSA_HANDLE, P2: PSID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaDeregisterLogonProcess*(P1: HANDLE): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaEnumerateAccountRights*(P1: LSA_HANDLE, P2: PSID, P3: ptr PLSA_UNICODE_STRING, P4: PULONG): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaEnumerateAccountsWithUserRight*(P1: LSA_HANDLE, P2: PLSA_UNICODE_STRING, P3: ptr PVOID, P4: PULONG): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaEnumerateTrustedDomains*(P1: LSA_HANDLE, P2: PLSA_ENUMERATION_HANDLE, P3: ptr PVOID, P4: ULONG, P5: PULONG): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaEnumerateTrustedDomainsEx*(P1: LSA_HANDLE, P2: PLSA_ENUMERATION_HANDLE, P3: TRUSTED_INFORMATION_CLASS, P4: ptr PVOID, P5: ULONG, P6: PULONG): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaFreeMemory*(P1: PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaFreeReturnBuffer*(P1: PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaLogonUser*(P1: HANDLE, P2: PLSA_STRING, P3: SECURITY_LOGON_TYPE, P4: ULONG, P5: PVOID, P6: ULONG, P7: PTOKEN_GROUPS, P8: PTOKEN_SOURCE, P9: ptr PVOID, P10: PULONG, P11: PLUID, P12: PHANDLE, P13: PQUOTA_LIMITS, P14: PNTSTATUS): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaLookupAuthenticationPackage*(P1: HANDLE, P2: PLSA_STRING, P3: PULONG): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaLookupNames*(P1: LSA_HANDLE, P2: ULONG, P3: PLSA_UNICODE_STRING, P4: ptr PLSA_REFERENCED_DOMAIN_LIST, P5: ptr PLSA_TRANSLATED_SID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaLookupSids*(P1: LSA_HANDLE, P2: ULONG, P3: ptr PSID, P4: ptr PLSA_REFERENCED_DOMAIN_LIST, P5: ptr PLSA_TRANSLATED_NAME): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaNtStatusToWinError*(P1: NTSTATUS): ULONG {.winapi, dynlib: "advapi32", importc.}
proc LsaOpenPolicy*(P1: PLSA_UNICODE_STRING, P2: PLSA_OBJECT_ATTRIBUTES, P3: ACCESS_MASK, P4: PLSA_HANDLE): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaQueryDomainInformationPolicy*(P1: LSA_HANDLE, P2: POLICY_DOMAIN_INFORMATION_CLASS, P3: ptr PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaQueryInformationPolicy*(P1: LSA_HANDLE, P2: POLICY_INFORMATION_CLASS, P3: ptr PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaQueryLocalInformationPolicy*(P1: LSA_HANDLE, P2: POLICY_LOCAL_INFORMATION_CLASS, P3: ptr PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaQueryTrustedDomainInfo*(P1: LSA_HANDLE, P2: PSID, P3: TRUSTED_INFORMATION_CLASS, P4: ptr PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaQueryTrustedDomainInfoByName*(P1: LSA_HANDLE, P2: PLSA_UNICODE_STRING, P3: TRUSTED_INFORMATION_CLASS, P4: ptr PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaRegisterLogonProcess*(P1: PLSA_STRING, P2: PHANDLE, P3: PLSA_OPERATIONAL_MODE): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaRemoveAccountRights*(P1: LSA_HANDLE, P2: PSID, P3: BOOLEAN, P4: PLSA_UNICODE_STRING, P5: ULONG): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaRetrievePrivateData*(P1: LSA_HANDLE, P2: PLSA_UNICODE_STRING, P3: ptr PLSA_UNICODE_STRING): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaSetDomainInformationPolicy*(P1: LSA_HANDLE, P2: POLICY_DOMAIN_INFORMATION_CLASS, P3: PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaSetInformationPolicy*(P1: LSA_HANDLE, P2: POLICY_INFORMATION_CLASS, P3: PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaSetLocalInformationPolicy*(P1: LSA_HANDLE, P2: POLICY_LOCAL_INFORMATION_CLASS, P3: PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaSetTrustedDomainInformation*(P1: LSA_HANDLE, P2: PSID, P3: TRUSTED_INFORMATION_CLASS, P4: PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaSetTrustedDomainInfoByName*(P1: LSA_HANDLE, P2: PLSA_UNICODE_STRING, P3: TRUSTED_INFORMATION_CLASS, P4: PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaStorePrivateData*(P1: LSA_HANDLE, P2: PLSA_UNICODE_STRING, P3: PLSA_UNICODE_STRING): NTSTATUS {.winapi, dynlib: "advapi32", importc.}

type
  PSAM_PASSWORD_NOTIFICATION_ROUTINE* = proc (P1: PUNICODE_STRING, P2: ULONG, P3: PUNICODE_STRING): NTSTATUS {.cdecl.}
  PSAM_INIT_NOTIFICATION_ROUTINE* = proc (): BOOLEAN {.cdecl.}
  PSAM_PASSWORD_FILTER_ROUTINE* = proc (P1: PUNICODE_STRING, P2: PUNICODE_STRING, P3: PUNICODE_STRING, P4: BOOLEAN): BOOLEAN {.cdecl.}

# ext/powrprof.nim

const
  EnableSysTrayBatteryMeter* = 1
  EnableMultiBatteryDisplay* = 2
  EnablePasswordLogon* = 4
  EnableWakeOnRing* = 8
  EnableVideoDimDisplay* = 16
  NEWSCHEME* = 0xFFFFFFFF'u32

type
  GLOBAL_MACHINE_POWER_POLICY* {.final, pure.} = object
    Revision*: ULONG
    LidOpenWakeAc*: SYSTEM_POWER_STATE
    LidOpenWakeDc*: SYSTEM_POWER_STATE
    BroadcastCapacityResolution*: ULONG
  PGLOBAL_MACHINE_POWER_POLICY* = ptr GLOBAL_MACHINE_POWER_POLICY
  GLOBAL_USER_POWER_POLICY* {.final, pure.} = object
    Revision*: ULONG
    PowerButtonAc*: POWER_ACTION_POLICY
    PowerButtonDc*: POWER_ACTION_POLICY
    SleepButtonAc*: POWER_ACTION_POLICY
    SleepButtonDc*: POWER_ACTION_POLICY
    LidCloseAc*: POWER_ACTION_POLICY
    LidCloseDc*: POWER_ACTION_POLICY
    DischargePolicy*: array[NUM_DISCHARGE_POLICIES, SYSTEM_POWER_LEVEL]
    GlobalFlags*: ULONG
  PGLOBAL_USER_POWER_POLICY* = ptr GLOBAL_USER_POWER_POLICY
  GLOBAL_POWER_POLICY* {.final, pure.} = object
    user*: GLOBAL_USER_POWER_POLICY
    mach*: GLOBAL_MACHINE_POWER_POLICY
  PGLOBAL_POWER_POLICY* = ptr GLOBAL_POWER_POLICY
  MACHINE_POWER_POLICY* {.final, pure.} = object
    Revision*: ULONG
    MinSleepAc*: SYSTEM_POWER_STATE
    MinSleepDc*: SYSTEM_POWER_STATE
    ReducedLatencySleepAc*: SYSTEM_POWER_STATE
    ReducedLatencySleepDc*: SYSTEM_POWER_STATE
    DozeTimeoutAc*: ULONG
    DozeTimeoutDc*: ULONG
    DozeS4TimeoutAc*: ULONG
    DozeS4TimeoutDc*: ULONG
    MinThrottleAc*: UCHAR
    MinThrottleDc*: UCHAR
    pad1*: array[2, UCHAR]
    OverThrottledAc*: POWER_ACTION_POLICY
    OverThrottledDc*: POWER_ACTION_POLICY
  PMACHINE_POWER_POLICY* = ptr MACHINE_POWER_POLICY
  MACHINE_PROCESSOR_POWER_POLICY* {.final, pure.} = object
    Revision*: ULONG
    ProcessorPolicyAc*: PROCESSOR_POWER_POLICY
    ProcessorPolicyDc*: PROCESSOR_POWER_POLICY
  PMACHINE_PROCESSOR_POWER_POLICY* = ptr MACHINE_PROCESSOR_POWER_POLICY
  USER_POWER_POLICY* {.final, pure.} = object
    Revision*: ULONG
    IdleAc*: POWER_ACTION_POLICY
    IdleDc*: POWER_ACTION_POLICY
    IdleTimeoutAc*: ULONG
    IdleTimeoutDc*: ULONG
    IdleSensitivityAc*: UCHAR
    IdleSensitivityDc*: UCHAR
    ThrottlePolicyAc*: UCHAR
    ThrottlePolicyDc*: UCHAR
    MaxSleepAc*: SYSTEM_POWER_STATE
    MaxSleepDc*: SYSTEM_POWER_STATE
    Reserved*: array[2, ULONG]
    VideoTimeoutAc*: ULONG
    VideoTimeoutDc*: ULONG
    SpindownTimeoutAc*: ULONG
    SpindownTimeoutDc*: ULONG
    OptimizeForPowerAc*: BOOLEAN
    OptimizeForPowerDc*: BOOLEAN
    FanThrottleToleranceAc*: UCHAR
    FanThrottleToleranceDc*: UCHAR
    ForcedThrottleAc*: UCHAR
    ForcedThrottleDc*: UCHAR
  PUSER_POWER_POLICY* = ptr USER_POWER_POLICY
  POWER_POLICY* {.final, pure.} = object
    user*: USER_POWER_POLICY
    mach*: MACHINE_POWER_POLICY
  PPOWER_POLICY* = ptr POWER_POLICY

type
  PWRSCHEMESENUMPROC* = proc (P1: UINT, P2: DWORD, P3: LPTSTR, P4: DWORD, P5: LPTSTR, P6: PPOWER_POLICY, P7: LPARAM): BOOLEAN {.stdcall.}
  PFNNTINITIATEPWRACTION* = proc (P1: POWER_ACTION, P2: SYSTEM_POWER_STATE, P3: ULONG, P4: BOOLEAN): BOOLEAN {.stdcall.}

proc CallNtPowerInformation*(P1: POWER_INFORMATION_LEVEL, P2: PVOID, P3: ULONG, P4: PVOID, P5: ULONG): NTSTATUS {.winapi, dynlib: "powrprof", importc.}
proc CanUserWritePwrScheme*(): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc DeletePwrScheme*(P1: UINT): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc EnumPwrSchemes*(P1: PWRSCHEMESENUMPROC, P2: LPARAM): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc GetActivePwrScheme*(P1: PUINT): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc GetCurrentPowerPolicies*(P1: PGLOBAL_POWER_POLICY, P2: PPOWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc GetPwrCapabilities*(P1: PSYSTEM_POWER_CAPABILITIES): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc GetPwrDiskSpindownRange*(P1: PUINT, P2: PUINT): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc IsAdminOverrideActive*(P1: PADMINISTRATOR_POWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc IsPwrHibernateAllowed*(): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc IsPwrShutdownAllowed*(): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc IsPwrSuspendAllowed*(): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc ReadGlobalPwrPolicy*(P1: PGLOBAL_POWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc ReadProcessorPwrScheme*(P1: UINT, P2: PMACHINE_PROCESSOR_POWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc ReadPwrScheme*(P1: UINT, P2: PPOWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc SetActivePwrScheme*(P1: UINT, P2: PGLOBAL_POWER_POLICY, P3: PPOWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc SetSuspendState*(P1: BOOLEAN, P2: BOOLEAN, P3: BOOLEAN): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc WriteGlobalPwrPolicy*(P1: PGLOBAL_POWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc WriteProcessorPwrScheme*(P1: UINT, P2: PMACHINE_PROCESSOR_POWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc ValidatePowerPolicies*(P1: PGLOBAL_POWER_POLICY, P2: PPOWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc WritePwrScheme*(P1: PUINT, P2: LPTSTR, P3: LPTSTR, P4: PPOWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}

# ext/psapi.nim

type
  MODULEINFO* {.final, pure.} = object
    lpBaseOfDll*: LPVOID
    SizeOfImage*: DWORD
    EntryPoint*: LPVOID
  LPMODULEINFO* = ptr MODULEINFO
  PSAPI_WS_WATCH_INFORMATION* {.final, pure.} = object
    FaultingPc*: LPVOID
    FaultingVa*: LPVOID
  PPSAPI_WS_WATCH_INFORMATION* = ptr PSAPI_WS_WATCH_INFORMATION
  PSAPI_WS_WATCH_INFORMATION_EX* {.final, pure.} = object
    BasicInfo*: PSAPI_WS_WATCH_INFORMATION
    FaultingThreadId*: ULONG_PTR
    Flags*: ULONG_PTR
  PPSAPI_WS_WATCH_INFORMATION_EX* = ptr PSAPI_WS_WATCH_INFORMATION_EX
  PROCESS_MEMORY_COUNTERS* {.final, pure.} = object
    cb*: DWORD
    PageFaultCount*: DWORD
    PeakWorkingSetSize*: DWORD
    WorkingSetSize*: DWORD
    QuotaPeakPagedPoolUsage*: DWORD
    QuotaPagedPoolUsage*: DWORD
    QuotaPeakNonPagedPoolUsage*: DWORD
    QuotaNonPagedPoolUsage*: DWORD
    PagefileUsage*: DWORD
    PeakPagefileUsage*: DWORD
  PPROCESS_MEMORY_COUNTERS* = ptr PROCESS_MEMORY_COUNTERS
  PERFORMANCE_INFORMATION* {.final, pure.} = object
    cb*: DWORD
    CommitTotal*: SIZE_T
    CommitLimit*: SIZE_T
    CommitPeak*: SIZE_T
    PhysicalTotal*: SIZE_T
    PhysicalAvailable*: SIZE_T
    SystemCache*: SIZE_T
    KernelTotal*: SIZE_T
    KernelPaged*: SIZE_T
    KernelNonpaged*: SIZE_T
    PageSize*: SIZE_T
    HandleCount*: DWORD
    ProcessCount*: DWORD
    ThreadCount*: DWORD
  PPERFORMANCE_INFORMATION* = ptr PERFORMANCE_INFORMATION
  ENUM_PAGE_FILE_INFORMATION* {.final, pure.} = object
    cb*: DWORD
    Reserved*: DWORD
    TotalSize*: SIZE_T
    TotalInUse*: SIZE_T
    PeakUsage*: SIZE_T
  PENUM_PAGE_FILE_INFORMATION* = ptr ENUM_PAGE_FILE_INFORMATION

when not defined(winansi):
  type
    PENUM_PAGE_FILE_CALLBACK* = proc (P1: LPVOID, P2: PENUM_PAGE_FILE_INFORMATION, P3: LPCWSTR): BOOL {.stdcall.}

else:
  type
    PENUM_PAGE_FILE_CALLBACK* = proc (P1: LPVOID, P2: PENUM_PAGE_FILE_INFORMATION, P3: LPCSTR): BOOL {.stdcall.}

proc EnumProcesses*(P1: ptr DWORD, P2: DWORD, P3: ptr DWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc GetProcessImageFileNameA*(P1: HANDLE, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetProcessImageFileNameW*(P1: HANDLE, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc EnumProcessModules*(P1: HANDLE, P2: ptr HMODULE, P3: DWORD, P4: LPDWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc EnumProcessModulesEx*(P1: HANDLE, P2: ptr HMODULE, P3: DWORD, P4: LPDWORD, P5: DWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc GetModuleBaseNameA*(P1: HANDLE, P2: HMODULE, P3: LPSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetModuleBaseNameW*(P1: HANDLE, P2: HMODULE, P3: LPWSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetModuleFileNameExA*(P1: HANDLE, P2: HMODULE, P3: LPSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetModuleFileNameExW*(P1: HANDLE, P2: HMODULE, P3: LPWSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetModuleInformation*(P1: HANDLE, P2: HMODULE, P3: LPMODULEINFO, P4: DWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc EnumDeviceDrivers*(P1: ptr LPVOID, P2: DWORD, P3: LPDWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc GetDeviceDriverBaseNameA*(P1: LPVOID, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetDeviceDriverBaseNameW*(P1: LPVOID, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetDeviceDriverFileNameA*(P1: LPVOID, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetDeviceDriverFileNameW*(P1: LPVOID, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetProcessMemoryInfo*(P1: HANDLE, P2: PPROCESS_MEMORY_COUNTERS, P3: DWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc EmptyWorkingSet*(P1: HANDLE): BOOL {.winapi, dynlib: "psapi", importc.}
proc GetWsChanges*(P1: HANDLE, P2: PPSAPI_WS_WATCH_INFORMATION, P3: DWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc GetWsChangesEx*(P1: HANDLE, P2: PPSAPI_WS_WATCH_INFORMATION_EX, P3: DWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc InitializeProcessForWsWatch*(P1: HANDLE): BOOL {.winapi, dynlib: "psapi", importc.}
proc QueryWorkingSet*(P1: HANDLE, P2: PVOID, P3: DWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc QueryWorkingSetEx*(P1: HANDLE, P2: PVOID, P3: DWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc GetMappedFileNameW*(P1: HANDLE, P2: LPVOID, P3: LPWSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetMappedFileNameA*(P1: HANDLE, P2: LPVOID, P3: LPSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetPerformanceInfo*(P1: PPERFORMANCE_INFORMATION, P2: DWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc EnumPageFilesW*(P1: PENUM_PAGE_FILE_CALLBACK, P2: LPVOID): BOOL {.winapi, dynlib: "psapi", importc.}
proc EnumPageFilesA*(P1: PENUM_PAGE_FILE_CALLBACK, P2: LPVOID): BOOL {.winapi, dynlib: "psapi", importc.}

when not defined(winansi):
  proc GetModuleBaseName*(P1: HANDLE, P2: HMODULE, P3: LPWSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetModuleBaseNameW".}
  proc GetModuleFileNameEx*(P1: HANDLE, P2: HMODULE, P3: LPWSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetModuleFileNameExW".}
  proc GetMappedFileName*(P1: HANDLE, P2: LPVOID, P3: LPWSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetMappedFileNameW".}
  proc GetDeviceDriverBaseName*(P1: LPVOID, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetDeviceDriverBaseNameW".}
  proc GetDeviceDriverFileName*(P1: LPVOID, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetDeviceDriverFileNameW".}
  proc EnumPageFiles*(P1: PENUM_PAGE_FILE_CALLBACK, P2: LPVOID): BOOL {.winapi, dynlib: "psapi", importc: "EnumPageFilesW".}
  proc GetProcessImageFileName*(P1: HANDLE, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetProcessImageFileNameW".}

else:
  proc GetModuleBaseName*(P1: HANDLE, P2: HMODULE, P3: LPSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetModuleBaseNameA".}
  proc GetModuleFileNameEx*(P1: HANDLE, P2: HMODULE, P3: LPSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetModuleFileNameExA".}
  proc GetMappedFileName*(P1: HANDLE, P2: LPVOID, P3: LPSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetMappedFileNameA".}
  proc GetDeviceDriverBaseName*(P1: LPVOID, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetDeviceDriverBaseNameA".}
  proc GetDeviceDriverFileName*(P1: LPVOID, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetDeviceDriverFileNameA".}
  proc EnumPageFiles*(P1: PENUM_PAGE_FILE_CALLBACK, P2: LPVOID): BOOL {.winapi, dynlib: "psapi", importc: "EnumPageFilesA".}
  proc GetProcessImageFileName*(P1: HANDLE, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetProcessImageFileNameA".}

# ext/wincrypt.nim

type
  ALG_ID* = UINT

const
  MS_DEF_PROV* = "Microsoft Base Cryptographic Provider v1.0"
  MS_ENHANCED_PROV* = "Microsoft Enhanced Cryptographic Provider v1.0"
  MS_STRONG_PROV* = "Microsoft Strong Cryptographic Provider"
  MS_DEF_RSA_SIG_PROV* = "Microsoft RSA Signature Cryptographic Provider"
  MS_DEF_RSA_SCHANNEL_PROV* = "Microsoft RSA SChannel Cryptographic Provider"
  MS_DEF_DSS_PROV* = "Microsoft Base DSS Cryptographic Provider"
  MS_DEF_DSS_DH_PROV* = "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
  MS_ENH_DSS_DH_PROV* = "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
  MS_DEF_DH_SCHANNEL_PROV* = "Microsoft DH SChannel Cryptographic Provider"
  MS_SCARD_PROV* = "Microsoft Base Smart Card Crypto Provider"
  MS_ENH_RSA_AES_PROV* = "Microsoft Enhanced RSA and AES Cryptographic Provider"

proc GET_ALG_CLASS*(x: ALG_ID): ALG_ID = x and 0xE000
proc GET_ALG_TYPE*(x: ALG_ID): ALG_ID = x and 0x1E00
proc GET_ALG_SID*(x: ALG_ID): ALG_ID = x and 0x01FF

const
  ALG_CLASS_ANY* = 0
  ALG_CLASS_SIGNATURE* = 0x2000
  ALG_CLASS_MSG_ENCRYPT* = 0x4000
  ALG_CLASS_DATA_ENCRYPT* = 0x6000
  ALG_CLASS_HASH* = 0x8000
  ALG_CLASS_KEY_EXCHANGE* = 0xA000
  ALG_CLASS_ALL* = 0xE000
  ALG_TYPE_ANY* = 0
  ALG_TYPE_DSS* = 0x0200
  ALG_TYPE_RSA* = 0x0400
  ALG_TYPE_BLOCK* = 0x0600
  ALG_TYPE_STREAM* = 0x0800
  ALG_TYPE_DH* = 0x0A00
  ALG_TYPE_SECURECHANNEL* = 0x0C00
  ALG_SID_ANY* = 0
  ALG_SID_RSA_ANY* = 0
  ALG_SID_RSA_PKCS* = 1
  ALG_SID_RSA_MSATWORK* = 2
  ALG_SID_RSA_ENTRUST* = 3
  ALG_SID_RSA_PGP* = 4
  ALG_SID_DSS_ANY* = 0
  ALG_SID_DSS_PKCS* = 1
  ALG_SID_DSS_DMS* = 2
  ALG_SID_DES* = 1
  ALG_SID_3DES* = 3
  ALG_SID_DESX* = 4
  ALG_SID_IDEA* = 5
  ALG_SID_CAST* = 6
  ALG_SID_SAFERSK64* = 7
  ALG_SID_SAFERSK128* = 8
  ALG_SID_3DES_112* = 9
  ALG_SID_SKIPJACK* = 10
  ALG_SID_TEK* = 11
  ALG_SID_CYLINK_MEK* = 12
  ALG_SID_RC5* = 13
  ALG_SID_RC2* = 2
  ALG_SID_RC4* = 1
  ALG_SID_SEAL* = 2
  ALG_SID_MD2* = 1
  ALG_SID_MD4* = 2
  ALG_SID_MD5* = 3
  ALG_SID_SHA* = 4
  ALG_SID_MAC* = 5
  ALG_SID_RIPEMD* = 6
  ALG_SID_RIPEMD160* = 7
  ALG_SID_SSL3SHAMD5* = 8
  ALG_SID_HMAC* = 9
  ALG_SID_TLS1PRF* = 10
  ALG_SID_AES_128* = 14
  ALG_SID_AES_192* = 15
  ALG_SID_AES_256* = 16
  ALG_SID_AES* = 17
  ALG_SID_EXAMPLE* = 80
  CALG_MD2* = (ALG_CLASS_HASH or ALG_TYPE_ANY or ALG_SID_MD2).ALG_ID
  CALG_MD4* = (ALG_CLASS_HASH or ALG_TYPE_ANY or ALG_SID_MD4).ALG_ID
  CALG_MD5* = (ALG_CLASS_HASH or ALG_TYPE_ANY or ALG_SID_MD5).ALG_ID
  CALG_SHA* = (ALG_CLASS_HASH or ALG_TYPE_ANY or ALG_SID_SHA).ALG_ID
  CALG_SHA1* = CALG_SHA.ALG_ID
  CALG_MAC* = (ALG_CLASS_HASH or ALG_TYPE_ANY or ALG_SID_MAC).ALG_ID
  CALG_3DES* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or 3).ALG_ID
  CALG_CYLINK_MEK* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or 12).ALG_ID
  CALG_SKIPJACK* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or 10).ALG_ID
  CALG_KEA_KEYX* = (ALG_CLASS_KEY_EXCHANGE or ALG_TYPE_STREAM or ALG_TYPE_DSS or 4).ALG_ID
  CALG_RSA_SIGN* = (ALG_CLASS_SIGNATURE or ALG_TYPE_RSA or ALG_SID_RSA_ANY).ALG_ID
  CALG_DSS_SIGN* = (ALG_CLASS_SIGNATURE or ALG_TYPE_DSS or ALG_SID_DSS_ANY).ALG_ID
  CALG_RSA_KEYX* = (ALG_CLASS_KEY_EXCHANGE or ALG_TYPE_RSA or ALG_SID_RSA_ANY).ALG_ID
  CALG_DES* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or ALG_SID_DES).ALG_ID
  CALG_RC2* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or ALG_SID_RC2).ALG_ID
  CALG_RC4* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_STREAM or ALG_SID_RC4).ALG_ID
  CALG_SEAL* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_STREAM or ALG_SID_SEAL).ALG_ID
  CALG_DH_EPHEM* = (ALG_CLASS_KEY_EXCHANGE or ALG_TYPE_STREAM or ALG_TYPE_DSS or ALG_SID_DSS_DMS).ALG_ID
  CALG_DESX* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or ALG_SID_DESX).ALG_ID
  CALG_TLS1PRF* = (ALG_CLASS_HASH or ALG_TYPE_ANY or ALG_SID_TLS1PRF).ALG_ID
  CALG_AES_128* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or ALG_SID_AES_128).ALG_ID
  CALG_AES_192* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or ALG_SID_AES_192).ALG_ID
  CALG_AES_256* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or ALG_SID_AES_256).ALG_ID
  CALG_AES* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or ALG_SID_AES).ALG_ID
  CRYPT_VERIFYCONTEXT* = -268435456
  CRYPT_NEWKEYSET* = 8
  CRYPT_DELETEKEYSET* = 16
  CRYPT_MACHINE_KEYSET* = 32
  CRYPT_SILENT* = 64
  CRYPT_EXPORTABLE* = 1
  CRYPT_USER_PROTECTED* = 2
  CRYPT_CREATE_SALT* = 4
  CRYPT_UPDATE_KEY* = 8
  SIMPLEBLOB* = 1
  PUBLICKEYBLOB* = 6
  PRIVATEKEYBLOB* = 7
  PLAINTEXTKEYBLOB* = 8
  OPAQUEKEYBLOB* = 9
  PUBLICKEYBLOBEX* = 10
  SYMMETRICWRAPKEYBLOB* = 11
  AT_KEYEXCHANGE* = 1
  AT_SIGNATURE* = 2
  CRYPT_USERDATA* = 1
  PKCS5_PADDING* = 1
  CRYPT_MODE_CBC* = 1
  CRYPT_MODE_ECB* = 2
  CRYPT_MODE_OFB* = 3
  CRYPT_MODE_CFB* = 4
  CRYPT_MODE_CTS* = 5
  CRYPT_MODE_CBCI* = 6
  CRYPT_MODE_CFBP* = 7
  CRYPT_MODE_OFBP* = 8
  CRYPT_MODE_CBCOFM* = 9
  CRYPT_MODE_CBCOFMI* = 10
  # CRYPT_ENCRYPT* = 1
  # CRYPT_DECRYPT* = 2
  CRYPT_EXPORT* = 4
  CRYPT_READ* = 8
  CRYPT_WRITE* = 16
  CRYPT_MAC* = 32
  HP_ALGID* = 1
  HP_HASHVAL* = 2
  HP_HASHSIZE* = 4
  HP_HMAC_INFO* = 5
  CRYPT_FAILED* = FALSE
  CRYPT_SUCCEED* = TRUE

template RCRYPT_SUCCEEDED*(r: untyped): untyped = ((r) == CRYPT_SUCCEED)
template RCRYPT_FAILED*(r: untyped): untyped = ((r) == CRYPT_FAILED)

const
  PP_ENUMALGS* = 1
  PP_ENUMCONTAINERS* = 2
  PP_IMPTYPE* = 3
  PP_NAME* = 4
  PP_VERSION* = 5
  PP_CONTAINER* = 6
  PP_CHANGE_PASSWORD* = 7
  PP_KEYSET_SEC_DESCR* = 8
  PP_CERTCHAIN* = 9
  PP_KEY_TYPE_SUBTYPE* = 10
  PP_PROVTYPE* = 16
  PP_KEYSTORAGE* = 17
  PP_APPLI_CERT* = 18
  PP_SYM_KEYSIZE* = 19
  PP_SESSION_KEYSIZE* = 20
  PP_UI_PROMPT* = 21
  PP_ENUMALGS_EX* = 22
  PP_ENUMMANDROOTS* = 25
  PP_ENUMELECTROOTS* = 26
  PP_KEYSET_TYPE* = 27
  PP_ADMIN_PIN* = 31
  PP_KEYEXCHANGE_PIN* = 32
  PP_SIGNATURE_PIN* = 33
  PP_SIG_KEYSIZE_INC* = 34
  PP_KEYX_KEYSIZE_INC* = 35
  PP_UNIQUE_CONTAINER* = 36
  PP_SGC_INFO* = 37
  PP_USE_HARDWARE_RNG* = 38
  PP_KEYSPEC* = 39
  PP_ENUMEX_SIGNING_PROT* = 40
  CRYPT_FIRST* = 1
  CRYPT_NEXT* = 2
  CRYPT_IMPL_HARDWARE* = 1
  CRYPT_IMPL_SOFTWARE* = 2
  CRYPT_IMPL_MIXED* = 3
  CRYPT_IMPL_UNKNOWN* = 4
  PROV_RSA_FULL* = 1
  PROV_RSA_SIG* = 2
  PROV_DSS* = 3
  PROV_FORTEZZA* = 4
  PROV_MS_MAIL* = 5
  PROV_SSL* = 6
  PROV_STT_MER* = 7
  PROV_STT_ACQ* = 8
  PROV_STT_BRND* = 9
  PROV_STT_ROOT* = 10
  PROV_STT_ISS* = 11
  PROV_RSA_SCHANNEL* = 12
  PROV_DSS_DH* = 13
  PROV_EC_ECDSA_SIG* = 14
  PROV_EC_ECNRA_SIG* = 15
  PROV_EC_ECDSA_FULL* = 16
  PROV_EC_ECNRA_FULL* = 17
  PROV_DH_SCHANNEL* = 18
  PROV_SPYRUS_LYNKS* = 20
  PROV_RNG* = 21
  PROV_INTEL_SEC* = 22
  PROV_RSA_AES* = 24
  MAXUIDLEN* = 64
  CUR_BLOB_VERSION* = 2
  X509_ASN_ENCODING* = 1
  PKCS_7_ASN_ENCODING* = 65536
  CERT_V1* = 0
  CERT_V2* = 1
  CERT_V3* = 2
  CERT_E_CHAINING* = (- 2146762486)
  CERT_E_CN_NO_MATCH* = (- 2146762481)
  CERT_E_EXPIRED* = (- 2146762495)
  CERT_E_PURPOSE* = (- 2146762490)
  CERT_E_REVOCATION_FAILURE* = (- 2146762482)
  CERT_E_REVOKED* = (- 2146762484)
  CERT_E_ROLE* = (- 2146762493)
  CERT_E_UNTRUSTEDROOT* = (- 2146762487)
  CERT_E_UNTRUSTEDTESTROOT* = (- 2146762483)
  CERT_E_VALIDITYPERIODNESTING* = (- 2146762494)
  CERT_E_WRONG_USAGE* = (- 2146762480)
  CERT_E_PATHLENCONST* = (- 2146762492)
  CERT_E_CRITICAL* = (- 2146762491)
  CERT_E_ISSUERCHAINING* = (- 2146762489)
  CERT_E_MALFORMED* = (- 2146762488)
  CRYPT_E_REVOCATION_OFFLINE* = (- 2146885613)
  CRYPT_E_REVOKED* = (- 2146885616)
  TRUST_E_BASIC_CONSTRAINTS* = (- 2146869223)
  TRUST_E_CERT_SIGNATURE* = (- 2146869244)
  TRUST_E_FAIL* = (- 2146762485)
  CERT_TRUST_NO_ERROR* = 0
  CERT_TRUST_IS_NOT_TIME_VALID* = 1
  CERT_TRUST_IS_NOT_TIME_NESTED* = 2
  CERT_TRUST_IS_REVOKED* = 4
  CERT_TRUST_IS_NOT_SIGNATURE_VALID* = 8
  CERT_TRUST_IS_NOT_VALID_FOR_USAGE* = 16
  CERT_TRUST_IS_UNTRUSTED_ROOT* = 32
  CERT_TRUST_REVOCATION_STATUS_UNKNOWN* = 64
  CERT_TRUST_IS_CYCLIC* = 128
  CERT_TRUST_IS_PARTIAL_CHAIN* = 65536
  CERT_TRUST_CTL_IS_NOT_TIME_VALID* = 131072
  CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID* = 262144
  CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE* = 524288
  CERT_TRUST_HAS_EXACT_MATCH_ISSUER* = 1
  CERT_TRUST_HAS_KEY_MATCH_ISSUER* = 2
  CERT_TRUST_HAS_NAME_MATCH_ISSUER* = 4
  CERT_TRUST_IS_SELF_SIGNED* = 8
  CERT_TRUST_IS_COMPLEX_CHAIN* = 65536
  CERT_CHAIN_POLICY_BASE* = (cast[LPCSTR](1))
  CERT_CHAIN_POLICY_AUTHENTICODE* = (cast[LPCSTR](2))
  CERT_CHAIN_POLICY_AUTHENTICODE_TS* = (cast[LPCSTR](3))
  CERT_CHAIN_POLICY_SSL* = (cast[LPCSTR](4))
  CERT_CHAIN_POLICY_BASIC_CONSTRAINTS* = (cast[LPCSTR](5))
  CERT_CHAIN_POLICY_NT_AUTH* = (cast[LPCSTR](6))
  USAGE_MATCH_TYPE_AND* = 0
  USAGE_MATCH_TYPE_OR* = 1
  CERT_SIMPLE_NAME_STR* = 1
  CERT_OID_NAME_STR* = 2
  CERT_X500_NAME_STR* = 3
  CERT_NAME_STR_SEMICOLON_FLAG* = 1073741824
  CERT_NAME_STR_CRLF_FLAG* = 134217728
  CERT_NAME_STR_NO_PLUS_FLAG* = 536870912
  CERT_NAME_STR_NO_QUOTING_FLAG* = 268435456
  CERT_NAME_STR_REVERSE_FLAG* = 33554432
  CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG* = 131072
  CERT_FIND_ANY* = 0
  CERT_FIND_CERT_ID* = 1048576
  CERT_FIND_CTL_USAGE* = 655360
  CERT_FIND_ENHKEY_USAGE* = 655360
  CERT_FIND_EXISTING* = 851968
  CERT_FIND_HASH* = 65536
  CERT_FIND_ISSUER_ATTR* = 196612
  CERT_FIND_ISSUER_NAME* = 131076
  CERT_FIND_ISSUER_OF* = 786432
  CERT_FIND_KEY_IDENTIFIER* = 983040
  CERT_FIND_KEY_SPEC* = 589824
  CERT_FIND_MD5_HASH* = 262144
  CERT_FIND_PROPERTY* = 327680
  CERT_FIND_PUBLIC_KEY* = 393216
  CERT_FIND_SHA1_HASH* = 65536
  CERT_FIND_SIGNATURE_HASH* = 917504
  CERT_FIND_SUBJECT_ATTR* = 196615
  CERT_FIND_SUBJECT_CERT* = 720896
  CERT_FIND_SUBJECT_NAME* = 131079
  CERT_FIND_SUBJECT_STR_A* = 458759
  CERT_FIND_SUBJECT_STR_W* = 524295
  CERT_FIND_ISSUER_STR_A* = 458756
  CERT_FIND_ISSUER_STR_W* = 524292
  CERT_FIND_OR_ENHKEY_USAGE_FLAG* = 16
  CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG* = 1
  CERT_FIND_NO_ENHKEY_USAGE_FLAG* = 8
  CERT_FIND_VALID_ENHKEY_USAGE_FLAG* = 32
  CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG* = 2
  CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG* = 2
  CERT_UNICODE_IS_RDN_ATTRS_FLAG* = 1
  CERT_CHAIN_FIND_BY_ISSUER* = 1
  CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG* = 1
  CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG* = 2
  CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG* = 32768
  CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG* = 4
  CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG* = 8
  CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG* = 16384
  CERT_STORE_PROV_SYSTEM* = 10
  CERT_SYSTEM_STORE_LOCAL_MACHINE* = 131072
  szOID_PKIX_KP_SERVER_AUTH* = "4235600"
  szOID_SERVER_GATED_CRYPTO* = "4235658"
  szOID_SGC_NETSCAPE* = "2.16.840.1.113730.4.1"
  szOID_PKIX_KP_CLIENT_AUTH* = "1.3.6.1.5.5.7.3.2"
  CRYPT_NOHASHOID* = 0x00000001
  CRYPT_NO_SALT* = 0x00000010
  CRYPT_PREGEN* = 0x00000040
  CRYPT_RECIPIENT* = 0x00000010
  CRYPT_INITIATOR* = 0x00000040
  CRYPT_ONLINE* = 0x00000080
  CRYPT_SF* = 0x00000100
  CRYPT_CREATE_IV* = 0x00000200
  CRYPT_KEK* = 0x00000400
  CRYPT_DATA_KEY* = 0x00000800
  CRYPT_VOLATILE* = 0x00001000
  CRYPT_SGCKEY* = 0x00002000
  KP_IV* = 0x00000001
  KP_SALT* = 0x00000002
  KP_PADDING* = 0x00000003
  KP_MODE* = 0x00000004
  KP_MODE_BITS* = 0x00000005
  KP_PERMISSIONS* = 0x00000006
  KP_ALGID* = 0x00000007
  KP_BLOCKLEN* = 0x00000008
  KP_KEYLEN* = 0x00000009
  KP_SALT_EX* = 0x0000000A
  KP_P* = 0x0000000B
  KP_G* = 0x0000000C
  KP_Q* = 0x0000000D
  KP_X* = 0x0000000E
  KP_Y* = 0x0000000F
  KP_RA* = 0x00000010
  KP_RB* = 0x00000011
  KP_INFO* = 0x00000012
  KP_EFFECTIVE_KEYLEN* = 0x00000013
  KP_SCHANNEL_ALG* = 0x00000014
  KP_PUB_PARAMS* = 0x00000027
  CRYPT_FLAG_PCT1* = 0x00000001
  CRYPT_FLAG_SSL2* = 0x00000002
  CRYPT_FLAG_SSL3* = 0x00000004
  CRYPT_FLAG_TLS1* = 0x00000008
  CRYPT_FLAG_IPSEC* = 0x00000010
  CRYPT_FLAG_SIGNING* = 0x00000020
  SCHANNEL_MAC_KEY* = 0x00000000
  SCHANNEL_ENC_KEY* = 0x00000001
  INTERNATIONAL_USAGE* = 0x00000001

type
  HCRYPTPROV* = ULONG
  HCRYPTKEY* = ULONG
  HCRYPTHASH* = ULONG
  HCERTSTORE* = PVOID
  HCRYPTMSG* = PVOID
  HCERTCHAINENGINE* = PVOID
  VTableProvStruc* {.final, pure.} = object
    FuncVerifyImage*: FARPROC
  PVTableProvStruc* = ptr VTableProvStruc
  CRYPTOAPI_BLOB* {.final, pure.} = object
    cbData*: DWORD
    pbData*: ptr BYTE
  CRYPT_INTEGER_BLOB* = CRYPTOAPI_BLOB
  CRYPT_UINT_BLOB* = CRYPTOAPI_BLOB
  CRYPT_OBJID_BLOB* = CRYPTOAPI_BLOB
  CERT_NAME_BLOB* = CRYPTOAPI_BLOB
  CERT_RDN_VALUE_BLOB* = CRYPTOAPI_BLOB
  CERT_BLOB* = CRYPTOAPI_BLOB
  CRL_BLOB* = CRYPTOAPI_BLOB
  DATA_BLOB* = CRYPTOAPI_BLOB
  CRYPT_DATA_BLOB* = CRYPTOAPI_BLOB
  CRYPT_HASH_BLOB* = CRYPTOAPI_BLOB
  CRYPT_DIGEST_BLOB* = CRYPTOAPI_BLOB
  CRYPT_DER_BLOB* = CRYPTOAPI_BLOB
  CRYPT_ATTR_BLOB* = CRYPTOAPI_BLOB
  PCRYPT_INTEGER_BLOB* = ptr CRYPTOAPI_BLOB
  PCRYPT_UINT_BLOB* = ptr CRYPTOAPI_BLOB
  PCRYPT_OBJID_BLOB* = ptr CRYPTOAPI_BLOB
  PCERT_NAME_BLOB* = ptr CRYPTOAPI_BLOB
  PCERT_RDN_VALUE_BLOB* = ptr CRYPTOAPI_BLOB
  PCERT_BLOB* = ptr CRYPTOAPI_BLOB
  PCRL_BLOB* = ptr CRYPTOAPI_BLOB
  PDATA_BLOB* = ptr CRYPTOAPI_BLOB
  PCRYPT_DATA_BLOB* = ptr CRYPTOAPI_BLOB
  PCRYPT_HASH_BLOB* = ptr CRYPTOAPI_BLOB
  PCRYPT_DIGEST_BLOB* = ptr CRYPTOAPI_BLOB
  PCRYPT_DER_BLOB* = ptr CRYPTOAPI_BLOB
  PCRYPT_ATTR_BLOB* = ptr CRYPTOAPI_BLOB
  SSL_EXTRA_CERT_CHAIN_POLICY_PARA* {.final, pure.} = object
    cbStruct*: DWORD
    dwAuthType*: DWORD
    fdwChecks*: DWORD
    pwszServerName*: LPWSTR
  HTTPSPolicyCallbackData* = SSL_EXTRA_CERT_CHAIN_POLICY_PARA
  PSSL_EXTRA_CERT_CHAIN_POLICY_PARA* = ptr SSL_EXTRA_CERT_CHAIN_POLICY_PARA
  PHTTPSPolicyCallbackData* = ptr SSL_EXTRA_CERT_CHAIN_POLICY_PARA
  CERT_CHAIN_POLICY_PARA* {.final, pure.} = object
    cbSize*: DWORD
    dwFlags*: DWORD
    pvExtraPolicyPara*: pointer
  PCERT_CHAIN_POLICY_PARA* = ptr CERT_CHAIN_POLICY_PARA
  CERT_CHAIN_POLICY_STATUS* {.final, pure.} = object
    cbSize*: DWORD
    dwError*: DWORD
    lChainIndex*: LONG
    lElementIndex*: LONG
    pvExtraPolicyStatus*: pointer
  PCERT_CHAIN_POLICY_STATUS* = ptr CERT_CHAIN_POLICY_STATUS
  CRYPT_ALGORITHM_IDENTIFIER* {.final, pure.} = object
    pszObjId*: LPSTR
    Parameters*: CRYPT_OBJID_BLOB
  PCRYPT_ALGORITHM_IDENTIFIER* = ptr CRYPT_ALGORITHM_IDENTIFIER
  CRYPT_BIT_BLOB* {.final, pure.} = object
    cbData*: DWORD
    pbData*: ptr BYTE
    cUnusedBits*: DWORD
  PCRYPT_BIT_BLOB* = ptr CRYPT_BIT_BLOB
  CERT_PUBLIC_KEY_INFO* {.final, pure.} = object
    Algorithm*: CRYPT_ALGORITHM_IDENTIFIER
    PublicKey*: CRYPT_BIT_BLOB
  PCERT_PUBLIC_KEY_INFO* = ptr CERT_PUBLIC_KEY_INFO
  CERT_EXTENSION* {.final, pure.} = object
    pszObjId*: LPSTR
    fCritical*: BOOL
    Value*: CRYPT_OBJID_BLOB
  PCERT_EXTENSION* = ptr CERT_EXTENSION
  CERT_INFO* {.final, pure.} = object
    dwVersion*: DWORD
    SerialNumber*: CRYPT_INTEGER_BLOB
    SignatureAlgorithm*: CRYPT_ALGORITHM_IDENTIFIER
    Issuer*: CERT_NAME_BLOB
    NotBefore*: FILETIME
    NotAfter*: FILETIME
    Subject*: CERT_NAME_BLOB
    SubjectPublicKeyInfo*: CERT_PUBLIC_KEY_INFO
    IssuerUniqueId*: CRYPT_BIT_BLOB
    SubjectUniqueId*: CRYPT_BIT_BLOB
    cExtension*: DWORD
    rgExtension*: PCERT_EXTENSION
  PCERT_INFO* = ptr CERT_INFO
  CERT_CONTEXT* {.final, pure.} = object
    dwCertEncodingType*: DWORD
    pbCertEncoded*: ptr BYTE
    cbCertEncoded*: DWORD
    pCertInfo*: PCERT_INFO
    hCertStore*: HCERTSTORE
  PCERT_CONTEXT* = ptr CERT_CONTEXT
  PCCERT_CONTEXT* = ptr CERT_CONTEXT
  CTL_USAGE* {.final, pure.} = object
    cUsageIdentifier*: DWORD
    rgpszUsageIdentifier*: ptr LPSTR
  CERT_ENHKEY_USAGE* = CTL_USAGE
  PCTRL_USAGE* = ptr CTL_USAGE
  PCERT_ENHKEY_USAGE* = ptr CTL_USAGE
  CERT_USAGE_MATCH* {.final, pure.} = object
    dwType*: DWORD
    Usage*: CERT_ENHKEY_USAGE
  PCERT_USAGE_MATCH* = ptr CERT_USAGE_MATCH
  CERT_CHAIN_PARA* {.final, pure.} = object
    cbSize*: DWORD
    RequestedUsage*: CERT_USAGE_MATCH
    RequestedIssuancePolicy*: CERT_USAGE_MATCH
    dwUrlRetrievalTimeout*: DWORD
    fCheckRevocationFreshnessTime*: BOOL
    dwRevocationFreshnessTime*: DWORD
  PCERT_CHAIN_PARA* = ptr CERT_CHAIN_PARA
  PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK* = proc (P1: PCCERT_CONTEXT, P2: pointer): BOOL {.stdcall.}
  CERT_CHAIN_FIND_BY_ISSUER_PARA* {.final, pure.} = object
    cbSize*: DWORD
    pszUsageIdentifier*: LPCSTR
    dwKeySpec*: DWORD
    dwAcquirePrivateKeyFlags*: DWORD
    cIssuer*: DWORD
    rgIssuer*: ptr CERT_NAME_BLOB
    pfnFIndCallback*: PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK
    pvFindArg*: pointer
    pdwIssuerChainIndex*: ptr DWORD
    pdwIssuerElementIndex*: ptr DWORD
  PCERT_CHAIN_FIND_BY_ISSUER_PARA* = ptr CERT_CHAIN_FIND_BY_ISSUER_PARA
  CERT_TRUST_STATUS* {.final, pure.} = object
    dwErrorStatus*: DWORD
    dwInfoStatus*: DWORD
  PCERT_TRUST_STATUS* = ptr CERT_TRUST_STATUS
  CRL_ENTRY* {.final, pure.} = object
    SerialNumber*: CRYPT_INTEGER_BLOB
    RevocationDate*: FILETIME
    cExtension*: DWORD
    rgExtension*: PCERT_EXTENSION
  PCRL_ENTRY* = ptr CRL_ENTRY
  CRL_INFO* {.final, pure.} = object
    dwVersion*: DWORD
    SignatureAlgorithm*: CRYPT_ALGORITHM_IDENTIFIER
    Issuer*: CERT_NAME_BLOB
    ThisUpdate*: FILETIME
    NextUpdate*: FILETIME
    cCRLEntry*: DWORD
    rgCRLEntry*: PCRL_ENTRY
    cExtension*: DWORD
    rgExtension*: PCERT_EXTENSION
  PCRL_INFO* = ptr CRL_INFO
  CRL_CONTEXT* {.final, pure.} = object
    dwCertEncodingType*: DWORD
    pbCrlEncoded*: ptr BYTE
    cbCrlEncoded*: DWORD
    pCrlInfo*: PCRL_INFO
    hCertStore*: HCERTSTORE
  PCRL_CONTEXT* = ptr CRL_CONTEXT
  PCCRL_CONTEXT* = ptr CRL_CONTEXT
  CERT_REVOCATION_CRL_INFO* {.final, pure.} = object
    cbSize*: DWORD
    pBaseCRLContext*: PCCRL_CONTEXT
    pDeltaCRLContext*: PCCRL_CONTEXT
    pCrlEntry*: PCRL_ENTRY
    fDeltaCrlEntry*: BOOL
  PCERT_REVOCATION_CRL_INFO* = ptr CERT_REVOCATION_CRL_INFO
  CERT_REVOCATION_INFO* {.final, pure.} = object
    cbSize*: DWORD
    dwRevocationResult*: DWORD
    pszRevocationOid*: LPCSTR
    pvOidSpecificInfo*: LPVOID
    fHasFreshnessTime*: BOOL
    dwFreshnessTime*: DWORD
    pCrlInfo*: PCERT_REVOCATION_CRL_INFO
  PCERT_REVOCATION_INFO* = ptr CERT_REVOCATION_INFO
  CERT_CHAIN_ELEMENT* {.final, pure.} = object
    cbSize*: DWORD
    pCertContext*: PCCERT_CONTEXT
    TrustStatus*: CERT_TRUST_STATUS
    pRevocationInfo*: PCERT_REVOCATION_INFO
    pIssuanceUsage*: PCERT_ENHKEY_USAGE
    pApplicationUsage*: PCERT_ENHKEY_USAGE
  PCERT_CHAIN_ELEMENT* = ptr CERT_CHAIN_ELEMENT
  CRYPT_ATTRIBUTE* {.final, pure.} = object
    pszObjId*: LPSTR
    cValue*: DWORD
    rgValue*: PCRYPT_ATTR_BLOB
  PCRYPT_ATTRIBUTE* = ptr CRYPT_ATTRIBUTE
  CTL_ENTRY* {.final, pure.} = object
    SubjectIdentifier*: CRYPT_DATA_BLOB
    cAttribute*: DWORD
    rgAttribute*: PCRYPT_ATTRIBUTE
  PCTL_ENTRY* = ptr CTL_ENTRY
  CTL_INFO* {.final, pure.} = object
    dwVersion*: DWORD
    SubjectUsage*: CTL_USAGE
    ListIdentifier*: CRYPT_DATA_BLOB
    SequenceNumber*: CRYPT_INTEGER_BLOB
    ThisUpdate*: FILETIME
    NextUpdate*: FILETIME
    SubjectAlgorithm*: CRYPT_ALGORITHM_IDENTIFIER
    cCTLEntry*: DWORD
    rgCTLEntry*: PCTL_ENTRY
    cExtension*: DWORD
    rgExtension*: PCERT_EXTENSION
  PCTL_INFO* = ptr CTL_INFO
  CTL_CONTEXT* {.final, pure.} = object
    dwMsgAndCertEncodingType*: DWORD
    pbCtlEncoded*: ptr BYTE
    cbCtlEncoded*: DWORD
    pCtlInfo*: PCTL_INFO
    hCertStore*: HCERTSTORE
    hCryptMsg*: HCRYPTMSG
    pbCtlContent*: ptr BYTE
    cbCtlContent*: DWORD
  PCTL_CONTEXT* = ptr CTL_CONTEXT
  PCCTL_CONTEXT* = ptr CTL_CONTEXT
  CERT_TRUST_LIST_INFO* {.final, pure.} = object
    cbSize*: DWORD
    pCtlEntry*: PCTL_ENTRY
    pCtlContext*: PCCTL_CONTEXT
  PCERT_TRUST_LIST_INFO* = ptr CERT_TRUST_LIST_INFO
  CERT_SIMPLE_CHAIN* {.final, pure.} = object
    cbSize*: DWORD
    TrustStatus*: CERT_TRUST_STATUS
    cElement*: DWORD
    rgpElement*: ptr PCERT_CHAIN_ELEMENT
    pTrustListInfo*: PCERT_TRUST_LIST_INFO
    fHasRevocationFreshnessTime*: BOOL
    dwRevocationFreshnessTime*: DWORD
  PCERT_SIMPLE_CHAIN* = ptr CERT_SIMPLE_CHAIN
  PCCERT_CHAIN_CONTEXT* = ptr CERT_CHAIN_CONTEXT
  CERT_CHAIN_CONTEXT* {.final, pure.} = object
    cbSize*: DWORD
    TrustStatus*: CERT_TRUST_STATUS
    cChain*: DWORD
    rgpChain*: ptr PCERT_SIMPLE_CHAIN
    cLowerQualityChainContext*: DWORD
    rgpLowerQualityChainContext*: ptr PCCERT_CHAIN_CONTEXT
    fHasRevocationFreshnessTime*: BOOL
    dwRevocationFreshnessTime*: DWORD
  PCERT_CHAIN_CONTEXT* = ptr CERT_CHAIN_CONTEXT
  PROV_ENUMALGS* {.final, pure.} = object
    aiAlgid*: ALG_ID
    dwBitLen*: DWORD
    dwNameLen*: DWORD
    szName*: array[20, CHAR]
  PUBLICKEYSTRUC* {.final, pure.} = object
    bType*: BYTE
    bVersion*: BYTE
    reserved*: WORD
    aiKeyAlg*: ALG_ID
  BLOBHEADER* = PUBLICKEYSTRUC
  RSAPUBKEY* {.final, pure.} = object
    magic*: DWORD
    bitlen*: DWORD
    pubexp*: DWORD
  HMAC_INFO* {.final, pure.} = object
    HashAlgid*: ALG_ID
    pbInnerString*: ptr BYTE
    cbInnerString*: DWORD
    pbOuterString*: ptr BYTE
    cbOuterString*: DWORD
  PHMAC_INFO* = ptr HMAC_INFO

proc CertCloseStore*(P1: HCERTSTORE, P2: DWORD): BOOL {.winapi, dynlib: "crypt32", importc.}
proc CertGetCertificateChain*(P1: HCERTCHAINENGINE, P2: PCCERT_CONTEXT, P3: LPFILETIME, P4: HCERTSTORE, P5: PCERT_CHAIN_PARA, P6: DWORD, P7: LPVOID, P8: ptr PCCERT_CHAIN_CONTEXT): BOOL {.winapi, dynlib: "crypt32", importc.}
proc CertVerifyCertificateChainPolicy*(P1: LPCSTR, P2: PCCERT_CHAIN_CONTEXT, P3: PCERT_CHAIN_POLICY_PARA, P4: PCERT_CHAIN_POLICY_STATUS): BOOL {.winapi, dynlib: "crypt32", importc.}
proc CertFreeCertificateChain*(P1: PCCERT_CHAIN_CONTEXT): void {.winapi, dynlib: "crypt32", importc.}
proc CertNameToStrA*(P1: DWORD, P2: PCERT_NAME_BLOB, P3: DWORD, P4: LPSTR, P5: DWORD): DWORD {.winapi, dynlib: "crypt32", importc.}
proc CertNameToStrW*(P1: DWORD, P2: PCERT_NAME_BLOB, P3: DWORD, P4: LPWSTR, P5: DWORD): DWORD {.winapi, dynlib: "crypt32", importc.}
proc CertOpenSystemStoreA*(P1: HCRYPTPROV, P2: LPCSTR): HCERTSTORE {.winapi, dynlib: "crypt32", importc.}
proc CertOpenSystemStoreW*(P1: HCRYPTPROV, P2: LPCWSTR): HCERTSTORE {.winapi, dynlib: "crypt32", importc.}
proc CertOpenStore*(P1: LPCSTR, P2: DWORD, P3: HCRYPTPROV, P4: DWORD, P5: pointer): HCERTSTORE {.winapi, dynlib: "crypt32", importc.}
proc CertFindCertificateInStore*(P1: HCERTSTORE, P2: DWORD, P3: DWORD, P4: DWORD, P5: pointer, P6: PCCERT_CONTEXT): PCCERT_CONTEXT {.winapi, dynlib: "crypt32", importc.}
proc CertFreeCertificateContext*(P1: PCCERT_CONTEXT): BOOL {.winapi, dynlib: "crypt32", importc.}
proc CertGetIssuerCertificateFromStore*(P1: HCERTSTORE, P2: PCCERT_CONTEXT, P3: PCCERT_CONTEXT, P4: ptr DWORD): PCCERT_CONTEXT {.winapi, dynlib: "crypt32", importc.}
proc CertFindChainInStore*(P1: HCERTSTORE, P2: DWORD, P3: DWORD, P4: DWORD, P5: pointer, P6: PCCERT_CHAIN_CONTEXT): PCCERT_CHAIN_CONTEXT {.winapi, dynlib: "crypt32", importc.}
proc CryptAcquireContextA*(P1: ptr HCRYPTPROV, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptAcquireContextW*(P1: ptr HCRYPTPROV, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptContextAddRef*(P1: HCRYPTPROV, P2: ptr DWORD, P3: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptReleaseContext*(P1: HCRYPTPROV, P2: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptGenKey*(P1: HCRYPTPROV, P2: ALG_ID, P3: DWORD, P4: ptr HCRYPTKEY): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptDeriveKey*(P1: HCRYPTPROV, P2: ALG_ID, P3: HCRYPTHASH, P4: DWORD, P5: ptr HCRYPTKEY): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptDestroyKey*(P1: HCRYPTKEY): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptDuplicateHash*(P1: HCRYPTHASH, P2: ptr DWORD, P3: DWORD, P4: ptr HCRYPTHASH): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptDuplicateKey*(P1: HCRYPTKEY, P2: ptr DWORD, P3: DWORD, P4: ptr HCRYPTKEY): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptSetKeyParam*(P1: HCRYPTKEY, P2: DWORD, P3: PBYTE, P4: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptGetKeyParam*(P1: HCRYPTKEY, P2: DWORD, P3: PBYTE, P4: PDWORD, P5: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptSetHashParam*(P1: HCRYPTHASH, P2: DWORD, P3: PBYTE, P4: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptGetHashParam*(P1: HCRYPTHASH, P2: DWORD, P3: PBYTE, P4: PDWORD, P5: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptSetProvParam*(P1: HCRYPTPROV, P2: DWORD, P3: PBYTE, P4: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptGetProvParam*(P1: HCRYPTPROV, P2: DWORD, P3: PBYTE, P4: PDWORD, P5: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptGenRandom*(P1: HCRYPTPROV, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptGetUserKey*(P1: HCRYPTPROV, P2: DWORD, P3: ptr HCRYPTKEY): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptExportKey*(P1: HCRYPTKEY, P2: HCRYPTKEY, P3: DWORD, P4: DWORD, P5: PBYTE, P6: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptImportKey*(P1: HCRYPTPROV, P2: PBYTE, P3: DWORD, P4: HCRYPTKEY, P5: DWORD, P6: ptr HCRYPTKEY): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptEncrypt*(P1: HCRYPTKEY, P2: HCRYPTHASH, P3: BOOL, P4: DWORD, P5: PBYTE, P6: PDWORD, P7: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptDecrypt*(P1: HCRYPTKEY, P2: HCRYPTHASH, P3: BOOL, P4: DWORD, P5: PBYTE, P6: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptCreateHash*(P1: HCRYPTPROV, P2: ALG_ID, P3: HCRYPTKEY, P4: DWORD, P5: ptr HCRYPTHASH): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptHashData*(P1: HCRYPTHASH, P2: PBYTE, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptHashSessionKey*(P1: HCRYPTHASH, P2: HCRYPTKEY, P3: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptGetHashValue*(P1: HCRYPTHASH, P2: DWORD, P3: PBYTE, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptDestroyHash*(P1: HCRYPTHASH): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptSignHashA*(P1: HCRYPTHASH, P2: DWORD, P3: LPCSTR, P4: DWORD, P5: PBYTE, P6: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptSignHashW*(P1: HCRYPTHASH, P2: DWORD, P3: LPCWSTR, P4: DWORD, P5: PBYTE, P6: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptVerifySignatureA*(P1: HCRYPTHASH, P2: PBYTE, P3: DWORD, P4: HCRYPTKEY, P5: LPCSTR, P6: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptVerifySignatureW*(P1: HCRYPTHASH, P2: PBYTE, P3: DWORD, P4: HCRYPTKEY, P5: LPCWSTR, P6: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptSetProviderA*(P1: LPCSTR, P2: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptSetProviderW*(P1: LPCWSTR, P2: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}

when not defined(winansi):
  proc CertNameToStr*(P1: DWORD, P2: PCERT_NAME_BLOB, P3: DWORD, P4: LPWSTR, P5: DWORD): DWORD {.winapi, dynlib: "crypt32", importc: "CertNameToStrW".}
  proc CryptAcquireContext*(P1: ptr HCRYPTPROV, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "advapi32", importc: "CryptAcquireContextW".}
  proc CryptSignHash*(P1: HCRYPTHASH, P2: DWORD, P3: LPCWSTR, P4: DWORD, P5: PBYTE, P6: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "CryptSignHashW".}
  proc CryptVerifySignature*(P1: HCRYPTHASH, P2: PBYTE, P3: DWORD, P4: HCRYPTKEY, P5: LPCWSTR, P6: DWORD): BOOL {.winapi, dynlib: "advapi32", importc: "CryptVerifySignatureW".}
  proc CryptSetProvider*(P1: LPCWSTR, P2: DWORD): BOOL {.winapi, dynlib: "advapi32", importc: "CryptSetProviderW".}
  proc CertOpenSystemStore*(P1: HCRYPTPROV, P2: LPCWSTR): HCERTSTORE {.winapi, dynlib: "crypt32", importc: "CertOpenSystemStoreW".}

else:
  proc CertNameToStr*(P1: DWORD, P2: PCERT_NAME_BLOB, P3: DWORD, P4: LPSTR, P5: DWORD): DWORD {.winapi, dynlib: "crypt32", importc: "CertNameToStrA".}
  proc CryptAcquireContext*(P1: ptr HCRYPTPROV, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "advapi32", importc: "CryptAcquireContextA".}
  proc CryptSignHash*(P1: HCRYPTHASH, P2: DWORD, P3: LPCSTR, P4: DWORD, P5: PBYTE, P6: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "CryptSignHashA".}
  proc CryptVerifySignature*(P1: HCRYPTHASH, P2: PBYTE, P3: DWORD, P4: HCRYPTKEY, P5: LPCSTR, P6: DWORD): BOOL {.winapi, dynlib: "advapi32", importc: "CryptVerifySignatureA".}
  proc CryptSetProvider*(P1: LPCSTR, P2: DWORD): BOOL {.winapi, dynlib: "advapi32", importc: "CryptSetProviderA".}
  proc CertOpenSystemStore*(P1: HCRYPTPROV, P2: LPCSTR): HCERTSTORE {.winapi, dynlib: "crypt32", importc: "CertOpenSystemStoreA".}

# ext/schannel.nim

const
  SCHANNEL_CRED_VERSION* = 4
  SCHANNEL_SHUTDOWN* = 1
  AUTHTYPE_CLIENT* = 1
  AUTHTYPE_SERVER* = 2
  SP_PROT_PCT1_SERVER* = 0x01
  SP_PROT_PCT1_CLIENT* = 0x02
  SP_PROT_SSL2_SERVER* = 0x04
  SP_PROT_SSL2_CLIENT* = 0x08
  SP_PROT_SSL3_SERVER* = 0x10
  SP_PROT_SSL3_CLIENT* = 0x20
  SP_PROT_TLS1_SERVER* = 0x40
  SP_PROT_TLS1_CLIENT* = 0x80
  SP_PROT_PCT1* = (SP_PROT_PCT1_CLIENT or SP_PROT_PCT1_SERVER)
  SP_PROT_TLS1* = (SP_PROT_TLS1_CLIENT or SP_PROT_TLS1_SERVER)
  SP_PROT_SSL2* = (SP_PROT_SSL2_CLIENT or SP_PROT_SSL2_SERVER)
  SP_PROT_SSL3* = (SP_PROT_SSL3_CLIENT or SP_PROT_SSL3_SERVER)
  SCH_CRED_NO_SYSTEM_MAPPER* = 0x0002
  SCH_CRED_NO_SERVERNAME_CHECK* = 0x0004
  SCH_CRED_MANUAL_CRED_VALIDATION* = 0x0008
  SCH_CRED_NO_DEFAULT_CREDS* = 0x0010
  SCH_CRED_AUTO_CRED_VALIDATION* = 0x0020
  SCH_CRED_USE_DEFAULT_CREDS* = 0x0040
  SCH_CRED_REVOCATION_CHECK_END_CERT* = 0x0100
  SCH_CRED_REVOCATION_CHECK_CHAIN* = 0x0200
  SCH_CRED_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT* = 0x0400
  SCH_CRED_IGNORE_NO_REVOCATION_CHECK* = 0x0800
  SCH_CRED_IGNORE_REVOCATION_OFFLINE* = 0x1000

type
  HMAPPER* {.final, pure.} = object
  SCHANNEL_CRED* {.final, pure.} = object
    dwVersion*: DWORD
    cCreds*: DWORD
    paCred*: ptr PCCERT_CONTEXT
    hRootStore*: HCERTSTORE
    cMappers*: DWORD
    aphMappers*: ptr ptr HMAPPER
    cSupportedAlgs*: DWORD
    palgSupportedAlgs*: ptr ALG_ID
    grbitEnabledProtocols*: DWORD
    dwMinimumCypherStrength*: DWORD
    dwMaximumCypherStrength*: DWORD
    dwSessionLifespan*: DWORD
    dwFlags*: DWORD
    reserved*: DWORD
  PSCHANNEL_CRED* = ptr SCHANNEL_CRED
  SecPkgCred_SupportedAlgs* {.final, pure.} = object
    cSupportedAlgs*: DWORD
    palgSupportedAlgs*: ptr ALG_ID
  PSecPkgCred_SupportedAlgs* = ptr SecPkgCred_SupportedAlgs
  SecPkgCred_CypherStrengths* {.final, pure.} = object
    dwMinimumCypherStrength*: DWORD
    dwMaximumCypherStrength*: DWORD
  PSecPkgCred_CypherStrengths* = ptr SecPkgCred_CypherStrengths
  SecPkgCred_SupportedProtocols* {.final, pure.} = object
    grbitProtocol*: DWORD
  PSecPkgCred_SupportedProtocols* = ptr SecPkgCred_SupportedProtocols
  SecPkgContext_IssuerListInfoEx* {.final, pure.} = object
    aIssuers*: PCERT_NAME_BLOB
    cIssuers*: DWORD
  PSecPkgContext_IssuerListInfoEx* = ptr SecPkgContext_IssuerListInfoEx
  SecPkgContext_ConnectionInfo* {.final, pure.} = object
    dwProtocol*: DWORD
    aiCipher*: ALG_ID
    dwCipherStrength*: DWORD
    aiHash*: ALG_ID
    dwHashStrength*: DWORD
    aiExch*: ALG_ID
    dwExchStrength*: DWORD
  PSecPkgContext_ConnectionInfo* = ptr SecPkgContext_ConnectionInfo

# ext/tlhelp32.nim

const
  HF32_DEFAULT* = 1
  HF32_SHARED* = 2
  LF32_FIXED* = 0x1
  LF32_FREE* = 0x2
  LF32_MOVEABLE* = 0x4
  MAX_MODULE_NAME32* = 255
  TH32CS_SNAPHEAPLIST* = 0x1
  TH32CS_SNAPPROCESS* = 0x2
  TH32CS_SNAPTHREAD* = 0x4
  TH32CS_SNAPMODULE* = 0x8
  TH32CS_SNAPALL* = (( TH32CS_SNAPHEAPLIST or TH32CS_SNAPPROCESS or TH32CS_SNAPTHREAD or TH32CS_SNAPMODULE ))
  TH32CS_INHERIT* = 0x80000000'u32

type
  HEAPLIST32* {.final, pure.} = object
    dwSize*: DWORD
    th32ProcessID*: DWORD
    th32HeapID*: DWORD
    dwFlags*: DWORD
  PHEAPLIST32* = ptr HEAPLIST32
  LPHEAPLIST32* = ptr HEAPLIST32
  HEAPENTRY32* {.final, pure.} = object
    dwSize*: DWORD
    hHandle*: HANDLE
    dwAddress*: DWORD
    dwBlockSize*: DWORD
    dwFlags*: DWORD
    dwLockCount*: DWORD
    dwResvd*: DWORD
    th32ProcessID*: DWORD
    th32HeapID*: DWORD
  PHEAPENTRY32* = ptr HEAPENTRY32
  LPHEAPENTRY32* = ptr HEAPENTRY32
  PROCESSENTRY32W* {.final, pure.} = object
    dwSize*: DWORD
    cntUsage*: DWORD
    th32ProcessID*: DWORD
    th32DefaultHeapID*: DWORD
    th32ModuleID*: DWORD
    cntThreads*: DWORD
    th32ParentProcessID*: DWORD
    pcPriClassBase*: LONG
    dwFlags*: DWORD
    szExeFile*: array[MAX_PATH, WCHAR]
  PPROCESSENTRY32W* = ptr PROCESSENTRY32W
  LPPROCESSENTRY32W* = ptr PROCESSENTRY32W
  THREADENTRY32* {.final, pure.} = object
    dwSize*: DWORD
    cntUsage*: DWORD
    th32ThreadID*: DWORD
    th32OwnerProcessID*: DWORD
    tpBasePri*: LONG
    tpDeltaPri*: LONG
    dwFlags*: DWORD
  PTHREADENTRY32* = ptr THREADENTRY32
  LPTHREADENTRY32* = ptr THREADENTRY32
  MODULEENTRY32W* {.final, pure.} = object
    dwSize*: DWORD
    th32ModuleID*: DWORD
    th32ProcessID*: DWORD
    GlblcntUsage*: DWORD
    ProccntUsage*: DWORD
    modBaseAddr*: ptr BYTE
    modBaseSize*: DWORD
    hModule*: HMODULE
    szModule*: array[MAX_MODULE_NAME32 + 1, WCHAR]
    szExePath*: array[MAX_PATH, WCHAR]
  PMODULEENTRY32W* = ptr MODULEENTRY32W
  LPMODULEENTRY32W* = ptr MODULEENTRY32W

when not defined(winansi):
  type
    PROCESSENTRY32* = PROCESSENTRY32W
    PPROCESSENTRY32* = PPROCESSENTRY32W
    LPPROCESSENTRY32* = LPPROCESSENTRY32W
    MODULEENTRY32* = MODULEENTRY32W
    PMODULEENTRY32* = PMODULEENTRY32W
    LPMODULEENTRY32* = LPMODULEENTRY32W

else:
  type
    PROCESSENTRY32* {.final, pure.} = object
      dwSize*: DWORD
      cntUsage*: DWORD
      th32ProcessID*: DWORD
      th32DefaultHeapID*: DWORD
      th32ModuleID*: DWORD
      cntThreads*: DWORD
      th32ParentProcessID*: DWORD
      pcPriClassBase*: LONG
      dwFlags*: DWORD
      szExeFile*: array[MAX_PATH, CHAR]
    PPROCESSENTRY32* = ptr PROCESSENTRY32
    LPPROCESSENTRY32* = ptr PROCESSENTRY32
    MODULEENTRY32* {.final, pure.} = object
      dwSize*: DWORD
      th32ModuleID*: DWORD
      th32ProcessID*: DWORD
      GlblcntUsage*: DWORD
      ProccntUsage*: DWORD
      modBaseAddr*: ptr BYTE
      modBaseSize*: DWORD
      hModule*: HMODULE
      szModule*: array[MAX_MODULE_NAME32 + 1, char]
      szExePath*: array[MAX_PATH, char]
    PMODULEENTRY32* = ptr MODULEENTRY32
    LPMODULEENTRY32* = ptr MODULEENTRY32

proc Heap32First*(P1: LPHEAPENTRY32, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Heap32ListFirst*(P1: HANDLE, P2: LPHEAPLIST32): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Heap32ListNext*(P1: HANDLE, P2: LPHEAPLIST32): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Heap32Next*(P1: LPHEAPENTRY32): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Thread32First*(P1: HANDLE, P2: LPTHREADENTRY32): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Thread32Next*(P1: HANDLE, P2: LPTHREADENTRY32): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Toolhelp32ReadProcessMemory*(P1: DWORD, P2: LPCVOID, P3: LPVOID, P4: DWORD, P5: LPDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CreateToolhelp32Snapshot*(P1: DWORD, P2: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc.}

proc Module32FirstW*(P1: HANDLE, P2: LPMODULEENTRY32W): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Module32NextW*(P1: HANDLE, P2: LPMODULEENTRY32W): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Process32FirstW*(P1: HANDLE, P2: LPPROCESSENTRY32W): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Process32NextW*(P1: HANDLE, P2: LPPROCESSENTRY32W): BOOL {.winapi, dynlib: "kernel32", importc.}

when not defined(winansi):
  proc Module32First*(P1: HANDLE, P2: LPMODULEENTRY32W): BOOL {.winapi, dynlib: "kernel32", importc: "Module32FirstW".}
  proc Module32Next*(P1: HANDLE, P2: LPMODULEENTRY32W): BOOL {.winapi, dynlib: "kernel32", importc: "Module32NextW".}
  proc Process32First*(P1: HANDLE, P2: LPPROCESSENTRY32W): BOOL {.winapi, dynlib: "kernel32", importc: "Process32FirstW".}
  proc Process32Next*(P1: HANDLE, P2: LPPROCESSENTRY32W): BOOL {.winapi, dynlib: "kernel32", importc: "Process32NextW".}

else:
  proc Module32First*(P1: HANDLE, P2: LPMODULEENTRY32): BOOL {.winapi, dynlib: "kernel32", importc.}
  proc Module32Next*(P1: HANDLE, P2: LPMODULEENTRY32): BOOL {.winapi, dynlib: "kernel32", importc.}
  proc Process32First*(P1: HANDLE, P2: LPPROCESSENTRY32): BOOL {.winapi, dynlib: "kernel32", importc.}
  proc Process32Next*(P1: HANDLE, P2: LPPROCESSENTRY32): BOOL {.winapi, dynlib: "kernel32", importc.}

# ext/tmschema.nim

const
  BP_PUSHBUTTON* = 1
  BP_RADIOBUTTON* = 2
  BP_CHECKBOX* = 3
  BP_GROUPBOX* = 4
  BP_USERBUTTON* = 5
  CBS_UNCHECKEDNORMAL* = 1
  CBS_UNCHECKEDHOT* = 2
  CBS_UNCHECKEDPRESSED* = 3
  CBS_UNCHECKEDDISABLED* = 4
  CBS_CHECKEDNORMAL* = 5
  CBS_CHECKEDHOT* = 6
  CBS_CHECKEDPRESSED* = 7
  CBS_CHECKEDDISABLED* = 8
  CBS_MIXEDNORMAL* = 9
  CBS_MIXEDHOT* = 10
  CBS_MIXEDPRESSED* = 11
  CBS_MIXEDDISABLED* = 12
  GBS_NORMAL* = 1
  GBS_DISABLED* = 2
  PBS_NORMAL* = 1
  PBS_HOT* = 2
  PBS_PRESSED* = 3
  PBS_DISABLED* = 4
  PBS_DEFAULTED* = 5
  RBS_UNCHECKEDNORMAL* = 1
  RBS_UNCHECKEDHOT* = 2
  RBS_UNCHECKEDPRESSED* = 3
  RBS_UNCHECKEDDISABLED* = 4
  RBS_CHECKEDNORMAL* = 5
  RBS_CHECKEDHOT* = 6
  RBS_CHECKEDPRESSED* = 7
  RBS_CHECKEDDISABLED* = 8
  CLP_TIME* = 1
  CLS_NORMAL* = 1
  CP_DROPDOWNBUTTON* = 1
  CBXS_NORMAL* = 1
  CBXS_HOT* = 2
  CBXS_PRESSED* = 3
  CBXS_DISABLED* = 4
  EP_EDITTEXT* = 1
  EP_CARET* = 2
  ETS_NORMAL* = 1
  ETS_HOT* = 2
  ETS_SELECTED* = 3
  ETS_DISABLED* = 4
  ETS_FOCUSED* = 5
  ETS_READONLY* = 6
  ETS_ASSIST* = 7
  EBP_HEADERBACKGROUND* = 1
  EBP_HEADERCLOSE* = 2
  EBP_HEADERPIN* = 3
  EBP_IEBARMENU* = 4
  EBP_NORMALGROUPBACKGROUND* = 5
  EBP_NORMALGROUPCOLLAPSE* = 6
  EBP_NORMALGROUPEXPAND* = 7
  EBP_NORMALGROUPHEAD* = 8
  EBP_SPECIALGROUPBACKGROUND* = 9
  EBP_SPECIALGROUPCOLLAPSE* = 10
  EBP_SPECIALGROUPEXPAND* = 11
  EBP_SPECIALGROUPHEAD* = 12
  EBHC_NORMAL* = 1
  EBHC_HOT* = 2
  EBHC_PRESSED* = 3
  EBHP_NORMAL* = 1
  EBHP_HOT* = 2
  EBHP_PRESSED* = 3
  EBHP_SELECTEDNORMAL* = 4
  EBHP_SELECTEDHOT* = 5
  EBHP_SELECTEDPRESSED* = 6
  EBM_NORMAL* = 1
  EBM_HOT* = 2
  EBM_PRESSED* = 3
  EBNGC_NORMAL* = 1
  EBNGC_HOT* = 2
  EBNGC_PRESSED* = 3
  EBNGE_NORMAL* = 1
  EBNGE_HOT* = 2
  EBNGE_PRESSED* = 3
  EBSGC_NORMAL* = 1
  EBSGC_HOT* = 2
  EBSGC_PRESSED* = 3
  EBSGE_NORMAL* = 1
  EBSGE_HOT* = 2
  EBSGE_PRESSED* = 3
  HP_HEADERITEM* = 1
  HP_HEADERITEMLEFT* = 2
  HP_HEADERITEMRIGHT* = 3
  HP_HEADERSORTARROW* = 4
  HIS_NORMAL* = 1
  HIS_HOT* = 2
  HIS_PRESSED* = 3
  HILS_NORMAL* = 1
  HILS_HOT* = 2
  HILS_PRESSED* = 3
  HIRS_NORMAL* = 1
  HIRS_HOT* = 2
  HIRS_PRESSED* = 3
  HSAS_SORTEDUP* = 1
  HSAS_SORTEDDOWN* = 2
  LVP_LISTITEM* = 1
  LVP_LISTGROUP* = 2
  LVP_LISTDETAIL* = 3
  LVP_LISTSORTEDDETAIL* = 4
  LVP_EMPTYTEXT* = 5
  LIS_NORMAL* = 1
  LIS_HOT* = 2
  LIS_SELECTED* = 3
  LIS_DISABLED* = 4
  LIS_SELECTEDNOTFOCUS* = 5
  MP_MENUITEM* = 1
  MP_MENUDROPDOWN* = 2
  MP_MENUBARITEM* = 3
  MP_MENUBARDROPDOWN* = 4
  MP_CHEVRON* = 5
  MP_SEPARATOR* = 6
  MS_NORMAL* = 1
  MS_SELECTED* = 2
  MS_DEMOTED* = 3
  MDP_NEWAPPBUTTON* = 1
  MDP_SEPERATOR* = 2
  MDS_NORMAL* = 1
  MDS_HOT* = 2
  MDS_PRESSED* = 3
  MDS_DISABLED* = 4
  MDS_CHECKED* = 5
  MDS_HOTCHECKED* = 6
  PGRP_UP* = 1
  PGRP_DOWN* = 2
  PGRP_UPHORZ* = 3
  PGRP_DOWNHORZ* = 4
  DNS_NORMAL* = 1
  DNS_HOT* = 2
  DNS_PRESSED* = 3
  DNS_DISABLED* = 4
  DNHZS_NORMAL* = 1
  DNHZS_HOT* = 2
  DNHZS_PRESSED* = 3
  DNHZS_DISABLED* = 4
  UPS_NORMAL* = 1
  UPS_HOT* = 2
  UPS_PRESSED* = 3
  UPS_DISABLED* = 4
  UPHZS_NORMAL* = 1
  UPHZS_HOT* = 2
  UPHZS_PRESSED* = 3
  UPHZS_DISABLED* = 4
  PP_BAR* = 1
  PP_BARVERT* = 2
  PP_CHUNK* = 3
  PP_CHUNKVERT* = 4
  RP_GRIPPER* = 1
  RP_GRIPPERVERT* = 2
  RP_BAND* = 3
  RP_CHEVRON* = 4
  RP_CHEVRONVERT* = 5
  CHEVS_NORMAL* = 1
  CHEVS_HOT* = 2
  CHEVS_PRESSED* = 3
  SBP_ARROWBTN* = 1
  SBP_THUMBBTNHORZ* = 2
  SBP_THUMBBTNVERT* = 3
  SBP_LOWERTRACKHORZ* = 4
  SBP_UPPERTRACKHORZ* = 5
  SBP_LOWERTRACKVERT* = 6
  SBP_UPPERTRACKVERT* = 7
  SBP_GRIPPERHORZ* = 8
  SBP_GRIPPERVERT* = 9
  SBP_SIZEBOX* = 10
  ABS_UPNORMAL* = 1
  ABS_UPHOT* = 2
  ABS_UPPRESSED* = 3
  ABS_UPDISABLED* = 4
  ABS_DOWNNORMAL* = 5
  ABS_DOWNHOT* = 6
  ABS_DOWNPRESSED* = 7
  ABS_DOWNDISABLED* = 8
  ABS_LEFTNORMAL* = 9
  ABS_LEFTHOT* = 10
  ABS_LEFTPRESSED* = 11
  ABS_LEFTDISABLED* = 12
  ABS_RIGHTNORMAL* = 13
  ABS_RIGHTHOT* = 14
  ABS_RIGHTPRESSED* = 15
  ABS_RIGHTDISABLED* = 16

  SCRBS_NORMAL* = 1
  SCRBS_HOT* = 2
  SCRBS_PRESSED* = 3
  SCRBS_DISABLED* = 4
  SZB_RIGHTALIGN* = 1
  SZB_LEFTALIGN* = 2
  SPNP_UP* = 1
  SPNP_DOWN* = 2
  SPNP_UPHORZ* = 3
  SPNP_DOWNHORZ* = 4
  SPP_USERPANE* = 1
  SPP_MOREPROGRAMS* = 2
  SPP_MOREPROGRAMSARROW* = 3
  SPP_PROGLIST* = 4
  SPP_PROGLISTSEPARATOR* = 5
  SPP_PLACESLIST* = 6
  SPP_PLACESLISTSEPARATOR* = 7
  SPP_LOGOFF* = 8
  SPP_LOGOFFBUTTONS* = 9
  SPP_USERPICTURE* = 10
  SPP_PREVIEW* = 11
  SPLS_NORMAL* = 1
  SPLS_HOT* = 2
  SPLS_PRESSED* = 3
  SPS_NORMAL* = 1
  SPS_HOT* = 2
  SPS_PRESSED* = 3
  SP_PANE* = 1
  SP_GRIPPERPANE* = 2
  SP_GRIPPER* = 3
  TABP_TABITEM* = 1
  TABP_TABITEMLEFTEDGE* = 2
  TABP_TABITEMRIGHTEDGE* = 3
  TABP_TABITEMBOTHEDGE* = 4
  TABP_TOPTABITEM* = 5
  TABP_TOPTABITEMLEFTEDGE* = 6
  TABP_TOPTABITEMRIGHTEDGE* = 7
  TABP_TOPTABITEMBOTHEDGE* = 8
  TABP_PANE* = 9
  TABP_BODY* = 10
  TIS_NORMAL* = 1
  TIS_HOT* = 2
  TIS_SELECTED* = 3
  TIS_DISABLED* = 4
  TIS_FOCUSED* = 5
  TIBES_NORMAL* = 1
  TIBES_HOT* = 2
  TIBES_SELECTED* = 3
  TIBES_DISABLED* = 4
  TIBES_FOCUSED* = 5
  TILES_NORMAL* = 1
  TILES_HOT* = 2
  TILES_SELECTED* = 3
  TILES_DISABLED* = 4
  TILES_FOCUSED* = 5
  TIRES_NORMAL* = 1
  TIRES_HOT* = 2
  TIRES_SELECTED* = 3
  TIRES_DISABLED* = 4
  TIRES_FOCUSED* = 5
  TTIS_NORMAL* = 1
  TTIS_HOT* = 2
  TTIS_SELECTED* = 3
  TTIS_DISABLED* = 4
  TTIS_FOCUSED* = 5
  TTIBES_NORMAL* = 1
  TTIBES_HOT* = 2
  TTIBES_SELECTED* = 3
  TTIBES_DISABLED* = 4
  TTIBES_FOCUSED* = 5
  TTILES_NORMAL* = 1
  TTILES_HOT* = 2
  TTILES_SELECTED* = 3
  TTILES_DISABLED* = 4
  TTILES_FOCUSED* = 5
  TTIRES_NORMAL* = 1
  TTIRES_HOT* = 2
  TTIRES_SELECTED* = 3
  TTIRES_DISABLED* = 4
  TTIRES_FOCUSED* = 5
  TDP_GROUPCOUNT* = 1
  TDP_FLASHBUTTON* = 2
  TDP_FLASHBUTTONGROUPMENU* = 3
  TBP_BACKGROUNDBOTTOM* = 1
  TBP_BACKGROUNDRIGHT* = 2
  TBP_BACKGROUNDTOP* = 3
  TBP_BACKGROUNDLEFT* = 4
  TBP_SIZINGBARBOTTOM* = 5
  TBP_SIZINGBARRIGHT* = 6
  TBP_SIZINGBARTOP* = 7
  TBP_SIZINGBARLEFT* = 8
  TP_BUTTON* = 1
  TP_DROPDOWNBUTTON* = 2
  TP_SPLITBUTTON* = 3
  TP_SPLITBUTTONDROPDOWN* = 4
  TP_SEPARATOR* = 5
  TP_SEPARATORVERT* = 6
  TS_NORMAL* = 1
  TS_HOT* = 2
  TS_PRESSED* = 3
  TS_DISABLED* = 4
  TS_CHECKED* = 5
  TS_HOTCHECKED* = 6
  TTP_STANDARD* = 1
  TTP_STANDARDTITLE* = 2
  TTP_BALLOON* = 3
  TTP_BALLOONTITLE* = 4
  TTP_CLOSE* = 5
  TTBS_NORMAL* = 1
  TTBS_LINK* = 2
  TTCS_NORMAL* = 1
  TTCS_HOT* = 2
  TTCS_PRESSED* = 3
  TTSS_NORMAL* = 1
  TTSS_LINK* = 2
  TKP_TRACK* = 1
  TKP_TRACKVERT* = 2
  TKP_THUMB* = 3
  TKP_THUMBBOTTOM* = 4
  TKP_THUMBTOP* = 5
  TKP_THUMBVERT* = 6
  TKP_THUMBLEFT* = 7
  TKP_THUMBRIGHT* = 8
  TKP_TICS* = 9
  TKP_TICSVERT* = 10
  TUS_NORMAL* = 1
  TUS_HOT* = 2
  TUS_PRESSED* = 3
  TUS_FOCUSED* = 4
  TUS_DISABLED* = 5
  TUBS_NORMAL* = 1
  TUBS_HOT* = 2
  TUBS_PRESSED* = 3
  TUBS_FOCUSED* = 4
  TUBS_DISABLED* = 5
  TUVLS_NORMAL* = 1
  TUVLS_HOT* = 2
  TUVLS_PRESSED* = 3
  TUVLS_FOCUSED* = 4
  TUVLS_DISABLED* = 5
  TUVRS_NORMAL* = 1
  TUVRS_HOT* = 2
  TUVRS_PRESSED* = 3
  TUVRS_FOCUSED* = 4
  TUVRS_DISABLED* = 5
  TUTS_NORMAL* = 1
  TUTS_HOT* = 2
  TUTS_PRESSED* = 3
  TUTS_FOCUSED* = 4
  TUTS_DISABLED* = 5
  TUVS_NORMAL* = 1
  TUVS_HOT* = 2
  TUVS_PRESSED* = 3
  TUVS_FOCUSED* = 4
  TUVS_DISABLED* = 5
  TSS_NORMAL* = 1
  TSVS_NORMAL* = 1
  TRS_NORMAL* = 1
  TRVS_NORMAL* = 1
  TNP_BACKGROUND* = 1
  TNP_ANIMBACKGROUND* = 2
  TVP_TREEITEM* = 1
  TVP_GLYPH* = 2
  TVP_BRANCH* = 3
  GLPS_CLOSED* = 1
  GLPS_OPENED* = 2
  TREIS_NORMAL* = 1
  TREIS_HOT* = 2
  TREIS_SELECTED* = 3
  TREIS_DISABLED* = 4
  TREIS_SELECTEDNOTFOCUS* = 5
  WP_CAPTION* = 1
  WP_SMALLCAPTION* = 2
  WP_MINCAPTION* = 3
  WP_SMALLMINCAPTION* = 4
  WP_MAXCAPTION* = 5
  WP_SMALLMAXCAPTION* = 6
  WP_FRAMELEFT* = 7
  WP_FRAMERIGHT* = 8
  WP_FRAMEBOTTOM* = 9
  WP_SMALLFRAMELEFT* = 10
  WP_SMALLFRAMERIGHT* = 11
  WP_SMALLFRAMEBOTTOM* = 12
  WP_SYSBUTTON* = 13
  WP_MDISYSBUTTON* = 14
  WP_MINBUTTON* = 15
  WP_MDIMINBUTTON* = 16
  WP_MAXBUTTON* = 17
  WP_CLOSEBUTTON* = 18
  WP_SMALLCLOSEBUTTON* = 19
  WP_MDICLOSEBUTTON* = 20
  WP_RESTOREBUTTON* = 21
  WP_MDIRESTOREBUTTON* = 22
  WP_HELPBUTTON* = 23
  WP_MDIHELPBUTTON* = 24
  WP_HORZSCROLL* = 25
  WP_HORZTHUMB* = 26
  WP_VERTSCROLL* = 27
  WP_VERTTHUMB* = 28
  WP_DIALOG* = 29
  WP_CAPTIONSIZINGTEMPLATE* = 30
  WP_SMALLCAPTIONSIZINGTEMPLATE* = 31
  WP_FRAMELEFTSIZINGTEMPLATE* = 32
  WP_SMALLFRAMELEFTSIZINGTEMPLATE* = 33
  WP_FRAMERIGHTSIZINGTEMPLATE* = 34
  WP_SMALLFRAMERIGHTSIZINGTEMPLATE* = 35
  WP_FRAMEBOTTOMSIZINGTEMPLATE* = 36
  WP_SMALLFRAMEBOTTOMSIZINGTEMPLATE* = 37
  CS_ACTIVE* = 1
  CS_INACTIVE* = 2
  CS_DISABLED* = 3
  CBS_NORMAL* = 1
  CBS_HOT* = 2
  CBS_PUSHED* = 3
  CBS_DISABLED* = 4
  FS_ACTIVE* = 1
  FS_INACTIVE* = 2
  HBS_NORMAL* = 1
  HBS_HOT* = 2
  HBS_PUSHED* = 3
  HBS_DISABLED* = 4
  HSS_NORMAL* = 1
  HSS_HOT* = 2
  HSS_PUSHED* = 3
  HSS_DISABLED* = 4
  HTS_NORMAL* = 1
  HTS_HOT* = 2
  HTS_PUSHED* = 3
  HTS_DISABLED* = 4
  MAXBS_NORMAL* = 1
  MAXBS_HOT* = 2
  MAXBS_PUSHED* = 3
  MAXBS_DISABLED* = 4
  MXCS_ACTIVE* = 1
  MXCS_INACTIVE* = 2
  MXCS_DISABLED* = 3
  MINBS_NORMAL* = 1
  MINBS_HOT* = 2
  MINBS_PUSHED* = 3
  MINBS_DISABLED* = 4
  RBS_NORMAL* = 1
  RBS_HOT* = 2
  RBS_PUSHED* = 3
  RBS_DISABLED* = 4
  SBS_NORMAL* = 1
  SBS_HOT* = 2
  SBS_PUSHED* = 3
  SBS_DISABLED* = 4
  MNCS_ACTIVE* = 1
  MNCS_INACTIVE* = 2
  MNCS_DISABLED* = 3
  VSS_NORMAL* = 1
  VSS_HOT* = 2
  VSS_PUSHED* = 3
  VSS_DISABLED* = 4
  VTS_NORMAL* = 1
  VTS_HOT* = 2
  VTS_PUSHED* = 3
  VTS_DISABLED* = 4

# ext/mmsystem.nim

template MAKEFOURCC*(c0, c1, c2, c3: char): DWORD = c0.DWORD or (c1.DWORD shl 8) or (c2.DWORD shl 16) or (c3.DWORD shl 24)
template mmioFOURCC*(c0, c1, c2, c3: char): DWORD = c0.DWORD or (c1.DWORD shl 8) or (c2.DWORD shl 16) or (c3.DWORD shl 24)
template sndAlias(c0, c1: char): DWORD = (SND_ALIAS_START.DWORD + c0.DWORD or (c1.DWORD shl 8))

const
  MAXPNAMELEN* = 32
  MAXERRORLENGTH* = 256
  MAX_JOYSTICKOEMVXDNAME* = 260
  TIME_MS* = 1
  TIME_SAMPLES* = 2
  TIME_BYTES* = 4
  TIME_SMPTE* = 8
  TIME_MIDI* = 16
  TIME_TICKS* = 32
  MM_JOY1MOVE* = 0x3A0
  MM_JOY2MOVE* = 0x3A1
  MM_JOY1ZMOVE* = 0x3A2
  MM_JOY2ZMOVE* = 0x3A3
  MM_JOY1BUTTONDOWN* = 0x3B5
  MM_JOY2BUTTONDOWN* = 0x3B6
  MM_JOY1BUTTONUP* = 0x3B7
  MM_JOY2BUTTONUP* = 0x3B8
  MM_MCINOTIFY* = 0x3B9
  MM_WOM_OPEN* = 0x3BB
  MM_WOM_CLOSE* = 0x3BC
  MM_WOM_DONE* = 0x3BD
  MM_WIM_OPEN* = 0x3BE
  MM_WIM_CLOSE* = 0x3BF
  MM_WIM_DATA* = 0x3C0
  MM_MIM_OPEN* = 0x3C1
  MM_MIM_CLOSE* = 0x3C2
  MM_MIM_DATA* = 0x3C3
  MM_MIM_LONGDATA* = 0x3C4
  MM_MIM_ERROR* = 0x3C5
  MM_MIM_LONGERROR* = 0x3C6
  MM_MOM_OPEN* = 0x3C7
  MM_MOM_CLOSE* = 0x3C8
  MM_MOM_DONE* = 0x3C9
  MM_DRVM_OPEN* = 0x3D0
  MM_DRVM_CLOSE* = 0x3D1
  MM_DRVM_DATA* = 0x3D2
  MM_DRVM_ERROR* = 0x3D3
  MM_STREAM_OPEN* = 0x3D4
  MM_STREAM_CLOSE* = 0x3D5
  MM_STREAM_DONE* = 0x3D6
  MM_STREAM_ERROR* = 0x3D7
  MM_MOM_POSITIONCB* = 0x3CA
  MM_MCISIGNAL* = 0x3CB
  MM_MIM_MOREDATA* = 0x3CC
  MM_MIXM_LINE_CHANGE* = 0x3D0
  MM_MIXM_CONTROL_CHANGE* = 0x3D1
  MMSYSERR_BASE* = 0
  WAVERR_BASE* = 32
  MIDIERR_BASE* = 64
  TIMERR_BASE* = 96
  JOYERR_BASE* = 160
  MCIERR_BASE* = 256
  MIXERR_BASE* = 1024
  MCI_STRING_OFFSET* = 512
  MCI_VD_OFFSET* = 1024
  MCI_CD_OFFSET* = 1088
  MCI_WAVE_OFFSET* = 1152
  MCI_SEQ_OFFSET* = 1216
  MMSYSERR_NOERROR* = 0
  MMSYSERR_ERROR* = MMSYSERR_BASE+1
  MMSYSERR_BADDEVICEID* = MMSYSERR_BASE+1 + 1
  MMSYSERR_NOTENABLED* = MMSYSERR_BASE+1 + 2
  MMSYSERR_ALLOCATED* = MMSYSERR_BASE+1 + 3
  MMSYSERR_INVALHANDLE* = MMSYSERR_BASE+1 + 4
  MMSYSERR_NODRIVER* = MMSYSERR_BASE+1 + 5
  MMSYSERR_NOMEM* = MMSYSERR_BASE+1 + 6
  MMSYSERR_NOTSUPPORTED* = MMSYSERR_BASE+1 + 7
  MMSYSERR_BADERRNUM* = MMSYSERR_BASE+1 + 8
  MMSYSERR_INVALFLAG* = MMSYSERR_BASE+1 + 9
  MMSYSERR_INVALPARAM* = MMSYSERR_BASE+1 + 10
  MMSYSERR_HANDLEBUSY* = MMSYSERR_BASE+1 + 11
  MMSYSERR_INVALIDALIAS* = MMSYSERR_BASE+1 + 12
  MMSYSERR_BADDB* = MMSYSERR_BASE+1 + 13
  MMSYSERR_KEYNOTFOUND* = MMSYSERR_BASE+1 + 14
  MMSYSERR_READERROR* = MMSYSERR_BASE+1 + 15
  MMSYSERR_WRITEERROR* = MMSYSERR_BASE+1 + 16
  MMSYSERR_DELETEERROR* = MMSYSERR_BASE+1 + 17
  MMSYSERR_VALNOTFOUND* = MMSYSERR_BASE+1 + 18
  MMSYSERR_NODRIVERCB* = MMSYSERR_BASE+1 + 19
  MMSYSERR_LASTERROR* = MMSYSERR_NODRIVERCB
  DRV_LOAD* = 1
  DRV_ENABLE* = 2
  DRV_OPEN* = 3
  DRV_CLOSE* = 4
  DRV_DISABLE* = 5
  DRV_FREE* = 6
  DRV_CONFIGURE* = 7
  DRV_QUERYCONFIGURE* = 8
  DRV_INSTALL* = 9
  DRV_REMOVE* = 10
  DRV_EXITSESSION* = 11
  DRV_POWER* = 12
  DRV_RESERVED* = 0x800
  DRV_USER* = 0x4000
  DRVCNF_CANCEL* = 0
  DRVCNF_OK* = 1
  DRVCNF_RESTART* = 2
  DRV_CANCEL* = DRVCNF_CANCEL
  DRV_OK* = DRVCNF_OK
  DRV_RESTART* = DRVCNF_RESTART
  DRV_MCI_FIRST* = DRV_RESERVED
  DRV_MCI_LAST* = DRV_RESERVED + 0xFFF
  CALLBACK_TYPEMASK* = 0x70000
  CALLBACK_NULL* = 0
  CALLBACK_WINDOW* = 0x10000
  CALLBACK_TASK* = 0x20000
  CALLBACK_FUNCTION* = 0x30000
  CALLBACK_THREAD* = CALLBACK_TASK
  CALLBACK_EVENT* = 0x50000
  SND_SYNC* = 0
  SND_ASYNC* = 1
  SND_NODEFAULT* = 2
  SND_MEMORY* = 4
  SND_LOOP* = 8
  SND_NOSTOP* = 16
  SND_NOWAIT* = 0x2000
  SND_ALIAS* = 0x10000
  SND_ALIAS_ID* = 0x110000
  SND_FILENAME* = 0x20000
  SND_RESOURCE* = 0x40004
  SND_PURGE* = 0x40
  SND_APPLICATION* = 0x80
  SND_ALIAS_START* = 0
  SND_ALIAS_SYSTEMASTERISK* = sndAlias('S','*')
  SND_ALIAS_SYSTEMQUESTION* = sndAlias('S','?')
  SND_ALIAS_SYSTEMHAND* = sndAlias('S','H')
  SND_ALIAS_SYSTEMEXIT* = sndAlias('S','E')
  SND_ALIAS_SYSTEMSTART* = sndAlias('S','S')
  SND_ALIAS_SYSTEMWELCOME* = sndAlias('S','W')
  SND_ALIAS_SYSTEMEXCLAMATION* = sndAlias('S','!')
  SND_ALIAS_SYSTEMDEFAULT* = sndAlias('S','D')
  WAVERR_BADFORMAT* = ( WAVERR_BASE + 0 )
  WAVERR_STILLPLAYING* = (( WAVERR_BASE + 0 )) + 1
  WAVERR_UNPREPARED* = (( WAVERR_BASE + 0 )) + 2
  WAVERR_SYNC* = (( WAVERR_BASE + 0 )) + 3
  WAVERR_LASTERROR* = WAVERR_SYNC
  WOM_OPEN* = MM_WOM_OPEN
  WOM_CLOSE* = MM_WOM_CLOSE
  WOM_DONE* = MM_WOM_DONE
  WIM_OPEN* = MM_WIM_OPEN
  WIM_CLOSE* = MM_WIM_CLOSE
  WIM_DATA* = MM_WIM_DATA
  WAVE_MAPPER* = 0xFFFFFFFF'u32
  WAVE_FORMAT_QUERY* = 1
  WAVE_ALLOWSYNC* = 2
  WAVE_MAPPED* = 4
  WAVE_FORMAT_DIRECT* = 8
  WAVE_FORMAT_DIRECT_QUERY* = ( WAVE_FORMAT_QUERY or WAVE_FORMAT_DIRECT )
  WHDR_DONE* = 1
  WHDR_PREPARED* = 2
  WHDR_BEGINLOOP* = 4
  WHDR_ENDLOOP* = 8
  WHDR_INQUEUE* = 16
  WAVECAPS_PITCH* = 1
  WAVECAPS_PLAYBACKRATE* = 2
  WAVECAPS_VOLUME* = 4
  WAVECAPS_LRVOLUME* = 8
  WAVECAPS_SYNC* = 16
  WAVECAPS_SAMPLEACCURATE* = 32
  WAVECAPS_DIRECTSOUND* = 64
  WAVE_INVALIDFORMAT* = 0
  WAVE_FORMAT_1M08* = 1
  WAVE_FORMAT_1S08* = 2
  WAVE_FORMAT_1M16* = 4
  WAVE_FORMAT_1S16* = 8
  WAVE_FORMAT_2M08* = 16
  WAVE_FORMAT_2S08* = 32
  WAVE_FORMAT_2M16* = 64
  WAVE_FORMAT_2S16* = 128
  WAVE_FORMAT_4M08* = 256
  WAVE_FORMAT_4S08* = 512
  WAVE_FORMAT_4M16* = 1024
  WAVE_FORMAT_4S16* = 2048
  WAVE_FORMAT_PCM* = 1
  MIDIERR_UNPREPARED* = MIDIERR_BASE
  MIDIERR_STILLPLAYING* = MIDIERR_BASE + 1
  MIDIERR_NOMAP* = MIDIERR_BASE + 2
  MIDIERR_NOTREADY* = MIDIERR_BASE + 3
  MIDIERR_NODEVICE* = MIDIERR_BASE + 4
  MIDIERR_INVALIDSETUP* = MIDIERR_BASE + 5
  MIDIERR_BADOPENMODE* = MIDIERR_BASE + 6
  MIDIERR_DONT_CONTINUE* = MIDIERR_BASE + 7
  MIDIERR_LASTERROR* = MIDIERR_DONT_CONTINUE
  MIDIPATCHSIZE* = 128
  MIM_OPEN* = MM_MIM_OPEN
  MIM_CLOSE* = MM_MIM_CLOSE
  MIM_DATA* = MM_MIM_DATA
  MIM_LONGDATA* = MM_MIM_LONGDATA
  MIM_ERROR* = MM_MIM_ERROR
  MIM_LONGERROR* = MM_MIM_LONGERROR
  MOM_OPEN* = MM_MOM_OPEN
  MOM_CLOSE* = MM_MOM_CLOSE
  MOM_DONE* = MM_MOM_DONE
  MIM_MOREDATA* = MM_MIM_MOREDATA
  MOM_POSITIONCB* = MM_MOM_POSITIONCB
  MIDI_MAPPER* = 0xFFFFFFFF'u32
  MIDI_IO_STATUS* = 32
  MIDI_CACHE_ALL* = 1
  MIDI_CACHE_BESTFIT* = 2
  MIDI_CACHE_QUERY* = 3
  MIDI_UNCACHE* = 4
  MOD_MIDIPORT* = 1
  MOD_SYNTH* = 2
  MOD_SQSYNTH* = 3
  MOD_FMSYNTH* = 4
  MOD_MAPPER* = 5
  MIDICAPS_VOLUME* = 1
  MIDICAPS_LRVOLUME* = 2
  MIDICAPS_CACHE* = 4
  MIDICAPS_STREAM* = 8
  MHDR_DONE* = 1
  MHDR_PREPARED* = 2
  MHDR_INQUEUE* = 4
  MHDR_ISSTRM* = 8
  MEVT_F_SHORT* = 0
  MEVT_F_LONG* = 0x80000000'i32
  MEVT_F_CALLBACK* = 0x40000000

proc MEVT_EVENTTYPE*(x: DWORD): BYTE = ((x shr 24) and 0xFF).BYTE
proc MEVT_EVENTPARM*(x: DWORD): DWORD = x and 0xFFFFFF

const
  MEVT_SHORTMSG* = 0
  MEVT_TEMPO* = 1
  MEVT_NOP* = 2
  MEVT_LONGMSG* = 0x80
  MEVT_COMMENT* = 0x82
  MEVT_VERSION* = 0x84
  MIDISTRM_ERROR* = -2
  MIDIPROP_SET* = 0x80000000'i32
  MIDIPROP_GET* = 0x40000000
  MIDIPROP_TIMEDIV* = 1
  MIDIPROP_TEMPO* = 2
  AUX_MAPPER* = 0xFFFFFFFF'u32
  AUXCAPS_CDAUDIO* = 1
  AUXCAPS_AUXIN* = 2
  AUXCAPS_VOLUME* = 1
  AUXCAPS_LRVOLUME* = 2
  MIXER_SHORT_NAME_CHARS* = 16
  MIXER_LONG_NAME_CHARS* = 64
  MIXERR_INVALLINE* = MIXERR_BASE
  MIXERR_INVALCONTROL* = ( MIXERR_BASE+1 )
  MIXERR_INVALVALUE* = ( MIXERR_BASE+2 )
  MIXERR_LASTERROR* = ( MIXERR_BASE+2 )
  MIXER_OBJECTF_HANDLE* = 0x80000000'i32
  MIXER_OBJECTF_MIXER* = 0
  MIXER_OBJECTF_HMIXER* = ( MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_MIXER )
  MIXER_OBJECTF_WAVEOUT* = 0x10000000
  MIXER_OBJECTF_HWAVEOUT* = ( MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_WAVEOUT )
  MIXER_OBJECTF_WAVEIN* = 0x20000000
  MIXER_OBJECTF_HWAVEIN* = ( MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_WAVEIN )
  MIXER_OBJECTF_MIDIOUT* = 0x30000000
  MIXER_OBJECTF_HMIDIOUT* = ( MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_MIDIOUT )
  MIXER_OBJECTF_MIDIIN* = 0x40000000
  MIXER_OBJECTF_HMIDIIN* = ( MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_MIDIIN )
  MIXER_OBJECTF_AUX* = 0x50000000
  MIXERLINE_LINEF_ACTIVE* = 1
  MIXERLINE_LINEF_DISCONNECTED* = 0x8000
  MIXERLINE_LINEF_SOURCE* = 0x80000000'i32
  MIXERLINE_COMPONENTTYPE_DST_FIRST* = 0
  MIXERLINE_COMPONENTTYPE_DST_UNDEFINED* = MIXERLINE_COMPONENTTYPE_DST_FIRST
  MIXERLINE_COMPONENTTYPE_DST_DIGITAL* = ( MIXERLINE_COMPONENTTYPE_DST_FIRST+1 )
  MIXERLINE_COMPONENTTYPE_DST_LINE* = ( MIXERLINE_COMPONENTTYPE_DST_FIRST+2 )
  MIXERLINE_COMPONENTTYPE_DST_MONITOR* = ( MIXERLINE_COMPONENTTYPE_DST_FIRST+3 )
  MIXERLINE_COMPONENTTYPE_DST_SPEAKERS* = ( MIXERLINE_COMPONENTTYPE_DST_FIRST+4 )
  MIXERLINE_COMPONENTTYPE_DST_HEADPHONES* = ( MIXERLINE_COMPONENTTYPE_DST_FIRST+5 )
  MIXERLINE_COMPONENTTYPE_DST_TELEPHONE* = ( MIXERLINE_COMPONENTTYPE_DST_FIRST+6 )
  MIXERLINE_COMPONENTTYPE_DST_WAVEIN* = ( MIXERLINE_COMPONENTTYPE_DST_FIRST+7 )
  MIXERLINE_COMPONENTTYPE_DST_VOICEIN* = ( MIXERLINE_COMPONENTTYPE_DST_FIRST+8 )
  MIXERLINE_COMPONENTTYPE_DST_LAST* = ( MIXERLINE_COMPONENTTYPE_DST_FIRST+8 )
  MIXERLINE_COMPONENTTYPE_SRC_FIRST* = 0x1000
  MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED* = MIXERLINE_COMPONENTTYPE_SRC_FIRST
  MIXERLINE_COMPONENTTYPE_SRC_DIGITAL* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+1 )
  MIXERLINE_COMPONENTTYPE_SRC_LINE* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+2 )
  MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+3 )
  MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+4 )
  MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+5 )
  MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+6 )
  MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+7 )
  MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+8 )
  MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+9 )
  MIXERLINE_COMPONENTTYPE_SRC_ANALOG* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+10 )
  MIXERLINE_COMPONENTTYPE_SRC_LAST* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+10 )
  MIXERLINE_TARGETTYPE_UNDEFINED* = 0
  MIXERLINE_TARGETTYPE_WAVEOUT* = 1
  MIXERLINE_TARGETTYPE_WAVEIN* = 2
  MIXERLINE_TARGETTYPE_MIDIOUT* = 3
  MIXERLINE_TARGETTYPE_MIDIIN* = 4
  MIXERLINE_TARGETTYPE_AUX* = 5
  MIXER_GETLINEINFOF_DESTINATION* = 0
  MIXER_GETLINEINFOF_SOURCE* = 1
  MIXER_GETLINEINFOF_LINEID* = 2
  MIXER_GETLINEINFOF_COMPONENTTYPE* = 3
  MIXER_GETLINEINFOF_TARGETTYPE* = 4
  MIXER_GETLINEINFOF_QUERYMASK* = 15
  MIXERCONTROL_CONTROLF_UNIFORM* = 1
  MIXERCONTROL_CONTROLF_MULTIPLE* = 2
  MIXERCONTROL_CONTROLF_DISABLED* = 0x80000000'i32
  MIXERCONTROL_CT_CLASS_MASK* = -268435456
  MIXERCONTROL_CT_CLASS_CUSTOM* = 0
  MIXERCONTROL_CT_CLASS_METER* = 0x10000000
  MIXERCONTROL_CT_CLASS_SWITCH* = 0x20000000
  MIXERCONTROL_CT_CLASS_NUMBER* = 0x30000000
  MIXERCONTROL_CT_CLASS_SLIDER* = 0x40000000
  MIXERCONTROL_CT_CLASS_FADER* = 0x50000000
  MIXERCONTROL_CT_CLASS_TIME* = 0x60000000
  MIXERCONTROL_CT_CLASS_LIST* = 0x70000000
  MIXERCONTROL_CT_SUBCLASS_MASK* = 0xF000000
  MIXERCONTROL_CT_SC_SWITCH_BOOLEAN* = 0
  MIXERCONTROL_CT_SC_SWITCH_BUTTON* = 0x1000000
  MIXERCONTROL_CT_SC_METER_POLLED* = 0
  MIXERCONTROL_CT_SC_TIME_MICROSECS* = 0
  MIXERCONTROL_CT_SC_TIME_MILLISECS* = 0x1000000
  MIXERCONTROL_CT_SC_LIST_SINGLE* = 0
  MIXERCONTROL_CT_SC_LIST_MULTIPLE* = 0x1000000
  MIXERCONTROL_CT_UNITS_MASK* = 0xFF0000
  MIXERCONTROL_CT_UNITS_CUSTOM* = 0
  MIXERCONTROL_CT_UNITS_BOOLEAN* = 0x10000
  MIXERCONTROL_CT_UNITS_SIGNED* = 0x20000
  MIXERCONTROL_CT_UNITS_UNSIGNED* = 0x30000
  MIXERCONTROL_CT_UNITS_DECIBELS* = 0x40000
  MIXERCONTROL_CT_UNITS_PERCENT* = 0x50000
  MIXERCONTROL_CONTROLTYPE_CUSTOM* = ( MIXERCONTROL_CT_CLASS_CUSTOM or MIXERCONTROL_CT_UNITS_CUSTOM )
  MIXERCONTROL_CONTROLTYPE_BOOLEANMETER* = ( MIXERCONTROL_CT_CLASS_METER or MIXERCONTROL_CT_SC_METER_POLLED or MIXERCONTROL_CT_UNITS_BOOLEAN )
  MIXERCONTROL_CONTROLTYPE_SIGNEDMETER* = ( MIXERCONTROL_CT_CLASS_METER or MIXERCONTROL_CT_SC_METER_POLLED or MIXERCONTROL_CT_UNITS_SIGNED )
  MIXERCONTROL_CONTROLTYPE_PEAKMETER* = ( MIXERCONTROL_CONTROLTYPE_SIGNEDMETER+1 )
  MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER* = ( MIXERCONTROL_CT_CLASS_METER or MIXERCONTROL_CT_SC_METER_POLLED or MIXERCONTROL_CT_UNITS_UNSIGNED )
  MIXERCONTROL_CONTROLTYPE_BOOLEAN* = ( MIXERCONTROL_CT_CLASS_SWITCH or MIXERCONTROL_CT_SC_SWITCH_BOOLEAN or MIXERCONTROL_CT_UNITS_BOOLEAN )
  MIXERCONTROL_CONTROLTYPE_ONOFF* = ( MIXERCONTROL_CONTROLTYPE_BOOLEAN+1 )
  MIXERCONTROL_CONTROLTYPE_MUTE* = ( MIXERCONTROL_CONTROLTYPE_BOOLEAN+2 )
  MIXERCONTROL_CONTROLTYPE_MONO* = ( MIXERCONTROL_CONTROLTYPE_BOOLEAN+3 )
  MIXERCONTROL_CONTROLTYPE_LOUDNESS* = ( MIXERCONTROL_CONTROLTYPE_BOOLEAN+4 )
  MIXERCONTROL_CONTROLTYPE_STEREOENH* = ( MIXERCONTROL_CONTROLTYPE_BOOLEAN+5 )
  MIXERCONTROL_CONTROLTYPE_BUTTON* = ( MIXERCONTROL_CT_CLASS_SWITCH or MIXERCONTROL_CT_SC_SWITCH_BUTTON or MIXERCONTROL_CT_UNITS_BOOLEAN )
  MIXERCONTROL_CONTROLTYPE_DECIBELS* = ( MIXERCONTROL_CT_CLASS_NUMBER or MIXERCONTROL_CT_UNITS_DECIBELS )
  MIXERCONTROL_CONTROLTYPE_SIGNED* = ( MIXERCONTROL_CT_CLASS_NUMBER or MIXERCONTROL_CT_UNITS_SIGNED )
  MIXERCONTROL_CONTROLTYPE_UNSIGNED* = ( MIXERCONTROL_CT_CLASS_NUMBER or MIXERCONTROL_CT_UNITS_UNSIGNED )
  MIXERCONTROL_CONTROLTYPE_PERCENT* = ( MIXERCONTROL_CT_CLASS_NUMBER or MIXERCONTROL_CT_UNITS_PERCENT )
  MIXERCONTROL_CONTROLTYPE_SLIDER* = ( MIXERCONTROL_CT_CLASS_SLIDER or MIXERCONTROL_CT_UNITS_SIGNED )
  MIXERCONTROL_CONTROLTYPE_PAN* = ( MIXERCONTROL_CONTROLTYPE_SLIDER+1 )
  MIXERCONTROL_CONTROLTYPE_QSOUNDPAN* = ( MIXERCONTROL_CONTROLTYPE_SLIDER+2 )
  MIXERCONTROL_CONTROLTYPE_FADER* = ( MIXERCONTROL_CT_CLASS_FADER or MIXERCONTROL_CT_UNITS_UNSIGNED )
  MIXERCONTROL_CONTROLTYPE_VOLUME* = ( MIXERCONTROL_CONTROLTYPE_FADER+1 )
  MIXERCONTROL_CONTROLTYPE_BASS* = ( MIXERCONTROL_CONTROLTYPE_FADER+2 )
  MIXERCONTROL_CONTROLTYPE_TREBLE* = ( MIXERCONTROL_CONTROLTYPE_FADER+3 )
  MIXERCONTROL_CONTROLTYPE_EQUALIZER* = ( MIXERCONTROL_CONTROLTYPE_FADER+4 )
  MIXERCONTROL_CONTROLTYPE_SINGLESELECT* = ( MIXERCONTROL_CT_CLASS_LIST or MIXERCONTROL_CT_SC_LIST_SINGLE or MIXERCONTROL_CT_UNITS_BOOLEAN )
  MIXERCONTROL_CONTROLTYPE_MUX* = ( MIXERCONTROL_CONTROLTYPE_SINGLESELECT+1 )
  MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT* = ( MIXERCONTROL_CT_CLASS_LIST or MIXERCONTROL_CT_SC_LIST_MULTIPLE or MIXERCONTROL_CT_UNITS_BOOLEAN )
  MIXERCONTROL_CONTROLTYPE_MIXER* = ( MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT+1 )
  MIXERCONTROL_CONTROLTYPE_MICROTIME* = ( MIXERCONTROL_CT_CLASS_TIME or MIXERCONTROL_CT_SC_TIME_MICROSECS or MIXERCONTROL_CT_UNITS_UNSIGNED )
  MIXERCONTROL_CONTROLTYPE_MILLITIME* = ( MIXERCONTROL_CT_CLASS_TIME or MIXERCONTROL_CT_SC_TIME_MILLISECS or MIXERCONTROL_CT_UNITS_UNSIGNED )
  MIXER_GETLINECONTROLSF_ALL* = 0
  MIXER_GETLINECONTROLSF_ONEBYID* = 1
  MIXER_GETLINECONTROLSF_ONEBYTYPE* = 2
  MIXER_GETLINECONTROLSF_QUERYMASK* = 15
  MIXER_GETCONTROLDETAILSF_VALUE* = 0
  MIXER_GETCONTROLDETAILSF_LISTTEXT* = 1
  MIXER_GETCONTROLDETAILSF_QUERYMASK* = 15
  MIXER_SETCONTROLDETAILSF_VALUE* = 0
  MIXER_SETCONTROLDETAILSF_CUSTOM* = 1
  MIXER_SETCONTROLDETAILSF_QUERYMASK* = 15
  TIMERR_NOERROR* = 0
  TIMERR_NOCANDO* = ( TIMERR_BASE+1 )
  TIMERR_STRUCT* = ( TIMERR_BASE+33 )
  TIME_ONESHOT* = 0
  TIME_PERIODIC* = 1
  TIME_CALLBACK_FUNCTION* = 0
  TIME_CALLBACK_EVENT_SET* = 16
  TIME_CALLBACK_EVENT_PULSE* = 32
  TIME_KILL_SYNCHRONOUS* = 0x0100
  JOYERR_NOERROR* = 0
  JOYERR_PARMS* = ( JOYERR_BASE+5 )
  JOYERR_NOCANDO* = ( JOYERR_BASE+6 )
  JOYERR_UNPLUGGED* = ( JOYERR_BASE+7 )
  JOY_BUTTON1* = 1
  JOY_BUTTON2* = 2
  JOY_BUTTON3* = 4
  JOY_BUTTON4* = 8
  JOY_BUTTON1CHG* = 256
  JOY_BUTTON2CHG* = 512
  JOY_BUTTON3CHG* = 1024
  JOY_BUTTON4CHG* = 2048
  JOY_BUTTON5* = 257
  JOY_BUTTON6* = 513
  JOY_BUTTON7* = 1025
  JOY_BUTTON8* = 2049
  JOY_BUTTON9* = 256
  JOY_BUTTON10* = 512
  JOY_BUTTON11* = 1024
  JOY_BUTTON12* = 2048
  JOY_BUTTON13* = 4096
  JOY_BUTTON14* = 8192
  JOY_BUTTON15* = 16384
  JOY_BUTTON16* = 32768
  JOY_BUTTON17* = 65536
  JOY_BUTTON18* = 0x20000
  JOY_BUTTON19* = 0x40000
  JOY_BUTTON20* = 0x80000
  JOY_BUTTON21* = 0x100000
  JOY_BUTTON22* = 0x200000
  JOY_BUTTON23* = 0x400000
  JOY_BUTTON24* = 0x800000
  JOY_BUTTON25* = 0x1000000
  JOY_BUTTON26* = 0x2000000
  JOY_BUTTON27* = 0x4000000
  JOY_BUTTON28* = 0x8000000
  JOY_BUTTON29* = 0x10000000
  JOY_BUTTON30* = 0x20000000
  JOY_BUTTON31* = 0x40000000
  JOY_BUTTON32* = 0x80000000'i32
  JOY_POVCENTERED* = 0xFFFFFFFF'u32
  JOY_POVFORWARD* = 0
  JOY_POVBACKWARD* = 18000
  JOY_POVLEFT* = 27000
  JOY_POVRIGHT* = 9000
  JOY_RETURNX* = 0x00000001
  JOY_RETURNY* = 0x00000002
  JOY_RETURNZ* = 0x00000004
  JOY_RETURNR* = 0x00000008
  JOY_RETURNU* = 0x00000010
  JOY_RETURNV* = 0x00000020
  JOY_RETURNPOV* = 0x00000040
  JOY_RETURNBUTTONS* = 0x00000080
  JOY_RETURNRAWDATA* = 0x00000100
  JOY_RETURNPOVCTS* = 0x00000200
  JOY_RETURNCENTERED* = 0x00000400
  JOY_USEDEADZONE* = 0x00000800
  JOY_RETURNALL* = (JOY_RETURNX or JOY_RETURNY or JOY_RETURNZ or JOY_RETURNR or JOY_RETURNU or JOY_RETURNV or JOY_RETURNPOV or JOY_RETURNBUTTONS).DWORD
  JOY_CAL_READALWAYS* = 0x00010000
  JOY_CAL_READXYONLY* = 0x00020000
  JOY_CAL_READ3* = 0x00040000
  JOY_CAL_READ4* = 0x00080000
  JOY_CAL_READXONLY* = 0x00100000
  JOY_CAL_READYONLY* = 0x00200000
  JOY_CAL_READ5* = 0x00400000
  JOY_CAL_READ6* = 0x00800000
  JOY_CAL_READZONLY* = 0x01000000
  JOY_CAL_READRONLY* = 0x02000000
  JOY_CAL_READUONLY* = 0x04000000
  JOY_CAL_READVONLY* = 0x08000000
  JOYSTICKID1* = 0
  JOYSTICKID2* = 1
  JOYCAPS_HASZ* = 1
  JOYCAPS_HASR* = 2
  JOYCAPS_HASU* = 4
  JOYCAPS_HASV* = 8
  JOYCAPS_HASPOV* = 16
  JOYCAPS_POV4DIR* = 32
  JOYCAPS_POVCTS* = 64
  MMIOERR_BASE* = 256
  MMIOERR_FILENOTFOUND* = ( MMIOERR_BASE+1 )
  MMIOERR_OUTOFMEMORY* = ( MMIOERR_BASE+2 )
  MMIOERR_CANNOTOPEN* = ( MMIOERR_BASE+3 )
  MMIOERR_CANNOTCLOSE* = ( MMIOERR_BASE+4 )
  MMIOERR_CANNOTREAD* = ( MMIOERR_BASE+5 )
  MMIOERR_CANNOTWRITE* = ( MMIOERR_BASE+6 )
  MMIOERR_CANNOTSEEK* = ( MMIOERR_BASE+7 )
  MMIOERR_CANNOTEXPAND* = ( MMIOERR_BASE+8 )
  MMIOERR_CHUNKNOTFOUND* = ( MMIOERR_BASE+9 )
  MMIOERR_UNBUFFERED* = ( MMIOERR_BASE+10 )
  MMIOERR_PATHNOTFOUND* = ( MMIOERR_BASE+11 )
  MMIOERR_ACCESSDENIED* = ( MMIOERR_BASE+12 )
  MMIOERR_SHARINGVIOLATION* = ( MMIOERR_BASE+13 )
  MMIOERR_NETWORKERROR* = ( MMIOERR_BASE+14 )
  MMIOERR_TOOMANYOPENFILES* = ( MMIOERR_BASE+15 )
  MMIOERR_INVALIDFILE* = ( MMIOERR_BASE+16 )
  CFSEPCHAR* = '+'
  MMIO_RWMODE* = 3
  MMIO_SHAREMODE* = 0x70
  MMIO_CREATE* = 0x1000
  MMIO_PARSE* = 256
  MMIO_DELETE* = 512
  MMIO_EXIST* = 0x4000
  MMIO_ALLOCBUF* = 0x10000
  MMIO_GETTEMP* = 0x20000
  MMIO_DIRTY* = 0x10000000
  MMIO_READ* = 0
  MMIO_WRITE* = 1
  MMIO_READWRITE* = 2
  MMIO_COMPAT* = 0
  MMIO_EXCLUSIVE* = 16
  MMIO_DENYWRITE* = 32
  MMIO_DENYREAD* = 0x30
  MMIO_DENYNONE* = 64
  MMIO_FHOPEN* = 16
  MMIO_EMPTYBUF* = 16
  MMIO_TOUPPER* = 16
  MMIO_INSTALLPROC* = 0x10000
  MMIO_GLOBALPROC* = 0x10000000
  MMIO_REMOVEPROC* = 0x20000
  MMIO_UNICODEPROC* = 0x1000000
  MMIO_FINDPROC* = 0x40000
  MMIO_FINDCHUNK* = 16
  MMIO_FINDRIFF* = 32
  MMIO_FINDLIST* = 64
  MMIO_CREATERIFF* = 32
  MMIO_CREATELIST* = 64
  MMIOM_READ* = MMIO_READ
  MMIOM_WRITE* = MMIO_WRITE
  MMIOM_SEEK* = 2
  MMIOM_OPEN* = 3
  MMIOM_CLOSE* = 4
  MMIOM_WRITEFLUSH* = 5
  MMIOM_RENAME* = 6
  MMIOM_USER* = 0x8000
  FOURCC_RIFF* = mmioFOURCC('R', 'I', 'F', 'F')
  FOURCC_LIST* = mmioFOURCC('L', 'I', 'S', 'T')
  FOURCC_DOS* = mmioFOURCC('D', 'O', 'S', ' ')
  FOURCC_MEM* = mmioFOURCC('M', 'E', 'M', ' ')
  MMIO_DEFAULTBUFFER* = 8192
  MCIERR_INVALID_DEVICE_ID* = MCIERR_BASE + 1
  MCIERR_UNRECOGNIZED_KEYWORD* = MCIERR_BASE + 3
  MCIERR_UNRECOGNIZED_COMMAND* = MCIERR_BASE + 5
  MCIERR_HARDWARE* = (MCIERR_BASE + 5) + 1
  MCIERR_INVALID_DEVICE_NAME* = (MCIERR_BASE + 5) + 2
  MCIERR_OUT_OF_MEMORY* = (MCIERR_BASE + 5) + 3
  MCIERR_DEVICE_OPEN* = (MCIERR_BASE + 5) + 4
  MCIERR_CANNOT_LOAD_DRIVER* = (MCIERR_BASE + 5) + 5
  MCIERR_MISSING_COMMAND_STRING* = (MCIERR_BASE + 5) + 6
  MCIERR_PARAM_OVERFLOW* = (MCIERR_BASE + 5) + 7
  MCIERR_MISSING_STRING_ARGUMENT* = (MCIERR_BASE + 5) + 8
  MCIERR_BAD_INTEGER* = (MCIERR_BASE + 5) + 9
  MCIERR_PARSER_INTERNAL* = (MCIERR_BASE + 5) + 10
  MCIERR_DRIVER_INTERNAL* = (MCIERR_BASE + 5) + 11
  MCIERR_MISSING_PARAMETER* = (MCIERR_BASE + 5) + 12
  MCIERR_UNSUPPORTED_FUNCTION* = (MCIERR_BASE + 5) + 13
  MCIERR_FILE_NOT_FOUND* = (MCIERR_BASE + 5) + 14
  MCIERR_DEVICE_NOT_READY* = (MCIERR_BASE + 5) + 15
  MCIERR_INTERNAL* = (MCIERR_BASE + 5) + 16
  MCIERR_DRIVER* = (MCIERR_BASE + 5) + 17
  MCIERR_CANNOT_USE_ALL* = (MCIERR_BASE + 5) + 18
  MCIERR_MULTIPLE* = (MCIERR_BASE + 5) + 19
  MCIERR_EXTENSION_NOT_FOUND* = (MCIERR_BASE + 5) + 20
  MCIERR_OUTOFRANGE* = (MCIERR_BASE + 5) + 21
  MCIERR_FLAGS_NOT_COMPATIBLE* = MCIERR_BASE + 28
  MCIERR_FILE_NOT_SAVED* = MCIERR_BASE + 30
  MCIERR_DEVICE_TYPE_REQUIRED* = (MCIERR_BASE + 30) + 1
  MCIERR_DEVICE_LOCKED* = (MCIERR_BASE + 30) + 2
  MCIERR_DUPLICATE_ALIAS* = (MCIERR_BASE + 30) + 3
  MCIERR_BAD_CONSTANT* = (MCIERR_BASE + 30) + 4
  MCIERR_MUST_USE_SHAREABLE* = (MCIERR_BASE + 30) + 5
  MCIERR_MISSING_DEVICE_NAME* = (MCIERR_BASE + 30) + 6
  MCIERR_BAD_TIME_FORMAT* = (MCIERR_BASE + 30) + 7
  MCIERR_NO_CLOSING_QUOTE* = (MCIERR_BASE + 30) + 8
  MCIERR_DUPLICATE_FLAGS* = (MCIERR_BASE + 30) + 9
  MCIERR_INVALID_FILE* = (MCIERR_BASE + 30) + 10
  MCIERR_NULL_PARAMETER_BLOCK* = (MCIERR_BASE + 30) + 11
  MCIERR_UNNAMED_RESOURCE* = (MCIERR_BASE + 30) + 12
  MCIERR_NEW_REQUIRES_ALIAS* = (MCIERR_BASE + 30) + 13
  MCIERR_NOTIFY_ON_AUTO_OPEN* = (MCIERR_BASE + 30) + 14
  MCIERR_NO_ELEMENT_ALLOWED* = (MCIERR_BASE + 30) + 15
  MCIERR_NONAPPLICABLE_FUNCTION* = (MCIERR_BASE + 30) + 16
  MCIERR_ILLEGAL_FOR_AUTO_OPEN* = (MCIERR_BASE + 30) + 17
  MCIERR_FILENAME_REQUIRED* = (MCIERR_BASE + 30) + 18
  MCIERR_EXTRA_CHARACTERS* = (MCIERR_BASE + 30) + 19
  MCIERR_DEVICE_NOT_INSTALLED* = (MCIERR_BASE + 30) + 20
  MCIERR_GET_CD* = (MCIERR_BASE + 30) + 21
  MCIERR_SET_CD* = (MCIERR_BASE + 30) + 22
  MCIERR_SET_DRIVE* = (MCIERR_BASE + 30) + 23
  MCIERR_DEVICE_LENGTH* = (MCIERR_BASE + 30) + 24
  MCIERR_DEVICE_ORD_LENGTH* = (MCIERR_BASE + 30) + 25
  MCIERR_NO_INTEGER* = (MCIERR_BASE + 30) + 26
  MCIERR_WAVE_OUTPUTSINUSE* = MCIERR_BASE + 64
  MCIERR_WAVE_SETOUTPUTINUSE* = (MCIERR_BASE + 64) + 1
  MCIERR_WAVE_INPUTSINUSE* = (MCIERR_BASE + 64) + 2
  MCIERR_WAVE_SETINPUTINUSE* = (MCIERR_BASE + 64) + 3
  MCIERR_WAVE_OUTPUTUNSPECIFIED* = (MCIERR_BASE + 64) + 4
  MCIERR_WAVE_INPUTUNSPECIFIED* = (MCIERR_BASE + 64) + 5
  MCIERR_WAVE_OUTPUTSUNSUITABLE* = (MCIERR_BASE + 64) + 6
  MCIERR_WAVE_SETOUTPUTUNSUITABLE* = (MCIERR_BASE + 64) + 7
  MCIERR_WAVE_INPUTSUNSUITABLE* = (MCIERR_BASE + 64) + 8
  MCIERR_WAVE_SETINPUTUNSUITABLE* = (MCIERR_BASE + 64) + 9
  MCIERR_SEQ_DIV_INCOMPATIBLE* = MCIERR_BASE + 80
  MCIERR_SEQ_PORT_INUSE* = (MCIERR_BASE + 80) + 1
  MCIERR_SEQ_PORT_NONEXISTENT* = (MCIERR_BASE + 80) + 2
  MCIERR_SEQ_PORT_MAPNODEVICE* = (MCIERR_BASE + 80) + 3
  MCIERR_SEQ_PORT_MISCERROR* = (MCIERR_BASE + 80) + 4
  MCIERR_SEQ_TIMER* = (MCIERR_BASE + 80) + 5
  MCIERR_SEQ_PORTUNSPECIFIED* = (MCIERR_BASE + 80) + 6
  MCIERR_SEQ_NOMIDIPRESENT* = (MCIERR_BASE + 80) + 7
  MCIERR_NO_WINDOW* = MCIERR_BASE + 90
  MCIERR_CREATEWINDOW* = (MCIERR_BASE + 90) + 1
  MCIERR_FILE_READ* = (MCIERR_BASE + 90) + 2
  MCIERR_FILE_WRITE* = (MCIERR_BASE + 90) + 3
  MCIERR_NO_IDENTITY* = (MCIERR_BASE + 90) + 4
  MCIERR_CUSTOM_DRIVER_BASE* = MCIERR_BASE + 256
  MCI_FIRST* = DRV_MCI_FIRST
  MCI_OPEN* = 0x803
  MCI_CLOSE* = 0x804
  MCI_ESCAPE* = 0x805
  MCI_PLAY* = 0x806
  MCI_SEEK* = 0x807
  MCI_STOP* = 0x808
  MCI_PAUSE* = 0x809
  MCI_INFO* = 0x80A
  MCI_GETDEVCAPS* = 0x80B
  MCI_SPIN* = 0x80C
  MCI_SET* = 0x80D
  MCI_STEP* = 0x80E
  MCI_RECORD* = 0x80F
  MCI_SYSINFO* = 0x810
  MCI_BREAK* = 0x811
  MCI_SAVE* = 0x813
  MCI_STATUS* = 0x814
  MCI_CUE* = 0x830
  MCI_REALIZE* = 0x840
  MCI_WINDOW* = 0x841
  MCI_PUT* = 0x842
  MCI_WHERE* = 0x843
  MCI_FREEZE* = 0x844
  MCI_UNFREEZE* = 0x845
  MCI_LOAD* = 0x850
  MCI_CUT* = 0x851
  MCI_COPY* = 0x852
  MCI_PASTE* = 0x853
  MCI_UPDATE* = 0x854
  MCI_RESUME* = 0x855
  MCI_DELETE* = 0x856
  MCI_USER_MESSAGES* = ( DRV_MCI_FIRST+0x400 )
  MCI_LAST* = 0xFFF
  MCI_ALL_DEVICE_ID* = 0xFFFFFFFF'u32
  MCI_DEVTYPE_VCR* = 513
  MCI_DEVTYPE_VIDEODISC* = 514
  MCI_DEVTYPE_OVERLAY* = 515
  MCI_DEVTYPE_CD_AUDIO* = 516
  MCI_DEVTYPE_DAT* = 517
  MCI_DEVTYPE_SCANNER* = 518
  MCI_DEVTYPE_ANIMATION* = 519
  MCI_DEVTYPE_DIGITAL_VIDEO* = 520
  MCI_DEVTYPE_OTHER* = 521
  MCI_DEVTYPE_WAVEFORM_AUDIO* = 522
  MCI_DEVTYPE_SEQUENCER* = 523
  MCI_DEVTYPE_FIRST* = MCI_DEVTYPE_VCR
  MCI_DEVTYPE_LAST* = MCI_DEVTYPE_SEQUENCER
  MCI_DEVTYPE_FIRST_USER* = 0x1000
  MCI_MODE_NOT_READY* = ( MCI_STRING_OFFSET+12 )
  MCI_MODE_STOP* = ( MCI_STRING_OFFSET+13 )
  MCI_MODE_PLAY* = ( MCI_STRING_OFFSET+14 )
  MCI_MODE_RECORD* = ( MCI_STRING_OFFSET+15 )
  MCI_MODE_SEEK* = ( MCI_STRING_OFFSET+16 )
  MCI_MODE_PAUSE* = ( MCI_STRING_OFFSET+17 )
  MCI_MODE_OPEN* = ( MCI_STRING_OFFSET+18 )
  MCI_FORMAT_MILLISECONDS* = 0
  MCI_FORMAT_HMS* = 1
  MCI_FORMAT_MSF* = 2
  MCI_FORMAT_FRAMES* = 3
  MCI_FORMAT_SMPTE_24* = 4
  MCI_FORMAT_SMPTE_25* = 5
  MCI_FORMAT_SMPTE_30* = 6
  MCI_FORMAT_SMPTE_30DROP* = 7
  MCI_FORMAT_BYTES* = 8
  MCI_FORMAT_SAMPLES* = 9
  MCI_FORMAT_TMSF* = 10

proc MCI_HMS_HOUR*(t: DWORD): BYTE = t.BYTE
proc MCI_HMS_MINUTE*(t: DWORD): BYTE = (t shr 8).BYTE
proc MCI_HMS_SECOND*(t: DWORD): BYTE = (t shr 16).BYTE
proc MCI_MAKE_HMS*(h: BYTE, m: BYTE, s: BYTE): DWORD = h.DWORD or (m.DWORD shl 8) or (s.DWORD shl 16)
proc MCI_MAKE_MSF*(m: BYTE, s: BYTE, f: BYTE): DWORD = m.DWORD or (s.DWORD shl 8) or (f.DWORD shl 16)
proc MCI_MAKE_TMSF*(t: BYTE, m: BYTE, s: BYTE, f: BYTE): DWORD = t.DWORD or (m.DWORD shl 8) or (s.DWORD shl 16) or (f.DWORD shl 24)
proc MCI_MSF_MINUTE*(t: DWORD): BYTE = t.BYTE
proc MCI_MSF_SECOND*(t: DWORD): BYTE = (t shr 8).BYTE
proc MCI_MSF_FRAME*(t: DWORD): BYTE = (t shr 16).BYTE
proc MCI_TMSF_TRACK*(t: DWORD): BYTE = t.BYTE
proc MCI_TMSF_MINUTE*(t: DWORD): BYTE = (t shr 8).BYTE
proc MCI_TMSF_SECOND*(t: DWORD): BYTE = (t shr 16).BYTE
proc MCI_TMSF_FRAME*(t: DWORD): BYTE = (t shr 24).BYTE

const
  MCI_NOTIFY_SUCCESSFUL* = 1
  MCI_NOTIFY_SUPERSEDED* = 2
  MCI_NOTIFY_ABORTED* = 4
  MCI_NOTIFY_FAILURE* = 8
  MCI_NOTIFY* = 1
  MCI_WAIT* = 2
  MCI_FROM* = 4
  MCI_TO* = 8
  MCI_TRACK* = 16
  MCI_OPEN_SHAREABLE* = 256
  MCI_OPEN_ELEMENT* = 512
  MCI_OPEN_ALIAS* = 1024
  MCI_OPEN_ELEMENT_ID* = 2048
  MCI_OPEN_TYPE_ID* = 0x1000
  MCI_OPEN_TYPE* = 0x2000
  MCI_SEEK_TO_START* = 256
  MCI_SEEK_TO_END* = 512
  MCI_STATUS_ITEM* = 256
  MCI_STATUS_START* = 512
  MCI_STATUS_LENGTH* = 1
  MCI_STATUS_POSITION* = 2
  MCI_STATUS_NUMBER_OF_TRACKS* = 3
  MCI_STATUS_MODE* = 4
  MCI_STATUS_MEDIA_PRESENT* = 5
  MCI_STATUS_TIME_FORMAT* = 6
  MCI_STATUS_READY* = 7
  MCI_STATUS_CURRENT_TRACK* = 8
  MCI_INFO_PRODUCT* = 256
  MCI_INFO_FILE* = 512
  MCI_INFO_MEDIA_UPC* = 1024
  MCI_INFO_MEDIA_IDENTITY* = 2048
  MCI_INFO_NAME* = 0x1000
  MCI_INFO_COPYRIGHT* = 0x2000
  MCI_GETDEVCAPS_ITEM* = 256
  MCI_GETDEVCAPS_CAN_RECORD* = 1
  MCI_GETDEVCAPS_HAS_AUDIO* = 2
  MCI_GETDEVCAPS_HAS_VIDEO* = 3
  MCI_GETDEVCAPS_DEVICE_TYPE* = 4
  MCI_GETDEVCAPS_USES_FILES* = 5
  MCI_GETDEVCAPS_COMPOUND_DEVICE* = 6
  MCI_GETDEVCAPS_CAN_EJECT* = 7
  MCI_GETDEVCAPS_CAN_PLAY* = 8
  MCI_GETDEVCAPS_CAN_SAVE* = 9
  MCI_SYSINFO_QUANTITY* = 256
  MCI_SYSINFO_OPEN* = 512
  MCI_SYSINFO_NAME* = 1024
  MCI_SYSINFO_INSTALLNAME* = 2048
  MCI_SET_DOOR_OPEN* = 256
  MCI_SET_DOOR_CLOSED* = 512
  MCI_SET_TIME_FORMAT* = 1024
  MCI_SET_AUDIO* = 2048
  MCI_SET_VIDEO* = 0x1000
  MCI_SET_ON* = 0x2000
  MCI_SET_OFF* = 0x4000
  MCI_SET_AUDIO_ALL* = 0
  MCI_SET_AUDIO_LEFT* = 1
  MCI_SET_AUDIO_RIGHT* = 2
  MCI_BREAK_KEY* = 256
  MCI_BREAK_HWND* = 512
  MCI_BREAK_OFF* = 1024
  MCI_RECORD_INSERT* = 256
  MCI_RECORD_OVERWRITE* = 512
  MCI_SAVE_FILE* = 256
  MCI_LOAD_FILE* = 256
  MCI_VD_MODE_PARK* = ( MCI_VD_OFFSET+1 )
  MCI_VD_MEDIA_CLV* = ( MCI_VD_OFFSET+2 )
  MCI_VD_MEDIA_CAV* = ( MCI_VD_OFFSET+3 )
  MCI_VD_MEDIA_OTHER* = ( MCI_VD_OFFSET+4 )
  MCI_VD_FORMAT_TRACK* = 0x4001
  MCI_VD_PLAY_REVERSE* = 0x10000
  MCI_VD_PLAY_FAST* = 0x20000
  MCI_VD_PLAY_SPEED* = 0x40000
  MCI_VD_PLAY_SCAN* = 0x80000
  MCI_VD_PLAY_SLOW* = 0x100000
  MCI_VD_SEEK_REVERSE* = 0x10000
  MCI_VD_STATUS_SPEED* = 0x4002
  MCI_VD_STATUS_FORWARD* = 0x4003
  MCI_VD_STATUS_MEDIA_TYPE* = 0x4004
  MCI_VD_STATUS_SIDE* = 0x4005
  MCI_VD_STATUS_DISC_SIZE* = 0x4006
  MCI_VD_GETDEVCAPS_CLV* = 0x10000
  MCI_VD_GETDEVCAPS_CAV* = 0x20000
  MCI_VD_SPIN_UP* = 0x10000
  MCI_VD_SPIN_DOWN* = 0x20000
  MCI_VD_GETDEVCAPS_CAN_REVERSE* = 0x4002
  MCI_VD_GETDEVCAPS_FAST_RATE* = 0x4003
  MCI_VD_GETDEVCAPS_SLOW_RATE* = 0x4004
  MCI_VD_GETDEVCAPS_NORMAL_RATE* = 0x4005
  MCI_VD_STEP_FRAMES* = 0x10000
  MCI_VD_STEP_REVERSE* = 0x20000
  MCI_VD_ESCAPE_STRING* = 256
  MCI_CDA_STATUS_TYPE_TRACK* = 0x4001
  MCI_CDA_TRACK_AUDIO* = MCI_CD_OFFSET
  MCI_CDA_TRACK_OTHER* = ( MCI_CD_OFFSET+1 )
  MCI_WAVE_PCM* = MCI_WAVE_OFFSET
  MCI_WAVE_MAPPER* = ( MCI_WAVE_OFFSET+1 )
  MCI_WAVE_OPEN_BUFFER* = 0x10000
  MCI_WAVE_SET_FORMATTAG* = 0x10000
  MCI_WAVE_SET_CHANNELS* = 0x20000
  MCI_WAVE_SET_SAMPLESPERSEC* = 0x40000
  MCI_WAVE_SET_AVGBYTESPERSEC* = 0x80000
  MCI_WAVE_SET_BLOCKALIGN* = 0x100000
  MCI_WAVE_SET_BITSPERSAMPLE* = 0x200000
  MCI_WAVE_INPUT* = 0x400000
  MCI_WAVE_OUTPUT* = 0x800000
  MCI_WAVE_STATUS_FORMATTAG* = 0x4001
  MCI_WAVE_STATUS_CHANNELS* = 0x4002
  MCI_WAVE_STATUS_SAMPLESPERSEC* = 0x4003
  MCI_WAVE_STATUS_AVGBYTESPERSEC* = 0x4004
  MCI_WAVE_STATUS_BLOCKALIGN* = 0x4005
  MCI_WAVE_STATUS_BITSPERSAMPLE* = 0x4006
  MCI_WAVE_STATUS_LEVEL* = 0x4007
  MCI_WAVE_SET_ANYINPUT* = 0x4000000
  MCI_WAVE_SET_ANYOUTPUT* = 0x8000000
  MCI_WAVE_GETDEVCAPS_INPUTS* = 0x4001
  MCI_WAVE_GETDEVCAPS_OUTPUTS* = 0x4002
  MCI_SEQ_DIV_PPQN* = MCI_SEQ_OFFSET
  MCI_SEQ_DIV_SMPTE_24* = ( MCI_SEQ_OFFSET+1 )
  MCI_SEQ_DIV_SMPTE_25* = ( MCI_SEQ_OFFSET+2 )
  MCI_SEQ_DIV_SMPTE_30DROP* = ( MCI_SEQ_OFFSET+3 )
  MCI_SEQ_DIV_SMPTE_30* = ( MCI_SEQ_OFFSET+4 )
  MCI_SEQ_FORMAT_SONGPTR* = 0x4001
  MCI_SEQ_FILE* = 0x4002
  MCI_SEQ_MIDI* = 0x4003
  MCI_SEQ_SMPTE* = 0x4004
  MCI_SEQ_NONE* = 65533
  MCI_SEQ_MAPPER* = 65535
  MCI_SEQ_STATUS_TEMPO* = 0x4002
  MCI_SEQ_STATUS_PORT* = 0x4003
  MCI_SEQ_STATUS_SLAVE* = 0x4007
  MCI_SEQ_STATUS_MASTER* = 0x4008
  MCI_SEQ_STATUS_OFFSET* = 0x4009
  MCI_SEQ_STATUS_DIVTYPE* = 0x400A
  MCI_SEQ_STATUS_NAME* = 0x400B
  MCI_SEQ_STATUS_COPYRIGHT* = 0x400C
  MCI_SEQ_SET_TEMPO* = 0x10000
  MCI_SEQ_SET_PORT* = 0x20000
  MCI_SEQ_SET_SLAVE* = 0x40000
  MCI_SEQ_SET_MASTER* = 0x80000
  MCI_SEQ_SET_OFFSET* = 0x1000000
  MCI_ANIM_OPEN_WS* = 0x10000
  MCI_ANIM_OPEN_PARENT* = 0x20000
  MCI_ANIM_OPEN_NOSTATIC* = 0x40000
  MCI_ANIM_PLAY_SPEED* = 0x10000
  MCI_ANIM_PLAY_REVERSE* = 0x20000
  MCI_ANIM_PLAY_FAST* = 0x40000
  MCI_ANIM_PLAY_SLOW* = 0x80000
  MCI_ANIM_PLAY_SCAN* = 0x100000
  MCI_ANIM_STEP_REVERSE* = 0x10000
  MCI_ANIM_STEP_FRAMES* = 0x20000
  MCI_ANIM_STATUS_SPEED* = 0x4001
  MCI_ANIM_STATUS_FORWARD* = 0x4002
  MCI_ANIM_STATUS_HWND* = 0x4003
  MCI_ANIM_STATUS_HPAL* = 0x4004
  MCI_ANIM_STATUS_STRETCH* = 0x4005
  MCI_ANIM_INFO_TEXT* = 0x10000
  MCI_ANIM_GETDEVCAPS_CAN_REVERSE* = 0x4001
  MCI_ANIM_GETDEVCAPS_FAST_RATE* = 0x4002
  MCI_ANIM_GETDEVCAPS_SLOW_RATE* = 0x4003
  MCI_ANIM_GETDEVCAPS_NORMAL_RATE* = 0x4004
  MCI_ANIM_GETDEVCAPS_PALETTES* = 0x4006
  MCI_ANIM_GETDEVCAPS_CAN_STRETCH* = 0x4007
  MCI_ANIM_GETDEVCAPS_MAX_WINDOWS* = 0x4008
  MCI_ANIM_REALIZE_NORM* = 0x10000
  MCI_ANIM_REALIZE_BKGD* = 0x20000
  MCI_ANIM_WINDOW_HWND* = 0x10000
  MCI_ANIM_WINDOW_STATE* = 0x40000
  MCI_ANIM_WINDOW_TEXT* = 0x80000
  MCI_ANIM_WINDOW_ENABLE_STRETCH* = 0x100000
  MCI_ANIM_WINDOW_DISABLE_STRETCH* = 0x200000
  MCI_ANIM_WINDOW_DEFAULT* = 0x0
  MCI_ANIM_RECT* = 0x10000
  MCI_ANIM_PUT_SOURCE* = 0x20000
  MCI_ANIM_PUT_DESTINATION* = 0x40000
  MCI_ANIM_WHERE_SOURCE* = 0x20000
  MCI_ANIM_WHERE_DESTINATION* = 0x40000
  MCI_ANIM_UPDATE_HDC* = 0x20000
  MCI_OVLY_OPEN_WS* = 0x10000
  MCI_OVLY_OPEN_PARENT* = 0x20000
  MCI_OVLY_STATUS_HWND* = 0x4001
  MCI_OVLY_STATUS_STRETCH* = 0x4002
  MCI_OVLY_INFO_TEXT* = 0x10000
  MCI_OVLY_GETDEVCAPS_CAN_STRETCH* = 0x4001
  MCI_OVLY_GETDEVCAPS_CAN_FREEZE* = 0x4002
  MCI_OVLY_GETDEVCAPS_MAX_WINDOWS* = 0x4003
  MCI_OVLY_WINDOW_HWND* = 0x10000
  MCI_OVLY_WINDOW_STATE* = 0x40000
  MCI_OVLY_WINDOW_TEXT* = 0x80000
  MCI_OVLY_WINDOW_ENABLE_STRETCH* = 0x100000
  MCI_OVLY_WINDOW_DISABLE_STRETCH* = 0x200000
  MCI_OVLY_WINDOW_DEFAULT* = 0x0
  MCI_OVLY_RECT* = 0x10000
  MCI_OVLY_PUT_SOURCE* = 0x20000
  MCI_OVLY_PUT_DESTINATION* = 0x40000
  MCI_OVLY_PUT_FRAME* = 0x80000
  MCI_OVLY_PUT_VIDEO* = 0x100000
  MCI_OVLY_WHERE_SOURCE* = 0x20000
  MCI_OVLY_WHERE_DESTINATION* = 0x40000
  MCI_OVLY_WHERE_FRAME* = 0x80000
  MCI_OVLY_WHERE_VIDEO* = 0x100000
  NEWTRANSPARENT* = 3
  QUERYROPSUPPORT* = 40
  SELECTDIB* = 41

proc DIBINDEX*(n: WORD): LONG = MAKELONG(n, 0x10FF).LONG

const
  CAPS1* = 94
  C1_TRANSPARENT* = 1
  SEEK_SET* = 0
  SEEK_CUR* = 1
  SEEK_END* = 2

type
  MCIERROR* = DWORD
  MCIDEVICEID* = UINT
  YIELDPROC* = proc (P1: MCIDEVICEID, P2: DWORD): UINT {.stdcall.}
  MMVERSION* = UINT
  MMRESULT* = UINT
  MMTIME_UNION1_midi* {.final, pure.} = object
    songptrpos*: DWORD
  MMTIME_UNION1_smpte* {.final, pure.} = object
    hour*: BYTE
    min*: BYTE
    sec*: BYTE
    frame*: BYTE
    fps*: BYTE
    dummy*: BYTE
    pad*: array[2, BYTE]
  MMTIME_UNION1* {.final, union, pure.} = object
    ms*: DWORD
    sample*: DWORD
    cb*: DWORD
    ticks*: DWORD
    smpte*: MMTIME_UNION1_smpte
    midi*: MMTIME_UNION1_midi
  MMTIME* {.final, pure.} = object
    wType*: UINT
    u1*: MMTIME_UNION1
  PMMTIME* = ptr MMTIME
  LPMMTIME* = ptr MMTIME
  HDRVR* = HANDLE
  DRVCONFIGINFO* {.final, pure.} = object
    dwDCISize*: DWORD
    lpszDCISectionName*: LPCWSTR
    lpszDCIAliasName*: LPCWSTR
  PDRVCONFIGINFO* = ptr DRVCONFIGINFO
  LPDRVCONFIGINFO* = ptr DRVCONFIGINFO
  DRVCONFIGINFOEX* {.final, pure.} = object
    dwDCISize*: DWORD
    lpszDCISectionName*: LPCWSTR
    lpszDCIAliasName*: LPCWSTR
    dnDevNode*: DWORD
  PDRVCONFIGINFOEX* = ptr DRVCONFIGINFOEX
  LPDRVCONFIGINFOEX* = ptr DRVCONFIGINFOEX
  HWAVE* = HANDLE
  HWAVEIN* = HANDLE
  HWAVEOUT* = HANDLE
  LPHWAVEIN* = ptr HWAVEIN
  LPHWAVEOUT* = ptr HWAVEOUT
  WAVEHDR* {.final, pure.} = object
    lpData*: LPSTR
    dwBufferLength*: DWORD
    dwBytesRecorded*: DWORD
    dwUser*: DWORD
    dwFlags*: DWORD
    dwLoops*: DWORD
    lpNext*: ptr WAVEHDR
    reserved*: DWORD
  PWAVEHDR* = ptr WAVEHDR
  LPWAVEHDR* = ptr WAVEHDR
  WAVEOUTCAPSA* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, CHAR]
    dwFormats*: DWORD
    wChannels*: WORD
    wReserved1*: WORD
    dwSupport*: DWORD
  PWAVEOUTCAPSA* = ptr WAVEOUTCAPSA
  LPWAVEOUTCAPSA* = ptr WAVEOUTCAPSA
  WAVEOUTCAPSW* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, WCHAR]
    dwFormats*: DWORD
    wChannels*: WORD
    wReserved1*: WORD
    dwSupport*: DWORD
  PWAVEOUTCAPSW* = ptr WAVEOUTCAPSW
  LPWAVEOUTCAPSW* = ptr WAVEOUTCAPSW
  WAVEINCAPSA* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, CHAR]
    dwFormats*: DWORD
    wChannels*: WORD
    wReserved1*: WORD
  PWAVEINCAPSA* = ptr WAVEINCAPSA
  LPWAVEINCAPSA* = ptr WAVEINCAPSA
  WAVEINCAPSW* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, WCHAR]
    dwFormats*: DWORD
    wChannels*: WORD
    wReserved1*: WORD
  PWAVEINCAPSW* = ptr WAVEINCAPSW
  LPWAVEINCAPSW* = ptr WAVEINCAPSW
  WAVEFORMAT* {.final, pure.} = object
    wFormatTag*: WORD
    nChannels*: WORD
    nSamplesPerSec*: DWORD
    nAvgBytesPerSec*: DWORD
    nBlockAlign*: WORD
  PWAVEFORMAT* = ptr WAVEFORMAT
  LPWAVEFORMAT* = ptr WAVEFORMAT
  PCMWAVEFORMAT* {.final, pure.} = object
    wf*: WAVEFORMAT
    wBitsPerSample*: WORD
  PPCMWAVEFORMAT* = ptr PCMWAVEFORMAT
  LPPCMWAVEFORMAT* = ptr PCMWAVEFORMAT
  WAVEFORMATEX* {.final, pure.} = object
    wFormatTag*: WORD
    nChannels*: WORD
    nSamplesPerSec*: DWORD
    nAvgBytesPerSec*: DWORD
    nBlockAlign*: WORD
    wBitsPerSample*: WORD
    cbSize*: WORD
  PWAVEFORMATEX* = ptr WAVEFORMATEX
  LPWAVEFORMATEX* = ptr WAVEFORMATEX
  LPCWAVEFORMATEX* = ptr WAVEFORMATEX
  HMIDI* = HANDLE
  HMIDIIN* = HANDLE
  HMIDIOUT* = HANDLE
  HMIDISTRM* = HANDLE
  LPHMIDI* = ptr HMIDI
  LPHMIDIIN* = ptr HMIDIIN
  LPHMIDIOUT* = ptr HMIDIOUT
  LPHMIDISTRM* = ptr HMIDISTRM
  PATCHARRAY* = array[MIDIPATCHSIZE, WORD]
  LPPATCHARRAY* = ptr PATCHARRAY
  KEYARRAY* = array[MIDIPATCHSIZE, WORD]
  LPKEYARRAY* = ptr KEYARRAY
  MIDIOUTCAPSA* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, CHAR]
    wTechnology*: WORD
    wVoices*: WORD
    wNotes*: WORD
    wChannelMask*: WORD
    dwSupport*: DWORD
  PMIDIOUTCAPSA* = ptr MIDIOUTCAPSA
  LPMIDIOUTCAPSA* = ptr MIDIOUTCAPSA
  MIDIOUTCAPSW* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, WCHAR]
    wTechnology*: WORD
    wVoices*: WORD
    wNotes*: WORD
    wChannelMask*: WORD
    dwSupport*: DWORD
  PMIDIOUTCAPSW* = ptr MIDIOUTCAPSW
  LPMIDIOUTCAPSW* = ptr MIDIOUTCAPSW
  MIDIINCAPSA* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, CHAR]
    dwSupport*: DWORD
  PMIDIINCAPSA* = ptr MIDIINCAPSA
  LPMIDIINCAPSA* = ptr MIDIINCAPSA
  MIDIINCAPSW* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, WCHAR]
    dwSupport*: DWORD
  PMIDIINCAPSW* = ptr MIDIINCAPSW
  LPMIDIINCAPSW* = ptr MIDIINCAPSW
  MIDIHDR* {.final, pure.} = object
    lpData*: LPSTR
    dwBufferLength*: DWORD
    dwBytesRecorded*: DWORD
    dwUser*: DWORD
    dwFlags*: DWORD
    lpNext*: ptr MIDIHDR
    reserved*: DWORD
    dwOffset*: DWORD
    dwReserved*: array[8, DWORD]
  PMIDIHDR* = ptr MIDIHDR
  LPMIDIHDR* = ptr MIDIHDR
  MIDIEVENT* {.final, pure.} = object
    dwDeltaTime*: DWORD
    dwStreamID*: DWORD
    dwEvent*: DWORD
    dwParms*: array[1, DWORD]
  MIDISTRMBUFFVER* {.final, pure.} = object
    dwVersion*: DWORD
    dwMid*: DWORD
    dwOEMVersion*: DWORD
  TMIDIPROPTIMEDIV* {.final, pure.} = object # renamed from MIDIPROPTIMEDIV
    cbStruct*: DWORD
    dwTimeDiv*: DWORD
  LPMIDIPROPTIMEDIV* = ptr TMIDIPROPTIMEDIV
  TMIDIPROPTEMPO* {.final, pure.} = object # renamed from MIDIPROPTEMPO
    cbStruct*: DWORD
    dwTempo*: DWORD
  LPMIDIPROPTEMPO* = ptr TMIDIPROPTEMPO
  AUXCAPSA* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, CHAR]
    wTechnology*: WORD
    wReserved1*: WORD
    dwSupport*: DWORD
  PAUXCAPSA* = ptr AUXCAPSA
  LPAUXCAPSA* = ptr AUXCAPSA
  AUXCAPSW* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, WCHAR]
    wTechnology*: WORD
    wReserved1*: WORD
    dwSupport*: DWORD
  PAUXCAPSW* = ptr AUXCAPSW
  LPAUXCAPSW* = ptr AUXCAPSW
  HMIXEROBJ* = HANDLE
  LPHMIXEROBJ* = ptr HMIXEROBJ
  HMIXER* = HANDLE
  LPHMIXER* = ptr HMIXER
  MIXERCAPSA* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, CHAR]
    fdwSupport*: DWORD
    cDestinations*: DWORD
  PMIXERCAPSA* = ptr MIXERCAPSA
  LPMIXERCAPSA* = ptr MIXERCAPSA
  MIXERCAPSW* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, WCHAR]
    fdwSupport*: DWORD
    cDestinations*: DWORD
  PMIXERCAPSW* = ptr MIXERCAPSW
  LPMIXERCAPSW* = ptr MIXERCAPSW
  MIXERLINEA_Target* {.final, pure.} = object
    dwType*: DWORD
    dwDeviceID*: DWORD
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, CHAR]
  MIXERLINEA* {.final, pure.} = object
    cbStruct*: DWORD
    dwDestination*: DWORD
    dwSource*: DWORD
    dwLineID*: DWORD
    fdwLine*: DWORD
    dwUser*: DWORD
    dwComponentType*: DWORD
    cChannels*: DWORD
    cConnections*: DWORD
    cControls*: DWORD
    szShortName*: array[MIXER_SHORT_NAME_CHARS, CHAR]
    szName*: array[MIXER_LONG_NAME_CHARS, CHAR]
    _*: MIXERLINEA_Target
  PMIXERLINEA* = ptr MIXERLINEA
  LPMIXERLINEA* = ptr MIXERLINEA
  MIXERLINEW_Target* {.final, pure.} = object
    dwType*: DWORD
    dwDeviceID*: DWORD
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, WCHAR]
  MIXERLINEW* {.final, pure.} = object
    cbStruct*: DWORD
    dwDestination*: DWORD
    dwSource*: DWORD
    dwLineID*: DWORD
    fdwLine*: DWORD
    dwUser*: DWORD
    dwComponentType*: DWORD
    cChannels*: DWORD
    cConnections*: DWORD
    cControls*: DWORD
    szShortName*: array[MIXER_SHORT_NAME_CHARS, WCHAR]
    szName*: array[MIXER_LONG_NAME_CHARS, WCHAR]
    _*: MIXERLINEW_Target
  PMIXERLINEW* = ptr MIXERLINEW
  LPMIXERLINEW* = ptr MIXERLINEW
  MIXERCONTROLA_Metrics* {.final, union, pure.} = object
    cSteps*: DWORD
    cbCustomData*: DWORD
    dwReserved*: array[6, DWORD]
  MIXERCONTROLA_Bounds_STRUCT2* {.final, pure.} = object
    dwMinimum*: DWORD
    dwMaximum*: DWORD
  MIXERCONTROLA_Bounds_STRUCT1* {.final, pure.} = object
    lMinimum*: LONG
    lMaximum*: LONG
  MIXERCONTROLA_Bounds* {.final, union, pure.} = object
    s1*: MIXERCONTROLA_Bounds_STRUCT1
    s2*: MIXERCONTROLA_Bounds_STRUCT2
    dwReserved*: array[6, DWORD]
  MIXERCONTROLA* {.final, pure.} = object
    cbStruct*: DWORD
    dwControlID*: DWORD
    dwControlType*: DWORD
    fdwControl*: DWORD
    cMultipleItems*: DWORD
    szShortName*: array[MIXER_SHORT_NAME_CHARS, CHAR]
    szName*: array[MIXER_LONG_NAME_CHARS, CHAR]
    Bounds*: MIXERCONTROLA_Bounds
    Metrics*: MIXERCONTROLA_Metrics
  PMIXERCONTROLA* = ptr MIXERCONTROLA
  LPMIXERCONTROLA* = ptr MIXERCONTROLA
  MIXERCONTROLW_Metrics* {.final, union, pure.} = object
    cSteps*: DWORD
    cbCustomData*: DWORD
    dwReserved*: array[6, DWORD]
  MIXERCONTROLW_Bounds_STRUCT2* {.final, pure.} = object
    dwMinimum*: DWORD
    dwMaximum*: DWORD
  MIXERCONTROLW_Bounds_STRUCT1* {.final, pure.} = object
    lMinimum*: LONG
    lMaximum*: LONG
  MIXERCONTROLW_Bounds* {.final, union, pure.} = object
    s1*: MIXERCONTROLW_Bounds_STRUCT1
    s2*: MIXERCONTROLW_Bounds_STRUCT2
    dwReserved*: array[6, DWORD]
  MIXERCONTROLW* {.final, pure.} = object
    cbStruct*: DWORD
    dwControlID*: DWORD
    dwControlType*: DWORD
    fdwControl*: DWORD
    cMultipleItems*: DWORD
    szShortName*: array[MIXER_SHORT_NAME_CHARS, WCHAR]
    szName*: array[MIXER_LONG_NAME_CHARS, WCHAR]
    Bounds*: MIXERCONTROLW_Bounds
    Metrics*: MIXERCONTROLW_Metrics
  PMIXERCONTROLW* = ptr MIXERCONTROLW
  LPMIXERCONTROLW* = ptr MIXERCONTROLW
  MIXERLINECONTROLSA_UNION1* {.final, union, pure.} = object
    dwControlID*: DWORD
    dwControlType*: DWORD
  MIXERLINECONTROLSA* {.final, pure.} = object
    cbStruct*: DWORD
    dwLineID*: DWORD
    u1*: MIXERLINECONTROLSA_UNION1
    cControls*: DWORD
    cbmxctrl*: DWORD
    pamxctrl*: LPMIXERCONTROLA
  PMIXERLINECONTROLSA* = ptr MIXERLINECONTROLSA
  LPMIXERLINECONTROLSA* = ptr MIXERLINECONTROLSA
  MIXERLINECONTROLSW_UNION1* {.final, union, pure.} = object
    dwControlID*: DWORD
    dwControlType*: DWORD
  MIXERLINECONTROLSW* {.final, pure.} = object
    cbStruct*: DWORD
    dwLineID*: DWORD
    u1*: MIXERLINECONTROLSW_UNION1
    cControls*: DWORD
    cbmxctrl*: DWORD
    pamxctrl*: LPMIXERCONTROLW
  PMIXERLINECONTROLSW* = ptr MIXERLINECONTROLSW
  LPMIXERLINECONTROLSW* = ptr MIXERLINECONTROLSW
  MIXERCONTROLDETAILS_UNION1* {.final, union, pure.} = object
    hwndOwner*: HWND
    cMultipleItems*: DWORD
  MIXERCONTROLDETAILS* {.final, pure.} = object
    cbStruct*: DWORD
    dwControlID*: DWORD
    cChannels*: DWORD
    u1*: MIXERCONTROLDETAILS_UNION1
    cbDetails*: DWORD
    paDetails*: PVOID
  PMIXERCONTROLDETAILS* = ptr MIXERCONTROLDETAILS
  LPMIXERCONTROLDETAILS* = ptr MIXERCONTROLDETAILS
  MIXERCONTROLDETAILS_LISTTEXTA* {.final, pure.} = object
    dwParam1*: DWORD
    dwParam2*: DWORD
    szName*: array[MIXER_LONG_NAME_CHARS, CHAR]
  PMIXERCONTROLDETAILS_LISTTEXTA* = ptr MIXERCONTROLDETAILS_LISTTEXTA
  LPMIXERCONTROLDETAILS_LISTTEXTA* = ptr MIXERCONTROLDETAILS_LISTTEXTA
  MIXERCONTROLDETAILS_LISTTEXTW* {.final, pure.} = object
    dwParam1*: DWORD
    dwParam2*: DWORD
    szName*: array[MIXER_LONG_NAME_CHARS, WCHAR]
  PMIXERCONTROLDETAILS_LISTTEXTW* = ptr MIXERCONTROLDETAILS_LISTTEXTW
  LPMIXERCONTROLDETAILS_LISTTEXTW* = ptr MIXERCONTROLDETAILS_LISTTEXTW
  MIXERCONTROLDETAILS_BOOLEAN* {.final, pure.} = object
    fValue*: LONG
  PMIXERCONTROLDETAILS_BOOLEAN* = ptr MIXERCONTROLDETAILS_BOOLEAN
  LPMIXERCONTROLDETAILS_BOOLEAN* = ptr MIXERCONTROLDETAILS_BOOLEAN
  MIXERCONTROLDETAILS_SIGNED* {.final, pure.} = object
    lValue*: LONG
  PMIXERCONTROLDETAILS_SIGNED* = ptr MIXERCONTROLDETAILS_SIGNED
  LPMIXERCONTROLDETAILS_SIGNED* = ptr MIXERCONTROLDETAILS_SIGNED
  MIXERCONTROLDETAILS_UNSIGNED* {.final, pure.} = object
    dwValue*: DWORD
  PMIXERCONTROLDETAILS_UNSIGNED* = ptr MIXERCONTROLDETAILS_UNSIGNED
  LPMIXERCONTROLDETAILS_UNSIGNED* = ptr MIXERCONTROLDETAILS_UNSIGNED
  LPTIMECALLBACK* = proc (P1: UINT, P2: UINT, P3: DWORD, P4: DWORD, P5: DWORD): void {.stdcall.}
  TIMECAPS* {.final, pure.} = object
    wPeriodMin*: UINT
    wPeriodMax*: UINT
  PTIMECAPS* = ptr TIMECAPS
  LPTIMECAPS* = ptr TIMECAPS
  JOYCAPSA* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    szPname*: array[MAXPNAMELEN, CHAR]
    wXmin*: UINT
    wXmax*: UINT
    wYmin*: UINT
    wYmax*: UINT
    wZmin*: UINT
    wZmax*: UINT
    wNumButtons*: UINT
    wPeriodMin*: UINT
    wPeriodMax*: UINT
    wRmin*: UINT
    wRmax*: UINT
    wUmin*: UINT
    wUmax*: UINT
    wVmin*: UINT
    wVmax*: UINT
    wCaps*: UINT
    wMaxAxes*: UINT
    wNumAxes*: UINT
    wMaxButtons*: UINT
    szRegKey*: array[MAXPNAMELEN, CHAR]
    szOEMVxD*: array[MAX_JOYSTICKOEMVXDNAME, CHAR]
  PJOYCAPSA* = ptr JOYCAPSA
  LPJOYCAPSA* = ptr JOYCAPSA
  JOYCAPSW* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    szPname*: array[MAXPNAMELEN, WCHAR]
    wXmin*: UINT
    wXmax*: UINT
    wYmin*: UINT
    wYmax*: UINT
    wZmin*: UINT
    wZmax*: UINT
    wNumButtons*: UINT
    wPeriodMin*: UINT
    wPeriodMax*: UINT
    wRmin*: UINT
    wRmax*: UINT
    wUmin*: UINT
    wUmax*: UINT
    wVmin*: UINT
    wVmax*: UINT
    wCaps*: UINT
    wMaxAxes*: UINT
    wNumAxes*: UINT
    wMaxButtons*: UINT
    szRegKey*: array[MAXPNAMELEN, WCHAR]
    szOEMVxD*: array[MAX_JOYSTICKOEMVXDNAME, WCHAR]
  PJOYCAPSW* = ptr JOYCAPSW
  LPJOYCAPSW* = ptr JOYCAPSW
  JOYINFO* {.final, pure.} = object
    wXpos*: UINT
    wYpos*: UINT
    wZpos*: UINT
    wButtons*: UINT
  PJOYINFO* = ptr JOYINFO
  LPJOYINFO* = ptr JOYINFO
  JOYINFOEX* {.final, pure.} = object
    dwSize*: DWORD
    dwFlags*: DWORD
    dwXpos*: DWORD
    dwYpos*: DWORD
    dwZpos*: DWORD
    dwRpos*: DWORD
    dwUpos*: DWORD
    dwVpos*: DWORD
    dwButtons*: DWORD
    dwButtonNumber*: DWORD
    dwPOV*: DWORD
    dwReserved1*: DWORD
    dwReserved2*: DWORD
  PJOYINFOEX* = ptr JOYINFOEX
  LPJOYINFOEX* = ptr JOYINFOEX
  FOURCC* = DWORD
  HPSTR* = cstring
  HMMIO* = HANDLE
  LPMMIOPROC* = proc (P1: LPSTR, P2: UINT, P3: LPARAM, P4: LPARAM): LRESULT {.stdcall.}
  MMIOINFO* {.final, pure.} = object
    dwFlags*: DWORD
    fccIOProc*: FOURCC
    pIOProc*: LPMMIOPROC
    wErrorRet*: UINT
    htask*: HTASK
    cchBuffer*: LONG
    pchBuffer*: HPSTR
    pchNext*: HPSTR
    pchEndRead*: HPSTR
    pchEndWrite*: HPSTR
    lBufOffset*: LONG
    lDiskOffset*: LONG
    adwInfo*: array[3, DWORD]
    dwReserved1*: DWORD
    dwReserved2*: DWORD
    hmmio*: HMMIO
  PMMIOINFO* = ptr MMIOINFO
  LPMMIOINFO* = ptr MMIOINFO
  LPCMMIOINFO* = ptr MMIOINFO
  MMCKINFO* {.final, pure.} = object
    ckid*: FOURCC
    cksize*: DWORD
    fccType*: FOURCC
    dwDataOffset*: DWORD
    dwFlags*: DWORD
  PMMCKINFO* = ptr MMCKINFO
  LPMMCKINFO* = ptr MMCKINFO
  LPCMMCKINFO* = ptr MMCKINFO
  MCI_GENERIC_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
  PMCI_GENERIC_PARMS* = ptr MCI_GENERIC_PARMS
  LPMCI_GENERIC_PARMS* = ptr MCI_GENERIC_PARMS
  MCI_OPEN_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    wDeviceID*: MCIDEVICEID
    lpstrDeviceType*: LPCSTR
    lpstrElementName*: LPCSTR
    lpstrAlias*: LPCSTR
  PMCI_OPEN_PARMSA* = ptr MCI_OPEN_PARMSA
  LPMCI_OPEN_PARMSA* = ptr MCI_OPEN_PARMSA
  MCI_OPEN_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    wDeviceID*: MCIDEVICEID
    lpstrDeviceType*: LPCWSTR
    lpstrElementName*: LPCWSTR
    lpstrAlias*: LPCWSTR
  PMCI_OPEN_PARMSW* = ptr MCI_OPEN_PARMSW
  LPMCI_OPEN_PARMSW* = ptr MCI_OPEN_PARMSW
  MCI_PLAY_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwFrom*: DWORD
    dwTo*: DWORD
  PMCI_PLAY_PARMS* = ptr MCI_PLAY_PARMS
  LPMCI_PLAY_PARMS* = ptr MCI_PLAY_PARMS
  MCI_SEEK_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwTo*: DWORD
  PMCI_SEEK_PARMS* = ptr MCI_SEEK_PARMS
  LPMCI_SEEK_PARMS* = ptr MCI_SEEK_PARMS
  MCI_STATUS_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwReturn*: DWORD
    dwItem*: DWORD
    dwTrack*: DWORD
  PMCI_STATUS_PARMS* = ptr MCI_STATUS_PARMS
  LPMCI_STATUS_PARMS* = ptr MCI_STATUS_PARMS
  MCI_INFO_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    lpstrReturn*: LPSTR
    dwRetSize*: DWORD
  LPMCI_INFO_PARMSA* = ptr MCI_INFO_PARMSA
  MCI_INFO_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    lpstrReturn*: LPWSTR
    dwRetSize*: DWORD
  LPMCI_INFO_PARMSW* = ptr MCI_INFO_PARMSW
  MCI_GETDEVCAPS_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwReturn*: DWORD
    dwItem*: DWORD
  PMCI_GETDEVCAPS_PARMS* = ptr MCI_GETDEVCAPS_PARMS
  LPMCI_GETDEVCAPS_PARMS* = ptr MCI_GETDEVCAPS_PARMS
  MCI_SYSINFO_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    lpstrReturn*: LPSTR
    dwRetSize*: DWORD
    dwNumber*: DWORD
    wDeviceType*: UINT
  PMCI_SYSINFO_PARMSA* = ptr MCI_SYSINFO_PARMSA
  LPMCI_SYSINFO_PARMSA* = ptr MCI_SYSINFO_PARMSA
  MCI_SYSINFO_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    lpstrReturn*: LPWSTR
    dwRetSize*: DWORD
    dwNumber*: DWORD
    wDeviceType*: UINT
  PMCI_SYSINFO_PARMSW* = ptr MCI_SYSINFO_PARMSW
  LPMCI_SYSINFO_PARMSW* = ptr MCI_SYSINFO_PARMSW
  MCI_SET_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwTimeFormat*: DWORD
    dwAudio*: DWORD
  PMCI_SET_PARMS* = ptr MCI_SET_PARMS
  LPMCI_SET_PARMS* = ptr MCI_SET_PARMS
  MCI_BREAK_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    nVirtKey*: int32
    hwndBreak*: HWND
  PMCI_BREAK_PARMS* = ptr MCI_BREAK_PARMS
  LPMCI_BREAK_PARMS* = ptr MCI_BREAK_PARMS
  MCI_SAVE_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    lpfilename*: LPCSTR
  PMCI_SAVE_PARMSA* = ptr MCI_SAVE_PARMSA
  LPMCI_SAVE_PARMSA* = ptr MCI_SAVE_PARMSA
  MCI_SAVE_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    lpfilename*: LPCWSTR
  PMCI_SAVE_PARMSW* = ptr MCI_SAVE_PARMSW
  LPMCI_SAVE_PARMSW* = ptr MCI_SAVE_PARMSW
  MCI_LOAD_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    lpfilename*: LPCSTR
  PMCI_LOAD_PARMSA* = ptr MCI_LOAD_PARMSA
  LPMCI_LOAD_PARMSA* = ptr MCI_LOAD_PARMSA
  MCI_LOAD_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    lpfilename*: LPCWSTR
  PMCI_LOAD_PARMSW* = ptr MCI_LOAD_PARMSW
  LPMCI_LOAD_PARMSW* = ptr MCI_LOAD_PARMSW
  MCI_RECORD_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwFrom*: DWORD
    dwTo*: DWORD
  LPMCI_RECORD_PARMS* = ptr MCI_RECORD_PARMS
  MCI_VD_PLAY_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwFrom*: DWORD
    dwTo*: DWORD
    dwSpeed*: DWORD
  PMCI_VD_PLAY_PARMS* = ptr MCI_VD_PLAY_PARMS
  LPMCI_VD_PLAY_PARMS* = ptr MCI_VD_PLAY_PARMS
  MCI_VD_STEP_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwFrames*: DWORD
  PMCI_VD_STEP_PARMS* = ptr MCI_VD_STEP_PARMS
  LPMCI_VD_STEP_PARMS* = ptr MCI_VD_STEP_PARMS
  MCI_VD_ESCAPE_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    lpstrCommand*: LPCSTR
  PMCI_VD_ESCAPE_PARMSA* = ptr MCI_VD_ESCAPE_PARMSA
  LPMCI_VD_ESCAPE_PARMSA* = ptr MCI_VD_ESCAPE_PARMSA
  MCI_VD_ESCAPE_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    lpstrCommand*: LPCWSTR
  PMCI_VD_ESCAPE_PARMSW* = ptr MCI_VD_ESCAPE_PARMSW
  LPMCI_VD_ESCAPE_PARMSW* = ptr MCI_VD_ESCAPE_PARMSW
  MCI_WAVE_OPEN_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    wDeviceID*: MCIDEVICEID
    lpstrDeviceType*: LPCSTR
    lpstrElementName*: LPCSTR
    lpstrAlias*: LPCSTR
    dwBufferSeconds*: DWORD
  PMCI_WAVE_OPEN_PARMSA* = ptr MCI_WAVE_OPEN_PARMSA
  LPMCI_WAVE_OPEN_PARMSA* = ptr MCI_WAVE_OPEN_PARMSA
  MCI_WAVE_OPEN_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    wDeviceID*: MCIDEVICEID
    lpstrDeviceType*: LPCWSTR
    lpstrElementName*: LPCWSTR
    lpstrAlias*: LPCWSTR
    dwBufferSeconds*: DWORD
  PMCI_WAVE_OPEN_PARMSW* = ptr MCI_WAVE_OPEN_PARMSW
  LPMCI_WAVE_OPEN_PARMSW* = ptr MCI_WAVE_OPEN_PARMSW
  MCI_WAVE_DELETE_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwFrom*: DWORD
    dwTo*: DWORD
  PMCI_WAVE_DELETE_PARMS* = ptr MCI_WAVE_DELETE_PARMS
  LPMCI_WAVE_DELETE_PARMS* = ptr MCI_WAVE_DELETE_PARMS
  MCI_WAVE_SET_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwTimeFormat*: DWORD
    dwAudio*: DWORD
    wInput*: UINT
    wOutput*: UINT
    wFormatTag*: WORD
    wReserved2*: WORD
    nChannels*: WORD
    wReserved3*: WORD
    nSamplesPerSec*: DWORD
    nAvgBytesPerSec*: DWORD
    nBlockAlign*: WORD
    wReserved4*: WORD
    wBitsPerSample*: WORD
    wReserved5*: WORD
  PMCI_WAVE_SET_PARMS* = ptr MCI_WAVE_SET_PARMS
  LPMCI_WAVE_SET_PARMS* = ptr MCI_WAVE_SET_PARMS

proc CloseDriver*(P1: HDRVR, P2: LONG, P3: LONG): LRESULT {.winapi, dynlib: "winmm", importc.}
proc OpenDriver*(P1: LPCWSTR, P2: LPCWSTR, P3: LONG): HDRVR {.winapi, dynlib: "winmm", importc.}
proc SendDriverMessage*(P1: HDRVR, P2: UINT, P3: LONG, P4: LONG): LRESULT {.winapi, dynlib: "winmm", importc.}
proc DrvGetModuleHandle*(P1: HDRVR): HMODULE {.winapi, dynlib: "winmm", importc.}
proc GetDriverModuleHandle*(P1: HDRVR): HMODULE {.winapi, dynlib: "winmm", importc.}
proc DefDriverProc*(P1: DWORD, P2: HDRVR, P3: UINT, P4: LPARAM, P5: LPARAM): LRESULT {.winapi, dynlib: "winmm", importc.}
proc mmsystemGetVersion*(): UINT {.winapi, dynlib: "winmm", importc.}
proc sndPlaySoundA*(P1: LPCSTR, P2: UINT): BOOL {.winapi, dynlib: "winmm", importc.}
proc sndPlaySoundW*(P1: LPCWSTR, P2: UINT): BOOL {.winapi, dynlib: "winmm", importc.}
proc PlaySoundA*(P1: LPCSTR, P2: HMODULE, P3: DWORD): BOOL {.winapi, dynlib: "winmm", importc.}
proc PlaySoundW*(P1: LPCWSTR, P2: HMODULE, P3: DWORD): BOOL {.winapi, dynlib: "winmm", importc.}
proc waveOutGetNumDevs*(): UINT {.winapi, dynlib: "winmm", importc.}
proc waveOutGetDevCapsA*(P1: UINT, P2: LPWAVEOUTCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutGetDevCapsW*(P1: UINT, P2: LPWAVEOUTCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutGetVolume*(P1: HWAVEOUT, P2: PDWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutSetVolume*(P1: HWAVEOUT, P2: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutGetErrorTextA*(P1: MMRESULT, P2: LPSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutGetErrorTextW*(P1: MMRESULT, P2: LPWSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutOpen*(P1: LPHWAVEOUT, P2: UINT, P3: LPCWAVEFORMATEX, P4: DWORD, P5: DWORD, P6: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutClose*(P1: HWAVEOUT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutPrepareHeader*(P1: HWAVEOUT, P2: LPWAVEHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutUnprepareHeader*(P1: HWAVEOUT, P2: LPWAVEHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutWrite*(P1: HWAVEOUT, P2: LPWAVEHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutPause*(P1: HWAVEOUT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutRestart*(P1: HWAVEOUT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutReset*(P1: HWAVEOUT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutBreakLoop*(P1: HWAVEOUT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutGetPosition*(P1: HWAVEOUT, P2: LPMMTIME, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutGetPitch*(P1: HWAVEOUT, P2: PDWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutSetPitch*(P1: HWAVEOUT, P2: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutGetPlaybackRate*(P1: HWAVEOUT, P2: PDWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutSetPlaybackRate*(P1: HWAVEOUT, P2: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutGetID*(P1: HWAVEOUT, P2: LPUINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutMessage*(P1: HWAVEOUT, P2: UINT, P3: DWORD, P4: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInGetNumDevs*(): UINT {.winapi, dynlib: "winmm", importc.}
proc waveInGetDevCapsA*(P1: UINT, P2: LPWAVEINCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInGetDevCapsW*(P1: UINT, P2: LPWAVEINCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInGetErrorTextA*(P1: MMRESULT, P2: LPSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInGetErrorTextW*(P1: MMRESULT, P2: LPWSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInOpen*(P1: LPHWAVEIN, P2: UINT, P3: LPCWAVEFORMATEX, P4: DWORD, P5: DWORD, P6: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInClose*(P1: HWAVEIN): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInPrepareHeader*(P1: HWAVEIN, P2: LPWAVEHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInUnprepareHeader*(P1: HWAVEIN, P2: LPWAVEHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInAddBuffer*(P1: HWAVEIN, P2: LPWAVEHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInStart*(P1: HWAVEIN): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInStop*(P1: HWAVEIN): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInReset*(P1: HWAVEIN): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInGetPosition*(P1: HWAVEIN, P2: LPMMTIME, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInGetID*(P1: HWAVEIN, P2: LPUINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInMessage*(P1: HWAVEIN, P2: UINT, P3: DWORD, P4: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutGetNumDevs*(): UINT {.winapi, dynlib: "winmm", importc.}
proc midiStreamOpen*(P1: LPHMIDISTRM, P2: LPUINT, P3: DWORD, P4: DWORD, P5: DWORD, P6: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiStreamClose*(P1: HMIDISTRM): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiStreamProperty*(P1: HMIDISTRM, P2: LPBYTE, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiStreamPosition*(P1: HMIDISTRM, P2: LPMMTIME, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiStreamOut*(P1: HMIDISTRM, P2: LPMIDIHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiStreamPause*(P1: HMIDISTRM): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiStreamRestart*(P1: HMIDISTRM): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiStreamStop*(P1: HMIDISTRM): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiConnect*(P1: HMIDI, P2: HMIDIOUT, P3: PVOID): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiDisconnect*(P1: HMIDI, P2: HMIDIOUT, P3: PVOID): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutGetDevCapsA*(P1: UINT, P2: LPMIDIOUTCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutGetDevCapsW*(P1: UINT, P2: LPMIDIOUTCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutGetVolume*(P1: HMIDIOUT, P2: PDWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutSetVolume*(P1: HMIDIOUT, P2: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutGetErrorTextA*(P1: MMRESULT, P2: LPSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutGetErrorTextW*(P1: MMRESULT, P2: LPWSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutOpen*(P1: LPHMIDIOUT, P2: UINT, P3: DWORD, P4: DWORD, P5: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutClose*(P1: HMIDIOUT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutPrepareHeader*(P1: HMIDIOUT, P2: LPMIDIHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutUnprepareHeader*(P1: HMIDIOUT, P2: LPMIDIHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutShortMsg*(P1: HMIDIOUT, P2: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutLongMsg*(P1: HMIDIOUT, P2: LPMIDIHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutReset*(P1: HMIDIOUT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutCachePatches*(P1: HMIDIOUT, P2: UINT, P3: LPWORD, P4: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutCacheDrumPatches*(P1: HMIDIOUT, P2: UINT, P3: LPWORD, P4: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutGetID*(P1: HMIDIOUT, P2: LPUINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutMessage*(P1: HMIDIOUT, P2: UINT, P3: DWORD, P4: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInGetNumDevs*(): UINT {.winapi, dynlib: "winmm", importc.}
proc midiInGetDevCapsA*(P1: UINT, P2: LPMIDIINCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInGetDevCapsW*(P1: UINT, P2: LPMIDIINCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInGetErrorTextA*(P1: MMRESULT, P2: LPSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInGetErrorTextW*(P1: MMRESULT, P2: LPWSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInOpen*(P1: LPHMIDIIN, P2: UINT, P3: DWORD, P4: DWORD, P5: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInClose*(P1: HMIDIIN): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInPrepareHeader*(P1: HMIDIIN, P2: LPMIDIHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInUnprepareHeader*(P1: HMIDIIN, P2: LPMIDIHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInAddBuffer*(P1: HMIDIIN, P2: LPMIDIHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInStart*(P1: HMIDIIN): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInStop*(P1: HMIDIIN): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInReset*(P1: HMIDIIN): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInGetID*(P1: HMIDIIN, P2: LPUINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInMessage*(P1: HMIDIIN, P2: UINT, P3: DWORD, P4: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc auxGetNumDevs*(): UINT {.winapi, dynlib: "winmm", importc.}
proc auxGetDevCapsA*(P1: UINT, P2: LPAUXCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc auxGetDevCapsW*(P1: UINT, P2: LPAUXCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc auxSetVolume*(P1: UINT, P2: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc auxGetVolume*(P1: UINT, P2: PDWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc auxOutMessage*(P1: UINT, P2: UINT, P3: DWORD, P4: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerGetNumDevs*(): UINT {.winapi, dynlib: "winmm", importc.}
proc mixerGetDevCapsA*(P1: UINT, P2: LPMIXERCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerGetDevCapsW*(P1: UINT, P2: LPMIXERCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerOpen*(P1: LPHMIXER, P2: UINT, P3: DWORD, P4: DWORD, P5: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerClose*(P1: HMIXER): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerMessage*(P1: HMIXER, P2: UINT, P3: DWORD, P4: DWORD): DWORD {.winapi, dynlib: "winmm", importc.}
proc mixerGetLineInfoA*(P1: HMIXEROBJ, P2: LPMIXERLINEA, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerGetLineInfoW*(P1: HMIXEROBJ, P2: LPMIXERLINEW, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerGetID*(P1: HMIXEROBJ, P2: PUINT, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerGetLineControlsA*(P1: HMIXEROBJ, P2: LPMIXERLINECONTROLSA, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerGetLineControlsW*(P1: HMIXEROBJ, P2: LPMIXERLINECONTROLSW, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerGetControlDetailsA*(P1: HMIXEROBJ, P2: LPMIXERCONTROLDETAILS, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerGetControlDetailsW*(P1: HMIXEROBJ, P2: LPMIXERCONTROLDETAILS, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerSetControlDetails*(P1: HMIXEROBJ, P2: LPMIXERCONTROLDETAILS, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc timeGetSystemTime*(P1: LPMMTIME, P2: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc timeGetTime*(): DWORD {.winapi, dynlib: "winmm", importc.}
proc timeSetEvent*(P1: UINT, P2: UINT, P3: LPTIMECALLBACK, P4: DWORD, P5: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc timeKillEvent*(P1: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc timeGetDevCaps*(P1: LPTIMECAPS, P2: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc timeBeginPeriod*(P1: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc timeEndPeriod*(P1: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc joyGetNumDevs*(): UINT {.winapi, dynlib: "winmm", importc.}
proc joyGetDevCapsA*(P1: UINT, P2: LPJOYCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc joyGetDevCapsW*(P1: UINT, P2: LPJOYCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc joyGetPos*(P1: UINT, P2: LPJOYINFO): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc joyGetPosEx*(P1: UINT, P2: LPJOYINFOEX): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc joyGetThreshold*(P1: UINT, P2: LPUINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc joyReleaseCapture*(P1: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc joySetCapture*(P1: HWND, P2: UINT, P3: UINT, P4: BOOL): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc joySetThreshold*(P1: UINT, P2: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioStringToFOURCCA*(P1: LPCSTR, P2: UINT): FOURCC {.winapi, dynlib: "winmm", importc.}
proc mmioStringToFOURCCW*(P1: LPCWSTR, P2: UINT): FOURCC {.winapi, dynlib: "winmm", importc.}
proc mmioInstallIOProcA*(P1: FOURCC, P2: LPMMIOPROC, P3: DWORD): LPMMIOPROC {.winapi, dynlib: "winmm", importc.}
proc mmioInstallIOProcW*(P1: FOURCC, P2: LPMMIOPROC, P3: DWORD): LPMMIOPROC {.winapi, dynlib: "winmm", importc.}
proc mmioOpenA*(P1: LPSTR, P2: LPMMIOINFO, P3: DWORD): HMMIO {.winapi, dynlib: "winmm", importc.}
proc mmioOpenW*(P1: LPWSTR, P2: LPMMIOINFO, P3: DWORD): HMMIO {.winapi, dynlib: "winmm", importc.}
proc mmioRenameA*(P1: LPCSTR, P2: LPCSTR, P3: LPCMMIOINFO, P4: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioRenameW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCMMIOINFO, P4: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioClose*(P1: HMMIO, P2: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioRead*(P1: HMMIO, P2: HPSTR, P3: LONG): LONG {.winapi, dynlib: "winmm", importc.}
proc mmioWrite*(P1: HMMIO, P2: LPCSTR, P3: LONG): LONG {.winapi, dynlib: "winmm", importc.}
proc mmioSeek*(P1: HMMIO, P2: LONG, P3: int32): LONG {.winapi, dynlib: "winmm", importc.}
proc mmioGetInfo*(P1: HMMIO, P2: LPMMIOINFO, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioSetInfo*(P1: HMMIO, P2: LPCMMIOINFO, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioSetBuffer*(P1: HMMIO, P2: LPSTR, P3: LONG, P4: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioFlush*(P1: HMMIO, P2: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioAdvance*(P1: HMMIO, P2: LPMMIOINFO, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioSendMessage*(P1: HMMIO, P2: UINT, P3: LPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioDescend*(P1: HMMIO, P2: LPMMCKINFO, P3: ptr MMCKINFO, P4: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioAscend*(P1: HMMIO, P2: LPMMCKINFO, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioCreateChunk*(P1: HMMIO, P2: LPMMCKINFO, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mciSendCommandA*(P1: MCIDEVICEID, P2: UINT, P3: DWORD, P4: DWORD): MCIERROR {.winapi, dynlib: "winmm", importc.}
proc mciSendCommandW*(P1: MCIDEVICEID, P2: UINT, P3: DWORD, P4: DWORD): MCIERROR {.winapi, dynlib: "winmm", importc.}
proc mciSendStringA*(P1: LPCSTR, P2: LPSTR, P3: UINT, P4: HWND): MCIERROR {.winapi, dynlib: "winmm", importc.}
proc mciSendStringW*(P1: LPCWSTR, P2: LPWSTR, P3: UINT, P4: HWND): MCIERROR {.winapi, dynlib: "winmm", importc.}
proc mciGetDeviceIDA*(P1: LPCSTR): MCIDEVICEID {.winapi, dynlib: "winmm", importc.}
proc mciGetDeviceIDW*(P1: LPCWSTR): MCIDEVICEID {.winapi, dynlib: "winmm", importc.}
proc mciGetDeviceIDFromElementIDA*(P1: DWORD, P2: LPCSTR): MCIDEVICEID {.winapi, dynlib: "winmm", importc.}
proc mciGetDeviceIDFromElementIDW*(P1: DWORD, P2: LPCWSTR): MCIDEVICEID {.winapi, dynlib: "winmm", importc.}
proc mciGetErrorStringA*(P1: MCIERROR, P2: LPSTR, P3: UINT): BOOL {.winapi, dynlib: "winmm", importc.}
proc mciGetErrorStringW*(P1: MCIERROR, P2: LPWSTR, P3: UINT): BOOL {.winapi, dynlib: "winmm", importc.}
proc mciSetYieldProc*(P1: MCIDEVICEID, P2: YIELDPROC, P3: DWORD): BOOL {.winapi, dynlib: "winmm", importc.}
proc mciGetCreatorTask*(P1: MCIDEVICEID): HTASK {.winapi, dynlib: "winmm", importc.}
proc mciGetYieldProc*(P1: MCIDEVICEID, P2: PDWORD): YIELDPROC {.winapi, dynlib: "winmm", importc.}

type
  MCI_SEQ_SET_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwTimeFormat*: DWORD
    dwAudio*: DWORD
    dwTempo*: DWORD
    dwPort*: DWORD
    dwSlave*: DWORD
    dwMaster*: DWORD
    dwOffset*: DWORD
  PMCI_SEQ_SET_PARMS* = ptr MCI_SEQ_SET_PARMS
  LPMCI_SEQ_SET_PARMS* = ptr MCI_SEQ_SET_PARMS
  MCI_ANIM_OPEN_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    wDeviceID*: MCIDEVICEID
    lpstrDeviceType*: LPCSTR
    lpstrElementName*: LPCSTR
    lpstrAlias*: LPCSTR
    dwStyle*: DWORD
    hWndParent*: HWND
  PMCI_ANIM_OPEN_PARMSA* = ptr MCI_ANIM_OPEN_PARMSA
  LPMCI_ANIM_OPEN_PARMSA* = ptr MCI_ANIM_OPEN_PARMSA
  MCI_ANIM_OPEN_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    wDeviceID*: MCIDEVICEID
    lpstrDeviceType*: LPCWSTR
    lpstrElementName*: LPCWSTR
    lpstrAlias*: LPCWSTR
    dwStyle*: DWORD
    hWndParent*: HWND
  PMCI_ANIM_OPEN_PARMSW* = ptr MCI_ANIM_OPEN_PARMSW
  LPMCI_ANIM_OPEN_PARMSW* = ptr MCI_ANIM_OPEN_PARMSW
  MCI_ANIM_PLAY_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwFrom*: DWORD
    dwTo*: DWORD
    dwSpeed*: DWORD
  PMCI_ANIM_PLAY_PARMS* = ptr MCI_ANIM_PLAY_PARMS
  LPMCI_ANIM_PLAY_PARMS* = ptr MCI_ANIM_PLAY_PARMS
  MCI_ANIM_STEP_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwFrames*: DWORD
  PMCI_ANIM_STEP_PARMS* = ptr MCI_ANIM_STEP_PARMS
  LPMCI_ANIM_STEP_PARMS* = ptr MCI_ANIM_STEP_PARMS
  MCI_ANIM_WINDOW_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    hWnd*: HWND
    nCmdShow*: UINT
    lpstrText*: LPCSTR
  PMCI_ANIM_WINDOW_PARMSA* = ptr MCI_ANIM_WINDOW_PARMSA
  LPMCI_ANIM_WINDOW_PARMSA* = ptr MCI_ANIM_WINDOW_PARMSA
  MCI_ANIM_WINDOW_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    hWnd*: HWND
    nCmdShow*: UINT
    lpstrText*: LPCWSTR
  PMCI_ANIM_WINDOW_PARMSW* = ptr MCI_ANIM_WINDOW_PARMSW
  LPMCI_ANIM_WINDOW_PARMSW* = ptr MCI_ANIM_WINDOW_PARMSW
  MCI_ANIM_RECT_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    rc*: RECT
  PMCI_ANIM_RECT_PARMS* = ptr MCI_ANIM_RECT_PARMS
  LPMCI_ANIM_RECT_PARMS* = ptr MCI_ANIM_RECT_PARMS
  MCI_ANIM_UPDATE_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    rc*: RECT
    hDC*: HDC
  PMCI_ANIM_UPDATE_PARMS* = ptr MCI_ANIM_UPDATE_PARMS
  LPMCI_ANIM_UPDATE_PARMS* = ptr MCI_ANIM_UPDATE_PARMS
  MCI_OVLY_OPEN_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    wDeviceID*: MCIDEVICEID
    lpstrDeviceType*: LPCSTR
    lpstrElementName*: LPCSTR
    lpstrAlias*: LPCSTR
    dwStyle*: DWORD
    hWndParent*: HWND
  PMCI_OVLY_OPEN_PARMSA* = ptr MCI_OVLY_OPEN_PARMSA
  LPMCI_OVLY_OPEN_PARMSA* = ptr MCI_OVLY_OPEN_PARMSA
  MCI_OVLY_OPEN_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    wDeviceID*: MCIDEVICEID
    lpstrDeviceType*: LPCWSTR
    lpstrElementName*: LPCWSTR
    lpstrAlias*: LPCWSTR
    dwStyle*: DWORD
    hWndParent*: HWND
  PMCI_OVLY_OPEN_PARMSW* = ptr MCI_OVLY_OPEN_PARMSW
  LPMCI_OVLY_OPEN_PARMSW* = ptr MCI_OVLY_OPEN_PARMSW
  MCI_OVLY_WINDOW_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    hWnd*: HWND
    nCmdShow*: UINT
    lpstrText*: LPCSTR
  PMCI_OVLY_WINDOW_PARMSA* = ptr MCI_OVLY_WINDOW_PARMSA
  LPMCI_OVLY_WINDOW_PARMSA* = ptr MCI_OVLY_WINDOW_PARMSA
  MCI_OVLY_WINDOW_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    hWnd*: HWND
    nCmdShow*: UINT
    lpstrText*: LPCWSTR
  PMCI_OVLY_WINDOW_PARMSW* = ptr MCI_OVLY_WINDOW_PARMSW
  LPMCI_OVLY_WINDOW_PARMSW* = ptr MCI_OVLY_WINDOW_PARMSW
  MCI_OVLY_RECT_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    rc*: RECT
  PMCI_OVLY_RECT_PARMS* = ptr MCI_OVLY_RECT_PARMS
  LPMCI_OVLY_RECT_PARMS* = ptr MCI_OVLY_RECT_PARMS
  MCI_OVLY_SAVE_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    lpfilename*: LPCSTR
    rc*: RECT
  PMCI_OVLY_SAVE_PARMSA* = ptr MCI_OVLY_SAVE_PARMSA
  LPMCI_OVLY_SAVE_PARMSA* = ptr MCI_OVLY_SAVE_PARMSA
  MCI_OVLY_SAVE_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    lpfilename*: LPCWSTR
    rc*: RECT
  PMCI_OVLY_SAVE_PARMSW* = ptr MCI_OVLY_SAVE_PARMSW
  LPMCI_OVLY_SAVE_PARMSW* = ptr MCI_OVLY_SAVE_PARMSW
  MCI_OVLY_LOAD_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    lpfilename*: LPCSTR
    rc*: RECT
  PMCI_OVLY_LOAD_PARMSA* = ptr MCI_OVLY_LOAD_PARMSA
  LPMCI_OVLY_LOAD_PARMSA* = ptr MCI_OVLY_LOAD_PARMSA
  MCI_OVLY_LOAD_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    lpfilename*: LPCWSTR
    rc*: RECT
  PMCI_OVLY_LOAD_PARMSW* = ptr MCI_OVLY_LOAD_PARMSW
  LPMCI_OVLY_LOAD_PARMSW* = ptr MCI_OVLY_LOAD_PARMSW

when not defined(winansi):
  type
    WAVEOUTCAPS* = WAVEOUTCAPSW
    WAVEINCAPS* = WAVEINCAPSW
    MIDIOUTCAPS* = MIDIOUTCAPSW
    MIDIINCAPS* = MIDIINCAPSW
    AUXCAPS* = AUXCAPSW
    MIXERCAPS* = MIXERCAPSW
    MIXERLINE* = MIXERLINEW
    MIXERCONTROL* = MIXERCONTROLA
    MIXERLINECONTROLS* = MIXERLINECONTROLSW
    MIXERCONTROLDETAILS_LISTTEXT* = MIXERCONTROLDETAILS_LISTTEXTW
    JOYCAPS* = JOYCAPSW
    MCI_OPEN_PARMS* = MCI_OPEN_PARMSW
    MCI_INFO_PARMS* = MCI_INFO_PARMSW
    MCI_SYSINFO_PARMS* = MCI_SYSINFO_PARMSW
    MCI_SAVE_PARMS* = MCI_SAVE_PARMSW
    MCI_LOAD_PARMS* = MCI_LOAD_PARMSW
    MCI_VD_ESCAPE_PARMS* = MCI_VD_ESCAPE_PARMSW
    MCI_WAVE_OPEN_PARMS* = MCI_WAVE_OPEN_PARMSW
    MCI_ANIM_OPEN_PARMS* = MCI_ANIM_OPEN_PARMSW
    MCI_ANIM_WINDOW_PARMS* = MCI_ANIM_WINDOW_PARMSW
    MCI_OVLY_OPEN_PARMS* = MCI_OVLY_OPEN_PARMSW
    MCI_OVLY_WINDOW_PARMS* = MCI_OVLY_WINDOW_PARMSW
    MCI_OVLY_SAVE_PARMS* = MCI_OVLY_SAVE_PARMSW

  proc sndPlaySound*(P1: LPCWSTR, P2: UINT): BOOL {.winapi, dynlib: "winmm", importc: "sndPlaySoundW".}
  proc PlaySound*(P1: LPCWSTR, P2: HMODULE, P3: DWORD): BOOL {.winapi, dynlib: "winmm", importc: "PlaySoundW".}
  proc waveOutGetDevCaps*(P1: UINT, P2: LPWAVEOUTCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "waveOutGetDevCapsW".}
  proc waveOutGetErrorText*(P1: MMRESULT, P2: LPWSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "waveOutGetErrorTextW".}
  proc waveInGetDevCaps*(P1: UINT, P2: LPWAVEINCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "waveInGetDevCapsW".}
  proc waveInGetErrorText*(P1: MMRESULT, P2: LPWSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "waveInGetErrorTextW".}
  proc midiOutGetDevCaps*(P1: UINT, P2: LPMIDIOUTCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "midiOutGetDevCapsW".}
  proc midiOutGetErrorText*(P1: MMRESULT, P2: LPWSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "midiOutGetErrorTextW".}
  proc midiInGetDevCaps*(P1: UINT, P2: LPMIDIINCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "midiInGetDevCapsW".}
  proc midiInGetErrorText*(P1: MMRESULT, P2: LPWSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "midiInGetErrorTextW".}
  proc auxGetDevCaps*(P1: UINT, P2: LPAUXCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "auxGetDevCapsW".}
  proc mixerGetDevCaps*(P1: UINT, P2: LPMIXERCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "mixerGetDevCapsW".}
  proc mixerGetLineInfo*(P1: HMIXEROBJ, P2: LPMIXERLINEW, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc: "mixerGetLineInfoW".}
  proc mixerGetLineControls*(P1: HMIXEROBJ, P2: LPMIXERLINECONTROLSW, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc: "mixerGetLineControlsW".}
  proc mixerGetControlDetails*(P1: HMIXEROBJ, P2: LPMIXERCONTROLDETAILS, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc: "mixerGetControlDetailsW".}
  proc joyGetDevCaps*(P1: UINT, P2: LPJOYCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "joyGetDevCapsW".}
  proc mmioInstallIOProc*(P1: FOURCC, P2: LPMMIOPROC, P3: DWORD): LPMMIOPROC {.winapi, dynlib: "winmm", importc: "mmioInstallIOProcW".}
  proc mmioStringToFOURCC*(P1: LPCWSTR, P2: UINT): FOURCC {.winapi, dynlib: "winmm", importc: "mmioStringToFOURCCW".}
  proc mmioOpen*(P1: LPWSTR, P2: LPMMIOINFO, P3: DWORD): HMMIO {.winapi, dynlib: "winmm", importc: "mmioOpenW".}
  proc mmioRename*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCMMIOINFO, P4: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc: "mmioRenameW".}
  proc mciSendCommand*(P1: MCIDEVICEID, P2: UINT, P3: DWORD, P4: DWORD): MCIERROR {.winapi, dynlib: "winmm", importc: "mciSendCommandW".}
  proc mciSendString*(P1: LPCWSTR, P2: LPWSTR, P3: UINT, P4: HWND): MCIERROR {.winapi, dynlib: "winmm", importc: "mciSendStringW".}
  proc mciGetDeviceID*(P1: LPCWSTR): MCIDEVICEID {.winapi, dynlib: "winmm", importc: "mciGetDeviceIDW".}
  proc mciGetDeviceIDFromElementID*(P1: DWORD, P2: LPCWSTR): MCIDEVICEID {.winapi, dynlib: "winmm", importc: "mciGetDeviceIDFromElementIDW".}
  proc mciGetErrorString*(P1: MCIERROR, P2: LPWSTR, P3: UINT): BOOL {.winapi, dynlib: "winmm", importc: "mciGetErrorStringW".}

else:
  type
    WAVEOUTCAPS* = WAVEOUTCAPSA
    WAVEINCAPS* = WAVEINCAPSA
    MIDIOUTCAPS* = MIDIOUTCAPSA
    MIDIINCAPS* = MIDIINCAPSA
    AUXCAPS* = AUXCAPSA
    MIXERCAPS* = MIXERCAPSA
    MIXERLINE* = MIXERLINEA
    MIXERCONTROL* = MIXERCONTROLA
    MIXERLINECONTROLS* = MIXERLINECONTROLSA
    MIXERCONTROLDETAILS_LISTTEXT* = MIXERCONTROLDETAILS_LISTTEXTA
    JOYCAPS* = JOYCAPSA
    MCI_OPEN_PARMS* = MCI_OPEN_PARMSA
    MCI_INFO_PARMS* = MCI_INFO_PARMSA
    MCI_SYSINFO_PARMS* = MCI_SYSINFO_PARMSA
    MCI_SAVE_PARMS* = MCI_SAVE_PARMSA
    MCI_LOAD_PARMS* = MCI_LOAD_PARMSA
    MCI_VD_ESCAPE_PARMS* = MCI_VD_ESCAPE_PARMSA
    MCI_WAVE_OPEN_PARMS* = MCI_WAVE_OPEN_PARMSA
    MCI_ANIM_OPEN_PARMS* = MCI_ANIM_OPEN_PARMSA
    MCI_ANIM_WINDOW_PARMS* = MCI_ANIM_WINDOW_PARMSA
    MCI_OVLY_OPEN_PARMS* = MCI_OVLY_OPEN_PARMSA
    MCI_OVLY_WINDOW_PARMS* = MCI_OVLY_WINDOW_PARMSA
    MCI_OVLY_SAVE_PARMS* = MCI_OVLY_SAVE_PARMSA

  proc sndPlaySound*(P1: LPCSTR, P2: UINT): BOOL {.winapi, dynlib: "winmm", importc: "sndPlaySoundA".}
  proc PlaySound*(P1: LPCSTR, P2: HMODULE, P3: DWORD): BOOL {.winapi, dynlib: "winmm", importc: "PlaySoundA".}
  proc waveOutGetDevCaps*(P1: UINT, P2: LPWAVEOUTCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "waveOutGetDevCapsA".}
  proc waveOutGetErrorText*(P1: MMRESULT, P2: LPSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "waveOutGetErrorTextA".}
  proc waveInGetDevCaps*(P1: UINT, P2: LPWAVEINCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "waveInGetDevCapsA".}
  proc waveInGetErrorText*(P1: MMRESULT, P2: LPSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "waveInGetErrorTextA".}
  proc midiOutGetDevCaps*(P1: UINT, P2: LPMIDIOUTCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "midiOutGetDevCapsA".}
  proc midiOutGetErrorText*(P1: MMRESULT, P2: LPSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "midiOutGetErrorTextA".}
  proc midiInGetDevCaps*(P1: UINT, P2: LPMIDIINCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "midiInGetDevCapsA".}
  proc midiInGetErrorText*(P1: MMRESULT, P2: LPSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "midiInGetErrorTextA".}
  proc auxGetDevCaps*(P1: UINT, P2: LPAUXCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "auxGetDevCapsA".}
  proc mixerGetDevCaps*(P1: UINT, P2: LPMIXERCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "mixerGetDevCapsA".}
  proc mixerGetLineInfo*(P1: HMIXEROBJ, P2: LPMIXERLINEA, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc: "mixerGetLineInfoA".}
  proc mixerGetLineControls*(P1: HMIXEROBJ, P2: LPMIXERLINECONTROLSA, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc: "mixerGetLineControlsA".}
  proc mixerGetControlDetails*(P1: HMIXEROBJ, P2: LPMIXERCONTROLDETAILS, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc: "mixerGetControlDetailsA".}
  proc joyGetDevCaps*(P1: UINT, P2: LPJOYCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "joyGetDevCapsA".}
  proc mmioInstallIOProc*(P1: FOURCC, P2: LPMMIOPROC, P3: DWORD): LPMMIOPROC {.winapi, dynlib: "winmm", importc: "mmioInstallIOProcA".}
  proc mmioStringToFOURCC*(P1: LPCSTR, P2: UINT): FOURCC {.winapi, dynlib: "winmm", importc: "mmioStringToFOURCCA".}
  proc mmioOpen*(P1: LPSTR, P2: LPMMIOINFO, P3: DWORD): HMMIO {.winapi, dynlib: "winmm", importc: "mmioOpenA".}
  proc mmioRename*(P1: LPCSTR, P2: LPCSTR, P3: LPCMMIOINFO, P4: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc: "mmioRenameA".}
  proc mciSendCommand*(P1: MCIDEVICEID, P2: UINT, P3: DWORD, P4: DWORD): MCIERROR {.winapi, dynlib: "winmm", importc: "mciSendCommandA".}
  proc mciSendString*(P1: LPCSTR, P2: LPSTR, P3: UINT, P4: HWND): MCIERROR {.winapi, dynlib: "winmm", importc: "mciSendStringA".}
  proc mciGetDeviceID*(P1: LPCSTR): MCIDEVICEID {.winapi, dynlib: "winmm", importc: "mciGetDeviceIDA".}
  proc mciGetDeviceIDFromElementID*(P1: DWORD, P2: LPCSTR): MCIDEVICEID {.winapi, dynlib: "winmm", importc: "mciGetDeviceIDFromElementIDA".}
  proc mciGetErrorString*(P1: MCIERROR, P2: LPSTR, P3: UINT): BOOL {.winapi, dynlib: "winmm", importc: "mciGetErrorStringA".}

type
  PWAVEOUTCAPS* = ptr WAVEOUTCAPS
  LPWAVEOUTCAPS* = ptr WAVEOUTCAPS
  PWAVEINCAPS* = ptr WAVEINCAPS
  LPWAVEINCAPS* = ptr WAVEINCAPS
  PMIDIOUTCAPS* = ptr MIDIOUTCAPS
  LPMIDIOUTCAPS* = ptr MIDIOUTCAPS
  PMIDIINCAPS* = ptr MIDIINCAPS
  LPMIDIINCAPS* = ptr MIDIINCAPS
  PAUXCAPS* = ptr AUXCAPS
  LPAUXCAPS* = ptr AUXCAPS
  PMIXERCAPS* = ptr MIXERCAPS
  LPMIXERCAPS* = ptr MIXERCAPS
  PMIXERLINE* = ptr MIXERLINE
  LPMIXERLINE* = ptr MIXERLINE
  PMIXERCONTROL* = ptr MIXERCONTROL
  LPMIXERCONTROL* = ptr MIXERCONTROL
  PMIXERLINECONTROLS* = ptr MIXERLINECONTROLS
  LPMIXERLINECONTROLS* = ptr MIXERLINECONTROLS
  PMIXERCONTROLDETAILS_LISTTEXT* = ptr MIXERCONTROLDETAILS_LISTTEXT
  LPMIXERCONTROLDETAILS_LISTTEXT* = ptr MIXERCONTROLDETAILS_LISTTEXT
  PJOYCAPS* = ptr JOYCAPS
  LPJOYCAPS* = ptr JOYCAPS
  PMCI_OPEN_PARMS* = ptr MCI_OPEN_PARMS
  LPMCI_OPEN_PARMS* = ptr MCI_OPEN_PARMS
  LPMCI_INFO_PARMS* = ptr MCI_INFO_PARMS
  PMCI_SYSINFO_PARMS* = ptr MCI_SYSINFO_PARMS
  LPMCI_SYSINFO_PARMS* = ptr MCI_SYSINFO_PARMS
  PMCI_SAVE_PARMS* = ptr MCI_SAVE_PARMS
  LPMCI_SAVE_PARMS* = ptr MCI_SAVE_PARMS
  PMCI_LOAD_PARMS* = ptr MCI_LOAD_PARMS
  LPMCI_LOAD_PARMS* = ptr MCI_LOAD_PARMS
  PMCI_VD_ESCAPE_PARMS* = ptr MCI_VD_ESCAPE_PARMS
  LPMCI_VD_ESCAPE_PARMS* = ptr MCI_VD_ESCAPE_PARMS
  PMCI_WAVE_OPEN_PARMS* = ptr MCI_WAVE_OPEN_PARMS
  LPMCI_WAVE_OPEN_PARMS* = ptr MCI_WAVE_OPEN_PARMS
  PMCI_ANIM_OPEN_PARMS* = ptr MCI_ANIM_OPEN_PARMS
  LPMCI_ANIM_OPEN_PARMS* = ptr MCI_ANIM_OPEN_PARMS
  PMCI_ANIM_WINDOW_PARMS* = ptr MCI_ANIM_WINDOW_PARMS
  LPMCI_ANIM_WINDOW_PARMS* = ptr MCI_ANIM_WINDOW_PARMS
  PMCI_OVLY_OPEN_PARMS* = ptr MCI_OVLY_OPEN_PARMS
  LPMCI_OVLY_OPEN_PARMS* = ptr MCI_OVLY_OPEN_PARMS
  PMCI_OVLY_WINDOW_PARMS* = ptr MCI_OVLY_WINDOW_PARMS
  LPMCI_OVLY_WINDOW_PARMS* = ptr MCI_OVLY_WINDOW_PARMS
  PMCI_OVLY_SAVE_PARMS* = ptr MCI_OVLY_SAVE_PARMS
  LPMCI_OVLY_SAVE_PARMS* = ptr MCI_OVLY_SAVE_PARMS

proc `ms=`*(self: var MMTIME, x: DWORD) = self.u1.ms = x
proc ms*(self: MMTIME): DWORD = self.u1.ms
proc `sample=`*(self: var MMTIME, x: DWORD) = self.u1.sample = x
proc sample*(self: MMTIME): DWORD = self.u1.sample
proc `cb=`*(self: var MMTIME, x: DWORD) = self.u1.cb = x
proc cb*(self: MMTIME): DWORD = self.u1.cb
proc `ticks=`*(self: var MMTIME, x: DWORD) = self.u1.ticks = x
proc ticks*(self: MMTIME): DWORD = self.u1.ticks
proc `lMinimum=`*(self: var MIXERCONTROLA, x: LONG) = self.Bounds.s1.lMinimum = x
proc lMinimum*(self: MIXERCONTROLA): LONG = self.Bounds.s1.lMinimum
proc `lMaximum=`*(self: var MIXERCONTROLA, x: LONG) = self.Bounds.s1.lMaximum = x
proc lMaximum*(self: MIXERCONTROLA): LONG = self.Bounds.s1.lMaximum
proc `dwMinimum=`*(self: var MIXERCONTROLA, x: DWORD) = self.Bounds.s2.dwMinimum = x
proc dwMinimum*(self: MIXERCONTROLA): DWORD = self.Bounds.s2.dwMinimum
proc `dwMaximum=`*(self: var MIXERCONTROLA, x: DWORD) = self.Bounds.s2.dwMaximum = x
proc dwMaximum*(self: MIXERCONTROLA): DWORD = self.Bounds.s2.dwMaximum
proc `lMinimum=`*(self: var MIXERCONTROLW, x: LONG) = self.Bounds.s1.lMinimum = x
proc lMinimum*(self: MIXERCONTROLW): LONG = self.Bounds.s1.lMinimum
proc `lMaximum=`*(self: var MIXERCONTROLW, x: LONG) = self.Bounds.s1.lMaximum = x
proc lMaximum*(self: MIXERCONTROLW): LONG = self.Bounds.s1.lMaximum
proc `dwMinimum=`*(self: var MIXERCONTROLW, x: DWORD) = self.Bounds.s2.dwMinimum = x
proc dwMinimum*(self: MIXERCONTROLW): DWORD = self.Bounds.s2.dwMinimum
proc `dwMaximum=`*(self: var MIXERCONTROLW, x: DWORD) = self.Bounds.s2.dwMaximum = x
proc dwMaximum*(self: MIXERCONTROLW): DWORD = self.Bounds.s2.dwMaximum
proc `dwControlID=`*(self: var MIXERLINECONTROLSA, x: DWORD) = self.u1.dwControlID = x
proc dwControlID*(self: MIXERLINECONTROLSA): DWORD = self.u1.dwControlID
proc `dwControlType=`*(self: var MIXERLINECONTROLSA, x: DWORD) = self.u1.dwControlType = x
proc dwControlType*(self: MIXERLINECONTROLSA): DWORD = self.u1.dwControlType
proc `dwControlID=`*(self: var MIXERLINECONTROLSW, x: DWORD) = self.u1.dwControlID = x
proc dwControlID*(self: MIXERLINECONTROLSW): DWORD = self.u1.dwControlID
proc `dwControlType=`*(self: var MIXERLINECONTROLSW, x: DWORD) = self.u1.dwControlType = x
proc dwControlType*(self: MIXERLINECONTROLSW): DWORD = self.u1.dwControlType
proc `hwndOwner=`*(self: var MIXERCONTROLDETAILS, x: HWND) = self.u1.hwndOwner = x
proc hwndOwner*(self: MIXERCONTROLDETAILS): HWND = self.u1.hwndOwner
proc `cMultipleItems=`*(self: var MIXERCONTROLDETAILS, x: DWORD) = self.u1.cMultipleItems = x
proc cMultipleItems*(self: MIXERCONTROLDETAILS): DWORD = self.u1.cMultipleItems

# ext/vfw.nim

proc VideoForWindowsVersion*(): DWORD {.winapi, dynlib: "msvfw32", importc.}

proc InitVFW*(): LONG {.winapi, dynlib: "msvfw32", importc.}
proc TermVFW*(): LONG {.winapi, dynlib: "msvfw32", importc.}

template MKFOURCC*(ch0: char, ch1: char, ch2: char, ch3: char): DWORD =
  ch0.DWORD or (ch1.DWORD shl 8) or (ch2.DWORD shl 16) or (ch3.DWORD shl 24)

template aviTWOCC(c0: char, c1: char): WORD =
  c0.WORD or (c1.WORD shl 8)

const
  ICVERSION* = 0x0104
  BI_1632* = 0x32333631
  ICTYPE_VIDEO* = mmioFOURCC('v', 'i', 'd', 'c')
  ICTYPE_AUDIO* = mmioFOURCC('a', 'u', 'd', 'c')
  ICERR_OK* = 0
  ICERR_DONTDRAW* = 1
  ICERR_NEWPALETTE* = 2
  ICERR_GOTOKEYFRAME* = 3
  ICERR_STOPDRAWING* = 4
  ICERR_UNSUPPORTED* = -1
  ICERR_BADFORMAT* = -2
  ICERR_MEMORY* = -3
  ICERR_INTERNAL* = -4
  ICERR_BADFLAGS* = -5
  ICERR_BADPARAM* = -6
  ICERR_BADSIZE* = -7
  ICERR_BADHANDLE* = -8
  ICERR_CANTUPDATE* = -9
  ICERR_ABORT* = -10
  ICERR_ERROR* = -100
  ICERR_BADBITDEPTH* = -200
  ICERR_BADIMAGESIZE* = -201
  ICERR_CUSTOM* = -400
  ICMODE_COMPRESS* = 1
  ICMODE_DECOMPRESS* = 2
  ICMODE_FASTDECOMPRESS* = 3
  ICMODE_QUERY* = 4
  ICMODE_FASTCOMPRESS* = 5
  ICMODE_DRAW* = 8
  ICMODE_INTERNALF_FUNCTION32* = 0x8000
  ICMODE_INTERNALF_MASK* = 0x8000
  AVIIF_LIST* = 0x00000001
  AVIIF_TWOCC* = 0x00000002
  AVIIF_KEYFRAME* = 0x00000010
  ICQUALITY_LOW* = 0
  ICQUALITY_HIGH* = 10000
  ICQUALITY_DEFAULT* = -1
  ICM_USER* = DRV_USER + 0x0000
  ICM_RESERVED_LOW* = DRV_USER + 0x1000
  ICM_RESERVED_HIGH* = DRV_USER + 0x2000
  ICM_RESERVED* = ICM_RESERVED_LOW
  ICM_GETSTATE* = ICM_RESERVED + 0
  ICM_SETSTATE* = ICM_RESERVED + 1
  ICM_GETINFO* = ICM_RESERVED + 2
  ICM_CONFIGURE* = ICM_RESERVED + 10
  ICM_ABOUT* = ICM_RESERVED + 11
  ICM_GETERRORTEXT* = ICM_RESERVED + 12
  ICM_GETFORMATNAME* = ICM_RESERVED + 20
  ICM_ENUMFORMATS* = ICM_RESERVED + 21
  ICM_GETDEFAULTQUALITY* = ICM_RESERVED + 30
  ICM_GETQUALITY* = ICM_RESERVED + 31
  ICM_SETQUALITY* = ICM_RESERVED + 32
  ICM_SET* = ICM_RESERVED + 40
  ICM_GET* = ICM_RESERVED + 41
  ICM_FRAMERATE* = mmioFOURCC('F','r','m','R')
  ICM_KEYFRAMERATE* = mmioFOURCC('K','e','y','R')
  ICM_COMPRESS_GET_FORMAT* = ICM_USER + 4
  ICM_COMPRESS_GET_SIZE* = ICM_USER + 5
  ICM_COMPRESS_QUERY* = ICM_USER + 6
  ICM_COMPRESS_BEGIN* = ICM_USER + 7
  ICM_COMPRESS* = ICM_USER + 8
  ICM_COMPRESS_END* = ICM_USER + 9
  ICM_DECOMPRESS_GET_FORMAT* = ICM_USER + 10
  ICM_DECOMPRESS_QUERY* = ICM_USER + 11
  ICM_DECOMPRESS_BEGIN* = ICM_USER + 12
  ICM_DECOMPRESS* = ICM_USER + 13
  ICM_DECOMPRESS_END* = ICM_USER + 14
  ICM_DECOMPRESS_SET_PALETTE* = ICM_USER + 29
  ICM_DECOMPRESS_GET_PALETTE* = ICM_USER + 30
  ICM_DRAW_QUERY* = ICM_USER + 31
  ICM_DRAW_BEGIN* = ICM_USER + 15
  ICM_DRAW_GET_PALETTE* = ICM_USER + 16
  ICM_DRAW_UPDATE* = ICM_USER + 17
  ICM_DRAW_START* = ICM_USER + 18
  ICM_DRAW_STOP* = ICM_USER + 19
  ICM_DRAW_BITS* = ICM_USER + 20
  ICM_DRAW_END* = ICM_USER + 21
  ICM_DRAW_GETTIME* = ICM_USER + 32
  ICM_DRAW* = ICM_USER + 33
  ICM_DRAW_WINDOW* = ICM_USER + 34
  ICM_DRAW_SETTIME* = ICM_USER + 35
  ICM_DRAW_REALIZE* = ICM_USER + 36
  ICM_DRAW_FLUSH* = ICM_USER + 37
  ICM_DRAW_RENDERBUFFER* = ICM_USER + 38
  ICM_DRAW_START_PLAY* = ICM_USER + 39
  ICM_DRAW_STOP_PLAY* = ICM_USER + 40
  ICM_DRAW_SUGGESTFORMAT* = ICM_USER + 50
  ICM_DRAW_CHANGEPALETTE* = ICM_USER + 51
  ICM_DRAW_IDLE* = ICM_USER + 52
  ICM_GETBUFFERSWANTED* = ICM_USER + 41
  ICM_GETDEFAULTKEYFRAMERATE* = ICM_USER + 42
  ICM_DECOMPRESSEX_BEGIN* = ICM_USER + 60
  ICM_DECOMPRESSEX_QUERY* = ICM_USER + 61
  ICM_DECOMPRESSEX* = ICM_USER + 62
  ICM_DECOMPRESSEX_END* = ICM_USER + 63
  ICM_COMPRESS_FRAMES_INFO* = ICM_USER + 70
  ICM_COMPRESS_FRAMES* = ICM_USER + 71
  ICM_SET_STATUS_PROC* = ICM_USER + 72

type
  HIC* = HANDLE
  TICOPEN* {.final, pure.} = object # renamed from ICOPEN
    dwSize*: DWORD
    fccType*: DWORD
    fccHandler*: DWORD
    dwVersion*: DWORD
    dwFlags*: DWORD
    dwError*: LRESULT
    pV1Reserved*: LPVOID
    pV2Reserved*: LPVOID
    dnDevNode*: DWORD
  TICINFO* {.final, pure.} = object # renamed from ICINFO
    dwSize*: DWORD
    fccType*: DWORD
    fccHandler*: DWORD
    dwFlags*: DWORD
    dwVersion*: DWORD
    dwVersionICM*: DWORD
    szName*: array[16, WCHAR]
    szDescription*: array[128, WCHAR]
    szDriver*: array[128, WCHAR]

const
  VIDCF_QUALITY* = 0x0001
  VIDCF_CRUNCH* = 0x0002
  VIDCF_TEMPORAL* = 0x0004
  VIDCF_COMPRESSFRAMES* = 0x0008
  VIDCF_DRAW* = 0x0010
  VIDCF_FASTTEMPORALC* = 0x0020
  VIDCF_FASTTEMPORALD* = 0x0080
  ICCOMPRESS_KEYFRAME* = 0x00000001

type
  TICCOMPRESS* {.final, pure.} = object # renamed from ICCompress
    dwFlags*: DWORD
    lpbiOutput*: LPBITMAPINFOHEADER
    lpOutput*: LPVOID
    lpbiInput*: LPBITMAPINFOHEADER
    lpInput*: LPVOID
    lpckid*: LPDWORD
    lpdwFlags*: LPDWORD
    lFrameNum*: LONG
    dwFrameSize*: DWORD
    dwQuality*: DWORD
    lpbiPrev*: LPBITMAPINFOHEADER
    lpPrev*: LPVOID

const
  ICCOMPRESSFRAMES_PADDING* = 0x00000001

type
  ICCOMPRESSFRAMES* {.final, pure.} = object
    dwFlags*: DWORD
    lpbiOutput*: LPBITMAPINFOHEADER
    lOutput*: LPARAM
    lpbiInput*: LPBITMAPINFOHEADER
    lInput*: LPARAM
    lStartFrame*: LONG
    lFrameCount*: LONG
    lQuality*: LONG
    lDataRate*: LONG
    lKeyRate*: LONG
    dwRate*: DWORD
    dwScale*: DWORD
    dwOverheadPerFrame*: DWORD
    dwReserved2*: DWORD
    GetData*: proc (lInput: LPARAM, lFrame: LONG, lpBits: LPVOID, L: LONG): LONG
    PutData*: proc (lOutput: LPARAM, lFrame: LONG, lpBits: LPVOID, L: LONG): LONG

const
  ICSTATUS_START* = 0
  ICSTATUS_STATUS* = 1
  ICSTATUS_END* = 2
  ICSTATUS_ERROR* = 3
  ICSTATUS_YIELD* = 4

type
  TICSETSTATUSPROC* {.final, pure.} = object # renamed from ICSETSTATUSPROC
    dwFlags*: DWORD
    lParam*: LPARAM
    Status*: proc (lParam: LPARAM, message: UINT, L: LONG): LONG

const
  ICDECOMPRESS_NOTKEYFRAME* = 0x08000000
  ICDECOMPRESS_NULLFRAME* = 0x10000000
  ICDECOMPRESS_PREROLL* = 0x20000000
  ICDECOMPRESS_UPDATE* = 0x40000000
  ICDECOMPRESS_HURRYUP* = 0x80000000'i32

type
  TICDECOMPRESS* {.final, pure.} = object # renamed from ICDECOMPRESS
    dwFlags*: DWORD
    lpbiInput*: LPBITMAPINFOHEADER
    lpInput*: LPVOID
    lpbiOutput*: LPBITMAPINFOHEADER
    lpOutput*: LPVOID
    ckid*: DWORD
  TICDECOMPRESSEX* {.final, pure.} = object # renamed from ICDECOMPRESSEX
    dwFlags*: DWORD
    lpbiSrc*: LPBITMAPINFOHEADER
    lpSrc*: LPVOID
    lpbiDst*: LPBITMAPINFOHEADER
    lpDst*: LPVOID
    xDst*: int32
    yDst*: int32
    dxDst*: int32
    dyDst*: int32
    xSrc*: int32
    ySrc*: int32
    dxSrc*: int32
    dySrc*: int32

const
  # ICDRAW_QUERY* = 0x00000001
  ICDRAW_FULLSCREEN* = 0x00000002
  ICDRAW_HDC* = 0x00000004
  ICDRAW_ANIMATE* = 0x00000008
  ICDRAW_CONTINUE* = 0x00000010
  ICDRAW_MEMORYDC* = 0x00000020
  ICDRAW_UPDATING* = 0x00000040
  ICDRAW_RENDER* = 0x00000080
  ICDRAW_BUFFER* = 0x00000100

type
  TICDRAWBEGIN* {.final, pure.} = object # renamed from ICDRAWBEGIN
    dwFlags*: DWORD
    hpal*: HPALETTE
    hwnd*: HWND
    hdc*: HDC
    xDst*: int32
    yDst*: int32
    dxDst*: int32
    dyDst*: int32
    lpbi*: LPBITMAPINFOHEADER
    xSrc*: int32
    ySrc*: int32
    dxSrc*: int32
    dySrc*: int32
    dwRate*: DWORD
    dwScale*: DWORD

const
  ICDRAW_NOTKEYFRAME* = 0x08000000
  ICDRAW_NULLFRAME* = 0x10000000
  ICDRAW_PREROLL* = 0x20000000
  ICDRAW_UPDATE* = 0x40000000
  ICDRAW_HURRYUP* = 0x80000000'i32

type
  TICDRAW* {.final, pure.} = object # renamed from ICDRAW
    dwFlags*: DWORD
    lpFormat*: LPVOID
    lpData*: LPVOID
    cbData*: DWORD
    lTime*: LONG
  ICDRAWSUGGEST* {.final, pure.} = object
    lpbiIn*: LPBITMAPINFOHEADER
    lpbiSuggest*: LPBITMAPINFOHEADER
    dxSrc*: int32
    dySrc*: int32
    dxDst*: int32
    dyDst*: int32
    hicDecompressor*: HIC
  ICPALETTE* {.final, pure.} = object
    dwFlags*: DWORD
    iStart*: int32
    iLen*: int32
    lppe*: LPPALETTEENTRY

proc ICInfo*(fccType: DWORD, fccHandler: DWORD, lpicinfo: ptr TICINFO): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc ICInstall*(fccType: DWORD, fccHandler: DWORD, lParam: LPARAM, szDesc: LPSTR, wFlags: UINT): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc ICRemove*(fccType: DWORD, fccHandler: DWORD, wFlags: UINT): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc ICGetInfo*(hic: HIC, picinfo: ptr TICINFO, cb: DWORD): LRESULT {.winapi, dynlib: "msvfw32", importc.}
proc ICOpen*(fccType: DWORD, fccHandler: DWORD, wMode: UINT): HIC {.winapi, dynlib: "msvfw32", importc.}
proc ICOpenFunction*(fccType: DWORD, fccHandler: DWORD, wMode: UINT, lpfnHandler: FARPROC): HIC {.winapi, dynlib: "msvfw32", importc.}
proc ICClose*(hic: HIC): LRESULT {.winapi, dynlib: "msvfw32", importc.}
proc ICSendMessage*(hic: HIC, msg: UINT, dw1: DWORD_PTR, dw2: DWORD_PTR): LRESULT {.winapi, dynlib: "msvfw32", importc.}

const
  ICINSTALL_FUNCTION* = 0x0001
  ICINSTALL_DRIVER* = 0x0002
  ICINSTALL_HDRV* = 0x0004
  ICINSTALL_UNICODE* = 0x8000
  ICINSTALL_DRIVERW* = 0x8002
  ICMF_CONFIGURE_QUERY* = 0x00000001
  ICMF_ABOUT_QUERY* = 0x00000001

proc ICQueryAbout*(hic: HIC): bool =
  return ICSendMessage(hic, ICM_ABOUT, cast[DWORD_PTR](-1), ICMF_ABOUT_QUERY) == ICERR_OK

proc ICAbout*(hic: HIC, hwnd: HWND): LRESULT =
  return ICSendMessage(hic, ICM_ABOUT, cast[DWORD_PTR](hwnd), 0)

proc ICQueryConfigure*(hic: HIC): bool =
  return ICSendMessage(hic, ICM_CONFIGURE, cast[DWORD_PTR](-1), ICMF_CONFIGURE_QUERY) == ICERR_OK

proc ICConfigure*(hic: HIC, hwnd: HWND): LRESULT =
  return ICSendMessage(hic, ICM_CONFIGURE, cast[DWORD_PTR](hwnd), 0)

proc ICGetState*(hic: HIC, pv: LPVOID, cb: DWORD_PTR): LRESULT =
  return ICSendMessage(hic, ICM_GETSTATE, cast[DWORD_PTR](pv), cast[DWORD_PTR](cb))

proc ICSetState*(hic: HIC, pv: LPVOID, cb: DWORD_PTR): LRESULT =
  return ICSendMessage(hic, ICM_SETSTATE, cast[DWORD_PTR](pv), cast[DWORD_PTR](cb))

proc ICGetStateSize*(hic: HIC): LRESULT =
  return ICGetState(hic, nil, 0)

proc ICGetDefaultQuality*(hic: HIC): DWORD =
  var dwICValue: DWORD
  discard ICSendMessage(hic, ICM_GETDEFAULTQUALITY, cast[DWORD_PTR](dwICValue.addr), DWORD.sizeof.DWORD_PTR)
  return dwICValue

proc ICGetDefaultKeyFrameRate*(hic: HIC): DWORD =
  var dwICValue: DWORD
  discard ICSendMessage(hic, ICM_GETDEFAULTKEYFRAMERATE, cast[DWORD_PTR](dwICValue.addr), DWORD.sizeof.DWORD_PTR)
  return dwICValue

proc ICDrawWindow*(hic: HIC, prc: LPVOID): DWORD =
  return ICSendMessage(hic, ICM_DRAW_WINDOW, cast[DWORD_PTR](prc), RECT.sizeof.DWORD_PTR).DWORD

proc ICCompress*(hic: HIC, dwFlags: DWORD, lpbiOutput: LPBITMAPINFOHEADER, lpData: LPVOID, lpbiInput: LPBITMAPINFOHEADER, lpBits: LPVOID, lpckid: LPDWORD, lpdwFlags: LPDWORD, lFrameNum: LONG, dwFrameSize: DWORD, dwQuality: DWORD, lpbiPrev: LPBITMAPINFOHEADER, lpPrev: LPVOID): DWORD {.winapi, dynlib: "msvfw32", importc.}

proc ICCompressBegin*(hic: HIC, lpbiInput: LPVOID, lpbiOutput: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_COMPRESS_BEGIN, cast[DWORD_PTR](lpbiInput), cast[DWORD_PTR](lpbiOutput))

proc ICCompressQuery*(hic: HIC, lpbiInput: LPVOID, lpbiOutput: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_COMPRESS_QUERY, cast[DWORD_PTR](lpbiInput), cast[DWORD_PTR](lpbiOutput))

proc ICCompressGetFormat*(hic: HIC, lpbiInput: LPVOID, lpbiOutput: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_COMPRESS_GET_FORMAT, cast[DWORD_PTR](lpbiInput), cast[DWORD_PTR](lpbiOutput))

proc ICCompressGetFormatSize*(hic: HIC, lpbi: LPVOID): LRESULT =
  return ICCompressGetFormat(hic, lpbi, nil)

proc ICCompressGetSize*(hic: HIC, lpbiInput: LPVOID, lpbiOutput: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_COMPRESS_GET_SIZE, cast[DWORD_PTR](lpbiInput), cast[DWORD_PTR](lpbiOutput))

proc ICCompressEnd*(hic: HIC): LRESULT =
  return ICSendMessage(hic, ICM_COMPRESS_END, 0, 0)

proc ICDecompress*(hic: HIC, dwFlags: DWORD, lpbiFormat: LPBITMAPINFOHEADER, lpData: LPVOID, lpbi: LPBITMAPINFOHEADER, lpBits: LPVOID): DWORD {.winapi, dynlib: "msvfw32", importc.}

proc ICDecompressBegin*(hic: HIC, lpbiInput: LPVOID, lpbiOutput: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_DECOMPRESS_BEGIN, cast[DWORD_PTR](lpbiInput), cast[DWORD_PTR](lpbiOutput))

proc ICDecompressQuery*(hic: HIC, lpbiInput: LPVOID, lpbiOutput: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_DECOMPRESS_QUERY, cast[DWORD_PTR](lpbiInput), cast[DWORD_PTR](lpbiOutput))

proc ICDecompressGetFormat*(hic: HIC, lpbiInput: LPVOID, lpbiOutput: LPVOID): LONG =
  return cast[LONG](ICSendMessage(hic, ICM_DECOMPRESS_GET_FORMAT, cast[DWORD_PTR](lpbiInput), cast[DWORD_PTR](lpbiOutput)))

proc ICDecompressGetFormatSize*(hic: HIC, lpbi: LPVOID): LONG =
  return ICDecompressGetFormat(hic, lpbi, nil)

proc ICDecompressGetPalette*(hic: HIC, lpbiInput: LPVOID, lpbiOutput: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_DECOMPRESS_GET_PALETTE, cast[DWORD_PTR](lpbiInput), cast[DWORD_PTR](lpbiOutput))

proc ICDecompressSetPalette*(hic: HIC, lpbiPalette: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_DECOMPRESS_SET_PALETTE, cast[DWORD_PTR](lpbiPalette), 0)

proc ICDecompressEnd*(hic: HIC): LRESULT =
  return ICSendMessage(hic, ICM_DECOMPRESS_END, 0, 0)

proc ICDecompressEx*(hic: HIC, dwFlags: DWORD, lpbiSrc: LPBITMAPINFOHEADER, lpSrc: LPVOID, xSrc: int32, ySrc: int32, dxSrc: int32, dySrc: int32, lpbiDst: LPBITMAPINFOHEADER, lpDst: LPVOID, xDst: int32, yDst: int32, dxDst: int32, dyDst: int32): LRESULT =
  var ic = TICDECOMPRESSEX(dwFlags: dwFlags, lpbiSrc: lpbiSrc, lpSrc: lpSrc, xSrc: xSrc, ySrc: ySrc, dxSrc: dxSrc, dySrc: dySrc, lpbiDst: lpbiDst, lpDst: lpDst, xDst: xDst, yDst: yDst, dxDst: dxDst, dyDst: dyDst)
  return ICSendMessage(hic, ICM_DECOMPRESSEX, cast[DWORD_PTR](ic.addr), ic.sizeof.DWORD_PTR)

proc ICDecompressExBegin*(hic: HIC, dwFlags: DWORD, lpbiSrc: LPBITMAPINFOHEADER, lpSrc: LPVOID, xSrc: int32, ySrc: int32, dxSrc: int32, dySrc: int32, lpbiDst: LPBITMAPINFOHEADER, lpDst: LPVOID, xDst: int32, yDst: int32, dxDst: int32, dyDst: int32): LRESULT =
  var ic = TICDECOMPRESSEX(dwFlags: dwFlags, lpbiSrc: lpbiSrc, lpSrc: lpSrc, xSrc: xSrc, ySrc: ySrc, dxSrc: dxSrc, dySrc: dySrc, lpbiDst: lpbiDst, lpDst: lpDst, xDst: xDst, yDst: yDst, dxDst: dxDst, dyDst: dyDst)
  return ICSendMessage(hic, ICM_DECOMPRESSEX_BEGIN, cast[DWORD_PTR](ic.addr), ic.sizeof.DWORD_PTR)

proc ICDecompressExQuery*(hic: HIC, dwFlags: DWORD, lpbiSrc: LPBITMAPINFOHEADER, lpSrc: LPVOID, xSrc: int32, ySrc: int32, dxSrc: int32, dySrc: int32, lpbiDst: LPBITMAPINFOHEADER, lpDst: LPVOID, xDst: int32, yDst: int32, dxDst: int32, dyDst: int32): LRESULT =
  var ic = TICDECOMPRESSEX(dwFlags: dwFlags, lpbiSrc: lpbiSrc, lpSrc: lpSrc, xSrc: xSrc, ySrc: ySrc, dxSrc: dxSrc, dySrc: dySrc, lpbiDst: lpbiDst, lpDst: lpDst, xDst: xDst, yDst: yDst, dxDst: dxDst, dyDst: dyDst)
  return ICSendMessage(hic, ICM_DECOMPRESSEX_QUERY, cast[DWORD_PTR](ic.addr), ic.sizeof.DWORD_PTR)

proc ICDecompressExEnd*(hic: HIC): LRESULT =
  return ICSendMessage(hic, ICM_DECOMPRESSEX_END, 0, 0)

proc ICDrawBegin*(hic: HIC, dwFlags: DWORD, hpal: HPALETTE, hwnd: HWND, hdc: HDC, xDst: int32, yDst: int32, dxDst: int32, dyDst: int32, lpbi: LPBITMAPINFOHEADER, xSrc: int32, ySrc: int32, dxSrc: int32, dySrc: int32, dwRate: DWORD, dwScale: DWORD): DWORD {.winapi, dynlib: "msvfw32", importc.}
proc ICDraw*(hic: HIC, dwFlags: DWORD, lpFormat: LPVOID, lpData: LPVOID, cbData: DWORD, lTime: LONG): DWORD {.winapi, dynlib: "msvfw32", importc.}

proc ICDrawSuggestFormat*(hic: HIC, lpbiIn: LPBITMAPINFOHEADER, lpbiOut: LPBITMAPINFOHEADER, dxSrc: int32, dySrc: int32, dxDst: int32, dyDst: int32, hicDecomp: HIC): LRESULT =
  var ic = ICDRAWSUGGEST(lpbiIn: lpbiIn, lpbiSuggest: lpbiOut, dxSrc: dxSrc, dySrc: dySrc, dxDst: dxDst, dyDst: dyDst, hicDecompressor: hicDecomp)
  return ICSendMessage(hic, ICM_DRAW_SUGGESTFORMAT, cast[DWORD_PTR](ic.addr), ic.sizeof.DWORD_PTR)

proc ICDrawQuery*(hic: HIC, lpbiInput: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_QUERY, cast[DWORD_PTR](lpbiInput), 0)

proc ICDrawChangePalette*(hic: HIC, lpbiInput: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_CHANGEPALETTE, cast[DWORD_PTR](lpbiInput), 0)

proc ICGetBuffersWanted*(hic: HIC, lpdwBuffers: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_GETBUFFERSWANTED, cast[DWORD_PTR](lpdwBuffers), 0)

proc ICDrawEnd*(hic: HIC): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_END, 0, 0)

proc ICDrawStart*(hic: HIC): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_START, 0, 0)

proc ICDrawStartPlay*(hic: HIC, lFrom: DWORD, lTo: DWORD): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_START_PLAY, cast[DWORD_PTR](lFrom), cast[DWORD_PTR](lTo))

proc ICDrawStop*(hic: HIC): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_STOP, 0, 0)

proc ICDrawStopPlay*(hic: HIC): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_STOP_PLAY, 0, 0)

proc ICDrawGetTime*(hic: HIC, lplTime: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_GETTIME, cast[DWORD_PTR](lplTime), 0)

proc ICDrawSetTime*(hic: HIC, lTime: DWORD): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_SETTIME, cast[DWORD_PTR](lTime), 0)

proc ICDrawRealize*(hic: HIC, hdc: HDC, fBackground: BOOL): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_REALIZE, cast[DWORD_PTR](hdc), cast[DWORD_PTR](fBackground))

proc ICDrawFlush*(hic: HIC): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_FLUSH, 0, 0)

proc ICDrawRenderBuffer*(hic: HIC): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_RENDERBUFFER, 0, 0)

proc ICSetStatusProc*(hic: HIC, dwFlags: DWORD, lParam: LRESULT, fpfnStatus: proc(P1: LPARAM, P2: UINT, P3: LONG): LONG): LRESULT =
  var ic = TICSETSTATUSPROC(dwFlags: dwFlags, lParam: lParam, Status: fpfnStatus)
  return ICSendMessage(hic, ICM_SET_STATUS_PROC, cast[DWORD_PTR](ic.addr), ic.sizeof.DWORD_PTR)

proc ICLocate*(fccType: DWORD, fccHandler: DWORD, lpbiIn: LPBITMAPINFOHEADER, lpbiOut: LPBITMAPINFOHEADER, wFlags: WORD): HIC {.winapi, dynlib: "msvfw32", importc.}
proc ICGetDisplayFormat*(hic: HIC, lpbiIn: LPBITMAPINFOHEADER, lpbiOut: LPBITMAPINFOHEADER, BitDepth: int32, dx: int32, dy: int32): HIC {.winapi, dynlib: "msvfw32", importc.}
proc ICImageCompress*(hic: HIC, uiFlags: UINT, lpbiIn: LPBITMAPINFO, lpBits: LPVOID, lpbiOut: LPBITMAPINFO, lQuality: LONG, plSize: ptr LONG): HANDLE {.winapi, dynlib: "msvfw32", importc.}
proc ICImageDecompress*(hic: HIC, uiFlags: UINT, lpbiIn: LPBITMAPINFO, lpBits: LPVOID, lpbiOut: LPBITMAPINFO): HANDLE {.winapi, dynlib: "msvfw32", importc.}

proc ICDecompressOpen*(fccType: DWORD, fccHandler: DWORD, lpbiIn: LPBITMAPINFOHEADER, lpbiOut: LPBITMAPINFOHEADER): HIC =
  return ICLocate(fccType, fccHandler, lpbiIn, lpbiOut, ICMODE_DECOMPRESS)

proc ICDrawOpen*(fccType: DWORD, fccHandler: DWORD, lpbiIn: LPBITMAPINFOHEADER): HIC =
  return ICLocate(fccType, fccHandler, lpbiIn, nil, ICMODE_DRAW)

type
  COMPVARS* {.final, pure.} = object
    cbSize*: LONG
    dwFlags*: DWORD
    hic*: HIC
    fccType*: DWORD
    fccHandler*: DWORD
    lpbiIn*: LPBITMAPINFO
    lpbiOut*: LPBITMAPINFO
    lpBitsOut*: LPVOID
    lpBitsPrev*: LPVOID
    lFrame*: LONG
    lKey*: LONG
    lDataRate*: LONG
    lQ*: LONG
    lKeyCount*: LONG
    lpState*: LPVOID
    cbState*: LONG
  PCOMPVARS* = ptr COMPVARS

const
  ICMF_COMPVARS_VALID* = 0x00000001

proc ICCompressorChoose*(hwnd: HWND, uiFlags: UINT, pvIn: LPVOID, lpData: LPVOID, pc: PCOMPVARS, lpszTitle: LPSTR): BOOL {.winapi, dynlib: "msvfw32", importc.}

const
  ICMF_CHOOSE_KEYFRAME* = 0x0001
  ICMF_CHOOSE_DATARATE* = 0x0002
  ICMF_CHOOSE_PREVIEW* = 0x0004
  ICMF_CHOOSE_ALLCOMPRESSORS* = 0x0008

proc ICSeqCompressFrameStart*(pc: PCOMPVARS, lpbiIn: LPBITMAPINFO): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc ICSeqCompressFrameEnd*(pc: PCOMPVARS): void {.winapi, dynlib: "msvfw32", importc.}
proc ICSeqCompressFrame*(pc: PCOMPVARS, uiFlags: UINT, lpBits: LPVOID, pfKey: ptr BOOL, plSize: ptr LONG): LPVOID {.winapi, dynlib: "msvfw32", importc.}
proc ICCompressorFree*(pc: PCOMPVARS): void {.winapi, dynlib: "msvfw32", importc.}

type
  HDRAWDIB* = HANDLE

const
  DDF_0001* = 0x0001
  DDF_UPDATE* = 0x0002
  DDF_SAME_HDC* = 0x0004
  DDF_SAME_DRAW* = 0x0008
  DDF_DONTDRAW* = 0x0010
  DDF_ANIMATE* = 0x0020
  DDF_BUFFER* = 0x0040
  DDF_JUSTDRAWIT* = 0x0080
  DDF_FULLSCREEN* = 0x0100
  DDF_BACKGROUNDPAL* = 0x0200
  DDF_NOTKEYFRAME* = 0x0400
  DDF_HURRYUP* = 0x0800
  DDF_HALFTONE* = 0x1000
  DDF_2000* = 0x2000
  DDF_PREROLL* = DDF_DONTDRAW
  DDF_SAME_DIB* = DDF_SAME_DRAW
  DDF_SAME_SIZE* = DDF_SAME_DRAW

proc DrawDibInit*(): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibOpen*(): HDRAWDIB {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibClose*(hdd: HDRAWDIB): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibGetBuffer*(hdd: HDRAWDIB, lpbi: LPBITMAPINFOHEADER, dwSize: DWORD, dwFlags: DWORD): LPVOID {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibError*(hdd: HDRAWDIB): UINT {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibGetPalette*(hdd: HDRAWDIB): HPALETTE {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibSetPalette*(hdd: HDRAWDIB, hpal: HPALETTE): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibChangePalette*(hdd: HDRAWDIB, iStart: int32, iLen: int32, lppe: LPPALETTEENTRY): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibRealize*(hdd: HDRAWDIB, hdc: HDC, fBackground: BOOL): UINT {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibStart*(hdd: HDRAWDIB, rate: DWORD): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibStop*(hdd: HDRAWDIB): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibBegin*(hdd: HDRAWDIB, hdc: HDC, dxDst: int32, dyDst: int32, lpbi: LPBITMAPINFOHEADER, dxSrc: int32, dySrc: int32, wFlags: UINT): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibDraw*(hdd: HDRAWDIB, hdc: HDC, xDst: int32, yDst: int32, dxDst: int32, dyDst: int32, lpbi: LPBITMAPINFOHEADER, lpBits: LPVOID, xSrc: int32, ySrc: int32, dxSrc: int32, dySrc: int32, wFlags: UINT): BOOL {.winapi, dynlib: "msvfw32", importc.}

proc DrawDibUpdate*(hdd: HDRAWDIB, hdc: HDC, x: int32, y: int32): BOOL =
  return DrawDibDraw(hdd, hdc, x, y, 0, 0, nil, nil, 0, 0, 0, 0, DDF_UPDATE)

proc DrawDibEnd*(hdd: HDRAWDIB): BOOL {.winapi, dynlib: "msvfw32", importc.}

type
  TDRAWDIBTIME* {.final, pure.} = object # renamed from DRAWDIBTIME
    timeCount*: LONG
    timeDraw*: LONG
    timeDecompress*: LONG
    timeDither*: LONG
    timeStretch*: LONG
    timeBlt*: LONG
    timeSetDIBits*: LONG
  LPDRAWDIBTIME* = ptr TDRAWDIBTIME

proc DrawDibTime*(hdd: HDRAWDIB, lpddtime: LPDRAWDIBTIME): BOOL {.winapi, dynlib: "msvfw32", importc.}

const
  PD_CAN_DRAW_DIB* = 0x0001
  PD_CAN_STRETCHDIB* = 0x0002
  PD_STRETCHDIB_1_1_OK* = 0x0004
  PD_STRETCHDIB_1_2_OK* = 0x0008
  PD_STRETCHDIB_1_N_OK* = 0x0010

proc DrawDibProfileDisplay*(lpbi: LPBITMAPINFOHEADER): LRESULT {.winapi, dynlib: "msvfw32", importc.}
proc StretchDIB*(biDst: LPBITMAPINFOHEADER, lpDst: LPVOID, DstX: int32, DstY: int32, DstXE: int32, DstYE: int32, biSrc: LPBITMAPINFOHEADER, lpSrc: LPVOID, SrcX: int32, SrcY: int32, SrcXE: int32, SrcYE: int32): void {.winapi, dynlib: "msvfw32", importc.}

type
  # FOURCC* = DWORD
  TWOCC* = WORD

const
  formtypeAVI* = mmioFOURCC('A', 'V', 'I', ' ')
  listtypeAVIHEADER* = mmioFOURCC('h', 'd', 'r', 'l')
  ckidAVIMAINHDR* = mmioFOURCC('a', 'v', 'i', 'h')
  listtypeSTREAMHEADER* = mmioFOURCC('s', 't', 'r', 'l')
  ckidSTREAMHEADER* = mmioFOURCC('s', 't', 'r', 'h')
  ckidSTREAMFORMAT* = mmioFOURCC('s', 't', 'r', 'f')
  ckidSTREAMHANDLERDATA* = mmioFOURCC('s', 't', 'r', 'd')
  ckidSTREAMNAME* = mmioFOURCC('s', 't', 'r', 'n')
  listtypeAVIMOVIE* = mmioFOURCC('m', 'o', 'v', 'i')
  listtypeAVIRECORD* = mmioFOURCC('r', 'e', 'c', ' ')
  ckidAVINEWINDEX* = mmioFOURCC('i', 'd', 'x', '1')
  streamtypeVIDEO* = mmioFOURCC('v', 'i', 'd', 's')
  streamtypeAUDIO* = mmioFOURCC('a', 'u', 'd', 's')
  streamtypeMIDI* = mmioFOURCC('m', 'i', 'd', 's')
  streamtypeTEXT* = mmioFOURCC('t', 'x', 't', 's')
  cktypeDIBbits* = aviTWOCC('d', 'b')
  cktypeDIBcompressed* = aviTWOCC('d', 'c')
  cktypePALchange* = aviTWOCC('p', 'c')
  cktypeWAVEbytes* = aviTWOCC('w', 'b')
  ckidAVIPADDING* = mmioFOURCC('J', 'U', 'N', 'K')

proc FromHex*(n: uint8): DWORD =
  let N = n.DWORD
  return if N >= 'A'.DWORD: N + 10.DWORD - 'A'.DWORD else: N - '0'.DWORD

proc StreamFromFOURCC*(fcc: DWORD): WORD =
  return cast[WORD]((FromHex(LOBYTE(LOWORD(fcc))) shl 4) + (FromHex(HIBYTE(LOWORD(fcc)))))

proc TWOCCFromFOURCC*(fcc: DWORD): WORD =
  return HIWORD(fcc)

proc ToHex*(n: DWORD): BYTE =
  return cast[BYTE](if n > 9.DWORD: n - 10.DWORD + 'A'.DWORD else: n + '0'.DWORD)

proc MAKEAVICKID*(tcc: WORD, stream: WORD): DWORD =
  return MAKELONG(cast[WORD]((ToHex(stream and 0x0f) shl 8) or (ToHex((stream and 0xf0) shr 4))), tcc)

const
  AVIF_HASINDEX* = 0x00000010
  AVIF_MUSTUSEINDEX* = 0x00000020
  AVIF_ISINTERLEAVED* = 0x00000100
  AVIF_WASCAPTUREFILE* = 0x00010000
  AVIF_COPYRIGHTED* = 0x00020000
  AVI_HEADERSIZE* = 2048

type
  MainAVIHeader* {.final, pure.} = object
    dwMicroSecPerFrame*: DWORD
    dwMaxBytesPerSec*: DWORD
    dwPaddingGranularity*: DWORD
    dwFlags*: DWORD
    dwTotalFrames*: DWORD
    dwInitialFrames*: DWORD
    dwStreams*: DWORD
    dwSuggestedBufferSize*: DWORD
    dwWidth*: DWORD
    dwHeight*: DWORD
    dwReserved*: array[4, DWORD]

const
  AVISF_DISABLED* = 0x00000001
  AVISF_VIDEO_PALCHANGES* = 0x00010000

type
  AVIStreamHeader* {.final, pure.} = object
    fccType*: FOURCC
    fccHandler*: FOURCC
    dwFlags*: DWORD
    wPriority*: WORD
    wLanguage*: WORD
    dwInitialFrames*: DWORD
    dwScale*: DWORD
    dwRate*: DWORD
    dwStart*: DWORD
    dwLength*: DWORD
    dwSuggestedBufferSize*: DWORD
    dwQuality*: DWORD
    dwSampleSize*: DWORD
    rcFrame*: RECT

const
  AVIIF_FIRSTPART* = 0x00000020
  AVIIF_LASTPART* = 0x00000040
  AVIIF_MIDPART* = ( AVIIF_LASTPART or AVIIF_FIRSTPART)
  AVIIF_NOTIME* = 0x00000100
  AVIIF_COMPUSE* = 0x0FFF0000

type
  AVIINDEXENTRY* {.final, pure.} = object
    ckid*: DWORD
    dwFlags*: DWORD
    dwChunkOffset*: DWORD
    dwChunkLength*: DWORD
  AVIPALCHANGE* {.final, pure.} = object
    bFirstEntry*: BYTE
    bNumEntries*: BYTE
    wFlags*: WORD
    peNew*: ptr PALETTEENTRY

const
  AVIGETFRAMEF_BESTDISPLAYFMT* = 1

type
  AVISTREAMINFOW* {.final, pure.} = object
    fccType*: DWORD
    fccHandler*: DWORD
    dwFlags*: DWORD
    dwCaps*: DWORD
    wPriority*: WORD
    wLanguage*: WORD
    dwScale*: DWORD
    dwRate*: DWORD
    dwStart*: DWORD
    dwLength*: DWORD
    dwInitialFrames*: DWORD
    dwSuggestedBufferSize*: DWORD
    dwQuality*: DWORD
    dwSampleSize*: DWORD
    rcFrame*: RECT
    dwEditCount*: DWORD
    dwFormatChangeCount*: DWORD
    szName*: array[64, WCHAR]
  LPAVISTREAMINFOW* = ptr AVISTREAMINFOW
  AVISTREAMINFOA* {.final, pure.} = object
    fccType*: DWORD
    fccHandler*: DWORD
    dwFlags*: DWORD
    dwCaps*: DWORD
    wPriority*: WORD
    wLanguage*: WORD
    dwScale*: DWORD
    dwRate*: DWORD
    dwStart*: DWORD
    dwLength*: DWORD
    dwInitialFrames*: DWORD
    dwSuggestedBufferSize*: DWORD
    dwQuality*: DWORD
    dwSampleSize*: DWORD
    rcFrame*: RECT
    dwEditCount*: DWORD
    dwFormatChangeCount*: DWORD
    szName*: array[64, char]
  LPAVISTREAMINFOA* = ptr AVISTREAMINFOA

when not defined(winansi):
  type
    AVISTREAMINFO* = AVISTREAMINFOW
    LPAVISTREAMINFO* = LPAVISTREAMINFOW

else:
  type
    AVISTREAMINFO* = AVISTREAMINFOA
    LPAVISTREAMINFO* = LPAVISTREAMINFOA

const
  AVISTREAMINFO_DISABLED* = 0x00000001
  AVISTREAMINFO_FORMATCHANGES* = 0x00010000

type
  AVIFILEINFOW* {.final, pure.} = object
    dwMaxBytesPerSec*: DWORD
    dwFlags*: DWORD
    dwCaps*: DWORD
    dwStreams*: DWORD
    dwSuggestedBufferSize*: DWORD
    dwWidth*: DWORD
    dwHeight*: DWORD
    dwScale*: DWORD
    dwRate*: DWORD
    dwLength*: DWORD
    dwEditCount*: DWORD
    szFileType*: array[64, WCHAR]
  LPAVIFILEINFOW* = ptr AVIFILEINFOW
  AVIFILEINFOA* {.final, pure.} = object
    dwMaxBytesPerSec*: DWORD
    dwFlags*: DWORD
    dwCaps*: DWORD
    dwStreams*: DWORD
    dwSuggestedBufferSize*: DWORD
    dwWidth*: DWORD
    dwHeight*: DWORD
    dwScale*: DWORD
    dwRate*: DWORD
    dwLength*: DWORD
    dwEditCount*: DWORD
    szFileType*: array[64, char]
  LPAVIFILEINFOA* = ptr AVIFILEINFOA

when not defined(winansi):
  type
    AVIFILEINFO* = AVIFILEINFOW
    LPAVIFILEINFO* = LPAVIFILEINFOW

else:
  type
    AVIFILEINFO* = AVIFILEINFOA
    LPAVIFILEINFO* = LPAVIFILEINFOA

const
  AVIFILEINFO_HASINDEX* = 0x00000010
  AVIFILEINFO_MUSTUSEINDEX* = 0x00000020
  AVIFILEINFO_ISINTERLEAVED* = 0x00000100
  AVIFILEINFO_WASCAPTUREFILE* = 0x00010000
  AVIFILEINFO_COPYRIGHTED* = 0x00020000
  AVIFILECAPS_CANREAD* = 0x00000001
  AVIFILECAPS_CANWRITE* = 0x00000002
  AVIFILECAPS_ALLKEYFRAMES* = 0x00000010
  AVIFILECAPS_NOCOMPRESSION* = 0x00000020

type
  AVISAVECALLBACK* = proc (P1: int32): BOOL {.stdcall.}
  AVICOMPRESSOPTIONS* {.final, pure.} = object
    fccType*: DWORD
    fccHandler*: DWORD
    dwKeyFrameEvery*: DWORD
    dwQuality*: DWORD
    dwBytesPerSecond*: DWORD
    dwFlags*: DWORD
    lpFormat*: LPVOID
    cbFormat*: DWORD
    lpParms*: LPVOID
    cbParms*: DWORD
    dwInterleaveEvery*: DWORD
  LPAVICOMPRESSOPTIONS* = ptr AVICOMPRESSOPTIONS

const
  AVICOMPRESSF_INTERLEAVE* = 0x00000001
  AVICOMPRESSF_DATARATE* = 0x00000002
  AVICOMPRESSF_KEYFRAMES* = 0x00000004
  AVICOMPRESSF_VALID* = 0x00000008
  AVIERR_OK* = 0

proc MAKE_AVIERR*(error: DWORD): SCODE =
  MAKE_SCODE(SEVERITY_ERROR, FACILITY_ITF, 0x4000.DWORD + error)

const
  AVIERR_UNSUPPORTED* = MAKE_AVIERR( 101)
  AVIERR_BADFORMAT* = MAKE_AVIERR( 102)
  AVIERR_MEMORY* = MAKE_AVIERR( 103)
  AVIERR_INTERNAL* = MAKE_AVIERR( 104)
  AVIERR_BADFLAGS* = MAKE_AVIERR( 105)
  AVIERR_BADPARAM* = MAKE_AVIERR( 106)
  AVIERR_BADSIZE* = MAKE_AVIERR( 107)
  AVIERR_BADHANDLE* = MAKE_AVIERR( 108)
  AVIERR_FILEREAD* = MAKE_AVIERR( 109)
  AVIERR_FILEWRITE* = MAKE_AVIERR( 110)
  AVIERR_FILEOPEN* = MAKE_AVIERR( 111)
  AVIERR_COMPRESSOR* = MAKE_AVIERR( 112)
  AVIERR_NOCOMPRESSOR* = MAKE_AVIERR( 113)
  AVIERR_READONLY* = MAKE_AVIERR( 114)
  AVIERR_NODATA* = MAKE_AVIERR( 115)
  AVIERR_BUFFERTOOSMALL* = MAKE_AVIERR( 116)
  AVIERR_CANTCOMPRESS* = MAKE_AVIERR( 117)
  AVIERR_USERABORT* = MAKE_AVIERR( 198)
  AVIERR_ERROR* = MAKE_AVIERR( 199)
  MCIWND_WINDOW_CLASS* = "MCIWndClass"

proc MCIWndCreateA*(hwndParent: HWND, hInstance: HINSTANCE, dwStyle: DWORD, szFile: LPCSTR): HWND {.winapi, dynlib: "msvfw32", importc.}
proc MCIWndCreateW*(hwndParent: HWND, hInstance: HINSTANCE, dwStyle: DWORD, szFile: LPCWSTR): HWND {.winapi, dynlib: "msvfw32", importc.}

when not defined(winansi):
  proc MCIWndCreate*(hwndParent: HWND, hInstance: HINSTANCE, dwStyle: DWORD, szFile: LPCWSTR): HWND {.winapi, dynlib: "msvfw32", importc: "MCIWndCreateW".}

else:
  proc MCIWndCreate*(hwndParent: HWND, hInstance: HINSTANCE, dwStyle: DWORD, szFile: LPCSTR): HWND {.winapi, dynlib: "msvfw32", importc: "MCIWndCreateA".}
proc MCIWndRegisterClass*(): BOOL {.winapi, dynlib: "msvfw32", importc.}

const
  MCIWNDOPENF_NEW* = 0x0001
  MCIWNDF_NOAUTOSIZEWINDOW* = 0x0001
  MCIWNDF_NOPLAYBAR* = 0x0002
  MCIWNDF_NOAUTOSIZEMOVIE* = 0x0004
  MCIWNDF_NOMENU* = 0x0008
  MCIWNDF_SHOWNAME* = 0x0010
  MCIWNDF_SHOWPOS* = 0x0020
  MCIWNDF_SHOWMODE* = 0x0040
  MCIWNDF_SHOWALL* = 0x0070
  MCIWNDF_NOTIFYMODE* = 0x0100
  MCIWNDF_NOTIFYPOS* = 0x0200
  MCIWNDF_NOTIFYSIZE* = 0x0400
  MCIWNDF_NOTIFYERROR* = 0x1000
  MCIWNDF_NOTIFYALL* = 0x1F00
  MCIWNDF_NOTIFYANSI* = 0x0080
  MCIWNDF_NOTIFYMEDIAA* = 0x0880
  MCIWNDF_NOTIFYMEDIAW* = 0x0800

when not defined(winansi):
  const
    MCIWNDF_NOTIFYMEDIA* = MCIWNDF_NOTIFYMEDIAW

else:
  const
    MCIWNDF_NOTIFYMEDIA* = MCIWNDF_NOTIFYMEDIAA

const
  MCIWNDF_RECORD* = 0x2000
  MCIWNDF_NOERRORDLG* = 0x4000
  MCIWNDF_NOOPEN* = 0x8000

const
  MCIWNDM_GETDEVICEID* = WM_USER + 100
  MCIWNDM_SENDSTRINGA* = WM_USER + 101
  MCIWNDM_GETPOSITIONA* = WM_USER + 102
  MCIWNDM_GETSTART* = WM_USER + 103
  MCIWNDM_GETLENGTH* = WM_USER + 104
  MCIWNDM_GETEND* = WM_USER + 105
  MCIWNDM_GETMODEA* = WM_USER + 106
  MCIWNDM_EJECT* = WM_USER + 107
  MCIWNDM_SETZOOM* = WM_USER + 108
  MCIWNDM_GETZOOM* = WM_USER + 109
  MCIWNDM_SETVOLUME* = WM_USER + 110
  MCIWNDM_GETVOLUME* = WM_USER + 111
  MCIWNDM_SETSPEED* = WM_USER + 112
  MCIWNDM_GETSPEED* = WM_USER + 113
  MCIWNDM_SETREPEAT* = WM_USER + 114
  MCIWNDM_GETREPEAT* = WM_USER + 115
  MCIWNDM_REALIZE* = WM_USER + 118
  MCIWNDM_SETTIMEFORMATA* = WM_USER + 119
  MCIWNDM_GETTIMEFORMATA* = WM_USER + 120
  MCIWNDM_VALIDATEMEDIA* = WM_USER + 121
  MCIWNDM_PLAYFROM* = WM_USER + 122
  MCIWNDM_PLAYTO* = WM_USER + 123
  MCIWNDM_GETFILENAMEA* = WM_USER + 124
  MCIWNDM_GETDEVICEA* = WM_USER + 125
  MCIWNDM_GETPALETTE* = WM_USER + 126
  MCIWNDM_SETPALETTE* = WM_USER + 127
  MCIWNDM_GETERRORA* = WM_USER + 128
  MCIWNDM_SETTIMERS* = WM_USER + 129
  MCIWNDM_SETACTIVETIMER* = WM_USER + 130
  MCIWNDM_SETINACTIVETIMER* = WM_USER + 131
  MCIWNDM_GETACTIVETIMER* = WM_USER + 132
  MCIWNDM_GETINACTIVETIMER* = WM_USER + 133
  MCIWNDM_NEWA* = WM_USER + 134
  MCIWNDM_CHANGESTYLES* = WM_USER + 135
  MCIWNDM_GETSTYLES* = WM_USER + 136
  MCIWNDM_GETALIAS* = WM_USER + 137
  MCIWNDM_RETURNSTRINGA* = WM_USER + 138
  MCIWNDM_PLAYREVERSE* = WM_USER + 139
  MCIWNDM_GET_SOURCE* = WM_USER + 140
  MCIWNDM_PUT_SOURCE* = WM_USER + 141
  MCIWNDM_GET_DEST* = WM_USER + 142
  MCIWNDM_PUT_DEST* = WM_USER + 143
  MCIWNDM_CAN_PLAY* = WM_USER + 144
  MCIWNDM_CAN_WINDOW* = WM_USER + 145
  MCIWNDM_CAN_RECORD* = WM_USER + 146
  MCIWNDM_CAN_SAVE* = WM_USER + 147
  MCIWNDM_CAN_EJECT* = WM_USER + 148
  MCIWNDM_CAN_CONFIG* = WM_USER + 149
  MCIWNDM_PALETTEKICK* = WM_USER + 150
  MCIWNDM_OPENINTERFACE* = WM_USER + 151
  MCIWNDM_SETOWNER* = WM_USER + 152
  MCIWNDM_OPENA* = WM_USER + 153
  MCIWNDM_SENDSTRINGW* = WM_USER + 201
  MCIWNDM_GETPOSITIONW* = WM_USER + 202
  MCIWNDM_GETMODEW* = WM_USER + 206
  MCIWNDM_SETTIMEFORMATW* = WM_USER + 219
  MCIWNDM_GETTIMEFORMATW* = WM_USER + 220
  MCIWNDM_GETFILENAMEW* = WM_USER + 224
  MCIWNDM_GETDEVICEW* = WM_USER + 225
  MCIWNDM_GETERRORW* = WM_USER + 228
  MCIWNDM_NEWW* = WM_USER + 234
  MCIWNDM_RETURNSTRINGW* = WM_USER + 238
  MCIWNDM_OPENW* = WM_USER + 252

when not defined(winansi):
  const
    MCIWNDM_SENDSTRING* = MCIWNDM_SENDSTRINGW
    MCIWNDM_GETPOSITION* = MCIWNDM_GETPOSITIONW
    MCIWNDM_GETMODE* = MCIWNDM_GETMODEW
    MCIWNDM_SETTIMEFORMAT* = MCIWNDM_SETTIMEFORMATW
    MCIWNDM_GETTIMEFORMAT* = MCIWNDM_GETTIMEFORMATW
    MCIWNDM_GETFILENAME* = MCIWNDM_GETFILENAMEW
    MCIWNDM_GETDEVICE* = MCIWNDM_GETDEVICEW
    MCIWNDM_GETERROR* = MCIWNDM_GETERRORW
    MCIWNDM_NEW* = MCIWNDM_NEWW
    MCIWNDM_RETURNSTRING* = MCIWNDM_RETURNSTRINGW
    MCIWNDM_OPEN* = MCIWNDM_OPENW

else:
  const
    MCIWNDM_SENDSTRING* = MCIWNDM_SENDSTRINGA
    MCIWNDM_GETPOSITION* = MCIWNDM_GETPOSITIONA
    MCIWNDM_GETMODE* = MCIWNDM_GETMODEA
    MCIWNDM_SETTIMEFORMAT* = MCIWNDM_SETTIMEFORMATA
    MCIWNDM_GETTIMEFORMAT* = MCIWNDM_GETTIMEFORMATA
    MCIWNDM_GETFILENAME* = MCIWNDM_GETFILENAMEA
    MCIWNDM_GETDEVICE* = MCIWNDM_GETDEVICEA
    MCIWNDM_GETERROR* = MCIWNDM_GETERRORA
    MCIWNDM_NEW* = MCIWNDM_NEWA
    MCIWNDM_RETURNSTRING* = MCIWNDM_RETURNSTRINGA
    MCIWNDM_OPEN* = MCIWNDM_OPENA

const
  MCIWNDM_NOTIFYMODE* = WM_USER + 200
  MCIWNDM_NOTIFYPOS* = WM_USER + 201
  MCIWNDM_NOTIFYSIZE* = WM_USER + 202
  MCIWNDM_NOTIFYMEDIA* = WM_USER + 203
  MCIWNDM_NOTIFYERROR* = WM_USER + 205
  MCIWND_START* = -1
  mCIWND_END* = -2
  # MCI_CLOSE* = 0x0804
  # MCI_PLAY* = 0x0806
  # MCI_SEEK* = 0x0807
  # MCI_STOP* = 0x0808
  # MCI_PAUSE* = 0x0809
  # MCI_STEP* = 0x080E
  # MCI_RECORD* = 0x080F
  # MCI_SAVE* = 0x0813
  # MCI_CUT* = 0x0851
  # MCI_COPY* = 0x0852
  # MCI_PASTE* = 0x0853
  # MCI_RESUME* = 0x0855
  # MCI_DELETE* = 0x0856
  # MCI_MODE_NOT_READY* = 524
  # MCI_MODE_STOP* = 525
  # MCI_MODE_PLAY* = 526
  # MCI_MODE_RECORD* = 527
  # MCI_MODE_SEEK* = 528
  # MCI_MODE_PAUSE* = 529
  # MCI_MODE_OPEN* = 530

proc MCIWndCanPlay*(hwnd: HWND): BOOL =
  return cast[BOOL](SendMessage(hwnd, MCIWNDM_CAN_PLAY, 0, 0))

proc MCIWndCanRecord*(hwnd: HWND): BOOL =
  return cast[BOOL](SendMessage(hwnd, MCIWNDM_CAN_RECORD, 0, 0))

proc MCIWndCanSave*(hwnd: HWND): BOOL =
  return cast[BOOL](SendMessage(hwnd, MCIWNDM_CAN_SAVE, 0, 0))

proc MCIWndCanWindow*(hwnd: HWND): BOOL =
  return cast[BOOL](SendMessage(hwnd, MCIWNDM_CAN_WINDOW, 0, 0))

proc MCIWndCanEject*(hwnd: HWND): BOOL =
  return cast[BOOL](SendMessage(hwnd, MCIWNDM_CAN_EJECT, 0, 0))

proc MCIWndCanConfig*(hwnd: HWND): BOOL =
  return cast[BOOL](SendMessage(hwnd, MCIWNDM_CAN_CONFIG, 0, 0))

proc MCIWndPaletteKick*(hwnd: HWND): BOOL =
  return cast[BOOL](SendMessage(hwnd, MCIWNDM_PALETTEKICK, 0, 0))

proc MCIWndSave*(hwnd: HWND, szFile: LPVOID): LONG =
  return cast[LONG](SendMessage(hwnd, MCI_SAVE, 0, cast[LPARAM](szFile)))

proc MCIWndSaveDialog*(hwnd: HWND): LONG =
  return MCIWndSave(hwnd, cast[LPVOID](-1))

proc MCIWndNew*(hwnd: HWND, lp: LPVOID): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_NEW, 0, cast[LPARAM](lp)))

proc MCIWndRecord*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCI_RECORD, 0, 0))

proc MCIWndOpen*(hwnd: HWND, sz: LPVOID, f: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_OPEN, cast[WPARAM](f), cast[LPARAM](sz)))

proc MCIWndOpenDialog*(hwnd: HWND): LONG =
  return MCIWndOpen(hwnd, cast[LPVOID](-1), 0)

proc MCIWndClose*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCI_CLOSE, 0, 0))

proc MCIWndPlay*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCI_PLAY, 0, 0))

proc MCIWndStop*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCI_STOP, 0, 0))

proc MCIWndPause*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCI_PAUSE, 0, 0))

proc MCIWndResume*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCI_RESUME, 0, 0))

proc MCIWndSeek*(hwnd: HWND, lPos: LONG): LONG =
  return cast[LONG](SendMessage(hwnd, MCI_SEEK, 0, cast[LPARAM](lPos)))

proc MCIWndHome*(hwnd: HWND): LONG =
  return MCIWndSeek(hwnd, MCIWND_START)

proc MCIWndEnd*(hwnd: HWND): LONG =
  return MCIWndSeek(hwnd, mCIWND_END)

proc MCIWndEject*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_EJECT, 0, 0))

proc MCIWndGetSource*(hwnd: HWND, prc: LPRECT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GET_SOURCE, 0, cast[LPARAM](prc)))

proc MCIWndPutSource*(hwnd: HWND, prc: LPRECT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_PUT_SOURCE, 0, cast[LPARAM](prc)))

proc MCIWndGetDest*(hwnd: HWND, prc: LPRECT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GET_DEST, 0, cast[LPARAM](prc)))

proc MCIWndPutDest*(hwnd: HWND, prc: LPRECT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_PUT_DEST, 0, cast[LPARAM](prc)))

proc MCIWndPlayReverse*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_PLAYREVERSE, 0, 0))

proc MCIWndPlayFrom*(hwnd: HWND, lPos: LONG): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_PLAYFROM, 0, cast[LPARAM](lPos)))

proc MCIWndPlayTo*(hwnd: HWND, lPos: LONG): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_PLAYTO, 0, cast[LPARAM](lPos)))

proc MCIWndPlayFromTo*(hwnd: HWND, lStart: LONG, lEnd: LONG): LONG =
  discard MCIWndSeek(hwnd, lStart)
  return MCIWndPlayTo(hwnd, lEnd)

proc MCIWndGetDeviceID*(hwnd: HWND): UINT =
  return cast[UINT](SendMessage(hwnd, MCIWNDM_GETDEVICEID, 0, 0))

proc MCIWndGetAlias*(hwnd: HWND): UINT =
  return cast[UINT](SendMessage(hwnd, MCIWNDM_GETALIAS, 0, 0))

proc MCIWndGetMode*(hwnd: HWND, lp: LPTSTR, L: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETMODE, cast[WPARAM](L), cast[LPARAM](lp)))

proc MCIWndGetPosition*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETPOSITION, 0, 0))

proc MCIWndGetPositionString*(hwnd: HWND, lp: LPTSTR, L: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETPOSITION, cast[WPARAM](L), cast[LPARAM](lp)))

proc MCIWndGetStart*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETSTART, 0, 0))

proc MCIWndGetLength*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETLENGTH, 0, 0))

proc MCIWndGetEnd*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETEND, 0, 0))

proc MCIWndStep*(hwnd: HWND, n: LONG): LONG =
  return cast[LONG](SendMessage(hwnd, MCI_STEP, 0, cast[LPARAM](n)))

proc MCIWndDestroy*(hwnd: HWND): void =
  discard SendMessage(hwnd, WM_CLOSE, 0, 0)

proc MCIWndSetZoom*(hwnd: HWND, iZoom: UINT): void =
  discard SendMessage(hwnd, MCIWNDM_SETZOOM, 0, cast[LPARAM](iZoom))

proc MCIWndGetZoom*(hwnd: HWND): UINT =
  return cast[UINT](SendMessage(hwnd, MCIWNDM_GETZOOM, 0, 0))

proc MCIWndSetVolume*(hwnd: HWND, iVol: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_SETVOLUME, 0, cast[LPARAM](iVol)))

proc MCIWndGetVolume*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETVOLUME, 0, 0))

proc MCIWndSetSpeed*(hwnd: HWND, iSpeed: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_SETSPEED, 0, cast[LPARAM](iSpeed)))

proc MCIWndGetSpeed*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETSPEED, 0, 0))

proc MCIWndSetTimeFormat*(hwnd: HWND, lp: LPTSTR): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_SETTIMEFORMAT, 0, cast[LPARAM](lp)))

template MCIWndUseFrames*(hwnd: HWND): LONG =
  MCIWndSetTimeFormat(hwnd, T"frames")

template MCIWndUseTime*(hwnd: HWND): LONG =
  MCIWndSetTimeFormat(hwnd, T"ms")

proc MCIWndGetTimeFormat*(hwnd: HWND, lp: LPTSTR, L: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETTIMEFORMAT, cast[WPARAM](L), cast[LPARAM](lp)))

proc MCIWndValidateMedia*(hwnd: HWND): void =
  discard SendMessage(hwnd, MCIWNDM_VALIDATEMEDIA, 0, 0)

proc MCIWndSetRepeat*(hwnd: HWND, f: BOOL): void =
  discard SendMessage(hwnd, MCIWNDM_SETREPEAT, 0, cast[LPARAM](f))

proc MCIWndGetRepeat*(hwnd: HWND): BOOL =
  return cast[BOOL](SendMessage(hwnd, MCIWNDM_GETREPEAT, 0, 0))

proc MCIWndSetActiveTimer*(hwnd: HWND, active: UINT): void =
  discard SendMessage(hwnd, MCIWNDM_SETACTIVETIMER, cast[WPARAM](active), 0)

proc MCIWndSetInactiveTimer*(hwnd: HWND, inactive: UINT): void =
  discard SendMessage(hwnd, MCIWNDM_SETINACTIVETIMER, cast[WPARAM](inactive), 0)

proc MCIWndSetTimers*(hwnd: HWND, active: UINT, inactive: UINT): void =
  discard SendMessage(hwnd, MCIWNDM_SETTIMERS, cast[WPARAM](active), cast[LPARAM](inactive))

proc MCIWndGetActiveTimer*(hwnd: HWND): UINT =
  return cast[UINT](SendMessage(hwnd, MCIWNDM_GETACTIVETIMER, 0, 0))

proc MCIWndGetInactiveTimer*(hwnd: HWND): UINT =
  return cast[UINT](SendMessage(hwnd, MCIWNDM_GETINACTIVETIMER, 0, 0))

proc MCIWndRealize*(hwnd: HWND, fBkgnd: BOOL): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_REALIZE, cast[WPARAM](fBkgnd), 0))

proc MCIWndSendString*(hwnd: HWND, sz: LPTSTR): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_SENDSTRING, 0, cast[LPARAM](sz)))

proc MCIWndReturnString*(hwnd: HWND, lp: LPVOID, L: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_RETURNSTRING, cast[WPARAM](L), cast[LPARAM](lp)))

proc MCIWndGetError*(hwnd: HWND, lp: LPVOID, L: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETERROR, cast[WPARAM](L), cast[LPARAM](lp)))

proc MCIWndGetPalette*(hwnd: HWND): HPALETTE =
  return cast[HPALETTE](SendMessage(hwnd, MCIWNDM_GETPALETTE, 0, 0))

proc MCIWndSetPalette*(hwnd: HWND, hpal: HPALETTE): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_SETPALETTE, cast[WPARAM](hpal), 0))

proc MCIWndGetFileName*(hwnd: HWND, lp: LPVOID, L: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETFILENAME, cast[WPARAM](L), cast[LPARAM](lp)))

proc MCIWndGetDevice*(hwnd: HWND, lp: LPVOID, L: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETDEVICE, cast[WPARAM](L), cast[LPARAM](lp)))

proc MCIWndGetStyles*(hwnd: HWND): UINT =
  return cast[UINT](SendMessage(hwnd, MCIWNDM_GETSTYLES, 0, 0).UINT)

proc MCIWndChangeStyles*(hwnd: HWND, mask: UINT, value: LONG): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_CHANGESTYLES, cast[WPARAM](mask), cast[LPARAM](value)))

proc MCIWndOpenInterface*(hwnd: HWND, pUnk: LPUNKNOWN): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_OPENINTERFACE, 0, cast[LPARAM](pUnk)))

proc MCIWndSetOwner*(hwnd: HWND, hwndP: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_SETOWNER, cast[WPARAM](hwndP), 0))

type
  HVIDEO* = HANDLE
  LPHVIDEO* = ptr HVIDEO

const
  DV_ERR_OK* = 0
  DV_ERR_BASE* = 1
  DV_ERR_NONSPECIFIC* = DV_ERR_BASE
  DV_ERR_BADFORMAT* = DV_ERR_BASE + 1
  DV_ERR_STILLPLAYING* = DV_ERR_BASE + 2
  DV_ERR_UNPREPARED* = DV_ERR_BASE + 3
  DV_ERR_SYNC* = DV_ERR_BASE + 4
  DV_ERR_TOOMANYCHANNELS* = DV_ERR_BASE + 5
  DV_ERR_NOTDETECTED* = DV_ERR_BASE + 6
  DV_ERR_BADINSTALL* = DV_ERR_BASE + 7
  DV_ERR_CREATEPALETTE* = DV_ERR_BASE + 8
  DV_ERR_SIZEFIELD* = DV_ERR_BASE + 9
  DV_ERR_PARAM1* = DV_ERR_BASE + 10
  DV_ERR_PARAM2* = DV_ERR_BASE + 11
  DV_ERR_CONFIG1* = DV_ERR_BASE + 12
  DV_ERR_CONFIG2* = DV_ERR_BASE + 13
  DV_ERR_FLAGS* = DV_ERR_BASE + 14
  DV_ERR_13* = DV_ERR_BASE + 15
  DV_ERR_NOTSUPPORTED* = DV_ERR_BASE + 16
  DV_ERR_NOMEM* = DV_ERR_BASE + 17
  DV_ERR_ALLOCATED* = DV_ERR_BASE + 18
  DV_ERR_BADDEVICEID* = DV_ERR_BASE + 19
  DV_ERR_INVALHANDLE* = DV_ERR_BASE + 20
  DV_ERR_BADERRNUM* = DV_ERR_BASE + 21
  DV_ERR_NO_BUFFERS* = DV_ERR_BASE + 22
  DV_ERR_MEM_CONFLICT* = DV_ERR_BASE + 23
  DV_ERR_IO_CONFLICT* = DV_ERR_BASE + 24
  DV_ERR_DMA_CONFLICT* = DV_ERR_BASE + 25
  DV_ERR_INT_CONFLICT* = DV_ERR_BASE + 26
  DV_ERR_PROTECT_ONLY* = DV_ERR_BASE + 27
  DV_ERR_LASTERROR* = DV_ERR_BASE + 27
  DV_ERR_USER_MSG* = DV_ERR_BASE + 1000
  # MM_DRVM_OPEN* = 0x3D0
  # MM_DRVM_CLOSE* = 0x3D1
  # MM_DRVM_DATA* = 0x3D2
  # MM_DRVM_ERROR* = 0x3D3
  DV_VM_OPEN* = MM_DRVM_OPEN
  DV_VM_CLOSE* = MM_DRVM_CLOSE
  DV_VM_DATA* = MM_DRVM_DATA
  DV_VM_ERROR* = MM_DRVM_ERROR

type
  VIDEOHDR* {.final, pure.} = object
    lpData*: LPBYTE
    dwBufferLength*: DWORD
    dwBytesUsed*: DWORD
    dwTimeCaptured*: DWORD
    dwUser*: DWORD_PTR
    dwFlags*: DWORD
    dwReserved*: array[4, DWORD_PTR]
  PVIDEOHDR* = ptr VIDEOHDR
  LPVIDEOHDR* = ptr VIDEOHDR

const
  VHDR_DONE* = 0x00000001
  VHDR_PREPARED* = 0x00000002
  VHDR_INQUEUE* = 0x00000004
  VHDR_KEYFRAME* = 0x00000008
  VHDR_VALID* = 0x0000000F

type
  CHANNEL_CAPS* {.final, pure.} = object
    dwFlags*: DWORD
    dwSrcRectXMod*: DWORD
    dwSrcRectYMod*: DWORD
    dwSrcRectWidthMod*: DWORD
    dwSrcRectHeightMod*: DWORD
    dwDstRectXMod*: DWORD
    dwDstRectYMod*: DWORD
    dwDstRectWidthMod*: DWORD
    dwDstRectHeightMod*: DWORD
  PCHANNEL_CAPS* = ptr CHANNEL_CAPS
  LPCHANNEL_CAPS* = ptr CHANNEL_CAPS

const
  VCAPS_OVERLAY* = 0x00000001
  VCAPS_SRC_CAN_CLIP* = 0x00000002
  VCAPS_DST_CAN_CLIP* = 0x00000004
  VCAPS_CAN_SCALE* = 0x00000008
  VIDEO_EXTERNALIN* = 0x0001
  VIDEO_EXTERNALOUT* = 0x0002
  VIDEO_IN* = 0x0004
  VIDEO_OUT* = 0x0008
  VIDEO_DLG_QUERY* = 0x0010
  VIDEO_CONFIGURE_QUERYSIZE* = 0x0001
  VIDEO_CONFIGURE_CURRENT* = 0x0010
  VIDEO_CONFIGURE_NOMINAL* = 0x0020
  VIDEO_CONFIGURE_MIN* = 0x0040
  VIDEO_CONFIGURE_MAX* = 0x0080
  VIDEO_CONFIGURE_SET* = 0x1000
  VIDEO_CONFIGURE_GET* = 0x2000
  VIDEO_CONFIGURE_QUERY* = 0x8000
  DVM_USER* = 0x4000
  DVM_CONFIGURE_START* = 0x1000
  DVM_CONFIGURE_END* = 0x1FFF
  DVM_PALETTE* = DVM_CONFIGURE_START + 1
  DVM_FORMAT* = DVM_CONFIGURE_START + 2
  DVM_PALETTERGB555* = DVM_CONFIGURE_START + 3
  DVM_SRC_RECT* = DVM_CONFIGURE_START + 4
  DVM_DST_RECT* = DVM_CONFIGURE_START + 5

proc AVICapSM*(hWnd: HWND, msg: UINT, wParam: WPARAM, lParam: LPARAM): LRESULT =
  if IsWindow(hWnd) != FALSE:
    return SendMessage(hWnd, msg, wParam, lParam)

const
  WM_CAP_START* = WM_USER
  WM_CAP_UNICODE_START* = WM_USER + 100
  WM_CAP_GET_CAPSTREAMPTR* = WM_CAP_START + 1
  WM_CAP_SET_CALLBACK_ERRORA* = WM_CAP_START + 2
  WM_CAP_SET_CALLBACK_STATUSA* = WM_CAP_START + 3
  WM_CAP_SET_CALLBACK_ERRORW* = WM_CAP_UNICODE_START + 2
  WM_CAP_SET_CALLBACK_STATUSW* = WM_CAP_UNICODE_START + 3

when not defined(winansi):
  const
    WM_CAP_SET_CALLBACK_ERROR* = WM_CAP_SET_CALLBACK_ERRORW
    WM_CAP_SET_CALLBACK_STATUS* = WM_CAP_SET_CALLBACK_STATUSW

else:
  const
    WM_CAP_SET_CALLBACK_ERROR* = WM_CAP_SET_CALLBACK_ERRORA
    WM_CAP_SET_CALLBACK_STATUS* = WM_CAP_SET_CALLBACK_STATUSA

const
  WM_CAP_SET_CALLBACK_YIELD* = WM_CAP_START + 4
  WM_CAP_SET_CALLBACK_FRAME* = WM_CAP_START + 5
  WM_CAP_SET_CALLBACK_VIDEOSTREAM* = WM_CAP_START + 6
  WM_CAP_SET_CALLBACK_WAVESTREAM* = WM_CAP_START + 7
  WM_CAP_GET_USER_DATA* = WM_CAP_START + 8
  WM_CAP_SET_USER_DATA* = WM_CAP_START + 9
  WM_CAP_DRIVER_CONNECT* = WM_CAP_START + 10
  WM_CAP_DRIVER_DISCONNECT* = WM_CAP_START + 11
  WM_CAP_DRIVER_GET_NAMEA* = WM_CAP_START + 12
  WM_CAP_DRIVER_GET_VERSIONA* = WM_CAP_START + 13
  WM_CAP_DRIVER_GET_NAMEW* = WM_CAP_UNICODE_START + 12
  WM_CAP_DRIVER_GET_VERSIONW* = WM_CAP_UNICODE_START + 13

when not defined(winansi):
  const
    WM_CAP_DRIVER_GET_NAME* = WM_CAP_DRIVER_GET_NAMEW
    WM_CAP_DRIVER_GET_VERSION* = WM_CAP_DRIVER_GET_VERSIONW

else:
  const
    WM_CAP_DRIVER_GET_NAME* = WM_CAP_DRIVER_GET_NAMEA
    WM_CAP_DRIVER_GET_VERSION* = WM_CAP_DRIVER_GET_VERSIONA

const
  WM_CAP_DRIVER_GET_CAPS* = WM_CAP_START + 14
  WM_CAP_FILE_SET_CAPTURE_FILEA* = WM_CAP_START + 20
  WM_CAP_FILE_GET_CAPTURE_FILEA* = WM_CAP_START + 21
  WM_CAP_FILE_SAVEASA* = WM_CAP_START + 23
  WM_CAP_FILE_SAVEDIBA* = WM_CAP_START + 25
  WM_CAP_FILE_SET_CAPTURE_FILEW* = WM_CAP_UNICODE_START + 20
  WM_CAP_FILE_GET_CAPTURE_FILEW* = WM_CAP_UNICODE_START + 21
  WM_CAP_FILE_SAVEASW* = WM_CAP_UNICODE_START + 23
  WM_CAP_FILE_SAVEDIBW* = WM_CAP_UNICODE_START + 25

when not defined(winansi):
  const
    WM_CAP_FILE_SET_CAPTURE_FILE* = WM_CAP_FILE_SET_CAPTURE_FILEW
    WM_CAP_FILE_GET_CAPTURE_FILE* = WM_CAP_FILE_GET_CAPTURE_FILEW
    WM_CAP_FILE_SAVEAS* = WM_CAP_FILE_SAVEASW
    WM_CAP_FILE_SAVEDIB* = WM_CAP_FILE_SAVEDIBW

else:
  const
    WM_CAP_FILE_SET_CAPTURE_FILE* = WM_CAP_FILE_SET_CAPTURE_FILEA
    WM_CAP_FILE_GET_CAPTURE_FILE* = WM_CAP_FILE_GET_CAPTURE_FILEA
    WM_CAP_FILE_SAVEAS* = WM_CAP_FILE_SAVEASA
    WM_CAP_FILE_SAVEDIB* = WM_CAP_FILE_SAVEDIBA

const
  WM_CAP_FILE_ALLOCATE* = WM_CAP_START + 22
  WM_CAP_FILE_SET_INFOCHUNK* = WM_CAP_START + 24
  WM_CAP_EDIT_COPY* = WM_CAP_START + 30
  WM_CAP_SET_AUDIOFORMAT* = WM_CAP_START + 35
  WM_CAP_GET_AUDIOFORMAT* = WM_CAP_START + 36
  WM_CAP_DLG_VIDEOFORMAT* = WM_CAP_START + 41
  WM_CAP_DLG_VIDEOSOURCE* = WM_CAP_START + 42
  WM_CAP_DLG_VIDEODISPLAY* = WM_CAP_START + 43
  WM_CAP_GET_VIDEOFORMAT* = WM_CAP_START + 44
  WM_CAP_SET_VIDEOFORMAT* = WM_CAP_START + 45
  WM_CAP_DLG_VIDEOCOMPRESSION* = WM_CAP_START + 46
  WM_CAP_SET_PREVIEW* = WM_CAP_START + 50
  WM_CAP_SET_OVERLAY* = WM_CAP_START + 51
  WM_CAP_SET_PREVIEWRATE* = WM_CAP_START + 52
  WM_CAP_SET_SCALE* = WM_CAP_START + 53
  WM_CAP_GET_STATUS* = WM_CAP_START + 54
  WM_CAP_SET_SCROLL* = WM_CAP_START + 55
  WM_CAP_GRAB_FRAME* = WM_CAP_START + 60
  WM_CAP_GRAB_FRAME_NOSTOP* = WM_CAP_START + 61
  WM_CAP_SEQUENCE* = WM_CAP_START + 62
  WM_CAP_SEQUENCE_NOFILE* = WM_CAP_START + 63
  WM_CAP_SET_SEQUENCE_SETUP* = WM_CAP_START + 64
  WM_CAP_GET_SEQUENCE_SETUP* = WM_CAP_START + 65
  WM_CAP_SET_MCI_DEVICEA* = WM_CAP_START + 66
  WM_CAP_GET_MCI_DEVICEA* = WM_CAP_START + 67
  WM_CAP_SET_MCI_DEVICEW* = WM_CAP_UNICODE_START + 66
  WM_CAP_GET_MCI_DEVICEW* = WM_CAP_UNICODE_START + 67

when not defined(winansi):
  const
    WM_CAP_SET_MCI_DEVICE* = WM_CAP_SET_MCI_DEVICEW
    WM_CAP_GET_MCI_DEVICE* = WM_CAP_GET_MCI_DEVICEW

else:
  const
    WM_CAP_SET_MCI_DEVICE* = WM_CAP_SET_MCI_DEVICEA
    WM_CAP_GET_MCI_DEVICE* = WM_CAP_GET_MCI_DEVICEA

const
  WM_CAP_STOP* = WM_CAP_START + 68
  WM_CAP_ABORT* = WM_CAP_START + 69
  WM_CAP_SINGLE_FRAME_OPEN* = WM_CAP_START + 70
  WM_CAP_SINGLE_FRAME_CLOSE* = WM_CAP_START + 71
  WM_CAP_SINGLE_FRAME* = WM_CAP_START + 72
  WM_CAP_PAL_OPENA* = WM_CAP_START + 80
  WM_CAP_PAL_SAVEA* = WM_CAP_START + 81
  WM_CAP_PAL_OPENW* = WM_CAP_UNICODE_START + 80
  WM_CAP_PAL_SAVEW* = WM_CAP_UNICODE_START + 81

when not defined(winansi):
  const
    WM_CAP_PAL_OPEN* = WM_CAP_PAL_OPENW
    WM_CAP_PAL_SAVE* = WM_CAP_PAL_SAVEW

else:
  const
    WM_CAP_PAL_OPEN* = WM_CAP_PAL_OPENA
    WM_CAP_PAL_SAVE* = WM_CAP_PAL_SAVEA

const
  WM_CAP_PAL_PASTE* = WM_CAP_START + 82
  WM_CAP_PAL_AUTOCREATE* = WM_CAP_START + 83
  WM_CAP_PAL_MANUALCREATE* = WM_CAP_START + 84
  WM_CAP_SET_CALLBACK_CAPCONTROL* = WM_CAP_START + 85
  WM_CAP_UNICODE_END* = WM_CAP_PAL_SAVEW
  WM_CAP_END* = WM_CAP_UNICODE_END


type
  CAPDRIVERCAPS* {.final, pure.} = object
    wDeviceIndex*: UINT
    fHasOverlay*: BOOL
    fHasDlgVideoSource*: BOOL
    fHasDlgVideoFormat*: BOOL
    fHasDlgVideoDisplay*: BOOL
    fCaptureInitialized*: BOOL
    fDriverSuppliesPalettes*: BOOL
    hVideoIn*: HANDLE
    hVideoOut*: HANDLE
    hVideoExtIn*: HANDLE
    hVideoExtOut*: HANDLE
  PCAPDRIVERCAPS* = ptr CAPDRIVERCAPS
  LPCAPDRIVERCAPS* = ptr CAPDRIVERCAPS
  CAPSTATUS* {.final, pure.} = object
    uiImageWidth*: UINT
    uiImageHeight*: UINT
    fLiveWindow*: BOOL
    fOverlayWindow*: BOOL
    fScale*: BOOL
    ptScroll*: POINT
    fUsingDefaultPalette*: BOOL
    fAudioHardware*: BOOL
    fCapFileExists*: BOOL
    dwCurrentVideoFrame*: DWORD
    dwCurrentVideoFramesDropped*: DWORD
    dwCurrentWaveSamples*: DWORD
    dwCurrentTimeElapsedMS*: DWORD
    hPalCurrent*: HPALETTE
    fCapturingNow*: BOOL
    dwReturn*: DWORD
    wNumVideoAllocated*: UINT
    wNumAudioAllocated*: UINT
  PCAPSTATUS* = ptr CAPSTATUS
  LPCAPSTATUS* = ptr CAPSTATUS
  CAPTUREPARMS* {.final, pure.} = object
    dwRequestMicroSecPerFrame*: DWORD
    fMakeUserHitOKToCapture*: BOOL
    wPercentDropForError*: UINT
    fYield*: BOOL
    dwIndexSize*: DWORD
    wChunkGranularity*: UINT
    fUsingDOSMemory*: BOOL
    wNumVideoRequested*: UINT
    fCaptureAudio*: BOOL
    wNumAudioRequested*: UINT
    vKeyAbort*: UINT
    fAbortLeftMouse*: BOOL
    fAbortRightMouse*: BOOL
    fLimitEnabled*: BOOL
    wTimeLimit*: UINT
    fMCIControl*: BOOL
    fStepMCIDevice*: BOOL
    dwMCIStartTime*: DWORD
    dwMCIStopTime*: DWORD
    fStepCaptureAt2x*: BOOL
    wStepCaptureAverageFrames*: UINT
    dwAudioBufferSize*: DWORD
    fDisableWriteCache*: BOOL
    AVStreamMaster*: UINT
  PCAPTUREPARMS* = ptr CAPTUREPARMS
  LPCAPTUREPARMS* = ptr CAPTUREPARMS

const
  AVSTREAMMASTER_AUDIO* = 0
  AVSTREAMMASTER_NONE* = 1

type
  CAPINFOCHUNK* {.final, pure.} = object
    fccInfoID*: FOURCC
    lpData*: LPVOID
    cbData*: LONG
  PCAPINFOCHUNK* = ptr CAPINFOCHUNK
  LPCAPINFOCHUNK* = ptr CAPINFOCHUNK

proc capSetCallbackOnError*(hWnd: HWND, fpProc: LPVOID): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_CALLBACK_ERROR, 0, cast[LPARAM](fpProc)))

proc capSetCallbackOnStatus*(hWnd: HWND, fpProc: LPVOID): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_CALLBACK_STATUS, 0, cast[LPARAM](fpProc)))

proc capSetCallbackOnYield*(hWnd: HWND, fpProc: LPVOID): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_CALLBACK_YIELD, 0, cast[LPARAM](fpProc)))

proc capSetCallbackOnFrame*(hWnd: HWND, fpProc: LPVOID): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_CALLBACK_FRAME, 0, cast[LPARAM](fpProc)))

proc capSetCallbackOnVideoStream*(hWnd: HWND, fpProc: LPVOID): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_CALLBACK_VIDEOSTREAM, 0, cast[LPARAM](fpProc)))

proc capSetCallbackOnWaveStream*(hWnd: HWND, fpProc: LPVOID): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_CALLBACK_WAVESTREAM, 0, cast[LPARAM](fpProc)))

proc capSetCallbackOnCapControl*(hWnd: HWND, fpProc: LPVOID): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_CALLBACK_CAPCONTROL, 0, cast[LPARAM](fpProc)))

proc capSetUserData*(hWnd: HWND, lUser: LPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_USER_DATA, 0, lUser))

proc capGetUserData*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_GET_USER_DATA, 0, 0))

proc capDriverConnect*(hWnd: HWND, i: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_DRIVER_CONNECT, i, 0))

proc capDriverDisconnect*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_DRIVER_DISCONNECT, 0, 0))

proc capDriverGetName*(hWnd: HWND, szName: LPTSTR, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_DRIVER_GET_NAME, wSize, cast[LPARAM](szName)))

proc capDriverGetVersion*(hWnd: HWND, szVer: LPTSTR, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_DRIVER_GET_VERSION, wSize, cast[LPARAM](szVer)))

proc capDriverGetCaps*(hWnd: HWND, s: LPCAPDRIVERCAPS, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_DRIVER_GET_CAPS, wSize, cast[LPARAM](s)))

proc capFileSetCaptureFile*(hWnd: HWND, szName: LPTSTR): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_FILE_SET_CAPTURE_FILE, 0, cast[LPARAM](szName)))

proc capFileGetCaptureFile*(hWnd: HWND, szName: LPTSTR, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_FILE_GET_CAPTURE_FILE, wSize, cast[LPARAM](szName)))

proc capFileAlloc*(hWnd: HWND, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_FILE_ALLOCATE, wSize, 0))

proc capFileSaveAs*(hWnd: HWND, szName: LPTSTR): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_FILE_SAVEAS, 0, cast[LPARAM](szName)))

proc capFileSetInfoChunk*(hWnd: HWND, lpInfoChunk: LPCAPINFOCHUNK): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_FILE_SET_INFOCHUNK, 0, cast[LPARAM](lpInfoChunk)))

proc capFileSaveDIB*(hWnd: HWND, szName: LPTSTR): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_FILE_SAVEDIB, 0, cast[LPARAM](szName)))

proc capEditCopy*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_EDIT_COPY, 0, 0))

proc capSetAudioFormat*(hWnd: HWND, s: LPWAVEFORMATEX, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_AUDIOFORMAT, wSize, cast[LPARAM](s)))

proc capGetAudioFormat*(hWnd: HWND, s: LPWAVEFORMATEX, wSize: WPARAM): DWORD =
  return cast[DWORD](AVICapSM(hWnd, WM_CAP_GET_AUDIOFORMAT, wSize, cast[LPARAM](s)))

proc capGetAudioFormatSize*(hWnd: HWND): DWORD =
  return cast[DWORD](AVICapSM(hWnd, WM_CAP_GET_AUDIOFORMAT, 0, 0))

proc capDlgVideoFormat*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_DLG_VIDEOFORMAT, 0, 0))

proc capDlgVideoSource*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_DLG_VIDEOSOURCE, 0, 0))

proc capDlgVideoDisplay*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_DLG_VIDEODISPLAY, 0, 0))

proc capDlgVideoCompression*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_DLG_VIDEOCOMPRESSION, 0, 0))

proc capGetVideoFormat*(hWnd: HWND, s: pointer, wSize: WPARAM): DWORD =
  return cast[DWORD](AVICapSM(hWnd, WM_CAP_GET_VIDEOFORMAT, wSize, cast[LPARAM](s)))

proc capGetVideoFormatSize*(hWnd: HWND): DWORD =
  return cast[DWORD](AVICapSM(hWnd, WM_CAP_GET_VIDEOFORMAT, 0, 0))

proc capSetVideoFormat*(hWnd: HWND, s: pointer, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_VIDEOFORMAT, wSize, cast[LPARAM](s)))

proc capPreview*(hWnd: HWND, f: BOOL): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_PREVIEW, cast[WPARAM](f), 0))

proc capPreviewRate*(hWnd: HWND, wMS: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_PREVIEWRATE, wMS, 0))

proc capOverlay*(hWnd: HWND, f: BOOL): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_OVERLAY, cast[WPARAM](f), 0))

proc capPreviewScale*(hWnd: HWND, f: BOOL): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_SCALE, cast[WPARAM](f), 0))

proc capGetStatus*(hWnd: HWND, s: LPCAPSTATUS, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_GET_STATUS, wSize, cast[LPARAM](s)))

proc capSetScrollPos*(hWnd: HWND, lpP: LPPOINT): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_SCROLL, 0, cast[LPARAM](lpP)))

proc capGrabFrame*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_GRAB_FRAME, 0, 0))

proc capGrabFrameNoStop*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_GRAB_FRAME_NOSTOP, 0, 0))

proc capCaptureSequence*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SEQUENCE, 0, 0))

proc capCaptureSequenceNoFile*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SEQUENCE_NOFILE, 0, 0))

proc capCaptureStop*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_STOP, 0, 0))

proc capCaptureAbort*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_ABORT, 0, 0))

proc capCaptureSingleFrameOpen*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SINGLE_FRAME_OPEN, 0, 0))

proc capCaptureSingleFrameClose*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SINGLE_FRAME_CLOSE, 0, 0))

proc capCaptureSingleFrame*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SINGLE_FRAME, 0, 0))

proc capCaptureGetSetup*(hWnd: HWND, s: LPCAPTUREPARMS, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_GET_SEQUENCE_SETUP, wSize, cast[LPARAM](s)))

proc capCaptureSetSetup*(hWnd: HWND, s: LPCAPTUREPARMS, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_SEQUENCE_SETUP, wSize, cast[LPARAM](s)))

proc capSetMCIDeviceName*(hWnd: HWND, szName: LPTSTR): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_MCI_DEVICE, 0, cast[LPARAM](szName)))

proc capGetMCIDeviceName*(hWnd: HWND, szName: LPTSTR, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_GET_MCI_DEVICE, wSize, cast[LPARAM](szName)))

proc capPaletteOpen*(hWnd: HWND, szName: LPTSTR): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_PAL_OPEN, 0, cast[LPARAM](szName)))

proc capPaletteSave*(hWnd: HWND, szName: LPTSTR): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_PAL_SAVE, 0, cast[LPARAM](szName)))

proc capPalettePaste*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_PAL_PASTE, 0, 0))

proc capPaletteAuto*(hWnd: HWND, iFrames: WPARAM, iColors: LPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_PAL_AUTOCREATE, iFrames, iColors))

proc capPaletteManual*(hWnd: HWND, fGrab: WPARAM, iColors: LPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_PAL_MANUALCREATE, fGrab, iColors))

type
  CAPYIELDCALLBACK* = proc (hWnd: HWND): LRESULT {.stdcall.}
  CAPSTATUSCALLBACKW* = proc (hWnd: HWND, nID: int32, lpsz: LPCWSTR): LRESULT {.stdcall.}
  CAPERRORCALLBACKW* = proc (hWnd: HWND, nID: int32, lpsz: LPCWSTR): LRESULT {.stdcall.}
  CAPSTATUSCALLBACKA* = proc (hWnd: HWND, nID: int32, lpsz: LPCSTR): LRESULT {.stdcall.}
  CAPERRORCALLBACKA* = proc (hWnd: HWND, nID: int32, lpsz: LPCSTR): LRESULT {.stdcall.}

when not defined(winansi):
  type
    CAPSTATUSCALLBACK* = CAPSTATUSCALLBACKW
    CAPERRORCALLBACK* = CAPERRORCALLBACKW

else:
  type
    CAPSTATUSCALLBACK* = CAPSTATUSCALLBACKA
    CAPERRORCALLBACK* = CAPERRORCALLBACKA

type
  CAPVIDEOCALLBACK* = proc (hWnd: HWND, lpVHdr: LPVIDEOHDR): LRESULT {.stdcall.}
  CAPWAVECALLBACK* = proc (hWnd: HWND, lpWHdr: LPWAVEHDR): LRESULT {.stdcall.}
  CAPCONTROLCALLBACK* = proc (hWnd: HWND, nState: int32): LRESULT {.stdcall.}

const
  CONTROLCALLBACK_PREROLL* = 1
  CONTROLCALLBACK_CAPTURING* = 2

proc capCreateCaptureWindowA*(lpszWindowName: LPCSTR, dwStyle: DWORD, x: int32, y: int32, nWidth: int32, nHeight: int32, hwndParent: HWND, nID: int32): HWND {.winapi, dynlib: "avicap32", importc.}
proc capGetDriverDescriptionA*(wDriverIndex: UINT, lpszName: LPSTR, cbName: int32, lpszVer: LPSTR, cbVer: int32): BOOL {.winapi, dynlib: "avicap32", importc.}
proc capCreateCaptureWindowW*(lpszWindowName: LPCWSTR, dwStyle: DWORD, x: int32, y: int32, nWidth: int32, nHeight: int32, hwndParent: HWND, nID: int32): HWND {.winapi, dynlib: "avicap32", importc.}
proc capGetDriverDescriptionW*(wDriverIndex: UINT, lpszName: LPWSTR, cbName: int32, lpszVer: LPWSTR, cbVer: int32): BOOL {.winapi, dynlib: "avicap32", importc.}

when not defined(winansi):
  proc capCreateCaptureWindow*(lpszWindowName: LPCWSTR, dwStyle: DWORD, x: int32, y: int32, nWidth: int32, nHeight: int32, hwndParent: HWND, nID: int32): HWND {.winapi, dynlib: "avicap32", importc: "capCreateCaptureWindowW".}
  proc capGetDriverDescription*(wDriverIndex: UINT, lpszName: LPWSTR, cbName: int32, lpszVer: LPWSTR, cbVer: int32): BOOL {.winapi, dynlib: "avicap32", importc: "capGetDriverDescriptionW".}

else:
  proc capCreateCaptureWindow*(lpszWindowName: LPCSTR, dwStyle: DWORD, x: int32, y: int32, nWidth: int32, nHeight: int32, hwndParent: HWND, nID: int32): HWND {.winapi, dynlib: "avicap32", importc: "capCreateCaptureWindowA".}
  proc capGetDriverDescription*(wDriverIndex: UINT, lpszName: LPSTR, cbName: int32, lpszVer: LPSTR, cbVer: int32): BOOL {.winapi, dynlib: "avicap32", importc: "capGetDriverDescriptionA".}

const
  infotypeDIGITIZATION_TIME* = mmioFOURCC('I', 'D', 'I', 'T')
  infotypeSMPTE_TIME* = mmioFOURCC('I', 'S', 'M', 'P')
  IDS_CAP_BEGIN* = 300
  IDS_CAP_END* = 301
  IDS_CAP_INFO* = 401
  IDS_CAP_OUTOFMEM* = 402
  IDS_CAP_FILEEXISTS* = 403
  IDS_CAP_ERRORPALOPEN* = 404
  IDS_CAP_ERRORPALSAVE* = 405
  IDS_CAP_ERRORDIBSAVE* = 406
  IDS_CAP_DEFAVIEXT* = 407
  IDS_CAP_DEFPALEXT* = 408
  IDS_CAP_CANTOPEN* = 409
  IDS_CAP_SEQ_MSGSTART* = 410
  IDS_CAP_SEQ_MSGSTOP* = 411
  IDS_CAP_VIDEDITERR* = 412
  IDS_CAP_READONLYFILE* = 413
  IDS_CAP_WRITEERROR* = 414
  IDS_CAP_NODISKSPACE* = 415
  IDS_CAP_SETFILESIZE* = 416
  IDS_CAP_SAVEASPERCENT* = 417
  IDS_CAP_DRIVER_ERROR* = 418
  IDS_CAP_WAVE_OPEN_ERROR* = 419
  IDS_CAP_WAVE_ALLOC_ERROR* = 420
  IDS_CAP_WAVE_PREPARE_ERROR* = 421
  IDS_CAP_WAVE_ADD_ERROR* = 422
  IDS_CAP_WAVE_SIZE_ERROR* = 423
  IDS_CAP_VIDEO_OPEN_ERROR* = 424
  IDS_CAP_VIDEO_ALLOC_ERROR* = 425
  IDS_CAP_VIDEO_PREPARE_ERROR* = 426
  IDS_CAP_VIDEO_ADD_ERROR* = 427
  IDS_CAP_VIDEO_SIZE_ERROR* = 428
  IDS_CAP_FILE_OPEN_ERROR* = 429
  IDS_CAP_FILE_WRITE_ERROR* = 430
  IDS_CAP_RECORDING_ERROR* = 431
  IDS_CAP_RECORDING_ERROR2* = 432
  IDS_CAP_AVI_INIT_ERROR* = 433
  IDS_CAP_NO_FRAME_CAP_ERROR* = 434
  IDS_CAP_NO_PALETTE_WARN* = 435
  IDS_CAP_MCI_CONTROL_ERROR* = 436
  IDS_CAP_MCI_CANT_STEP_ERROR* = 437
  IDS_CAP_NO_AUDIO_CAP_ERROR* = 438
  IDS_CAP_AVI_DRAWDIB_ERROR* = 439
  IDS_CAP_COMPRESSOR_ERROR* = 440
  IDS_CAP_AUDIO_DROP_ERROR* = 441
  IDS_CAP_AUDIO_DROP_COMPERROR* = 442
  IDS_CAP_STAT_LIVE_MODE* = 500
  IDS_CAP_STAT_OVERLAY_MODE* = 501
  IDS_CAP_STAT_CAP_INIT* = 502
  IDS_CAP_STAT_CAP_FINI* = 503
  IDS_CAP_STAT_PALETTE_BUILD* = 504
  IDS_CAP_STAT_OPTPAL_BUILD* = 505
  IDS_CAP_STAT_I_FRAMES* = 506
  IDS_CAP_STAT_L_FRAMES* = 507
  IDS_CAP_STAT_CAP_L_FRAMES* = 508
  IDS_CAP_STAT_CAP_AUDIO* = 509
  IDS_CAP_STAT_VIDEOCURRENT* = 510
  IDS_CAP_STAT_VIDEOAUDIO* = 511
  IDS_CAP_STAT_VIDEOONLY* = 512
  IDS_CAP_STAT_FRAMESDROPPED* = 513

proc GetOpenFileNamePreviewA*(lpofn: LPOPENFILENAMEA): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc GetSaveFileNamePreviewA*(lpofn: LPOPENFILENAMEA): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc GetOpenFileNamePreviewW*(lpofn: LPOPENFILENAMEW): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc GetSaveFileNamePreviewW*(lpofn: LPOPENFILENAMEW): BOOL {.winapi, dynlib: "msvfw32", importc.}

when not defined(winansi):
  proc GetOpenFileNamePreview*(lpofn: LPOPENFILENAMEW): BOOL {.winapi, dynlib: "msvfw32", importc: "GetOpenFileNamePreviewW".}
  proc GetSaveFileNamePreview*(lpofn: LPOPENFILENAMEW): BOOL {.winapi, dynlib: "msvfw32", importc: "GetSaveFileNamePreviewW".}

else:
  proc GetOpenFileNamePreview*(lpofn: LPOPENFILENAMEA): BOOL {.winapi, dynlib: "msvfw32", importc: "GetOpenFileNamePreviewA".}
  proc GetSaveFileNamePreview*(lpofn: LPOPENFILENAMEA): BOOL {.winapi, dynlib: "msvfw32", importc: "GetSaveFileNamePreviewA".}

# ext/winioctl.nim
const
#* =  BIN_TYPES* = enum
  RequestSize* = 0
  RequestLocation* = 1
#* =  PARTITION_STYLE* = enum
  PARTITION_STYLE_MBR* = 0
  PARTITION_STYLE_GPT* = 1
  PARTITION_STYLE_RAW* = 2
#* =  DISK_CACHE_RETENTION_PRIORITY* = enum
  EqualPriority* = 0
  KeepPrefetchedData* = 1
  KeepReadData* = 2
#* =  DETECTION_TYPE* = enum
  DetectNone* = 0
  DetectInt13* = 1
  DetectExInt13* = 2
  #* =  MEDIA_TYPE* = enum
  unknown* = 0 # renamed from Unknown
  F5_1Pt2_512* = 1
  F3_1Pt44_512* = 2
  F3_2Pt88_512* = 3
  F3_20Pt8_512* = 4
  F3_720_512* = 5
  F5_360_512* = 6
  F5_320_512* = 7
  F5_320_1024* = 8
  F5_180_512* = 9
  F5_160_512* = 10
  RemovableMedia* = 11
  FixedMedia* = 12
  F3_120M_512* = 13
  F3_640_512* = 14
  F5_640_512* = 15
  F5_720_512* = 16
  F3_1Pt2_512* = 17
  F3_1Pt23_1024* = 18
  F5_1Pt23_1024* = 19
  F3_128Mb_512* = 20
  F3_230Mb_512* = 21
  F8_256_128* = 22
  F3_200Mb_512* = 23
  F3_240M_512* = 24
  F3_32M_512* = 25

const
  HIST_NO_OF_BUCKETS* = 24
  # HISTOGRAM_BUCKET_SIZE* = HISTOGRAM_BUCKET.sizeof.SIZE_T
  # DISK_HISTOGRAM_SIZE* = DISK_HISTOGRAM.sizeof.SIZE_T

type
  DEVICE_TYPE* = DWORD

const
  FILE_DEVICE_BEEP* = 1
  FILE_DEVICE_CD_ROM* = 2
  FILE_DEVICE_CD_ROM_FILE_SYSTEM* = 3
  FILE_DEVICE_CONTROLLER* = 4
  FILE_DEVICE_DATALINK* = 5
  FILE_DEVICE_DFS* = 6
  FILE_DEVICE_DISK* = 7
  FILE_DEVICE_DISK_FILE_SYSTEM* = 8
  FILE_DEVICE_FILE_SYSTEM* = 9
  FILE_DEVICE_INPORT_PORT* = 10
  FILE_DEVICE_KEYBOARD* = 11
  FILE_DEVICE_MAILSLOT* = 12
  FILE_DEVICE_MIDI_IN* = 13
  FILE_DEVICE_MIDI_OUT* = 14
  FILE_DEVICE_MOUSE* = 15
  FILE_DEVICE_MULTI_UNC_PROVIDER* = 16
  FILE_DEVICE_NAMED_PIPE* = 17
  FILE_DEVICE_NETWORK* = 18
  FILE_DEVICE_NETWORK_BROWSER* = 19
  FILE_DEVICE_NETWORK_FILE_SYSTEM* = 20
  FILE_DEVICE_NULL* = 21
  FILE_DEVICE_PARALLEL_PORT* = 22
  FILE_DEVICE_PHYSICAL_NETCARD* = 23
  FILE_DEVICE_PRINTER* = 24
  FILE_DEVICE_SCANNER* = 25
  FILE_DEVICE_SERIAL_MOUSE_PORT* = 26
  FILE_DEVICE_SERIAL_PORT* = 27
  FILE_DEVICE_SCREEN* = 28
  FILE_DEVICE_SOUND* = 29
  FILE_DEVICE_STREAMS* = 30
  FILE_DEVICE_TAPE* = 31
  FILE_DEVICE_TAPE_FILE_SYSTEM* = 32
  FILE_DEVICE_TRANSPORT* = 33
  FILE_DEVICE_UNKNOWN* = 34
  FILE_DEVICE_VIDEO* = 35
  FILE_DEVICE_VIRTUAL_DISK* = 36
  FILE_DEVICE_WAVE_IN* = 37
  FILE_DEVICE_WAVE_OUT* = 38
  FILE_DEVICE_8042_PORT* = 39
  FILE_DEVICE_NETWORK_REDIRECTOR* = 40
  FILE_DEVICE_BATTERY* = 41
  FILE_DEVICE_BUS_EXTENDER* = 42
  FILE_DEVICE_MODEM* = 43
  FILE_DEVICE_VDM* = 44
  FILE_DEVICE_MASS_STORAGE* = 45
  FILE_DEVICE_SMB* = 46
  FILE_DEVICE_KS* = 47
  FILE_DEVICE_CHANGER* = 48
  FILE_DEVICE_SMARTCARD* = 49
  FILE_DEVICE_ACPI* = 50
  FILE_DEVICE_DVD* = 51
  FILE_DEVICE_FULLSCREEN_VIDEO* = 52
  FILE_DEVICE_DFS_FILE_SYSTEM* = 53
  FILE_DEVICE_DFS_VOLUME* = 54
  FILE_DEVICE_SERENUM* = 55
  FILE_DEVICE_TERMSRV* = 56
  FILE_DEVICE_KSEC* = 57
  METHOD_BUFFERED* = 0
  METHOD_IN_DIRECT* = 1
  METHOD_OUT_DIRECT* = 2
  METHOD_NEITHER* = 3
  FILE_ANY_ACCESS* = 0
  FILE_SPECIAL_ACCESS* = 0
  FILE_READ_ACCESS* = 1
  FILE_WRITE_ACCESS* = 2

template CTL_CODE_T(t: DEVICE_TYPE, f: uint, m: uint, a: uint): DWORD =
  (t shl 16) or (a shl 14) or (f shl 2) or m

proc DEVICE_TYPE_FROM_CTL_CODE*(c: DWORD): DEVICE_TYPE =
  return (c and 0xFFFF0000.DWORD) shr 16

const
  IOCTL_STORAGE_BASE* = FILE_DEVICE_MASS_STORAGE.DEVICE_TYPE
  IOCTL_DISK_BASE* = FILE_DEVICE_DISK.DEVICE_TYPE
  IOCTL_VOLUME_BASE* = 'V'.DEVICE_TYPE
  IOCTL_STORAGE_CHECK_VERIFY*           = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0200, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_STORAGE_CHECK_VERIFY2*          = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0200, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_STORAGE_MEDIA_REMOVAL*          = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0201, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_STORAGE_EJECT_MEDIA*            = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0202, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_STORAGE_LOAD_MEDIA*             = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0203, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_STORAGE_LOAD_MEDIA2*            = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0203, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_STORAGE_RESERVE*                = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0204, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_STORAGE_RELEASE*                = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0205, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_STORAGE_FIND_NEW_DEVICES*       = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0206, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_STORAGE_EJECTION_CONTROL*       = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0250, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_STORAGE_MCN_CONTROL*            = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0251, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_STORAGE_GET_MEDIA_TYPES*        = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0300, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_STORAGE_GET_MEDIA_TYPES_EX*     = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0301, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_STORAGE_RESET_BUS*              = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0400, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_STORAGE_RESET_DEVICE*           = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0401, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_STORAGE_GET_DEVICE_NUMBER*      = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0420, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_STORAGE_PREDICT_FAILURE*        = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0440, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_GET_DRIVE_GEOMETRY*        = CTL_CODE_T(IOCTL_DISK_BASE, 0, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_GET_PARTITION_INFO*        = CTL_CODE_T(IOCTL_DISK_BASE, 1, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_SET_PARTITION_INFO*        = CTL_CODE_T(IOCTL_DISK_BASE, 2, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_GET_DRIVE_LAYOUT*          = CTL_CODE_T(IOCTL_DISK_BASE, 3, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_SET_DRIVE_LAYOUT*          = CTL_CODE_T(IOCTL_DISK_BASE, 4, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_VERIFY*                    = CTL_CODE_T(IOCTL_DISK_BASE, 5, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_FORMAT_TRACKS*             = CTL_CODE_T(IOCTL_DISK_BASE, 6, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_REASSIGN_BLOCKS*           = CTL_CODE_T(IOCTL_DISK_BASE, 7, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_PERFORMANCE*               = CTL_CODE_T(IOCTL_DISK_BASE, 8, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_IS_WRITABLE*               = CTL_CODE_T(IOCTL_DISK_BASE, 9, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_LOGGING*                   = CTL_CODE_T(IOCTL_DISK_BASE, 10, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_FORMAT_TRACKS_EX*          = CTL_CODE_T(IOCTL_DISK_BASE, 11, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_HISTOGRAM_STRUCTURE*       = CTL_CODE_T(IOCTL_DISK_BASE, 12, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_HISTOGRAM_DATA*            = CTL_CODE_T(IOCTL_DISK_BASE, 13, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_HISTOGRAM_RESET*           = CTL_CODE_T(IOCTL_DISK_BASE, 14, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_REQUEST_STRUCTURE*         = CTL_CODE_T(IOCTL_DISK_BASE, 15, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_REQUEST_DATA*              = CTL_CODE_T(IOCTL_DISK_BASE, 16, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_GET_PARTITION_INFO_EX*     = CTL_CODE_T(IOCTL_DISK_BASE, 0x12, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_SET_PARTITION_INFO_EX*     = CTL_CODE_T(IOCTL_DISK_BASE, 0x13, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_GET_DRIVE_LAYOUT_EX*       = CTL_CODE_T(IOCTL_DISK_BASE, 0x14, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_SET_DRIVE_LAYOUT_EX*       = CTL_CODE_T(IOCTL_DISK_BASE, 0x15, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_CREATE_DISK*               = CTL_CODE_T(IOCTL_DISK_BASE, 0x16, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_GET_LENGTH_INFO*           = CTL_CODE_T(IOCTL_DISK_BASE, 0x17, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_PERFORMANCE_OFF*           = CTL_CODE_T(IOCTL_DISK_BASE, 0x18, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_GET_DRIVE_GEOMETRY_EX*     = CTL_CODE_T(IOCTL_DISK_BASE, 0x28, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_GROW_PARTITION*            = CTL_CODE_T(IOCTL_DISK_BASE, 0x34, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_GET_CACHE_INFORMATION*     = CTL_CODE_T(IOCTL_DISK_BASE, 0x35, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_SET_CACHE_INFORMATION*     = CTL_CODE_T(IOCTL_DISK_BASE, 0x36, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_DELETE_DRIVE_LAYOUT*       = CTL_CODE_T(IOCTL_DISK_BASE, 0x40, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_UPDATE_PROPERTIES*         = CTL_CODE_T(IOCTL_DISK_BASE, 0x50, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_CHECK_VERIFY*              = CTL_CODE_T(IOCTL_DISK_BASE, 0x200, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_MEDIA_REMOVAL*             = CTL_CODE_T(IOCTL_DISK_BASE, 0x201, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_EJECT_MEDIA*               = CTL_CODE_T(IOCTL_DISK_BASE, 0x202, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_LOAD_MEDIA*                = CTL_CODE_T(IOCTL_DISK_BASE, 0x203, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_RESERVE*                   = CTL_CODE_T(IOCTL_DISK_BASE, 0x204, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_RELEASE*                   = CTL_CODE_T(IOCTL_DISK_BASE, 0x205, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_FIND_NEW_DEVICES*          = CTL_CODE_T(IOCTL_DISK_BASE, 0x206, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_REMOVE_DEVICE*             = CTL_CODE_T(IOCTL_DISK_BASE, 0x207, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_GET_MEDIA_TYPES*           = CTL_CODE_T(IOCTL_DISK_BASE, 0x300, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_UPDATE_DRIVE_SIZE*         = CTL_CODE_T(IOCTL_DISK_BASE, 0x0032, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_SERIAL_LSRMST_INSERT*           = CTL_CODE_T(FILE_DEVICE_SERIAL_PORT, 31, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS* = CTL_CODE_T(IOCTL_VOLUME_BASE, 0, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_VOLUME_IS_CLUSTERED*            = CTL_CODE_T(IOCTL_VOLUME_BASE, 12, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_LOCK_VOLUME*                    = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 6, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_UNLOCK_VOLUME*                  = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 7, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_DISMOUNT_VOLUME*                = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 8, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_MOUNT_DBLS_VOLUME*              = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 13, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_GET_COMPRESSION*                = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 15, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_SET_COMPRESSION*                = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 16, METHOD_BUFFERED, FILE_READ_DATA or FILE_WRITE_DATA)
  FSCTL_READ_COMPRESSION*               = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 17, METHOD_NEITHER, FILE_READ_DATA)
  FSCTL_WRITE_COMPRESSION*              = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 18, METHOD_NEITHER, FILE_WRITE_DATA)
  FSCTL_GET_NTFS_VOLUME_DATA*           = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 25, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_GET_VOLUME_BITMAP*              = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 27, METHOD_NEITHER, FILE_ANY_ACCESS)
  FSCTL_GET_RETRIEVAL_POINTERS*         = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 28, METHOD_NEITHER, FILE_ANY_ACCESS)
  FSCTL_MOVE_FILE*                      = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 29, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_GET_REPARSE_POINT*              = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 42, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_SET_REPARSE_POINT*              = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 41, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_DELETE_REPARSE_POINT*           = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 43, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_SET_SPARSE*                     = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 49, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

  PARTITION_ENTRY_UNUSED* = 0.BYTE
  PARTITION_FAT_12* = 1.BYTE
  PARTITION_XENIX_1* = 2.BYTE
  PARTITION_XENIX_2* = 3.BYTE
  PARTITION_FAT_16* = 4.BYTE
  PARTITION_EXTENDED* = 5.BYTE
  PARTITION_HUGE* = 6.BYTE
  PARTITION_IFS* = 7.BYTE
  PARTITION_FAT32* = 0x0B.BYTE
  PARTITION_FAT32_XINT13* = 0x0C.BYTE
  PARTITION_XINT13* = 0x0E.BYTE
  PARTITION_XINT13_EXTENDED* = 0x0F.BYTE
  PARTITION_PREP* = 0x41.BYTE
  PARTITION_LDM* = 0x42.BYTE
  PARTITION_UNIX* = 0x63.BYTE
  PARTITION_NTFT* = 0x80.BYTE
  VALID_NTFT* = 0xC0.BYTE
  SERIAL_LSRMST_ESCAPE* = 0
  SERIAL_LSRMST_LSR_DATA* = 1
  SERIAL_LSRMST_LSR_NODATA* = 2
  SERIAL_LSRMST_MST* = 3
  DISK_LOGGING_START* = 0
  DISK_LOGGING_STOP* = 1
  DISK_LOGGING_DUMP* = 2
  DISK_BINNING* = 3

type
  BAD_TRACK_NUMBER* = WORD
  PBAD_TRACK_NUMBER* = ptr WORD
  BIN_TYPES* = int32
  BIN_RANGE* {.final, pure.} = object
    StartValue*: LARGE_INTEGER
    Length*: LARGE_INTEGER
  PBIN_RANGE* = ptr BIN_RANGE
  BIN_COUNT* {.final, pure.} = object
    BinRange*: BIN_RANGE
    BinCount*: DWORD
  PBIN_COUNT* = ptr BIN_COUNT
  BIN_RESULTS* {.final, pure.} = object
    NumberOfBins*: DWORD
    BinCounts*: array[1, BIN_COUNT]
  PBIN_RESULTS* = ptr BIN_RESULTS
  PARTITION_STYLE* = int32
  CREATE_DISK_GPT* {.final, pure.} = object
    DiskId*: GUID
    MaxPartitionCount*: DWORD
  PCREATE_DISK_GPT* = ptr CREATE_DISK_GPT
  CREATE_DISK_MBR* {.final, pure.} = object
    Signature*: DWORD
  PCREATE_DISK_MBR* = ptr CREATE_DISK_MBR
  CREATE_DISK_UNION1* {.final, union, pure.} = object
    Mbr*: CREATE_DISK_MBR
    Gpt*: CREATE_DISK_GPT
  CREATE_DISK* {.final, pure.} = object
    PartitionStyle*: PARTITION_STYLE
    u1*: CREATE_DISK_UNION1
  PCREATE_DISK* = ptr CREATE_DISK
  DISK_CACHE_RETENTION_PRIORITY* = int32
  DISK_CACHE_INFORMATION_UNION1_BlockPrefetch* {.final, pure.} = object
    Minimum*: WORD
    Maximum*: WORD
  DISK_CACHE_INFORMATION_UNION1_ScalarPrefetch* {.final, pure.} = object
    Minimum*: WORD
    Maximum*: WORD
    MaximumBlocks*: WORD
  DISK_CACHE_INFORMATION_UNION1* {.final, union, pure.} = object
    ScalarPrefetch*: DISK_CACHE_INFORMATION_UNION1_ScalarPrefetch
    BlockPrefetch*: DISK_CACHE_INFORMATION_UNION1_BlockPrefetch
  DISK_CACHE_INFORMATION* {.final, pure.} = object
    ParametersSavable*: BOOLEAN
    ReadCacheEnabled*: BOOLEAN
    WriteCacheEnabled*: BOOLEAN
    ReadRetentionPriority*: DISK_CACHE_RETENTION_PRIORITY
    WriteRetentionPriority*: DISK_CACHE_RETENTION_PRIORITY
    DisablePrefetchTransferLength*: WORD
    PrefetchScalar*: BOOLEAN
    u1*: DISK_CACHE_INFORMATION_UNION1
  PDISK_CACHE_INFORMATION* = ptr DISK_CACHE_INFORMATION
  DETECTION_TYPE* = int32
  DISK_INT13_INFO* {.final, pure.} = object
    DriveSelect*: WORD
    MaxCylinders*: DWORD
    SectorsPerTrack*: WORD
    MaxHeads*: WORD
    NumberDrives*: WORD
  PDISK_INT13_INFO* = ptr DISK_INT13_INFO
  DISK_EX_INT13_INFO* {.final, pure.} = object
    ExBufferSize*: WORD
    ExFlags*: WORD
    ExCylinders*: DWORD
    ExHeads*: DWORD
    ExSectorsPerTrack*: DWORD
    ExSectorsPerDrive*: DWORD64
    ExSectorSize*: WORD
    ExReserved*: WORD
  PDISK_EX_INT13_INFO* = ptr DISK_EX_INT13_INFO
  DISK_DETECTION_INFO* {.final, pure.} = object
    SizeOfDetectInfo*: DWORD
    DetectionType*: DETECTION_TYPE
    Int13*: DISK_INT13_INFO
    ExInt13*: DISK_EX_INT13_INFO
  PDISK_DETECTION_INFO* = ptr DISK_DETECTION_INFO
  MEDIA_TYPE* = int32
  PMEDIA_TYPE* = ptr MEDIA_TYPE
  DISK_GEOMETRY* {.final, pure.} = object
    Cylinders*: LARGE_INTEGER
    MediaType*: MEDIA_TYPE
    TracksPerCylinder*: DWORD
    SectorsPerTrack*: DWORD
    BytesPerSector*: DWORD
  PDISK_GEOMETRY* = ptr DISK_GEOMETRY
  DISK_GEOMETRY_EX* {.final, pure.} = object
    Geometry*: DISK_GEOMETRY
    DiskSize*: LARGE_INTEGER
    Data*: array[1, BYTE]
  PDISK_GEOMETRY_EX* = ptr DISK_GEOMETRY_EX
  DISK_GROW_PARTITION* {.final, pure.} = object
    PartitionNumber*: DWORD
    BytesToGrow*: LARGE_INTEGER
  PDISK_GROW_PARTITION* = ptr DISK_GROW_PARTITION
  DISK_PARTITION_INFO_UNION1* {.final, union, pure.} = object
    Signature*: DWORD
    DiskId*: GUID
  DISK_PARTITION_INFO* {.final, pure.} = object
    SizeOfPartitionInfo*: DWORD
    PartitionStyle*: PARTITION_STYLE
    u1*: DISK_PARTITION_INFO_UNION1
  PDISK_PARTITION_INFO* = ptr DISK_PARTITION_INFO
  DISK_PERFORMANCE* {.final, pure.} = object
    BytesRead*: LARGE_INTEGER
    BytesWritten*: LARGE_INTEGER
    ReadTime*: LARGE_INTEGER
    WriteTime*: LARGE_INTEGER
    ReadCount*: DWORD
    WriteCount*: DWORD
    QueueDepth*: DWORD
  PDISK_PERFORMANCE* = ptr DISK_PERFORMANCE
  DISK_RECORD* {.final, pure.} = object
    ByteOffset*: LARGE_INTEGER
    StartTime*: LARGE_INTEGER
    EndTime*: LARGE_INTEGER
    VirtualAddress*: PVOID
    NumberOfBytes*: DWORD
    DeviceNumber*: BYTE
    ReadRequest*: BOOLEAN
  PDISK_RECORD* = ptr DISK_RECORD
  DISK_LOGGING* {.final, pure.} = object
    Function*: BYTE
    BufferAddress*: PVOID
    BufferSize*: DWORD
  PDISK_LOGGING* = ptr DISK_LOGGING
  DISKQUOTA_USER_INFORMATION* {.final, pure.} = object
    QuotaUsed*: LONGLONG
    QuotaThreshold*: LONGLONG
    QuotaLimit*: LONGLONG
  PDISKQUOTA_USER_INFORMATION* = ptr DISKQUOTA_USER_INFORMATION
  FORMAT_PARAMETERS* {.final, pure.} = object
    MediaType*: MEDIA_TYPE
    StartCylinderNumber*: DWORD
    EndCylinderNumber*: DWORD
    StartHeadNumber*: DWORD
    EndHeadNumber*: DWORD
  PFORMAT_PARAMETERS* = ptr FORMAT_PARAMETERS
  FORMAT_EX_PARAMETERS* {.final, pure.} = object
    MediaType*: MEDIA_TYPE
    StartCylinderNumber*: DWORD
    EndCylinderNumber*: DWORD
    StartHeadNumber*: DWORD
    EndHeadNumber*: DWORD
    FormatGapLength*: WORD
    SectorsPerTrack*: WORD
    SectorNumber*: array[1, WORD]
  PFORMAT_EX_PARAMETERS* = ptr FORMAT_EX_PARAMETERS
  GET_LENGTH_INFORMATION* {.final, pure.} = object
    Length*: LARGE_INTEGER
  HISTOGRAM_BUCKET* {.final, pure.} = object
    Reads*: DWORD
    Writes*: DWORD
  PHISTOGRAM_BUCKET* = ptr HISTOGRAM_BUCKET
  DISK_HISTOGRAM* {.final, pure.} = object
    DiskSize*: LARGE_INTEGER
    Start*: LARGE_INTEGER
    End*: LARGE_INTEGER
    Average*: LARGE_INTEGER
    AverageRead*: LARGE_INTEGER
    AverageWrite*: LARGE_INTEGER
    Granularity*: DWORD
    Size*: DWORD
    ReadCount*: DWORD
    WriteCount*: DWORD
    Histogram*: PHISTOGRAM_BUCKET
  PDISK_HISTOGRAM* = ptr DISK_HISTOGRAM
  DISK_EXTENT* {.final, pure.} = object
    DiskNumber*: DWORD
    StartingOffset*: LARGE_INTEGER
    ExtentLength*: LARGE_INTEGER
  PDISK_EXTENT* = ptr DISK_EXTENT
  VOLUME_DISK_EXTENTS* {.final, pure.} = object
    NumberOfDiskExtents*: DWORD
    Extents*: array[1, DISK_EXTENT]
  PVOLUME_DISK_EXTENTS* = ptr VOLUME_DISK_EXTENTS
  PARTITION_INFORMATION* {.final, pure.} = object
    StartingOffset*: LARGE_INTEGER
    PartitionLength*: LARGE_INTEGER
    HiddenSectors*: DWORD
    PartitionNumber*: DWORD
    PartitionType*: BYTE
    BootIndicator*: BOOLEAN
    RecognizedPartition*: BOOLEAN
    RewritePartition*: BOOLEAN
  PPARTITION_INFORMATION* = ptr PARTITION_INFORMATION
  DRIVE_LAYOUT_INFORMATION* {.final, pure.} = object
    PartitionCount*: DWORD
    Signature*: DWORD
    PartitionEntry*: array[1, PARTITION_INFORMATION]
  PDRIVE_LAYOUT_INFORMATION* = ptr DRIVE_LAYOUT_INFORMATION
  DRIVE_LAYOUT_INFORMATION_GPT* {.final, pure.} = object
    DiskId*: GUID
    StartingUsableOffset*: LARGE_INTEGER
    UsableLength*: LARGE_INTEGER
    MaxPartitionCount*: ULONG
  PDRIVE_LAYOUT_INFORMATION_GPT* = ptr DRIVE_LAYOUT_INFORMATION_GPT
  DRIVE_LAYOUT_INFORMATION_MBR* {.final, pure.} = object
    Signature*: ULONG
  PDRIVE_LAYOUT_INFORMATION_MBR* = ptr DRIVE_LAYOUT_INFORMATION_MBR
  PARTITION_INFORMATION_MBR* {.final, pure.} = object
    PartitionType*: BYTE
    BootIndicator*: BOOLEAN
    RecognizedPartition*: BOOLEAN
    HiddenSectors*: DWORD
  PARTITION_INFORMATION_GPT* {.final, pure.} = object
    PartitionType*: GUID
    PartitionId*: GUID
    Attributes*: DWORD64
    Name*: array[36, WCHAR]
  PARTITION_INFORMATION_EX_UNION1* {.final, union, pure.} = object
    Mbr*: PARTITION_INFORMATION_MBR
    Gpt*: PARTITION_INFORMATION_GPT
  PARTITION_INFORMATION_EX* {.final, pure.} = object
    PartitionStyle*: PARTITION_STYLE
    StartingOffset*: LARGE_INTEGER
    PartitionLength*: LARGE_INTEGER
    PartitionNumber*: DWORD
    RewritePartition*: BOOLEAN
    u1*: PARTITION_INFORMATION_EX_UNION1
  DRIVE_LAYOUT_INFORMATION_EX_UNION1* {.final, union, pure.} = object
    Mbr*: DRIVE_LAYOUT_INFORMATION_MBR
    Gpt*: DRIVE_LAYOUT_INFORMATION_GPT
  DRIVE_LAYOUT_INFORMATION_EX* {.final, pure.} = object
    PartitionStyle*: DWORD
    PartitionCount*: DWORD
    u1*: DRIVE_LAYOUT_INFORMATION_EX_UNION1
    PartitionEntry*: array[1, PARTITION_INFORMATION_EX]
  PDRIVE_LAYOUT_INFORMATION_EX* = ptr DRIVE_LAYOUT_INFORMATION_EX
  MOVE_FILE_DATA* {.final, pure.} = object
    FileHandle*: HANDLE
    StartingVcn*: LARGE_INTEGER
    StartingLcn*: LARGE_INTEGER
    ClusterCount*: DWORD
  PMOVE_FILE_DATA* = ptr MOVE_FILE_DATA
  PERF_BIN* {.final, pure.} = object
    NumberOfBins*: DWORD
    TypeOfBin*: DWORD
    BinsRanges*: array[1, BIN_RANGE]
  PPERF_BIN* = ptr PERF_BIN
  PREVENT_MEDIA_REMOVAL* {.final, pure.} = object
    PreventMediaRemoval*: BOOLEAN
  PPREVENT_MEDIA_REMOVAL* = ptr PREVENT_MEDIA_REMOVAL
  RETRIEVAL_POINTERS_BUFFER_Extent* {.final, pure.} = object
    NextVcn*: LARGE_INTEGER
    Lcn*: LARGE_INTEGER
  RETRIEVAL_POINTERS_BUFFER* {.final, pure.} = object
    ExtentCount*: DWORD
    StartingVcn*: LARGE_INTEGER
    Extents*: array[1, RETRIEVAL_POINTERS_BUFFER_Extent]
  PRETRIEVAL_POINTERS_BUFFER* = ptr RETRIEVAL_POINTERS_BUFFER
  REASSIGN_BLOCKS* {.final, pure.} = object
    Reserved*: WORD
    Count*: WORD
    BlockNumber*: array[1, DWORD]
  PREASSIGN_BLOCKS* = ptr REASSIGN_BLOCKS
  SET_PARTITION_INFORMATION* {.final, pure.} = object
    PartitionType*: BYTE
  PSET_PARTITION_INFORMATION* = ptr SET_PARTITION_INFORMATION
  STARTING_LCN_INPUT_BUFFER* {.final, pure.} = object
    StartingLcn*: LARGE_INTEGER
  PSTARTING_LCN_INPUT_BUFFER* = ptr STARTING_LCN_INPUT_BUFFER
  STARTING_VCN_INPUT_BUFFER* {.final, pure.} = object
    StartingVcn*: LARGE_INTEGER
  PSTARTING_VCN_INPUT_BUFFER* = ptr STARTING_VCN_INPUT_BUFFER
  VERIFY_INFORMATION* {.final, pure.} = object
    StartingOffset*: LARGE_INTEGER
    Length*: DWORD
  PVERIFY_INFORMATION* = ptr VERIFY_INFORMATION
  VOLUME_BITMAP_BUFFER* {.final, pure.} = object
    StartingLcn*: LARGE_INTEGER
    BitmapSize*: LARGE_INTEGER
    Buffer*: array[1, BYTE]
  PVOLUME_BITMAP_BUFFER* = ptr VOLUME_BITMAP_BUFFER
  NTFS_VOLUME_DATA_BUFFER* {.final, pure.} = object
    VolumeSerialNumber*: LARGE_INTEGER
    NumberSectors*: LARGE_INTEGER
    TotalClusters*: LARGE_INTEGER
    FreeClusters*: LARGE_INTEGER
    TotalReserved*: LARGE_INTEGER
    BytesPerSector*: DWORD
    BytesPerCluster*: DWORD
    BytesPerFileRecordSegment*: DWORD
    ClustersPerFileRecordSegment*: DWORD
    MftValidDataLength*: LARGE_INTEGER
    MftStartLcn*: LARGE_INTEGER
    Mft2StartLcn*: LARGE_INTEGER
    MftZoneStart*: LARGE_INTEGER
    MftZoneEnd*: LARGE_INTEGER
  PNTFS_VOLUME_DATA_BUFFER* = ptr NTFS_VOLUME_DATA_BUFFER

proc IsRecognizedPartition*(t: BYTE): bool =
  result = ((t and PARTITION_NTFT).bool and
      ((t and (not VALID_NTFT.BYTE)) == PARTITION_FAT_12 or
      (t and (not VALID_NTFT.BYTE)) == PARTITION_FAT_16 or
      (t and (not VALID_NTFT.BYTE)) == PARTITION_IFS or
      (t and (not VALID_NTFT.BYTE)) == PARTITION_HUGE or
      (t and (not VALID_NTFT.BYTE)) == PARTITION_FAT32 or
      (t and (not VALID_NTFT.BYTE)) == PARTITION_FAT32_XINT13 or
      (t and (not VALID_NTFT.BYTE)) == PARTITION_XINT13)) or
    (t and (not PARTITION_NTFT.BYTE)) == PARTITION_FAT_12 or
    (t and (not PARTITION_NTFT.BYTE)) == PARTITION_FAT_16 or
    (t and (not PARTITION_NTFT.BYTE)) == PARTITION_IFS or
    (t and (not PARTITION_NTFT.BYTE)) == PARTITION_HUGE or
    (t and (not PARTITION_NTFT.BYTE)) == PARTITION_FAT32 or
    (t and (not PARTITION_NTFT.BYTE)) == PARTITION_FAT32_XINT13 or
    (t and (not PARTITION_NTFT.BYTE)) == PARTITION_XINT13

proc IsContainerPartition*(t: BYTE): bool =
  result = ((t and PARTITION_NTFT.BYTE).bool and
      ((t and (not VALID_NTFT.BYTE)) == PARTITION_EXTENDED or
      (t and (not VALID_NTFT.BYTE)) == PARTITION_XINT13_EXTENDED)) or
    (t and (not PARTITION_NTFT.BYTE)) == PARTITION_EXTENDED or
    (t and (not PARTITION_NTFT.BYTE)) == PARTITION_XINT13_EXTENDED

proc `Mbr=`*(self: var CREATE_DISK, x: CREATE_DISK_MBR) = self.u1.Mbr = x
proc Mbr*(self: CREATE_DISK): CREATE_DISK_MBR = self.u1.Mbr
proc `Gpt=`*(self: var CREATE_DISK, x: CREATE_DISK_GPT) = self.u1.Gpt = x
proc Gpt*(self: CREATE_DISK): CREATE_DISK_GPT = self.u1.Gpt
proc `Minimum=`*(self: var DISK_CACHE_INFORMATION, x: WORD) = self.u1.ScalarPrefetch.Minimum = x
proc Minimum*(self: DISK_CACHE_INFORMATION): WORD = self.u1.ScalarPrefetch.Minimum
proc `Maximum=`*(self: var DISK_CACHE_INFORMATION, x: WORD) = self.u1.ScalarPrefetch.Maximum = x
proc Maximum*(self: DISK_CACHE_INFORMATION): WORD = self.u1.ScalarPrefetch.Maximum
proc `MaximumBlocks=`*(self: var DISK_CACHE_INFORMATION, x: WORD) = self.u1.ScalarPrefetch.MaximumBlocks = x
proc MaximumBlocks*(self: DISK_CACHE_INFORMATION): WORD = self.u1.ScalarPrefetch.MaximumBlocks
proc `Signature=`*(self: var DISK_PARTITION_INFO, x: DWORD) = self.u1.Signature = x
proc Signature*(self: DISK_PARTITION_INFO): DWORD = self.u1.Signature
proc `DiskId=`*(self: var DISK_PARTITION_INFO, x: GUID) = self.u1.DiskId = x
proc DiskId*(self: DISK_PARTITION_INFO): GUID = self.u1.DiskId
proc `Mbr=`*(self: var PARTITION_INFORMATION_EX, x: PARTITION_INFORMATION_MBR) = self.u1.Mbr = x
proc Mbr*(self: PARTITION_INFORMATION_EX): PARTITION_INFORMATION_MBR = self.u1.Mbr
proc `Gpt=`*(self: var PARTITION_INFORMATION_EX, x: PARTITION_INFORMATION_GPT) = self.u1.Gpt = x
proc Gpt*(self: PARTITION_INFORMATION_EX): PARTITION_INFORMATION_GPT = self.u1.Gpt
proc `Mbr=`*(self: var DRIVE_LAYOUT_INFORMATION_EX, x: DRIVE_LAYOUT_INFORMATION_MBR) = self.u1.Mbr = x
proc Mbr*(self: DRIVE_LAYOUT_INFORMATION_EX): DRIVE_LAYOUT_INFORMATION_MBR = self.u1.Mbr
proc `Gpt=`*(self: var DRIVE_LAYOUT_INFORMATION_EX, x: DRIVE_LAYOUT_INFORMATION_GPT) = self.u1.Gpt = x
proc Gpt*(self: DRIVE_LAYOUT_INFORMATION_EX): DRIVE_LAYOUT_INFORMATION_GPT = self.u1.Gpt

# ext/winspool.nim

const
  DI_CHANNEL* = 1
  DI_CHANNEL_WRITE* = 2
  DI_READ_SPOOL_JOB* = 3
  FORM_BUILTIN* = 1
  JOB_CONTROL_PAUSE* = 1
  JOB_CONTROL_RESUME* = 2
  JOB_CONTROL_CANCEL* = 3
  JOB_CONTROL_RESTART* = 4
  JOB_CONTROL_DELETE* = 5
  JOB_STATUS_PAUSED* = 1
  JOB_STATUS_ERROR* = 2
  JOB_STATUS_DELETING* = 4
  JOB_STATUS_SPOOLING* = 8
  JOB_STATUS_PRINTING* = 16
  JOB_STATUS_OFFLINE* = 32
  JOB_STATUS_PAPEROUT* = 0x40
  JOB_STATUS_PRINTED* = 0x80
  JOB_STATUS_DELETED* = 0x100
  JOB_STATUS_BLOCKED_DEVQ* = 0x200
  JOB_STATUS_USER_INTERVENTION* = 0x400
  JOB_POSITION_UNSPECIFIED* = 0
  JOB_NOTIFY_TYPE* = 1
  JOB_NOTIFY_FIELD_PRINTER_NAME* = 0
  JOB_NOTIFY_FIELD_MACHINE_NAME* = 1
  JOB_NOTIFY_FIELD_PORT_NAME* = 2
  JOB_NOTIFY_FIELD_USER_NAME* = 3
  JOB_NOTIFY_FIELD_NOTIFY_NAME* = 4
  JOB_NOTIFY_FIELD_DATATYPE* = 5
  JOB_NOTIFY_FIELD_PRINT_PROCESSOR* = 6
  JOB_NOTIFY_FIELD_PARAMETERS* = 7
  JOB_NOTIFY_FIELD_DRIVER_NAME* = 8
  JOB_NOTIFY_FIELD_DEVMODE* = 9
  JOB_NOTIFY_FIELD_STATUS* = 10
  JOB_NOTIFY_FIELD_STATUS_STRING* = 11
  JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR* = 12
  JOB_NOTIFY_FIELD_DOCUMENT* = 13
  JOB_NOTIFY_FIELD_PRIORITY* = 14
  JOB_NOTIFY_FIELD_POSITION* = 15
  JOB_NOTIFY_FIELD_SUBMITTED* = 16
  JOB_NOTIFY_FIELD_START_TIME* = 17
  JOB_NOTIFY_FIELD_UNTIL_TIME* = 18
  JOB_NOTIFY_FIELD_TIME* = 19
  JOB_NOTIFY_FIELD_TOTAL_PAGES* = 20
  JOB_NOTIFY_FIELD_PAGES_PRINTED* = 21
  JOB_NOTIFY_FIELD_TOTAL_BYTES* = 22
  JOB_NOTIFY_FIELD_BYTES_PRINTED* = 23
  JOB_ACCESS_ADMINISTER* = 16
  JOB_ALL_ACCESS* = STANDARD_RIGHTS_REQUIRED or JOB_ACCESS_ADMINISTER
  JOB_READ* = STANDARD_RIGHTS_READ or JOB_ACCESS_ADMINISTER
  JOB_WRITE* = STANDARD_RIGHTS_WRITE or JOB_ACCESS_ADMINISTER
  JOB_EXECUTE* = STANDARD_RIGHTS_EXECUTE or JOB_ACCESS_ADMINISTER
  PRINTER_NOTIFY_OPTIONS_REFRESH* = 1
  PRINTER_ACCESS_ADMINISTER* = 4
  PRINTER_ACCESS_USE* = 8
  PRINTER_ERROR_INFORMATION* = 0x80000000'i32
  PRINTER_ERROR_WARNING* = 0x40000000
  PRINTER_ERROR_SEVERE* = 0x20000000
  PRINTER_ERROR_OUTOFPAPER* = 1
  PRINTER_ERROR_JAM* = 2
  PRINTER_ERROR_OUTOFTONER* = 4
  PRINTER_CONTROL_PAUSE* = 1
  PRINTER_CONTROL_RESUME* = 2
  PRINTER_CONTROL_PURGE* = 3
  PRINTER_CONTROL_SET_STATUS* = 4
  PRINTER_STATUS_PAUSED* = 1
  PRINTER_STATUS_ERROR* = 2
  PRINTER_STATUS_PENDING_DELETION* = 4
  PRINTER_STATUS_PAPER_JAM* = 8
  PRINTER_STATUS_PAPER_OUT* = 0x10
  PRINTER_STATUS_MANUAL_FEED* = 0x20
  PRINTER_STATUS_PAPER_PROBLEM* = 0x40
  PRINTER_STATUS_OFFLINE* = 0x80
  PRINTER_STATUS_IO_ACTIVE* = 0x100
  PRINTER_STATUS_BUSY* = 0x200
  PRINTER_STATUS_PRINTING* = 0x400
  PRINTER_STATUS_OUTPUT_BIN_FULL* = 0x800
  PRINTER_STATUS_NOT_AVAILABLE* = 0x1000
  PRINTER_STATUS_WAITING* = 0x2000
  PRINTER_STATUS_PROCESSING* = 0x4000
  PRINTER_STATUS_INITIALIZING* = 0x8000
  PRINTER_STATUS_WARMING_UP* = 0x10000
  PRINTER_STATUS_TONER_LOW* = 0x20000
  PRINTER_STATUS_NO_TONER* = 0x40000
  PRINTER_STATUS_PAGE_PUNT* = 0x80000
  PRINTER_STATUS_USER_INTERVENTION* = 0x100000
  PRINTER_STATUS_OUT_OF_MEMORY* = 0x200000
  PRINTER_STATUS_DOOR_OPEN* = 0x400000
  PRINTER_STATUS_SERVER_UNKNOWN* = 0x800000
  PRINTER_STATUS_POWER_SAVE* = 0x1000000
  PRINTER_ATTRIBUTE_QUEUED* = 1
  PRINTER_ATTRIBUTE_DIRECT* = 2
  PRINTER_ATTRIBUTE_DEFAULT* = 4
  PRINTER_ATTRIBUTE_SHARED* = 8
  PRINTER_ATTRIBUTE_NETWORK* = 0x10
  PRINTER_ATTRIBUTE_HIDDEN* = 0x20
  PRINTER_ATTRIBUTE_LOCAL* = 0x40
  PRINTER_ATTRIBUTE_ENABLE_DEVQ* = 0x80
  PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS* = 0x100
  PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST* = 0x200
  PRINTER_ATTRIBUTE_WORK_OFFLINE* = 0x400
  PRINTER_ATTRIBUTE_ENABLE_BIDI* = 0x800
  PRINTER_ATTRIBUTE_RAW_ONLY* = 0x1000
  PRINTER_ATTRIBUTE_PUBLISHED* = 0x2000
  PRINTER_ENUM_DEFAULT* = 1
  PRINTER_ENUM_LOCAL* = 2
  PRINTER_ENUM_CONNECTIONS* = 4
  PRINTER_ENUM_FAVORITE* = 4
  PRINTER_ENUM_NAME* = 8
  PRINTER_ENUM_REMOTE* = 16
  PRINTER_ENUM_SHARED* = 32
  PRINTER_ENUM_NETWORK* = 0x40
  PRINTER_ENUM_EXPAND* = 0x4000
  PRINTER_ENUM_CONTAINER* = 0x8000
  PRINTER_ENUM_ICONMASK* = 0xff0000
  PRINTER_ENUM_ICON1* = 0x10000
  PRINTER_ENUM_ICON2* = 0x20000
  PRINTER_ENUM_ICON3* = 0x40000
  PRINTER_ENUM_ICON4* = 0x80000
  PRINTER_ENUM_ICON5* = 0x100000
  PRINTER_ENUM_ICON6* = 0x200000
  PRINTER_ENUM_ICON7* = 0x400000
  PRINTER_ENUM_ICON8* = 0x800000
  PRINTER_NOTIFY_TYPE* = 0
  PRINTER_NOTIFY_FIELD_SERVER_NAME* = 0
  PRINTER_NOTIFY_FIELD_PRINTER_NAME* = 1
  PRINTER_NOTIFY_FIELD_SHARE_NAME* = 2
  PRINTER_NOTIFY_FIELD_PORT_NAME* = 3
  PRINTER_NOTIFY_FIELD_DRIVER_NAME* = 4
  PRINTER_NOTIFY_FIELD_COMMENT* = 5
  PRINTER_NOTIFY_FIELD_LOCATION* = 6
  PRINTER_NOTIFY_FIELD_DEVMODE* = 7
  PRINTER_NOTIFY_FIELD_SEPFILE* = 8
  PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR* = 9
  PRINTER_NOTIFY_FIELD_PARAMETERS* = 10
  PRINTER_NOTIFY_FIELD_DATATYPE* = 11
  PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR* = 12
  PRINTER_NOTIFY_FIELD_ATTRIBUTES* = 13
  PRINTER_NOTIFY_FIELD_PRIORITY* = 14
  PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY* = 15
  PRINTER_NOTIFY_FIELD_START_TIME* = 16
  PRINTER_NOTIFY_FIELD_UNTIL_TIME* = 17
  PRINTER_NOTIFY_FIELD_STATUS* = 18
  PRINTER_NOTIFY_FIELD_STATUS_STRING* = 19
  PRINTER_NOTIFY_FIELD_CJOBS* = 20
  PRINTER_NOTIFY_FIELD_AVERAGE_PPM* = 21
  PRINTER_NOTIFY_FIELD_TOTAL_PAGES* = 22
  PRINTER_NOTIFY_FIELD_PAGES_PRINTED* = 23
  PRINTER_NOTIFY_FIELD_TOTAL_BYTES* = 24
  PRINTER_NOTIFY_FIELD_BYTES_PRINTED* = 25
  PRINTER_CHANGE_ADD_PRINTER* = 1
  PRINTER_CHANGE_SET_PRINTER* = 2
  PRINTER_CHANGE_DELETE_PRINTER* = 4
  PRINTER_CHANGE_FAILED_CONNECTION_PRINTER* = 8
  PRINTER_CHANGE_PRINTER* = 0xFF
  PRINTER_CHANGE_ADD_JOB* = 0x100
  PRINTER_CHANGE_SET_JOB* = 0x200
  PRINTER_CHANGE_DELETE_JOB* = 0x400
  PRINTER_CHANGE_WRITE_JOB* = 0x800
  PRINTER_CHANGE_JOB* = 0xFF00
  PRINTER_CHANGE_ADD_FORM* = 0x10000
  PRINTER_CHANGE_SET_FORM* = 0x20000
  PRINTER_CHANGE_DELETE_FORM* = 0x40000
  PRINTER_CHANGE_FORM* = 0x70000
  PRINTER_CHANGE_ADD_PORT* = 0x100000
  PRINTER_CHANGE_CONFIGURE_PORT* = 0x200000
  PRINTER_CHANGE_DELETE_PORT* = 0x400000
  PRINTER_CHANGE_PORT* = 0x700000
  PRINTER_CHANGE_ADD_PRINT_PROCESSOR* = 0x1000000
  PRINTER_CHANGE_DELETE_PRINT_PROCESSOR* = 0x4000000
  PRINTER_CHANGE_PRINT_PROCESSOR* = 0x7000000
  PRINTER_CHANGE_ADD_PRINTER_DRIVER* = 0x10000000
  PRINTER_CHANGE_SET_PRINTER_DRIVER* = 0x20000000
  PRINTER_CHANGE_DELETE_PRINTER_DRIVER* = 0x40000000
  PRINTER_CHANGE_PRINTER_DRIVER* = 0x70000000
  PRINTER_CHANGE_TIMEOUT* = 0x80000000'i32
  PRINTER_CHANGE_ALL* = 0x7777FFFF
  PRINTER_NOTIFY_INFO_DISCARDED* = 1
  PRINTER_ALL_ACCESS* = ( STANDARD_RIGHTS_REQUIRED or PRINTER_ACCESS_ADMINISTER or PRINTER_ACCESS_USE )
  PRINTER_READ* = ( STANDARD_RIGHTS_READ or PRINTER_ACCESS_USE )
  PRINTER_WRITE* = ( STANDARD_RIGHTS_WRITE or PRINTER_ACCESS_USE )
  PRINTER_EXECUTE* = ( STANDARD_RIGHTS_EXECUTE or PRINTER_ACCESS_USE )
  NO_PRIORITY* = 0
  MAX_PRIORITY* = 99
  MIN_PRIORITY* = 1
  DEF_PRIORITY* = 1
  PORT_TYPE_WRITE* = 1
  PORT_TYPE_READ* = 2
  PORT_TYPE_REDIRECTED* = 4
  PORT_TYPE_NET_ATTACHED* = 8
  SERVER_ACCESS_ADMINISTER* = 1
  SERVER_ACCESS_ENUMERATE* = 2
  SERVER_ALL_ACCESS* = ( STANDARD_RIGHTS_REQUIRED or SERVER_ACCESS_ADMINISTER or SERVER_ACCESS_ENUMERATE )
  SERVER_READ* = ( STANDARD_RIGHTS_READ or SERVER_ACCESS_ENUMERATE )
  SERVER_WRITE* = ( STANDARD_RIGHTS_WRITE or SERVER_ACCESS_ADMINISTER or SERVER_ACCESS_ENUMERATE )
  SERVER_EXECUTE* = ( STANDARD_RIGHTS_EXECUTE or SERVER_ACCESS_ENUMERATE )
  PORT_STATUS_TYPE_ERROR* = 1
  PORT_STATUS_TYPE_WARNING* = 2
  PORT_STATUS_TYPE_INFO* = 3
  PORT_STATUS_OFFLINE* = 1
  PORT_STATUS_PAPER_JAM* = 2
  PORT_STATUS_PAPER_OUT* = 3
  PORT_STATUS_OUTPUT_BIN_FULL* = 4
  PORT_STATUS_PAPER_PROBLEM* = 5
  PORT_STATUS_NO_TONER* = 6
  PORT_STATUS_DOOR_OPEN* = 7
  PORT_STATUS_USER_INTERVENTION* = 8
  PORT_STATUS_OUT_OF_MEMORY* = 9
  PORT_STATUS_TONER_LOW* = 10
  PORT_STATUS_WARMING_UP* = 11
  PORT_STATUS_POWER_SAVE* = 12

type
  ADDJOB_INFO_1A* {.final, pure.} = object
    Path*: LPSTR
    JobId*: DWORD
  PADDJOB_INFO_1A* = ptr ADDJOB_INFO_1A
  LPADDJOB_INFO_1A* = ptr ADDJOB_INFO_1A
  ADDJOB_INFO_1W* {.final, pure.} = object
    Path*: LPWSTR
    JobId*: DWORD
  PADDJOB_INFO_1W* = ptr ADDJOB_INFO_1W
  LPADDJOB_INFO_1W* = ptr ADDJOB_INFO_1W
  DATATYPES_INFO_1A* {.final, pure.} = object
    pName*: LPSTR
  PDATATYPES_INFO_1A* = ptr DATATYPES_INFO_1A
  LPDATATYPES_INFO_1A* = ptr DATATYPES_INFO_1A
  DATATYPES_INFO_1W* {.final, pure.} = object
    pName*: LPWSTR
  PDATATYPES_INFO_1W* = ptr DATATYPES_INFO_1W
  LPDATATYPES_INFO_1W* = ptr DATATYPES_INFO_1W
  JOB_INFO_1A* {.final, pure.} = object
    JobId*: DWORD
    pPrinterName*: LPSTR
    pMachineName*: LPSTR
    pUserName*: LPSTR
    pDocument*: LPSTR
    pDatatype*: LPSTR
    pStatus*: LPSTR
    Status*: DWORD
    Priority*: DWORD
    Position*: DWORD
    TotalPages*: DWORD
    PagesPrinted*: DWORD
    Submitted*: SYSTEMTIME
  PJOB_INFO_1A* = ptr JOB_INFO_1A
  LPJOB_INFO_1A* = ptr JOB_INFO_1A
  JOB_INFO_1W* {.final, pure.} = object
    JobId*: DWORD
    pPrinterName*: LPWSTR
    pMachineName*: LPWSTR
    pUserName*: LPWSTR
    pDocument*: LPWSTR
    pDatatype*: LPWSTR
    pStatus*: LPWSTR
    Status*: DWORD
    Priority*: DWORD
    Position*: DWORD
    TotalPages*: DWORD
    PagesPrinted*: DWORD
    Submitted*: SYSTEMTIME
  PJOB_INFO_1W* = ptr JOB_INFO_1W
  LPJOB_INFO_1W* = ptr JOB_INFO_1W
  JOB_INFO_2A* {.final, pure.} = object
    JobId*: DWORD
    pPrinterName*: LPSTR
    pMachineName*: LPSTR
    pUserName*: LPSTR
    pDocument*: LPSTR
    pNotifyName*: LPSTR
    pDatatype*: LPSTR
    pPrintProcessor*: LPSTR
    pParameters*: LPSTR
    pDriverName*: LPSTR
    pDevMode*: LPDEVMODEA
    pStatus*: LPSTR
    pSecurityDescriptor*: PSECURITY_DESCRIPTOR
    Status*: DWORD
    Priority*: DWORD
    Position*: DWORD
    StartTime*: DWORD
    UntilTime*: DWORD
    TotalPages*: DWORD
    Size*: DWORD
    Submitted*: SYSTEMTIME
    Time*: DWORD
    PagesPrinted*: DWORD
  PJOB_INFO_2A* = ptr JOB_INFO_2A
  LPJOB_INFO_2A* = ptr JOB_INFO_2A
  JOB_INFO_2W* {.final, pure.} = object
    JobId*: DWORD
    pPrinterName*: LPWSTR
    pMachineName*: LPWSTR
    pUserName*: LPWSTR
    pDocument*: LPWSTR
    pNotifyName*: LPWSTR
    pDatatype*: LPWSTR
    pPrintProcessor*: LPWSTR
    pParameters*: LPWSTR
    pDriverName*: LPWSTR
    pDevMode*: LPDEVMODEW
    pStatus*: LPWSTR
    pSecurityDescriptor*: PSECURITY_DESCRIPTOR
    Status*: DWORD
    Priority*: DWORD
    Position*: DWORD
    StartTime*: DWORD
    UntilTime*: DWORD
    TotalPages*: DWORD
    Size*: DWORD
    Submitted*: SYSTEMTIME
    Time*: DWORD
    PagesPrinted*: DWORD
  PJOB_INFO_2W* = ptr JOB_INFO_2W
  LPJOB_INFO_2W* = ptr JOB_INFO_2W
  DOC_INFO_1A* {.final, pure.} = object
    pDocName*: LPSTR
    pOutputFile*: LPSTR
    pDatatype*: LPSTR
  PDOC_INFO_1A* = ptr DOC_INFO_1A
  LPDOC_INFO_1A* = ptr DOC_INFO_1A
  DOC_INFO_1W* {.final, pure.} = object
    pDocName*: LPWSTR
    pOutputFile*: LPWSTR
    pDatatype*: LPWSTR
  PDOC_INFO_1W* = ptr DOC_INFO_1W
  LPDOC_INFO_1W* = ptr DOC_INFO_1W
  DOC_INFO_2A* {.final, pure.} = object
    pDocName*: LPSTR
    pOutputFile*: LPSTR
    pDatatype*: LPSTR
    dwMode*: DWORD
    JobId*: DWORD
  PDOC_INFO_2A* = ptr DOC_INFO_2A
  LPDOC_INFO_2A* = ptr DOC_INFO_2A
  DOC_INFO_2W* {.final, pure.} = object
    pDocName*: LPWSTR
    pOutputFile*: LPWSTR
    pDatatype*: LPWSTR
    dwMode*: DWORD
    JobId*: DWORD
  PDOC_INFO_2W* = ptr DOC_INFO_2W
  LPDOC_INFO_2W* = ptr DOC_INFO_2W
  DRIVER_INFO_1A* {.final, pure.} = object
    pName*: LPSTR
  PDRIVER_INFO_1A* = ptr DRIVER_INFO_1A
  LPDRIVER_INFO_1A* = ptr DRIVER_INFO_1A
  DRIVER_INFO_1W* {.final, pure.} = object
    pName*: LPWSTR
  PDRIVER_INFO_1W* = ptr DRIVER_INFO_1W
  LPDRIVER_INFO_1W* = ptr DRIVER_INFO_1W
  DRIVER_INFO_2A* {.final, pure.} = object
    cVersion*: DWORD
    pName*: LPSTR
    pEnvironment*: LPSTR
    pDriverPath*: LPSTR
    pDataFile*: LPSTR
    pConfigFile*: LPSTR
  PDRIVER_INFO_2A* = ptr DRIVER_INFO_2A
  LPDRIVER_INFO_2A* = ptr DRIVER_INFO_2A
  DRIVER_INFO_2W* {.final, pure.} = object
    cVersion*: DWORD
    pName*: LPWSTR
    pEnvironment*: LPWSTR
    pDriverPath*: LPWSTR
    pDataFile*: LPWSTR
    pConfigFile*: LPWSTR
  PDRIVER_INFO_2W* = ptr DRIVER_INFO_2W
  LPDRIVER_INFO_2W* = ptr DRIVER_INFO_2W
  DRIVER_INFO_3A* {.final, pure.} = object
    cVersion*: DWORD
    pName*: LPSTR
    pEnvironment*: LPSTR
    pDriverPath*: LPSTR
    pDataFile*: LPSTR
    pConfigFile*: LPSTR
    pHelpFile*: LPSTR
    pDependentFiles*: LPSTR
    pMonitorName*: LPSTR
    pDefaultDataType*: LPSTR
  PDRIVER_INFO_3A* = ptr DRIVER_INFO_3A
  LPDRIVER_INFO_3A* = ptr DRIVER_INFO_3A
  DRIVER_INFO_3W* {.final, pure.} = object
    cVersion*: DWORD
    pName*: LPWSTR
    pEnvironment*: LPWSTR
    pDriverPath*: LPWSTR
    pDataFile*: LPWSTR
    pConfigFile*: LPWSTR
    pHelpFile*: LPWSTR
    pDependentFiles*: LPWSTR
    pMonitorName*: LPWSTR
    pDefaultDataType*: LPWSTR
  PDRIVER_INFO_3W* = ptr DRIVER_INFO_3W
  LPDRIVER_INFO_3W* = ptr DRIVER_INFO_3W
  MONITOR_INFO_1A* {.final, pure.} = object
    pName*: LPSTR
  PMONITOR_INFO_1A* = ptr MONITOR_INFO_1A
  LPMONITOR_INFO_1A* = ptr MONITOR_INFO_1A
  MONITOR_INFO_1W* {.final, pure.} = object
    pName*: LPWSTR
  PMONITOR_INFO_1W* = ptr MONITOR_INFO_1W
  LPMONITOR_INFO_1W* = ptr MONITOR_INFO_1W
  PORT_INFO_1A* {.final, pure.} = object
    pName*: LPSTR
  PPORT_INFO_1A* = ptr PORT_INFO_1A
  LPPORT_INFO_1A* = ptr PORT_INFO_1A
  PORT_INFO_1W* {.final, pure.} = object
    pName*: LPWSTR
  PPORT_INFO_1W* = ptr PORT_INFO_1W
  LPPORT_INFO_1W* = ptr PORT_INFO_1W
  MONITOR_INFO_2A* {.final, pure.} = object
    pName*: LPSTR
    pEnvironment*: LPSTR
    pDLLName*: LPSTR
  PMONITOR_INFO_2A* = ptr MONITOR_INFO_2A
  LPMONITOR_INFO_2A* = ptr MONITOR_INFO_2A
  MONITOR_INFO_2W* {.final, pure.} = object
    pName*: LPWSTR
    pEnvironment*: LPWSTR
    pDLLName*: LPWSTR
  PMONITOR_INFO_2W* = ptr MONITOR_INFO_2W
  LPMONITOR_INFO_2W* = ptr MONITOR_INFO_2W
  PORT_INFO_2A* {.final, pure.} = object
    pPortName*: LPSTR
    pMonitorName*: LPSTR
    pDescription*: LPSTR
    fPortType*: DWORD
    Reserved*: DWORD
  PPORT_INFO_2A* = ptr PORT_INFO_2A
  LPPORT_INFO_2A* = ptr PORT_INFO_2A
  PORT_INFO_2W* {.final, pure.} = object
    pPortName*: LPWSTR
    pMonitorName*: LPWSTR
    pDescription*: LPWSTR
    fPortType*: DWORD
    Reserved*: DWORD
  PPORT_INFO_2W* = ptr PORT_INFO_2W
  LPPORT_INFO_2W* = ptr PORT_INFO_2W
  PORT_INFO_3A* {.final, pure.} = object
    dwStatus*: DWORD
    pszStatus*: LPSTR
    dwSeverity*: DWORD
  PPORT_INFO_3A* = ptr PORT_INFO_3A
  LPPORT_INFO_3A* = ptr PORT_INFO_3A
  PORT_INFO_3W* {.final, pure.} = object
    dwStatus*: DWORD
    pszStatus*: LPWSTR
    dwSeverity*: DWORD
  PPORT_INFO_3W* = ptr PORT_INFO_3W
  LPPORT_INFO_3W* = ptr PORT_INFO_3W
  PRINTER_INFO_1A* {.final, pure.} = object
    Flags*: DWORD
    pDescription*: LPSTR
    pName*: LPSTR
    pComment*: LPSTR
  PPRINTER_INFO_1A* = ptr PRINTER_INFO_1A
  LPPRINTER_INFO_1A* = ptr PRINTER_INFO_1A
  PRINTER_INFO_1W* {.final, pure.} = object
    Flags*: DWORD
    pDescription*: LPWSTR
    pName*: LPWSTR
    pComment*: LPWSTR
  PPRINTER_INFO_1W* = ptr PRINTER_INFO_1W
  LPPRINTER_INFO_1W* = ptr PRINTER_INFO_1W
  PRINTER_INFO_2A* {.final, pure.} = object
    pServerName*: LPSTR
    pPrinterName*: LPSTR
    pShareName*: LPSTR
    pPortName*: LPSTR
    pDriverName*: LPSTR
    pComment*: LPSTR
    pLocation*: LPSTR
    pDevMode*: LPDEVMODEA
    pSepFile*: LPSTR
    pPrintProcessor*: LPSTR
    pDatatype*: LPSTR
    pParameters*: LPSTR
    pSecurityDescriptor*: PSECURITY_DESCRIPTOR
    Attributes*: DWORD
    Priority*: DWORD
    DefaultPriority*: DWORD
    StartTime*: DWORD
    UntilTime*: DWORD
    Status*: DWORD
    cJobs*: DWORD
    AveragePPM*: DWORD
  PPRINTER_INFO_2A* = ptr PRINTER_INFO_2A
  LPPRINTER_INFO_2A* = ptr PRINTER_INFO_2A
  PRINTER_INFO_2W* {.final, pure.} = object
    pServerName*: LPWSTR
    pPrinterName*: LPWSTR
    pShareName*: LPWSTR
    pPortName*: LPWSTR
    pDriverName*: LPWSTR
    pComment*: LPWSTR
    pLocation*: LPWSTR
    pDevMode*: LPDEVMODEW
    pSepFile*: LPWSTR
    pPrintProcessor*: LPWSTR
    pDatatype*: LPWSTR
    pParameters*: LPWSTR
    pSecurityDescriptor*: PSECURITY_DESCRIPTOR
    Attributes*: DWORD
    Priority*: DWORD
    DefaultPriority*: DWORD
    StartTime*: DWORD
    UntilTime*: DWORD
    Status*: DWORD
    cJobs*: DWORD
    AveragePPM*: DWORD
  PPRINTER_INFO_2W* = ptr PRINTER_INFO_2W
  LPPRINTER_INFO_2W* = ptr PRINTER_INFO_2W
  PRINTER_INFO_3* {.final, pure.} = object
    pSecurityDescriptor*: PSECURITY_DESCRIPTOR
  PPRINTER_INFO_3* = ptr PRINTER_INFO_3
  LPPRINTER_INFO_3* = ptr PRINTER_INFO_3
  PRINTER_INFO_4A* {.final, pure.} = object
    pPrinterName*: LPSTR
    pServerName*: LPSTR
    Attributes*: DWORD
  PPRINTER_INFO_4A* = ptr PRINTER_INFO_4A
  LPPRINTER_INFO_4A* = ptr PRINTER_INFO_4A
  PRINTER_INFO_4W* {.final, pure.} = object
    pPrinterName*: LPWSTR
    pServerName*: LPWSTR
    Attributes*: DWORD
  PPRINTER_INFO_4W* = ptr PRINTER_INFO_4W
  LPPRINTER_INFO_4W* = ptr PRINTER_INFO_4W
  PRINTER_INFO_5A* {.final, pure.} = object
    pPrinterName*: LPSTR
    pPortName*: LPSTR
    Attributes*: DWORD
    DeviceNotSelectedTimeout*: DWORD
    TransmissionRetryTimeout*: DWORD
  PPRINTER_INFO_5A* = ptr PRINTER_INFO_5A
  LPPRINTER_INFO_5A* = ptr PRINTER_INFO_5A
  PRINTER_INFO_5W* {.final, pure.} = object
    pPrinterName*: LPWSTR
    pPortName*: LPWSTR
    Attributes*: DWORD
    DeviceNotSelectedTimeout*: DWORD
    TransmissionRetryTimeout*: DWORD
  PPRINTER_INFO_5W* = ptr PRINTER_INFO_5W
  LPPRINTER_INFO_5W* = ptr PRINTER_INFO_5W
  PRINTER_INFO_6* {.final, pure.} = object
    dwStatus*: DWORD
  PPRINTER_INFO_6* = ptr PRINTER_INFO_6
  LPPRINTER_INFO_6* = ptr PRINTER_INFO_6
  PRINTPROCESSOR_INFO_1A* {.final, pure.} = object
    pName*: LPSTR
  PPRINTPROCESSOR_INFO_1A* = ptr PRINTPROCESSOR_INFO_1A
  LPPRINTPROCESSOR_INFO_1A* = ptr PRINTPROCESSOR_INFO_1A
  PRINTPROCESSOR_INFO_1W* {.final, pure.} = object
    pName*: LPWSTR
  PPRINTPROCESSOR_INFO_1W* = ptr PRINTPROCESSOR_INFO_1W
  LPPRINTPROCESSOR_INFO_1W* = ptr PRINTPROCESSOR_INFO_1W
  PRINTER_NOTIFY_INFO_DATA_NotifyData_Data* {.final, pure.} = object
    cbBuf*: DWORD
    pBuf*: PVOID
  PRINTER_NOTIFY_INFO_DATA_NotifyData* {.final, union, pure.} = object
    adwData*: array[2, DWORD]
    Data*: PRINTER_NOTIFY_INFO_DATA_NotifyData_Data
  PRINTER_NOTIFY_INFO_DATA* {.final, pure.} = object
    Type*: WORD
    Field*: WORD
    Reserved*: DWORD
    Id*: DWORD
  PPRINTER_NOTIFY_INFO_DATA* = ptr PRINTER_NOTIFY_INFO_DATA
  LPPRINTER_NOTIFY_INFO_DATA* = ptr PRINTER_NOTIFY_INFO_DATA
  PRINTER_NOTIFY_INFO* {.final, pure.} = object
    Version*: DWORD
    Flags*: DWORD
    Count*: DWORD
    aData*: array[1, PRINTER_NOTIFY_INFO_DATA]
  PPRINTER_NOTIFY_INFO* = ptr PRINTER_NOTIFY_INFO
  LPPRINTER_NOTIFY_INFO* = ptr PRINTER_NOTIFY_INFO
  FORM_INFO_1A* {.final, pure.} = object
    Flags*: DWORD
    pName*: LPSTR
    Size*: SIZEL
    ImageableArea*: RECTL
  PFORM_INFO_1A* = ptr FORM_INFO_1A
  LPFORM_INFO_1A* = ptr FORM_INFO_1A
  FORM_INFO_1W* {.final, pure.} = object
    Flags*: DWORD
    pName*: LPWSTR
    Size*: SIZEL
    ImageableArea*: RECTL
  PFORM_INFO_1W* = ptr FORM_INFO_1W
  LPFORM_INFO_1W* = ptr FORM_INFO_1W
  PRINTER_DEFAULTSA* {.final, pure.} = object
    pDatatype*: LPSTR
    pDevMode*: LPDEVMODE
    DesiredAccess*: ACCESS_MASK
  PPRINTER_DEFAULTSA* = ptr PRINTER_DEFAULTSA
  LPPRINTER_DEFAULTSA* = ptr PRINTER_DEFAULTSA
  PRINTER_DEFAULTSW* {.final, pure.} = object
    pDatatype*: LPWSTR
    pDevMode*: LPDEVMODE
    DesiredAccess*: ACCESS_MASK
  PPRINTER_DEFAULTSW* = ptr PRINTER_DEFAULTSW
  LPPRINTER_DEFAULTSW* = ptr PRINTER_DEFAULTSW

proc AbortPrinter*(P1: HANDLE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddFormA*(P1: HANDLE, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddFormW*(P1: HANDLE, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddJobA*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddJobW*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddMonitorA*(P1: LPSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddMonitorW*(P1: LPWSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPortA*(P1: LPSTR, P2: HWND, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPortW*(P1: LPWSTR, P2: HWND, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrinterA*(P1: LPSTR, P2: DWORD, P3: PBYTE): HANDLE {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrinterW*(P1: LPWSTR, P2: DWORD, P3: PBYTE): HANDLE {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrinterConnectionA*(P1: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrinterConnectionW*(P1: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrinterDriverA*(P1: LPSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrinterDriverW*(P1: LPWSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrintProcessorA*(P1: LPSTR, P2: LPSTR, P3: LPSTR, P4: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrintProcessorW*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR, P4: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrintProvidorA*(P1: LPSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrintProvidorW*(P1: LPWSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AdvancedDocumentPropertiesA*(P1: HWND, P2: HANDLE, P3: LPSTR, P4: PDEVMODE, P5: PDEVMODEA): LONG {.winapi, dynlib: "winspool.drv", importc.}
proc AdvancedDocumentPropertiesW*(P1: HWND, P2: HANDLE, P3: LPWSTR, P4: PDEVMODE, P5: PDEVMODEW): LONG {.winapi, dynlib: "winspool.drv", importc.}
proc ClosePrinter*(P1: HANDLE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc ConfigurePortA*(P1: LPSTR, P2: HWND, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc ConfigurePortW*(P1: LPWSTR, P2: HWND, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc ConnectToPrinterDlg*(P1: HWND, P2: DWORD): HANDLE {.winapi, dynlib: "winspool.drv", importc.}
proc DeleteFormA*(P1: HANDLE, P2: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeleteFormW*(P1: HANDLE, P2: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeleteMonitorA*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeleteMonitorW*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePortA*(P1: LPSTR, P2: HWND, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePortW*(P1: LPWSTR, P2: HWND, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrinter*(P1: HANDLE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrinterConnectionA*(P1: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrinterConnectionW*(P1: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrinterDataA*(P1: HANDLE, P2: LPSTR): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrinterDataW*(P1: HANDLE, P2: LPWSTR): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrinterDriverA*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrinterDriverW*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrintProcessorA*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrintProcessorW*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrintProvidorA*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrintProvidorW*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DocumentPropertiesA*(P1: HWND, P2: HANDLE, P3: LPSTR, P4: PDEVMODEA, P5: PDEVMODEA, P6: DWORD): LONG {.winapi, dynlib: "winspool.drv", importc.}
proc DocumentPropertiesW*(P1: HWND, P2: HANDLE, P3: LPWSTR, P4: PDEVMODEW, P5: PDEVMODEW, P6: DWORD): LONG {.winapi, dynlib: "winspool.drv", importc.}
proc EndDocPrinter*(P1: HANDLE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EndPagePrinter*(P1: HANDLE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumFormsA*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumFormsW*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumJobsA*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumJobsW*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumMonitorsA*(P1: LPSTR, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumMonitorsW*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPortsA*(P1: LPSTR, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPortsW*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrinterDataA*(P1: HANDLE, P2: DWORD, P3: LPSTR, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PBYTE, P8: DWORD, P9: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrinterDataW*(P1: HANDLE, P2: DWORD, P3: LPWSTR, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PBYTE, P8: DWORD, P9: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrinterDriversA*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrinterDriversW*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrintersA*(P1: DWORD, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrintersW*(P1: DWORD, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrintProcessorDatatypesA*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrintProcessorDatatypesW*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrintProcessorsA*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrintProcessorsW*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc FindClosePrinterChangeNotification*(P1: HANDLE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc FindFirstPrinterChangeNotification*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PVOID): HANDLE {.winapi, dynlib: "winspool.drv", importc.}
proc FindNextPrinterChangeNotification*(P1: HANDLE, P2: PDWORD, P3: PVOID, P4: ptr PVOID): HANDLE {.winapi, dynlib: "winspool.drv", importc.}
proc FreePrinterNotifyInfo*(P1: PPRINTER_NOTIFY_INFO): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc GetDefaultPrinterA*(P1: LPSTR, P2: LPDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc GetDefaultPrinterW*(P1: LPWSTR, P2: LPDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc GetFormA*(P1: HANDLE, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc GetFormW*(P1: HANDLE, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc GetJobA*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc GetJobW*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrinterA*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrinterW*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrinterDataA*(P1: HANDLE, P2: LPSTR, P3: PDWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrinterDataW*(P1: HANDLE, P2: LPWSTR, P3: PDWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrinterDriverA*(P1: HANDLE, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrinterDriverW*(P1: HANDLE, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrinterDriverDirectoryA*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrinterDriverDirectoryW*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrintProcessorDirectoryA*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrintProcessorDirectoryW*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc OpenPrinterA*(P1: LPSTR, P2: PHANDLE, P3: LPPRINTER_DEFAULTSA): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc OpenPrinterW*(P1: LPWSTR, P2: PHANDLE, P3: LPPRINTER_DEFAULTSW): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc PrinterMessageBoxA*(P1: HANDLE, P2: DWORD, P3: HWND, P4: LPSTR, P5: LPSTR, P6: DWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc PrinterMessageBoxW*(P1: HANDLE, P2: DWORD, P3: HWND, P4: LPWSTR, P5: LPWSTR, P6: DWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc PrinterProperties*(P1: HWND, P2: HANDLE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc ReadPrinter*(P1: HANDLE, P2: PVOID, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc ResetPrinterA*(P1: HANDLE, P2: LPPRINTER_DEFAULTSA): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc ResetPrinterW*(P1: HANDLE, P2: LPPRINTER_DEFAULTSW): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc ScheduleJob*(P1: HANDLE, P2: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc SetFormA*(P1: HANDLE, P2: LPSTR, P3: DWORD, P4: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc SetFormW*(P1: HANDLE, P2: LPWSTR, P3: DWORD, P4: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc SetJobA*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PBYTE, P5: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc SetJobW*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PBYTE, P5: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc SetPrinterA*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc SetPrinterW*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc SetPrinterDataA*(P1: HANDLE, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc SetPrinterDataW*(P1: HANDLE, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc StartDocPrinterA*(P1: HANDLE, P2: DWORD, P3: PBYTE): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc StartDocPrinterW*(P1: HANDLE, P2: DWORD, P3: PBYTE): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc StartPagePrinter*(P1: HANDLE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc WaitForPrinterChange*(P1: HANDLE, P2: DWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc WritePrinter*(P1: HANDLE, P2: PVOID, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}

when not defined(winansi):
  type
    JOB_INFO_1* = JOB_INFO_1W
    JOB_INFO_2* = JOB_INFO_2W
    ADDJOB_INFO_1* = ADDJOB_INFO_1W
    DATATYPES_INFO_1* = DATATYPES_INFO_1W
    MONITOR_INFO_1* = MONITOR_INFO_1W
    MONITOR_INFO_2* = MONITOR_INFO_2W
    DOC_INFO_1* = DOC_INFO_1W
    DOC_INFO_2* = DOC_INFO_2W
    PORT_INFO_1* = PORT_INFO_1W
    PORT_INFO_2* = PORT_INFO_2W
    PORT_INFO_3* = PORT_INFO_3W
    DRIVER_INFO_2* = DRIVER_INFO_2W
    PRINTER_INFO_1* = PRINTER_INFO_1W
    PRINTER_INFO_2* = PRINTER_INFO_2W
    PRINTER_INFO_4* = PRINTER_INFO_4W
    PRINTER_INFO_5* = PRINTER_INFO_5W
    PRINTPROCESSOR_INFO_1* = PRINTPROCESSOR_INFO_1W
    FORM_INFO_1* = FORM_INFO_1W
    PRINTER_DEFAULTS* = PRINTER_DEFAULTSW

  proc AddForm*(P1: HANDLE, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddFormW".}
  proc AddJob*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddJobW".}
  proc AddMonitor*(P1: LPWSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddMonitorW".}
  proc AddPort*(P1: LPWSTR, P2: HWND, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPortW".}
  proc AddPrinter*(P1: LPWSTR, P2: DWORD, P3: PBYTE): HANDLE {.winapi, dynlib: "winspool.drv", importc: "AddPrinterW".}
  proc AddPrinterConnection*(P1: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPrinterConnectionW".}
  proc AddPrinterDriver*(P1: LPWSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPrinterDriverW".}
  proc AddPrintProcessor*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR, P4: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPrintProcessorW".}
  proc AddPrintProvidor*(P1: LPWSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPrintProvidorW".}
  proc AdvancedDocumentProperties*(P1: HWND, P2: HANDLE, P3: LPWSTR, P4: PDEVMODE, P5: PDEVMODEW): LONG {.winapi, dynlib: "winspool.drv", importc: "AdvancedDocumentPropertiesW".}
  proc ConfigurePort*(P1: LPWSTR, P2: HWND, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "ConfigurePortW".}
  proc DeleteForm*(P1: HANDLE, P2: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeleteFormW".}
  proc DeleteMonitor*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeleteMonitorW".}
  proc DeletePort*(P1: LPWSTR, P2: HWND, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePortW".}
  proc DeletePrinterConnection*(P1: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePrinterConnectionW".}
  proc DeletePrinterData*(P1: HANDLE, P2: LPWSTR): DWORD {.winapi, dynlib: "winspool.drv", importc: "DeletePrinterDataW".}
  proc DeletePrinterDriver*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePrinterDriverW".}
  proc DeletePrintProcessor*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePrintProcessorW".}
  proc DeletePrintProvidor*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePrintProvidorW".}
  proc DocumentProperties*(P1: HWND, P2: HANDLE, P3: LPWSTR, P4: PDEVMODEW, P5: PDEVMODEW, P6: DWORD): LONG {.winapi, dynlib: "winspool.drv", importc: "DocumentPropertiesW".}
  proc EnumForms*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumFormsW".}
  proc EnumJobs*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumJobsW".}
  proc EnumMonitors*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumMonitorsW".}
  proc EnumPorts*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPortsW".}
  proc EnumPrinterData*(P1: HANDLE, P2: DWORD, P3: LPWSTR, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PBYTE, P8: DWORD, P9: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "EnumPrinterDataW".}
  proc EnumPrinterDrivers*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPrinterDriversW".}
  proc EnumPrinters*(P1: DWORD, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPrintersW".}
  proc EnumPrintProcessorDatatypes*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPrintProcessorDatatypesW".}
  proc EnumPrintProcessors*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPrintProcessorsW".}
  proc GetDefaultPrinter*(P1: LPWSTR, P2: LPDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "GetDefaultPrinterW".}
  proc GetForm*(P1: HANDLE, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "GetFormW".}
  proc GetJob*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "GetJobW".}
  proc GetPrinter*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "GetPrinterW".}
  proc GetPrinterData*(P1: HANDLE, P2: LPWSTR, P3: PDWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "GetPrinterDataW".}
  proc GetPrinterDriver*(P1: HANDLE, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "GetPrinterDriverW".}
  proc GetPrinterDriverDirectory*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "GetPrinterDriverDirectoryW".}
  proc GetPrintProcessorDirectory*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "GetPrintProcessorDirectoryW".}
  proc OpenPrinter*(P1: LPWSTR, P2: PHANDLE, P3: LPPRINTER_DEFAULTSW): BOOL {.winapi, dynlib: "winspool.drv", importc: "OpenPrinterW".}
  proc PrinterMessageBox*(P1: HANDLE, P2: DWORD, P3: HWND, P4: LPWSTR, P5: LPWSTR, P6: DWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "PrinterMessageBoxW".}
  proc ResetPrinter*(P1: HANDLE, P2: LPPRINTER_DEFAULTSW): BOOL {.winapi, dynlib: "winspool.drv", importc: "ResetPrinterW".}
  proc SetForm*(P1: HANDLE, P2: LPWSTR, P3: DWORD, P4: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "SetFormW".}
  proc SetJob*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PBYTE, P5: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "SetJobW".}
  proc SetPrinter*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "SetPrinterW".}
  proc SetPrinterData*(P1: HANDLE, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "SetPrinterDataW".}
  proc StartDocPrinter*(P1: HANDLE, P2: DWORD, P3: PBYTE): DWORD {.winapi, dynlib: "winspool.drv", importc: "StartDocPrinterW".}

else:
  type
    JOB_INFO_1* = JOB_INFO_1A
    JOB_INFO_2* = JOB_INFO_2A
    ADDJOB_INFO_1* = ADDJOB_INFO_1A
    DATATYPES_INFO_1* = DATATYPES_INFO_1A
    MONITOR_INFO_1* = MONITOR_INFO_1A
    MONITOR_INFO_2* = MONITOR_INFO_2A
    DOC_INFO_1* = DOC_INFO_1A
    DOC_INFO_2* = DOC_INFO_2A
    PORT_INFO_1* = PORT_INFO_1A
    PORT_INFO_2* = PORT_INFO_2A
    PORT_INFO_3* = PORT_INFO_3A
    DRIVER_INFO_2* = DRIVER_INFO_2A
    PRINTER_INFO_1* = PRINTER_INFO_1A
    PRINTER_INFO_2* = PRINTER_INFO_2A
    PRINTER_INFO_4* = PRINTER_INFO_4A
    PRINTER_INFO_5* = PRINTER_INFO_5A
    PRINTPROCESSOR_INFO_1* = PRINTPROCESSOR_INFO_1A
    FORM_INFO_1* = FORM_INFO_1A
    PRINTER_DEFAULTS* = PRINTER_DEFAULTSA

  proc AddForm*(P1: HANDLE, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddFormA".}
  proc AddJob*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddJobA".}
  proc AddMonitor*(P1: LPSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddMonitorA".}
  proc AddPort*(P1: LPSTR, P2: HWND, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPortA".}
  proc AddPrinter*(P1: LPSTR, P2: DWORD, P3: PBYTE): HANDLE {.winapi, dynlib: "winspool.drv", importc: "AddPrinterA".}
  proc AddPrinterConnection*(P1: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPrinterConnectionA".}
  proc AddPrinterDriver*(P1: LPSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPrinterDriverA".}
  proc AddPrintProcessor*(P1: LPSTR, P2: LPSTR, P3: LPSTR, P4: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPrintProcessorA".}
  proc AddPrintProvidor*(P1: LPSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPrintProvidorA".}
  proc AdvancedDocumentProperties*(P1: HWND, P2: HANDLE, P3: LPSTR, P4: PDEVMODE, P5: PDEVMODEA): LONG {.winapi, dynlib: "winspool.drv", importc: "AdvancedDocumentPropertiesA".}
  proc ConfigurePort*(P1: LPSTR, P2: HWND, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "ConfigurePortA".}
  proc DeleteForm*(P1: HANDLE, P2: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeleteFormA".}
  proc DeleteMonitor*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeleteMonitorA".}
  proc DeletePort*(P1: LPSTR, P2: HWND, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePortA".}
  proc DeletePrinterConnection*(P1: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePrinterConnectionA".}
  proc DeletePrinterData*(P1: HANDLE, P2: LPSTR): DWORD {.winapi, dynlib: "winspool.drv", importc: "DeletePrinterDataA".}
  proc DeletePrinterDriver*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePrinterDriverA".}
  proc DeletePrintProcessor*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePrintProcessorA".}
  proc DeletePrintProvidor*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePrintProvidorA".}
  proc DocumentProperties*(P1: HWND, P2: HANDLE, P3: LPSTR, P4: PDEVMODEA, P5: PDEVMODEA, P6: DWORD): LONG {.winapi, dynlib: "winspool.drv", importc: "DocumentPropertiesA".}
  proc EnumForms*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumFormsA".}
  proc EnumJobs*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumJobsA".}
  proc EnumMonitors*(P1: LPSTR, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumMonitorsA".}
  proc EnumPorts*(P1: LPSTR, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPortsA".}
  proc EnumPrinterData*(P1: HANDLE, P2: DWORD, P3: LPSTR, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PBYTE, P8: DWORD, P9: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "EnumPrinterDataA".}
  proc EnumPrinterDrivers*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPrinterDriversA".}
  proc EnumPrinters*(P1: DWORD, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPrintersA".}
  proc EnumPrintProcessorDatatypes*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPrintProcessorDatatypesA".}
  proc EnumPrintProcessors*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPrintProcessorsA".}
  proc GetDefaultPrinter*(P1: LPSTR, P2: LPDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "GetDefaultPrinterA".}
  proc GetForm*(P1: HANDLE, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "GetFormA".}
  proc GetJob*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "GetJobA".}
  proc GetPrinter*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "GetPrinterA".}
  proc GetPrinterData*(P1: HANDLE, P2: LPSTR, P3: PDWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "GetPrinterDataA".}
  proc GetPrinterDriver*(P1: HANDLE, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "GetPrinterDriverA".}
  proc GetPrinterDriverDirectory*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "GetPrinterDriverDirectoryA".}
  proc GetPrintProcessorDirectory*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "GetPrintProcessorDirectoryA".}
  proc OpenPrinter*(P1: LPSTR, P2: PHANDLE, P3: LPPRINTER_DEFAULTSA): BOOL {.winapi, dynlib: "winspool.drv", importc: "OpenPrinterA".}
  proc PrinterMessageBox*(P1: HANDLE, P2: DWORD, P3: HWND, P4: LPSTR, P5: LPSTR, P6: DWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "PrinterMessageBoxA".}
  proc ResetPrinter*(P1: HANDLE, P2: LPPRINTER_DEFAULTSA): BOOL {.winapi, dynlib: "winspool.drv", importc: "ResetPrinterA".}
  proc SetForm*(P1: HANDLE, P2: LPSTR, P3: DWORD, P4: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "SetFormA".}
  proc SetJob*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PBYTE, P5: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "SetJobA".}
  proc SetPrinter*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "SetPrinterA".}
  proc SetPrinterData*(P1: HANDLE, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "SetPrinterDataA".}
  proc StartDocPrinter*(P1: HANDLE, P2: DWORD, P3: PBYTE): DWORD {.winapi, dynlib: "winspool.drv", importc: "StartDocPrinterA".}

type
  PJOB_INFO_1* = ptr JOB_INFO_1
  LPJOB_INFO_1* = ptr JOB_INFO_1
  PJOB_INFO_2* = ptr JOB_INFO_2
  LPJOB_INFO_2* = ptr JOB_INFO_2
  PADDJOB_INFO_1* = ptr ADDJOB_INFO_1
  LPADDJOB_INFO_1* = ptr ADDJOB_INFO_1
  PDATATYPES_INFO_1* = ptr DATATYPES_INFO_1
  LPDATATYPES_INFO_1* = ptr DATATYPES_INFO_1
  PMONITOR_INFO_1* = ptr MONITOR_INFO_1
  LPMONITOR_INFO_1* = ptr MONITOR_INFO_1
  PMONITOR_INFO_2* = ptr MONITOR_INFO_2
  LPMONITOR_INFO_2* = ptr MONITOR_INFO_2
  PDOC_INFO_1* = ptr DOC_INFO_1
  LPDOC_INFO_1* = ptr DOC_INFO_1
  PDOC_INFO_2* = ptr DOC_INFO_2
  LPDOC_INFO_2* = ptr DOC_INFO_2
  PPORT_INFO_1* = ptr PORT_INFO_1
  LPPORT_INFO_1* = ptr PORT_INFO_1
  PPORT_INFO_2* = ptr PORT_INFO_2
  LPPORT_INFO_2* = ptr PORT_INFO_2
  PPORT_INFO_3* = ptr PORT_INFO_3
  LPPORT_INFO_3* = ptr PORT_INFO_3
  PDRIVER_INFO_2* = ptr DRIVER_INFO_2
  LPDRIVER_INFO_2* = ptr DRIVER_INFO_2
  PPRINTER_INFO_1* = ptr PRINTER_INFO_1
  LPPRINTER_INFO_1* = ptr PRINTER_INFO_1
  PPRINTER_INFO_2* = ptr PRINTER_INFO_2
  LPPRINTER_INFO_2* = ptr PRINTER_INFO_2
  PPRINTER_INFO_4* = ptr PRINTER_INFO_4
  LPPRINTER_INFO_4* = ptr PRINTER_INFO_4
  PPRINTER_INFO_5* = ptr PRINTER_INFO_5
  LPPRINTER_INFO_5* = ptr PRINTER_INFO_5
  PPRINTPROCESSOR_INFO_1* = ptr PRINTPROCESSOR_INFO_1
  LPPRINTPROCESSOR_INFO_1* = ptr PRINTPROCESSOR_INFO_1
  PFORM_INFO_1* = ptr FORM_INFO_1
  LPFORM_INFO_1* = ptr FORM_INFO_1
  PPRINTER_DEFAULTS* = ptr PRINTER_DEFAULTS
  LPPRINTER_DEFAULTS* = ptr PRINTER_DEFAULTS


# net/wininet.nim
const
  # INTERNET_SCHEME* = enum
  INTERNET_SCHEME_PARTIAL* = -2
  INTERNET_SCHEME_UNKNOWN* = -1
  INTERNET_SCHEME_DEFAULT* = 0
  INTERNET_SCHEME_FTP* = 1
  INTERNET_SCHEME_GOPHER* = 2
  INTERNET_SCHEME_HTTP* = 3
  INTERNET_SCHEME_HTTPS* = 4
  INTERNET_SCHEME_FILE* = 5
  INTERNET_SCHEME_NEWS* = 6
  INTERNET_SCHEME_MAILTO* = 7
  INTERNET_SCHEME_SOCKS* = 8

type
  HINTERNET* = HANDLE
  INTERNET_STATUS_CALLBACK* = proc (P1: HINTERNET, P2: DWORD, P3: DWORD, P4: PVOID, P5: DWORD): void {.stdcall.}

const
  INTERNET_INVALID_PORT_NUMBER* = 0
  INTERNET_DEFAULT_FTP_PORT* = 21
  INTERNET_DEFAULT_GOPHER_PORT* = 70
  INTERNET_DEFAULT_HTTP_PORT* = 80
  INTERNET_DEFAULT_HTTPS_PORT* = 443
  INTERNET_DEFAULT_SOCKS_PORT* = 1080
  MAX_CACHE_ENTRY_INFO_SIZE* = 4096
  INTERNET_MAX_HOST_NAME_LENGTH* = 256
  INTERNET_MAX_USER_NAME_LENGTH* = 128
  INTERNET_MAX_PASSWORD_LENGTH* = 128
  INTERNET_MAX_PORT_NUMBER_LENGTH* = 5
  INTERNET_MAX_PORT_NUMBER_VALUE* = 65535
  INTERNET_MAX_PATH_LENGTH* = 2048
  INTERNET_MAX_SCHEME_LENGTH* = 32
  INTERNET_MAX_URL_LENGTH* = (INTERNET_MAX_SCHEME_LENGTH + "://".len + INTERNET_MAX_PATH_LENGTH).SIZE_T
  INTERNET_KEEP_ALIVE_UNKNOWN* = DWORD.high
  INTERNET_KEEP_ALIVE_DISABLED* = 0
  INTERNET_KEEP_ALIVE_ENABLED* = 1
  INTERNET_REQFLAG_FROM_CACHE* = 1
  INTERNET_REQFLAG_ASYNC* = 2
  INTERNET_FLAG_RELOAD* = 0x80000000'u32
  INTERNET_FLAG_RAW_DATA* = 0x40000000
  INTERNET_FLAG_EXISTING_CONNECT* = 0x20000000
  INTERNET_FLAG_ASYNC* = 0x10000000
  INTERNET_FLAG_PASSIVE* = 0x08000000
  INTERNET_FLAG_NO_CACHE_WRITE* = 0x04000000
  INTERNET_FLAG_DONT_CACHE* = INTERNET_FLAG_NO_CACHE_WRITE.DWORD
  INTERNET_FLAG_MAKE_PERSISTENT* = 0x02000000
  INTERNET_FLAG_OFFLINE* = 0x01000000
  INTERNET_FLAG_SECURE* = 0x00800000
  INTERNET_FLAG_KEEP_CONNECTION* = 0x00400000
  INTERNET_FLAG_NO_AUTO_REDIRECT* = 0x00200000
  INTERNET_FLAG_READ_PREFETCH* = 0x00100000
  INTERNET_FLAG_NO_COOKIES* = 0x00080000
  INTERNET_FLAG_NO_AUTH* = 0x00040000
  INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP* = 0x00008000
  INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS* = 0x00004000
  INTERNET_FLAG_IGNORE_CERT_DATE_INVALID* = 0x00002000
  INTERNET_FLAG_IGNORE_CERT_CN_INVALID* = 0x00001000
  INTERNET_FLAG_RESYNCHRONIZE* = 0x00000800
  INTERNET_FLAG_HYPERLINK* = 0x00000400
  INTERNET_FLAG_NO_UI* = 0x00000200
  INTERNET_FLAG_PRAGMA_NOCACHE* = 0x00000100
  INTERNET_FLAG_MUST_CACHE_REQUEST* = 0x00000010
  INTERNET_FLAG_TRANSFER_ASCII* = 1
  INTERNET_FLAG_TRANSFER_BINARY* = 2
  SECURITY_INTERNET_MASK* = 0x0000F000
  SECURITY_SET_MASK* = SECURITY_INTERNET_MASK.DWORD
  INTERNET_FLAGS_MASK* = 0xFFFCFE13'u32
  INTERNET_OPTIONS_MASK* = (not INTERNET_FLAGS_MASK).DWORD
  INTERNET_NO_CALLBACK* = 0
  INTERNET_RFC1123_FORMAT* = 0
  INTERNET_RFC1123_BUFSIZE* = 30
  ICU_ESCAPE* = 0x80000000'u32
  ICU_USERNAME* = 0x40000000
  ICU_NO_ENCODE* = 0x20000000
  ICU_DECODE* = 0x10000000
  ICU_NO_META* = 0x08000000
  ICU_ENCODE_SPACES_ONLY* = 0x04000000
  ICU_BROWSER_MODE* = 0x02000000
  INTERNET_OPEN_TYPE_PRECONFIG* = 0
  INTERNET_OPEN_TYPE_DIRECT* = 1
  INTERNET_OPEN_TYPE_PROXY* = 3
  PRE_CONFIG_INTERNET_ACCESS* = INTERNET_OPEN_TYPE_PRECONFIG
  LOCAL_INTERNET_ACCESS* = INTERNET_OPEN_TYPE_DIRECT
  GATEWAY_INTERNET_ACCESS* = 2
  CERN_PROXY_INTERNET_ACCESS* = INTERNET_OPEN_TYPE_PROXY
  ISO_GLOBAL* = 1
  ISO_REGISTRY* = 2
  ISO_VALID_FLAGS* = ISO_GLOBAL or ISO_REGISTRY
  INTERNET_OPTION_CALLBACK* = 1
  INTERNET_OPTION_CONNECT_TIMEOUT* = 2
  INTERNET_OPTION_CONNECT_RETRIES* = 3
  INTERNET_OPTION_CONNECT_BACKOFF* = 4
  INTERNET_OPTION_SEND_TIMEOUT* = 5
  INTERNET_OPTION_CONTROL_SEND_TIMEOUT* = INTERNET_OPTION_SEND_TIMEOUT
  INTERNET_OPTION_RECEIVE_TIMEOUT* = INTERNET_OPTION_SEND_TIMEOUT + 1
  INTERNET_OPTION_CONTROL_RECEIVE_TIMEOUT* = INTERNET_OPTION_RECEIVE_TIMEOUT
  INTERNET_OPTION_DATA_SEND_TIMEOUT* = INTERNET_OPTION_RECEIVE_TIMEOUT + 1
  INTERNET_OPTION_DATA_RECEIVE_TIMEOUT* = INTERNET_OPTION_RECEIVE_TIMEOUT + 2
  INTERNET_OPTION_HANDLE_TYPE* = INTERNET_OPTION_RECEIVE_TIMEOUT + 3
  INTERNET_OPTION_CONTEXT_VALUE* = INTERNET_OPTION_RECEIVE_TIMEOUT + 4
  INTERNET_OPTION_LISTEN_TIMEOUT* = INTERNET_OPTION_RECEIVE_TIMEOUT + 5
  INTERNET_OPTION_READ_BUFFER_SIZE* = INTERNET_OPTION_RECEIVE_TIMEOUT + 6
  INTERNET_OPTION_WRITE_BUFFER_SIZE* = INTERNET_OPTION_RECEIVE_TIMEOUT + 7
  INTERNET_OPTION_ASYNC_ID* = 15
  INTERNET_OPTION_ASYNC_PRIORITY* = 16
  INTERNET_OPTION_PARENT_HANDLE* = 21
  INTERNET_OPTION_KEEP_CONNECTION* = 22
  INTERNET_OPTION_REQUEST_FLAGS* = 23
  INTERNET_OPTION_EXTENDED_ERROR* = 24
  INTERNET_OPTION_OFFLINE_MODE* = 26
  INTERNET_OPTION_CACHE_STREAM_HANDLE* = 27
  INTERNET_OPTION_USERNAME* = 28
  INTERNET_OPTION_PASSWORD* = 29
  INTERNET_OPTION_ASYNC* = 30
  INTERNET_OPTION_SECURITY_FLAGS* = 31
  INTERNET_OPTION_SECURITY_CERTIFICATE_STRUCT* = 32
  INTERNET_OPTION_DATAFILE_NAME* = 33
  INTERNET_OPTION_URL* = 34
  INTERNET_OPTION_SECURITY_CERTIFICATE* = 35
  INTERNET_OPTION_SECURITY_KEY_BITNESS* = 36
  INTERNET_OPTION_REFRESH* = 37
  INTERNET_OPTION_PROXY* = 38
  INTERNET_OPTION_SETTINGS_CHANGED* = 39
  INTERNET_OPTION_VERSION* = 40
  INTERNET_OPTION_USER_AGENT* = 41
  INTERNET_OPTION_END_BROWSER_SESSION* = 42
  INTERNET_OPTION_PROXY_USERNAME* = 43
  INTERNET_OPTION_PROXY_PASSWORD* = 44
  INTERNET_FIRST_OPTION* = INTERNET_OPTION_CALLBACK
  INTERNET_LAST_OPTION* = INTERNET_OPTION_USER_AGENT
  INTERNET_PRIORITY_FOREGROUND* = 1000
  INTERNET_HANDLE_TYPE_INTERNET* = 1
  INTERNET_HANDLE_TYPE_CONNECT_FTP* = 2
  INTERNET_HANDLE_TYPE_CONNECT_GOPHER* = 3
  INTERNET_HANDLE_TYPE_CONNECT_HTTP* = 4
  INTERNET_HANDLE_TYPE_FTP_FIND* = 5
  INTERNET_HANDLE_TYPE_FTP_FIND_HTML* = 6
  INTERNET_HANDLE_TYPE_FTP_FILE* = 7
  INTERNET_HANDLE_TYPE_FTP_FILE_HTML* = 8
  INTERNET_HANDLE_TYPE_GOPHER_FIND* = 9
  INTERNET_HANDLE_TYPE_GOPHER_FIND_HTML* = 10
  INTERNET_HANDLE_TYPE_GOPHER_FILE* = 11
  INTERNET_HANDLE_TYPE_GOPHER_FILE_HTML* = 12
  INTERNET_HANDLE_TYPE_HTTP_REQUEST* = 13
  SECURITY_FLAG_SECURE* = 0x00000001
  SECURITY_FLAG_SSL* = 0x00000002
  SECURITY_FLAG_SSL3* = 0x00000004
  SECURITY_FLAG_PCT* = 0x00000008
  SECURITY_FLAG_PCT4* = 0x00000010
  SECURITY_FLAG_IETFSSL4* = 0x00000020
  SECURITY_FLAG_IGNORE_REVOCATION* = 0x00000080
  SECURITY_FLAG_IGNORE_UNKNOWN_CA* = 0x00000100
  SECURITY_FLAG_IGNORE_WRONG_USAGE* = 0x00000200
  SECURITY_FLAG_40BIT* = 0x10000000
  SECURITY_FLAG_128BIT* = 0x20000000
  SECURITY_FLAG_56BIT* = 0x40000000
  SECURITY_FLAG_UNKNOWNBIT* = 0x80000000'u32
  SECURITY_FLAG_NORMALBITNESS* = SECURITY_FLAG_40BIT.DWORD
  SECURITY_FLAG_IGNORE_CERT_CN_INVALID* = INTERNET_FLAG_IGNORE_CERT_CN_INVALID.DWORD
  SECURITY_FLAG_IGNORE_CERT_DATE_INVALID* = INTERNET_FLAG_IGNORE_CERT_DATE_INVALID.DWORD
  SECURITY_FLAG_IGNORE_REDIRECT_TO_HTTPS* = INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS.DWORD
  SECURITY_FLAG_IGNORE_REDIRECT_TO_HTTP* = INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP.DWORD
  INTERNET_SERVICE_FTP* = 1
  INTERNET_SERVICE_GOPHER* = 2
  INTERNET_SERVICE_HTTP* = 3
  INTERNET_STATUS_RESOLVING_NAME* = 10
  INTERNET_STATUS_NAME_RESOLVED* = 11
  INTERNET_STATUS_CONNECTING_TO_SERVER* = 20
  INTERNET_STATUS_CONNECTED_TO_SERVER* = 21
  INTERNET_STATUS_SENDING_REQUEST* = 30
  INTERNET_STATUS_REQUEST_SENT* = 31
  INTERNET_STATUS_RECEIVING_RESPONSE* = 40
  INTERNET_STATUS_RESPONSE_RECEIVED* = 41
  INTERNET_STATUS_CTL_RESPONSE_RECEIVED* = 42
  INTERNET_STATUS_PREFETCH* = 43
  INTERNET_STATUS_CLOSING_CONNECTION* = 50
  INTERNET_STATUS_CONNECTION_CLOSED* = 51
  INTERNET_STATUS_HANDLE_CREATED* = 60
  INTERNET_STATUS_HANDLE_CLOSING* = 70
  INTERNET_STATUS_REQUEST_COMPLETE* = 100
  INTERNET_STATUS_REDIRECT* = 110
  INTERNET_INVALID_STATUS_CALLBACK* = cast[INTERNET_STATUS_CALLBACK](-1)
  FTP_TRANSFER_TYPE_UNKNOWN* = 0
  FTP_TRANSFER_TYPE_ASCII* = 1
  FTP_TRANSFER_TYPE_BINARY* = 2
  FTP_TRANSFER_TYPE_MASK* = 3
  MAX_GOPHER_DISPLAY_TEXT* = 128
  MAX_GOPHER_SELECTOR_TEXT* = 256
  MAX_GOPHER_HOST_NAME* = INTERNET_MAX_HOST_NAME_LENGTH
  MAX_GOPHER_LOCATOR_LENGTH* = (1 + MAX_GOPHER_DISPLAY_TEXT + 1 + MAX_GOPHER_SELECTOR_TEXT + 1 + MAX_GOPHER_HOST_NAME + 1 + INTERNET_MAX_PORT_NUMBER_LENGTH + 4)
  GOPHER_TYPE_TEXT_FILE* = 0x00000001
  GOPHER_TYPE_DIRECTORY* = 0x00000002
  GOPHER_TYPE_CSO* = 0x00000004
  GOPHER_TYPE_ERROR* = 0x00000008
  GOPHER_TYPE_MAC_BINHEX* = 0x00000010
  GOPHER_TYPE_DOS_ARCHIVE* = 0x00000020
  GOPHER_TYPE_UNIX_UUENCODED* = 0x00000040
  GOPHER_TYPE_INDEX_SERVER* = 0x00000080
  GOPHER_TYPE_TELNET* = 0x00000100
  GOPHER_TYPE_BINARY* = 0x00000200
  GOPHER_TYPE_REDUNDANT* = 0x00000400
  GOPHER_TYPE_TN3270* = 0x00000800
  GOPHER_TYPE_GIF* = 0x00001000
  GOPHER_TYPE_IMAGE* = 0x00002000
  GOPHER_TYPE_BITMAP* = 0x00004000
  GOPHER_TYPE_MOVIE* = 0x00008000
  GOPHER_TYPE_SOUND* = 0x00010000
  GOPHER_TYPE_HTML* = 0x00020000
  GOPHER_TYPE_PDF* = 0x00040000
  GOPHER_TYPE_CALENDAR* = 0x00080000
  GOPHER_TYPE_INLINE* = 0x00100000
  GOPHER_TYPE_UNKNOWN* = 0x20000000
  GOPHER_TYPE_ASK* = 0x40000000
  GOPHER_TYPE_GOPHER_PLUS* = 0x80000000'u32
  GOPHER_TYPE_FILE_MASK* = 0x001FF271

proc IS_GOPHER_FILE*(t: DWORD): BOOL = (t and GOPHER_TYPE_FILE_MASK).BOOL
proc IS_GOPHER_DIRECTORY*(t: DWORD): BOOL = (t and GOPHER_TYPE_DIRECTORY).BOOL
proc IS_GOPHER_PHONE_SERVER*(t: DWORD): BOOL = (t and GOPHER_TYPE_CSO).BOOL
proc IS_GOPHER_ERROR*(t: DWORD): BOOL = (t and GOPHER_TYPE_ERROR).BOOL
proc IS_GOPHER_INDEX_SERVER*(t: DWORD): BOOL = (t and GOPHER_TYPE_INDEX_SERVER).BOOL
proc IS_GOPHER_TELNET_SESSION*(t: DWORD): BOOL = (t and GOPHER_TYPE_TELNET).BOOL
proc IS_GOPHER_BACKUP_SERVER*(t: DWORD): BOOL = (t and GOPHER_TYPE_REDUNDANT).BOOL
proc IS_GOPHER_TN3270_SESSION*(t: DWORD): BOOL = (t and GOPHER_TYPE_TN3270).BOOL
proc IS_GOPHER_ASK*(t: DWORD): BOOL = (t and GOPHER_TYPE_ASK).BOOL
proc IS_GOPHER_PLUS*(t: DWORD): BOOL = (t and GOPHER_TYPE_GOPHER_PLUS).BOOL
proc IS_GOPHER_TYPE_KNOWN*(t: DWORD): BOOL = (if (t and GOPHER_TYPE_UNKNOWN) == 0: 1 else: 0)

const
  MAX_GOPHER_CATEGORY_NAME* = 128
  MAX_GOPHER_ATTRIBUTE_NAME* = 128
  MIN_GOPHER_ATTRIBUTE_LENGTH* = 256
  GOPHER_INFO_CATEGORY* = "+INFO"
  GOPHER_ADMIN_CATEGORY* = "+ADMIN"
  GOPHER_VIEWS_CATEGORY* = "+VIEWS"
  GOPHER_ABSTRACT_CATEGORY* = "+ABSTRACT"
  GOPHER_VERONICA_CATEGORY* = "+VERONICA"
  GOPHER_ADMIN_ATTRIBUTE* = "Admin"
  GOPHER_MOD_DATE_ATTRIBUTE* = "Mod-Date"
  GOPHER_TTL_ATTRIBUTE* = "TTL"
  GOPHER_SCORE_ATTRIBUTE* = "Score"
  GOPHER_RANGE_ATTRIBUTE* = "Score-range"
  GOPHER_SITE_ATTRIBUTE* = "Site"
  GOPHER_ORG_ATTRIBUTE* = "Org"
  GOPHER_LOCATION_ATTRIBUTE* = "Loc"
  GOPHER_GEOG_ATTRIBUTE* = "Geog"
  GOPHER_TIMEZONE_ATTRIBUTE* = "TZ"
  GOPHER_PROVIDER_ATTRIBUTE* = "Provider"
  GOPHER_VERSION_ATTRIBUTE* = "Version"
  GOPHER_ABSTRACT_ATTRIBUTE* = "Abstract"
  GOPHER_VIEW_ATTRIBUTE* = "View"
  GOPHER_TREEWALK_ATTRIBUTE* = "treewalk"
  GOPHER_ATTRIBUTE_ID_BASE* = 0xABCCCC00'u32
  GOPHER_CATEGORY_ID_ALL* = 0xABCCCC01'u32
  GOPHER_CATEGORY_ID_INFO* = 0xABCCCC02'u32
  GOPHER_CATEGORY_ID_ADMIN* = 0xABCCCC03'u32
  GOPHER_CATEGORY_ID_VIEWS* = 0xABCCCC04'u32
  GOPHER_CATEGORY_ID_ABSTRACT* = 0xABCCCC05'u32
  GOPHER_CATEGORY_ID_VERONICA* = 0xABCCCC06'u32
  GOPHER_CATEGORY_ID_ASK* = 0xABCCCC07'u32
  GOPHER_CATEGORY_ID_UNKNOWN* = 0xABCCCC08'u32
  GOPHER_ATTRIBUTE_ID_ALL* = 0xABCCCC09'u32
  GOPHER_ATTRIBUTE_ID_ADMIN* = 0xABCCCC0A'u32
  GOPHER_ATTRIBUTE_ID_MOD_DATE* = 0xABCCCC0B'u32
  GOPHER_ATTRIBUTE_ID_TTL* = 0xABCCCC0C'u32
  GOPHER_ATTRIBUTE_ID_SCORE* = 0xABCCCC0D'u32
  GOPHER_ATTRIBUTE_ID_RANGE* = 0xABCCCC0E'u32
  GOPHER_ATTRIBUTE_ID_SITE* = 0xABCCCC0F'u32
  GOPHER_ATTRIBUTE_ID_ORG* = 0xABCCCC10'u32
  GOPHER_ATTRIBUTE_ID_LOCATION* = 0xABCCCC11'u32
  GOPHER_ATTRIBUTE_ID_GEOG* = 0xABCCCC12'u32
  GOPHER_ATTRIBUTE_ID_TIMEZONE* = 0xABCCCC13'u32
  GOPHER_ATTRIBUTE_ID_PROVIDER* = 0xABCCCC14'u32
  GOPHER_ATTRIBUTE_ID_VERSION* = 0xABCCCC15'u32
  GOPHER_ATTRIBUTE_ID_ABSTRACT* = 0xABCCCC16'u32
  GOPHER_ATTRIBUTE_ID_VIEW* = 0xABCCCC17'u32
  GOPHER_ATTRIBUTE_ID_TREEWALK* = 0xABCCCC18'u32
  GOPHER_ATTRIBUTE_ID_UNKNOWN* = 0xABCCCC19'u32
  HTTP_MAJOR_VERSION* = 1
  HTTP_MINOR_VERSION* = 0
  HTTP_VERSION* = "HTTP/1.0"
  HTTP_QUERY_MIME_VERSION* = 0
  HTTP_QUERY_CONTENT_TYPE* = 1
  HTTP_QUERY_CONTENT_TRANSFER_ENCODING* = 2
  HTTP_QUERY_CONTENT_ID* = 3
  HTTP_QUERY_CONTENT_DESCRIPTION* = 4
  HTTP_QUERY_CONTENT_LENGTH* = 5
  HTTP_QUERY_CONTENT_LANGUAGE* = 6
  HTTP_QUERY_ALLOW* = 7
  HTTP_QUERY_PUBLIC* = 8
  HTTP_QUERY_DATE* = 9
  HTTP_QUERY_EXPIRES* = 10
  HTTP_QUERY_LAST_MODIFIED* = 11
  HTTP_QUERY_MESSAGE_ID* = 12
  HTTP_QUERY_URI* = 13
  HTTP_QUERY_DERIVED_FROM* = 14
  HTTP_QUERY_COST* = 15
  HTTP_QUERY_LINK* = 16
  HTTP_QUERY_PRAGMA* = 17
  HTTP_QUERY_VERSION* = 18
  HTTP_QUERY_STATUS_CODE* = 19
  HTTP_QUERY_STATUS_TEXT* = 20
  HTTP_QUERY_RAW_HEADERS* = 21
  HTTP_QUERY_RAW_HEADERS_CRLF* = 22
  HTTP_QUERY_CONNECTION* = 23
  HTTP_QUERY_ACCEPT* = 24
  HTTP_QUERY_ACCEPT_CHARSET* = 25
  HTTP_QUERY_ACCEPT_ENCODING* = 26
  HTTP_QUERY_ACCEPT_LANGUAGE* = 27
  HTTP_QUERY_AUTHORIZATION* = 28
  HTTP_QUERY_CONTENT_ENCODING* = 29
  HTTP_QUERY_FORWARDED* = 30
  HTTP_QUERY_FROM* = 31
  HTTP_QUERY_IF_MODIFIED_SINCE* = 32
  HTTP_QUERY_LOCATION* = 33
  HTTP_QUERY_ORIG_URI* = 34
  HTTP_QUERY_REFERER* = 35
  HTTP_QUERY_RETRY_AFTER* = 36
  HTTP_QUERY_SERVER* = 37
  HTTP_QUERY_TITLE* = 38
  HTTP_QUERY_USER_AGENT* = 39
  HTTP_QUERY_WWW_AUTHENTICATE* = 40
  HTTP_QUERY_PROXY_AUTHENTICATE* = 41
  HTTP_QUERY_ACCEPT_RANGES* = 42
  HTTP_QUERY_SET_COOKIE* = 43
  HTTP_QUERY_COOKIE* = 44
  HTTP_QUERY_REQUEST_METHOD* = 45
  HTTP_QUERY_MAX* = 45
  HTTP_QUERY_CUSTOM* = 65535
  HTTP_QUERY_FLAG_REQUEST_HEADERS* = 0x80000000'u32
  HTTP_QUERY_FLAG_SYSTEMTIME* = 0x40000000
  HTTP_QUERY_FLAG_NUMBER* = 0x20000000
  HTTP_QUERY_FLAG_COALESCE* = 0x10000000
  HTTP_QUERY_MODIFIER_FLAGS_MASK* = 0xF0000000'u32
  HTTP_QUERY_HEADER_MASK* = (not HTTP_QUERY_MODIFIER_FLAGS_MASK).DWORD
  HTTP_STATUS_OK* = 200
  HTTP_STATUS_CREATED* = 201
  HTTP_STATUS_ACCEPTED* = 202
  HTTP_STATUS_PARTIAL* = 203
  HTTP_STATUS_NO_CONTENT* = 204
  HTTP_STATUS_AMBIGUOUS* = 300
  HTTP_STATUS_MOVED* = 301
  HTTP_STATUS_REDIRECT* = 302
  HTTP_STATUS_REDIRECT_METHOD* = 303
  HTTP_STATUS_NOT_MODIFIED* = 304
  HTTP_STATUS_BAD_REQUEST* = 400
  HTTP_STATUS_DENIED* = 401
  HTTP_STATUS_PAYMENT_REQ* = 402
  HTTP_STATUS_FORBIDDEN* = 403
  HTTP_STATUS_NOT_FOUND* = 404
  HTTP_STATUS_BAD_METHOD* = 405
  HTTP_STATUS_NONE_ACCEPTABLE* = 406
  HTTP_STATUS_PROXY_AUTH_REQ* = 407
  HTTP_STATUS_REQUEST_TIMEOUT* = 408
  HTTP_STATUS_CONFLICT* = 409
  HTTP_STATUS_GONE* = 410
  HTTP_STATUS_AUTH_REFUSED* = 411
  HTTP_STATUS_SERVER_ERROR* = 500
  HTTP_STATUS_NOT_SUPPORTED* = 501
  HTTP_STATUS_BAD_GATEWAY* = 502
  HTTP_STATUS_SERVICE_UNAVAIL* = 503
  HTTP_STATUS_GATEWAY_TIMEOUT* = 504
  INTERNET_PREFETCH_PROGRESS* = 0
  INTERNET_PREFETCH_COMPLETE* = 1
  INTERNET_PREFETCH_ABORTED* = 2
  FLAGS_ERROR_UI_FILTER_FOR_ERRORS* = 0x01
  FLAGS_ERROR_UI_FLAGS_CHANGE_OPTIONS* = 0x02
  FLAGS_ERROR_UI_FLAGS_GENERATE_DATA* = 0x04
  FLAGS_ERROR_UI_FLAGS_NO_UI* = 0x08
  HTTP_ADDREQ_INDEX_MASK* = 0x0000FFFF
  HTTP_ADDREQ_FLAGS_MASK* = 0xFFFF0000'u32
  HTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON* = 0x01000000
  HTTP_ADDREQ_FLAG_ADD_IF_NEW* = 0x10000000
  HTTP_ADDREQ_FLAG_ADD* = 0x20000000
  HTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA* = 0x40000000
  HTTP_ADDREQ_FLAG_COALESCE* = HTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA.DWORD
  HTTP_ADDREQ_FLAG_REPLACE* = 0x80000000'u32
  INTERNET_ERROR_BASE* = 12000
  ERROR_INTERNET_OUT_OF_HANDLES* = 12001
  ERROR_INTERNET_TIMEOUT* = 12002
  ERROR_INTERNET_EXTENDED_ERROR* = 12003
  ERROR_INTERNET_INTERNAL_ERROR* = 12004
  ERROR_INTERNET_INVALID_URL* = 12005
  ERROR_INTERNET_UNRECOGNIZED_SCHEME* = 12006
  ERROR_INTERNET_NAME_NOT_RESOLVED* = 12007
  ERROR_INTERNET_PROTOCOL_NOT_FOUND* = 12008
  ERROR_INTERNET_INVALID_OPTION* = 12009
  ERROR_INTERNET_BAD_OPTION_LENGTH* = 12010
  ERROR_INTERNET_OPTION_NOT_SETTABLE* = 12011
  ERROR_INTERNET_SHUTDOWN* = 12012
  ERROR_INTERNET_INCORRECT_USER_NAME* = 12013
  ERROR_INTERNET_INCORRECT_PASSWORD* = 12014
  ERROR_INTERNET_LOGIN_FAILURE* = 12015
  ERROR_INTERNET_INVALID_OPERATION* = 12016
  ERROR_INTERNET_OPERATION_CANCELLED* = 12017
  ERROR_INTERNET_INCORRECT_HANDLE_TYPE* = 12018
  ERROR_INTERNET_INCORRECT_HANDLE_STATE* = 12019
  ERROR_INTERNET_NOT_PROXY_REQUEST* = 12020
  ERROR_INTERNET_REGISTRY_VALUE_NOT_FOUND* = 12021
  ERROR_INTERNET_BAD_REGISTRY_PARAMETER* = 12022
  ERROR_INTERNET_NO_DIRECT_ACCESS* = 12023
  ERROR_INTERNET_NO_CONTEXT* = 12024
  ERROR_INTERNET_NO_CALLBACK* = 12025
  ERROR_INTERNET_REQUEST_PENDING* = 12026
  ERROR_INTERNET_INCORRECT_FORMAT* = 12027
  ERROR_INTERNET_ITEM_NOT_FOUND* = 12028
  ERROR_INTERNET_CANNOT_CONNECT* = 12029
  ERROR_INTERNET_CONNECTION_ABORTED* = 12030
  ERROR_INTERNET_CONNECTION_RESET* = 12031
  ERROR_INTERNET_FORCE_RETRY* = 12032
  ERROR_INTERNET_INVALID_PROXY_REQUEST* = 12033
  ERROR_INTERNET_NEED_UI* = 12034
  ERROR_INTERNET_HANDLE_EXISTS* = INTERNET_ERROR_BASE + 36
  ERROR_INTERNET_SEC_CERT_DATE_INVALID* = (INTERNET_ERROR_BASE + 36) + 1
  ERROR_INTERNET_SEC_CERT_CN_INVALID* = (INTERNET_ERROR_BASE + 36) + 2
  ERROR_INTERNET_HTTP_TO_HTTPS_ON_REDIR* = (INTERNET_ERROR_BASE + 36) + 3
  ERROR_INTERNET_HTTPS_TO_HTTP_ON_REDIR* = (INTERNET_ERROR_BASE + 36) + 4
  ERROR_INTERNET_MIXED_SECURITY* = (INTERNET_ERROR_BASE + 36) + 5
  ERROR_INTERNET_CHG_POST_IS_NON_SECURE* = (INTERNET_ERROR_BASE + 36) + 6
  ERROR_INTERNET_POST_IS_NON_SECURE* = (INTERNET_ERROR_BASE + 36) + 7
  ERROR_INTERNET_CLIENT_AUTH_CERT_NEEDED* = (INTERNET_ERROR_BASE + 36) + 8
  ERROR_INTERNET_INVALID_CA* = (INTERNET_ERROR_BASE + 36) + 9
  ERROR_INTERNET_CLIENT_AUTH_NOT_SETUP* = (INTERNET_ERROR_BASE + 36) + 10
  ERROR_INTERNET_ASYNC_THREAD_FAILED* = (INTERNET_ERROR_BASE + 36) + 11
  ERROR_INTERNET_REDIRECT_SCHEME_CHANGE* = (INTERNET_ERROR_BASE + 36) + 12
  ERROR_FTP_TRANSFER_IN_PROGRESS* = INTERNET_ERROR_BASE + 110
  ERROR_FTP_DROPPED* = (INTERNET_ERROR_BASE + 110) + 1
  ERROR_GOPHER_PROTOCOL_ERROR* = INTERNET_ERROR_BASE + 130
  ERROR_GOPHER_NOT_FILE* = (INTERNET_ERROR_BASE + 130) + 1
  ERROR_GOPHER_DATA_ERROR* = (INTERNET_ERROR_BASE + 130) + 2
  ERROR_GOPHER_END_OF_DATA* = (INTERNET_ERROR_BASE + 130) + 3
  ERROR_GOPHER_INVALID_LOCATOR* = (INTERNET_ERROR_BASE + 130) + 4
  ERROR_GOPHER_INCORRECT_LOCATOR_TYPE* = (INTERNET_ERROR_BASE + 130) + 5
  ERROR_GOPHER_NOT_GOPHER_PLUS* = (INTERNET_ERROR_BASE + 130) + 6
  ERROR_GOPHER_ATTRIBUTE_NOT_FOUND* = (INTERNET_ERROR_BASE + 130) + 7
  ERROR_GOPHER_UNKNOWN_LOCATOR* = (INTERNET_ERROR_BASE + 130) + 8
  ERROR_HTTP_HEADER_NOT_FOUND* = INTERNET_ERROR_BASE + 150
  ERROR_HTTP_DOWNLEVEL_SERVER* = (INTERNET_ERROR_BASE + 150) + 1
  ERROR_HTTP_INVALID_SERVER_RESPONSE* = (INTERNET_ERROR_BASE + 150) + 2
  ERROR_HTTP_INVALID_HEADER* = (INTERNET_ERROR_BASE + 150) + 3
  ERROR_HTTP_INVALID_QUERY_REQUEST* = (INTERNET_ERROR_BASE + 150) + 4
  ERROR_HTTP_HEADER_ALREADY_EXISTS* = (INTERNET_ERROR_BASE + 150) + 5
  ERROR_HTTP_REDIRECT_FAILED* = (INTERNET_ERROR_BASE + 150) + 6
  ERROR_INTERNET_SECURITY_CHANNEL_ERROR* = (INTERNET_ERROR_BASE + 150) + 7
  ERROR_INTERNET_UNABLE_TO_CACHE_FILE* = (INTERNET_ERROR_BASE + 150) + 8
  ERROR_INTERNET_TCPIP_NOT_INSTALLED* = (INTERNET_ERROR_BASE + 150) + 9
  ERROR_HTTP_NOT_REDIRECTED* = (INTERNET_ERROR_BASE + 150) + 10
  INTERNET_ERROR_LAST* = ERROR_INTERNET_TCPIP_NOT_INSTALLED
  NORMAL_CACHE_ENTRY* = 0x000001
  STABLE_CACHE_ENTRY* = 0x000002
  STICKY_CACHE_ENTRY* = 0x000004
  SPARSE_CACHE_ENTRY* = 0x010000
  OCX_CACHE_ENTRY* = 0x020000
  COOKIE_CACHE_ENTRY* = 0x100000
  URLHISTORY_CACHE_ENTRY* = 0x200000
  CACHE_ENTRY_ATTRIBUTE_FC* = 0x0004
  CACHE_ENTRY_HITRATE_FC* = 0x0010
  CACHE_ENTRY_MODTIME_FC* = 0x0040
  CACHE_ENTRY_EXPTIME_FC* = 0x0080
  CACHE_ENTRY_ACCTIME_FC* = 0x0100
  CACHE_ENTRY_SYNCTIME_FC* = 0x0200
  CACHE_ENTRY_HEADERINFO_FC* = 0x0400
  WININET_API_FLAG_ASYNC* = 1
  WININET_API_FLAG_SYNC* = 4
  WININET_API_FLAG_USE_CONTEXT* = 8
  IRF_ASYNC* = WININET_API_FLAG_ASYNC
  IRF_SYNC* = WININET_API_FLAG_SYNC
  IRF_USE_CONTEXT* = WININET_API_FLAG_USE_CONTEXT
  IRF_NO_WAIT* = 8
  HSR_ASYNC* = WININET_API_FLAG_ASYNC
  HSR_SYNC* = WININET_API_FLAG_SYNC
  HSR_USE_CONTEXT* = WININET_API_FLAG_USE_CONTEXT
  HSR_INITIATE* = 8
  HSR_DOWNLOAD* = 16
  HSR_CHUNKED* = 32
  INTERNET_DIAL_UNATTENDED* = 0x8000
  INTERNET_DIALSTATE_DISCONNECTED* = 1
  INTERENT_GOONLINE_REFRESH* = 1
  INTERENT_GOONLINE_MASK* = 1
  INTERNET_AUTODIAL_FORCE_ONLINE* = 1
  INTERNET_AUTODIAL_FORCE_UNATTENDED* = 2
  INTERNET_AUTODIAL_FAILIFSECURITYCHECK* = 4
  INTERNET_CONNECTION_MODEM* = 0x01
  INTERNET_CONNECTION_LAN* = 0x02
  INTERNET_CONNECTION_PROXY* = 0x04
  INTERNET_CONNECTION_MODEM_BUSY* = 0x08
  INTERNET_RAS_INSTALLED* = 0x10
  INTERNET_CONNECTION_OFFLINE* = 0x20
  INTERNET_CONNECTION_CONFIGURED* = 0x40
  CACHEGROUP_SEARCH_ALL* = 0
  CACHEGROUP_SEARCH_BYURL* = 1
  INTERNET_CACHE_GROUP_ADD* = 0
  INTERNET_CACHE_GROUP_REMOVE* = 1

type
  LPHINTERNET* = ptr HANDLE
  GROUPID* = LONGLONG
  INTERNET_PORT* = WORD
  LPINTERNET_PORT* = ptr WORD
  INTERNET_SCHEME* = int32

const
  INTERNET_SCHEME_FIRST* = INTERNET_SCHEME_FTP
  INTERNET_SCHEME_LAST* = INTERNET_SCHEME_SOCKS

type
  LPINTERNET_SCHEME* = ptr INTERNET_SCHEME
  INTERNET_ASYNC_RESULT* {.final, pure.} = object
    dwResult*: DWORD
    dwError*: DWORD
  LPINTERNET_ASYNC_RESULT* = ptr INTERNET_ASYNC_RESULT
  INTERNET_PREFETCH_STATUS* {.final, pure.} = object
    dwStatus*: DWORD
    dwSize*: DWORD
  LPINTERNET_PREFETCH_STATUS* = ptr INTERNET_PREFETCH_STATUS
  INTERNET_PROXY_INFO* {.final, pure.} = object
    dwAccessType*: DWORD
    lpszProxy*: LPCTSTR
    lpszProxyBypass*: LPCTSTR
  LPINTERNET_PROXY_INFO* = ptr INTERNET_PROXY_INFO
  INTERNET_VERSION_INFO* {.final, pure.} = object
    dwMajorVersion*: DWORD
    dwMinorVersion*: DWORD
  LPINTERNET_VERSION_INFO* = ptr INTERNET_VERSION_INFO
  URL_COMPONENTSA* {.final, pure.} = object
    dwStructSize*: DWORD
    lpszScheme*: LPSTR
    dwSchemeLength*: DWORD
    nScheme*: INTERNET_SCHEME
    lpszHostName*: LPSTR
    dwHostNameLength*: DWORD
    nPort*: INTERNET_PORT
    lpszUserName*: LPSTR
    dwUserNameLength*: DWORD
    lpszPassword*: LPSTR
    dwPasswordLength*: DWORD
    lpszUrlPath*: LPSTR
    dwUrlPathLength*: DWORD
    lpszExtraInfo*: LPSTR
    dwExtraInfoLength*: DWORD
  LPURL_COMPONENTSA* = ptr URL_COMPONENTSA
  URL_COMPONENTSW* {.final, pure.} = object
    dwStructSize*: DWORD
    lpszScheme*: LPWSTR
    dwSchemeLength*: DWORD
    nScheme*: INTERNET_SCHEME
    lpszHostName*: LPWSTR
    dwHostNameLength*: DWORD
    nPort*: INTERNET_PORT
    lpszUserName*: LPWSTR
    dwUserNameLength*: DWORD
    lpszPassword*: LPWSTR
    dwPasswordLength*: DWORD
    lpszUrlPath*: LPWSTR
    dwUrlPathLength*: DWORD
    lpszExtraInfo*: LPWSTR
    dwExtraInfoLength*: DWORD
  LPURL_COMPONENTSW* = ptr URL_COMPONENTSW
  INTERNET_CERTIFICATE_INFO* {.final, pure.} = object
    ftExpiry*: FILETIME
    ftStart*: FILETIME
    lpszSubjectInfo*: LPTSTR
    lpszIssuerInfo*: LPTSTR
    lpszProtocolName*: LPTSTR
    lpszSignatureAlgName*: LPTSTR
    lpszEncryptionAlgName*: LPTSTR
    dwKeySize*: DWORD
  LPINTERNET_CERTIFICATE_INFO* = ptr INTERNET_CERTIFICATE_INFO

type
  LPINTERNET_STATUS_CALLBACK* = ptr INTERNET_STATUS_CALLBACK
  GOPHER_FIND_DATAA* {.final, pure.} = object
    DisplayString*: array[MAX_GOPHER_DISPLAY_TEXT+1, CHAR]
    GopherType*: DWORD
    SizeLow*: DWORD
    SizeHigh*: DWORD
    LastModificationTime*: FILETIME
    Locator*: array[MAX_GOPHER_LOCATOR_LENGTH+1, CHAR]
  LPGOPHER_FIND_DATAA* = ptr GOPHER_FIND_DATAA
  GOPHER_FIND_DATAW* {.final, pure.} = object
    DisplayString*: array[MAX_GOPHER_DISPLAY_TEXT+1, WCHAR]
    GopherType*: DWORD
    SizeLow*: DWORD
    SizeHigh*: DWORD
    LastModificationTime*: FILETIME
    Locator*: array[MAX_GOPHER_LOCATOR_LENGTH+1, WCHAR]
  LPGOPHER_FIND_DATAW* = ptr GOPHER_FIND_DATAW
  GOPHER_ADMIN_ATTRIBUTE_TYPE* {.final, pure.} = object
    Comment*: LPCTSTR
    EmailAddress*: LPCTSTR
  LPGOPHER_ADMIN_ATTRIBUTE_TYPE* = ptr GOPHER_ADMIN_ATTRIBUTE_TYPE
  GOPHER_MOD_DATE_ATTRIBUTE_TYPE* {.final, pure.} = object
    DateAndTime*: FILETIME
  LPGOPHER_MOD_DATE_ATTRIBUTE_TYPE* = ptr GOPHER_MOD_DATE_ATTRIBUTE_TYPE
  GOPHER_TTL_ATTRIBUTE_TYPE* {.final, pure.} = object
    Ttl*: DWORD
  LPGOPHER_TTL_ATTRIBUTE_TYPE* = ptr GOPHER_TTL_ATTRIBUTE_TYPE
  GOPHER_SCORE_ATTRIBUTE_TYPE* {.final, pure.} = object
    Score*: INT
  LPGOPHER_SCORE_ATTRIBUTE_TYPE* = ptr GOPHER_SCORE_ATTRIBUTE_TYPE
  GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE* {.final, pure.} = object
    LowerBound*: INT
    UpperBound*: INT
  LPGOPHER_SCORE_RANGE_ATTRIBUTE_TYPE* = ptr GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE
  GOPHER_SITE_ATTRIBUTE_TYPE* {.final, pure.} = object
    Site*: LPCTSTR
  LPGOPHER_SITE_ATTRIBUTE_TYPE* = ptr GOPHER_SITE_ATTRIBUTE_TYPE
  GOPHER_ORGANIZATION_ATTRIBUTE_TYPE* {.final, pure.} = object
    Organization*: LPCTSTR
  LPGOPHER_ORGANIZATION_ATTRIBUTE_TYPE* = ptr GOPHER_ORGANIZATION_ATTRIBUTE_TYPE
  GOPHER_LOCATION_ATTRIBUTE_TYPE* {.final, pure.} = object
    Location*: LPCTSTR
  LPGOPHER_LOCATION_ATTRIBUTE_TYPE* = ptr GOPHER_LOCATION_ATTRIBUTE_TYPE
  GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE* {.final, pure.} = object
    DegreesNorth*: INT
    MinutesNorth*: INT
    SecondsNorth*: INT
    DegreesEast*: INT
    MinutesEast*: INT
    SecondsEast*: INT
  LPGOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE* = ptr GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE
  GOPHER_TIMEZONE_ATTRIBUTE_TYPE* {.final, pure.} = object
    Zone*: INT
  LPGOPHER_TIMEZONE_ATTRIBUTE_TYPE* = ptr GOPHER_TIMEZONE_ATTRIBUTE_TYPE
  GOPHER_PROVIDER_ATTRIBUTE_TYPE* {.final, pure.} = object
    Provider*: LPCTSTR
  LPGOPHER_PROVIDER_ATTRIBUTE_TYPE* = ptr GOPHER_PROVIDER_ATTRIBUTE_TYPE
  GOPHER_VERSION_ATTRIBUTE_TYPE* {.final, pure.} = object
    Version*: LPCTSTR
  LPGOPHER_VERSION_ATTRIBUTE_TYPE* = ptr GOPHER_VERSION_ATTRIBUTE_TYPE
  GOPHER_ABSTRACT_ATTRIBUTE_TYPE* {.final, pure.} = object
    ShortAbstract*: LPCTSTR
    AbstractFile*: LPCTSTR
  LPGOPHER_ABSTRACT_ATTRIBUTE_TYPE* = ptr GOPHER_ABSTRACT_ATTRIBUTE_TYPE
  GOPHER_VIEW_ATTRIBUTE_TYPE* {.final, pure.} = object
    ContentType*: LPCTSTR
    Language*: LPCTSTR
    Size*: DWORD
  LPGOPHER_VIEW_ATTRIBUTE_TYPE* = ptr GOPHER_VIEW_ATTRIBUTE_TYPE
  GOPHER_VERONICA_ATTRIBUTE_TYPE* {.final, pure.} = object
    TreeWalk*: BOOL
  LPGOPHER_VERONICA_ATTRIBUTE_TYPE* = ptr GOPHER_VERONICA_ATTRIBUTE_TYPE
  GOPHER_ASK_ATTRIBUTE_TYPE* {.final, pure.} = object
    QuestionType*: LPCTSTR
    QuestionText*: LPCTSTR
  LPGOPHER_ASK_ATTRIBUTE_TYPE* = ptr GOPHER_ASK_ATTRIBUTE_TYPE
  GOPHER_UNKNOWN_ATTRIBUTE_TYPE* {.final, pure.} = object
    Text*: LPCTSTR
  LPGOPHER_UNKNOWN_ATTRIBUTE_TYPE* = ptr GOPHER_UNKNOWN_ATTRIBUTE_TYPE
  GOPHER_ATTRIBUTE_TYPE_UNION1* {.final, union, pure.} = object
    Admin*: GOPHER_ADMIN_ATTRIBUTE_TYPE
    ModDate*: GOPHER_MOD_DATE_ATTRIBUTE_TYPE
    Ttl*: GOPHER_TTL_ATTRIBUTE_TYPE
    Score*: GOPHER_SCORE_ATTRIBUTE_TYPE
    ScoreRange*: GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE
    Site*: GOPHER_SITE_ATTRIBUTE_TYPE
    Organization*: GOPHER_ORGANIZATION_ATTRIBUTE_TYPE
    Location*: GOPHER_LOCATION_ATTRIBUTE_TYPE
    GeographicalLocation*: GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE
    TimeZone*: GOPHER_TIMEZONE_ATTRIBUTE_TYPE
    Provider*: GOPHER_PROVIDER_ATTRIBUTE_TYPE
    Version*: GOPHER_VERSION_ATTRIBUTE_TYPE
    Abstract*: GOPHER_ABSTRACT_ATTRIBUTE_TYPE
    View*: GOPHER_VIEW_ATTRIBUTE_TYPE
    Veronica*: GOPHER_VERONICA_ATTRIBUTE_TYPE
    Ask*: GOPHER_ASK_ATTRIBUTE_TYPE
    Unknown*: GOPHER_UNKNOWN_ATTRIBUTE_TYPE
  GOPHER_ATTRIBUTE_TYPE* {.final, pure.} = object
    CategoryId*: DWORD
    AttributeId*: DWORD
    u1*: GOPHER_ATTRIBUTE_TYPE_UNION1
  LPGOPHER_ATTRIBUTE_TYPE* = ptr GOPHER_ATTRIBUTE_TYPE
  GOPHER_ATTRIBUTE_ENUMERATOR* = proc (P1: LPGOPHER_ATTRIBUTE_TYPE, P2: DWORD): BOOL {.stdcall.}
  INTERNET_CACHE_ENTRY_INFOA* {.final, pure.} = object
    dwStructSize*: DWORD
    lpszSourceUrlName*: LPSTR
    lpszLocalFileName*: LPSTR
    CacheEntryType*: DWORD
    dwUseCount*: DWORD
    dwHitRate*: DWORD
    dwSizeLow*: DWORD
    dwSizeHigh*: DWORD
    LastModifiedTime*: FILETIME
    ExpireTime*: FILETIME
    LastAccessTime*: FILETIME
    LastSyncTime*: FILETIME
    lpHeaderInfo*: PBYTE
    dwHeaderInfoSize*: DWORD
    lpszFileExtension*: LPSTR
    dwReserved*: DWORD
  LPINTERNET_CACHE_ENTRY_INFOA* = ptr INTERNET_CACHE_ENTRY_INFOA
  INTERNET_CACHE_ENTRY_INFOW* {.final, pure.} = object
    dwStructSize*: DWORD
    lpszSourceUrlName*: LPWSTR
    lpszLocalFileName*: LPWSTR
    CacheEntryType*: DWORD
    dwUseCount*: DWORD
    dwHitRate*: DWORD
    dwSizeLow*: DWORD
    dwSizeHigh*: DWORD
    LastModifiedTime*: FILETIME
    ExpireTime*: FILETIME
    LastAccessTime*: FILETIME
    LastSyncTime*: FILETIME
    lpHeaderInfo*: PBYTE
    dwHeaderInfoSize*: DWORD
    lpszFileExtension*: LPWSTR
    dwReserved*: DWORD
  LPINTERNET_CACHE_ENTRY_INFOW* = ptr INTERNET_CACHE_ENTRY_INFOW
  INTERNET_BUFFERSA* {.final, pure.} = object
    dwStructSize*: DWORD
    Next*: ptr INTERNET_BUFFERSA
    lpcszHeader*: LPCSTR
    dwHeadersLength*: DWORD
    dwHeadersTotal*: DWORD
    lpvBuffer*: LPVOID
    dwBufferLength*: DWORD
    dwBufferTotal*: DWORD
    dwOffsetLow*: DWORD
    dwOffsetHigh*: DWORD
  LPINTERNET_BUFFERSA* = ptr INTERNET_BUFFERSA
  INTERNET_BUFFERSW* {.final, pure.} = object
    dwStructSize*: DWORD
    Next*: ptr INTERNET_BUFFERSW
    lpcszHeader*: LPCWSTR
    dwHeadersLength*: DWORD
    dwHeadersTotal*: DWORD
    lpvBuffer*: LPVOID
    dwBufferLength*: DWORD
    dwBufferTotal*: DWORD
    dwOffsetLow*: DWORD
    dwOffsetHigh*: DWORD
  LPINTERNET_BUFFERSW* = ptr INTERNET_BUFFERSW

const
  GROUP_OWNER_STORAGE_SIZE* = 4
  GROUPNAME_MAX_LENGTH* = 120

type
  INTERNET_CACHE_GROUP_INFOA* {.final, pure.} = object
    dwGroupSize*: DWORD
    dwGroupFlags*: DWORD
    dwGroupType*: DWORD
    dwDiskUsage*: DWORD
    dwDiskQuota*: DWORD
    dwOwnerStorage*: array[GROUP_OWNER_STORAGE_SIZE, DWORD]
    szGroupName*: array[GROUPNAME_MAX_LENGTH, CHAR]
  LPINTERNET_CACHE_GROUP_INFOA* = ptr INTERNET_CACHE_GROUP_INFOA
  INTERNET_CACHE_GROUP_INFOW* {.final, pure.} = object
    dwGroupSize*: DWORD
    dwGroupFlags*: DWORD
    dwGroupType*: DWORD
    dwDiskUsage*: DWORD
    dwDiskQuota*: DWORD
    dwOwnerStorage*: array[GROUP_OWNER_STORAGE_SIZE, DWORD]
    szGroupName*: array[GROUPNAME_MAX_LENGTH, WCHAR]
  LPINTERNET_CACHE_GROUP_INFOW* = ptr INTERNET_CACHE_GROUP_INFOW

proc InternetTimeFromSystemTime*(P1: ptr SYSTEMTIME, P2: DWORD, P3: LPSTR, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetTimeToSystemTime*(P1: LPCSTR, P2: ptr SYSTEMTIME, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetDebugGetLocalTime*(P1: ptr SYSTEMTIME, P2: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCrackUrlA*(P1: LPCSTR, P2: DWORD, P3: DWORD, P4: LPURL_COMPONENTSA): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCrackUrlW*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: LPURL_COMPONENTSW): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCreateUrlA*(P1: LPURL_COMPONENTSA, P2: DWORD, P3: LPSTR, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCreateUrlW*(P1: LPURL_COMPONENTSW, P2: DWORD, P3: LPWSTR, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCanonicalizeUrlA*(P1: LPCSTR, P2: LPSTR, P3: PDWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCanonicalizeUrlW*(P1: LPCWSTR, P2: LPWSTR, P3: PDWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCheckConnectionA*(P1: LPCSTR, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCheckConnectionW*(P1: LPCWSTR, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCombineUrlA*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: PDWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCombineUrlW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: PDWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetOpenA*(P1: LPCSTR, P2: DWORD, P3: LPCSTR, P4: LPCSTR, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc InternetOpenW*(P1: LPCWSTR, P2: DWORD, P3: LPCWSTR, P4: LPCWSTR, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc InternetCloseHandle*(P1: HINTERNET): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetConnectA*(P1: HINTERNET, P2: LPCSTR, P3: INTERNET_PORT, P4: LPCSTR, P5: LPCSTR, P6: DWORD, P7: DWORD, P8: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc InternetConnectW*(P1: HINTERNET, P2: LPCWSTR, P3: INTERNET_PORT, P4: LPCWSTR, P5: LPCWSTR, P6: DWORD, P7: DWORD, P8: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc InternetOpenUrlA*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: DWORD, P6: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc InternetOpenUrlW*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD, P6: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc InternetReadFile*(P1: HINTERNET, P2: PVOID, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetSetFilePointer*(P1: HINTERNET, P2: LONG, P3: PVOID, P4: DWORD, P5: DWORD): DWORD {.winapi, dynlib: "wininet", importc.}
proc InternetWriteFile*(P1: HINTERNET, P2: LPCVOID, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetQueryDataAvailable*(P1: HINTERNET, P2: PDWORD, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetFindNextFileA*(P1: HINTERNET, P2: PVOID): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetFindNextFileW*(P1: HINTERNET, P2: PVOID): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetQueryOptionA*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetQueryOptionW*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetSetOptionA*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetSetOptionW*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetSetOptionExA*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetSetOptionExW*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetGetLastResponseInfoA*(P1: PDWORD, P2: LPSTR, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetGetLastResponseInfoW*(P1: PDWORD, P2: LPWSTR, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetSetStatusCallback*(P1: HINTERNET, P2: INTERNET_STATUS_CALLBACK): INTERNET_STATUS_CALLBACK {.winapi, dynlib: "wininet", importc.}
proc FtpGetFileSize*(P1: HINTERNET, P2: LPDWORD): DWORD {.winapi, dynlib: "wininet", importc.}
proc FtpFindFirstFileA*(P1: HINTERNET, P2: LPCSTR, P3: LPWIN32_FIND_DATA, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc FtpFindFirstFileW*(P1: HINTERNET, P2: LPCWSTR, P3: LPWIN32_FIND_DATA, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc FtpGetFileA*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: BOOL, P5: DWORD, P6: DWORD, P7: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpGetFileW*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: BOOL, P5: DWORD, P6: DWORD, P7: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpPutFileA*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpPutFileW*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpDeleteFileA*(P1: HINTERNET, P2: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpDeleteFileW*(P1: HINTERNET, P2: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpRenameFileA*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpRenameFileW*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpOpenFileA*(P1: HINTERNET, P2: LPCSTR, P3: DWORD, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc FtpOpenFileW*(P1: HINTERNET, P2: LPCWSTR, P3: DWORD, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc FtpCreateDirectoryA*(P1: HINTERNET, P2: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpCreateDirectoryW*(P1: HINTERNET, P2: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpRemoveDirectoryA*(P1: HINTERNET, P2: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpRemoveDirectoryW*(P1: HINTERNET, P2: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpSetCurrentDirectoryA*(P1: HINTERNET, P2: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpSetCurrentDirectoryW*(P1: HINTERNET, P2: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpGetCurrentDirectoryA*(P1: HINTERNET, P2: LPSTR, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpGetCurrentDirectoryW*(P1: HINTERNET, P2: LPWSTR, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpCommandA*(P1: HINTERNET, P2: BOOL, P3: DWORD, P4: LPCSTR, P5: DWORD_PTR, P6: ptr HINTERNET): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpCommandW*(P1: HINTERNET, P2: BOOL, P3: DWORD, P4: LPCWSTR, P5: DWORD_PTR, P6: ptr HINTERNET): BOOL {.winapi, dynlib: "wininet", importc.}
proc GopherCreateLocatorA*(P1: LPCSTR, P2: INTERNET_PORT, P3: LPCSTR, P4: LPCSTR, P5: DWORD, P6: LPSTR, P7: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc GopherCreateLocatorW*(P1: LPCWSTR, P2: INTERNET_PORT, P3: LPCWSTR, P4: LPCWSTR, P5: DWORD, P6: LPWSTR, P7: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc GopherGetLocatorTypeA*(P1: LPCSTR, P2: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc GopherGetLocatorTypeW*(P1: LPCWSTR, P2: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc GopherFindFirstFileA*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: LPGOPHER_FIND_DATAA, P5: DWORD, P6: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc GopherFindFirstFileW*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: LPGOPHER_FIND_DATAW, P5: DWORD, P6: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc GopherOpenFileA*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc GopherOpenFileW*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc GopherGetAttributeA*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: LPBYTE, P5: DWORD, P6: PDWORD, P7: GOPHER_ATTRIBUTE_ENUMERATOR, P8: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc GopherGetAttributeW*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: LPBYTE, P5: DWORD, P6: PDWORD, P7: GOPHER_ATTRIBUTE_ENUMERATOR, P8: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc HttpOpenRequestA*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR, P5: LPCSTR, P6: ptr LPCSTR, P7: DWORD, P8: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc HttpOpenRequestW*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR, P5: LPCWSTR, P6: ptr LPCWSTR, P7: DWORD, P8: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc HttpAddRequestHeadersA*(P1: HINTERNET, P2: LPCSTR, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc HttpAddRequestHeadersW*(P1: HINTERNET, P2: LPCWSTR, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc HttpSendRequestA*(P1: HINTERNET, P2: LPCSTR, P3: DWORD, P4: PVOID, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc HttpSendRequestW*(P1: HINTERNET, P2: LPCWSTR, P3: DWORD, P4: PVOID, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc HttpQueryInfoA*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: PDWORD, P5: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc HttpQueryInfoW*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: PDWORD, P5: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetSetCookieA*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetSetCookieW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetGetCookieA*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetGetCookieW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetAttemptConnect*(P1: DWORD): DWORD {.winapi, dynlib: "wininet", importc.}
proc InternetErrorDlg*(P1: HWND, P2: HINTERNET, P3: DWORD, P4: DWORD, P5: ptr PVOID): DWORD {.winapi, dynlib: "wininet", importc.}
proc InternetConfirmZoneCrossing*(P1: HWND, P2: LPSTR, P3: LPSTR, P4: BOOL): DWORD {.winapi, dynlib: "wininet", importc.}
proc CreateUrlCacheEntryA*(P1: LPCSTR, P2: DWORD, P3: LPCSTR, P4: LPSTR, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc CreateUrlCacheEntryW*(P1: LPCWSTR, P2: DWORD, P3: LPCWSTR, P4: LPWSTR, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc CommitUrlCacheEntryA*(P1: LPCSTR, P2: LPCSTR, P3: FILETIME, P4: FILETIME, P5: DWORD, P6: LPBYTE, P7: DWORD, P8: LPCSTR, P9: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc CommitUrlCacheEntryW*(P1: LPCWSTR, P2: LPCWSTR, P3: FILETIME, P4: FILETIME, P5: DWORD, P6: LPBYTE, P7: DWORD, P8: LPCWSTR, P9: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc RetrieveUrlCacheEntryFileA*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc RetrieveUrlCacheEntryFileW*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc UnlockUrlCacheEntryFile*(P1: LPCSTR, P2: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc RetrieveUrlCacheEntryStreamA*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD, P4: BOOL, P5: DWORD): HANDLE {.winapi, dynlib: "wininet", importc.}
proc RetrieveUrlCacheEntryStreamW*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD, P4: BOOL, P5: DWORD): HANDLE {.winapi, dynlib: "wininet", importc.}
proc ReadUrlCacheEntryStream*(P1: HANDLE, P2: DWORD, P3: PVOID, P4: PDWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc UnlockUrlCacheEntryStream*(P1: HANDLE, P2: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc GetUrlCacheEntryInfoA*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc GetUrlCacheEntryInfoW*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc SetUrlCacheEntryInfoA*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc SetUrlCacheEntryInfoW*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc FindFirstUrlCacheEntryA*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD): HANDLE {.winapi, dynlib: "wininet", importc.}
proc FindFirstUrlCacheEntryW*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD): HANDLE {.winapi, dynlib: "wininet", importc.}
proc FindNextUrlCacheEntryA*(P1: HANDLE, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc FindNextUrlCacheEntryW*(P1: HANDLE, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc FindCloseUrlCache*(P1: HANDLE): BOOL {.winapi, dynlib: "wininet", importc.}
proc DeleteUrlCacheEntry*(P1: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc AuthenticateUser*(P1: ptr PVOID, P2: LPSTR, P3: LPSTR, P4: DWORD, P5: LPSTR, P6: DWORD, P7: LPSTR, P8: LPSTR): DWORD {.winapi, dynlib: "wininet", importc.}
proc HttpSendRequestExA*(P1: HINTERNET, P2: LPINTERNET_BUFFERSA, P3: LPINTERNET_BUFFERSA, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc HttpSendRequestExW*(P1: HINTERNET, P2: LPINTERNET_BUFFERSW, P3: LPINTERNET_BUFFERSW, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc HttpEndRequestA*(P1: HINTERNET, P2: LPINTERNET_BUFFERSA, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc HttpEndRequestW*(P1: HINTERNET, P2: LPINTERNET_BUFFERSW, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetDial*(P1: HWND, P2: LPTSTR, P3: DWORD, P4: LPDWORD, P5: DWORD): DWORD {.winapi, dynlib: "wininet", importc.}
proc InternetHangUp*(P1: DWORD, P2: DWORD): DWORD {.winapi, dynlib: "wininet", importc.}
proc InternetGoOnline*(P1: LPTSTR, P2: HWND, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetAutodial*(P1: DWORD, P2: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetAutodialHangup*(P1: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetGetConnectedState*(P1: LPDWORD, P2: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetSetDialState*(P1: LPCTSTR, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetReadFileExA*(P1: HINTERNET, P2: LPINTERNET_BUFFERSA, P3: DWORD, P4: DWORD_PTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetReadFileExW*(P1: HINTERNET, P2: LPINTERNET_BUFFERSW, P3: DWORD, P4: DWORD_PTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc CreateUrlCacheGroup*(P1: DWORD, P2: LPVOID): GROUPID {.winapi, dynlib: "wininet", importc.}
proc DeleteUrlCacheGroup*(P1: GROUPID, P2: DWORD, P3: LPVOID): BOOL {.winapi, dynlib: "wininet", importc.}
proc FindFirstUrlCacheGroup*(P1: DWORD, P2: DWORD, P3: LPVOID, P4: DWORD, P5: ptr GROUPID, P6: LPVOID): HANDLE {.winapi, dynlib: "wininet", importc.}
proc FindNextUrlCacheGroup*(P1: HANDLE, P2: ptr GROUPID, P3: LPVOID): BOOL {.winapi, dynlib: "wininet", importc.}
proc GetUrlCacheGroupAttributeA*(P1: GROUPID, P2: DWORD, P3: DWORD, P4: LPINTERNET_CACHE_GROUP_INFOA, P5: LPDWORD, P6: LPVOID): BOOL {.winapi, dynlib: "wininet", importc.}
proc GetUrlCacheGroupAttributeW*(P1: GROUPID, P2: DWORD, P3: DWORD, P4: LPINTERNET_CACHE_GROUP_INFOW, P5: LPDWORD, P6: LPVOID): BOOL {.winapi, dynlib: "wininet", importc.}
proc SetUrlCacheGroupAttributeA*(P1: GROUPID, P2: DWORD, P3: DWORD, P4: LPINTERNET_CACHE_GROUP_INFOA, P5: LPVOID): BOOL {.winapi, dynlib: "wininet", importc.}
proc SetUrlCacheGroupAttributeW*(P1: GROUPID, P2: DWORD, P3: DWORD, P4: LPINTERNET_CACHE_GROUP_INFOW, P5: LPVOID): BOOL {.winapi, dynlib: "wininet", importc.}

when not defined(winansi):
  type
    URL_COMPONENTS* = URL_COMPONENTSW
    LPURL_COMPONENTS* = LPURL_COMPONENTSW
    GOPHER_FIND_DATA* = GOPHER_FIND_DATAW
    LPGOPHER_FIND_DATA* = LPGOPHER_FIND_DATAW
    INTERNET_CACHE_ENTRY_INFO* = INTERNET_CACHE_ENTRY_INFOW
    LPINTERNET_CACHE_ENTRY_INFO* = LPINTERNET_CACHE_ENTRY_INFOW
    INTERNET_BUFFERS* = INTERNET_BUFFERSW
    INTERNET_CACHE_GROUP_INFO* = INTERNET_CACHE_GROUP_INFOW
    LPINTERNET_CACHE_GROUP_INFO* = LPINTERNET_CACHE_GROUP_INFOW

  proc InternetCrackUrl*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: LPURL_COMPONENTSW): BOOL {.winapi, dynlib: "wininet", importc: "InternetCrackUrlW".}
  proc InternetCreateUrl*(P1: LPURL_COMPONENTSW, P2: DWORD, P3: LPWSTR, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetCreateUrlW".}
  proc InternetCanonicalizeUrl*(P1: LPCWSTR, P2: LPWSTR, P3: PDWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetCanonicalizeUrlW".}
  proc InternetCheckConnection*(P1: LPCWSTR, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetCheckConnectionW".}
  proc InternetCombineUrl*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: PDWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetCombineUrlW".}
  proc InternetOpen*(P1: LPCWSTR, P2: DWORD, P3: LPCWSTR, P4: LPCWSTR, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "InternetOpenW".}
  proc InternetConnect*(P1: HINTERNET, P2: LPCWSTR, P3: INTERNET_PORT, P4: LPCWSTR, P5: LPCWSTR, P6: DWORD, P7: DWORD, P8: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "InternetConnectW".}
  proc InternetOpenUrl*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD, P6: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "InternetOpenUrlW".}
  proc InternetFindNextFile*(P1: HINTERNET, P2: PVOID): BOOL {.winapi, dynlib: "wininet", importc: "InternetFindNextFileW".}
  proc InternetQueryOption*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetQueryOptionW".}
  proc InternetSetOption*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetSetOptionW".}
  proc InternetSetOptionEx*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetSetOptionExW".}
  proc InternetGetLastResponseInfo*(P1: PDWORD, P2: LPWSTR, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetGetLastResponseInfoW".}
  proc InternetReadFileEx*(P1: HINTERNET, P2: LPINTERNET_BUFFERSW, P3: DWORD, P4: DWORD_PTR): BOOL {.winapi, dynlib: "wininet", importc: "InternetReadFileExW".}
  proc FtpFindFirstFile*(P1: HINTERNET, P2: LPCWSTR, P3: LPWIN32_FIND_DATA, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "FtpFindFirstFileW".}
  proc FtpGetFile*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: BOOL, P5: DWORD, P6: DWORD, P7: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "FtpGetFileW".}
  proc FtpPutFile*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "FtpPutFileW".}
  proc FtpDeleteFile*(P1: HINTERNET, P2: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpDeleteFileW".}
  proc FtpRenameFile*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpRenameFileW".}
  proc FtpOpenFile*(P1: HINTERNET, P2: LPCWSTR, P3: DWORD, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "FtpOpenFileW".}
  proc FtpCreateDirectory*(P1: HINTERNET, P2: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpCreateDirectoryW".}
  proc FtpRemoveDirectory*(P1: HINTERNET, P2: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpRemoveDirectoryW".}
  proc FtpSetCurrentDirectory*(P1: HINTERNET, P2: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpSetCurrentDirectoryW".}
  proc FtpGetCurrentDirectory*(P1: HINTERNET, P2: LPWSTR, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "FtpGetCurrentDirectoryW".}
  proc FtpCommand*(P1: HINTERNET, P2: BOOL, P3: DWORD, P4: LPCWSTR, P5: DWORD_PTR, P6: ptr HINTERNET): BOOL {.winapi, dynlib: "wininet", importc: "FtpCommandW".}
  proc GopherGetLocatorType*(P1: LPCWSTR, P2: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "GopherGetLocatorTypeW".}
  proc GopherCreateLocator*(P1: LPCWSTR, P2: INTERNET_PORT, P3: LPCWSTR, P4: LPCWSTR, P5: DWORD, P6: LPWSTR, P7: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "GopherCreateLocatorW".}
  proc GopherFindFirstFile*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: LPGOPHER_FIND_DATAW, P5: DWORD, P6: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "GopherFindFirstFileW".}
  proc GopherOpenFile*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "GopherOpenFileW".}
  proc GopherGetAttribute*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: LPBYTE, P5: DWORD, P6: PDWORD, P7: GOPHER_ATTRIBUTE_ENUMERATOR, P8: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "GopherGetAttributeW".}
  proc HttpSendRequest*(P1: HINTERNET, P2: LPCWSTR, P3: DWORD, P4: PVOID, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpSendRequestW".}
  proc HttpOpenRequest*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR, P5: LPCWSTR, P6: ptr LPCWSTR, P7: DWORD, P8: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "HttpOpenRequestW".}
  proc HttpAddRequestHeaders*(P1: HINTERNET, P2: LPCWSTR, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpAddRequestHeadersW".}
  proc HttpQueryInfo*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: PDWORD, P5: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpQueryInfoW".}
  proc InternetSetCookie*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc: "InternetSetCookieW".}
  proc InternetGetCookie*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetGetCookieW".}
  proc CreateUrlCacheEntry*(P1: LPCWSTR, P2: DWORD, P3: LPCWSTR, P4: LPWSTR, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "CreateUrlCacheEntryW".}
  proc RetrieveUrlCacheEntryStream*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD, P4: BOOL, P5: DWORD): HANDLE {.winapi, dynlib: "wininet", importc: "RetrieveUrlCacheEntryStreamW".}
  proc FindNextUrlCacheEntry*(P1: HANDLE, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "FindNextUrlCacheEntryW".}
  proc CommitUrlCacheEntry*(P1: LPCWSTR, P2: LPCWSTR, P3: FILETIME, P4: FILETIME, P5: DWORD, P6: LPBYTE, P7: DWORD, P8: LPCWSTR, P9: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "CommitUrlCacheEntryW".}
  proc GetUrlCacheEntryInfo*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "GetUrlCacheEntryInfoW".}
  proc SetUrlCacheEntryInfo*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "SetUrlCacheEntryInfoW".}
  proc FindFirstUrlCacheEntry*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD): HANDLE {.winapi, dynlib: "wininet", importc: "FindFirstUrlCacheEntryW".}
  proc RetrieveUrlCacheEntryFile*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "RetrieveUrlCacheEntryFileW".}
  proc HttpSendRequestEx*(P1: HINTERNET, P2: LPINTERNET_BUFFERSW, P3: LPINTERNET_BUFFERSW, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpSendRequestExW".}
  proc HttpEndRequest*(P1: HINTERNET, P2: LPINTERNET_BUFFERSW, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpEndRequestW".}
  proc GetUrlCacheGroupAttribute*(P1: GROUPID, P2: DWORD, P3: DWORD, P4: LPINTERNET_CACHE_GROUP_INFOW, P5: LPDWORD, P6: LPVOID): BOOL {.winapi, dynlib: "wininet", importc: "GetUrlCacheGroupAttributeW".}
  proc SetUrlCacheGroupAttribute*(P1: GROUPID, P2: DWORD, P3: DWORD, P4: LPINTERNET_CACHE_GROUP_INFOW, P5: LPVOID): BOOL {.winapi, dynlib: "wininet", importc: "SetUrlCacheGroupAttributeW".}

else:
  type
    URL_COMPONENTS* = URL_COMPONENTSA
    LPURL_COMPONENTS* = LPURL_COMPONENTSA
    GOPHER_FIND_DATA* = GOPHER_FIND_DATAA
    LPGOPHER_FIND_DATA* = LPGOPHER_FIND_DATAA
    INTERNET_CACHE_ENTRY_INFO* = INTERNET_CACHE_ENTRY_INFOA
    LPINTERNET_CACHE_ENTRY_INFO* = LPINTERNET_CACHE_ENTRY_INFOA
    INTERNET_BUFFERS* = INTERNET_BUFFERSA
    INTERNET_CACHE_GROUP_INFO* = INTERNET_CACHE_GROUP_INFOA
    LPINTERNET_CACHE_GROUP_INFO* = LPINTERNET_CACHE_GROUP_INFOA

  proc GopherGetAttribute*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: LPBYTE, P5: DWORD, P6: PDWORD, P7: GOPHER_ATTRIBUTE_ENUMERATOR, P8: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "GopherGetAttributeA".}
  proc InternetCrackUrl*(P1: LPCSTR, P2: DWORD, P3: DWORD, P4: LPURL_COMPONENTSA): BOOL {.winapi, dynlib: "wininet", importc: "InternetCrackUrlA".}
  proc InternetCreateUrl*(P1: LPURL_COMPONENTSA, P2: DWORD, P3: LPSTR, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetCreateUrlA".}
  proc InternetCanonicalizeUrl*(P1: LPCSTR, P2: LPSTR, P3: PDWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetCanonicalizeUrlA".}
  proc InternetCheckConnection*(P1: LPCSTR, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetCheckConnectionA".}
  proc InternetCombineUrl*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: PDWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetCombineUrlA".}
  proc InternetOpen*(P1: LPCSTR, P2: DWORD, P3: LPCSTR, P4: LPCSTR, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "InternetOpenA".}
  proc InternetConnect*(P1: HINTERNET, P2: LPCSTR, P3: INTERNET_PORT, P4: LPCSTR, P5: LPCSTR, P6: DWORD, P7: DWORD, P8: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "InternetConnectA".}
  proc InternetOpenUrl*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: DWORD, P6: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "InternetOpenUrlA".}
  proc InternetFindNextFile*(P1: HINTERNET, P2: PVOID): BOOL {.winapi, dynlib: "wininet", importc: "InternetFindNextFileA".}
  proc InternetQueryOption*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetQueryOptionA".}
  proc InternetSetOption*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetSetOptionA".}
  proc InternetSetOptionEx*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetSetOptionExA".}
  proc InternetGetLastResponseInfo*(P1: PDWORD, P2: LPSTR, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetGetLastResponseInfoA".}
  proc InternetReadFileEx*(P1: HINTERNET, P2: LPINTERNET_BUFFERSA, P3: DWORD, P4: DWORD_PTR): BOOL {.winapi, dynlib: "wininet", importc: "InternetReadFileExA".}
  proc FtpFindFirstFile*(P1: HINTERNET, P2: LPCSTR, P3: LPWIN32_FIND_DATA, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "FtpFindFirstFileA".}
  proc FtpGetFile*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: BOOL, P5: DWORD, P6: DWORD, P7: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "FtpGetFileA".}
  proc FtpPutFile*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "FtpPutFileA".}
  proc FtpDeleteFile*(P1: HINTERNET, P2: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpDeleteFileA".}
  proc FtpRenameFile*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpRenameFileA".}
  proc FtpOpenFile*(P1: HINTERNET, P2: LPCSTR, P3: DWORD, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "FtpOpenFileA".}
  proc FtpCreateDirectory*(P1: HINTERNET, P2: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpCreateDirectoryA".}
  proc FtpRemoveDirectory*(P1: HINTERNET, P2: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpRemoveDirectoryA".}
  proc FtpSetCurrentDirectory*(P1: HINTERNET, P2: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpSetCurrentDirectoryA".}
  proc FtpGetCurrentDirectory*(P1: HINTERNET, P2: LPSTR, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "FtpGetCurrentDirectoryA".}
  proc FtpCommand*(P1: HINTERNET, P2: BOOL, P3: DWORD, P4: LPCSTR, P5: DWORD_PTR, P6: ptr HINTERNET): BOOL {.winapi, dynlib: "wininet", importc: "FtpCommandA".}
  proc GopherGetLocatorType*(P1: LPCSTR, P2: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "GopherGetLocatorTypeA".}
  proc GopherCreateLocator*(P1: LPCSTR, P2: INTERNET_PORT, P3: LPCSTR, P4: LPCSTR, P5: DWORD, P6: LPSTR, P7: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "GopherCreateLocatorA".}
  proc GopherFindFirstFile*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: LPGOPHER_FIND_DATAA, P5: DWORD, P6: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "GopherFindFirstFileA".}
  proc GopherOpenFile*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "GopherOpenFileA".}
  proc HttpSendRequest*(P1: HINTERNET, P2: LPCSTR, P3: DWORD, P4: PVOID, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpSendRequestA".}
  proc HttpOpenRequest*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR, P5: LPCSTR, P6: ptr LPCSTR, P7: DWORD, P8: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "HttpOpenRequestA".}
  proc HttpAddRequestHeaders*(P1: HINTERNET, P2: LPCSTR, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpAddRequestHeadersA".}
  proc HttpQueryInfo*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: PDWORD, P5: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpQueryInfoA".}
  proc InternetSetCookie*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc: "InternetSetCookieA".}
  proc InternetGetCookie*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetGetCookieA".}
  proc CreateUrlCacheEntry*(P1: LPCSTR, P2: DWORD, P3: LPCSTR, P4: LPSTR, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "CreateUrlCacheEntryA".}
  proc RetrieveUrlCacheEntryStream*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD, P4: BOOL, P5: DWORD): HANDLE {.winapi, dynlib: "wininet", importc: "RetrieveUrlCacheEntryStreamA".}
  proc FindNextUrlCacheEntry*(P1: HANDLE, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "FindNextUrlCacheEntryA".}
  proc CommitUrlCacheEntry*(P1: LPCSTR, P2: LPCSTR, P3: FILETIME, P4: FILETIME, P5: DWORD, P6: LPBYTE, P7: DWORD, P8: LPCSTR, P9: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "CommitUrlCacheEntryA".}
  proc GetUrlCacheEntryInfo*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "GetUrlCacheEntryInfoA".}
  proc SetUrlCacheEntryInfo*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "SetUrlCacheEntryInfoA".}
  proc FindFirstUrlCacheEntry*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD): HANDLE {.winapi, dynlib: "wininet", importc: "FindFirstUrlCacheEntryA".}
  proc RetrieveUrlCacheEntryFile*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "RetrieveUrlCacheEntryFileA".}
  proc HttpSendRequestEx*(P1: HINTERNET, P2: LPINTERNET_BUFFERSA, P3: LPINTERNET_BUFFERSA, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpSendRequestExA".}
  proc HttpEndRequest*(P1: HINTERNET, P2: LPINTERNET_BUFFERSA, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpEndRequestA".}
  proc GetUrlCacheGroupAttribute*(P1: GROUPID, P2: DWORD, P3: DWORD, P4: LPINTERNET_CACHE_GROUP_INFOA, P5: LPDWORD, P6: LPVOID): BOOL {.winapi, dynlib: "wininet", importc: "GetUrlCacheGroupAttributeA".}
  proc SetUrlCacheGroupAttribute*(P1: GROUPID, P2: DWORD, P3: DWORD, P4: LPINTERNET_CACHE_GROUP_INFOA, P5: LPVOID): BOOL {.winapi, dynlib: "wininet", importc: "SetUrlCacheGroupAttributeA".}

type
  LPINTERNET_BUFFERS* = ptr INTERNET_BUFFERS

proc `Admin=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_ADMIN_ATTRIBUTE_TYPE) = self.u1.Admin = x
proc Admin*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_ADMIN_ATTRIBUTE_TYPE = self.u1.Admin
proc `ModDate=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_MOD_DATE_ATTRIBUTE_TYPE) = self.u1.ModDate = x
proc ModDate*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_MOD_DATE_ATTRIBUTE_TYPE = self.u1.ModDate
proc `Ttl=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_TTL_ATTRIBUTE_TYPE) = self.u1.Ttl = x
proc Ttl*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_TTL_ATTRIBUTE_TYPE = self.u1.Ttl
proc `Score=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_SCORE_ATTRIBUTE_TYPE) = self.u1.Score = x
proc Score*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_SCORE_ATTRIBUTE_TYPE = self.u1.Score
proc `ScoreRange=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE) = self.u1.ScoreRange = x
proc ScoreRange*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE = self.u1.ScoreRange
proc `Site=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_SITE_ATTRIBUTE_TYPE) = self.u1.Site = x
proc Site*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_SITE_ATTRIBUTE_TYPE = self.u1.Site
proc `Organization=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_ORGANIZATION_ATTRIBUTE_TYPE) = self.u1.Organization = x
proc Organization*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_ORGANIZATION_ATTRIBUTE_TYPE = self.u1.Organization
proc `Location=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_LOCATION_ATTRIBUTE_TYPE) = self.u1.Location = x
proc Location*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_LOCATION_ATTRIBUTE_TYPE = self.u1.Location
proc `GeographicalLocation=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE) = self.u1.GeographicalLocation = x
proc GeographicalLocation*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE = self.u1.GeographicalLocation
proc `TimeZone=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_TIMEZONE_ATTRIBUTE_TYPE) = self.u1.TimeZone = x
proc TimeZone*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_TIMEZONE_ATTRIBUTE_TYPE = self.u1.TimeZone
proc `Provider=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_PROVIDER_ATTRIBUTE_TYPE) = self.u1.Provider = x
proc Provider*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_PROVIDER_ATTRIBUTE_TYPE = self.u1.Provider
proc `Version=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_VERSION_ATTRIBUTE_TYPE) = self.u1.Version = x
proc Version*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_VERSION_ATTRIBUTE_TYPE = self.u1.Version
proc `Abstract=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_ABSTRACT_ATTRIBUTE_TYPE) = self.u1.Abstract = x
proc Abstract*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_ABSTRACT_ATTRIBUTE_TYPE = self.u1.Abstract
proc `View=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_VIEW_ATTRIBUTE_TYPE) = self.u1.View = x
proc View*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_VIEW_ATTRIBUTE_TYPE = self.u1.View
proc `Veronica=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_VERONICA_ATTRIBUTE_TYPE) = self.u1.Veronica = x
proc Veronica*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_VERONICA_ATTRIBUTE_TYPE = self.u1.Veronica
proc `Ask=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_ASK_ATTRIBUTE_TYPE) = self.u1.Ask = x
proc Ask*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_ASK_ATTRIBUTE_TYPE = self.u1.Ask
proc `Unknown=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_UNKNOWN_ATTRIBUTE_TYPE) = self.u1.Unknown = x
proc Unknown*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_UNKNOWN_ATTRIBUTE_TYPE = self.u1.Unknown

# net/winsock2.nim

const
  # GUARANTEE* = enum
  BestEffortService* = 0
  ControlledLoadService* = 1
  PredictiveService* = 2
  GuaranteedDelayService* = 3
  GuaranteedService* = 4
  # WSAESETSERVICEOP* = enum
  RNRSERVICE_REGISTER* = 0
  RNRSERVICE_DEREGISTER* = 1
  RNRSERVICE_DELETE* = 2
  # WSAECOMPARATOR* = enum
  COMP_EQUAL* = 0
  COMP_NOTLESS* = 1
  # WSACOMPLETIONTYPE* = enum
  NSP_NOTIFY_IMMEDIATELY* = 0
  NSP_NOTIFY_HWND* = 1
  NSP_NOTIFY_EVENT* = 2
  NSP_NOTIFY_PORT* = 3
  NSP_NOTIFY_APC* = 4

type
  u_char* = char
  u_short* = uint16
  u_int = uint32
  u_long* = uint32
  SOCKET* = uint32

const
  FD_SETSIZE* = 64
  SD_RECEIVE* = 0
  SD_SEND* = 1
  SD_BOTH* = 2

type
  FD_SET* {.final, pure.} = object
    fd_count*: u_int
    fd_array*: array[FD_SETSIZE, SOCKET]
  PFD_SET* = ptr FD_SET
  LPFD_SET* = ptr FD_SET
  fd_set* = FD_SET

proc WSAFDIsSet*(P1: SOCKET, P2: ptr FD_SET): int32 {.winapi, dynlib: "ws2_32", importc.}
proc FD_ISSET*(P1: SOCKET, P2: ptr FD_SET): int32 {.winapi, dynlib: "ws2_32", importc: "__WSAFDIsSet".}
proc FD_CLR*(fd: SOCKET, s: ptr FD_SET): void =
  var i: u_int = 0
  while i < s.fd_count:
    if s.fd_array[i] == fd:
      while i < s.fd_count - 1:
        s.fd_array[i] = s.fd_array[i+1]
        i.inc
      s.fd_count.dec
      break
    i.inc
proc FD_ZERO*(s: ptr FD_SET): void = s.fd_count = 0

type
  TIMEVAL* {.final, pure.} = object
    tv_sec*: int32
    tv_usec*: int32
  PTIMEVAL* = ptr TIMEVAL
  LPTIMEVAL* = ptr TIMEVAL

proc opCmp*(self: TIMEVAL, tv: TIMEVAL): int32 =
  if self.tv_sec < tv.tv_sec: return -1
  if self.tv_sec > tv.tv_sec: return 1
  if self.tv_usec < tv.tv_usec: return -1
  if self.tv_usec > tv.tv_usec: return 1
  return 0

proc timerisset*(tvp: ptr TIMEVAL): bool = tvp.tv_sec.bool or tvp.tv_usec.bool
proc timerclear*(tvp: var TIMEVAL): void = tvp.tv_sec = 0; tvp.tv_usec = 0

type
  HOSTENT* {.final, pure.} = object
    h_name*: cstring
    h_aliases*: ptr cstring
    h_addrtype*: int16
    h_length*: int16
    h_addr_list*: ptr cstring
  PHOSTENT* = ptr HOSTENT
  LPHOSTENT* = ptr HOSTENT
  LINGER* {.final, pure.} = object
    l_onoff*: u_short
    l_linger*: u_short
  PLINGER* = ptr LINGER
  LPLINGER* = ptr LINGER

proc h_addr*(self: HOSTENT): cstring = self.h_addr_list[]
proc h_addr*(self: HOSTENT, h: cstring): cstring = self.h_addr_list[] = h

const
  IOCPARAM_MASK* = 0x7f
  IOC_VOID* = 0x20000000
  IOC_OUT* = 0x40000000
  IOC_IN* = 0x80000000'u32
  IOC_INOUT* = (IOC_IN or IOC_OUT).DWORD

template IOR(x: char, y: uint8, t: untyped): DWORD = IOC_OUT.DWORD or ((t.sizeof.DWORD and IOCPARAM_MASK) shl 16) or (x.DWORD shl 8) or y
template IOW(x: char, y: uint8, t: untyped): DWORD = IOC_IN.DWORD or ((t.sizeof.DWORD and IOCPARAM_MASK) shl 16) or (x.DWORD shl 8) or y

const
  FIONBIO*    = IOW('f', 126, u_long)
  FIONREAD*   = IOR('f', 127, u_long)
  FIOASYNC*   = IOW('f', 125, u_long)
  SIOCSHIWAT* = IOW('s',   0, u_long)
  SIOCGHIWAT* = IOR('s',   1, u_long)
  SIOCSLOWAT* = IOW('s',   2, u_long)
  SIOCGLOWAT* = IOR('s',   3, u_long)
  SIOCATMARK* = IOR('s',   7, u_long)

type
  netent* {.final, pure.} = object
    n_name*: cstring
    n_aliases*: ptr cstring
    n_addrtype*: int16
    n_net*: u_long
  SERVENT* {.final, pure.} = object
    s_name*: cstring
    s_aliases*: ptr cstring
    s_port*: int16
    s_proto*: cstring
  PSERVENT* = ptr SERVENT
  LPSERVENT* = ptr SERVENT
  PROTOENT* {.final, pure.} = object
    p_name*: cstring
    p_aliases*: ptr cstring
    p_proto*: int16
  PPROTOENT* = ptr PROTOENT
  LPPROTOENT* = ptr PROTOENT

const
  IPPROTO_IP* = 0
  IPPROTO_ICMP* = 1
  IPPROTO_IGMP* = 2
  IPPROTO_GGP* = 3
  IPPROTO_TCP* = 6
  IPPROTO_PUP* = 12
  IPPROTO_UDP* = 17
  IPPROTO_IDP* = 22
  IPPROTO_ND* = 77
  IPPROTO_RAW* = 255
  IPPROTO_MAX* = 256
  IPPROTO_HOPOPTS* = 0
  IPPROTO_IPV6* = 41
  IPPROTO_ROUTING* = 43
  IPPROTO_FRAGMENT* = 44
  IPPROTO_ESP* = 50
  IPPROTO_AH* = 51
  IPPROTO_ICMPV6* = 58
  IPPROTO_NONE* = 59
  IPPROTO_DSTOPTS* = 60
  IPPORT_ECHO* = 7
  IPPORT_DISCARD* = 9
  IPPORT_SYSTAT* = 11
  IPPORT_DAYTIME* = 13
  IPPORT_NETSTAT* = 15
  IPPORT_FTP* = 21
  IPPORT_TELNET* = 23
  IPPORT_SMTP* = 25
  IPPORT_TIMESERVER* = 37
  IPPORT_NAMESERVER* = 42
  IPPORT_WHOIS* = 43
  IPPORT_MTP* = 57
  IPPORT_TFTP* = 69
  IPPORT_RJE* = 77
  IPPORT_FINGER* = 79
  IPPORT_TTYLINK* = 87
  IPPORT_SUPDUP* = 95
  IPPORT_EXECSERVER* = 512
  IPPORT_LOGINSERVER* = 513
  IPPORT_CMDSERVER* = 514
  IPPORT_EFSSERVER* = 520
  IPPORT_BIFFUDP* = 512
  IPPORT_WHOSERVER* = 513
  IPPORT_ROUTESERVER* = 520
  IPPORT_RESERVED* = 1024
  IMPLINK_IP* = 155
  IMPLINK_LOWEXPER* = 156
  IMPLINK_HIGHEXPER* = 158

type
  IN_ADDR_UNION1_STRUCT4* {.final, pure.} = object
    s_w*: u_short
    s_imp*: u_short
  IN_ADDR_UNION1_STRUCT3* {.final, pure.} = object
    s_w1*: u_short
    s_w2*: u_short
  IN_ADDR_UNION1_STRUCT2* {.final, pure.} = object
    s_net*: u_char
    s_host*: u_char
    s_lh*: u_char
    s_impno*: u_char
  IN_ADDR_UNION1_STRUCT1* {.final, pure.} = object
    s_b1*: u_char
    s_b2*: u_char
    s_b3*: u_char
    s_b4*: u_char
  IN_ADDR_UNION1* {.final, union, pure.} = object
    s1*: IN_ADDR_UNION1_STRUCT1
    s2*: IN_ADDR_UNION1_STRUCT2
    s3*: IN_ADDR_UNION1_STRUCT3
    s4*: IN_ADDR_UNION1_STRUCT4
    S_addr*: u_long
    s_addr*: u_long
  IN_ADDR* {.final, pure.} = object
    u1*: IN_ADDR_UNION1

proc IN_CLASSA*(i: int32): bool = (i and 0x80000000) == 0

const
  IN_CLASSA_NET* = -16777216
  IN_CLASSA_NSHIFT* = 24
  IN_CLASSA_HOST* = 0x00ffffff
  IN_CLASSA_MAX* = 128

proc IN_CLASSB*(i: int32): bool = (i and 0xc0000000) == 0x80000000

const
  IN_CLASSB_NET* = -65536
  IN_CLASSB_NSHIFT* = 16
  IN_CLASSB_HOST* = 0x0000ffff
  IN_CLASSB_MAX* = 65536

proc IN_CLASSC*(i: int32): bool = (i and 0xe0000000 ) == 0xc0000000

const
  IN_CLASSC_NET* = -256
  IN_CLASSC_NSHIFT* = 8
  IN_CLASSC_HOST* = 0x000000ff
  INADDR_ANY* = 0
  INADDR_LOOPBACK* = 0x7F000001
  INADDR_BROADCAST* = 0xFFFFFFFF'u32
  INADDR_NONE* = 0xFFFFFFFF'u32

type
  SOCKADDR_IN* {.final, pure.} = object
    sin_family*: int16
    sin_port*: u_short
    sin_addr*: IN_ADDR
    sin_zero*: array[8, char]
  PSOCKADDR_IN* = ptr SOCKADDR_IN
  LPSOCKADDR_IN* = ptr SOCKADDR_IN

const
  WSADESCRIPTION_LEN* = 256
  WSASYS_STATUS_LEN* = 128

type
  WSADATA* {.final, pure.} = object
    wVersion*: WORD
    wHighVersion*: WORD
    szDescription*: array[WSADESCRIPTION_LEN+1, char]
    szSystemStatus*: array[WSASYS_STATUS_LEN+1, char]
    iMaxSockets*: uint16
    iMaxUdpDg*: uint16
    lpVendorInfo*: cstring
  LPWSADATA* = ptr WSADATA

const
  IP_OPTIONS* = 1
  SO_OPTIONS* = 1
  SO_DEBUG* = 1
  SO_ACCEPTCONN* = 2
  SO_REUSEADDR* = 4
  SO_KEEPALIVE* = 8
  SO_DONTROUTE* = 16
  SO_BROADCAST* = 32
  SO_USELOOPBACK* = 64
  SO_LINGER* = 128
  SO_OOBINLINE* = 256
  SO_DONTLINGER* = (not SO_LINGER)
  SO_EXCLUSIVEADDRUSE* = (not SO_REUSEADDR)
  SO_SNDBUF* = 0x1001
  SO_RCVBUF* = 0x1002
  SO_SNDLOWAT* = 0x1003
  SO_RCVLOWAT* = 0x1004
  SO_SNDTIMEO* = 0x1005
  SO_RCVTIMEO* = 0x1006
  SO_ERROR* = 0x1007
  SO_TYPE* = 0x1008
  INVALID_SOCKET* = 0xFFFFFFFF.SOCKET
  SOCKET_ERROR* = -1
  SOCK_STREAM* = 1
  SOCK_DGRAM* = 2
  SOCK_RAW* = 3
  SOCK_RDM* = 4
  SOCK_SEQPACKET* = 5
  TCP_NODELAY* = 0x0001
  AF_UNSPEC* = 0
  AF_UNIX* = 1
  AF_INET* = 2
  AF_IMPLINK* = 3
  AF_PUP* = 4
  AF_CHAOS* = 5
  AF_IPX* = 6
  AF_NS* = 6
  AF_ISO* = 7
  AF_OSI* = AF_ISO
  AF_ECMA* = (AF_ISO + 1)
  AF_DATAKIT* = (AF_ISO + 2)
  AF_CCITT* = (AF_ISO + 3)
  AF_SNA* = (AF_ISO + 4)
  AF_DECnet* = (AF_ISO + 5)
  AF_DLI* = (AF_ISO + 6)
  AF_LAT* = (AF_ISO + 7)
  AF_HYLINK* = (AF_ISO + 8)
  AF_APPLETALK* = (AF_ISO + 9)
  AF_NETBIOS* = (AF_ISO + 10)
  AF_VOICEVIEW* = (AF_ISO + 11)
  AF_FIREFOX* = (AF_ISO + 12)
  AF_UNKNOWN1* = (AF_ISO + 13)
  AF_BAN* = (AF_ISO + 14)
  AF_ATM* = (AF_ISO + 15)
  AF_INET6* = (AF_ISO + 16)
  AF_CLUSTER* = (AF_ISO + 17)
  AF_12844* = (AF_ISO + 18)
  AF_IRDA* = (AF_ISO + 19)
  AF_NETDES* = 28
  AF_MAX* = 29

type
  SOCKADDR* {.final, pure.} = object
    sa_family*: u_short
    sa_data*: array[14, char]
  PSOCKADDR* = ptr SOCKADDR
  LPSOCKADDR* = ptr SOCKADDR
  SOCKADDR_STORAGE* {.final, pure.} = object
    ss_family*: int16
    ss_pad1*: array[6, char]
    ss_align*: int64
    ss_pad2*: array[112, char]
  PSOCKADDR_STORAGE* = ptr SOCKADDR_STORAGE
  sockproto* {.final, pure.} = object
    sp_family*: u_short
    sp_protocol*: u_short

const
  PF_UNSPEC* = AF_UNSPEC
  PF_UNIX* = AF_UNIX
  PF_INET* = AF_INET
  PF_IMPLINK* = AF_IMPLINK
  PF_PUP* = AF_PUP
  PF_CHAOS* = AF_CHAOS
  PF_NS* = AF_NS
  PF_IPX* = AF_IPX
  PF_ISO* = AF_ISO
  PF_OSI* = AF_OSI
  PF_ECMA* = AF_ECMA
  PF_DATAKIT* = AF_DATAKIT
  PF_CCITT* = AF_CCITT
  PF_SNA* = AF_SNA
  PF_DECnet* = AF_DECnet
  PF_DLI* = AF_DLI
  PF_LAT* = AF_LAT
  PF_HYLINK* = AF_HYLINK
  PF_APPLETALK* = AF_APPLETALK
  PF_VOICEVIEW* = AF_VOICEVIEW
  PF_FIREFOX* = AF_FIREFOX
  PF_UNKNOWN1* = AF_UNKNOWN1
  PF_BAN* = AF_BAN
  PF_ATM* = AF_ATM
  PF_INET6* = AF_INET6
  PF_MAX* = AF_MAX
  SOL_SOCKET* = 0xFFFF
  SOMAXCONN* = 5
  MSG_OOB* = 1
  MSG_PEEK* = 2
  MSG_DONTROUTE* = 4
  MSG_MAXIOVLEN* = 16
  MSG_PARTIAL* = 0x8000
  MAXGETHOSTSTRUCT* = 1024
  FD_READ_BIT* = 0
  FD_WRITE_BIT* = 1
  FD_OOB_BIT* = 2
  FD_ACCEPT_BIT* = 3
  FD_CONNECT_BIT* = 4
  FD_CLOSE_BIT* = 5
  FD_QOS_BIT* = 6
  FD_GROUP_QOS_BIT* = 7
  FD_ROUTING_INTERFACE_CHANGE_BIT* = 8
  FD_ADDRESS_LIST_CHANGE_BIT* = 9
  FD_MAX_EVENTS* = 10
  FD_READ* = (1  shl  FD_READ_BIT)
  FD_WRITE* = (1  shl  FD_WRITE_BIT)
  FD_OOB* = (1  shl  FD_OOB_BIT)
  FD_ACCEPT* = (1  shl  FD_ACCEPT_BIT)
  FD_CONNECT* = (1  shl  FD_CONNECT_BIT)
  FD_CLOSE* = (1  shl  FD_CLOSE_BIT)
  FD_QOS* = (1  shl  FD_QOS_BIT)
  FD_GROUP_QOS* = (1  shl  FD_GROUP_QOS_BIT)
  FD_ROUTING_INTERFACE_CHANGE* = (1  shl  FD_ROUTING_INTERFACE_CHANGE_BIT)
  FD_ADDRESS_LIST_CHANGE* = (1  shl  FD_ADDRESS_LIST_CHANGE_BIT)
  FD_ALL_EVENTS* = (( 1  shl  FD_MAX_EVENTS ) - 1)
  WSABASEERR* = 10000
  WSAEINTR* = (WSABASEERR + 4)
  WSAEBADF* = (WSABASEERR + 9)
  WSAEACCES* = (WSABASEERR + 13)
  WSAEFAULT* = (WSABASEERR + 14)
  WSAEINVAL* = (WSABASEERR + 22)
  WSAEMFILE* = (WSABASEERR + 24)
  WSAEWOULDBLOCK* = (WSABASEERR + 35)
  WSAEINPROGRESS* = (WSABASEERR + 36)
  WSAEALREADY* = (WSABASEERR + 37)
  WSAENOTSOCK* = (WSABASEERR + 38)
  WSAEDESTADDRREQ* = (WSABASEERR + 39)
  WSAEMSGSIZE* = (WSABASEERR + 40)
  WSAEPROTOTYPE* = (WSABASEERR + 41)
  WSAENOPROTOOPT* = (WSABASEERR + 42)
  WSAEPROTONOSUPPORT* = (WSABASEERR + 43)
  WSAESOCKTNOSUPPORT* = (WSABASEERR + 44)
  WSAEOPNOTSUPP* = (WSABASEERR + 45)
  WSAEPFNOSUPPORT* = (WSABASEERR + 46)
  WSAEAFNOSUPPORT* = (WSABASEERR + 47)
  WSAEADDRINUSE* = (WSABASEERR + 48)
  WSAEADDRNOTAVAIL* = (WSABASEERR + 49)
  WSAENETDOWN* = (WSABASEERR + 50)
  WSAENETUNREACH* = (WSABASEERR + 51)
  WSAENETRESET* = (WSABASEERR + 52)
  WSAECONNABORTED* = (WSABASEERR + 53)
  WSAECONNRESET* = (WSABASEERR + 54)
  WSAENOBUFS* = (WSABASEERR + 55)
  WSAEISCONN* = (WSABASEERR + 56)
  WSAENOTCONN* = (WSABASEERR + 57)
  WSAESHUTDOWN* = (WSABASEERR + 58)
  WSAETOOMANYREFS* = (WSABASEERR + 59)
  WSAETIMEDOUT* = (WSABASEERR + 60)
  WSAECONNREFUSED* = (WSABASEERR + 61)
  WSAELOOP* = (WSABASEERR + 62)
  WSAENAMETOOLONG* = (WSABASEERR + 63)
  WSAEHOSTDOWN* = (WSABASEERR + 64)
  WSAEHOSTUNREACH* = (WSABASEERR + 65)
  WSAENOTEMPTY* = (WSABASEERR + 66)
  WSAEPROCLIM* = (WSABASEERR + 67)
  WSAEUSERS* = (WSABASEERR + 68)
  WSAEDQUOT* = (WSABASEERR + 69)
  WSAESTALE* = (WSABASEERR + 70)
  WSAEREMOTE* = (WSABASEERR + 71)
  WSAEDISCON* = (WSABASEERR + 101)
  WSASYSNOTREADY* = (WSABASEERR + 91)
  WSAVERNOTSUPPORTED* = (WSABASEERR + 92)
  WSANOTINITIALISED* = (WSABASEERR + 93)
  WSAHOST_NOT_FOUND* = (WSABASEERR + 1001)
  WSATRY_AGAIN* = (WSABASEERR + 1002)
  WSANO_RECOVERY* = (WSABASEERR + 1003)
  WSANO_DATA* = (WSABASEERR + 1004)
  WSANO_ADDRESS* = WSANO_DATA
  OLD_WSAENOMORE* = (WSABASEERR + 102)
  OLD_WSAECANCELLED* = (WSABASEERR + 103)
  WSAEINVALIDPROCTABLE* = (WSABASEERR + 104)
  WSAEINVALIDPROVIDER* = (WSABASEERR + 105)
  WSAEPROVIDERFAILEDINIT* = (WSABASEERR + 106)
  WSASYSCALLFAILURE* = (WSABASEERR + 107)
  WSASERVICE_NOT_FOUND* = (WSABASEERR + 108)
  WSATYPE_NOT_FOUND* = (WSABASEERR + 109)
  WSA_E_NO_MORE* = (WSABASEERR + 110)
  WSA_E_CANCELLED* = (WSABASEERR + 111)
  WSAEREFUSED* = (WSABASEERR + 112)
  WSA_QOS_RECEIVERS* = (WSABASEERR + 1005)
  WSA_QOS_SENDERS* = (WSABASEERR + 1006)
  WSA_QOS_NO_SENDERS* = (WSABASEERR + 1007)
  WSA_QOS_NO_RECEIVERS* = (WSABASEERR + 1008)
  WSA_QOS_REQUEST_CONFIRMED* = (WSABASEERR + 1009)
  WSA_QOS_ADMISSION_FAILURE* = (WSABASEERR + 1010)
  WSA_QOS_POLICY_FAILURE* = (WSABASEERR + 1011)
  WSA_QOS_BAD_STYLE* = (WSABASEERR + 1012)
  WSA_QOS_BAD_OBJECT* = (WSABASEERR + 1013)
  WSA_QOS_TRAFFIC_CTRL_ERROR* = (WSABASEERR + 1014)
  WSA_QOS_GENERIC_ERROR* = (WSABASEERR + 1015)
  WSA_QOS_ESERVICETYPE* = (WSABASEERR + 1016)
  WSA_QOS_EFLOWSPEC* = (WSABASEERR + 1017)
  WSA_QOS_EPROVSPECBUF* = (WSABASEERR + 1018)
  WSA_QOS_EFILTERSTYLE* = (WSABASEERR + 1019)
  WSA_QOS_EFILTERTYPE* = (WSABASEERR + 1020)
  WSA_QOS_EFILTERCOUNT* = (WSABASEERR + 1021)
  WSA_QOS_EOBJLENGTH* = (WSABASEERR + 1022)
  WSA_QOS_EFLOWCOUNT* = (WSABASEERR + 1023)
  WSA_QOS_EUNKOWNPSOBJ* = (WSABASEERR + 1024)
  WSA_QOS_EPOLICYOBJ* = (WSABASEERR + 1025)
  WSA_QOS_EFLOWDESC* = (WSABASEERR + 1026)
  WSA_QOS_EPSFLOWSPEC* = (WSABASEERR + 1027)
  WSA_QOS_EPSFILTERSPEC* = (WSABASEERR + 1028)
  WSA_QOS_ESDMODEOBJ* = (WSABASEERR + 1029)
  WSA_QOS_ESHAPERATEOBJ* = (WSABASEERR + 1030)
  WSA_QOS_RESERVED_PETYPE* = (WSABASEERR + 1031)
  HOST_NOT_FOUND* = WSAHOST_NOT_FOUND
  TRY_AGAIN* = WSATRY_AGAIN
  NO_RECOVERY* = WSANO_RECOVERY
  NO_DATA* = WSANO_DATA
  NO_ADDRESS* = WSANO_ADDRESS

proc accept*(P1: SOCKET, P2: ptr SOCKADDR, P3: ptr int32): SOCKET {.winapi, dynlib: "ws2_32", importc.}
proc `bind`*(P1: SOCKET, P2: ptr SOCKADDR, P3: int32): int32 {.winapi, dynlib: "ws2_32", importc: "bind".}
proc closesocket*(P1: SOCKET): int32 {.winapi, dynlib: "ws2_32", importc.}
proc connect*(P1: SOCKET, P2: ptr SOCKADDR, P3: int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc ioctlsocket*(P1: SOCKET, P2: int32, P3: ptr u_long): int32 {.winapi, dynlib: "ws2_32", importc.}
proc getpeername*(P1: SOCKET, P2: ptr SOCKADDR, P3: ptr int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc getsockname*(P1: SOCKET, P2: ptr SOCKADDR, P3: ptr int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc getsockopt*(P1: SOCKET, P2: int32, P3: int32, P4: pointer, P5: ptr int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc inet_addr*(P1: cstring): uint32 {.winapi, dynlib: "ws2_32", importc.}
proc listen*(P1: SOCKET, P2: int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc recv*(P1: SOCKET, P2: ptr uint8, P3: int32, P4: int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc recvfrom*(P1: SOCKET, P2: ptr uint8, P3: int32, P4: int32, P5: ptr SOCKADDR, P6: ptr int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc send*(P1: SOCKET, P2: ptr uint8, P3: int32, P4: int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc sendto*(P1: SOCKET, P2: ptr uint8, P3: int32, P4: int32, P5: ptr SOCKADDR, P6: int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc setsockopt*(P1: SOCKET, P2: int32, P3: int32, P4: pointer, P5: int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc shutdown*(P1: SOCKET, P2: int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc socket*(P1: int32, P2: int32, P3: int32): SOCKET {.winapi, dynlib: "ws2_32", importc.}

type
  LPFN_ACCEPT* = accept.type
  LPFN_BIND* = `bind`.type
  LPFN_CLOSESOCKET* = closesocket.type
  LPFN_CONNECT* = connect.type
  LPFN_IOCTLSOCKET* = ioctlsocket.type
  LPFN_GETPEERNAME* = getpeername.type
  LPFN_GETSOCKNAME* = getsockname.type
  LPFN_GETSOCKOPT* = getsockopt.type
  LPFN_INET_ADDR* = inet_addr.type
  LPFN_LISTEN* = listen.type
  LPFN_RECV* = recv.type
  LPFN_RECVFROM* = recvfrom.type
  LPFN_SEND* = send.type
  LPFN_SENDTO* = sendto.type
  LPFN_SETSOCKOPT* = setsockopt.type
  LPFN_SHUTDOWN* = shutdown.type
  LPFN_SOCKET* = socket.type

proc inet_ntoa*(P1: IN_ADDR): cstring {.winapi, dynlib: "ws2_32", importc.}
proc gethostbyaddr*(P1: cstring, P2: int32, P3: int32): ptr HOSTENT {.winapi, dynlib: "ws2_32", importc.}
proc gethostbyname*(P1: cstring): ptr HOSTENT {.winapi, dynlib: "ws2_32", importc.}
proc getservbyport*(P1: int32, P2: cstring): ptr SERVENT {.winapi, dynlib: "ws2_32", importc.}
proc getservbyname*(P1: cstring, P2: cstring): ptr SERVENT {.winapi, dynlib: "ws2_32", importc.}
proc getprotobynumber*(P1: int32): ptr PROTOENT {.winapi, dynlib: "ws2_32", importc.}
proc getprotobyname*(P1: cstring): ptr PROTOENT {.winapi, dynlib: "ws2_32", importc.}

type
  LPFN_INET_NTOA* = inet_ntoa.type
  LPFN_GETHOSTBYADDR* = gethostbyaddr.type
  LPFN_GETHOSTBYNAME* = gethostbyname.type
  LPFN_GETSERVBYPORT* = getservbyport.type
  LPFN_GETSERVBYNAME* = getservbyname.type
  LPFN_GETPROTOBYNUMBER* = getprotobynumber.type
  LPFN_GETPROTOBYNAME* = getprotobyname.type

proc WSAStartup*(P1: WORD, P2: LPWSADATA): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSACleanup*(): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSASetLastError*(P1: int32): void {.winapi, dynlib: "ws2_32", importc.}
proc WSAGetLastError*(): int32 {.winapi, dynlib: "ws2_32", importc.}
proc h_errno*(): int32 {.winapi, dynlib: "ws2_32", importc: "WSAGetLastError".}

type
  LPFN_WSASTARTUP* = WSAStartup.type
  LPFN_WSACLEANUP* = WSACleanup.type
  LPFN_WSASETLASTERROR* = WSASetLastError.type
  LPFN_WSAGETLASTERROR* = WSAGetLastError.type

proc WSAIsBlocking*(): BOOL {.winapi, dynlib: "ws2_32", importc.}
proc WSAUnhookBlockingHook*(): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSASetBlockingHook*(P1: FARPROC): FARPROC {.winapi, dynlib: "ws2_32", importc.}
proc WSACancelBlockingCall*(): int32 {.winapi, dynlib: "ws2_32", importc.}

type
  LPFN_WSAISBLOCKING* = WSAIsBlocking.type
  LPFN_WSAUNHOOKBLOCKINGHOOK* = WSAUnhookBlockingHook.type
  LPFN_WSASETBLOCKINGHOOK* = WSASetBlockingHook.type
  LPFN_WSACANCELBLOCKINGCALL* = WSACancelBlockingCall.type

proc WSAAsyncGetServByName*(P1: HWND, P2: u_int, P3: cstring, P4: cstring, P5: cstring, P6: int32): HANDLE {.winapi, dynlib: "ws2_32", importc.}
proc WSAAsyncGetServByPort*(P1: HWND, P2: u_int, P3: int32, P4: cstring, P5: cstring, P6: int32): HANDLE {.winapi, dynlib: "ws2_32", importc.}
proc WSAAsyncGetProtoByName*(P1: HWND, P2: u_int, P3: cstring, P4: cstring, P5: int32): HANDLE {.winapi, dynlib: "ws2_32", importc.}
proc WSAAsyncGetProtoByNumber*(P1: HWND, P2: u_int, P3: int32, P4: cstring, P5: int32): HANDLE {.winapi, dynlib: "ws2_32", importc.}
proc WSAAsyncGetHostByName*(P1: HWND, P2: u_int, P3: cstring, P4: cstring, P5: int32): HANDLE {.winapi, dynlib: "ws2_32", importc.}
proc WSAAsyncGetHostByAddr*(P1: HWND, P2: u_int, P3: cstring, P4: int32, P5: int32, P6: cstring, P7: int32): HANDLE {.winapi, dynlib: "ws2_32", importc.}
proc WSACancelAsyncRequest*(P1: HANDLE): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSAAsyncSelect*(P1: SOCKET, P2: HWND, P3: u_int, P4: int64): int32 {.winapi, dynlib: "ws2_32", importc.}

type
  LPFN_WSAAsyncGetServByName* = WSAAsyncGetServByName.type
  LPFN_WSAASYNCGETSERVBYPORT* = WSAAsyncGetServByPort.type
  LPFN_WSAASYNCGETPROTOBYNAME* = WSAAsyncGetProtoByName.type
  LPFN_WSAASYNCGETPROTOBYNUMBER* = WSAAsyncGetProtoByNumber.type
  LPFN_WSAASYNCGETHOSTBYNAME* = WSAAsyncGetHostByName.type
  LPFN_WSAASYNCGETHOSTBYADDR* = WSAAsyncGetHostByAddr.type
  LPFN_WSACANCELASYNCREQUEST* = WSACancelAsyncRequest.type
  LPFN_WSAASYNCSELECT* = WSAAsyncSelect.type

proc htonl*(P1: u_long): u_long {.winapi, dynlib: "ws2_32", importc.}
proc ntohl*(P1: u_long): u_long {.winapi, dynlib: "ws2_32", importc.}
proc htons*(P1: u_short): u_short {.winapi, dynlib: "ws2_32", importc.}
proc ntohs*(P1: u_short): u_short {.winapi, dynlib: "ws2_32", importc.}
proc select*(nfds: int32, P2: ptr fd_set, P3: ptr fd_set, P4: ptr fd_set, P5: ptr TIMEVAL): int32 {.winapi, dynlib: "ws2_32", importc.}

type
  LPFN_HTONL* = htonl.type
  LPFN_NTOHL* = ntohl.type
  LPFN_HTONS* = htons.type
  LPFN_NTOHS* = ntohs.type
  LPFN_SELECT* = select.type

proc gethostname*(P1: cstring, P2: int32): int32 {.winapi, dynlib: "ws2_32", importc.}

type
  LPFN_GETHOSTNAME* = gethostname.type

proc WSAMAKEASYNCREPLY*(a, b: auto): uint32 = (b.uint16.uint32 shl 16) or a.uint16.uint32
proc WSAMAKESELECTREPLY*(a, b: auto): uint32 = (b.uint16.uint32 shl 16) or a.uint16.uint32
proc WSAGETASYNCBUFLEN*(L: auto): uint16 = L.uint16
proc WSAGETSELECTEVENT*(L: auto): uint16 = L.uint16
proc WSAGETASYNCERROR*(L: auto): uint16 = (L shr 16).uint16
proc WSAGETSELECTERROR*(L: auto): uint16 = (L shr 16).uint16

const
  ADDR_ANY* = INADDR_ANY

proc IN_CLASSD*(i: int32): bool = (i and 0xf0000000) == 0xe0000000

const
  IN_CLASSD_NET* = -268435456
  IN_CLASSD_NSHIFT* = 28
  IN_CLASSD_HOST* = 0x0fffffff
  IN_MULTICAST* = IN_CLASSD
  FROM_PROTOCOL_INFO* = -1
  SO_GROUP_ID* = 0x2001
  SO_GROUP_PRIORITY* = 0x2002
  SO_MAX_MSG_SIZE* = 0x2003
  SO_PROTOCOL_INFOA* = 0x2004
  SO_PROTOCOL_INFOW* = 0x2005
  PVD_CONFIG* = 0x3001
  MSG_INTERRUPT* = 0x10

type
  WSAEVENT* = HANDLE
  LPWSAEVENT* = LPHANDLE
  WSAOVERLAPPED* = OVERLAPPED
  LPWSAOVERLAPPED* = ptr OVERLAPPED

const
  WSA_IO_PENDING* = ERROR_IO_PENDING
  WSA_IO_INCOMPLETE* = ERROR_IO_INCOMPLETE
  WSA_INVALID_HANDLE* = ERROR_INVALID_HANDLE
  WSA_INVALID_PARAMETER* = ERROR_INVALID_PARAMETER
  WSA_NOT_ENOUGH_MEMORY* = ERROR_NOT_ENOUGH_MEMORY
  WSA_OPERATION_ABORTED* = ERROR_OPERATION_ABORTED
  WSA_INVALID_EVENT* = 0.WSAEVENT
  WSA_MAXIMUM_WAIT_EVENTS* = MAXIMUM_WAIT_OBJECTS
  WSA_WAIT_FAILED* = 0xFFFFFFFF'u32
  WSA_WAIT_EVENT_0* = WAIT_OBJECT_0
  WSA_WAIT_IO_COMPLETION* = WAIT_IO_COMPLETION
  WSA_WAIT_TIMEOUT* = WAIT_TIMEOUT
  WSA_INFINITE* = INFINITE

type
  WSABUF* {.final, pure.} = object
    len*: uint32
    buf*: cstring
  LPWSABUF* = ptr WSABUF
  GUARANTEE* = int32
  SERVICETYPE* = uint32
  FLOWSPEC* {.final, pure.} = object
    TokenRate*: uint32
    TokenBucketSize*: uint32
    PeakBandwidth*: uint32
    Latency*: uint32
    DelayVariation*: uint32
    ServiceType*: SERVICETYPE
    MaxSduSize*: uint32
    MinimumPolicedSize*: uint32
  PFLOWSPEC* = ptr FLOWSPEC
  LPFLOWSPEC* = ptr FLOWSPEC
  QOS* {.final, pure.} = object
    SendingFlowspec*: FLOWSPEC
    ReceivingFlowspec*: FLOWSPEC
    ProviderSpecific*: WSABUF
  LPQOS* = ptr QOS

const
  CF_ACCEPT* = 0
  CF_REJECT* = 1
  CF_DEFER* = 2

type
  GROUP* = uint32

const
  SG_UNCONSTRAINED_GROUP* = 0x01
  SG_CONSTRAINED_GROUP* = 0x2

type
  WSANETWORKEVENTS* {.final, pure.} = object
    lNetworkEvents*: int32
    iErrorCode*: array[FD_MAX_EVENTS, int32]
  LPWSANETWORKEVENTS* = ptr WSANETWORKEVENTS

const
  MAX_PROTOCOL_CHAIN* = 7
  BASE_PROTOCOL* = 1
  LAYERED_PROTOCOL* = 0

type
  WSAESETSERVICEOP* = int32
  PWSAESETSERVICEOP* = ptr WSAESETSERVICEOP
  LPWSAESETSERVICEOP* = ptr WSAESETSERVICEOP
  AFPROTOCOLS* {.final, pure.} = object
    iAddressFamily*: INT
    iProtocol*: INT
  PAFPROTOCOLS* = ptr AFPROTOCOLS
  LPAFPROTOCOLS* = ptr AFPROTOCOLS
  WSAECOMPARATOR* = int32
  PWSAECOMPARATOR* = ptr WSAECOMPARATOR
  LPWSAECOMPARATOR* = ptr WSAECOMPARATOR
  WSAVERSION* {.final, pure.} = object
    dwVersion*: DWORD
    ecHow*: WSAECOMPARATOR
  PWSAVERSION* = ptr WSAVERSION
  LPWSAVERSION* = ptr WSAVERSION
  SOCKET_ADDRESS* {.final, pure.} = object
    lpSockaddr*: LPSOCKADDR
    iSockaddrLength*: INT
  PSOCKET_ADDRESS* = ptr SOCKET_ADDRESS
  LPSOCKET_ADDRESS* = ptr SOCKET_ADDRESS
  CSADDR_INFO* {.final, pure.} = object
    LocalAddr*: SOCKET_ADDRESS
    RemoteAddr*: SOCKET_ADDRESS
    iSocketType*: INT
    iProtocol*: INT
  PCSADDR_INFO* = ptr CSADDR_INFO
  LPCSADDR_INFO* = ptr CSADDR_INFO
  SOCKET_ADDRESS_LIST* {.final, pure.} = object
    iAddressCount*: INT
    Address*: array[1, SOCKET_ADDRESS]
  LPSOCKET_ADDRESS_LIST* = ptr SOCKET_ADDRESS_LIST
  # BLOB* {.final, pure.} = object
  #   cbSize*: ULONG
  #   pBlobData*: ptr BYTE
  # PBLOB* = ptr BLOB
  # LPBLOB* = ptr BLOB
  WSAQUERYSETA* {.final, pure.} = object
    dwSize*: DWORD
    lpszServiceInstanceName*: LPSTR
    lpServiceClassId*: LPGUID
    lpVersion*: LPWSAVERSION
    lpszComment*: LPSTR
    dwNameSpace*: DWORD
    lpNSProviderId*: LPGUID
    lpszContext*: LPSTR
    dwNumberOfProtocols*: DWORD
    lpafpProtocols*: LPAFPROTOCOLS
    lpszQueryString*: LPSTR
    dwNumberOfCsAddrs*: DWORD
    lpcsaBuffer*: LPCSADDR_INFO
    dwOutputFlags*: DWORD
    lpBlob*: LPBLOB
  PWSAQUERYSETA* = ptr WSAQUERYSETA
  LPWSAQUERYSETA* = ptr WSAQUERYSETA
  WSAQUERYSETW* {.final, pure.} = object
    dwSize*: DWORD
    lpszServiceInstanceName*: LPWSTR
    lpServiceClassId*: LPGUID
    lpVersion*: LPWSAVERSION
    lpszComment*: LPWSTR
    dwNameSpace*: DWORD
    lpNSProviderId*: LPGUID
    lpszContext*: LPWSTR
    dwNumberOfProtocols*: DWORD
    lpafpProtocols*: LPAFPROTOCOLS
    lpszQueryString*: LPWSTR
    dwNumberOfCsAddrs*: DWORD
    lpcsaBuffer*: LPCSADDR_INFO
    dwOutputFlags*: DWORD
    lpBlob*: LPBLOB
  PWSAQUERYSETW* = ptr WSAQUERYSETW
  LPWSAQUERYSETW* = ptr WSAQUERYSETW

when not defined(winansi):
  type
    WSAQUERYSET* = WSAQUERYSETW
    PWSAQUERYSET* = PWSAQUERYSETW
    LPWSAQUERYSET* = LPWSAQUERYSETW

else:
  type
    WSAQUERYSET* = WSAQUERYSETA
    PWSAQUERYSET* = PWSAQUERYSETA
    LPWSAQUERYSET* = LPWSAQUERYSETA

const
  LUP_DEEP* = 0x0001
  LUP_CONTAINERS* = 0x0002
  LUP_NOCONTAINERS* = 0x0004
  LUP_NEAREST* = 0x0008
  LUP_RETURN_NAME* = 0x0010
  LUP_RETURN_TYPE* = 0x0020
  LUP_RETURN_VERSION* = 0x0040
  LUP_RETURN_COMMENT* = 0x0080
  LUP_RETURN_ADDR* = 0x0100
  LUP_RETURN_BLOB* = 0x0200
  LUP_RETURN_ALIASES* = 0x0400
  LUP_RETURN_QUERY_STRING* = 0x0800
  LUP_RETURN_ALL* = 0x0FF0
  LUP_RES_SERVICE* = 0x8000
  LUP_FLUSHCACHE* = 0x1000
  LUP_FLUSHPREVIOUS* = 0x2000

type
  WSANSCLASSINFOA* {.final, pure.} = object
    lpszName*: LPSTR
    dwNameSpace*: DWORD
    dwValueType*: DWORD
    dwValueSize*: DWORD
    lpValue*: LPVOID
  PWSANSCLASSINFOA* = ptr WSANSCLASSINFOA
  LPWSANSCLASSINFOA* = ptr WSANSCLASSINFOA
  WSANSCLASSINFOW* {.final, pure.} = object
    lpszName*: LPWSTR
    dwNameSpace*: DWORD
    dwValueType*: DWORD
    dwValueSize*: DWORD
    lpValue*: LPVOID
  PWSANSCLASSINFOW* = ptr WSANSCLASSINFOW
  LPWSANSCLASSINFOW* = ptr WSANSCLASSINFOW

when not defined(winansi):
  type
    WSANSCLASSINFO* = WSANSCLASSINFOW
    PWSANSCLASSINFO* = PWSANSCLASSINFOW
    LPWSANSCLASSINFO* = LPWSANSCLASSINFOW

else:
  type
    WSANSCLASSINFO* = WSANSCLASSINFOA
    PWSANSCLASSINFO* = PWSANSCLASSINFOA
    LPWSANSCLASSINFO* = LPWSANSCLASSINFOA

type
  WSASERVICECLASSINFOA* {.final, pure.} = object
    lpServiceClassId*: LPGUID
    lpszServiceClassName*: LPSTR
    dwCount*: DWORD
    lpClassInfos*: LPWSANSCLASSINFOA
  PWSASERVICECLASSINFOA* = ptr WSASERVICECLASSINFOA
  LPWSASERVICECLASSINFOA* = ptr WSASERVICECLASSINFOA
  WSASERVICECLASSINFOW* {.final, pure.} = object
    lpServiceClassId*: LPGUID
    lpszServiceClassName*: LPWSTR
    dwCount*: DWORD
    lpClassInfos*: LPWSANSCLASSINFOW
  PWSASERVICECLASSINFOW* = ptr WSASERVICECLASSINFOW
  LPWSASERVICECLASSINFOW* = ptr WSASERVICECLASSINFOW

when not defined(winansi):
  type
    WSASERVICECLASSINFO* = WSASERVICECLASSINFOW
    PWSASERVICECLASSINFO* = PWSASERVICECLASSINFOW
    LPWSASERVICECLASSINFO* = LPWSASERVICECLASSINFOW

else:
  type
    WSASERVICECLASSINFO* = WSASERVICECLASSINFOA
    PWSASERVICECLASSINFO* = PWSASERVICECLASSINFOA
    LPWSASERVICECLASSINFO* = LPWSASERVICECLASSINFOA

type
  WSANAMESPACE_INFOA* {.final, pure.} = object
    NSProviderId*: GUID
    dwNameSpace*: DWORD
    fActive*: BOOL
    dwVersion*: DWORD
    lpszIdentifier*: LPSTR
  PWSANAMESPACE_INFOA* = ptr WSANAMESPACE_INFOA
  LPWSANAMESPACE_INFOA* = ptr WSANAMESPACE_INFOA
  WSANAMESPACE_INFOW* {.final, pure.} = object
    NSProviderId*: GUID
    dwNameSpace*: DWORD
    fActive*: BOOL
    dwVersion*: DWORD
    lpszIdentifier*: LPWSTR
  PWSANAMESPACE_INFOW* = ptr WSANAMESPACE_INFOW
  LPWSANAMESPACE_INFOW* = ptr WSANAMESPACE_INFOW

when not defined(winansi):
  type
    WSANAMESPACE_INFO* = WSANAMESPACE_INFOW
    PWSANAMESPACE_INFO* = PWSANAMESPACE_INFOW
    LPWSANAMESPACE_INFO* = LPWSANAMESPACE_INFOW

else:
  type
    WSANAMESPACE_INFO* = WSANAMESPACE_INFOA
    PWSANAMESPACE_INFO* = PWSANAMESPACE_INFOA
    LPWSANAMESPACE_INFO* = LPWSANAMESPACE_INFOA

type
  WSAPROTOCOLCHAIN* {.final, pure.} = object
    ChainLen*: int32
    ChainEntries*: array[MAX_PROTOCOL_CHAIN, DWORD]
  LPWSAPROTOCOLCHAIN* = ptr WSAPROTOCOLCHAIN

const
  WSAPROTOCOL_LEN* = 255

type
  WSAPROTOCOL_INFOA* {.final, pure.} = object
    dwServiceFlags1*: DWORD
    dwServiceFlags2*: DWORD
    dwServiceFlags3*: DWORD
    dwServiceFlags4*: DWORD
    dwProviderFlags*: DWORD
    ProviderId*: GUID
    dwCatalogEntryId*: DWORD
    ProtocolChain*: WSAPROTOCOLCHAIN
    iVersion*: int32
    iAddressFamily*: int32
    iMaxSockAddr*: int32
    iMinSockAddr*: int32
    iSocketType*: int32
    iProtocol*: int32
    iProtocolMaxOffset*: int32
    iNetworkByteOrder*: int32
    iSecurityScheme*: int32
    dwMessageSize*: DWORD
    dwProviderReserved*: DWORD
    szProtocol*: array[WSAPROTOCOL_LEN+1, CHAR]
  LPWSAPROTOCOL_INFOA* = ptr WSAPROTOCOL_INFOA
  WSAPROTOCOL_INFOW* {.final, pure.} = object
    dwServiceFlags1*: DWORD
    dwServiceFlags2*: DWORD
    dwServiceFlags3*: DWORD
    dwServiceFlags4*: DWORD
    dwProviderFlags*: DWORD
    ProviderId*: GUID
    dwCatalogEntryId*: DWORD
    ProtocolChain*: WSAPROTOCOLCHAIN
    iVersion*: int32
    iAddressFamily*: int32
    iMaxSockAddr*: int32
    iMinSockAddr*: int32
    iSocketType*: int32
    iProtocol*: int32
    iProtocolMaxOffset*: int32
    iNetworkByteOrder*: int32
    iSecurityScheme*: int32
    dwMessageSize*: DWORD
    dwProviderReserved*: DWORD
    szProtocol*: array[WSAPROTOCOL_LEN+1, WCHAR]
  LPWSAPROTOCOL_INFOW* = ptr WSAPROTOCOL_INFOW
  LPCONDITIONPROC* = proc (P1: LPWSABUF, P2: LPWSABUF, P3: LPQOS, P4: LPQOS, P5: LPWSABUF, P6: LPWSABUF, P7: ptr GROUP, P8: DWORD): int32 {.cdecl.}
  LPWSAOVERLAPPED_COMPLETION_ROUTINE* = proc (P1: DWORD, P2: DWORD, P3: LPWSAOVERLAPPED, P4: DWORD): void {.stdcall.}

when not defined(winansi):
  type
    WSAPROTOCOL_INFO* = WSAPROTOCOL_INFOW
    LPWSAPROTOCOL_INFO* = LPWSAPROTOCOL_INFOW

else:
  type
    WSAPROTOCOL_INFO* = WSAPROTOCOL_INFOA
    LPWSAPROTOCOL_INFO* = LPWSAPROTOCOL_INFOA

type
  WSACOMPLETIONTYPE* = int32
  PWSACOMPLETIONTYPE* = ptr WSACOMPLETIONTYPE
  LPWSACOMPLETIONTYPE* = ptr WSACOMPLETIONTYPE
  WSACOMPLETION_WSACOMPLETION_PARAMETERS_WSACOMPLETION_PORT* {.final, pure.} = object
    lpOverlapped*: LPWSAOVERLAPPED
    hPort*: HANDLE
    Key*: ULONG_PTR
  WSACOMPLETION_WSACOMPLETION_PARAMETERS_WSACOMPLETION_APC* {.final, pure.} = object
    lpOverlapped*: LPWSAOVERLAPPED
    lpfnCompletionProc*: LPWSAOVERLAPPED_COMPLETION_ROUTINE
  WSACOMPLETION_WSACOMPLETION_PARAMETERS_WSACOMPLETION_EVENT* {.final, pure.} = object
    lpOverlapped*: LPWSAOVERLAPPED
  WSACOMPLETION_WSACOMPLETION_PARAMETERS_WSACOMPLETION_WINDOWMESSAGE* {.final, pure.} = object
    hWnd*: HWND
    uMsg*: UINT
    context*: WPARAM
  WSACOMPLETION_WSACOMPLETION_PARAMETERS* {.final, union, pure.} = object
    WindowMessage*: WSACOMPLETION_WSACOMPLETION_PARAMETERS_WSACOMPLETION_WINDOWMESSAGE
    Event*: WSACOMPLETION_WSACOMPLETION_PARAMETERS_WSACOMPLETION_EVENT
    Apc*: WSACOMPLETION_WSACOMPLETION_PARAMETERS_WSACOMPLETION_APC
    Port*: WSACOMPLETION_WSACOMPLETION_PARAMETERS_WSACOMPLETION_PORT
  WSACOMPLETION* {.final, pure.} = object
    Type*: WSACOMPLETIONTYPE
    Parameters*: WSACOMPLETION_WSACOMPLETION_PARAMETERS
  PWSACOMPLETION* = ptr WSACOMPLETION
  LPWSACOMPLETION* = ptr WSACOMPLETION

const
  PFL_MULTIPLE_PROTO_ENTRIES* = 0x00000001
  PFL_RECOMMENDED_PROTO_ENTRY* = 0x00000002
  PFL_HIDDEN* = 0x00000004
  PFL_MATCHES_PROTOCOL_ZERO* = 0x00000008
  XP1_CONNECTIONLESS* = 0x00000001
  XP1_GUARANTEED_DELIVERY* = 0x00000002
  XP1_GUARANTEED_ORDER* = 0x00000004
  XP1_MESSAGE_ORIENTED* = 0x00000008
  XP1_PSEUDO_STREAM* = 0x00000010
  XP1_GRACEFUL_CLOSE* = 0x00000020
  XP1_EXPEDITED_DATA* = 0x00000040
  XP1_CONNECT_DATA* = 0x00000080
  XP1_DISCONNECT_DATA* = 0x00000100
  XP1_SUPPORT_BROADCAST* = 0x00000200
  XP1_SUPPORT_MULTIPOINT* = 0x00000400
  XP1_MULTIPOINT_CONTROL_PLANE* = 0x00000800
  XP1_MULTIPOINT_DATA_PLANE* = 0x00001000
  XP1_QOS_SUPPORTED* = 0x00002000
  XP1_INTERRUPT* = 0x00004000
  XP1_UNI_SEND* = 0x00008000
  XP1_UNI_RECV* = 0x00010000
  XP1_IFS_HANDLES* = 0x00020000
  XP1_PARTIAL_MESSAGE* = 0x00040000
  BIGENDIAN* = 0x0000
  LITTLEENDIAN* = 0x0001
  SECURITY_PROTOCOL_NONE* = 0x0000
  JL_SENDER_ONLY* = 0x01
  JL_RECEIVER_ONLY* = 0x02
  JL_BOTH* = 0x04
  WSA_FLAG_OVERLAPPED* = 0x01
  WSA_FLAG_MULTIPOINT_C_ROOT* = 0x02
  WSA_FLAG_MULTIPOINT_C_LEAF* = 0x04
  WSA_FLAG_MULTIPOINT_D_ROOT* = 0x08
  WSA_FLAG_MULTIPOINT_D_LEAF* = 0x10
  IOC_UNIX* = 0x00000000
  IOC_WS2* = 0x08000000
  IOC_PROTOCOL* = 0x10000000
  IOC_VENDOR* = 0x18000000

template WSAIO(x, y: DWORD): DWORD = IOC_VOID.DWORD or x or y
template WSAIOR(x, y: DWORD): DWORD = IOC_OUT.DWORD or x or y
template WSAIOW(x, y: DWORD): DWORD = IOC_IN.DWORD or x or y
template WSAIORW(x, y: DWORD): DWORD = IOC_INOUT.DWORD or x or y

const
  SIO_ASSOCIATE_HANDLE*               = WSAIOW(IOC_WS2.DWORD, 1.DWORD)
  SIO_ENABLE_CIRCULAR_QUEUEING*       = WSAIO(IOC_WS2.DWORD, 2.DWORD)
  SIO_FIND_ROUTE*                     = WSAIOR(IOC_WS2.DWORD, 3.DWORD)
  SIO_FLUSH*                          = WSAIO(IOC_WS2.DWORD, 4.DWORD)
  SIO_GET_BROADCAST_ADDRESS*          = WSAIOR(IOC_WS2.DWORD, 5.DWORD)
  SIO_GET_EXTENSION_FUNCTION_POINTER* = WSAIORW(IOC_WS2.DWORD, 6.DWORD)
  SIO_GET_QOS*                        = WSAIORW(IOC_WS2.DWORD, 7.DWORD)
  SIO_GET_GROUP_QOS*                  = WSAIORW(IOC_WS2.DWORD, 8.DWORD)
  SIO_MULTIPOINT_LOOPBACK*            = WSAIOW(IOC_WS2.DWORD, 9.DWORD)
  SIO_MULTICAST_SCOPE*                = WSAIOW(IOC_WS2.DWORD, 10.DWORD)
  SIO_SET_QOS*                        = WSAIOW(IOC_WS2.DWORD, 11.DWORD)
  SIO_SET_GROUP_QOS*                  = WSAIOW(IOC_WS2.DWORD, 12.DWORD)
  SIO_TRANSLATE_HANDLE*               = WSAIORW(IOC_WS2.DWORD, 13.DWORD)
  SIO_ROUTING_INTERFACE_QUERY*        = WSAIORW(IOC_WS2.DWORD, 20.DWORD)
  SIO_ROUTING_INTERFACE_CHANGE*       = WSAIOW(IOC_WS2.DWORD, 21.DWORD)
  SIO_ADDRESS_LIST_QUERY*             = WSAIOR(IOC_WS2.DWORD, 22.DWORD)
  SIO_ADDRESS_LIST_CHANGE*            = WSAIO(IOC_WS2.DWORD, 23.DWORD)
  SIO_QUERY_TARGET_PNP_HANDLE*        = WSAIOR(IOC_WS2.DWORD, 24.DWORD)
  SIO_NSP_NOTIFY_CHANGE*              = WSAIOW(IOC_WS2.DWORD, 25.DWORD)
  TH_NETDEV* = 1
  TH_TAPI* = 2

proc WSAAccept*(P1: SOCKET, P2: ptr SOCKADDR, P3: LPINT, P4: LPCONDITIONPROC, P5: DWORD): SOCKET {.winapi, dynlib: "ws2_32", importc.}
proc WSAAddressToStringA*(P1: LPSOCKADDR, P2: DWORD, P3: LPWSAPROTOCOL_INFOA, P4: LPSTR, P5: LPDWORD): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAAddressToStringW*(P1: LPSOCKADDR, P2: DWORD, P3: LPWSAPROTOCOL_INFOW, P4: LPWSTR, P5: LPDWORD): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSACloseEvent*(P1: WSAEVENT): BOOL {.winapi, dynlib: "ws2_32", importc.}
proc WSAConnect*(P1: SOCKET, P2: ptr SOCKADDR, P3: int32, P4: LPWSABUF, P5: LPWSABUF, P6: LPQOS, P7: LPQOS): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSACreateEvent*(): WSAEVENT {.winapi, dynlib: "ws2_32", importc.}
proc WSADuplicateSocketA*(P1: SOCKET, P2: DWORD, P3: LPWSAPROTOCOL_INFOA): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSADuplicateSocketW*(P1: SOCKET, P2: DWORD, P3: LPWSAPROTOCOL_INFOW): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSAEnumNameSpaceProvidersA*(P1: LPDWORD, P2: LPWSANAMESPACE_INFOA): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAEnumNameSpaceProvidersW*(P1: LPDWORD, P2: LPWSANAMESPACE_INFOW): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAEnumNetworkEvents*(P1: SOCKET, P2: WSAEVENT, P3: LPWSANETWORKEVENTS): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSAEnumProtocolsA*(P1: LPINT, P2: LPWSAPROTOCOL_INFOA, P3: LPDWORD): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSAEnumProtocolsW*(P1: LPINT, P2: LPWSAPROTOCOL_INFOW, P3: LPDWORD): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSAEventSelect*(P1: SOCKET, P2: WSAEVENT, P3: int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSAGetOverlappedResult*(P1: SOCKET, P2: LPWSAOVERLAPPED, P3: LPDWORD, P4: BOOL, P5: LPDWORD): BOOL {.winapi, dynlib: "ws2_32", importc.}
proc WSAGetQOSByName*(P1: SOCKET, P2: LPWSABUF, P3: LPQOS): BOOL {.winapi, dynlib: "ws2_32", importc.}
proc WSAGetServiceClassInfoA*(P1: LPGUID, P2: LPGUID, P3: LPDWORD, P4: LPWSASERVICECLASSINFOA): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAGetServiceClassInfoW*(P1: LPGUID, P2: LPGUID, P3: LPDWORD, P4: LPWSASERVICECLASSINFOW): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAGetServiceClassNameByClassIdA*(P1: LPGUID, P2: LPSTR, P3: LPDWORD): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAGetServiceClassNameByClassIdW*(P1: LPGUID, P2: LPWSTR, P3: LPDWORD): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAHtonl*(P1: SOCKET, P2: uint32, P3: ptr uint32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSAHtons*(P1: SOCKET, P2: uint16, P3: ptr uint16): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSAInstallServiceClassA*(P1: LPWSASERVICECLASSINFOA): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAInstallServiceClassW*(P1: LPWSASERVICECLASSINFOW): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAIoctl*(P1: SOCKET, P2: DWORD, P3: LPVOID, P4: DWORD, P5: LPVOID, P6: DWORD, P7: LPDWORD, P8: LPWSAOVERLAPPED, P9: LPWSAOVERLAPPED_COMPLETION_ROUTINE): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSAJoinLeaf*(P1: SOCKET, P2: ptr SOCKADDR, P3: int32, P4: LPWSABUF, P5: LPWSABUF, P6: LPQOS, P7: LPQOS, P8: DWORD): SOCKET {.winapi, dynlib: "ws2_32", importc.}
proc WSALookupServiceBeginA*(P1: LPWSAQUERYSETA, P2: DWORD, P3: LPHANDLE): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSALookupServiceBeginW*(lpqsRestrictions: LPWSAQUERYSETW, P2: DWORD, P3: LPHANDLE): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSALookupServiceNextA*(P1: HANDLE, P2: DWORD, P3: LPDWORD, P4: LPWSAQUERYSETA): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSALookupServiceNextW*(P1: HANDLE, P2: DWORD, P3: LPDWORD, P4: LPWSAQUERYSETW): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSALookupServiceEnd*(P1: HANDLE): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSANSPIoctl*(P1: HANDLE, P2: DWORD, P3: LPVOID, P4: DWORD, P5: LPVOID, P6: DWORD, P7: LPDWORD, P8: LPWSACOMPLETION): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSANtohl*(P1: SOCKET, P2: uint32, P3: ptr uint32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSANtohs*(P1: SOCKET, P2: uint16, P3: ptr uint16): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSARecv*(P1: SOCKET, P2: LPWSABUF, P3: DWORD, P4: LPDWORD, P5: LPDWORD, P6: LPWSAOVERLAPPED, P7: LPWSAOVERLAPPED_COMPLETION_ROUTINE): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSARecvDisconnect*(P1: SOCKET, P2: LPWSABUF): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSARecvFrom*(P1: SOCKET, P2: LPWSABUF, P3: DWORD, P4: LPDWORD, P5: LPDWORD, P6: ptr SOCKADDR, P7: LPINT, P8: LPWSAOVERLAPPED, P9: LPWSAOVERLAPPED_COMPLETION_ROUTINE): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSARemoveServiceClass*(P1: LPGUID): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAResetEvent*(P1: WSAEVENT): BOOL {.winapi, dynlib: "ws2_32", importc.}
proc WSASend*(P1: SOCKET, P2: LPWSABUF, P3: DWORD, P4: LPDWORD, P5: DWORD, P6: LPWSAOVERLAPPED, P7: LPWSAOVERLAPPED_COMPLETION_ROUTINE): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSASendDisconnect*(P1: SOCKET, P2: LPWSABUF): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSASendTo*(P1: SOCKET, P2: LPWSABUF, P3: DWORD, P4: LPDWORD, P5: DWORD, P6: ptr SOCKADDR, P7: int32, P8: LPWSAOVERLAPPED, P9: LPWSAOVERLAPPED_COMPLETION_ROUTINE): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSASetEvent*(P1: WSAEVENT): BOOL {.winapi, dynlib: "ws2_32", importc.}
proc WSASetServiceA*(P1: LPWSAQUERYSETA, P2: WSAESETSERVICEOP, P3: DWORD): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSASetServiceW*(P1: LPWSAQUERYSETW, P2: WSAESETSERVICEOP, P3: DWORD): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSASocketA*(P1: int32, P2: int32, P3: int32, P4: LPWSAPROTOCOL_INFOA, P5: GROUP, P6: DWORD): SOCKET {.winapi, dynlib: "ws2_32", importc.}
proc WSASocketW*(P1: int32, P2: int32, P3: int32, P4: LPWSAPROTOCOL_INFOW, P5: GROUP, P6: DWORD): SOCKET {.winapi, dynlib: "ws2_32", importc.}
proc WSAStringToAddressA*(P1: LPSTR, P2: INT, P3: LPWSAPROTOCOL_INFOA, P4: LPSOCKADDR, P5: LPINT): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAStringToAddressW*(P1: LPWSTR, P2: INT, P3: LPWSAPROTOCOL_INFOW, P4: LPSOCKADDR, P5: LPINT): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAWaitForMultipleEvents*(P1: DWORD, P2: ptr WSAEVENT, P3: BOOL, P4: DWORD, P5: BOOL): DWORD {.winapi, dynlib: "ws2_32", importc.}

type
  LPFN_WSAACCEPT* = WSAAccept.type
  LPFN_WSAADDRESSTOSTRINGA* = WSAAddressToStringA.type
  LPFN_WSAADDRESSTOSTRINGW* = WSAAddressToStringW.type
  LPFN_WSACLOSEEVENT* = WSACloseEvent.type
  LPFN_WSACONNECT* = WSAConnect.type
  LPFN_WSACREATEEVENT* = WSACreateEvent.type
  LPFN_WSADUPLICATESOCKETA* = WSADuplicateSocketA.type
  LPFN_WSADUPLICATESOCKETW* = WSADuplicateSocketW.type
  LPFN_WSAENUMNAMESPACEPROVIDERSA* = WSAEnumNameSpaceProvidersA.type
  LPFN_WSAENUMNAMESPACEPROVIDERSW* = WSAEnumNameSpaceProvidersW.type
  LPFN_WSAENUMNETWORKEVENTS* = WSAEnumNetworkEvents.type
  LPFN_WSAENUMPROTOCOLSA* = WSAEnumProtocolsA.type
  LPFN_WSAENUMPROTOCOLSW* = WSAEnumProtocolsW.type
  LPFN_WSAEVENTSELECT* = WSAEventSelect.type
  LPFN_WSAGETOVERLAPPEDRESULT* = WSAGetOverlappedResult.type
  LPFN_WSAGETQOSBYNAME* = WSAGetQOSByName.type
  LPFN_WSAGETSERVICECLASSINFOA* = WSAGetServiceClassInfoA.type
  LPFN_WSAGETSERVICECLASSINFOW* = WSAGetServiceClassInfoW.type
  LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDA* = WSAGetServiceClassNameByClassIdA.type
  LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDW* = WSAGetServiceClassNameByClassIdW.type
  LPFN_WSAHTONL* = WSAHtonl.type
  LPFN_WSAHTONS* = WSAHtons.type
  LPFN_WSAINSTALLSERVICECLASSA* = WSAInstallServiceClassA.type
  LPFN_WSAINSTALLSERVICECLASSW* = WSAInstallServiceClassW.type
  LPFN_WSAIOCTL* = WSAIoctl.type
  LPFN_WSAJOINLEAF* = WSAJoinLeaf.type
  LPFN_WSALOOKUPSERVICEBEGINA* = WSALookupServiceBeginA.type
  LPFN_WSALOOKUPSERVICEBEGINW* = WSALookupServiceBeginW.type
  LPFN_WSALOOKUPSERVICENEXTA* = WSALookupServiceNextA.type
  LPFN_WSALOOKUPSERVICENEXTW* = WSALookupServiceNextW.type
  LPFN_WSALOOKUPSERVICEEND* = WSALookupServiceEnd.type
  LPFN_WSANSPIoctl* = WSANSPIoctl.type
  LPFN_WSANTOHL* = WSANtohl.type
  LPFN_WSANTOHS* = WSANtohs.type
  LPFN_WSARECV* = WSARecv.type
  LPFN_WSARECVDISCONNECT* = WSARecvDisconnect.type
  LPFN_WSARECVFROM* = WSARecvFrom.type
  LPFN_WSAREMOVESERVICECLASS* = WSARemoveServiceClass.type
  LPFN_WSARESETEVENT* = WSAResetEvent.type
  LPFN_WSASEND* = WSASend.type
  LPFN_WSASENDDISCONNECT* = WSASendDisconnect.type
  LPFN_WSASENDTO* = WSASendTo.type
  LPFN_WSASETEVENT* = WSASetEvent.type
  LPFN_WSASETSERVICEA* = WSASetServiceA.type
  LPFN_WSASETSERVICEW* = WSASetServiceW.type
  LPFN_WSASOCKETA* = WSASocketA.type
  LPFN_WSASOCKETW* = WSASocketW.type
  LPFN_WSASTRINGTOADDRESSA* = WSAStringToAddressA.type
  LPFN_WSASTRINGTOADDRESSW* = WSAStringToAddressW.type
  LPFN_WSAWAITFORMULTIPLEEVENTS* = WSAWaitForMultipleEvents.type

when not defined(winansi):
  type
    LPFN_WSAADDRESSTOSTRING* = LPFN_WSAADDRESSTOSTRINGW
    LPFN_WSADUPLICATESOCKET* = LPFN_WSADUPLICATESOCKETW
    LPFN_WSAENUMNAMESPACEPROVIDERS* = LPFN_WSAENUMNAMESPACEPROVIDERSW
    LPFN_WSAENUMPROTOCOLS* = LPFN_WSAENUMPROTOCOLSW
    LPFN_WSAGETSERVICECLASSINFO* = LPFN_WSAGETSERVICECLASSINFOW
    LPFN_WSAGETSERVICECLASSNAMEBYCLASSID* = LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDW
    LPFN_WSAINSTALLSERVICECLASS* = LPFN_WSAINSTALLSERVICECLASSW
    LPFN_WSALOOKUPSERVICEBEGIN* = LPFN_WSALOOKUPSERVICEBEGINW
    LPFN_WSALOOKUPSERVICENEXT* = LPFN_WSALOOKUPSERVICENEXTW
    LPFN_WSASETSERVICE* = LPFN_WSASETSERVICEW
    LPFN_WSASOCKET* = LPFN_WSASOCKETW
    LPFN_WSASTRINGTOADDRESS* = LPFN_WSASTRINGTOADDRESSW

  proc WSAAddressToString*(P1: LPSOCKADDR, P2: DWORD, P3: LPWSAPROTOCOL_INFOW, P4: LPWSTR, P5: LPDWORD): INT {.winapi, dynlib: "ws2_32", importc: "WSAAddressToStringW".}
  proc WSADuplicateSocket*(P1: SOCKET, P2: DWORD, P3: LPWSAPROTOCOL_INFOW): int32 {.winapi, dynlib: "ws2_32", importc: "WSADuplicateSocketW".}
  proc WSAEnumNameSpaceProviders*(P1: LPDWORD, P2: LPWSANAMESPACE_INFOW): INT {.winapi, dynlib: "ws2_32", importc: "WSAEnumNameSpaceProvidersW".}
  proc WSAEnumProtocols*(P1: LPINT, P2: LPWSAPROTOCOL_INFOW, P3: LPDWORD): int32 {.winapi, dynlib: "ws2_32", importc: "WSAEnumProtocolsW".}
  proc WSAGetServiceClassInfo*(P1: LPGUID, P2: LPGUID, P3: LPDWORD, P4: LPWSASERVICECLASSINFOW): INT {.winapi, dynlib: "ws2_32", importc: "WSAGetServiceClassInfoW".}
  proc WSAGetServiceClassNameByClassId*(P1: LPGUID, P2: LPWSTR, P3: LPDWORD): INT {.winapi, dynlib: "ws2_32", importc: "WSAGetServiceClassNameByClassIdW".}
  proc WSASetService*(P1: LPWSAQUERYSETW, P2: WSAESETSERVICEOP, P3: DWORD): INT {.winapi, dynlib: "ws2_32", importc: "WSASetServiceW".}
  proc WSASocket*(P1: int32, P2: int32, P3: int32, P4: LPWSAPROTOCOL_INFOW, P5: GROUP, P6: DWORD): SOCKET {.winapi, dynlib: "ws2_32", importc: "WSASocketW".}
  proc WSAStringToAddress*(P1: LPWSTR, P2: INT, P3: LPWSAPROTOCOL_INFOW, P4: LPSOCKADDR, P5: LPINT): INT {.winapi, dynlib: "ws2_32", importc: "WSAStringToAddressW".}
  proc WSALookupServiceBegin*(lpqsRestrictions: LPWSAQUERYSETW, P2: DWORD, P3: LPHANDLE): INT {.winapi, dynlib: "ws2_32", importc: "WSALookupServiceBeginW".}
  proc WSALookupServiceNext*(P1: HANDLE, P2: DWORD, P3: LPDWORD, P4: LPWSAQUERYSETW): INT {.winapi, dynlib: "ws2_32", importc: "WSALookupServiceNextW".}
  proc WSAInstallServiceClass*(P1: LPWSASERVICECLASSINFOW): INT {.winapi, dynlib: "ws2_32", importc: "WSAInstallServiceClassW".}

else:
  type
    LPFN_WSAADDRESSTOSTRING* = LPFN_WSAADDRESSTOSTRINGA
    LPFN_WSADUPLICATESOCKET* = LPFN_WSADUPLICATESOCKETW
    LPFN_WSAENUMNAMESPACEPROVIDERS* = LPFN_WSAENUMNAMESPACEPROVIDERSA
    LPFN_WSAENUMPROTOCOLS* = LPFN_WSAENUMPROTOCOLSA
    LPFN_WSAGETSERVICECLASSINFO* = LPFN_WSAGETSERVICECLASSINFOA
    LPFN_WSAGETSERVICECLASSNAMEBYCLASSID* = LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDA
    LPFN_WSAINSTALLSERVICECLASS* = LPFN_WSAINSTALLSERVICECLASSA
    LPFN_WSALOOKUPSERVICEBEGIN* = LPFN_WSALOOKUPSERVICEBEGINA
    LPFN_WSALOOKUPSERVICENEXT* = LPFN_WSALOOKUPSERVICENEXTA
    LPFN_WSASETSERVICE* = LPFN_WSASETSERVICEA
    LPFN_WSASOCKET* = LPFN_WSASOCKETA
    LPFN_WSASTRINGTOADDRESS* = LPFN_WSASTRINGTOADDRESSA

  proc WSAAddressToString*(P1: LPSOCKADDR, P2: DWORD, P3: LPWSAPROTOCOL_INFOA, P4: LPSTR, P5: LPDWORD): INT {.winapi, dynlib: "ws2_32", importc: "WSAAddressToStringA".}
  proc WSADuplicateSocket*(P1: SOCKET, P2: DWORD, P3: LPWSAPROTOCOL_INFOA): int32 {.winapi, dynlib: "ws2_32", importc: "WSADuplicateSocketA".}
  proc WSAEnumNameSpaceProviders*(P1: LPDWORD, P2: LPWSANAMESPACE_INFOA): INT {.winapi, dynlib: "ws2_32", importc: "WSAEnumNameSpaceProvidersA".}
  proc WSAEnumProtocols*(P1: LPINT, P2: LPWSAPROTOCOL_INFOA, P3: LPDWORD): int32 {.winapi, dynlib: "ws2_32", importc: "WSAEnumProtocolsA".}
  proc WSAGetServiceClassInfo*(P1: LPGUID, P2: LPGUID, P3: LPDWORD, P4: LPWSASERVICECLASSINFOA): INT {.winapi, dynlib: "ws2_32", importc: "WSAGetServiceClassInfoA".}
  proc WSAGetServiceClassNameByClassId*(P1: LPGUID, P2: LPSTR, P3: LPDWORD): INT {.winapi, dynlib: "ws2_32", importc: "WSAGetServiceClassNameByClassIdA".}
  proc WSAInstallServiceClass*(P1: LPWSASERVICECLASSINFOA): INT {.winapi, dynlib: "ws2_32", importc: "WSAInstallServiceClassA".}
  proc WSALookupServiceBegin*(P1: LPWSAQUERYSETA, P2: DWORD, P3: LPHANDLE): INT {.winapi, dynlib: "ws2_32", importc: "WSALookupServiceBeginA".}
  proc WSALookupServiceNext*(P1: HANDLE, P2: DWORD, P3: LPDWORD, P4: LPWSAQUERYSETA): INT {.winapi, dynlib: "ws2_32", importc: "WSALookupServiceNextA".}
  proc WSASocket*(P1: int32, P2: int32, P3: int32, P4: LPWSAPROTOCOL_INFOA, P5: GROUP, P6: DWORD): SOCKET {.winapi, dynlib: "ws2_32", importc: "WSASocketA".}
  proc WSAStringToAddress*(P1: LPSTR, P2: INT, P3: LPWSAPROTOCOL_INFOA, P4: LPSOCKADDR, P5: LPINT): INT {.winapi, dynlib: "ws2_32", importc: "WSAStringToAddressA".}
  proc WSASetService*(P1: LPWSAQUERYSETA, P2: WSAESETSERVICEOP, P3: DWORD): INT {.winapi, dynlib: "ws2_32", importc: "WSASetServiceA".}

proc `s_b1=`*(self: var IN_ADDR, x: u_char) = self.u1.s1.s_b1 = x
proc s_b1*(self: IN_ADDR): u_char = self.u1.s1.s_b1
proc `s_b2=`*(self: var IN_ADDR, x: u_char) = self.u1.s1.s_b2 = x
proc s_b2*(self: IN_ADDR): u_char = self.u1.s1.s_b2
proc `s_b3=`*(self: var IN_ADDR, x: u_char) = self.u1.s1.s_b3 = x
proc s_b3*(self: IN_ADDR): u_char = self.u1.s1.s_b3
proc `s_b4=`*(self: var IN_ADDR, x: u_char) = self.u1.s1.s_b4 = x
proc s_b4*(self: IN_ADDR): u_char = self.u1.s1.s_b4
proc `s_net=`*(self: var IN_ADDR, x: u_char) = self.u1.s2.s_net = x
proc s_net*(self: IN_ADDR): u_char = self.u1.s2.s_net
proc `s_host=`*(self: var IN_ADDR, x: u_char) = self.u1.s2.s_host = x
proc s_host*(self: IN_ADDR): u_char = self.u1.s2.s_host
proc `s_lh=`*(self: var IN_ADDR, x: u_char) = self.u1.s2.s_lh = x
proc s_lh*(self: IN_ADDR): u_char = self.u1.s2.s_lh
proc `s_impno=`*(self: var IN_ADDR, x: u_char) = self.u1.s2.s_impno = x
proc s_impno*(self: IN_ADDR): u_char = self.u1.s2.s_impno
proc `s_w1=`*(self: var IN_ADDR, x: u_short) = self.u1.s3.s_w1 = x
proc s_w1*(self: IN_ADDR): u_short = self.u1.s3.s_w1
proc `s_w2=`*(self: var IN_ADDR, x: u_short) = self.u1.s3.s_w2 = x
proc s_w2*(self: IN_ADDR): u_short = self.u1.s3.s_w2
proc `s_w=`*(self: var IN_ADDR, x: u_short) = self.u1.s4.s_w = x
proc s_w*(self: IN_ADDR): u_short = self.u1.s4.s_w
proc `s_imp=`*(self: var IN_ADDR, x: u_short) = self.u1.s4.s_imp = x
proc s_imp*(self: IN_ADDR): u_short = self.u1.s4.s_imp
proc `S_addr=`*(self: var IN_ADDR, x: u_long) = self.u1.S_addr = x
proc S_addr*(self: IN_ADDR): u_long = self.u1.S_addr
proc `s_addr=`*(self: var IN_ADDR, x: u_long) = self.u1.s_addr = x
proc s_addr*(self: IN_ADDR): u_long = self.u1.s_addr

# net/mswsock.nim

const
  SO_MAXDG* = 0x7009
  SO_MAXPATHDG* = 0x700A
  SO_CONNDATA* = 0x7000
  SO_CONNOPT* = 0x7001
  SO_DISCDATA* = 0x7002
  SO_DISCOPT* = 0x7003
  SO_CONNDATALEN* = 0x7004
  SO_CONNOPTLEN* = 0x7005
  SO_DISCDATALEN* = 0x7006
  SO_DISCOPTLEN* = 0x7007
  SO_UPDATE_ACCEPT_CONTENT* = 0x700B
  SO_OPENTYPE* = 0x7008
  SO_SYNCHRONOUS_ALERT* = 0x0010
  SO_SYNCHRONOUS_NONALERT* = 0x0020
  SO_CONNECT_TIME* = 0x700C
  TCP_BSDURGENT* = 0x7000
  TF_DISCONNECT* = 1
  TF_REUSE_SOCKET* = 2
  TF_WRITE_BEHIND* = 4
  TF_USE_DEFAULT_WORKER* = 0
  TF_USE_SYSTEM_THREAD* = 16
  TF_USE_KERNEL_APC* = 32

type
  TRANSMIT_FILE_BUFFERS* {.final, pure.} = object
    Head*: PVOID
    HeadLength*: DWORD
    Tail*: PVOID
    TailLength*: DWORD
  PTRANSMIT_FILE_BUFFERS* = ptr TRANSMIT_FILE_BUFFERS
  LPTRANSMIT_FILE_BUFFERS* = ptr TRANSMIT_FILE_BUFFERS

proc WSARecvEx*(P1: SOCKET, P2: cstring, P3: int32, P4: ptr int32): int32 {.winapi, dynlib: "mswsock", importc.}
proc GetAcceptExSockaddrs*(P1: PVOID, P2: DWORD, P3: DWORD, P4: DWORD, P5: ptr ptr SOCKADDR, P6: LPINT, P7: ptr ptr SOCKADDR, P8: LPINT): VOID {.winapi, dynlib: "mswsock", importc.}
proc TransmitFile*(P1: SOCKET, P2: HANDLE, P3: DWORD, P4: DWORD, P5: LPOVERLAPPED, P6: LPTRANSMIT_FILE_BUFFERS, P7: DWORD): BOOL {.winapi, dynlib: "mswsock", importc.}

type
  LPFN_ACCEPTEX* = proc (P1: SOCKET, P2: SOCKET, P3: PVOID, P4: DWORD, P5: DWORD, P6: DWORD, P7: LPDWORD, P8: LPOVERLAPPED): BOOL {.cdecl.}

const
  WSAID_ACCEPTEX* = DEFINE_GUID(0xb5367df1'u32, 0xcbac, 0x11cf, [0x95'u8, 0xca, 0x00, 0x80, 0x5f, 0x48, 0xa1, 0x92])

type
  LPFN_CONNECTEX* = proc (P1: SOCKET, P2: ptr SOCKADDR, P3: int32, P4: PVOID, P5: DWORD, P6: LPDWORD, P7: LPOVERLAPPED): BOOL {.cdecl.}

const
  WSAID_CONNECTEX* = DEFINE_GUID(0x25a207b9'u32, 0xddf3, 0x4660, [0x8e'u8, 0xe9, 0x76, 0xe5, 0x8c, 0x74, 0x06, 0x3e])
  TP_ELEMENT_FILE* = 1
  TP_ELEMENT_MEMORY* = 2
  TP_ELEMENT_EOP* = 4

type
  TRANSMIT_PACKETS_ELEMENT_UNION1_STRUCT1* {.final, pure.} = object
    nFileOffset*: LARGE_INTEGER
    hFile*: HANDLE
  TRANSMIT_PACKETS_ELEMENT_UNION1* {.final, union, pure.} = object
    s1*: TRANSMIT_PACKETS_ELEMENT_UNION1_STRUCT1
    pBuffer*: PVOID
  TRANSMIT_PACKETS_ELEMENT* {.final, pure.} = object
    dwElFlags*: ULONG
    cLength*: ULONG
    u1*: TRANSMIT_PACKETS_ELEMENT_UNION1
  WSAMSG* {.final, pure.} = object
    name*: LPSOCKADDR
    namelen*: INT
    lpBuffers*: LPWSABUF
    dwBufferCount*: DWORD
    Control*: WSABUF
    dwFlags*: DWORD
  PWSAMSG* = ptr WSAMSG
  LPWSAMSG* = ptr WSAMSG
  WSACMSGHDR* {.final, pure.} = object
    cmsg_len*: UINT
    cmsg_level*: INT
    cmsg_type*: INT

proc DisconnectEx*(P1: SOCKET, P2: LPOVERLAPPED, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "mswsock", importc.}
proc WSARecvMsg*(P1: SOCKET, P2: LPWSAMSG, P3: LPDWORD, P4: LPWSAOVERLAPPED, P5: LPWSAOVERLAPPED_COMPLETION_ROUTINE): int32 {.winapi, dynlib: "mswsock", importc.}

proc `nFileOffset=`*(self: var TRANSMIT_PACKETS_ELEMENT, x: LARGE_INTEGER) = self.u1.s1.nFileOffset = x
proc nFileOffset*(self: TRANSMIT_PACKETS_ELEMENT): LARGE_INTEGER = self.u1.s1.nFileOffset
proc `hFile=`*(self: var TRANSMIT_PACKETS_ELEMENT, x: HANDLE) = self.u1.s1.hFile = x
proc hFile*(self: TRANSMIT_PACKETS_ELEMENT): HANDLE = self.u1.s1.hFile
proc `pBuffer=`*(self: var TRANSMIT_PACKETS_ELEMENT, x: PVOID) = self.u1.pBuffer = x
proc pBuffer*(self: TRANSMIT_PACKETS_ELEMENT): PVOID = self.u1.pBuffer

# net/lmerr.nim

const
  NERR_Success* = 0
  NERR_BASE* = 2100
  NERR_NetNotStarted* = NERR_BASE + 2
  NERR_UnknownServer* = (NERR_BASE + 2) + 1
  NERR_ShareMem* = (NERR_BASE + 2) + 2
  NERR_NoNetworkResource* = (NERR_BASE + 2) + 3
  NERR_RemoteOnly* = (NERR_BASE + 2) + 4
  NERR_DevNotRedirected* = (NERR_BASE + 2) + 5
  NERR_ServerNotStarted* = NERR_BASE + 14
  NERR_ItemNotFound* = (NERR_BASE + 14) + 1
  NERR_UnknownDevDir* = (NERR_BASE + 14) + 2
  NERR_RedirectedPath* = (NERR_BASE + 14) + 3
  NERR_DuplicateShare* = (NERR_BASE + 14) + 4
  NERR_NoRoom* = (NERR_BASE + 14) + 5
  NERR_TooManyItems* = NERR_BASE + 21
  NERR_InvalidMaxUsers* = (NERR_BASE + 21) + 1
  NERR_BufTooSmall* = (NERR_BASE + 21) + 2
  NERR_RemoteErr* = NERR_BASE + 27
  NERR_LanmanIniError* = NERR_BASE + 31
  NERR_NetworkError* = NERR_BASE + 36
  NERR_WkstaInconsistentState* = (NERR_BASE + 36) + 1
  NERR_WkstaNotStarted* = (NERR_BASE + 36) + 2
  NERR_BrowserNotStarted* = (NERR_BASE + 36) + 3
  NERR_InternalError* = (NERR_BASE + 36) + 4
  NERR_BadTransactConfig* = (NERR_BASE + 36) + 5
  NERR_InvalidAPI* = (NERR_BASE + 36) + 6
  NERR_BadEventName* = (NERR_BASE + 36) + 7
  NERR_DupNameReboot* = (NERR_BASE + 36) + 8
  NERR_CfgCompNotFound* = NERR_BASE + 46
  NERR_CfgParamNotFound* = (NERR_BASE + 46) + 1
  NERR_LineTooLong* = NERR_BASE + 49
  NERR_QNotFound* = (NERR_BASE + 49) + 1
  NERR_JobNotFound* = (NERR_BASE + 49) + 2
  NERR_DestNotFound* = (NERR_BASE + 49) + 3
  NERR_DestExists* = (NERR_BASE + 49) + 4
  NERR_QExists* = (NERR_BASE + 49) + 5
  NERR_QNoRoom* = (NERR_BASE + 49) + 6
  NERR_JobNoRoom* = (NERR_BASE + 49) + 7
  NERR_DestNoRoom* = (NERR_BASE + 49) + 8
  NERR_DestIdle* = (NERR_BASE + 49) + 9
  NERR_DestInvalidOp* = (NERR_BASE + 49) + 10
  NERR_ProcNoRespond* = (NERR_BASE + 49) + 11
  NERR_SpoolerNotLoaded* = (NERR_BASE + 49) + 12
  NERR_DestInvalidState* = (NERR_BASE + 49) + 13
  NERR_QInvalidState* = (NERR_BASE + 49) + 14
  NERR_JobInvalidState* = (NERR_BASE + 49) + 15
  NERR_SpoolNoMemory* = (NERR_BASE + 49) + 16
  NERR_DriverNotFound* = (NERR_BASE + 49) + 17
  NERR_DataTypeInvalid* = (NERR_BASE + 49) + 18
  NERR_ProcNotFound* = (NERR_BASE + 49) + 19
  NERR_ServiceTableLocked* = NERR_BASE + 80
  NERR_ServiceTableFull* = (NERR_BASE + 80) + 1
  NERR_ServiceInstalled* = (NERR_BASE + 80) + 2
  NERR_ServiceEntryLocked* = (NERR_BASE + 80) + 3
  NERR_ServiceNotInstalled* = (NERR_BASE + 80) + 4
  NERR_BadServiceName* = (NERR_BASE + 80) + 5
  NERR_ServiceCtlTimeout* = (NERR_BASE + 80) + 6
  NERR_ServiceCtlBusy* = (NERR_BASE + 80) + 7
  NERR_BadServiceProgName* = (NERR_BASE + 80) + 8
  NERR_ServiceNotCtrl* = (NERR_BASE + 80) + 9
  NERR_ServiceKillProc* = (NERR_BASE + 80) + 10
  NERR_ServiceCtlNotValid* = (NERR_BASE + 80) + 11
  NERR_NotInDispatchTbl* = (NERR_BASE + 80) + 12
  NERR_BadControlRecv* = (NERR_BASE + 80) + 13
  NERR_ServiceNotStarting* = (NERR_BASE + 80) + 14
  NERR_AlreadyLoggedOn* = NERR_BASE + 100
  NERR_NotLoggedOn* = (NERR_BASE + 100) + 1
  NERR_BadUsername* = (NERR_BASE + 100) + 2
  NERR_BadPassword* = (NERR_BASE + 100) + 3
  NERR_UnableToAddName_W* = (NERR_BASE + 100) + 4
  NERR_UnableToAddName_F* = (NERR_BASE + 100) + 5
  NERR_UnableToDelName_W* = (NERR_BASE + 100) + 6
  NERR_UnableToDelName_F* = (NERR_BASE + 100) + 7
  NERR_LogonsPaused* = NERR_BASE + 109
  NERR_LogonServerConflict* = (NERR_BASE + 109) + 1
  NERR_LogonNoUserPath* = (NERR_BASE + 109) + 2
  NERR_LogonScriptError* = (NERR_BASE + 109) + 3
  NERR_StandaloneLogon* = NERR_BASE + 114
  NERR_LogonServerNotFound* = (NERR_BASE + 114) + 1
  NERR_LogonDomainExists* = (NERR_BASE + 114) + 2
  NERR_NonValidatedLogon* = (NERR_BASE + 114) + 3
  NERR_ACFNotFound* = NERR_BASE + 119
  NERR_GroupNotFound* = (NERR_BASE + 119) + 1
  NERR_UserNotFound* = (NERR_BASE + 119) + 2
  NERR_ResourceNotFound* = (NERR_BASE + 119) + 3
  NERR_GroupExists* = (NERR_BASE + 119) + 4
  NERR_UserExists* = (NERR_BASE + 119) + 5
  NERR_ResourceExists* = (NERR_BASE + 119) + 6
  NERR_NotPrimary* = (NERR_BASE + 119) + 7
  NERR_ACFNotLoaded* = (NERR_BASE + 119) + 8
  NERR_ACFNoRoom* = (NERR_BASE + 119) + 9
  NERR_ACFFileIOFail* = (NERR_BASE + 119) + 10
  NERR_ACFTooManyLists* = (NERR_BASE + 119) + 11
  NERR_UserLogon* = (NERR_BASE + 119) + 12
  NERR_ACFNoParent* = (NERR_BASE + 119) + 13
  NERR_CanNotGrowSegment* = (NERR_BASE + 119) + 14
  NERR_SpeGroupOp* = (NERR_BASE + 119) + 15
  NERR_NotInCache* = (NERR_BASE + 119) + 16
  NERR_UserInGroup* = (NERR_BASE + 119) + 17
  NERR_UserNotInGroup* = (NERR_BASE + 119) + 18
  NERR_AccountUndefined* = (NERR_BASE + 119) + 19
  NERR_AccountExpired* = (NERR_BASE + 119) + 20
  NERR_InvalidWorkstation* = (NERR_BASE + 119) + 21
  NERR_InvalidLogonHours* = (NERR_BASE + 119) + 22
  NERR_PasswordExpired* = (NERR_BASE + 119) + 23
  NERR_PasswordCantChange* = (NERR_BASE + 119) + 24
  NERR_PasswordHistConflict* = (NERR_BASE + 119) + 25
  NERR_PasswordTooShort* = (NERR_BASE + 119) + 26
  NERR_PasswordTooRecent* = (NERR_BASE + 119) + 27
  NERR_InvalidDatabase* = (NERR_BASE + 119) + 28
  NERR_DatabaseUpToDate* = (NERR_BASE + 119) + 29
  NERR_SyncRequired* = (NERR_BASE + 119) + 30
  NERR_UseNotFound* = (NERR_BASE + 119) + 31
  NERR_BadAsgType* = (NERR_BASE + 119) + 32
  NERR_DeviceIsShared* = (NERR_BASE + 119) + 33
  NERR_NoComputerName* = NERR_BASE + 170
  NERR_MsgAlreadyStarted* = (NERR_BASE + 170) + 1
  NERR_MsgInitFailed* = (NERR_BASE + 170) + 2
  NERR_NameNotFound* = (NERR_BASE + 170) + 3
  NERR_AlreadyForwarded* = (NERR_BASE + 170) + 4
  NERR_AddForwarded* = (NERR_BASE + 170) + 5
  NERR_AlreadyExists* = (NERR_BASE + 170) + 6
  NERR_TooManyNames* = (NERR_BASE + 170) + 7
  NERR_DelComputerName* = (NERR_BASE + 170) + 8
  NERR_LocalForward* = (NERR_BASE + 170) + 9
  NERR_GrpMsgProcessor* = (NERR_BASE + 170) + 10
  NERR_PausedRemote* = (NERR_BASE + 170) + 11
  NERR_BadReceive* = (NERR_BASE + 170) + 12
  NERR_NameInUse* = (NERR_BASE + 170) + 13
  NERR_MsgNotStarted* = (NERR_BASE + 170) + 14
  NERR_NotLocalName* = (NERR_BASE + 170) + 15
  NERR_NoForwardName* = (NERR_BASE + 170) + 16
  NERR_RemoteFull* = (NERR_BASE + 170) + 17
  NERR_NameNotForwarded* = (NERR_BASE + 170) + 18
  NERR_TruncatedBroadcast* = (NERR_BASE + 170) + 19
  NERR_InvalidDevice* = NERR_BASE + 194
  NERR_WriteFault* = (NERR_BASE + 194) + 1
  NERR_DuplicateName* = NERR_BASE + 197
  NERR_DeleteLater* = (NERR_BASE + 197) + 1
  NERR_IncompleteDel* = (NERR_BASE + 197) + 2
  NERR_MultipleNets* = (NERR_BASE + 197) + 3
  NERR_NetNameNotFound* = NERR_BASE + 210
  NERR_DeviceNotShared* = (NERR_BASE + 210) + 1
  NERR_ClientNameNotFound* = (NERR_BASE + 210) + 2
  NERR_FileIdNotFound* = NERR_BASE + 214
  NERR_ExecFailure* = (NERR_BASE + 214) + 1
  NERR_TmpFile* = (NERR_BASE + 214) + 2
  NERR_TooMuchData* = (NERR_BASE + 214) + 3
  NERR_DeviceShareConflict* = (NERR_BASE + 214) + 4
  NERR_BrowserTableIncomplete* = (NERR_BASE + 214) + 5
  NERR_NotLocalDomain* = (NERR_BASE + 214) + 6
  NERR_DevInvalidOpCode* = NERR_BASE + 231
  NERR_DevNotFound* = (NERR_BASE + 231) + 1
  NERR_DevNotOpen* = (NERR_BASE + 231) + 2
  NERR_BadQueueDevString* = (NERR_BASE + 231) + 3
  NERR_BadQueuePriority* = (NERR_BASE + 231) + 4
  NERR_NoCommDevs* = NERR_BASE + 237
  NERR_QueueNotFound* = (NERR_BASE + 237) + 1
  NERR_BadDevString* = NERR_BASE + 240
  NERR_BadDev* = (NERR_BASE + 240) + 1
  NERR_InUseBySpooler* = (NERR_BASE + 240) + 2
  NERR_CommDevInUse* = (NERR_BASE + 240) + 3
  NERR_InvalidComputer* = NERR_BASE + 251
  NERR_MaxLenExceeded* = NERR_BASE + 254
  NERR_BadComponent* = NERR_BASE + 256
  NERR_CantType* = (NERR_BASE + 256) + 1
  NERR_TooManyEntries* = NERR_BASE + 262
  NERR_ProfileFileTooBig* = NERR_BASE + 270
  NERR_ProfileOffset* = (NERR_BASE + 270) + 1
  NERR_ProfileCleanup* = (NERR_BASE + 270) + 2
  NERR_ProfileUnknownCmd* = (NERR_BASE + 270) + 3
  NERR_ProfileLoadErr* = (NERR_BASE + 270) + 4
  NERR_ProfileSaveErr* = (NERR_BASE + 270) + 5
  NERR_LogOverflow* = NERR_BASE + 277
  NERR_LogFileChanged* = (NERR_BASE + 277) + 1
  NERR_LogFileCorrupt* = (NERR_BASE + 277) + 2
  NERR_SourceIsDir* = (NERR_BASE + 277) + 3
  NERR_BadSource* = (NERR_BASE + 277) + 4
  NERR_BadDest* = (NERR_BASE + 277) + 5
  NERR_DifferentServers* = (NERR_BASE + 277) + 6
  NERR_RunSrvPaused* = NERR_BASE + 285
  NERR_ErrCommRunSrv* = NERR_BASE + 289
  NERR_ErrorExecingGhost* = NERR_BASE + 291
  NERR_ShareNotFound* = (NERR_BASE + 291) + 1
  NERR_InvalidLana* = NERR_BASE + 300
  NERR_OpenFiles* = (NERR_BASE + 300) + 1
  NERR_ActiveConns* = (NERR_BASE + 300) + 2
  NERR_BadPasswordCore* = (NERR_BASE + 300) + 3
  NERR_DevInUse* = (NERR_BASE + 300) + 4
  NERR_LocalDrive* = (NERR_BASE + 300) + 5
  NERR_AlertExists* = NERR_BASE + 330
  NERR_TooManyAlerts* = (NERR_BASE + 330) + 1
  NERR_NoSuchAlert* = (NERR_BASE + 330) + 2
  NERR_BadRecipient* = (NERR_BASE + 330) + 3
  NERR_AcctLimitExceeded* = (NERR_BASE + 330) + 4
  NERR_InvalidLogSeek* = NERR_BASE + 340
  NERR_BadUasConfig* = NERR_BASE + 350
  NERR_InvalidUASOp* = (NERR_BASE + 350) + 1
  NERR_LastAdmin* = (NERR_BASE + 350) + 2
  NERR_DCNotFound* = (NERR_BASE + 350) + 3
  NERR_LogonTrackingError* = (NERR_BASE + 350) + 4
  NERR_NetlogonNotStarted* = (NERR_BASE + 350) + 5
  NERR_CanNotGrowUASFile* = (NERR_BASE + 350) + 6
  NERR_TimeDiffAtDC* = (NERR_BASE + 350) + 7
  NERR_PasswordMismatch* = (NERR_BASE + 350) + 8
  NERR_NoSuchServer* = NERR_BASE + 360
  NERR_NoSuchSession* = (NERR_BASE + 360) + 1
  NERR_NoSuchConnection* = (NERR_BASE + 360) + 2
  NERR_TooManyServers* = (NERR_BASE + 360) + 3
  NERR_TooManySessions* = (NERR_BASE + 360) + 4
  NERR_TooManyConnections* = (NERR_BASE + 360) + 5
  NERR_TooManyFiles* = (NERR_BASE + 360) + 6
  NERR_NoAlternateServers* = (NERR_BASE + 360) + 7
  NERR_TryDownLevel* = NERR_BASE + 370
  NERR_UPSDriverNotStarted* = NERR_BASE + 380
  NERR_UPSInvalidConfig* = (NERR_BASE + 380) + 1
  NERR_UPSInvalidCommPort* = (NERR_BASE + 380) + 2
  NERR_UPSSignalAsserted* = (NERR_BASE + 380) + 3
  NERR_UPSShutdownFailed* = (NERR_BASE + 380) + 4
  NERR_BadDosRetCode* = NERR_BASE + 400
  NERR_ProgNeedsExtraMem* = (NERR_BASE + 400) + 1
  NERR_BadDosFunction* = (NERR_BASE + 400) + 2
  NERR_RemoteBootFailed* = (NERR_BASE + 400) + 3
  NERR_BadFileCheckSum* = (NERR_BASE + 400) + 4
  NERR_NoRplBootSystem* = (NERR_BASE + 400) + 5
  NERR_RplLoadrNetBiosErr* = (NERR_BASE + 400) + 6
  NERR_RplLoadrDiskErr* = (NERR_BASE + 400) + 7
  NERR_ImageParamErr* = (NERR_BASE + 400) + 8
  NERR_TooManyImageParams* = (NERR_BASE + 400) + 9
  NERR_NonDosFloppyUsed* = (NERR_BASE + 400) + 10
  NERR_RplBootRestart* = (NERR_BASE + 400) + 11
  NERR_RplSrvrCallFailed* = (NERR_BASE + 400) + 12
  NERR_CantConnectRplSrvr* = (NERR_BASE + 400) + 13
  NERR_CantOpenImageFile* = (NERR_BASE + 400) + 14
  NERR_CallingRplSrvr* = (NERR_BASE + 400) + 15
  NERR_StartingRplBoot* = (NERR_BASE + 400) + 16
  NERR_RplBootServiceTerm* = (NERR_BASE + 400) + 17
  NERR_RplBootStartFailed* = (NERR_BASE + 400) + 18
  NERR_RPL_CONNECTED* = (NERR_BASE + 400) + 19
  NERR_BrowserConfiguredToNotRun* = NERR_BASE + 450
  NERR_RplNoAdaptersStarted* = NERR_BASE + 510
  NERR_RplBadRegistry* = (NERR_BASE + 510) + 1
  NERR_RplBadDatabase* = (NERR_BASE + 510) + 2
  NERR_RplRplfilesShare* = (NERR_BASE + 510) + 3
  NERR_RplNotRplServer* = (NERR_BASE + 510) + 4
  NERR_RplCannotEnum* = (NERR_BASE + 510) + 5
  NERR_RplWkstaInfoCorrupted* = (NERR_BASE + 510) + 6
  NERR_RplWkstaNotFound* = (NERR_BASE + 510) + 7
  NERR_RplWkstaNameUnavailable* = (NERR_BASE + 510) + 8
  NERR_RplProfileInfoCorrupted* = (NERR_BASE + 510) + 9
  NERR_RplProfileNotFound* = (NERR_BASE + 510) + 10
  NERR_RplProfileNameUnavailable* = (NERR_BASE + 510) + 11
  NERR_RplProfileNotEmpty* = (NERR_BASE + 510) + 12
  NERR_RplConfigInfoCorrupted* = (NERR_BASE + 510) + 13
  NERR_RplConfigNotFound* = (NERR_BASE + 510) + 14
  NERR_RplAdapterInfoCorrupted* = (NERR_BASE + 510) + 15
  NERR_RplInternal* = (NERR_BASE + 510) + 16
  NERR_RplVendorInfoCorrupted* = (NERR_BASE + 510) + 17
  NERR_RplBootInfoCorrupted* = (NERR_BASE + 510) + 18
  NERR_RplWkstaNeedsUserAcct* = (NERR_BASE + 510) + 19
  NERR_RplNeedsRPLUSERAcct* = (NERR_BASE + 510) + 20
  NERR_RplBootNotFound* = (NERR_BASE + 510) + 21
  NERR_RplIncompatibleProfile* = (NERR_BASE + 510) + 22
  NERR_RplAdapterNameUnavailable* = (NERR_BASE + 510) + 23
  NERR_RplConfigNotEmpty* = (NERR_BASE + 510) + 24
  NERR_RplBootInUse* = (NERR_BASE + 510) + 25
  NERR_RplBackupDatabase* = (NERR_BASE + 510) + 26
  NERR_RplAdapterNotFound* = (NERR_BASE + 510) + 27
  NERR_RplVendorNotFound* = (NERR_BASE + 510) + 28
  NERR_RplVendorNameUnavailable* = (NERR_BASE + 510) + 29
  NERR_RplBootNameUnavailable* = (NERR_BASE + 510) + 30
  NERR_RplConfigNameUnavailable* = (NERR_BASE + 510) + 31
  NERR_DfsInternalCorruption* = NERR_BASE + 560
  NERR_DfsVolumeDataCorrupt* = (NERR_BASE + 560) + 1
  NERR_DfsNoSuchVolume* = (NERR_BASE + 560) + 2
  NERR_DfsVolumeAlreadyExists* = (NERR_BASE + 560) + 3
  NERR_DfsAlreadyShared* = (NERR_BASE + 560) + 4
  NERR_DfsNoSuchShare* = (NERR_BASE + 560) + 5
  NERR_DfsNotALeafVolume* = (NERR_BASE + 560) + 6
  NERR_DfsLeafVolume* = (NERR_BASE + 560) + 7
  NERR_DfsVolumeHasMultipleServers* = (NERR_BASE + 560) + 8
  NERR_DfsCantCreateJunctionPoint* = (NERR_BASE + 560) + 9
  NERR_DfsServerNotDfsAware* = (NERR_BASE + 560) + 10
  NERR_DfsBadRenamePath* = (NERR_BASE + 560) + 11
  NERR_DfsVolumeIsOffline* = (NERR_BASE + 560) + 12
  NERR_DfsNoSuchServer* = (NERR_BASE + 560) + 13
  NERR_DfsCyclicalName* = (NERR_BASE + 560) + 14
  NERR_DfsNotSupportedInServerDfs* = (NERR_BASE + 560) + 15
  NERR_DfsDuplicateService* = (NERR_BASE + 560) + 16
  NERR_DfsCantRemoveLastServerShare* = (NERR_BASE + 560) + 17
  NERR_DfsVolumeIsInterDfs* = (NERR_BASE + 560) + 18
  NERR_DfsInconsistent* = (NERR_BASE + 560) + 19
  NERR_DfsServerUpgraded* = (NERR_BASE + 560) + 20
  NERR_DfsDataIsIdentical* = (NERR_BASE + 560) + 21
  NERR_DfsCantRemoveDfsRoot* = (NERR_BASE + 560) + 22
  NERR_DfsChildOrParentInDfs* = (NERR_BASE + 560) + 23
  NERR_DfsInternalError* = NERR_BASE + 590
  MAX_NERR* = NERR_BASE + 899

# net/lmcons.nim

const
  MESSAGE_FILENAME* = "NETMSG"
  OS2MSG_FILENAME* = "BASE"
  HELP_MSG_FILENAME* = "NETH"

type
  NET_API_STATUS* = DWORD
  API_RET_TYPE* = DWORD

const
  MIN_LANMAN_MESSAGE_ID* = NERR_BASE
  MAX_LANMAN_MESSAGE_ID* = 5799
  CNLEN* = 15
  UNCLEN* = CNLEN + 2
  DNLEN* = 15
  LM20_CNLEN* = 15
  LM20_DNLEN* = 15
  LM20_SNLEN* = 15
  LM20_STXTLEN* = 63
  LM20_UNCLEN* = LM20_CNLEN + 2
  LM20_NNLEN* = 12
  LM20_RMLEN* = LM20_UNCLEN + 1 + LM20_NNLEN
  NNLEN* = 80
  RMLEN* = UNCLEN + 1 + NNLEN
  SNLEN* = 80
  STXTLEN* = 256
  PATHLEN* = 256
  LM20_PATHLEN* = 256
  DEVLEN* = 80
  LM20_DEVLEN* = 8
  EVLEN* = 16
  UNLEN* = 256
  LM20_UNLEN* = 20
  GNLEN* = UNLEN
  LM20_GNLEN* = LM20_UNLEN
  PWLEN* = 256
  LM20_PWLEN* = 14
  SHPWLEN* = 8
  CLTYPE_LEN* = 12
  QNLEN* = NNLEN
  LM20_QNLEN* = LM20_NNLEN
  MAXCOMMENTSZ* = 256
  LM20_MAXCOMMENTSZ* = 48
  ALERTSZ* = 128
  MAXDEVENTRIES* = 32
  NETBIOS_NAME_LEN* = 16
  MAX_PREFERRED_LENGTH* = 0xFFFFFFFF'u32
  CRYPT_KEY_LEN* = 7
  CRYPT_TXT_LEN* = 8
  ENCRYPTED_PWLEN* = 16
  SESSION_PWLEN* = 24
  SESSION_CRYPT_KLEN* = 21
  PARMNUM_ALL* = 0
  PARM_ERROR_UNKNOWN* = 0xFFFFFFFF'u32
  PARM_ERROR_NONE* = 0
  PARMNUM_BASE_INFOLEVEL* = 1000
  PLATFORM_ID_DOS* = 300
  PLATFORM_ID_OS2* = 400
  PLATFORM_ID_NT* = 500
  PLATFORM_ID_OSF* = 600
  PLATFORM_ID_VMS* = 700

when not defined(winansi):
  type
    LMSTR* = LPWSTR
    LMCSTR* = LPCWSTR

else:
  type
    LMSTR* = LPSTR
    LMCSTR* = LPCSTR

# net/lmaccess.nim

const
  GROUP_SPECIALGRP_USERS* = "USERS"
  GROUP_SPECIALGRP_ADMINS* = "ADMINS"
  GROUP_SPECIALGRP_GUESTS* = "GUESTS"
  GROUP_SPECIALGRP_LOCAL* = "LOCAL"
  ACCESS_LETTERS* = "RWCXDAP "
  NETLOGON_CONTROL_QUERY* = 1
  NETLOGON_CONTROL_REPLICATE* = 2
  NETLOGON_CONTROL_SYNCHRONIZE* = 3
  NETLOGON_CONTROL_PDC_REPLICATE* = 4
  NETLOGON_CONTROL_REDISCOVER* = 5
  NETLOGON_CONTROL_TC_QUERY* = 6
  NETLOGON_CONTROL_BACKUP_CHANGE_LOG* = 65532
  NETLOGON_CONTROL_TRUNCATE_LOG* = 65533
  NETLOGON_CONTROL_SET_DBFLAG* = 65534
  NETLOGON_CONTROL_BREAKPOINT* = 65535
  UF_SCRIPT* = 1
  UF_ACCOUNTDISABLE* = 2
  UF_HOMEDIR_REQUIRED* = 8
  UF_LOCKOUT* = 16
  UF_PASSWD_NOTREQD* = 32
  UF_PASSWD_CANT_CHANGE* = 64
  UF_TEMP_DUPLICATE_ACCOUNT* = 256
  UF_NORMAL_ACCOUNT* = 512
  UF_INTERDOMAIN_TRUST_ACCOUNT* = 2048
  UF_WORKSTATION_TRUST_ACCOUNT* = 4096
  UF_SERVER_TRUST_ACCOUNT* = 8192
  UF_MNS_LOGON_ACCOUNT* = 131072
  UF_MACHINE_ACCOUNT_MASK* = UF_INTERDOMAIN_TRUST_ACCOUNT or UF_WORKSTATION_TRUST_ACCOUNT or UF_SERVER_TRUST_ACCOUNT
  UF_ACCOUNT_TYPE_MASK* = UF_TEMP_DUPLICATE_ACCOUNT or UF_NORMAL_ACCOUNT or UF_INTERDOMAIN_TRUST_ACCOUNT or UF_WORKSTATION_TRUST_ACCOUNT or UF_SERVER_TRUST_ACCOUNT
  UF_DONT_EXPIRE_PASSWD* = 65536
  UF_SETTABLE_BITS* = UF_SCRIPT or UF_ACCOUNTDISABLE or UF_LOCKOUT or UF_HOMEDIR_REQUIRED or UF_PASSWD_NOTREQD or UF_PASSWD_CANT_CHANGE or UF_ACCOUNT_TYPE_MASK or UF_DONT_EXPIRE_PASSWD
  FILTER_TEMP_DUPLICATE_ACCOUNT* = 1
  FILTER_NORMAL_ACCOUNT* = 2
  FILTER_INTERDOMAIN_TRUST_ACCOUNT* = 8
  FILTER_WORKSTATION_TRUST_ACCOUNT* = 16
  FILTER_SERVER_TRUST_ACCOUNT* = 32
  LG_INCLUDE_INDIRECT* = 1
  AF_OP_PRINT* = 1
  AF_OP_COMM* = 2
  AF_OP_SERVER* = 4
  AF_OP_ACCOUNTS* = 8
  AF_SETTABLE_BITS* = ( AF_OP_PRINT or AF_OP_COMM or AF_OP_SERVER or AF_OP_ACCOUNTS )
  UAS_ROLE_STANDALONE* = 0
  UAS_ROLE_MEMBER* = 1
  UAS_ROLE_BACKUP* = 2
  UAS_ROLE_PRIMARY* = 3
  USER_NAME_PARMNUM* = 1
  USER_PASSWORD_PARMNUM* = 3
  USER_PASSWORD_AGE_PARMNUM* = 4
  USER_PRIV_PARMNUM* = 5
  USER_HOME_DIR_PARMNUM* = 6
  USER_COMMENT_PARMNUM* = 7
  USER_FLAGS_PARMNUM* = 8
  USER_SCRIPT_PATH_PARMNUM* = 9
  USER_AUTH_FLAGS_PARMNUM* = 10
  USER_FULL_NAME_PARMNUM* = 11
  USER_USR_COMMENT_PARMNUM* = 12
  USER_PARMS_PARMNUM* = 13
  USER_WORKSTATIONS_PARMNUM* = 14
  USER_LAST_LOGON_PARMNUM* = 15
  USER_LAST_LOGOFF_PARMNUM* = 16
  USER_ACCT_EXPIRES_PARMNUM* = 17
  USER_MAX_STORAGE_PARMNUM* = 18
  USER_UNITS_PER_WEEK_PARMNUM* = 19
  USER_LOGON_HOURS_PARMNUM* = 20
  USER_PAD_PW_COUNT_PARMNUM* = 21
  USER_NUM_LOGONS_PARMNUM* = 22
  USER_LOGON_SERVER_PARMNUM* = 23
  USER_COUNTRY_CODE_PARMNUM* = 24
  USER_CODE_PAGE_PARMNUM* = 25
  USER_PRIMARY_GROUP_PARMNUM* = 51
  USER_PROFILE* = 52
  USER_PROFILE_PARMNUM* = 52
  USER_HOME_DIR_DRIVE_PARMNUM* = 53
  USER_NAME_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_NAME_PARMNUM
  USER_PASSWORD_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_PASSWORD_PARMNUM
  USER_PASSWORD_AGE_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_PASSWORD_AGE_PARMNUM
  USER_PRIV_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_PRIV_PARMNUM
  USER_HOME_DIR_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_HOME_DIR_PARMNUM
  USER_COMMENT_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_COMMENT_PARMNUM
  USER_FLAGS_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_FLAGS_PARMNUM
  USER_SCRIPT_PATH_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_SCRIPT_PATH_PARMNUM
  USER_AUTH_FLAGS_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_AUTH_FLAGS_PARMNUM
  USER_FULL_NAME_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_FULL_NAME_PARMNUM
  USER_USR_COMMENT_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_USR_COMMENT_PARMNUM
  USER_PARMS_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_PARMS_PARMNUM
  USER_WORKSTATIONS_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_WORKSTATIONS_PARMNUM
  USER_LAST_LOGON_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_LAST_LOGON_PARMNUM
  USER_LAST_LOGOFF_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_LAST_LOGOFF_PARMNUM
  USER_ACCT_EXPIRES_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_ACCT_EXPIRES_PARMNUM
  USER_MAX_STORAGE_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_MAX_STORAGE_PARMNUM
  USER_UNITS_PER_WEEK_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_UNITS_PER_WEEK_PARMNUM
  USER_LOGON_HOURS_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_LOGON_HOURS_PARMNUM
  USER_PAD_PW_COUNT_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_PAD_PW_COUNT_PARMNUM
  USER_NUM_LOGONS_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_NUM_LOGONS_PARMNUM
  USER_LOGON_SERVER_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_LOGON_SERVER_PARMNUM
  USER_COUNTRY_CODE_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_COUNTRY_CODE_PARMNUM
  USER_CODE_PAGE_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_CODE_PAGE_PARMNUM
  USER_PRIMARY_GROUP_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_PRIMARY_GROUP_PARMNUM
  USER_HOME_DIR_DRIVE_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_HOME_DIR_DRIVE_PARMNUM
  NULL_USERSETINFO_PASSWD* = " "
  TIMEQ_FOREVER* = 0xffffffff'u32
  USER_MAXSTORAGE_UNLIMITED* = 0xffffffff'u32
  USER_NO_LOGOFF* = 0xffffffff'u32
  UNITS_PER_DAY* = 24
  UNITS_PER_WEEK* = 168
  USER_PRIV_MASK* = 3
  USER_PRIV_GUEST* = 0
  USER_PRIV_USER* = 1
  USER_PRIV_ADMIN* = 2
  MAX_PASSWD_LEN* = PWLEN
  DEF_MIN_PWLEN* = 6
  DEF_PWUNIQUENESS* = 5
  DEF_MAX_PWHIST* = 8
  DEF_MAX_PWAGE* = TIMEQ_FOREVER
  DEF_MIN_PWAGE* = 0
  DEF_FORCE_LOGOFF* = 0xffffffff'u32
  DEF_MAX_BADPW* = 0
  ONE_DAY* = 86400
  VALIDATED_LOGON* = 0
  PASSWORD_EXPIRED* = 2
  NON_VALIDATED_LOGON* = 3
  VALID_LOGOFF* = 1
  MODALS_MIN_PASSWD_LEN_PARMNUM* = 1
  MODALS_MAX_PASSWD_AGE_PARMNUM* = 2
  MODALS_MIN_PASSWD_AGE_PARMNUM* = 3
  MODALS_FORCE_LOGOFF_PARMNUM* = 4
  MODALS_PASSWD_HIST_LEN_PARMNUM* = 5
  MODALS_ROLE_PARMNUM* = 6
  MODALS_PRIMARY_PARMNUM* = 7
  MODALS_DOMAIN_NAME_PARMNUM* = 8
  MODALS_DOMAIN_ID_PARMNUM* = 9
  MODALS_LOCKOUT_DURATION_PARMNUM* = 10
  MODALS_LOCKOUT_OBSERVATION_WINDOW_PARMNUM* = 11
  MODALS_LOCKOUT_THRESHOLD_PARMNUM* = 12
  MODALS_MIN_PASSWD_LEN_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+MODALS_MIN_PASSWD_LEN_PARMNUM )
  MODALS_MAX_PASSWD_AGE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+MODALS_MAX_PASSWD_AGE_PARMNUM )
  MODALS_MIN_PASSWD_AGE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+MODALS_MIN_PASSWD_AGE_PARMNUM )
  MODALS_FORCE_LOGOFF_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+MODALS_FORCE_LOGOFF_PARMNUM )
  MODALS_PASSWD_HIST_LEN_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+MODALS_PASSWD_HIST_LEN_PARMNUM )
  MODALS_ROLE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+MODALS_ROLE_PARMNUM )
  MODALS_PRIMARY_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+MODALS_PRIMARY_PARMNUM )
  MODALS_DOMAIN_NAME_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+MODALS_DOMAIN_NAME_PARMNUM )
  MODALS_DOMAIN_ID_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+MODALS_DOMAIN_ID_PARMNUM )
  GROUPIDMASK* = 0x8000
  GROUP_ALL_PARMNUM* = 0
  GROUP_NAME_PARMNUM* = 1
  GROUP_COMMENT_PARMNUM* = 2
  GROUP_ATTRIBUTES_PARMNUM* = 3
  GROUP_ALL_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL + GROUP_ALL_PARMNUM
  GROUP_NAME_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL + GROUP_NAME_PARMNUM
  GROUP_COMMENT_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL + GROUP_COMMENT_PARMNUM
  GROUP_ATTRIBUTES_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL + GROUP_ATTRIBUTES_PARMNUM
  LOCALGROUP_NAME_PARMNUM* = 1
  LOCALGROUP_COMMENT_PARMNUM* = 2
  MAXPERMENTRIES* = 64
  ACCESS_NONE* = 0
  ACCESS_READ* = 1
  ACCESS_WRITE* = 2
  ACCESS_CREATE* = 4
  ACCESS_EXEC* = 8
  ACCESS_DELETE* = 16
  ACCESS_ATRIB* = 32
  ACCESS_PERM* = 64
  ACCESS_ALL* = ACCESS_READ or ACCESS_WRITE or ACCESS_CREATE or ACCESS_EXEC or ACCESS_DELETE or ACCESS_ATRIB or ACCESS_PERM
  ACCESS_GROUP* = 0x8000
  ACCESS_AUDIT* = 1
  ACCESS_SUCCESS_OPEN* = 16
  ACCESS_SUCCESS_WRITE* = 32
  ACCESS_SUCCESS_DELETE* = 64
  ACCESS_SUCCESS_ACL* = 128
  ACCESS_SUCCESS_MASK* = 240
  ACCESS_FAIL_OPEN* = 256
  ACCESS_FAIL_WRITE* = 512
  ACCESS_FAIL_DELETE* = 1024
  ACCESS_FAIL_ACL* = 2048
  ACCESS_FAIL_MASK* = 3840
  ACCESS_FAIL_SHIFT* = 4
  ACCESS_RESOURCE_NAME_PARMNUM* = 1
  ACCESS_ATTR_PARMNUM* = 2
  ACCESS_COUNT_PARMNUM* = 3
  ACCESS_ACCESS_LIST_PARMNUM* = 4
  ACCESS_RESOURCE_NAME_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+ACCESS_RESOURCE_NAME_PARMNUM )
  ACCESS_ATTR_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+ACCESS_ATTR_PARMNUM )
  ACCESS_COUNT_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+ACCESS_COUNT_PARMNUM )
  ACCESS_ACCESS_LIST_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+ACCESS_ACCESS_LIST_PARMNUM )
  NETLOGON_REPLICATION_NEEDED* = 1
  NETLOGON_REPLICATION_IN_PROGRESS* = 2
  NETLOGON_FULL_SYNC_REPLICATION* = 4
  NETLOGON_REDO_NEEDED* = 8

type
  USER_INFO_0* {.final, pure.} = object
    usri0_name*: LPWSTR
  PUSER_INFO_0* = ptr USER_INFO_0
  LPUSER_INFO_0* = ptr USER_INFO_0
  USER_INFO_1* {.final, pure.} = object
    usri1_name*: LPWSTR
    usri1_password*: LPWSTR
    usri1_password_age*: DWORD
    usri1_priv*: DWORD
    usri1_home_dir*: LPWSTR
    usri1_comment*: LPWSTR
    usri1_flags*: DWORD
    usri1_script_path*: LPWSTR
  PUSER_INFO_1* = ptr USER_INFO_1
  LPUSER_INFO_1* = ptr USER_INFO_1
  USER_INFO_2* {.final, pure.} = object
    usri2_name*: LPWSTR
    usri2_password*: LPWSTR
    usri2_password_age*: DWORD
    usri2_priv*: DWORD
    usri2_home_dir*: LPWSTR
    usri2_comment*: LPWSTR
    usri2_flags*: DWORD
    usri2_script_path*: LPWSTR
    usri2_auth_flags*: DWORD
    usri2_full_name*: LPWSTR
    usri2_usr_comment*: LPWSTR
    usri2_parms*: LPWSTR
    usri2_workstations*: LPWSTR
    usri2_last_logon*: DWORD
    usri2_last_logoff*: DWORD
    usri2_acct_expires*: DWORD
    usri2_max_storage*: DWORD
    usri2_units_per_week*: DWORD
    usri2_logon_hours*: PBYTE
    usri2_bad_pw_count*: DWORD
    usri2_num_logons*: DWORD
    usri2_logon_server*: LPWSTR
    usri2_country_code*: DWORD
    usri2_code_page*: DWORD
  PUSER_INFO_2* = ptr USER_INFO_2
  LPUSER_INFO_2* = ptr USER_INFO_2
  USER_INFO_3* {.final, pure.} = object
    usri3_name*: LPWSTR
    usri3_password*: LPWSTR
    usri3_password_age*: DWORD
    usri3_priv*: DWORD
    usri3_home_dir*: LPWSTR
    usri3_comment*: LPWSTR
    usri3_flags*: DWORD
    usri3_script_path*: LPWSTR
    usri3_auth_flags*: DWORD
    usri3_full_name*: LPWSTR
    usri3_usr_comment*: LPWSTR
    usri3_parms*: LPWSTR
    usri3_workstations*: LPWSTR
    usri3_last_logon*: DWORD
    usri3_last_logoff*: DWORD
    usri3_acct_expires*: DWORD
    usri3_max_storage*: DWORD
    usri3_units_per_week*: DWORD
    usri3_logon_hours*: PBYTE
    usri3_bad_pw_count*: DWORD
    usri3_num_logons*: DWORD
    usri3_logon_server*: LPWSTR
    usri3_country_code*: DWORD
    usri3_code_page*: DWORD
    usri3_user_id*: DWORD
    usri3_primary_group_id*: DWORD
    usri3_profile*: LPWSTR
    usri3_home_dir_drive*: LPWSTR
    usri3_password_expired*: DWORD
  PUSER_INFO_3* = ptr USER_INFO_3
  LPUSER_INFO_3* = ptr USER_INFO_3
  USER_INFO_10* {.final, pure.} = object
    usri10_name*: LPWSTR
    usri10_comment*: LPWSTR
    usri10_usr_comment*: LPWSTR
    usri10_full_name*: LPWSTR
  PUSER_INFO_10* = ptr USER_INFO_10
  LPUSER_INFO_10* = ptr USER_INFO_10
  USER_INFO_11* {.final, pure.} = object
    usri11_name*: LPWSTR
    usri11_comment*: LPWSTR
    usri11_usr_comment*: LPWSTR
    usri11_full_name*: LPWSTR
    usri11_priv*: DWORD
    usri11_auth_flags*: DWORD
    usri11_password_age*: DWORD
    usri11_home_dir*: LPWSTR
    usri11_parms*: LPWSTR
    usri11_last_logon*: DWORD
    usri11_last_logoff*: DWORD
    usri11_bad_pw_count*: DWORD
    usri11_num_logons*: DWORD
    usri11_logon_server*: LPWSTR
    usri11_country_code*: DWORD
    usri11_workstations*: LPWSTR
    usri11_max_storage*: DWORD
    usri11_units_per_week*: DWORD
    usri11_logon_hours*: PBYTE
    usri11_code_page*: DWORD
  PUSER_INFO_11* = ptr USER_INFO_11
  LPUSER_INFO_11* = ptr USER_INFO_11
  USER_INFO_20* {.final, pure.} = object
    usri20_name*: LPWSTR
    usri20_full_name*: LPWSTR
    usri20_comment*: LPWSTR
    usri20_flags*: DWORD
    usri20_user_id*: DWORD
  PUSER_INFO_20* = ptr USER_INFO_20
  LPUSER_INFO_20* = ptr USER_INFO_20
  USER_INFO_21* {.final, pure.} = object
    usri21_password*: array[ENCRYPTED_PWLEN, BYTE]
  PUSER_INFO_21* = ptr USER_INFO_21
  LPUSER_INFO_21* = ptr USER_INFO_21
  USER_INFO_22* {.final, pure.} = object
    usri22_name*: LPWSTR
    usri22_password*: array[ENCRYPTED_PWLEN, BYTE]
    usri22_password_age*: DWORD
    usri22_priv*: DWORD
    usri22_home_dir*: LPWSTR
    usri22_comment*: LPWSTR
    usri22_flags*: DWORD
    usri22_script_path*: LPWSTR
    usri22_auth_flags*: DWORD
    usri22_full_name*: LPWSTR
    usri22_usr_comment*: LPWSTR
    usri22_parms*: LPWSTR
    usri22_workstations*: LPWSTR
    usri22_last_logon*: DWORD
    usri22_last_logoff*: DWORD
    usri22_acct_expires*: DWORD
    usri22_max_storage*: DWORD
    usri22_units_per_week*: DWORD
    usri22_logon_hours*: PBYTE
    usri22_bad_pw_count*: DWORD
    usri22_num_logons*: DWORD
    usri22_logon_server*: LPWSTR
    usri22_country_code*: DWORD
    usri22_code_page*: DWORD
  PUSER_INFO_22* = ptr USER_INFO_22
  LPUSER_INFO_22* = ptr USER_INFO_22
  USER_INFO_1003* {.final, pure.} = object
    usri1003_password*: LPWSTR
  PUSER_INFO_1003* = ptr USER_INFO_1003
  LPUSER_INFO_1003* = ptr USER_INFO_1003
  USER_INFO_1005* {.final, pure.} = object
    usri1005_priv*: DWORD
  PUSER_INFO_1005* = ptr USER_INFO_1005
  LPUSER_INFO_1005* = ptr USER_INFO_1005
  USER_INFO_1006* {.final, pure.} = object
    usri1006_home_dir*: LPWSTR
  PUSER_INFO_1006* = ptr USER_INFO_1006
  LPUSER_INFO_1006* = ptr USER_INFO_1006
  USER_INFO_1007* {.final, pure.} = object
    usri1007_comment*: LPWSTR
  PUSER_INFO_1007* = ptr USER_INFO_1007
  LPUSER_INFO_1007* = ptr USER_INFO_1007
  USER_INFO_1008* {.final, pure.} = object
    usri1008_flags*: DWORD
  PUSER_INFO_1008* = ptr USER_INFO_1008
  LPUSER_INFO_1008* = ptr USER_INFO_1008
  USER_INFO_1009* {.final, pure.} = object
    usri1009_script_path*: LPWSTR
  PUSER_INFO_1009* = ptr USER_INFO_1009
  LPUSER_INFO_1009* = ptr USER_INFO_1009
  USER_INFO_1010* {.final, pure.} = object
    usri1010_auth_flags*: DWORD
  PUSER_INFO_1010* = ptr USER_INFO_1010
  LPUSER_INFO_1010* = ptr USER_INFO_1010
  USER_INFO_1011* {.final, pure.} = object
    usri1011_full_name*: LPWSTR
  PUSER_INFO_1011* = ptr USER_INFO_1011
  LPUSER_INFO_1011* = ptr USER_INFO_1011
  USER_INFO_1012* {.final, pure.} = object
    usri1012_usr_comment*: LPWSTR
  PUSER_INFO_1012* = ptr USER_INFO_1012
  LPUSER_INFO_1012* = ptr USER_INFO_1012
  USER_INFO_1013* {.final, pure.} = object
    usri1013_parms*: LPWSTR
  PUSER_INFO_1013* = ptr USER_INFO_1013
  LPUSER_INFO_1013* = ptr USER_INFO_1013
  USER_INFO_1014* {.final, pure.} = object
    usri1014_workstations*: LPWSTR
  PUSER_INFO_1014* = ptr USER_INFO_1014
  LPUSER_INFO_1014* = ptr USER_INFO_1014
  USER_INFO_1017* {.final, pure.} = object
    usri1017_acct_expires*: DWORD
  PUSER_INFO_1017* = ptr USER_INFO_1017
  LPUSER_INFO_1017* = ptr USER_INFO_1017
  USER_INFO_1018* {.final, pure.} = object
    usri1018_max_storage*: DWORD
  PUSER_INFO_1018* = ptr USER_INFO_1018
  LPUSER_INFO_1018* = ptr USER_INFO_1018
  USER_INFO_1020* {.final, pure.} = object
    usri1020_units_per_week*: DWORD
    usri1020_logon_hours*: PBYTE
  PUSER_INFO_1020* = ptr USER_INFO_1020
  LPUSER_INFO_1020* = ptr USER_INFO_1020
  USER_INFO_1023* {.final, pure.} = object
    usri1023_logon_server*: LPWSTR
  PUSER_INFO_1023* = ptr USER_INFO_1023
  LPUSER_INFO_1023* = ptr USER_INFO_1023
  USER_INFO_1024* {.final, pure.} = object
    usri1024_country_code*: DWORD
  PUSER_INFO_1024* = ptr USER_INFO_1024
  LPUSER_INFO_1024* = ptr USER_INFO_1024
  USER_INFO_1025* {.final, pure.} = object
    usri1025_code_page*: DWORD
  PUSER_INFO_1025* = ptr USER_INFO_1025
  LPUSER_INFO_1025* = ptr USER_INFO_1025
  USER_INFO_1051* {.final, pure.} = object
    usri1051_primary_group_id*: DWORD
  PUSER_INFO_1051* = ptr USER_INFO_1051
  LPUSER_INFO_1051* = ptr USER_INFO_1051
  USER_INFO_1052* {.final, pure.} = object
    usri1052_profile*: LPWSTR
  PUSER_INFO_1052* = ptr USER_INFO_1052
  LPUSER_INFO_1052* = ptr USER_INFO_1052
  USER_INFO_1053* {.final, pure.} = object
    usri1053_home_dir_drive*: LPWSTR
  PUSER_INFO_1053* = ptr USER_INFO_1053
  LPUSER_INFO_1053* = ptr USER_INFO_1053
  USER_MODALS_INFO_0* {.final, pure.} = object
    usrmod0_min_passwd_len*: DWORD
    usrmod0_max_passwd_age*: DWORD
    usrmod0_min_passwd_age*: DWORD
    usrmod0_force_logoff*: DWORD
    usrmod0_password_hist_len*: DWORD
  PUSER_MODALS_INFO_0* = ptr USER_MODALS_INFO_0
  LPUSER_MODALS_INFO_0* = ptr USER_MODALS_INFO_0
  USER_MODALS_INFO_1* {.final, pure.} = object
    usrmod1_role*: DWORD
    usrmod1_primary*: LPWSTR
  PUSER_MODALS_INFO_1* = ptr USER_MODALS_INFO_1
  LPUSER_MODALS_INFO_1* = ptr USER_MODALS_INFO_1
  USER_MODALS_INFO_2* {.final, pure.} = object
    usrmod2_domain_name*: LPWSTR
    usrmod2_domain_id*: PSID
  PUSER_MODALS_INFO_2* = ptr USER_MODALS_INFO_2
  LPUSER_MODALS_INFO_2* = ptr USER_MODALS_INFO_2
  USER_MODALS_INFO_3* {.final, pure.} = object
    usrmod3_lockout_duration*: DWORD
    usrmod3_lockout_observation_window*: DWORD
    usrmod3_lockout_threshold*: DWORD
  PUSER_MODALS_INFO_3* = ptr USER_MODALS_INFO_3
  LPUSER_MODALS_INFO_3* = ptr USER_MODALS_INFO_3
  USER_MODALS_INFO_1001* {.final, pure.} = object
    usrmod1001_min_passwd_len*: DWORD
  PUSER_MODALS_INFO_1001* = ptr USER_MODALS_INFO_1001
  LPUSER_MODALS_INFO_1001* = ptr USER_MODALS_INFO_1001
  USER_MODALS_INFO_1002* {.final, pure.} = object
    usrmod1002_max_passwd_age*: DWORD
  PUSER_MODALS_INFO_1002* = ptr USER_MODALS_INFO_1002
  LPUSER_MODALS_INFO_1002* = ptr USER_MODALS_INFO_1002
  USER_MODALS_INFO_1003* {.final, pure.} = object
    usrmod1003_min_passwd_age*: DWORD
  PUSER_MODALS_INFO_1003* = ptr USER_MODALS_INFO_1003
  LPUSER_MODALS_INFO_1003* = ptr USER_MODALS_INFO_1003
  USER_MODALS_INFO_1004* {.final, pure.} = object
    usrmod1004_force_logoff*: DWORD
  PUSER_MODALS_INFO_1004* = ptr USER_MODALS_INFO_1004
  LPUSER_MODALS_INFO_1004* = ptr USER_MODALS_INFO_1004
  USER_MODALS_INFO_1005* {.final, pure.} = object
    usrmod1005_password_hist_len*: DWORD
  PUSER_MODALS_INFO_1005* = ptr USER_MODALS_INFO_1005
  LPUSER_MODALS_INFO_1005* = ptr USER_MODALS_INFO_1005
  USER_MODALS_INFO_1006* {.final, pure.} = object
    usrmod1006_role*: DWORD
  PUSER_MODALS_INFO_1006* = ptr USER_MODALS_INFO_1006
  LPUSER_MODALS_INFO_1006* = ptr USER_MODALS_INFO_1006
  USER_MODALS_INFO_1007* {.final, pure.} = object
    usrmod1007_primary*: LPWSTR
  PUSER_MODALS_INFO_1007* = ptr USER_MODALS_INFO_1007
  LPUSER_MODALS_INFO_1007* = ptr USER_MODALS_INFO_1007
  GROUP_INFO_0* {.final, pure.} = object
    grpi0_name*: LPWSTR
  PGROUP_INFO_0* = ptr GROUP_INFO_0
  LPGROUP_INFO_0* = ptr GROUP_INFO_0
  GROUP_INFO_1* {.final, pure.} = object
    grpi1_name*: LPWSTR
    grpi1_comment*: LPWSTR
  PGROUP_INFO_1* = ptr GROUP_INFO_1
  LPGROUP_INFO_1* = ptr GROUP_INFO_1
  GROUP_INFO_2* {.final, pure.} = object
    grpi2_name*: LPWSTR
    grpi2_comment*: LPWSTR
    grpi2_group_id*: DWORD
    grpi2_attributes*: DWORD
  PGROUP_INFO_2* = ptr GROUP_INFO_2
  GROUP_INFO_1002* {.final, pure.} = object
    grpi1002_comment*: LPWSTR
  PGROUP_INFO_1002* = ptr GROUP_INFO_1002
  LPGROUP_INFO_1002* = ptr GROUP_INFO_1002
  GROUP_INFO_1005* {.final, pure.} = object
    grpi1005_attributes*: DWORD
  PGROUP_INFO_1005* = ptr GROUP_INFO_1005
  LPGROUP_INFO_1005* = ptr GROUP_INFO_1005
  GROUP_USERS_INFO_0* {.final, pure.} = object
    grui0_name*: LPWSTR
  PGROUP_USERS_INFO_0* = ptr GROUP_USERS_INFO_0
  LPGROUP_USERS_INFO_0* = ptr GROUP_USERS_INFO_0
  GROUP_USERS_INFO_1* {.final, pure.} = object
    grui1_name*: LPWSTR
    grui1_attributes*: DWORD
  PGROUP_USERS_INFO_1* = ptr GROUP_USERS_INFO_1
  LPGROUP_USERS_INFO_1* = ptr GROUP_USERS_INFO_1
  LOCALGROUP_INFO_0* {.final, pure.} = object
    lgrpi0_name*: LPWSTR
  PLOCALGROUP_INFO_0* = ptr LOCALGROUP_INFO_0
  LPLOCALGROUP_INFO_0* = ptr LOCALGROUP_INFO_0
  LOCALGROUP_INFO_1* {.final, pure.} = object
    lgrpi1_name*: LPWSTR
    lgrpi1_comment*: LPWSTR
  PLOCALGROUP_INFO_1* = ptr LOCALGROUP_INFO_1
  LPLOCALGROUP_INFO_1* = ptr LOCALGROUP_INFO_1
  LOCALGROUP_INFO_1002* {.final, pure.} = object
    lgrpi1002_comment*: LPWSTR
  PLOCALGROUP_INFO_1002* = ptr LOCALGROUP_INFO_1002
  LPLOCALGROUP_INFO_1002* = ptr LOCALGROUP_INFO_1002
  LOCALGROUP_MEMBERS_INFO_0* {.final, pure.} = object
    lgrmi0_sid*: PSID
  PLOCALGROUP_MEMBERS_INFO_0* = ptr LOCALGROUP_MEMBERS_INFO_0
  LPLOCALGROUP_MEMBERS_INFO_0* = ptr LOCALGROUP_MEMBERS_INFO_0
  LOCALGROUP_MEMBERS_INFO_1* {.final, pure.} = object
    lgrmi1_sid*: PSID
    lgrmi1_sidusage*: SID_NAME_USE
    lgrmi1_name*: LPWSTR
  PLOCALGROUP_MEMBERS_INFO_1* = ptr LOCALGROUP_MEMBERS_INFO_1
  LPLOCALGROUP_MEMBERS_INFO_1* = ptr LOCALGROUP_MEMBERS_INFO_1
  LOCALGROUP_MEMBERS_INFO_2* {.final, pure.} = object
    lgrmi2_sid*: PSID
    lgrmi2_sidusage*: SID_NAME_USE
    lgrmi2_domainandname*: LPWSTR
  PLOCALGROUP_MEMBERS_INFO_2* = ptr LOCALGROUP_MEMBERS_INFO_2
  LPLOCALGROUP_MEMBERS_INFO_2* = ptr LOCALGROUP_MEMBERS_INFO_2
  LOCALGROUP_MEMBERS_INFO_3* {.final, pure.} = object
    lgrmi3_domainandname*: LPWSTR
  PLOCALGROUP_MEMBERS_INFO_3* = ptr LOCALGROUP_MEMBERS_INFO_3
  LPLOCALGROUP_MEMBERS_INFO_3* = ptr LOCALGROUP_MEMBERS_INFO_3
  LOCALGROUP_USERS_INFO_0* {.final, pure.} = object
    lgrui0_name*: LPWSTR
  PLOCALGROUP_USERS_INFO_0* = ptr LOCALGROUP_USERS_INFO_0
  LPLOCALGROUP_USERS_INFO_0* = ptr LOCALGROUP_USERS_INFO_0
  NET_DISPLAY_USER* {.final, pure.} = object
    usri1_name*: LPWSTR
    usri1_comment*: LPWSTR
    usri1_flags*: DWORD
    usri1_full_name*: LPWSTR
    usri1_user_id*: DWORD
    usri1_next_index*: DWORD
  PNET_DISPLAY_USER* = ptr NET_DISPLAY_USER
  NET_DISPLAY_MACHINE* {.final, pure.} = object
    usri2_name*: LPWSTR
    usri2_comment*: LPWSTR
    usri2_flags*: DWORD
    usri2_user_id*: DWORD
    usri2_next_index*: DWORD
  PNET_DISPLAY_MACHINE* = ptr NET_DISPLAY_MACHINE
  NET_DISPLAY_GROUP* {.final, pure.} = object
    grpi3_name*: LPWSTR
    grpi3_comment*: LPWSTR
    grpi3_group_id*: DWORD
    grpi3_attributes*: DWORD
    grpi3_next_index*: DWORD
  PNET_DISPLAY_GROUP* = ptr NET_DISPLAY_GROUP
  ACCESS_INFO_0* {.final, pure.} = object
    acc0_resource_name*: LPTSTR
  PACCESS_INFO_0* = ptr ACCESS_INFO_0
  LPACCESS_INFO_0* = ptr ACCESS_INFO_0
  ACCESS_INFO_1* {.final, pure.} = object
    acc1_resource_name*: LPTSTR
    acc1_attr*: DWORD
    acc1_count*: DWORD
  PACCESS_INFO_1* = ptr ACCESS_INFO_1
  LPACCESS_INFO_1* = ptr ACCESS_INFO_1
  ACCESS_INFO_1002* {.final, pure.} = object
    acc1002_attr*: DWORD
  PACCESS_INFO_1002* = ptr ACCESS_INFO_1002
  LPACCESS_INFO_1002* = ptr ACCESS_INFO_1002
  ACCESS_LIST* {.final, pure.} = object
    acl_ugname*: LPTSTR
    acl_access*: DWORD
  PACCESS_LIST* = ptr ACCESS_LIST
  LPACCESS_LIST* = ptr ACCESS_LIST
  NETLOGON_INFO_1* {.final, pure.} = object
    netlog1_flags*: DWORD
    netlog1_pdc_connection_status*: NET_API_STATUS
  PNETLOGON_INFO_1* = ptr NETLOGON_INFO_1
  NETLOGON_INFO_2* {.final, pure.} = object
    netlog2_flags*: DWORD
    netlog2_pdc_connection_status*: NET_API_STATUS
    netlog2_trusted_dc_name*: LPWSTR
    netlog2_tc_connection_status*: NET_API_STATUS
  PNETLOGON_INFO_2* = ptr NETLOGON_INFO_2
  NETLOGON_INFO_3* {.final, pure.} = object
    netlog3_flags*: DWORD
    netlog3_logon_attempts*: DWORD
    netlog3_reserved1*: DWORD
    netlog3_reserved2*: DWORD
    netlog3_reserved3*: DWORD
    netlog3_reserved4*: DWORD
    netlog3_reserved5*: DWORD
  PNETLOGON_INFO_3* = ptr NETLOGON_INFO_3

proc NetAccessAdd*(P1: LPCWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetAccessEnum*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: DWORD, P5: ptr PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD, P9: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetAccessGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetAccessSetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetAccessDel*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetAccessGetUserPerms*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserAdd*(P1: LPCWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserEnum*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: ptr PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD, P8: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserSetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserDel*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserGetGroups*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserSetGroups*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserGetLocalGroups*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: DWORD, P5: ptr PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserModalsGet*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserModalsSet*(P1: LPCWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserChangePassword*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGroupAdd*(P1: LPCWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGroupAddUser*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGroupEnum*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGroupGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGroupSetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGroupDel*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGroupDelUser*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGroupGetUsers*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD, P8: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGroupSetUsers*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupAdd*(P1: LPCWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupAddMember*(P1: LPCWSTR, P2: LPCWSTR, P3: PSID): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupEnum*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupSetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupDel*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupDelMember*(P1: LPCWSTR, P2: LPCWSTR, P3: PSID): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupGetMembers*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD, P8: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupSetMembers*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupAddMembers*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupDelMembers*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetQueryDisplayInformation*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: DWORD, P5: DWORD, P6: PDWORD, P7: ptr PVOID): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGetDisplayInformationIndex*(P1: LPCWSTR, P2: DWORD, P3: LPCWSTR, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGetDCName*(P1: LPCWSTR, P2: LPCWSTR, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGetAnyDCName*(P1: LPCWSTR, P2: LPCWSTR, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_NetLogonControl*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_NetLogonControl2*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: PBYTE, P5: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmalert.nim

const
  ALERTER_MAILSLOT* = r"\\.\MAILSLOT\Alerter"
  ALERT_PRINT_EVENT* = "PRINTING"
  ALERT_MESSAGE_EVENT* = "MESSAGE"
  ALERT_ERRORLOG_EVENT* = "ERRORLOG"
  ALERT_ADMIN_EVENT* = "ADMIN"
  ALERT_USER_EVENT* = "USER"
  PRJOB_QSTATUS* = 3
  PRJOB_DEVSTATUS* = 508
  PRJOB_COMPLETE* = 4
  PRJOB_INTERV* = 8
  PRJOB* = 16
  PRJOB_DESTOFFLINE* = 32
  PRJOB_DESTPAUSED* = 64
  PRJOB_NOTIFY* = 128
  PRJOB_DESTNOPAPER* = 256
  PRJOB_DELETED* = 32768
  PRJOB_QS_QUEUED* = 0
  PRJOB_QS_PAUSED* = 1
  PRJOB_QS_SPOOLING* = 2
  PRJOB_QS_PRINTING* = 3

type
  ADMIN_OTHER_INFO* {.final, pure.} = object
    alrtad_errcode*: DWORD
    alrtad_numstrings*: DWORD
  PADMIN_OTHER_INFO* = ptr ADMIN_OTHER_INFO
  LPADMIN_OTHER_INFO* = ptr ADMIN_OTHER_INFO
  STD_ALERT* {.final, pure.} = object
    alrt_timestamp*: DWORD
    alrt_eventname*: array[EVLEN+1, TCHAR]
    alrt_servicename*: array[SNLEN+1, TCHAR]
  PSTD_ALERT* = ptr STD_ALERT
  LPSTD_ALERT* = ptr STD_ALERT
  ERRLOG_OTHER_INFO* {.final, pure.} = object
    alrter_errcode*: DWORD
    alrter_offset*: DWORD
  PERRLOG_OTHER_INFO* = ptr ERRLOG_OTHER_INFO
  LPERRLOG_OTHER_INFO* = ptr ERRLOG_OTHER_INFO
  PRINT_OTHER_INFO* {.final, pure.} = object
    alrtpr_jobid*: DWORD
    alrtpr_status*: DWORD
    alrtpr_submitted*: DWORD
    alrtpr_size*: DWORD
  PPRINT_OTHER_INFO* = ptr PRINT_OTHER_INFO
  LPPRINT_OTHER_INFO* = ptr PRINT_OTHER_INFO
  USER_OTHER_INFO* {.final, pure.} = object
    alrtus_errcode*: DWORD
    alrtus_numstrings*: DWORD
  PUSER_OTHER_INFO* = ptr USER_OTHER_INFO
  LPUSER_OTHER_INFO* = ptr USER_OTHER_INFO

proc NetAlertRaise*(P1: LPCWSTR, P2: PVOID, P3: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetAlertRaiseEx*(P1: LPCWSTR, P2: PVOID, P3: DWORD, P4: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmapibuf.nim

proc NetApiBufferAllocate*(P1: DWORD, P2: ptr PVOID): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetApiBufferFree*(P1: PVOID): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetApiBufferReallocate*(P1: PVOID, P2: DWORD, P3: ptr PVOID): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetApiBufferSize*(P1: PVOID, P2: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetapipBufferAllocate*(P1: DWORD, P2: ptr PVOID): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmat.nim

const
  JOB_RUN_PERIODICALLY* = 1
  JOB_EXEC_ERROR* = 2
  JOB_RUNS_TODAY* = 4
  JOB_ADD_CURRENT_DATE* = 8
  JOB_NONINTERACTIVE* = 16
  JOB_INPUT_FLAGS* = JOB_RUN_PERIODICALLY or JOB_ADD_CURRENT_DATE or JOB_NONINTERACTIVE
  JOB_OUTPUT_FLAGS* = JOB_RUN_PERIODICALLY or JOB_EXEC_ERROR or JOB_RUNS_TODAY or JOB_NONINTERACTIVE

type
  AT_ENUM* {.final, pure.} = object
    JobId*: DWORD
    JobTime*: DWORD
    DaysOfMonth*: DWORD
    DaysOfWeek*: UCHAR
    Flags*: UCHAR
    Command*: LPWSTR
  PAT_ENUM* = ptr AT_ENUM
  LPAT_ENUM* = ptr AT_ENUM
  AT_INFO* {.final, pure.} = object
    JobTime*: DWORD
    DaysOfMonth*: DWORD
    DaysOfWeek*: UCHAR
    Flags*: UCHAR
    Command*: LPWSTR
  PAT_INFO* = ptr AT_INFO
  LPAT_INFO* = ptr AT_INFO

proc NetScheduleJobAdd*(P1: LPWSTR, P2: PBYTE, P3: LPDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetScheduleJobDel*(P1: LPWSTR, P2: DWORD, P3: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetScheduleJobEnum*(P1: LPWSTR, P2: ptr PBYTE, P3: DWORD, P4: PDWORD, P5: PDWORD, P6: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetScheduleJobGetInfo*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmaudit.nim

const
  LOGFLAGS_FORWARD* = 0
  LOGFLAGS_BACKWARD* = 1
  LOGFLAGS_SEEK* = 2
  ACTION_LOCKOUT* = 0
  ACTION_ADMINUNLOCK* = 1
  AE_GUEST* = 0
  AE_USER* = 1
  AE_ADMIN* = 2
  AE_NORMAL* = 0
  AE_USERLIMIT* = 0
  AE_GENERAL* = 0
  AE_ERROR* = 1
  AE_SESSDIS* = 1
  AE_BADPW* = 1
  AE_AUTODIS* = 2
  AE_UNSHARE* = 2
  AE_ADMINPRIVREQD* = 2
  AE_ADMINDIS* = 3
  AE_NOACCESSPERM* = 3
  AE_ACCRESTRICT* = 4
  AE_NORMAL_CLOSE* = 0
  AE_SES_CLOSE* = 1
  AE_ADMIN_CLOSE* = 2
  AE_LIM_UNKNOWN* = 0
  AE_LIM_LOGONHOURS* = 1
  AE_LIM_EXPIRED* = 2
  AE_LIM_INVAL_WKSTA* = 3
  AE_LIM_DISABLED* = 4
  AE_LIM_DELETED* = 5
  AE_MOD* = 0
  AE_DELETE* = 1
  AE_ADD* = 2
  AE_UAS_USER* = 0
  AE_UAS_GROUP* = 1
  AE_UAS_MODALS* = 2
  SVAUD_SERVICE* = 1
  SVAUD_GOODSESSLOGON* = 6
  SVAUD_BADSESSLOGON* = 24
  SVAUD_SESSLOGON* = SVAUD_GOODSESSLOGON or SVAUD_BADSESSLOGON
  SVAUD_GOODNETLOGON* = 96
  SVAUD_BADNETLOGON* = 384
  SVAUD_NETLOGON* = SVAUD_GOODNETLOGON or SVAUD_BADNETLOGON
  SVAUD_LOGON* = SVAUD_NETLOGON or SVAUD_SESSLOGON
  SVAUD_GOODUSE* = 0x600
  SVAUD_BADUSE* = 0x1800
  SVAUD_USE* = SVAUD_GOODUSE or SVAUD_BADUSE
  SVAUD_USERLIST* = 8192
  SVAUD_PERMISSIONS* = 16384
  SVAUD_RESOURCE* = 32768
  SVAUD_LOGONLIM* = 65536
  AA_AUDIT_ALL* = 1
  AA_A_OWNER* = 4
  AA_CLOSE* = 8
  AA_S_OPEN* = 16
  AA_S_WRITE* = 32
  AA_S_CREATE* = 32
  AA_S_DELETE* = 64
  AA_S_ACL* = 128
  AA_S_ALL* = 253
  AA_F_OPEN* = 256
  AA_F_WRITE* = 512
  AA_F_CREATE* = 512
  AA_F_DELETE* = 1024
  AA_F_ACL* = 2048
  AA_F_ALL* = AA_F_OPEN or AA_F_WRITE or AA_F_DELETE or AA_F_ACL
  AA_A_OPEN* = 2048
  AA_A_WRITE* = 4096
  AA_A_CREATE* = 8192
  AA_A_DELETE* = 16384
  AA_A_ACL* = 32768
  AA_A_ALL* = AA_F_OPEN or AA_F_WRITE or AA_F_DELETE or AA_F_ACL

type
  AUDIT_ENTRY* {.final, pure.} = object
    ae_len*: DWORD
    ae_reserved*: DWORD
    ae_time*: DWORD
    ae_type*: DWORD
    ae_data_offset*: DWORD
    ae_data_size*: DWORD
  PAUDIT_ENTRY* = ptr AUDIT_ENTRY
  LPAUDIT_ENTRY* = ptr AUDIT_ENTRY
  HLOG* {.final, pure.} = object
    time*: DWORD
    last_flags*: DWORD
    offset*: DWORD
    rec_offset*: DWORD
  PHLOG* = ptr HLOG
  LPHLOG* = ptr HLOG
  AE_SRVSTATUS* {.final, pure.} = object
    ae_sv_status*: DWORD
  PAE_SRVSTATUS* = ptr AE_SRVSTATUS
  LPAE_SRVSTATUS* = ptr AE_SRVSTATUS
  AE_SESSLOGON* {.final, pure.} = object
    ae_so_compname*: DWORD
    ae_so_username*: DWORD
    ae_so_privilege*: DWORD
  PAE_SESSLOGON* = ptr AE_SESSLOGON
  LPAE_SESSLOGON* = ptr AE_SESSLOGON
  AE_SESSLOGOFF* {.final, pure.} = object
    ae_sf_compname*: DWORD
    ae_sf_username*: DWORD
    ae_sf_reason*: DWORD
  PAE_SESSLOGOFF* = ptr AE_SESSLOGOFF
  LPAE_SESSLOGOFF* = ptr AE_SESSLOGOFF
  AE_SESSPWERR* {.final, pure.} = object
    ae_sp_compname*: DWORD
    ae_sp_username*: DWORD
  PAE_SESSPWERR* = ptr AE_SESSPWERR
  LPAE_SESSPWERR* = ptr AE_SESSPWERR
  AE_CONNSTART* {.final, pure.} = object
    ae_ct_compname*: DWORD
    ae_ct_username*: DWORD
    ae_ct_netname*: DWORD
    ae_ct_connid*: DWORD
  PAE_CONNSTART* = ptr AE_CONNSTART
  LPAE_CONNSTART* = ptr AE_CONNSTART
  AE_CONNSTOP* {.final, pure.} = object
    ae_cp_compname*: DWORD
    ae_cp_username*: DWORD
    ae_cp_netname*: DWORD
    ae_cp_connid*: DWORD
    ae_cp_reason*: DWORD
  PAE_CONNSTOP* = ptr AE_CONNSTOP
  LPAE_CONNSTOP* = ptr AE_CONNSTOP
  AE_CONNREJ* {.final, pure.} = object
    ae_cr_compname*: DWORD
    ae_cr_username*: DWORD
    ae_cr_netname*: DWORD
    ae_cr_reason*: DWORD
  PAE_CONNREJ* = ptr AE_CONNREJ
  LPAE_CONNREJ* = ptr AE_CONNREJ
  AE_RESACCESS* {.final, pure.} = object
    ae_ra_compname*: DWORD
    ae_ra_username*: DWORD
    ae_ra_resname*: DWORD
    ae_ra_operation*: DWORD
    ae_ra_returncode*: DWORD
    ae_ra_restype*: DWORD
    ae_ra_fileid*: DWORD
  PAE_RESACCESS* = ptr AE_RESACCESS
  LPAE_RESACCESS* = ptr AE_RESACCESS
  AE_RESACCESSREJ* {.final, pure.} = object
    ae_rr_compname*: DWORD
    ae_rr_username*: DWORD
    ae_rr_resname*: DWORD
    ae_rr_operation*: DWORD
  PAE_RESACCESSREJ* = ptr AE_RESACCESSREJ
  LPAE_RESACCESSREJ* = ptr AE_RESACCESSREJ
  AE_CLOSEFILE* {.final, pure.} = object
    ae_cf_compname*: DWORD
    ae_cf_username*: DWORD
    ae_cf_resname*: DWORD
    ae_cf_fileid*: DWORD
    ae_cf_duration*: DWORD
    ae_cf_reason*: DWORD
  PAE_CLOSEFILE* = ptr AE_CLOSEFILE
  LPAE_CLOSEFILE* = ptr AE_CLOSEFILE
  AE_SERVICESTAT* {.final, pure.} = object
    ae_ss_compname*: DWORD
    ae_ss_username*: DWORD
    ae_ss_svcname*: DWORD
    ae_ss_status*: DWORD
    ae_ss_code*: DWORD
    ae_ss_text*: DWORD
    ae_ss_returnval*: DWORD
  PAE_SERVICESTAT* = ptr AE_SERVICESTAT
  LPAE_SERVICESTAT* = ptr AE_SERVICESTAT
  AE_ACLMOD* {.final, pure.} = object
    ae_am_compname*: DWORD
    ae_am_username*: DWORD
    ae_am_resname*: DWORD
    ae_am_action*: DWORD
    ae_am_datalen*: DWORD
  PAE_ACLMOD* = ptr AE_ACLMOD
  LPAE_ACLMOD* = ptr AE_ACLMOD
  AE_UASMOD* {.final, pure.} = object
    ae_um_compname*: DWORD
    ae_um_username*: DWORD
    ae_um_resname*: DWORD
    ae_um_rectype*: DWORD
    ae_um_action*: DWORD
    ae_um_datalen*: DWORD
  PAE_UASMOD* = ptr AE_UASMOD
  LPAE_UASMOD* = ptr AE_UASMOD
  AE_NETLOGON* {.final, pure.} = object
    ae_no_compname*: DWORD
    ae_no_username*: DWORD
    ae_no_privilege*: DWORD
    ae_no_authflags*: DWORD
  PAE_NETLOGON* = ptr AE_NETLOGON
  LPAE_NETLOGON* = ptr AE_NETLOGON
  AE_NETLOGOFF* {.final, pure.} = object
    ae_nf_compname*: DWORD
    ae_nf_username*: DWORD
    ae_nf_reserved1*: DWORD
    ae_nf_reserved2*: DWORD
  PAE_NETLOGOFF* = ptr AE_NETLOGOFF
  LPAE_NETLOGOFF* = ptr AE_NETLOGOFF
  AE_ACCLIM* {.final, pure.} = object
    ae_al_compname*: DWORD
    ae_al_username*: DWORD
    ae_al_resname*: DWORD
    ae_al_limit*: DWORD
  PAE_ACCLIM* = ptr AE_ACCLIM
  LPAE_ACCLIM* = ptr AE_ACCLIM
  AE_LOCKOUT* {.final, pure.} = object
    ae_lk_compname*: DWORD
    ae_lk_username*: DWORD
    ae_lk_action*: DWORD
    ae_lk_bad_pw_count*: DWORD
  PAE_LOCKOUT* = ptr AE_LOCKOUT
  LPAE_LOCKOUT* = ptr AE_LOCKOUT
  AE_GENERIC* {.final, pure.} = object
    ae_ge_msgfile*: DWORD
    ae_ge_msgnum*: DWORD
    ae_ge_params*: DWORD
    ae_ge_param1*: DWORD
    ae_ge_param2*: DWORD
    ae_ge_param3*: DWORD
    ae_ge_param4*: DWORD
    ae_ge_param5*: DWORD
    ae_ge_param6*: DWORD
    ae_ge_param7*: DWORD
    ae_ge_param8*: DWORD
    ae_ge_param9*: DWORD
  PAE_GENERIC* = ptr AE_GENERIC
  LPAE_GENERIC* = ptr AE_GENERIC

proc NetAuditClear*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetAuditRead*(P1: LPTSTR, P2: LPTSTR, P3: LPHLOG, P4: DWORD, P5: PDWORD, P6: DWORD, P7: DWORD, P8: ptr PBYTE, P9: DWORD, P10: PDWORD, P11: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetAuditWrite*(P1: DWORD, P2: PBYTE, P3: DWORD, P4: LPTSTR, P5: PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmbrowsr.nim

const
  BROWSER_ROLE_PDC* = 1
  BROWSER_ROLE_BDC* = 2

type
  BROWSER_STATISTICS* {.final, pure.} = object
    StatisticsStartTime*: LARGE_INTEGER
    NumberOfServerAnnouncements*: LARGE_INTEGER
    NumberOfDomainAnnouncements*: LARGE_INTEGER
    NumberOfElectionPackets*: ULONG
    NumberOfMailslotWrites*: ULONG
    NumberOfGetBrowserServerListRequests*: ULONG
    NumberOfServerEnumerations*: ULONG
    NumberOfDomainEnumerations*: ULONG
    NumberOfOtherEnumerations*: ULONG
    NumberOfMissedServerAnnouncements*: ULONG
    NumberOfMissedMailslotDatagrams*: ULONG
    NumberOfMissedGetBrowserServerListRequests*: ULONG
    NumberOfFailedServerAnnounceAllocations*: ULONG
    NumberOfFailedMailslotAllocations*: ULONG
    NumberOfFailedMailslotReceives*: ULONG
    NumberOfFailedMailslotWrites*: ULONG
    NumberOfFailedMailslotOpens*: ULONG
    NumberOfDuplicateMasterAnnouncements*: ULONG
    NumberOfIllegalDatagrams*: LARGE_INTEGER
  PBROWSER_STATISTICS* = ptr BROWSER_STATISTICS
  LPBROWSER_STATISTICS* = ptr BROWSER_STATISTICS
  BROWSER_STATISTICS_100* {.final, pure.} = object
    StartTime*: LARGE_INTEGER
    NumberOfServerAnnouncements*: LARGE_INTEGER
    NumberOfDomainAnnouncements*: LARGE_INTEGER
    NumberOfElectionPackets*: ULONG
    NumberOfMailslotWrites*: ULONG
    NumberOfGetBrowserServerListRequests*: ULONG
    NumberOfIllegalDatagrams*: LARGE_INTEGER
  PBROWSER_STATISTICS_100* = ptr BROWSER_STATISTICS_100
  BROWSER_STATISTICS_101* {.final, pure.} = object
    StartTime*: LARGE_INTEGER
    NumberOfServerAnnouncements*: LARGE_INTEGER
    NumberOfDomainAnnouncements*: LARGE_INTEGER
    NumberOfElectionPackets*: ULONG
    NumberOfMailslotWrites*: ULONG
    NumberOfGetBrowserServerListRequests*: ULONG
    NumberOfIllegalDatagrams*: LARGE_INTEGER
    NumberOfMissedServerAnnouncements*: ULONG
    NumberOfMissedMailslotDatagrams*: ULONG
    NumberOfMissedGetBrowserServerListRequests*: ULONG
    NumberOfFailedServerAnnounceAllocations*: ULONG
    NumberOfFailedMailslotAllocations*: ULONG
    NumberOfFailedMailslotReceives*: ULONG
    NumberOfFailedMailslotWrites*: ULONG
    NumberOfFailedMailslotOpens*: ULONG
    NumberOfDuplicateMasterAnnouncements*: ULONG
  PBROWSER_STATISTICS_101* = ptr BROWSER_STATISTICS_101

proc I_BrowserServerEnum*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: ptr PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD, P9: DWORD, P10: LPCWSTR, P11: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_BrowserServerEnumEx*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: ptr PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD, P9: DWORD, P10: LPCWSTR, P11: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_BrowserQueryEmulatedDomains*(P1: LPWSTR, P2: ptr PBYTE, P3: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_BrowserQueryOtherDomains*(P1: LPCWSTR, P2: ptr PBYTE, P3: PDWORD, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_BrowserResetNetlogonState*(P1: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_BrowserSetNetlogonState*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR, P4: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_BrowserQueryStatistics*(P1: LPCWSTR, P2: ptr LPBROWSER_STATISTICS): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_BrowserResetStatistics*(P1: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_BrowserServerEnumForXactsrv*(P1: LPCWSTR, P2: LPCWSTR, P3: ULONG, P4: USHORT, P5: PVOID, P6: WORD, P7: DWORD, P8: PDWORD, P9: PDWORD, P10: DWORD, P11: LPCWSTR, P12: LPCWSTR, P13: PWORD): WORD {.winapi, dynlib: "netapi32", importc.}
proc I_BrowserDebugTrace*(P1: PWCHAR, P2: PCHAR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmchdev.nim

const
  CHARDEVQ_NO_REQUESTS* = -1
  CHARDEV_CLOSE* = 0
  CHARDEVQ_MAX_PRIORITY* = 1
  CHARDEVQ_DEV_PARMNUM* = 1
  HANDLE_INFO_LEVEL_1* = 1
  HANDLE_CHARTIME_PARMNUM* = 1
  HANDLE_CHARCOUNT_PARMNUM* = 2
  CHARDEV_STAT_OPENED* = 2
  CHARDEVQ_PRIORITY_PARMNUM* = 2
  CHARDEVQ_DEVS_PARMNUM* = 3
  CHARDEV_STAT_ERROR* = 4
  CHARDEVQ_NUMUSERS_PARMNUM* = 4
  CHARDEVQ_NUMAHEAD_PARMNUM* = 5
  CHARDEVQ_DEF_PRIORITY* = 5
  CHARDEVQ_PRIORITY_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+CHARDEVQ_PRIORITY_PARMNUM
  CHARDEVQ_DEVS_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+CHARDEVQ_DEVS_PARMNUM
  CHARDEVQ_MIN_PRIORITY* = 9

type
  CHARDEV_INFO_0* {.final, pure.} = object
    ch0_dev*: LPWSTR
  PCHARDEV_INFO_0* = ptr CHARDEV_INFO_0
  LPCHARDEV_INFO_0* = ptr CHARDEV_INFO_0
  CHARDEV_INFO_1* {.final, pure.} = object
    ch1_dev*: LPWSTR
    ch1_status*: DWORD
    ch1_username*: LPWSTR
    ch1_time*: DWORD
  PCHARDEV_INFO_1* = ptr CHARDEV_INFO_1
  LPCHARDEV_INFO_1* = ptr CHARDEV_INFO_1
  CHARDEVQ_INFO_0* {.final, pure.} = object
    cq0_dev*: LPWSTR
  PCHARDEVQ_INFO_0* = ptr CHARDEVQ_INFO_0
  LPCHARDEVQ_INFO_0* = ptr CHARDEVQ_INFO_0
  CHARDEVQ_INFO_1* {.final, pure.} = object
    cq1_dev*: LPWSTR
    cq1_priority*: DWORD
    cq1_devs*: LPWSTR
    cq1_numusers*: DWORD
    cq1_numahead*: DWORD
  PCHARDEVQ_INFO_1* = ptr CHARDEVQ_INFO_1
  LPCHARDEVQ_INFO_1* = ptr CHARDEVQ_INFO_1
  CHARDEVQ_INFO_1002* {.final, pure.} = object
    cq1002_priority*: DWORD
  PCHARDEVQ_INFO_1002* = ptr CHARDEVQ_INFO_1002
  LPCHARDEVQ_INFO_1002* = ptr CHARDEVQ_INFO_1002
  CHARDEVQ_INFO_1003* {.final, pure.} = object
    cq1003_devs*: LPWSTR
  PCHARDEVQ_INFO_1003* = ptr CHARDEVQ_INFO_1003
  LPCHARDEVQ_INFO_1003* = ptr CHARDEVQ_INFO_1003
  HANDLE_INFO_1* {.final, pure.} = object
    hdli1_chartime*: DWORD
    hdli1_charcount*: DWORD
  PHANDLE_INFO_1* = ptr HANDLE_INFO_1
  LPHANDLE_INFO_1* = ptr HANDLE_INFO_1

proc NetCharDevEnum*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetCharDevGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetCharDevControl*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetCharDevQEnum*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD, P8: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetCharDevQGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetCharDevQSetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetCharDevQPurge*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetCharDevQPurgeSelf*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetHandleGetInfo*(P1: HANDLE, P2: DWORD, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetHandleSetInfo*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmconfig.nim

type
  CONFIG_INFO_0* {.final, pure.} = object
    cfgi0_key*: LPWSTR
    cfgi0_data*: LPWSTR
  PCONFIG_INFO_0* = ptr CONFIG_INFO_0
  LPCONFIG_INFO_0* = ptr CONFIG_INFO_0

proc NetConfigGet*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetConfigGetAll*(P1: LPCWSTR, P2: LPCWSTR, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetConfigSet*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD, P6: PBYTE, P7: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmerrlog.nim

const
  ERRLOG_BASE* = 3100
  ERRLOG2_BASE* = 5700
  NELOG_Internal_Error* = ERRLOG_BASE
  NELOG_Resource_Shortage* = ( ERRLOG_BASE+1 )
  NELOG_Unable_To_Lock_Segment* = ( ERRLOG_BASE+2 )
  NELOG_Unable_To_Unlock_Segment* = ( ERRLOG_BASE+3 )
  NELOG_Uninstall_Service* = ( ERRLOG_BASE+4 )
  NELOG_Init_Exec_Fail* = ( ERRLOG_BASE+5 )
  NELOG_Ncb_Error* = ( ERRLOG_BASE+6 )
  NELOG_Net_Not_Started* = ( ERRLOG_BASE+7 )
  NELOG_Ioctl_Error* = ( ERRLOG_BASE+8 )
  NELOG_System_Semaphore* = ( ERRLOG_BASE+9 )
  NELOG_Init_OpenCreate_Err* = ( ERRLOG_BASE+10 )
  NELOG_NetBios* = ( ERRLOG_BASE+11 )
  NELOG_SMB_Illegal* = ( ERRLOG_BASE+12 )
  NELOG_Service_Fail* = ( ERRLOG_BASE+13 )
  NELOG_Entries_Lost* = ( ERRLOG_BASE+14 )
  NELOG_Init_Seg_Overflow* = ( ERRLOG_BASE+20 )
  NELOG_Srv_No_Mem_Grow* = ( ERRLOG_BASE+21 )
  NELOG_Access_File_Bad* = ( ERRLOG_BASE+22 )
  NELOG_Srvnet_Not_Started* = ( ERRLOG_BASE+23 )
  NELOG_Init_Chardev_Err* = ( ERRLOG_BASE+24 )
  NELOG_Remote_API* = ( ERRLOG_BASE+25 )
  NELOG_Ncb_TooManyErr* = ( ERRLOG_BASE+26 )
  NELOG_Mailslot_err* = ( ERRLOG_BASE+27 )
  NELOG_ReleaseMem_Alert* = ( ERRLOG_BASE+28 )
  NELOG_AT_cannot_write* = ( ERRLOG_BASE+29 )
  NELOG_Cant_Make_Msg_File* = ( ERRLOG_BASE+30 )
  NELOG_Exec_Netservr_NoMem* = ( ERRLOG_BASE+31 )
  NELOG_Server_Lock_Failure* = ( ERRLOG_BASE+32 )
  NELOG_Msg_Shutdown* = ( ERRLOG_BASE+40 )
  NELOG_Msg_Sem_Shutdown* = ( ERRLOG_BASE+41 )
  NELOG_Msg_Log_Err* = ( ERRLOG_BASE+50 )
  NELOG_VIO_POPUP_ERR* = ( ERRLOG_BASE+51 )
  NELOG_Msg_Unexpected_SMB_Type* = ( ERRLOG_BASE+52 )
  NELOG_Wksta_Infoseg* = ( ERRLOG_BASE+60 )
  NELOG_Wksta_Compname* = ( ERRLOG_BASE+61 )
  NELOG_Wksta_BiosThreadFailure* = ( ERRLOG_BASE+62 )
  NELOG_Wksta_IniSeg* = ( ERRLOG_BASE+63 )
  NELOG_Wksta_HostTab_Full* = ( ERRLOG_BASE+64 )
  NELOG_Wksta_Bad_Mailslot_SMB* = ( ERRLOG_BASE+65 )
  NELOG_Wksta_UASInit* = ( ERRLOG_BASE+66 )
  NELOG_Wksta_SSIRelogon* = ( ERRLOG_BASE+67 )
  NELOG_Build_Name* = ( ERRLOG_BASE+70 )
  NELOG_Name_Expansion* = ( ERRLOG_BASE+71 )
  NELOG_Message_Send* = ( ERRLOG_BASE+72 )
  NELOG_Mail_Slt_Err* = ( ERRLOG_BASE+73 )
  NELOG_AT_cannot_read* = ( ERRLOG_BASE+74 )
  NELOG_AT_sched_err* = ( ERRLOG_BASE+75 )
  NELOG_AT_schedule_file_created* = ( ERRLOG_BASE+76 )
  NELOG_Srvnet_NB_Open* = ( ERRLOG_BASE+77 )
  NELOG_AT_Exec_Err* = ( ERRLOG_BASE+78 )
  NELOG_Lazy_Write_Err* = ( ERRLOG_BASE+80 )
  NELOG_HotFix* = ( ERRLOG_BASE+81 )
  NELOG_HardErr_From_Server* = ( ERRLOG_BASE+82 )
  NELOG_LocalSecFail1* = ( ERRLOG_BASE+83 )
  NELOG_LocalSecFail2* = ( ERRLOG_BASE+84 )
  NELOG_LocalSecFail3* = ( ERRLOG_BASE+85 )
  NELOG_LocalSecGeneralFail* = ( ERRLOG_BASE+86 )
  NELOG_NetWkSta_Internal_Error* = ( ERRLOG_BASE+90 )
  NELOG_NetWkSta_No_Resource* = ( ERRLOG_BASE+91 )
  NELOG_NetWkSta_SMB_Err* = ( ERRLOG_BASE+92 )
  NELOG_NetWkSta_VC_Err* = ( ERRLOG_BASE+93 )
  NELOG_NetWkSta_Stuck_VC_Err* = ( ERRLOG_BASE+94 )
  NELOG_NetWkSta_NCB_Err* = ( ERRLOG_BASE+95 )
  NELOG_NetWkSta_Write_Behind_Err* = ( ERRLOG_BASE+96 )
  NELOG_NetWkSta_Reset_Err* = ( ERRLOG_BASE+97 )
  NELOG_NetWkSta_Too_Many* = ( ERRLOG_BASE+98 )
  NELOG_Srv_Thread_Failure* = ( ERRLOG_BASE+104 )
  NELOG_Srv_Close_Failure* = ( ERRLOG_BASE+105 )
  NELOG_ReplUserCurDir* = ( ERRLOG_BASE+106 )
  NELOG_ReplCannotMasterDir* = ( ERRLOG_BASE+107 )
  NELOG_ReplUpdateError* = ( ERRLOG_BASE+108 )
  NELOG_ReplLostMaster* = ( ERRLOG_BASE+109 )
  NELOG_NetlogonAuthDCFail* = ( ERRLOG_BASE+110 )
  NELOG_ReplLogonFailed* = ( ERRLOG_BASE+111 )
  NELOG_ReplNetErr* = ( ERRLOG_BASE+112 )
  NELOG_ReplMaxFiles* = ( ERRLOG_BASE+113 )
  NELOG_ReplMaxTreeDepth* = ( ERRLOG_BASE+114 )
  NELOG_ReplBadMsg* = ( ERRLOG_BASE+115 )
  NELOG_ReplSysErr* = ( ERRLOG_BASE+116 )
  NELOG_ReplUserLoged* = ( ERRLOG_BASE+117 )
  NELOG_ReplBadImport* = ( ERRLOG_BASE+118 )
  NELOG_ReplBadExport* = ( ERRLOG_BASE+119 )
  NELOG_ReplSignalFileErr* = ( ERRLOG_BASE+120 )
  NELOG_DiskFT* = ( ERRLOG_BASE+121 )
  NELOG_ReplAccessDenied* = ( ERRLOG_BASE+122 )
  NELOG_NetlogonFailedPrimary* = ( ERRLOG_BASE+123 )
  NELOG_NetlogonPasswdSetFailed* = ( ERRLOG_BASE+124 )
  NELOG_NetlogonTrackingError* = ( ERRLOG_BASE+125 )
  NELOG_NetlogonSyncError* = ( ERRLOG_BASE+126 )
  NELOG_UPS_PowerOut* = ( ERRLOG_BASE+130 )
  NELOG_UPS_Shutdown* = ( ERRLOG_BASE+131 )
  NELOG_UPS_CmdFileError* = ( ERRLOG_BASE+132 )
  NELOG_UPS_CannotOpenDriver* = ( ERRLOG_BASE+133 )
  NELOG_UPS_PowerBack* = ( ERRLOG_BASE+134 )
  NELOG_UPS_CmdFileConfig* = ( ERRLOG_BASE+135 )
  NELOG_UPS_CmdFileExec* = ( ERRLOG_BASE+136 )
  NELOG_Missing_Parameter* = ( ERRLOG_BASE+150 )
  NELOG_Invalid_Config_Line* = ( ERRLOG_BASE+151 )
  NELOG_Invalid_Config_File* = ( ERRLOG_BASE+152 )
  NELOG_File_Changed* = ( ERRLOG_BASE+153 )
  NELOG_Files_Dont_Fit* = ( ERRLOG_BASE+154 )
  NELOG_Wrong_DLL_Version* = ( ERRLOG_BASE+155 )
  NELOG_Error_in_DLL* = ( ERRLOG_BASE+156 )
  NELOG_System_Error* = ( ERRLOG_BASE+157 )
  NELOG_FT_ErrLog_Too_Large* = ( ERRLOG_BASE+158 )
  NELOG_FT_Update_In_Progress* = ( ERRLOG_BASE+159 )
  NELOG_OEM_Code* = ( ERRLOG_BASE+199 )
  NELOG_NetlogonSSIInitError* = ERRLOG2_BASE
  NELOG_NetlogonFailedToUpdateTrustList* = ( ERRLOG2_BASE+1 )
  NELOG_NetlogonFailedToAddRpcInterface* = ( ERRLOG2_BASE+2 )
  NELOG_NetlogonFailedToReadMailslot* = ( ERRLOG2_BASE+3 )
  NELOG_NetlogonFailedToRegisterSC* = ( ERRLOG2_BASE+4 )
  NELOG_NetlogonChangeLogCorrupt* = ( ERRLOG2_BASE+5 )
  NELOG_NetlogonFailedToCreateShare* = ( ERRLOG2_BASE+6 )
  NELOG_NetlogonDownLevelLogonFailed* = ( ERRLOG2_BASE+7 )
  NELOG_NetlogonDownLevelLogoffFailed* = ( ERRLOG2_BASE+8 )
  NELOG_NetlogonNTLogonFailed* = ( ERRLOG2_BASE+9 )
  NELOG_NetlogonNTLogoffFailed* = ( ERRLOG2_BASE+10 )
  NELOG_NetlogonPartialSyncCallSuccess* = ( ERRLOG2_BASE+11 )
  NELOG_NetlogonPartialSyncCallFailed* = ( ERRLOG2_BASE+12 )
  NELOG_NetlogonFullSyncCallSuccess* = ( ERRLOG2_BASE+13 )
  NELOG_NetlogonFullSyncCallFailed* = ( ERRLOG2_BASE+14 )
  NELOG_NetlogonPartialSyncSuccess* = ( ERRLOG2_BASE+15 )
  NELOG_NetlogonPartialSyncFailed* = ( ERRLOG2_BASE+16 )
  NELOG_NetlogonFullSyncSuccess* = ( ERRLOG2_BASE+17 )
  NELOG_NetlogonFullSyncFailed* = ( ERRLOG2_BASE+18 )
  NELOG_NetlogonAuthNoDomainController* = ( ERRLOG2_BASE+19 )
  NELOG_NetlogonAuthNoTrustLsaSecret* = ( ERRLOG2_BASE+20 )
  NELOG_NetlogonAuthNoTrustSamAccount* = ( ERRLOG2_BASE+21 )
  NELOG_NetlogonServerAuthFailed* = ( ERRLOG2_BASE+22 )
  NELOG_NetlogonServerAuthNoTrustSamAccount* = ( ERRLOG2_BASE+23 )
  NELOG_FailedToRegisterSC* = ( ERRLOG2_BASE+24 )
  NELOG_FailedToSetServiceStatus* = ( ERRLOG2_BASE+25 )
  NELOG_FailedToGetComputerName* = ( ERRLOG2_BASE+26 )
  NELOG_DriverNotLoaded* = ( ERRLOG2_BASE+27 )
  NELOG_NoTranportLoaded* = ( ERRLOG2_BASE+28 )
  NELOG_NetlogonFailedDomainDelta* = ( ERRLOG2_BASE+29 )
  NELOG_NetlogonFailedGlobalGroupDelta* = ( ERRLOG2_BASE+30 )
  NELOG_NetlogonFailedLocalGroupDelta* = ( ERRLOG2_BASE+31 )
  NELOG_NetlogonFailedUserDelta* = ( ERRLOG2_BASE+32 )
  NELOG_NetlogonFailedPolicyDelta* = ( ERRLOG2_BASE+33 )
  NELOG_NetlogonFailedTrustedDomainDelta* = ( ERRLOG2_BASE+34 )
  NELOG_NetlogonFailedAccountDelta* = ( ERRLOG2_BASE+35 )
  NELOG_NetlogonFailedSecretDelta* = ( ERRLOG2_BASE+36 )
  NELOG_NetlogonSystemError* = ( ERRLOG2_BASE+37 )
  NELOG_NetlogonDuplicateMachineAccounts* = ( ERRLOG2_BASE+38 )
  NELOG_NetlogonTooManyGlobalGroups* = ( ERRLOG2_BASE+39 )
  NELOG_NetlogonBrowserDriver* = ( ERRLOG2_BASE+40 )
  NELOG_NetlogonAddNameFailure* = ( ERRLOG2_BASE+41 )
  NELOG_RplMessages* = ( ERRLOG2_BASE+42 )
  NELOG_RplXnsBoot* = ( ERRLOG2_BASE+43 )
  NELOG_RplSystem* = ( ERRLOG2_BASE+44 )
  NELOG_RplWkstaTimeout* = ( ERRLOG2_BASE+45 )
  NELOG_RplWkstaFileOpen* = ( ERRLOG2_BASE+46 )
  NELOG_RplWkstaFileRead* = ( ERRLOG2_BASE+47 )
  NELOG_RplWkstaMemory* = ( ERRLOG2_BASE+48 )
  NELOG_RplWkstaFileChecksum* = ( ERRLOG2_BASE+49 )
  NELOG_RplWkstaFileLineCount* = ( ERRLOG2_BASE+50 )
  NELOG_RplWkstaBbcFile* = ( ERRLOG2_BASE+51 )
  NELOG_RplWkstaFileSize* = ( ERRLOG2_BASE+52 )
  NELOG_RplWkstaInternal* = ( ERRLOG2_BASE+53 )
  NELOG_RplWkstaWrongVersion* = ( ERRLOG2_BASE+54 )
  NELOG_RplWkstaNetwork* = ( ERRLOG2_BASE+55 )
  NELOG_RplAdapterResource* = ( ERRLOG2_BASE+56 )
  NELOG_RplFileCopy* = ( ERRLOG2_BASE+57 )
  NELOG_RplFileDelete* = ( ERRLOG2_BASE+58 )
  NELOG_RplFilePerms* = ( ERRLOG2_BASE+59 )
  NELOG_RplCheckConfigs* = ( ERRLOG2_BASE+60 )
  NELOG_RplCreateProfiles* = ( ERRLOG2_BASE+61 )
  NELOG_RplRegistry* = ( ERRLOG2_BASE+62 )
  NELOG_RplReplaceRPLDISK* = ( ERRLOG2_BASE+63 )
  NELOG_RplCheckSecurity* = ( ERRLOG2_BASE+64 )
  NELOG_RplBackupDatabase* = ( ERRLOG2_BASE+65 )
  NELOG_RplInitDatabase* = ( ERRLOG2_BASE+66 )
  NELOG_RplRestoreDatabaseFailure* = ( ERRLOG2_BASE+67 )
  NELOG_RplRestoreDatabaseSuccess* = ( ERRLOG2_BASE+68 )
  NELOG_RplInitRestoredDatabase* = ( ERRLOG2_BASE+69 )
  NELOG_NetlogonSessionTypeWrong* = ( ERRLOG2_BASE+70 )

type
  ERROR_LOG* {.final, pure.} = object
    el_len*: DWORD
    el_reserved*: DWORD
    el_time*: DWORD
    el_error*: DWORD
    el_name*: LPWSTR
    el_text*: LPWSTR
    el_data*: LPBYTE
    el_data_size*: DWORD
    el_nstrings*: DWORD
  PERROR_LOG* = ptr ERROR_LOG
  # LPERROR_LOG* = ptr ERROR_LOG

proc NetErrorLogClear*(P1: LPCWSTR, P2: LPCWSTR, P3: LPBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetErrorLogRead*(P1: LPCWSTR, P2: LPWSTR, P3: LPHLOG, P4: DWORD, P5: LPDWORD, P6: DWORD, P7: DWORD, P8: ptr LPBYTE, P9: DWORD, P10: LPDWORD, P11: LPDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetErrorLogWrite*(P1: LPBYTE, P2: DWORD, P3: LPCWSTR, P4: LPBYTE, P5: DWORD, P6: LPBYTE, P7: DWORD, P8: LPBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmmsg.nim

const
  MSGNAME_NOT_FORWARDED* = 0
  MSGNAME_FORWARDED_TO* = 4
  MSGNAME_FORWARDED_FROM* = 16

type
  MSG_INFO_0* {.final, pure.} = object
    msgi0_name*: LPWSTR
  PMSG_INFO_0* = ptr MSG_INFO_0
  LPMSG_INFO_0* = ptr MSG_INFO_0
  MSG_INFO_1* {.final, pure.} = object
    msgi1_name*: LPWSTR
    msgi1_forward_flag*: DWORD
    msgi1_forward*: LPWSTR
  PMSG_INFO_1* = ptr MSG_INFO_1
  LPMSG_INFO_1* = ptr MSG_INFO_1

proc NetMessageBufferSend*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: PBYTE, P5: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetMessageNameAdd*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetMessageNameDel*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetMessageNameEnum*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetMessageNameGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmremutl.nim

const
  SUPPORTS_REMOTE_ADMIN_PROTOCOL* = 2
  SUPPORTS_RPC* = 4
  SUPPORTS_SAM_PROTOCOL* = 8
  SUPPORTS_UNICODE* = 16
  SUPPORTS_LOCAL* = 32
  SUPPORTS_ANY* = -1
  NO_PERMISSION_REQUIRED* = 1
  ALLOCATE_RESPONSE* = 2
  USE_SPECIFIC_TRANSPORT* = 0x80000000'i32

type
  DESC_CHAR* = TCHAR
  LPDESC* = ptr DESC_CHAR
  TIME_OF_DAY_INFO* {.final, pure.} = object
    tod_elapsedt*: DWORD
    tod_msecs*: DWORD
    tod_hours*: DWORD
    tod_mins*: DWORD
    tod_secs*: DWORD
    tod_hunds*: DWORD
    tod_timezone*: LONG
    tod_tinterval*: DWORD
    tod_day*: DWORD
    tod_month*: DWORD
    tod_year*: DWORD
    tod_weekday*: DWORD
  PTIME_OF_DAY_INFO* = ptr TIME_OF_DAY_INFO
  LPTIME_OF_DAY_INFO* = ptr TIME_OF_DAY_INFO

proc NetRemoteTOD*(P1: LPCWSTR, P2: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetRemoteComputerSupports*(P1: LPCWSTR, P2: DWORD, P3: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc RxRemoteApi*(P1: DWORD, P2: LPCWSTR, P3: LPDESC, P4: LPDESC, P5: LPDESC, P6: LPDESC, P7: LPDESC, P8: LPDESC, P9: LPDESC, P10: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", varargs, importc.}

# net/lmrepl.nim

const
  REPL_ROLE_EXPORT* = 1
  REPL_ROLE_IMPORT* = 2
  REPL_ROLE_BOTH* = 3
  REPL_INTERVAL_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+0
  REPL_PULSE_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+1
  REPL_GUARDTIME_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+2
  REPL_RANDOM_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+3
  REPL_UNLOCK_NOFORCE* = 0
  REPL_UNLOCK_FORCE* = 1
  REPL_STATE_OK* = 0
  REPL_STATE_NO_MASTER* = 1
  REPL_STATE_NO_SYNC* = 2
  REPL_STATE_NEVER_REPLICATED* = 3
  REPL_INTEGRITY_FILE* = 1
  REPL_INTEGRITY_TREE* = 2
  REPL_EXTENT_FILE* = 1
  REPL_EXTENT_TREE* = 2
  REPL_EXPORT_INTEGRITY_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+0
  REPL_EXPORT_EXTENT_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+1

type
  REPL_INFO_0* {.final, pure.} = object
    rp0_role*: DWORD
    rp0_exportpath*: LPWSTR
    rp0_exportlist*: LPWSTR
    rp0_importpath*: LPWSTR
    rp0_importlist*: LPWSTR
    rp0_logonusername*: LPWSTR
    rp0_interval*: DWORD
    rp0_pulse*: DWORD
    rp0_guardtime*: DWORD
    rp0_random*: DWORD
  PREPL_INFO_0* = ptr REPL_INFO_0
  LPREPL_INFO_0* = ptr REPL_INFO_0
  REPL_INFO_1000* {.final, pure.} = object
    rp1000_interval*: DWORD
  PREPL_INFO_1000* = ptr REPL_INFO_1000
  LPREPL_INFO_1000* = ptr REPL_INFO_1000
  REPL_INFO_1001* {.final, pure.} = object
    rp1001_pulse*: DWORD
  PREPL_INFO_1001* = ptr REPL_INFO_1001
  LPREPL_INFO_1001* = ptr REPL_INFO_1001
  REPL_INFO_1002* {.final, pure.} = object
    rp1002_guardtime*: DWORD
  PREPL_INFO_1002* = ptr REPL_INFO_1002
  LPREPL_INFO_1002* = ptr REPL_INFO_1002
  REPL_INFO_1003* {.final, pure.} = object
    rp1003_random*: DWORD
  PREPL_INFO_1003* = ptr REPL_INFO_1003
  LPREPL_INFO_1003* = ptr REPL_INFO_1003
  REPL_EDIR_INFO_0* {.final, pure.} = object
    rped0_dirname*: LPWSTR
  PREPL_EDIR_INFO_0* = ptr REPL_EDIR_INFO_0
  LPREPL_EDIR_INFO_0* = ptr REPL_EDIR_INFO_0
  REPL_EDIR_INFO_1* {.final, pure.} = object
    rped1_dirname*: LPWSTR
    rped1_integrity*: DWORD
    rped1_extent*: DWORD
  PREPL_EDIR_INFO_1* = ptr REPL_EDIR_INFO_1
  LPREPL_EDIR_INFO_1* = ptr REPL_EDIR_INFO_1
  REPL_EDIR_INFO_2* {.final, pure.} = object
    rped2_dirname*: LPWSTR
    rped2_integrity*: DWORD
    rped2_extent*: DWORD
    rped2_lockcount*: DWORD
    rped2_locktime*: DWORD
  PREPL_EDIR_INFO_2* = ptr REPL_EDIR_INFO_2
  LPREPL_EDIR_INFO_2* = ptr REPL_EDIR_INFO_2
  REPL_EDIR_INFO_1000* {.final, pure.} = object
    rped1000_integrity*: DWORD
  PREPL_EDIR_INFO_1000* = ptr REPL_EDIR_INFO_1000
  LPREPL_EDIR_INFO_1000* = ptr REPL_EDIR_INFO_1000
  REPL_EDIR_INFO_1001* {.final, pure.} = object
    rped1001_extent*: DWORD
  PREPL_EDIR_INFO_1001* = ptr REPL_EDIR_INFO_1001
  LPREPL_EDIR_INFO_1001* = ptr REPL_EDIR_INFO_1001
  REPL_IDIR_INFO_0* {.final, pure.} = object
    rpid0_dirname*: LPWSTR
  PREPL_IDIR_INFO_0* = ptr REPL_IDIR_INFO_0
  LPREPL_IDIR_INFO_0* = ptr REPL_IDIR_INFO_0
  REPL_IDIR_INFO_1* {.final, pure.} = object
    rpid1_dirname*: LPWSTR
    rpid1_state*: DWORD
    rpid1_mastername*: LPWSTR
    rpid1_last_update_time*: DWORD
    rpid1_lockcount*: DWORD
    rpid1_locktime*: DWORD
  PREPL_IDIR_INFO_1* = ptr REPL_IDIR_INFO_1
  LPREPL_IDIR_INFO_1* = ptr REPL_IDIR_INFO_1

proc NetReplGetInfo*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplSetInfo*(P1: LPCWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplExportDirAdd*(P1: LPCWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplExportDirDel*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplExportDirEnum*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplExportDirGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplExportDirSetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplExportDirLock*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplExportDirUnlock*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplImportDirAdd*(P1: LPCWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplImportDirDel*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplImportDirEnum*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplImportDirGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplImportDirLock*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplImportDirUnlock*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmserver.nim

type
  SERVER_INFO_100* {.final, pure.} = object
    sv100_platform_id*: DWORD
    sv100_name*: LPWSTR
  PSERVER_INFO_100* = ptr SERVER_INFO_100
  LPSERVER_INFO_100* = ptr SERVER_INFO_100
  SERVER_INFO_101* {.final, pure.} = object
    sv101_platform_id*: DWORD
    sv101_name*: LPWSTR
    sv101_version_major*: DWORD
    sv101_version_minor*: DWORD
    sv101_type*: DWORD
    sv101_comment*: LPWSTR
  PSERVER_INFO_101* = ptr SERVER_INFO_101
  LPSERVER_INFO_101* = ptr SERVER_INFO_101
  SERVER_INFO_102* {.final, pure.} = object
    sv102_platform_id*: DWORD
    sv102_name*: LPWSTR
    sv102_version_major*: DWORD
    sv102_version_minor*: DWORD
    sv102_type*: DWORD
    sv102_comment*: LPWSTR
    sv102_users*: DWORD
    sv102_disc*: LONG
    sv102_hidden*: BOOL
    sv102_announce*: DWORD
    sv102_anndelta*: DWORD
    sv102_licenses*: DWORD
    sv102_userpath*: LPWSTR
  PSERVER_INFO_102* = ptr SERVER_INFO_102
  LPSERVER_INFO_102* = ptr SERVER_INFO_102
  SERVER_INFO_402* {.final, pure.} = object
    sv402_ulist_mtime*: DWORD
    sv402_glist_mtime*: DWORD
    sv402_alist_mtime*: DWORD
    sv402_alerts*: LPWSTR
    sv402_security*: DWORD
    sv402_numadmin*: DWORD
    sv402_lanmask*: DWORD
    sv402_guestacct*: LPWSTR
    sv402_chdevs*: DWORD
    sv402_chdevq*: DWORD
    sv402_chdevjobs*: DWORD
    sv402_connections*: DWORD
    sv402_shares*: DWORD
    sv402_openfiles*: DWORD
    sv402_sessopens*: DWORD
    sv402_sessvcs*: DWORD
    sv402_sessreqs*: DWORD
    sv402_opensearch*: DWORD
    sv402_activelocks*: DWORD
    sv402_numreqbuf*: DWORD
    sv402_sizreqbuf*: DWORD
    sv402_numbigbuf*: DWORD
    sv402_numfiletasks*: DWORD
    sv402_alertsched*: DWORD
    sv402_erroralert*: DWORD
    sv402_logonalert*: DWORD
    sv402_accessalert*: DWORD
    sv402_diskalert*: DWORD
    sv402_netioalert*: DWORD
    sv402_maxauditsz*: DWORD
    sv402_srvheuristics*: LPWSTR
  PSERVER_INFO_402* = ptr SERVER_INFO_402
  LPSERVER_INFO_402* = ptr SERVER_INFO_402
  SERVER_INFO_403* {.final, pure.} = object
    sv403_ulist_mtime*: DWORD
    sv403_glist_mtime*: DWORD
    sv403_alist_mtime*: DWORD
    sv403_alerts*: LPWSTR
    sv403_security*: DWORD
    sv403_numadmin*: DWORD
    sv403_lanmask*: DWORD
    sv403_guestacct*: LPWSTR
    sv403_chdevs*: DWORD
    sv403_chdevq*: DWORD
    sv403_chdevjobs*: DWORD
    sv403_connections*: DWORD
    sv403_shares*: DWORD
    sv403_openfiles*: DWORD
    sv403_sessopens*: DWORD
    sv403_sessvcs*: DWORD
    sv403_sessreqs*: DWORD
    sv403_opensearch*: DWORD
    sv403_activelocks*: DWORD
    sv403_numreqbuf*: DWORD
    sv403_sizreqbuf*: DWORD
    sv403_numbigbuf*: DWORD
    sv403_numfiletasks*: DWORD
    sv403_alertsched*: DWORD
    sv403_erroralert*: DWORD
    sv403_logonalert*: DWORD
    sv403_accessalert*: DWORD
    sv403_diskalert*: DWORD
    sv403_netioalert*: DWORD
    sv403_maxauditsz*: DWORD
    sv403_srvheuristics*: LPWSTR
    sv403_auditedevents*: DWORD
    sv403_autoprofile*: DWORD
    sv403_autopath*: LPWSTR
  PSERVER_INFO_403* = ptr SERVER_INFO_403
  LPSERVER_INFO_403* = ptr SERVER_INFO_403
  SERVER_INFO_502* {.final, pure.} = object
    sv502_sessopens*: DWORD
    sv502_sessvcs*: DWORD
    sv502_opensearch*: DWORD
    sv502_sizreqbuf*: DWORD
    sv502_initworkitems*: DWORD
    sv502_maxworkitems*: DWORD
    sv502_rawworkitems*: DWORD
    sv502_irpstacksize*: DWORD
    sv502_maxrawbuflen*: DWORD
    sv502_sessusers*: DWORD
    sv502_sessconns*: DWORD
    sv502_maxpagedmemoryusage*: DWORD
    sv502_maxnonpagedmemoryusage*: DWORD
    sv502_enablesoftcompat*: BOOL
    sv502_enableforcedlogoff*: BOOL
    sv502_timesource*: BOOL
    sv502_acceptdownlevelapis*: BOOL
    sv502_lmannounce*: BOOL
  PSERVER_INFO_502* = ptr SERVER_INFO_502
  LPSERVER_INFO_502* = ptr SERVER_INFO_502
  SERVER_INFO_503* {.final, pure.} = object
    sv503_sessopens*: DWORD
    sv503_sessvcs*: DWORD
    sv503_opensearch*: DWORD
    sv503_sizreqbuf*: DWORD
    sv503_initworkitems*: DWORD
    sv503_maxworkitems*: DWORD
    sv503_rawworkitems*: DWORD
    sv503_irpstacksize*: DWORD
    sv503_maxrawbuflen*: DWORD
    sv503_sessusers*: DWORD
    sv503_sessconns*: DWORD
    sv503_maxpagedmemoryusage*: DWORD
    sv503_maxnonpagedmemoryusage*: DWORD
    sv503_enablesoftcompat*: BOOL
    sv503_enableforcedlogoff*: BOOL
    sv503_timesource*: BOOL
    sv503_acceptdownlevelapis*: BOOL
    sv503_lmannounce*: BOOL
    sv503_domain*: LPWSTR
    sv503_maxcopyreadlen*: DWORD
    sv503_maxcopywritelen*: DWORD
    sv503_minkeepsearch*: DWORD
    sv503_maxkeepsearch*: DWORD
    sv503_minkeepcomplsearch*: DWORD
    sv503_maxkeepcomplsearch*: DWORD
    sv503_threadcountadd*: DWORD
    sv503_numblockthreads*: DWORD
    sv503_scavtimeout*: DWORD
    sv503_minrcvqueue*: DWORD
    sv503_minfreeworkitems*: DWORD
    sv503_xactmemsize*: DWORD
    sv503_threadpriority*: DWORD
    sv503_maxmpxct*: DWORD
    sv503_oplockbreakwait*: DWORD
    sv503_oplockbreakresponsewait*: DWORD
    sv503_enableoplocks*: BOOL
    sv503_enableoplockforceclose*: BOOL
    sv503_enablefcbopens*: BOOL
    sv503_enableraw*: BOOL
    sv503_enablesharednetdrives*: BOOL
    sv503_minfreeconnections*: DWORD
    sv503_maxfreeconnections*: DWORD
  PSERVER_INFO_503* = ptr SERVER_INFO_503
  LPSERVER_INFO_503* = ptr SERVER_INFO_503
  SERVER_INFO_599* {.final, pure.} = object
    sv599_sessopens*: DWORD
    sv599_sessvcs*: DWORD
    sv599_opensearch*: DWORD
    sv599_sizreqbuf*: DWORD
    sv599_initworkitems*: DWORD
    sv599_maxworkitems*: DWORD
    sv599_rawworkitems*: DWORD
    sv599_irpstacksize*: DWORD
    sv599_maxrawbuflen*: DWORD
    sv599_sessusers*: DWORD
    sv599_sessconns*: DWORD
    sv599_maxpagedmemoryusage*: DWORD
    sv599_maxnonpagedmemoryusage*: DWORD
    sv599_enablesoftcompat*: BOOL
    sv599_enableforcedlogoff*: BOOL
    sv599_timesource*: BOOL
    sv599_acceptdownlevelapis*: BOOL
    sv599_lmannounce*: BOOL
    sv599_domain*: LPWSTR
    sv599_maxcopyreadlen*: DWORD
    sv599_maxcopywritelen*: DWORD
    sv599_minkeepsearch*: DWORD
    sv599_maxkeepsearch*: DWORD
    sv599_minkeepcomplsearch*: DWORD
    sv599_maxkeepcomplsearch*: DWORD
    sv599_threadcountadd*: DWORD
    sv599_numblockthreads*: DWORD
    sv599_scavtimeout*: DWORD
    sv599_minrcvqueue*: DWORD
    sv599_minfreeworkitems*: DWORD
    sv599_xactmemsize*: DWORD
    sv599_threadpriority*: DWORD
    sv599_maxmpxct*: DWORD
    sv599_oplockbreakwait*: DWORD
    sv599_oplockbreakresponsewait*: DWORD
    sv599_enableoplocks*: BOOL
    sv599_enableoplockforceclose*: BOOL
    sv599_enablefcbopens*: BOOL
    sv599_enableraw*: BOOL
    sv599_enablesharednetdrives*: BOOL
    sv599_minfreeconnections*: DWORD
    sv599_maxfreeconnections*: DWORD
    sv599_initsesstable*: DWORD
    sv599_initconntable*: DWORD
    sv599_initfiletable*: DWORD
    sv599_initsearchtable*: DWORD
    sv599_alertschedule*: DWORD
    sv599_errorthreshold*: DWORD
    sv599_networkerrorthreshold*: DWORD
    sv599_diskspacethreshold*: DWORD
    sv599_reserved*: DWORD
    sv599_maxlinkdelay*: DWORD
    sv599_minlinkthroughput*: DWORD
    sv599_linkinfovalidtime*: DWORD
    sv599_scavqosinfoupdatetime*: DWORD
    sv599_maxworkitemidletime*: DWORD
  PSERVER_INFO_599* = ptr SERVER_INFO_599
  LPSERVER_INFO_599* = ptr SERVER_INFO_599
  SERVER_INFO_598* {.final, pure.} = object
    sv598_maxrawworkitems*: DWORD
    sv598_maxthreadsperqueue*: DWORD
    sv598_producttype*: DWORD
    sv598_serversize*: DWORD
    sv598_connectionlessautodisc*: DWORD
    sv598_sharingviolationretries*: DWORD
    sv598_sharingviolationdelay*: DWORD
    sv598_maxglobalopensearch*: DWORD
    sv598_removeduplicatesearches*: DWORD
    sv598_lockviolationoffset*: DWORD
    sv598_lockviolationdelay*: DWORD
    sv598_mdlreadswitchover*: DWORD
    sv598_cachedopenlimit*: DWORD
    sv598_otherqueueaffinity*: DWORD
    sv598_restrictnullsessaccess*: BOOL
    sv598_enablewfw311directipx*: BOOL
    sv598_queuesamplesecs*: DWORD
    sv598_balancecount*: DWORD
    sv598_preferredaffinity*: DWORD
    sv598_maxfreerfcbs*: DWORD
    sv598_maxfreemfcbs*: DWORD
    sv598_maxfreelfcbs*: DWORD
    sv598_maxfreepagedpoolchunks*: DWORD
    sv598_minpagedpoolchunksize*: DWORD
    sv598_maxpagedpoolchunksize*: DWORD
    sv598_sendsfrompreferredprocessor*: BOOL
  PSERVER_INFO_598* = ptr SERVER_INFO_598
  LPSERVER_INFO_598* = ptr SERVER_INFO_598
  SERVER_INFO_1005* {.final, pure.} = object
    sv1005_comment*: LPWSTR
  PSERVER_INFO_1005* = ptr SERVER_INFO_1005
  LPSERVER_INFO_1005* = ptr SERVER_INFO_1005
  SERVER_INFO_1107* {.final, pure.} = object
    sv1107_users*: DWORD
  PSERVER_INFO_1107* = ptr SERVER_INFO_1107
  LPSERVER_INFO_1107* = ptr SERVER_INFO_1107
  SERVER_INFO_1010* {.final, pure.} = object
    sv1010_disc*: LONG
  PSERVER_INFO_1010* = ptr SERVER_INFO_1010
  LPSERVER_INFO_1010* = ptr SERVER_INFO_1010
  SERVER_INFO_1016* {.final, pure.} = object
    sv1016_hidden*: BOOL
  PSERVER_INFO_1016* = ptr SERVER_INFO_1016
  LPSERVER_INFO_1016* = ptr SERVER_INFO_1016
  SERVER_INFO_1017* {.final, pure.} = object
    sv1017_announce*: DWORD
  PSERVER_INFO_1017* = ptr SERVER_INFO_1017
  LPSERVER_INFO_1017* = ptr SERVER_INFO_1017
  SERVER_INFO_1018* {.final, pure.} = object
    sv1018_anndelta*: DWORD
  PSERVER_INFO_1018* = ptr SERVER_INFO_1018
  LPSERVER_INFO_1018* = ptr SERVER_INFO_1018
  SERVER_INFO_1501* {.final, pure.} = object
    sv1501_sessopens*: DWORD
  PSERVER_INFO_1501* = ptr SERVER_INFO_1501
  LPSERVER_INFO_1501* = ptr SERVER_INFO_1501
  SERVER_INFO_1502* {.final, pure.} = object
    sv1502_sessvcs*: DWORD
  PSERVER_INFO_1502* = ptr SERVER_INFO_1502
  LPSERVER_INFO_1502* = ptr SERVER_INFO_1502
  SERVER_INFO_1503* {.final, pure.} = object
    sv1503_opensearch*: DWORD
  PSERVER_INFO_1503* = ptr SERVER_INFO_1503
  LPSERVER_INFO_1503* = ptr SERVER_INFO_1503
  SERVER_INFO_1506* {.final, pure.} = object
    sv1506_maxworkitems*: DWORD
  PSERVER_INFO_1506* = ptr SERVER_INFO_1506
  LPSERVER_INFO_1506* = ptr SERVER_INFO_1506
  SERVER_INFO_1509* {.final, pure.} = object
    sv1509_maxrawbuflen*: DWORD
  PSERVER_INFO_1509* = ptr SERVER_INFO_1509
  LPSERVER_INFO_1509* = ptr SERVER_INFO_1509
  SERVER_INFO_1510* {.final, pure.} = object
    sv1510_sessusers*: DWORD
  PSERVER_INFO_1510* = ptr SERVER_INFO_1510
  LPSERVER_INFO_1510* = ptr SERVER_INFO_1510
  SERVER_INFO_1511* {.final, pure.} = object
    sv1511_sessconns*: DWORD
  PSERVER_INFO_1511* = ptr SERVER_INFO_1511
  LPSERVER_INFO_1511* = ptr SERVER_INFO_1511
  SERVER_INFO_1512* {.final, pure.} = object
    sv1512_maxnonpagedmemoryusage*: DWORD
  PSERVER_INFO_1512* = ptr SERVER_INFO_1512
  LPSERVER_INFO_1512* = ptr SERVER_INFO_1512
  SERVER_INFO_1513* {.final, pure.} = object
    sv1513_maxpagedmemoryusage*: DWORD
  PSERVER_INFO_1513* = ptr SERVER_INFO_1513
  LPSERVER_INFO_1513* = ptr SERVER_INFO_1513
  SERVER_INFO_1514* {.final, pure.} = object
    sv1514_enablesoftcompat*: BOOL
  PSERVER_INFO_1514* = ptr SERVER_INFO_1514
  LPSERVER_INFO_1514* = ptr SERVER_INFO_1514
  SERVER_INFO_1515* {.final, pure.} = object
    sv1515_enableforcedlogoff*: BOOL
  PSERVER_INFO_1515* = ptr SERVER_INFO_1515
  LPSERVER_INFO_1515* = ptr SERVER_INFO_1515
  SERVER_INFO_1516* {.final, pure.} = object
    sv1516_timesource*: BOOL
  PSERVER_INFO_1516* = ptr SERVER_INFO_1516
  LPSERVER_INFO_1516* = ptr SERVER_INFO_1516
  SERVER_INFO_1518* {.final, pure.} = object
    sv1518_lmannounce*: BOOL
  PSERVER_INFO_1518* = ptr SERVER_INFO_1518
  LPSERVER_INFO_1518* = ptr SERVER_INFO_1518
  SERVER_INFO_1520* {.final, pure.} = object
    sv1520_maxcopyreadlen*: DWORD
  PSERVER_INFO_1520* = ptr SERVER_INFO_1520
  LPSERVER_INFO_1520* = ptr SERVER_INFO_1520
  SERVER_INFO_1521* {.final, pure.} = object
    sv1521_maxcopywritelen*: DWORD
  PSERVER_INFO_1521* = ptr SERVER_INFO_1521
  LPSERVER_INFO_1521* = ptr SERVER_INFO_1521
  SERVER_INFO_1522* {.final, pure.} = object
    sv1522_minkeepsearch*: DWORD
  PSERVER_INFO_1522* = ptr SERVER_INFO_1522
  LPSERVER_INFO_1522* = ptr SERVER_INFO_1522
  SERVER_INFO_1523* {.final, pure.} = object
    sv1523_maxkeepsearch*: DWORD
  PSERVER_INFO_1523* = ptr SERVER_INFO_1523
  LPSERVER_INFO_1523* = ptr SERVER_INFO_1523
  SERVER_INFO_1524* {.final, pure.} = object
    sv1524_minkeepcomplsearch*: DWORD
  PSERVER_INFO_1524* = ptr SERVER_INFO_1524
  LPSERVER_INFO_1524* = ptr SERVER_INFO_1524
  SERVER_INFO_1525* {.final, pure.} = object
    sv1525_maxkeepcomplsearch*: DWORD
  PSERVER_INFO_1525* = ptr SERVER_INFO_1525
  LPSERVER_INFO_1525* = ptr SERVER_INFO_1525
  SERVER_INFO_1528* {.final, pure.} = object
    sv1528_scavtimeout*: DWORD
  PSERVER_INFO_1528* = ptr SERVER_INFO_1528
  LPSERVER_INFO_1528* = ptr SERVER_INFO_1528
  SERVER_INFO_1529* {.final, pure.} = object
    sv1529_minrcvqueue*: DWORD
  PSERVER_INFO_1529* = ptr SERVER_INFO_1529
  LPSERVER_INFO_1529* = ptr SERVER_INFO_1529
  SERVER_INFO_1530* {.final, pure.} = object
    sv1530_minfreeworkitems*: DWORD
  PSERVER_INFO_1530* = ptr SERVER_INFO_1530
  LPSERVER_INFO_1530* = ptr SERVER_INFO_1530
  SERVER_INFO_1533* {.final, pure.} = object
    sv1533_maxmpxct*: DWORD
  PSERVER_INFO_1533* = ptr SERVER_INFO_1533
  LPSERVER_INFO_1533* = ptr SERVER_INFO_1533
  SERVER_INFO_1534* {.final, pure.} = object
    sv1534_oplockbreakwait*: DWORD
  PSERVER_INFO_1534* = ptr SERVER_INFO_1534
  LPSERVER_INFO_1534* = ptr SERVER_INFO_1534
  SERVER_INFO_1535* {.final, pure.} = object
    sv1535_oplockbreakresponsewait*: DWORD
  PSERVER_INFO_1535* = ptr SERVER_INFO_1535
  LPSERVER_INFO_1535* = ptr SERVER_INFO_1535
  SERVER_INFO_1536* {.final, pure.} = object
    sv1536_enableoplocks*: BOOL
  PSERVER_INFO_1536* = ptr SERVER_INFO_1536
  LPSERVER_INFO_1536* = ptr SERVER_INFO_1536
  SERVER_INFO_1537* {.final, pure.} = object
    sv1537_enableoplockforceclose*: BOOL
  PSERVER_INFO_1537* = ptr SERVER_INFO_1537
  LPSERVER_INFO_1537* = ptr SERVER_INFO_1537
  SERVER_INFO_1538* {.final, pure.} = object
    sv1538_enablefcbopens*: BOOL
  PSERVER_INFO_1538* = ptr SERVER_INFO_1538
  LPSERVER_INFO_1538* = ptr SERVER_INFO_1538
  SERVER_INFO_1539* {.final, pure.} = object
    sv1539_enableraw*: BOOL
  PSERVER_INFO_1539* = ptr SERVER_INFO_1539
  LPSERVER_INFO_1539* = ptr SERVER_INFO_1539
  SERVER_INFO_1540* {.final, pure.} = object
    sv1540_enablesharednetdrives*: BOOL
  PSERVER_INFO_1540* = ptr SERVER_INFO_1540
  LPSERVER_INFO_1540* = ptr SERVER_INFO_1540
  SERVER_INFO_1541* {.final, pure.} = object
    sv1541_minfreeconnections*: BOOL
  PSERVER_INFO_1541* = ptr SERVER_INFO_1541
  LPSERVER_INFO_1541* = ptr SERVER_INFO_1541
  SERVER_INFO_1542* {.final, pure.} = object
    sv1542_maxfreeconnections*: BOOL
  PSERVER_INFO_1542* = ptr SERVER_INFO_1542
  LPSERVER_INFO_1542* = ptr SERVER_INFO_1542
  SERVER_INFO_1543* {.final, pure.} = object
    sv1543_initsesstable*: DWORD
  PSERVER_INFO_1543* = ptr SERVER_INFO_1543
  LPSERVER_INFO_1543* = ptr SERVER_INFO_1543
  SERVER_INFO_1544* {.final, pure.} = object
    sv1544_initconntable*: DWORD
  PSERVER_INFO_1544* = ptr SERVER_INFO_1544
  LPSERVER_INFO_1544* = ptr SERVER_INFO_1544
  SERVER_INFO_1545* {.final, pure.} = object
    sv1545_initfiletable*: DWORD
  PSERVER_INFO_1545* = ptr SERVER_INFO_1545
  LPSERVER_INFO_1545* = ptr SERVER_INFO_1545
  SERVER_INFO_1546* {.final, pure.} = object
    sv1546_initsearchtable*: DWORD
  PSERVER_INFO_1546* = ptr SERVER_INFO_1546
  LPSERVER_INFO_1546* = ptr SERVER_INFO_1546
  SERVER_INFO_1547* {.final, pure.} = object
    sv1547_alertschedule*: DWORD
  PSERVER_INFO_1547* = ptr SERVER_INFO_1547
  LPSERVER_INFO_1547* = ptr SERVER_INFO_1547
  SERVER_INFO_1548* {.final, pure.} = object
    sv1548_errorthreshold*: DWORD
  PSERVER_INFO_1548* = ptr SERVER_INFO_1548
  LPSERVER_INFO_1548* = ptr SERVER_INFO_1548
  SERVER_INFO_1549* {.final, pure.} = object
    sv1549_networkerrorthreshold*: DWORD
  PSERVER_INFO_1549* = ptr SERVER_INFO_1549
  LPSERVER_INFO_1549* = ptr SERVER_INFO_1549
  SERVER_INFO_1550* {.final, pure.} = object
    sv1550_diskspacethreshold*: DWORD
  PSERVER_INFO_1550* = ptr SERVER_INFO_1550
  LPSERVER_INFO_1550* = ptr SERVER_INFO_1550
  SERVER_INFO_1552* {.final, pure.} = object
    sv1552_maxlinkdelay*: DWORD
  PSERVER_INFO_1552* = ptr SERVER_INFO_1552
  LPSERVER_INFO_1552* = ptr SERVER_INFO_1552
  SERVER_INFO_1553* {.final, pure.} = object
    sv1553_minlinkthroughput*: DWORD
  PSERVER_INFO_1553* = ptr SERVER_INFO_1553
  LPSERVER_INFO_1553* = ptr SERVER_INFO_1553
  SERVER_INFO_1554* {.final, pure.} = object
    sv1554_linkinfovalidtime*: DWORD
  PSERVER_INFO_1554* = ptr SERVER_INFO_1554
  LPSERVER_INFO_1554* = ptr SERVER_INFO_1554
  SERVER_INFO_1555* {.final, pure.} = object
    sv1555_scavqosinfoupdatetime*: DWORD
  PSERVER_INFO_1555* = ptr SERVER_INFO_1555
  LPSERVER_INFO_1555* = ptr SERVER_INFO_1555
  SERVER_INFO_1556* {.final, pure.} = object
    sv1556_maxworkitemidletime*: DWORD
  PSERVER_INFO_1556* = ptr SERVER_INFO_1556
  LPSERVER_INFO_1556* = ptr SERVER_INFO_1556
  SERVER_INFO_1557* {.final, pure.} = object
    sv1557_maxrawworkitems*: DWORD
  PSERVER_INFO_1557* = ptr SERVER_INFO_1557
  LPSERVER_INFO_1557* = ptr SERVER_INFO_1557
  SERVER_INFO_1560* {.final, pure.} = object
    sv1560_producttype*: DWORD
  PSERVER_INFO_1560* = ptr SERVER_INFO_1560
  LPSERVER_INFO_1560* = ptr SERVER_INFO_1560
  SERVER_INFO_1561* {.final, pure.} = object
    sv1561_serversize*: DWORD
  PSERVER_INFO_1561* = ptr SERVER_INFO_1561
  LPSERVER_INFO_1561* = ptr SERVER_INFO_1561
  SERVER_INFO_1562* {.final, pure.} = object
    sv1562_connectionlessautodisc*: DWORD
  PSERVER_INFO_1562* = ptr SERVER_INFO_1562
  LPSERVER_INFO_1562* = ptr SERVER_INFO_1562
  SERVER_INFO_1563* {.final, pure.} = object
    sv1563_sharingviolationretries*: DWORD
  PSERVER_INFO_1563* = ptr SERVER_INFO_1563
  LPSERVER_INFO_1563* = ptr SERVER_INFO_1563
  SERVER_INFO_1564* {.final, pure.} = object
    sv1564_sharingviolationdelay*: DWORD
  PSERVER_INFO_1564* = ptr SERVER_INFO_1564
  LPSERVER_INFO_1564* = ptr SERVER_INFO_1564
  SERVER_INFO_1565* {.final, pure.} = object
    sv1565_maxglobalopensearch*: DWORD
  PSERVER_INFO_1565* = ptr SERVER_INFO_1565
  LPSERVER_INFO_1565* = ptr SERVER_INFO_1565
  SERVER_INFO_1566* {.final, pure.} = object
    sv1566_removeduplicatesearches*: BOOL
  PSERVER_INFO_1566* = ptr SERVER_INFO_1566
  LPSERVER_INFO_1566* = ptr SERVER_INFO_1566
  SERVER_INFO_1567* {.final, pure.} = object
    sv1567_lockviolationretries*: DWORD
  PSERVER_INFO_1567* = ptr SERVER_INFO_1567
  LPSERVER_INFO_1567* = ptr SERVER_INFO_1567
  SERVER_INFO_1568* {.final, pure.} = object
    sv1568_lockviolationoffset*: DWORD
  PSERVER_INFO_1568* = ptr SERVER_INFO_1568
  LPSERVER_INFO_1568* = ptr SERVER_INFO_1568
  SERVER_INFO_1569* {.final, pure.} = object
    sv1569_lockviolationdelay*: DWORD
  PSERVER_INFO_1569* = ptr SERVER_INFO_1569
  LPSERVER_INFO_1569* = ptr SERVER_INFO_1569
  SERVER_INFO_1570* {.final, pure.} = object
    sv1570_mdlreadswitchover*: DWORD
  PSERVER_INFO_1570* = ptr SERVER_INFO_1570
  LPSERVER_INFO_1570* = ptr SERVER_INFO_1570
  SERVER_INFO_1571* {.final, pure.} = object
    sv1571_cachedopenlimit*: DWORD
  PSERVER_INFO_1571* = ptr SERVER_INFO_1571
  LPSERVER_INFO_1571* = ptr SERVER_INFO_1571
  SERVER_INFO_1572* {.final, pure.} = object
    sv1572_criticalthreads*: DWORD
  PSERVER_INFO_1572* = ptr SERVER_INFO_1572
  LPSERVER_INFO_1572* = ptr SERVER_INFO_1572
  SERVER_INFO_1573* {.final, pure.} = object
    sv1573_restrictnullsessaccess*: DWORD
  PSERVER_INFO_1573* = ptr SERVER_INFO_1573
  LPSERVER_INFO_1573* = ptr SERVER_INFO_1573
  SERVER_INFO_1574* {.final, pure.} = object
    sv1574_enablewfw311directipx*: DWORD
  PSERVER_INFO_1574* = ptr SERVER_INFO_1574
  LPSERVER_INFO_1574* = ptr SERVER_INFO_1574
  SERVER_INFO_1575* {.final, pure.} = object
    sv1575_otherqueueaffinity*: DWORD
  PSERVER_INFO_1575* = ptr SERVER_INFO_1575
  LPSERVER_INFO_1575* = ptr SERVER_INFO_1575
  SERVER_INFO_1576* {.final, pure.} = object
    sv1576_queuesamplesecs*: DWORD
  PSERVER_INFO_1576* = ptr SERVER_INFO_1576
  LPSERVER_INFO_1576* = ptr SERVER_INFO_1576
  SERVER_INFO_1577* {.final, pure.} = object
    sv1577_balancecount*: DWORD
  PSERVER_INFO_1577* = ptr SERVER_INFO_1577
  LPSERVER_INFO_1577* = ptr SERVER_INFO_1577
  SERVER_INFO_1578* {.final, pure.} = object
    sv1578_preferredaffinity*: DWORD
  PSERVER_INFO_1578* = ptr SERVER_INFO_1578
  LPSERVER_INFO_1578* = ptr SERVER_INFO_1578
  SERVER_INFO_1579* {.final, pure.} = object
    sv1579_maxfreerfcbs*: DWORD
  PSERVER_INFO_1579* = ptr SERVER_INFO_1579
  LPSERVER_INFO_1579* = ptr SERVER_INFO_1579
  SERVER_INFO_1580* {.final, pure.} = object
    sv1580_maxfreemfcbs*: DWORD
  PSERVER_INFO_1580* = ptr SERVER_INFO_1580
  LPSERVER_INFO_1580* = ptr SERVER_INFO_1580
  SERVER_INFO_1581* {.final, pure.} = object
    sv1581_maxfreemlcbs*: DWORD
  PSERVER_INFO_1581* = ptr SERVER_INFO_1581
  LPSERVER_INFO_1581* = ptr SERVER_INFO_1581
  SERVER_INFO_1582* {.final, pure.} = object
    sv1582_maxfreepagedpoolchunks*: DWORD
  PSERVER_INFO_1582* = ptr SERVER_INFO_1582
  LPSERVER_INFO_1582* = ptr SERVER_INFO_1582
  SERVER_INFO_1583* {.final, pure.} = object
    sv1583_minpagedpoolchunksize*: DWORD
  PSERVER_INFO_1583* = ptr SERVER_INFO_1583
  LPSERVER_INFO_1583* = ptr SERVER_INFO_1583
  SERVER_INFO_1584* {.final, pure.} = object
    sv1584_maxpagedpoolchunksize*: DWORD
  PSERVER_INFO_1584* = ptr SERVER_INFO_1584
  LPSERVER_INFO_1584* = ptr SERVER_INFO_1584
  SERVER_INFO_1585* {.final, pure.} = object
    sv1585_sendsfrompreferredprocessor*: BOOL
  PSERVER_INFO_1585* = ptr SERVER_INFO_1585
  LPSERVER_INFO_1585* = ptr SERVER_INFO_1585
  SERVER_INFO_1586* {.final, pure.} = object
    sv1586_maxthreadsperqueue*: BOOL
  PSERVER_INFO_1586* = ptr SERVER_INFO_1586
  LPSERVER_INFO_1586* = ptr SERVER_INFO_1586
  SERVER_TRANSPORT_INFO_0* {.final, pure.} = object
    svti0_numberofvcs*: DWORD
    svti0_transportname*: LPWSTR
    svti0_transportaddress*: PBYTE
    svti0_transportaddresslength*: DWORD
    svti0_networkaddress*: LPWSTR
  PSERVER_TRANSPORT_INFO_0* = ptr SERVER_TRANSPORT_INFO_0
  LPSERVER_TRANSPORT_INFO_0* = ptr SERVER_TRANSPORT_INFO_0

proc NetServerEnum*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: DWORD, P8: LPCWSTR, P9: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerEnumEx*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: DWORD, P8: LPCWSTR, P9: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerGetInfo*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerSetInfo*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerSetInfoCommandLine*(P1: WORD, P2: ptr LPWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerDiskEnum*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerComputerNameAdd*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerComputerNameDel*(P1: LPWSTR, P2: LPWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerTransportAdd*(P1: LPWSTR, P2: DWORD, P3: PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerTransportAddEx*(P1: LPWSTR, P2: DWORD, P3: PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerTransportDel*(P1: LPWSTR, P2: DWORD, P3: PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerTransportEnum*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc SetServiceBits*(P1: SERVICE_STATUS_HANDLE, P2: DWORD, P3: BOOL, P4: BOOL): BOOL {.winapi, dynlib: "advapi32", importc.}

const
  SVI1_NUM_ELEMENTS* = 5
  SVI2_NUM_ELEMENTS* = 40
  SVI3_NUM_ELEMENTS* = 44
  SV_MAX_CMD_LEN* = PATHLEN
  SW_AUTOPROF_LOAD_MASK* = 1
  SW_AUTOPROF_SAVE_MASK* = 2
  SV_MAX_SRV_HEUR_LEN* = 32
  SV_USERS_PER_LICENSE* = 5
  SV_PLATFORM_ID_OS2* = 400
  SV_PLATFORM_ID_NT* = 500
  MAJOR_VERSION_MASK* = 15
  SV_TYPE_WORKSTATION* = 1
  SV_TYPE_SERVER* = 2
  SV_TYPE_SQLSERVER* = 4
  SV_TYPE_DOMAIN_CTRL* = 8
  SV_TYPE_DOMAIN_BAKCTRL* = 16
  SV_TYPE_TIME_SOURCE* = 32
  SV_TYPE_AFP* = 64
  SV_TYPE_NOVELL* = 128
  SV_TYPE_DOMAIN_MEMBER* = 256
  SV_TYPE_PRINTQ_SERVER* = 512
  SV_TYPE_DIALIN_SERVER* = 1024
  SV_TYPE_XENIX_SERVER* = 2048
  SV_TYPE_SERVER_UNIX* = SV_TYPE_XENIX_SERVER
  SV_TYPE_NT* = 4096
  SV_TYPE_WFW* = 8192
  SV_TYPE_SERVER_MFPN* = 16384
  SV_TYPE_SERVER_NT* = 32768
  SV_TYPE_POTENTIAL_BROWSER* = 65536
  SV_TYPE_BACKUP_BROWSER* = 0x20000
  SV_TYPE_MASTER_BROWSER* = 0x40000
  SV_TYPE_DOMAIN_MASTER* = 0x80000
  SV_TYPE_SERVER_OSF* = 0x100000
  SV_TYPE_SERVER_VMS* = 0x200000
  SV_TYPE_WINDOWS* = 0x400000
  SV_TYPE_ALTERNATE_XPORT* = 0x20000000
  SV_TYPE_LOCAL_LIST_ONLY* = 0x40000000
  SV_TYPE_DOMAIN_ENUM* = 0x80000000'i32
  SV_TYPE_ALL* = -1
  SV_NODISC* = ( -1 )
  SV_USERSECURITY* = 1
  SV_SHARESECURITY* = 0
  SV_HIDDEN* = 1
  SV_VISIBLE* = 0
  SV_PLATFORM_ID_PARMNUM* = 101
  SV_NAME_PARMNUM* = 102
  SV_VERSION_MAJOR_PARMNUM* = 103
  SV_VERSION_MINOR_PARMNUM* = 104
  SV_TYPE_PARMNUM* = 105
  SV_COMMENT_PARMNUM* = 5
  SV_USERS_PARMNUM* = 107
  SV_DISC_PARMNUM* = 10
  SV_HIDDEN_PARMNUM* = 16
  SV_ANNOUNCE_PARMNUM* = 17
  SV_ANNDELTA_PARMNUM* = 18
  SV_USERPATH_PARMNUM* = 112
  SV_ULIST_MTIME_PARMNUM* = 401
  SV_GLIST_MTIME_PARMNUM* = 402
  SV_ALIST_MTIME_PARMNUM* = 403
  SV_ALERTS_PARMNUM* = 11
  SV_SECURITY_PARMNUM* = 405
  SV_NUMADMIN_PARMNUM* = 406
  SV_LANMASK_PARMNUM* = 407
  SV_GUESTACC_PARMNUM* = 408
  SV_CHDEVQ_PARMNUM* = 410
  SV_CHDEVJOBS_PARMNUM* = 411
  SV_CONNECTIONS_PARMNUM* = 412
  SV_SHARES_PARMNUM* = 413
  SV_OPENFILES_PARMNUM* = 414
  SV_SESSREQS_PARMNUM* = 417
  SV_ACTIVELOCKS_PARMNUM* = 419
  SV_NUMREQBUF_PARMNUM* = 420
  SV_NUMBIGBUF_PARMNUM* = 422
  SV_NUMFILETASKS_PARMNUM* = 423
  SV_ALERTSCHED_PARMNUM* = 37
  SV_ERRORALERT_PARMNUM* = 38
  SV_LOGONALERT_PARMNUM* = 39
  SV_ACCESSALERT_PARMNUM* = 40
  SV_DISKALERT_PARMNUM* = 41
  SV_NETIOALERT_PARMNUM* = 42
  SV_MAXAUDITSZ_PARMNUM* = 43
  SV_SRVHEURISTICS_PARMNUM* = 431
  SV_SESSOPENS_PARMNUM* = 501
  SV_SESSVCS_PARMNUM* = 502
  SV_OPENSEARCH_PARMNUM* = 503
  SV_SIZREQBUF_PARMNUM* = 504
  SV_INITWORKITEMS_PARMNUM* = 505
  SV_MAXWORKITEMS_PARMNUM* = 506
  SV_RAWWORKITEMS_PARMNUM* = 507
  SV_IRPSTACKSIZE_PARMNUM* = 508
  SV_MAXRAWBUFLEN_PARMNUM* = 509
  SV_SESSUSERS_PARMNUM* = 510
  SV_SESSCONNS_PARMNUM* = 511
  SV_MAXNONPAGEDMEMORYUSAGE_PARMNUM* = 512
  SV_MAXPAGEDMEMORYUSAGE_PARMNUM* = 513
  SV_ENABLESOFTCOMPAT_PARMNUM* = 514
  SV_ENABLEFORCEDLOGOFF_PARMNUM* = 515
  SV_TIMESOURCE_PARMNUM* = 516
  SV_ACCEPTDOWNLEVELAPIS_PARMNUM* = 517
  SV_LMANNOUNCE_PARMNUM* = 518
  SV_DOMAIN_PARMNUM* = 519
  SV_MAXCOPYREADLEN_PARMNUM* = 520
  SV_MAXCOPYWRITELEN_PARMNUM* = 521
  SV_MINKEEPSEARCH_PARMNUM* = 522
  SV_MAXKEEPSEARCH_PARMNUM* = 523
  SV_MINKEEPCOMPLSEARCH_PARMNUM* = 524
  SV_MAXKEEPCOMPLSEARCH_PARMNUM* = 525
  SV_THREADCOUNTADD_PARMNUM* = 526
  SV_NUMBLOCKTHREADS_PARMNUM* = 527
  SV_SCAVTIMEOUT_PARMNUM* = 528
  SV_MINRCVQUEUE_PARMNUM* = 529
  SV_MINFREEWORKITEMS_PARMNUM* = 530
  SV_XACTMEMSIZE_PARMNUM* = 531
  SV_THREADPRIORITY_PARMNUM* = 532
  SV_MAXMPXCT_PARMNUM* = 533
  SV_OPLOCKBREAKWAIT_PARMNUM* = 534
  SV_OPLOCKBREAKRESPONSEWAIT_PARMNUM* = 535
  SV_ENABLEOPLOCKS_PARMNUM* = 536
  SV_ENABLEOPLOCKFORCECLOSE_PARMNUM* = 537
  SV_ENABLEFCBOPENS_PARMNUM* = 538
  SV_ENABLERAW_PARMNUM* = 539
  SV_ENABLESHAREDNETDRIVES_PARMNUM* = 540
  SV_MINFREECONNECTIONS_PARMNUM* = 541
  SV_MAXFREECONNECTIONS_PARMNUM* = 542
  SV_INITSESSTABLE_PARMNUM* = 543
  SV_INITCONNTABLE_PARMNUM* = 544
  SV_INITFILETABLE_PARMNUM* = 545
  SV_INITSEARCHTABLE_PARMNUM* = 546
  SV_ALERTSCHEDULE_PARMNUM* = 547
  SV_ERRORTHRESHOLD_PARMNUM* = 548
  SV_NETWORKERRORTHRESHOLD_PARMNUM* = 549
  SV_DISKSPACETHRESHOLD_PARMNUM* = 550
  SV_MAXLINKDELAY_PARMNUM* = 552
  SV_MINLINKTHROUGHPUT_PARMNUM* = 553
  SV_LINKINFOVALIDTIME_PARMNUM* = 554
  SV_SCAVQOSINFOUPDATETIME_PARMNUM* = 555
  SV_MAXWORKITEMIDLETIME_PARMNUM* = 556
  SV_MAXRAWWORKITEMS_PARMNUM* = 557
  SV_PRODUCTTYPE_PARMNUM* = 560
  SV_SERVERSIZE_PARMNUM* = 561
  SV_CONNECTIONLESSAUTODISC_PARMNUM* = 562
  SV_SHARINGVIOLATIONRETRIES_PARMNUM* = 563
  SV_SHARINGVIOLATIONDELAY_PARMNUM* = 564
  SV_MAXGLOBALOPENSEARCH_PARMNUM* = 565
  SV_REMOVEDUPLICATESEARCHES_PARMNUM* = 566
  SV_LOCKVIOLATIONRETRIES_PARMNUM* = 567
  SV_LOCKVIOLATIONOFFSET_PARMNUM* = 568
  SV_LOCKVIOLATIONDELAY_PARMNUM* = 569
  SV_MDLREADSWITCHOVER_PARMNUM* = 570
  SV_CACHEDOPENLIMIT_PARMNUM* = 571
  SV_CRITICALTHREADS_PARMNUM* = 572
  SV_RESTRICTNULLSESSACCESS_PARMNUM* = 573
  SV_ENABLEWFW311DIRECTIPX_PARMNUM* = 574
  SV_OTHERQUEUEAFFINITY_PARMNUM* = 575
  SV_QUEUESAMPLESECS_PARMNUM* = 576
  SV_BALANCECOUNT_PARMNUM* = 577
  SV_PREFERREDAFFINITY_PARMNUM* = 578
  SV_MAXFREERFCBS_PARMNUM* = 579
  SV_MAXFREEMFCBS_PARMNUM* = 580
  SV_MAXFREELFCBS_PARMNUM* = 581
  SV_MAXFREEPAGEDPOOLCHUNKS_PARMNUM* = 582
  SV_MINPAGEDPOOLCHUNKSIZE_PARMNUM* = 583
  SV_MAXPAGEDPOOLCHUNKSIZE_PARMNUM* = 584
  SV_SENDSFROMPREFERREDPROCESSOR_PARMNUM* = 585
  SV_MAXTHREADSPERQUEUE_PARMNUM* = 586
  SV_COMMENT_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_COMMENT_PARMNUM )
  SV_USERS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_USERS_PARMNUM )
  SV_DISC_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_DISC_PARMNUM )
  SV_HIDDEN_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_HIDDEN_PARMNUM )
  SV_ANNOUNCE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ANNOUNCE_PARMNUM )
  SV_ANNDELTA_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ANNDELTA_PARMNUM )
  SV_SESSOPENS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SESSOPENS_PARMNUM )
  SV_SESSVCS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SESSVCS_PARMNUM )
  SV_OPENSEARCH_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_OPENSEARCH_PARMNUM )
  SV_MAXWORKITEMS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXWORKITEMS_PARMNUM )
  SV_MAXRAWBUFLEN_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXRAWBUFLEN_PARMNUM )
  SV_SESSUSERS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SESSUSERS_PARMNUM )
  SV_SESSCONNS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SESSCONNS_PARMNUM )
  SV_MAXNONPAGEDMEMORYUSAGE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXNONPAGEDMEMORYUSAGE_PARMNUM )
  SV_MAXPAGEDMEMORYUSAGE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXPAGEDMEMORYUSAGE_PARMNUM )
  SV_ENABLESOFTCOMPAT_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ENABLESOFTCOMPAT_PARMNUM )
  SV_ENABLEFORCEDLOGOFF_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ENABLEFORCEDLOGOFF_PARMNUM )
  SV_TIMESOURCE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_TIMESOURCE_PARMNUM )
  SV_LMANNOUNCE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_LMANNOUNCE_PARMNUM )
  SV_MAXCOPYREADLEN_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXCOPYREADLEN_PARMNUM )
  SV_MAXCOPYWRITELEN_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXCOPYWRITELEN_PARMNUM )
  SV_MINKEEPSEARCH_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MINKEEPSEARCH_PARMNUM )
  SV_MAXKEEPSEARCH_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXKEEPSEARCH_PARMNUM )
  SV_MINKEEPCOMPLSEARCH_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MINKEEPCOMPLSEARCH_PARMNUM )
  SV_MAXKEEPCOMPLSEARCH_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXKEEPCOMPLSEARCH_PARMNUM )
  SV_SCAVTIMEOUT_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SCAVTIMEOUT_PARMNUM )
  SV_MINRCVQUEUE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MINRCVQUEUE_PARMNUM )
  SV_MINFREEWORKITEMS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MINFREEWORKITEMS_PARMNUM )
  SV_MAXMPXCT_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXMPXCT_PARMNUM )
  SV_OPLOCKBREAKWAIT_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_OPLOCKBREAKWAIT_PARMNUM )
  SV_OPLOCKBREAKRESPONSEWAIT_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_OPLOCKBREAKRESPONSEWAIT_PARMNUM )
  SV_ENABLEOPLOCKS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ENABLEOPLOCKS_PARMNUM )
  SV_ENABLEOPLOCKFORCECLOSE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ENABLEOPLOCKFORCECLOSE_PARMNUM )
  SV_ENABLEFCBOPENS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ENABLEFCBOPENS_PARMNUM )
  SV_ENABLERAW_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ENABLERAW_PARMNUM )
  SV_ENABLESHAREDNETDRIVES_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ENABLESHAREDNETDRIVES_PARMNUM )
  SV_MINFREECONNECTIONS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MINFREECONNECTIONS_PARMNUM )
  SV_MAXFREECONNECTIONS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXFREECONNECTIONS_PARMNUM )
  SV_INITSESSTABLE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_INITSESSTABLE_PARMNUM )
  SV_INITCONNTABLE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_INITCONNTABLE_PARMNUM )
  SV_INITFILETABLE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_INITFILETABLE_PARMNUM )
  SV_INITSEARCHTABLE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_INITSEARCHTABLE_PARMNUM )
  SV_ALERTSCHEDULE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ALERTSCHEDULE_PARMNUM )
  SV_ERRORTHRESHOLD_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ERRORTHRESHOLD_PARMNUM )
  SV_NETWORKERRORTHRESHOLD_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_NETWORKERRORTHRESHOLD_PARMNUM )
  SV_DISKSPACETHRESHOLD_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_DISKSPACETHRESHOLD_PARMNUM )
  SV_MAXLINKDELAY_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXLINKDELAY_PARMNUM )
  SV_MINLINKTHROUGHPUT_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MINLINKTHROUGHPUT_PARMNUM )
  SV_LINKINFOVALIDTIME_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_LINKINFOVALIDTIME_PARMNUM )
  SV_SCAVQOSINFOUPDATETIME_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SCAVQOSINFOUPDATETIME_PARMNUM )
  SV_MAXWORKITEMIDLETIME_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXWORKITEMIDLETIME_PARMNUM )
  SV_MAXRAWWORKITEMS_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXRAWWORKITEMS_PARMNUM )
  SV_PRODUCTTYPE_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_PRODUCTTYPE_PARMNUM )
  SV_SERVERSIZE_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SERVERSIZE_PARMNUM )
  SV_CONNECTIONLESSAUTODISC_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_CONNECTIONLESSAUTODISC_PARMNUM )
  SV_SHARINGVIOLATIONRETRIES_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SHARINGVIOLATIONRETRIES_PARMNUM )
  SV_SHARINGVIOLATIONDELAY_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SHARINGVIOLATIONDELAY_PARMNUM )
  SV_MAXGLOBALOPENSEARCH_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXGLOBALOPENSEARCH_PARMNUM )
  SV_REMOVEDUPLICATESEARCHES_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_REMOVEDUPLICATESEARCHES_PARMNUM )
  SV_LOCKVIOLATIONRETRIES_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_LOCKVIOLATIONRETRIES_PARMNUM )
  SV_LOCKVIOLATIONOFFSET_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_LOCKVIOLATIONOFFSET_PARMNUM )
  SV_LOCKVIOLATIONDELAY_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_LOCKVIOLATIONDELAY_PARMNUM )
  SV_MDLREADSWITCHOVER_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MDLREADSWITCHOVER_PARMNUM )
  SV_CACHEDOPENLIMIT_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_CACHEDOPENLIMIT_PARMNUM )
  SV_CRITICALTHREADS_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_CRITICALTHREADS_PARMNUM )
  SV_RESTRICTNULLSESSACCESS_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_RESTRICTNULLSESSACCESS_PARMNUM )
  SV_ENABLEWFW311DIRECTIPX_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ENABLEWFW311DIRECTIPX_PARMNUM )
  SV_OTHERQUEUEAFFINITY_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_OTHERQUEUEAFFINITY_PARMNUM )
  SV_QUEUESAMPLESECS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_QUEUESAMPLESECS_PARMNUM )
  SV_BALANCECOUNT_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_BALANCECOUNT_PARMNUM )
  SV_PREFERREDAFFINITY_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_PREFERREDAFFINITY_PARMNUM )
  SV_MAXFREERFCBS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXFREERFCBS_PARMNUM )
  SV_MAXFREEMFCBS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXFREEMFCBS_PARMNUM )
  SV_MAXFREELFCBS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXFREELFCBS_PARMNUM )
  SV_MAXFREEPAGEDPOOLCHUNKS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXFREEPAGEDPOOLCHUNKS_PARMNUM )
  SV_MINPAGEDPOOLCHUNKSIZE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MINPAGEDPOOLCHUNKSIZE_PARMNUM )
  SV_MAXPAGEDPOOLCHUNKSIZE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXPAGEDPOOLCHUNKSIZE_PARMNUM )
  SV_SENDSFROMPREFERREDPROCESSOR_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SENDSFROMPREFERREDPROCESSOR_PARMNUM )
  SV_MAXTHREADSPERQUEUE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXTHREADSPERQUEUE_PARMNUM )

# net/lmshare.nim

const
  SHARE_NETNAME_PARMNUM* = 1
  SHARE_TYPE_PARMNUM* = 3
  SHARE_REMARK_PARMNUM* = 4
  SHARE_PERMISSIONS_PARMNUM* = 5
  SHARE_MAX_USES_PARMNUM* = 6
  SHARE_CURRENT_USES_PARMNUM* = 7
  SHARE_PATH_PARMNUM* = 8
  SHARE_PASSWD_PARMNUM* = 9
  SHARE_FILE_SD_PARMNUM* = 501
  SHARE_REMARK_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL + SHARE_REMARK_PARMNUM
  SHARE_MAX_USES_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL + SHARE_MAX_USES_PARMNUM
  SHARE_FILE_SD_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL + SHARE_FILE_SD_PARMNUM
  SHI1_NUM_ELEMENTS* = 4
  SHI2_NUM_ELEMENTS* = 10
  STYPE_DISKTREE* = 0
  STYPE_PRINTQ* = 1
  STYPE_DEVICE* = 2
  STYPE_IPC* = 3
  STYPE_DFS* = 100
  STYPE_SPECIAL* = 0x80000000'i32
  SHI_USES_UNLIMITED* = 0xFFFFFFFF'u32
  SESS_GUEST* = 1
  SESS_NOENCRYPTION* = 2
  SESI1_NUM_ELEMENTS* = 8
  SESI2_NUM_ELEMENTS* = 9
  PERM_FILE_READ* = 1
  PERM_FILE_WRITE* = 2
  PERM_FILE_CREATE* = 4

type
  FILE_INFO_2* {.final, pure.} = object
    fi2_id*: DWORD
  PFILE_INFO_2* = ptr FILE_INFO_2
  LPFILE_INFO_2* = ptr FILE_INFO_2
  FILE_INFO_3* {.final, pure.} = object
    fi3_id*: DWORD
    fi3_permissions*: DWORD
    fi3_num_locks*: DWORD
    fi3_pathname*: LPTSTR
    fi3_username*: LPTSTR
  PFILE_INFO_3* = ptr FILE_INFO_3
  LPFILE_INFO_3* = ptr FILE_INFO_3
  SHARE_INFO_0* {.final, pure.} = object
    shi0_netname*: LPTSTR
  PSHARE_INFO_0* = ptr SHARE_INFO_0
  LPSHARE_INFO_0* = ptr SHARE_INFO_0
  SHARE_INFO_1* {.final, pure.} = object
    shi1_netname*: LPTSTR
    shi1_type*: DWORD
    shi1_remark*: LPTSTR
  PSHARE_INFO_1* = ptr SHARE_INFO_1
  LPSHARE_INFO_1* = ptr SHARE_INFO_1
  SHARE_INFO_2* {.final, pure.} = object
    shi2_netname*: LPTSTR
    shi2_type*: DWORD
    shi2_remark*: LPTSTR
    shi2_permissions*: DWORD
    shi2_max_uses*: DWORD
    shi2_current_uses*: DWORD
    shi2_path*: LPTSTR
    shi2_passwd*: LPTSTR
  PSHARE_INFO_2* = ptr SHARE_INFO_2
  LPSHARE_INFO_2* = ptr SHARE_INFO_2
  SHARE_INFO_502* {.final, pure.} = object
    shi502_netname*: LPTSTR
    shi502_type*: DWORD
    shi502_remark*: LPTSTR
    shi502_permissions*: DWORD
    shi502_max_uses*: DWORD
    shi502_current_uses*: DWORD
    shi502_path*: LPTSTR
    shi502_passwd*: LPTSTR
    shi502_reserved*: DWORD
    shi502_security_descriptor*: PSECURITY_DESCRIPTOR
  PSHARE_INFO_502* = ptr SHARE_INFO_502
  LPSHARE_INFO_502* = ptr SHARE_INFO_502
  SHARE_INFO_1004* {.final, pure.} = object
    shi1004_remark*: LPTSTR
  PSHARE_INFO_1004* = ptr SHARE_INFO_1004
  LPSHARE_INFO_1004* = ptr SHARE_INFO_1004
  SHARE_INFO_1006* {.final, pure.} = object
    shi1006_max_uses*: DWORD
  PSHARE_INFO_1006* = ptr SHARE_INFO_1006
  LPSHARE_INFO_1006* = ptr SHARE_INFO_1006
  SHARE_INFO_1501* {.final, pure.} = object
    shi1501_reserved*: DWORD
    shi1501_security_descriptor*: PSECURITY_DESCRIPTOR
  PSHARE_INFO_1501* = ptr SHARE_INFO_1501
  LPSHARE_INFO_1501* = ptr SHARE_INFO_1501
  SESSION_INFO_0* {.final, pure.} = object
    sesi0_cname*: LPWSTR
  PSESSION_INFO_0* = ptr SESSION_INFO_0
  LPSESSION_INFO_0* = ptr SESSION_INFO_0
  SESSION_INFO_1* {.final, pure.} = object
    sesi1_cname*: LPTSTR
    sesi1_username*: LPTSTR
    sesi1_num_opens*: DWORD
    sesi1_time*: DWORD
    sesi1_idle_time*: DWORD
    sesi1_user_flags*: DWORD
  PSESSION_INFO_1* = ptr SESSION_INFO_1
  LPSESSION_INFO_1* = ptr SESSION_INFO_1
  SESSION_INFO_2* {.final, pure.} = object
    sesi2_cname*: LPTSTR
    sesi2_username*: LPTSTR
    sesi2_num_opens*: DWORD
    sesi2_time*: DWORD
    sesi2_idle_time*: DWORD
    sesi2_user_flags*: DWORD
    sesi2_cltype_name*: LPWSTR
  PSESSION_INFO_2* = ptr SESSION_INFO_2
  LPSESSION_INFO_2* = ptr SESSION_INFO_2
  SESSION_INFO_10* {.final, pure.} = object
    sesi10_cname*: LPWSTR
    sesi10_username*: LPWSTR
    sesi10_time*: DWORD
    sesi10_idle_time*: DWORD
  PSESSION_INFO_10* = ptr SESSION_INFO_10
  LPSESSION_INFO_10* = ptr SESSION_INFO_10
  SESSION_INFO_502* {.final, pure.} = object
    sesi502_cname*: LPWSTR
    sesi502_username*: LPWSTR
    sesi502_num_opens*: DWORD
    sesi502_time*: DWORD
    sesi502_idle_time*: DWORD
    sesi502_user_flags*: DWORD
    sesi502_cltype_name*: LPWSTR
    sesi502_transport*: LPWSTR
  PSESSION_INFO_502* = ptr SESSION_INFO_502
  LPSESSION_INFO_502* = ptr SESSION_INFO_502
  CONNECTION_INFO_0* {.final, pure.} = object
    coni0_id*: DWORD
  PCONNECTION_INFO_0* = ptr CONNECTION_INFO_0
  LPCONNECTION_INFO_0* = ptr CONNECTION_INFO_0
  CONNECTION_INFO_1* {.final, pure.} = object
    coni1_id*: DWORD
    coni1_type*: DWORD
    coni1_num_opens*: DWORD
    coni1_num_users*: DWORD
    coni1_time*: DWORD
    coni1_username*: LPWSTR
    coni1_netname*: LPWSTR
  PCONNECTION_INFO_1* = ptr CONNECTION_INFO_1
  LPCONNECTION_INFO_1* = ptr CONNECTION_INFO_1

proc NetShareAdd*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetShareEnum*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetShareEnumSticky*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, resume_handle: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetShareGetInfo*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetShareSetInfo*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetShareDel*(P1: LPWSTR, P2: LPWSTR, P3: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetShareDelSticky*(P1: LPWSTR, P2: LPWSTR, P3: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetShareCheck*(P1: LPWSTR, P2: LPWSTR, P3: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetSessionEnum*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR, P4: DWORD, P5: ptr PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD, P9: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetSessionDel*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetSessionGetInfo*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR, P4: DWORD, P5: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetConnectionEnum*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: ptr PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD, P8: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetFileClose*(P1: LPWSTR, P2: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetFileEnum*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR, P4: DWORD, P5: ptr PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD, P9: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetFileGetInfo*(P1: LPWSTR, P2: DWORD, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmsname.nim

const
  SERVICE_WORKSTATION* = "LanmanWorkstation"
  SERVICE_LM20_WORKSTATION* = "WORKSTATION"
  WORKSTATION_DISPLAY_NAME* = "Workstation"
  SERVICE_SERVER* = "LanmanServer"
  SERVICE_LM20_SERVER* = "SERVER"
  SERVER_DISPLAY_NAME* = "Server"
  SERVICE_BROWSER* = "BROWSER"
  SERVICE_LM20_BROWSER* = SERVICE_BROWSER
  SERVICE_MESSENGER* = "MESSENGER"
  SERVICE_LM20_MESSENGER* = SERVICE_MESSENGER
  SERVICE_NETRUN* = "NETRUN"
  SERVICE_LM20_NETRUN* = SERVICE_NETRUN
  SERVICE_SPOOLER* = "SPOOLER"
  SERVICE_LM20_SPOOLER* = SERVICE_SPOOLER
  SERVICE_ALERTER* = "ALERTER"
  SERVICE_LM20_ALERTER* = SERVICE_ALERTER
  SERVICE_NETLOGON* = "NETLOGON"
  SERVICE_LM20_NETLOGON* = SERVICE_NETLOGON
  SERVICE_NETPOPUP* = "NETPOPUP"
  SERVICE_LM20_NETPOPUP* = SERVICE_NETPOPUP
  SERVICE_SQLSERVER* = "SQLSERVER"
  SERVICE_LM20_SQLSERVER* = SERVICE_SQLSERVER
  SERVICE_REPL* = "REPLICATOR"
  SERVICE_LM20_REPL* = SERVICE_REPL
  SERVICE_RIPL* = "REMOTEBOOT"
  SERVICE_LM20_RIPL* = SERVICE_RIPL
  SERVICE_TIMESOURCE* = "TIMESOURCE"
  SERVICE_LM20_TIMESOURCE* = SERVICE_TIMESOURCE
  SERVICE_AFP* = "AFP"
  SERVICE_LM20_AFP* = SERVICE_AFP
  SERVICE_UPS* = "UPS"
  SERVICE_LM20_UPS* = SERVICE_UPS
  SERVICE_XACTSRV* = "XACTSRV"
  SERVICE_LM20_XACTSRV* = SERVICE_XACTSRV
  SERVICE_TCPIP* = "TCPIP"
  SERVICE_LM20_TCPIP* = SERVICE_TCPIP
  SERVICE_NBT* = "NBT"
  SERVICE_LM20_NBT* = SERVICE_NBT
  SERVICE_LMHOSTS* = "LMHOSTS"
  SERVICE_LM20_LMHOSTS* = SERVICE_LMHOSTS
  SERVICE_TELNET* = "Telnet"
  SERVICE_LM20_TELNET* = SERVICE_TELNET
  SERVICE_SCHEDULE* = "Schedule"
  SERVICE_LM20_SCHEDULE* = SERVICE_SCHEDULE
  SERVICE_NTLMSSP* = "NtLmSsp"
  SERVICE_DHCP* = "DHCP"
  SERVICE_LM20_DHCP* = SERVICE_DHCP
  SERVICE_NWSAP* = "NwSapAgent"
  SERVICE_LM20_NWSAP* = SERVICE_NWSAP
  NWSAP_DISPLAY_NAME* = "NW Sap Agent"
  SERVICE_NWCS* = "NWCWorkstation"

# net/lmstats.nim

const
  STATSOPT_CLR* = 1
  STATS_NO_VALUE* = 0xFFFFFFFF'u32
  STATS_OVERFLOW* = 0xFFFFFFFE'u32

type
  STAT_SERVER_0* {.final, pure.} = object
    sts0_start*: DWORD
    sts0_fopens*: DWORD
    sts0_devopens*: DWORD
    sts0_jobsqueued*: DWORD
    sts0_sopens*: DWORD
    sts0_stimedout*: DWORD
    sts0_serrorout*: DWORD
    sts0_pwerrors*: DWORD
    sts0_permerrors*: DWORD
    sts0_syserrors*: DWORD
    sts0_bytessent_low*: DWORD
    sts0_bytessent_high*: DWORD
    sts0_bytesrcvd_low*: DWORD
    sts0_bytesrcvd_high*: DWORD
    sts0_avresponse*: DWORD
    sts0_reqbufneed*: DWORD
    sts0_bigbufneed*: DWORD
  PSTAT_SERVER_0* = ptr STAT_SERVER_0
  LPSTAT_SERVER_0* = ptr STAT_SERVER_0
  STAT_WORKSTATION_0* {.final, pure.} = object
    StatisticsStartTime*: LARGE_INTEGER
    BytesReceived*: LARGE_INTEGER
    SmbsReceived*: LARGE_INTEGER
    PagingReadBytesRequested*: LARGE_INTEGER
    NonPagingReadBytesRequested*: LARGE_INTEGER
    CacheReadBytesRequested*: LARGE_INTEGER
    NetworkReadBytesRequested*: LARGE_INTEGER
    BytesTransmitted*: LARGE_INTEGER
    SmbsTransmitted*: LARGE_INTEGER
    PagingWriteBytesRequested*: LARGE_INTEGER
    NonPagingWriteBytesRequested*: LARGE_INTEGER
    CacheWriteBytesRequested*: LARGE_INTEGER
    NetworkWriteBytesRequested*: LARGE_INTEGER
    InitiallyFailedOperations*: DWORD
    FailedCompletionOperations*: DWORD
    ReadOperations*: DWORD
    RandomReadOperations*: DWORD
    ReadSmbs*: DWORD
    LargeReadSmbs*: DWORD
    SmallReadSmbs*: DWORD
    WriteOperations*: DWORD
    RandomWriteOperations*: DWORD
    WriteSmbs*: DWORD
    LargeWriteSmbs*: DWORD
    SmallWriteSmbs*: DWORD
    RawReadsDenied*: DWORD
    RawWritesDenied*: DWORD
    NetworkErrors*: DWORD
    Sessions*: DWORD
    FailedSessions*: DWORD
    Reconnects*: DWORD
    CoreConnects*: DWORD
    Lanman20Connects*: DWORD
    Lanman21Connects*: DWORD
    LanmanNtConnects*: DWORD
    ServerDisconnects*: DWORD
    HungSessions*: DWORD
    UseCount*: DWORD
    FailedUseCount*: DWORD
    CurrentCommands*: DWORD
  PSTAT_WORKSTATION_0* = ptr STAT_WORKSTATION_0
  LPSTAT_WORKSTATION_0* = ptr STAT_WORKSTATION_0

proc NetStatisticsGet*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: DWORD, P5: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmsvc.nim

const
  SERVICE_DOS_ENCRYPTION* = "ENCRYPT"
  SERVICE_UNINSTALLED* = 0
  SERVICE_INSTALL_PENDING* = 1
  SERVICE_UNINSTALL_PENDING* = 2
  SERVICE_INSTALLED* = 3
  SERVICE_INSTALL_STATE* = 3
  SERVICE_PAUSE_STATE* = 18
  LM20_SERVICE_ACTIVE* = 0
  LM20_SERVICE_CONTINUE_PENDING* = 4
  LM20_SERVICE_PAUSE_PENDING* = 8
  LM20_SERVICE_PAUSED* = 18
  SERVICE_NOT_UNINSTALLABLE* = 0
  SERVICE_UNINSTALLABLE* = 16
  SERVICE_NOT_PAUSABLE* = 0
  SERVICE_PAUSABLE* = 32
  SERVICE_REDIR_PAUSED* = 0x700
  SERVICE_REDIR_DISK_PAUSED* = 256
  SERVICE_REDIR_PRINT_PAUSED* = 512
  SERVICE_REDIR_COMM_PAUSED* = 1024
  SERVICE_CTRL_INTERROGATE* = 0
  SERVICE_CTRL_PAUSE* = 1
  SERVICE_CTRL_CONTINUE* = 2
  SERVICE_CTRL_UNINSTALL* = 3
  SERVICE_CTRL_REDIR_DISK* = 1
  SERVICE_CTRL_REDIR_PRINT* = 2
  SERVICE_CTRL_REDIR_COMM* = 4
  SERVICE_IP_NO_HINT* = 0
  SERVICE_CCP_NO_HINT* = 0
  SERVICE_IP_QUERY_HINT* = 0x10000
  SERVICE_CCP_QUERY_HINT* = 0x10000
  SERVICE_IP_CHKPT_NUM* = 255
  SERVICE_CCP_CHKPT_NUM* = 255
  SERVICE_IP_WAIT_TIME* = 0xFF00
  SERVICE_CCP_WAIT_TIME* = 0xFF00
  SERVICE_IP_WAITTIME_SHIFT* = 8
  SERVICE_NTIP_WAITTIME_SHIFT* = 12
  UPPER_HINT_MASK* = 0xFF00
  LOWER_HINT_MASK* = 255
  UPPER_GET_HINT_MASK* = 0xFF00000
  LOWER_GET_HINT_MASK* = 0xFF00
  SERVICE_NT_MAXTIME* = 0xFFFF
  SERVICE_RESRV_MASK* = 0x1FFFF
  SERVICE_MAXTIME* = 255
  SERVICE_BASE* = 3050
  SERVICE_UIC_NORMAL* = 0
  SERVICE_UIC_BADPARMVAL* = SERVICE_BASE+1
  SERVICE_UIC_MISSPARM* = SERVICE_BASE+2
  SERVICE_UIC_UNKPARM* = SERVICE_BASE+3
  SERVICE_UIC_RESOURCE* = SERVICE_BASE+4
  SERVICE_UIC_CONFIG* = SERVICE_BASE+5
  SERVICE_UIC_SYSTEM* = SERVICE_BASE+6
  SERVICE_UIC_INTERNAL* = SERVICE_BASE+7
  SERVICE_UIC_AMBIGPARM* = SERVICE_BASE+8
  SERVICE_UIC_DUPPARM* = SERVICE_BASE+9
  SERVICE_UIC_KILL* = SERVICE_BASE+10
  SERVICE_UIC_EXEC* = SERVICE_BASE+11
  SERVICE_UIC_SUBSERV* = SERVICE_BASE+12
  SERVICE_UIC_CONFLPARM* = SERVICE_BASE+13
  SERVICE_UIC_FILE* = SERVICE_BASE+14
  SERVICE_UIC_M_NULL* = 0
  SERVICE_UIC_M_MEMORY* = SERVICE_BASE+20
  SERVICE_UIC_M_DISK* = SERVICE_BASE+21
  SERVICE_UIC_M_THREADS* = SERVICE_BASE+22
  SERVICE_UIC_M_PROCESSES* = SERVICE_BASE+23
  SERVICE_UIC_M_SECURITY* = SERVICE_BASE+24
  SERVICE_UIC_M_LANROOT* = SERVICE_BASE+25
  SERVICE_UIC_M_REDIR* = SERVICE_BASE+26
  SERVICE_UIC_M_SERVER* = SERVICE_BASE+27
  SERVICE_UIC_M_SEC_FILE_ERR* = SERVICE_BASE+28
  SERVICE_UIC_M_FILES* = SERVICE_BASE+29
  SERVICE_UIC_M_LOGS* = SERVICE_BASE+30
  SERVICE_UIC_M_LANGROUP* = SERVICE_BASE+31
  SERVICE_UIC_M_MSGNAME* = SERVICE_BASE+32
  SERVICE_UIC_M_ANNOUNCE* = SERVICE_BASE+33
  SERVICE_UIC_M_UAS* = SERVICE_BASE+34
  SERVICE_UIC_M_SERVER_SEC_ERR* = SERVICE_BASE+35
  SERVICE_UIC_M_WKSTA* = SERVICE_BASE+37
  SERVICE_UIC_M_ERRLOG* = SERVICE_BASE+38
  SERVICE_UIC_M_FILE_UW* = SERVICE_BASE+39
  SERVICE_UIC_M_ADDPAK* = SERVICE_BASE+40
  SERVICE_UIC_M_LAZY* = SERVICE_BASE+41
  SERVICE_UIC_M_UAS_MACHINE_ACCT* = SERVICE_BASE+42
  SERVICE_UIC_M_UAS_SERVERS_NMEMB* = SERVICE_BASE+43
  SERVICE_UIC_M_UAS_SERVERS_NOGRP* = SERVICE_BASE+44
  SERVICE_UIC_M_UAS_INVALID_ROLE* = SERVICE_BASE+45
  SERVICE_UIC_M_NETLOGON_NO_DC* = SERVICE_BASE+46
  SERVICE_UIC_M_NETLOGON_DC_CFLCT* = SERVICE_BASE+47
  SERVICE_UIC_M_NETLOGON_AUTH* = SERVICE_BASE+48
  SERVICE_UIC_M_UAS_PROLOG* = SERVICE_BASE+49
  SERVICE2_BASE* = 5600
  SERVICE_UIC_M_NETLOGON_MPATH* = SERVICE2_BASE+0
  SERVICE_UIC_M_LSA_MACHINE_ACCT* = SERVICE2_BASE+1
  SERVICE_UIC_M_DATABASE_ERROR* = SERVICE2_BASE+2

type
  SERVICE_INFO_0* {.final, pure.} = object
    svci0_name*: LPWSTR
  PSERVICE_INFO_0* = ptr SERVICE_INFO_0
  LPSERVICE_INFO_0* = ptr SERVICE_INFO_0
  SERVICE_INFO_1* {.final, pure.} = object
    svci1_name*: LPWSTR
    svci1_status*: DWORD
    svci1_code*: DWORD
    svci1_pid*: DWORD
  PSERVICE_INFO_1* = ptr SERVICE_INFO_1
  LPSERVICE_INFO_1* = ptr SERVICE_INFO_1
  SERVICE_INFO_2* {.final, pure.} = object
    svci2_name*: LPWSTR
    svci2_status*: DWORD
    svci2_code*: DWORD
    svci2_pid*: DWORD
    svci2_text*: LPWSTR
    svci2_specific_error*: DWORD
    svci2_display_name*: LPWSTR
  PSERVICE_INFO_2* = ptr SERVICE_INFO_2
  LPSERVICE_INFO_2* = ptr SERVICE_INFO_2

proc NetServiceControl*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: DWORD, P5: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServiceEnum*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServiceGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServiceInstall*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr LPCWSTR, P5: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmuse.nim

const
  USE_LOCAL_PARMNUM* = 1
  USE_REMOTE_PARMNUM* = 2
  USE_PASSWORD_PARMNUM* = 3
  USE_ASGTYPE_PARMNUM* = 4
  USE_USERNAME_PARMNUM* = 5
  USE_DOMAINNAME_PARMNUM* = 6
  USE_OK* = 0
  USE_PAUSED* = 1
  USE_SESSLOST* = 2
  USE_DISCONN* = USE_SESSLOST
  USE_NETERR* = USE_SESSLOST + 1
  USE_CONN* = USE_SESSLOST + 2
  USE_RECONN* = USE_SESSLOST + 3
  USE_WILDCARD* = 0xFFFFFFFF'u32
  USE_DISKDEV* = 0
  USE_SPOOLDEV* = 1
  USE_CHARDEV* = 2
  USE_IPC* = 3

type
  USE_INFO_0* {.final, pure.} = object
    ui0_local*: LPWSTR
    ui0_remote*: LPWSTR
  PUSE_INFO_0* = ptr USE_INFO_0
  LPUSE_INFO_0* = ptr USE_INFO_0
  USE_INFO_1* {.final, pure.} = object
    ui1_local*: LPWSTR
    ui1_remote*: LPWSTR
    ui1_password*: LPWSTR
    ui1_status*: DWORD
    ui1_asg_type*: DWORD
    ui1_refcount*: DWORD
    ui1_usecount*: DWORD
  PUSE_INFO_1* = ptr USE_INFO_1
  LPUSE_INFO_1* = ptr USE_INFO_1
  USE_INFO_2* {.final, pure.} = object
    ui2_local*: LPWSTR
    ui2_remote*: LPWSTR
    ui2_password*: LPWSTR
    ui2_status*: DWORD
    ui2_asg_type*: DWORD
    ui2_refcount*: DWORD
    ui2_usecount*: DWORD
    ui2_username*: LPWSTR
    ui2_domainname*: LPWSTR
  PUSE_INFO_2* = ptr USE_INFO_2
  LPUSE_INFO_2* = ptr USE_INFO_2

proc NetUseAdd*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUseDel*(P1: LPWSTR, P2: LPWSTR, P3: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUseEnum*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUseGetInfo*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmuseflg.nim

const
  USE_NOFORCE* = 0
  USE_FORCE* = 1
  USE_LOTS_OF_FORCE* = 2

# net/lmwksta.nim

const
  WKSTA_COMPUTERNAME_PARMNUM* = 1
  WKSTA_LANGROUP_PARMNUM* = 2
  WKSTA_VER_MAJOR_PARMNUM* = 4
  WKSTA_VER_MINOR_PARMNUM* = 5
  WKSTA_LOGGED_ON_USERS_PARMNUM* = 6
  WKSTA_LANROOT_PARMNUM* = 7
  WKSTA_LOGON_DOMAIN_PARMNUM* = 8
  WKSTA_LOGON_SERVER_PARMNUM* = 9
  WKSTA_CHARWAIT_PARMNUM* = 10
  WKSTA_CHARTIME_PARMNUM* = 11
  WKSTA_CHARCOUNT_PARMNUM* = 12
  WKSTA_KEEPCONN_PARMNUM* = 13
  WKSTA_KEEPSEARCH_PARMNUM* = 14
  WKSTA_MAXCMDS_PARMNUM* = 15
  WKSTA_NUMWORKBUF_PARMNUM* = 16
  WKSTA_MAXWRKCACHE_PARMNUM* = 17
  WKSTA_SESSTIMEOUT_PARMNUM* = 18
  WKSTA_SIZERROR_PARMNUM* = 19
  WKSTA_NUMALERTS_PARMNUM* = 20
  WKSTA_NUMSERVICES_PARMNUM* = 21
  WKSTA_NUMCHARBUF_PARMNUM* = 22
  WKSTA_SIZCHARBUF_PARMNUM* = 23
  WKSTA_ERRLOGSZ_PARMNUM* = 27
  WKSTA_PRINTBUFTIME_PARMNUM* = 28
  WKSTA_SIZWORKBUF_PARMNUM* = 29
  WKSTA_MAILSLOTS_PARMNUM* = 30
  WKSTA_NUMDGRAMBUF_PARMNUM* = 31
  WKSTA_WRKHEURISTICS_PARMNUM* = 32
  WKSTA_MAXTHREADS_PARMNUM* = 33
  WKSTA_LOCKQUOTA_PARMNUM* = 41
  WKSTA_LOCKINCREMENT_PARMNUM* = 42
  WKSTA_LOCKMAXIMUM_PARMNUM* = 43
  WKSTA_PIPEINCREMENT_PARMNUM* = 44
  WKSTA_PIPEMAXIMUM_PARMNUM* = 45
  WKSTA_DORMANTFILELIMIT_PARMNUM* = 46
  WKSTA_CACHEFILETIMEOUT_PARMNUM* = 47
  WKSTA_USEOPPORTUNISTICLOCKING_PARMNUM* = 48
  WKSTA_USEUNLOCKBEHIND_PARMNUM* = 49
  WKSTA_USECLOSEBEHIND_PARMNUM* = 50
  WKSTA_BUFFERNAMEDPIPES_PARMNUM* = 51
  WKSTA_USELOCKANDREADANDUNLOCK_PARMNUM* = 52
  WKSTA_UTILIZENTCACHING_PARMNUM* = 53
  WKSTA_USERAWREAD_PARMNUM* = 54
  WKSTA_USERAWWRITE_PARMNUM* = 55
  WKSTA_USEWRITERAWWITHDATA_PARMNUM* = 56
  WKSTA_USEENCRYPTION_PARMNUM* = 57
  WKSTA_BUFFILESWITHDENYWRITE_PARMNUM* = 58
  WKSTA_BUFFERREADONLYFILES_PARMNUM* = 59
  WKSTA_FORCECORECREATEMODE_PARMNUM* = 60
  WKSTA_USE512BYTESMAXTRANSFER_PARMNUM* = 61
  WKSTA_READAHEADTHRUPUT_PARMNUM* = 62
  WKSTA_PLATFORM_ID_PARMNUM* = 100
  WKSTA_OTH_DOMAINS_PARMNUM* = 101
  TRANSPORT_QUALITYOFSERVICE_PARMNUM* = 201
  TRANSPORT_NAME_PARMNUM* = 202

type
  WKSTA_INFO_100* {.final, pure.} = object
    wki100_platform_id*: DWORD
    wki100_computername*: LPWSTR
    wki100_langroup*: LPWSTR
    wki100_ver_major*: DWORD
    wki100_ver_minor*: DWORD
  PWKSTA_INFO_100* = ptr WKSTA_INFO_100
  LPWKSTA_INFO_100* = ptr WKSTA_INFO_100
  WKSTA_INFO_101* {.final, pure.} = object
    wki101_platform_id*: DWORD
    wki101_computername*: LPWSTR
    wki101_langroup*: LPWSTR
    wki101_ver_major*: DWORD
    wki101_ver_minor*: DWORD
    wki101_lanroot*: LPWSTR
  PWKSTA_INFO_101* = ptr WKSTA_INFO_101
  LPWKSTA_INFO_101* = ptr WKSTA_INFO_101
  WKSTA_INFO_102* {.final, pure.} = object
    wki102_platform_id*: DWORD
    wki102_computername*: LPWSTR
    wki102_langroup*: LPWSTR
    wki102_ver_major*: DWORD
    wki102_ver_minor*: DWORD
    wki102_lanroot*: LPWSTR
    wki102_logged_on_users*: DWORD
  PWKSTA_INFO_102* = ptr WKSTA_INFO_102
  LPWKSTA_INFO_102* = ptr WKSTA_INFO_102
  WKSTA_INFO_302* {.final, pure.} = object
    wki302_char_wait*: DWORD
    wki302_collection_time*: DWORD
    wki302_maximum_collection_count*: DWORD
    wki302_keep_conn*: DWORD
    wki302_keep_search*: DWORD
    wki302_max_cmds*: DWORD
    wki302_num_work_buf*: DWORD
    wki302_siz_work_buf*: DWORD
    wki302_max_wrk_cache*: DWORD
    wki302_sess_timeout*: DWORD
    wki302_siz_error*: DWORD
    wki302_num_alerts*: DWORD
    wki302_num_services*: DWORD
    wki302_errlog_sz*: DWORD
    wki302_print_buf_time*: DWORD
    wki302_num_char_buf*: DWORD
    wki302_siz_char_buf*: DWORD
    wki302_wrk_heuristics*: LPWSTR
    wki302_mailslots*: DWORD
    wki302_num_dgram_buf*: DWORD
  PWKSTA_INFO_302* = ptr WKSTA_INFO_302
  LPWKSTA_INFO_302* = ptr WKSTA_INFO_302
  WKSTA_INFO_402* {.final, pure.} = object
    wki402_char_wait*: DWORD
    wki402_collection_time*: DWORD
    wki402_maximum_collection_count*: DWORD
    wki402_keep_conn*: DWORD
    wki402_keep_search*: DWORD
    wki402_max_cmds*: DWORD
    wki402_num_work_buf*: DWORD
    wki402_siz_work_buf*: DWORD
    wki402_max_wrk_cache*: DWORD
    wki402_sess_timeout*: DWORD
    wki402_siz_error*: DWORD
    wki402_num_alerts*: DWORD
    wki402_num_services*: DWORD
    wki402_errlog_sz*: DWORD
    wki402_print_buf_time*: DWORD
    wki402_num_char_buf*: DWORD
    wki402_siz_char_buf*: DWORD
    wki402_wrk_heuristics*: LPWSTR
    wki402_mailslots*: DWORD
    wki402_num_dgram_buf*: DWORD
    wki402_max_threads*: DWORD
  PWKSTA_INFO_402* = ptr WKSTA_INFO_402
  LPWKSTA_INFO_402* = ptr WKSTA_INFO_402
  WKSTA_INFO_502* {.final, pure.} = object
    wki502_char_wait*: DWORD
    wki502_collection_time*: DWORD
    wki502_maximum_collection_count*: DWORD
    wki502_keep_conn*: DWORD
    wki502_max_cmds*: DWORD
    wki502_sess_timeout*: DWORD
    wki502_siz_char_buf*: DWORD
    wki502_max_threads*: DWORD
    wki502_lock_quota*: DWORD
    wki502_lock_increment*: DWORD
    wki502_lock_maximum*: DWORD
    wki502_pipe_increment*: DWORD
    wki502_pipe_maximum*: DWORD
    wki502_cache_file_timeout*: DWORD
    wki502_dormant_file_limit*: DWORD
    wki502_read_ahead_throughput*: DWORD
    wki502_num_mailslot_buffers*: DWORD
    wki502_num_srv_announce_buffers*: DWORD
    wki502_max_illegal_datagram_events*: DWORD
    wki502_illegal_datagram_event_reset_frequency*: DWORD
    wki502_log_election_packets*: BOOL
    wki502_use_opportunistic_locking*: BOOL
    wki502_use_unlock_behind*: BOOL
    wki502_use_close_behind*: BOOL
    wki502_buf_named_pipes*: BOOL
    wki502_use_lock_read_unlock*: BOOL
    wki502_utilize_nt_caching*: BOOL
    wki502_use_raw_read*: BOOL
    wki502_use_raw_write*: BOOL
    wki502_use_write_raw_data*: BOOL
    wki502_use_encryption*: BOOL
    wki502_buf_files_deny_write*: BOOL
    wki502_buf_read_only_files*: BOOL
    wki502_force_core_create_mode*: BOOL
    wki502_use_512_byte_max_transfer*: BOOL
  PWKSTA_INFO_502* = ptr WKSTA_INFO_502
  LPWKSTA_INFO_502* = ptr WKSTA_INFO_502
  WKSTA_INFO_1010* {.final, pure.} = object
    wki1010_char_wait*: DWORD
  PWKSTA_INFO_1010* = ptr WKSTA_INFO_1010
  LPWKSTA_INFO_1010* = ptr WKSTA_INFO_1010
  WKSTA_INFO_1011* {.final, pure.} = object
    wki1011_collection_time*: DWORD
  PWKSTA_INFO_1011* = ptr WKSTA_INFO_1011
  LPWKSTA_INFO_1011* = ptr WKSTA_INFO_1011
  WKSTA_INFO_1012* {.final, pure.} = object
    wki1012_maximum_collection_count*: DWORD
  PWKSTA_INFO_1012* = ptr WKSTA_INFO_1012
  LPWKSTA_INFO_1012* = ptr WKSTA_INFO_1012
  WKSTA_INFO_1027* {.final, pure.} = object
    wki1027_errlog_sz*: DWORD
  PWKSTA_INFO_1027* = ptr WKSTA_INFO_1027
  LPWKSTA_INFO_1027* = ptr WKSTA_INFO_1027
  WKSTA_INFO_1028* {.final, pure.} = object
    wki1028_print_buf_time*: DWORD
  PWKSTA_INFO_1028* = ptr WKSTA_INFO_1028
  LPWKSTA_INFO_1028* = ptr WKSTA_INFO_1028
  WKSTA_INFO_1032* {.final, pure.} = object
    wki1032_wrk_heuristics*: DWORD
  PWKSTA_INFO_1032* = ptr WKSTA_INFO_1032
  LPWKSTA_INFO_1032* = ptr WKSTA_INFO_1032
  WKSTA_INFO_1013* {.final, pure.} = object
    wki1013_keep_conn*: DWORD
  PWKSTA_INFO_1013* = ptr WKSTA_INFO_1013
  LPWKSTA_INFO_1013* = ptr WKSTA_INFO_1013
  WKSTA_INFO_1018* {.final, pure.} = object
    wki1018_sess_timeout*: DWORD
  PWKSTA_INFO_1018* = ptr WKSTA_INFO_1018
  LPWKSTA_INFO_1018* = ptr WKSTA_INFO_1018
  WKSTA_INFO_1023* {.final, pure.} = object
    wki1023_siz_char_buf*: DWORD
  PWKSTA_INFO_1023* = ptr WKSTA_INFO_1023
  LPWKSTA_INFO_1023* = ptr WKSTA_INFO_1023
  WKSTA_INFO_1033* {.final, pure.} = object
    wki1033_max_threads*: DWORD
  PWKSTA_INFO_1033* = ptr WKSTA_INFO_1033
  LPWKSTA_INFO_1033* = ptr WKSTA_INFO_1033
  WKSTA_INFO_1041* {.final, pure.} = object
    wki1041_lock_quota*: DWORD
  PWKSTA_INFO_1041* = ptr WKSTA_INFO_1041
  LPWKSTA_INFO_1041* = ptr WKSTA_INFO_1041
  WKSTA_INFO_1042* {.final, pure.} = object
    wki1042_lock_increment*: DWORD
  PWKSTA_INFO_1042* = ptr WKSTA_INFO_1042
  LPWKSTA_INFO_1042* = ptr WKSTA_INFO_1042
  WKSTA_INFO_1043* {.final, pure.} = object
    wki1043_lock_maximum*: DWORD
  PWKSTA_INFO_1043* = ptr WKSTA_INFO_1043
  LPWKSTA_INFO_1043* = ptr WKSTA_INFO_1043
  WKSTA_INFO_1044* {.final, pure.} = object
    wki1044_pipe_increment*: DWORD
  PWKSTA_INFO_1044* = ptr WKSTA_INFO_1044
  LPWKSTA_INFO_1044* = ptr WKSTA_INFO_1044
  WKSTA_INFO_1045* {.final, pure.} = object
    wki1045_pipe_maximum*: DWORD
  PWKSTA_INFO_1045* = ptr WKSTA_INFO_1045
  LPWKSTA_INFO_1045* = ptr WKSTA_INFO_1045
  WKSTA_INFO_1046* {.final, pure.} = object
    wki1046_dormant_file_limit*: DWORD
  PWKSTA_INFO_1046* = ptr WKSTA_INFO_1046
  LPWKSTA_INFO_1046* = ptr WKSTA_INFO_1046
  WKSTA_INFO_1047* {.final, pure.} = object
    wki1047_cache_file_timeout*: DWORD
  PWKSTA_INFO_1047* = ptr WKSTA_INFO_1047
  LPWKSTA_INFO_1047* = ptr WKSTA_INFO_1047
  WKSTA_INFO_1048* {.final, pure.} = object
    wki1048_use_opportunistic_locking*: BOOL
  PWKSTA_INFO_1048* = ptr WKSTA_INFO_1048
  LPWKSTA_INFO_1048* = ptr WKSTA_INFO_1048
  WKSTA_INFO_1049* {.final, pure.} = object
    wki1049_use_unlock_behind*: BOOL
  PWKSTA_INFO_1049* = ptr WKSTA_INFO_1049
  LPWKSTA_INFO_1049* = ptr WKSTA_INFO_1049
  WKSTA_INFO_1050* {.final, pure.} = object
    wki1050_use_close_behind*: BOOL
  PWKSTA_INFO_1050* = ptr WKSTA_INFO_1050
  LPWKSTA_INFO_1050* = ptr WKSTA_INFO_1050
  WKSTA_INFO_1051* {.final, pure.} = object
    wki1051_buf_named_pipes*: BOOL
  PWKSTA_INFO_1051* = ptr WKSTA_INFO_1051
  LPWKSTA_INFO_1051* = ptr WKSTA_INFO_1051
  WKSTA_INFO_1052* {.final, pure.} = object
    wki1052_use_lock_read_unlock*: BOOL
  PWKSTA_INFO_1052* = ptr WKSTA_INFO_1052
  LPWKSTA_INFO_1052* = ptr WKSTA_INFO_1052
  WKSTA_INFO_1053* {.final, pure.} = object
    wki1053_utilize_nt_caching*: BOOL
  PWKSTA_INFO_1053* = ptr WKSTA_INFO_1053
  LPWKSTA_INFO_1053* = ptr WKSTA_INFO_1053
  WKSTA_INFO_1054* {.final, pure.} = object
    wki1054_use_raw_read*: BOOL
  PWKSTA_INFO_1054* = ptr WKSTA_INFO_1054
  LPWKSTA_INFO_1054* = ptr WKSTA_INFO_1054
  WKSTA_INFO_1055* {.final, pure.} = object
    wki1055_use_raw_write*: BOOL
  PWKSTA_INFO_1055* = ptr WKSTA_INFO_1055
  LPWKSTA_INFO_1055* = ptr WKSTA_INFO_1055
  WKSTA_INFO_1056* {.final, pure.} = object
    wki1056_use_write_raw_data*: BOOL
  PWKSTA_INFO_1056* = ptr WKSTA_INFO_1056
  LPWKSTA_INFO_1056* = ptr WKSTA_INFO_1056
  WKSTA_INFO_1057* {.final, pure.} = object
    wki1057_use_encryption*: BOOL
  PWKSTA_INFO_1057* = ptr WKSTA_INFO_1057
  LPWKSTA_INFO_1057* = ptr WKSTA_INFO_1057
  WKSTA_INFO_1058* {.final, pure.} = object
    wki1058_buf_files_deny_write*: BOOL
  PWKSTA_INFO_1058* = ptr WKSTA_INFO_1058
  LPWKSTA_INFO_1058* = ptr WKSTA_INFO_1058
  WKSTA_INFO_1059* {.final, pure.} = object
    wki1059_buf_read_only_files*: BOOL
  PWKSTA_INFO_1059* = ptr WKSTA_INFO_1059
  LPWKSTA_INFO_1059* = ptr WKSTA_INFO_1059
  WKSTA_INFO_1060* {.final, pure.} = object
    wki1060_force_core_create_mode*: BOOL
  PWKSTA_INFO_1060* = ptr WKSTA_INFO_1060
  LPWKSTA_INFO_1060* = ptr WKSTA_INFO_1060
  WKSTA_INFO_1061* {.final, pure.} = object
    wki1061_use_512_byte_max_transfer*: BOOL
  PWKSTA_INFO_1061* = ptr WKSTA_INFO_1061
  LPWKSTA_INFO_1061* = ptr WKSTA_INFO_1061
  WKSTA_INFO_1062* {.final, pure.} = object
    wki1062_read_ahead_throughput*: DWORD
  PWKSTA_INFO_1062* = ptr WKSTA_INFO_1062
  LPWKSTA_INFO_1062* = ptr WKSTA_INFO_1062
  WKSTA_USER_INFO_0* {.final, pure.} = object
    wkui0_username*: LPWSTR
  PWKSTA_USER_INFO_0* = ptr WKSTA_USER_INFO_0
  LPWKSTA_USER_INFO_0* = ptr WKSTA_USER_INFO_0
  WKSTA_USER_INFO_1* {.final, pure.} = object
    wkui1_username*: LPWSTR
    wkui1_logon_domain*: LPWSTR
    wkui1_oth_domains*: LPWSTR
    wkui1_logon_server*: LPWSTR
  PWKSTA_USER_INFO_1* = ptr WKSTA_USER_INFO_1
  LPWKSTA_USER_INFO_1* = ptr WKSTA_USER_INFO_1
  WKSTA_USER_INFO_1101* {.final, pure.} = object
    wkui1101_oth_domains*: LPWSTR
  PWKSTA_USER_INFO_1101* = ptr WKSTA_USER_INFO_1101
  LPWKSTA_USER_INFO_1101* = ptr WKSTA_USER_INFO_1101
  WKSTA_TRANSPORT_INFO_0* {.final, pure.} = object
    wkti0_quality_of_service*: DWORD
    wkti0_number_of_vcs*: DWORD
    wkti0_transport_name*: LPWSTR
    wkti0_transport_address*: LPWSTR
    wkti0_wan_ish*: BOOL
  PWKSTA_TRANSPORT_INFO_0* = ptr WKSTA_TRANSPORT_INFO_0
  LPWKSTA_TRANSPORT_INFO_0* = ptr WKSTA_TRANSPORT_INFO_0

proc NetWkstaGetInfo*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetWkstaSetInfo*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetWkstaUserGetInfo*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetWkstaUserSetInfo*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetWkstaUserEnum*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetWkstaTransportAdd*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetWkstaTransportDel*(P1: LPWSTR, P2: LPWSTR, P3: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetWkstaTransportEnum*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/ras.nim

const
  # RASCONNSTATE* = enum
  RASCS_OpenPort* = 0
  RASCS_PortOpened* = 1
  RASCS_ConnectDevice* = 2
  RASCS_DeviceConnected* = 3
  RASCS_AllDevicesConnected* = 4
  RASCS_Authenticate* = 5
  RASCS_AuthNotify* = 6
  RASCS_AuthRetry* = 7
  RASCS_AuthCallback* = 8
  RASCS_AuthChangePassword* = 9
  RASCS_AuthProject* = 10
  RASCS_AuthLinkSpeed* = 11
  RASCS_AuthAck* = 12
  RASCS_ReAuthenticate* = 13
  RASCS_Authenticated* = 14
  RASCS_PrepareForCallback* = 15
  RASCS_WaitForModemReset* = 16
  RASCS_WaitForCallback* = 17
  RASCS_Projected* = 18
  RASCS_StartAuthentication* = 19
  RASCS_CallbackComplete* = 20
  RASCS_LogonNetwork* = 21
  RASCS_SubEntryConnected* = 22
  RASCS_SubEntryDisconnected* = 23
  RASCS_Interactive* = 4096
  RASCS_RetryAuthentication* = 4097
  RASCS_CallbackSetByCaller* = 4098
  RASCS_PasswordExpired* = 4099
  RASCS_InvokeEapUI* = 4100
  RASCS_Connected* = 8192
  RASCS_Disconnected* = 8193
#* RASPROJECTION* = enum
  RASP_PppIp* = 0x8021
  RASP_PppIpx* = 0x802B
  RASP_PppNbf* = 0x803F
  RASP_PppCcp* = 0x80FD
  RASP_PppLcp* = 0xC021
  RASP_Amb* = 0x10000
  RASP_Slip* = 0x20000

const
  RAS_MaxDeviceType* = 16
  RAS_MaxPhoneNumber* = 128
  RAS_MaxIpAddress* = 15
  RAS_MaxIpxAddress* = 21
  RAS_MaxEntryName* = 256
  RAS_MaxDeviceName* = 128
  RAS_MaxCallbackNumber* = RAS_MaxPhoneNumber
  RAS_MaxAreaCode* = 10
  RAS_MaxPadType* = 32
  RAS_MaxX25Address* = 200
  RAS_MaxFacilities* = 200
  RAS_MaxUserData* = 200
  RAS_MaxReplyMessage* = 1024
  RDEOPT_UsePrefixSuffix* = 0x00000001
  RDEOPT_PausedStates* = 0x00000002
  RDEOPT_IgnoreModemSpeaker* = 0x00000004
  RDEOPT_SetModemSpeaker* = 0x00000008
  RDEOPT_IgnoreSoftwareCompression* = 0x00000010
  RDEOPT_SetSoftwareCompression* = 0x00000020
  RDEOPT_DisableConnectedUI* = 0x00000040
  RDEOPT_DisableReconnectUI* = 0x00000080
  RDEOPT_DisableReconnect* = 0x00000100
  RDEOPT_NoUser* = 0x00000200
  RDEOPT_PauseOnScript* = 0x00000400
  RDEOPT_Router* = 0x00000800
  REN_User* = 0x00000000
  REN_AllUsers* = 0x00000001
  VS_Default* = 0
  VS_PptpOnly* = 1
  VS_PptpFirst* = 2
  VS_L2tpOnly* = 3
  VS_L2tpFirst* = 4
  RASDIALEVENT* = "RasDialEvent"
  WM_RASDIALEVENT* = 0xCCCD
  RASEO_UseCountryAndAreaCodes* = 0x00000001
  RASEO_SpecificIpAddr* = 0x00000002
  RASEO_SpecificNameServers* = 0x00000004
  RASEO_IpHeaderCompression* = 0x00000008
  RASEO_RemoteDefaultGateway* = 0x00000010
  RASEO_DisableLcpExtensions* = 0x00000020
  RASEO_TerminalBeforeDial* = 0x00000040
  RASEO_TerminalAfterDial* = 0x00000080
  RASEO_ModemLights* = 0x00000100
  RASEO_SwCompression* = 0x00000200
  RASEO_RequireEncryptedPw* = 0x00000400
  RASEO_RequireMsEncryptedPw* = 0x00000800
  RASEO_RequireDataEncryption* = 0x00001000
  RASEO_NetworkLogon* = 0x00002000
  RASEO_UseLogonCredentials* = 0x00004000
  RASEO_PromoteAlternates* = 0x00008000
  RASNP_NetBEUI* = 0x00000001
  RASNP_Ipx* = 0x00000002
  RASNP_Ip* = 0x00000004
  RASFP_Ppp* = 0x00000001
  RASFP_Slip* = 0x00000002
  RASFP_Ras* = 0x00000004
  RASDT_Modem* = "modem"
  RASDT_Isdn* = "isdn"
  RASDT_X25* = "x25"
  RASDT_Vpn* = "vpn"
  RASDT_Pad* = "pad"
  RASDT_Generic* = "GENERIC"
  RASDT_Serial* = "SERIAL"
  RASDT_FrameRelay* = "FRAMERELAY"
  RASDT_Atm* = "ATM"
  RASDT_Sonet* = "SONET"
  RASDT_SW56* = "SW56"
  RASDT_Irda* = "IRDA"
  RASDT_Parallel* = "PARALLEL"
  RASET_Phone* = 1
  RASET_Vpn* = 2
  RASET_Direct* = 3
  RASET_Internet* = 4
  RASEO_SecureLocalFiles* = 0x00010000
  RASCN_Connection* = 0x00000001
  RASCN_Disconnection* = 0x00000002
  RASCN_BandwidthAdded* = 0x00000004
  RASCN_BandwidthRemoved* = 0x00000008
  RASEDM_DialAll* = 1
  RASEDM_DialAsNeeded* = 2
  RASIDS_Disabled* = -1
  RASIDS_UseGlobalValue* = 0
  RASADFLG_PositionDlg* = 0x00000001
  RASCM_UserName* = 0x00000001
  RASCM_Password* = 0x00000002
  RASCM_Domain* = 0x00000004
  RASADP_DisableConnectionQuery* = 0
  RASADP_LoginSessionDisable* = 1
  RASADP_SavedAddressesLimit* = 2
  RASADP_FailedConnectionTimeout* = 3
  RASADP_ConnectionQueryTimeout* = 4
  RDEOPT_CustomDial* = 0x00001000
  RASLCPAP_PAP* = 0xC023
  RASLCPAP_SPAP* = 0xC027
  RASLCPAP_CHAP* = 0xC223
  RASLCPAP_EAP* = 0xC227
  RASLCPAD_CHAP_MD5* = 0x05
  RASLCPAD_CHAP_MS* = 0x80
  RASLCPAD_CHAP_MSV2* = 0x81
  RASLCPO_PFC* = 0x00000001
  RASLCPO_ACFC* = 0x00000002
  RASLCPO_SSHF* = 0x00000004
  RASLCPO_DES_56* = 0x00000008
  RASLCPO_3_DES* = 0x00000010
  RASCCPCA_MPPC* = 0x00000006
  RASCCPCA_STAC* = 0x00000005
  RASCCPO_Compression* = 0x00000001
  RASCCPO_HistoryLess* = 0x00000002
  RASCCPO_Encryption56bit* = 0x00000010
  RASCCPO_Encryption40bit* = 0x00000020
  RASCCPO_Encryption128bit* = 0x00000040
  RASEO_RequireEAP* = 0x00020000
  RASEO_RequirePAP* = 0x00040000
  RASEO_RequireSPAP* = 0x00080000
  RASEO_Custom* = 0x00100000
  RASEO_PreviewPhoneNumber* = 0x00200000
  RASEO_SharedPhoneNumbers* = 0x00800000
  RASEO_PreviewUserPw* = 0x01000000
  RASEO_PreviewDomain* = 0x02000000
  RASEO_ShowDialingProgress* = 0x04000000
  RASEO_RequireCHAP* = 0x08000000
  RASEO_RequireMsCHAP* = 0x10000000
  RASEO_RequireMsCHAP2* = 0x20000000
  RASEO_RequireW95MSCHAP* = 0x40000000
  RASEO_CustomScript* = 0x80000000'i32
  RASIPO_VJ* = 0x00000001
  RCD_SingleUser* = 0
  RCD_AllUsers* = 0x00000001
  RCD_Eap* = 0x00000002
  RASEAPF_NonInteractive* = 0x00000002
  RASEAPF_Logon* = 0x00000004
  RASEAPF_Preview* = 0x00000008
  ET_40Bit* = 1
  ET_128Bit* = 2
  ET_None* = 0
  ET_Require* = 1
  ET_RequireMax* = 2
  ET_Optional* = 3
  RASCS_PAUSED* = 0x1000
  RASCS_DONE* = 0x2000

type
  RASCONNSTATE* = int32
  LPRASCONNSTATE* = ptr RASCONNSTATE
  RASPROJECTION* = int32
  LPRASPROJECTION* = ptr RASPROJECTION
  HRASCONN* = HANDLE
  LPHRASCONN* = ptr HRASCONN
  RASCONNW* {.final, pure.} = object
    dwSize*: DWORD
    hrasconn*: HRASCONN
    szEntryName*: array[RAS_MaxEntryName + 1, WCHAR]
    szDeviceType*: array[RAS_MaxDeviceType + 1, WCHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, WCHAR]
    szPhonebook*: array[MAX_PATH, WCHAR]
    dwSubEntry*: DWORD
    guidEntry*: GUID
    dwFlags*: DWORD
    luid*: LUID
  LPRASCONNW* = ptr RASCONNW
  RASCONNA* {.final, pure.} = object
    dwSize*: DWORD
    hrasconn*: HRASCONN
    szEntryName*: array[RAS_MaxEntryName + 1, CHAR]
    szDeviceType*: array[RAS_MaxDeviceType + 1, CHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, CHAR]
    szPhonebook*: array[MAX_PATH, CHAR]
    dwSubEntry*: DWORD
    guidEntry*: GUID
    dwFlags*: DWORD
    luid*: LUID
  LPRASCONNA* = ptr RASCONNA
  RASCONNSTATUSW* {.final, pure.} = object
    dwSize*: DWORD
    rasconnstate*: RASCONNSTATE
    dwError*: DWORD
    szDeviceType*: array[RAS_MaxDeviceType + 1, WCHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, WCHAR]
    szPhoneNumber*: array[RAS_MaxPhoneNumber + 1, WCHAR]
  LPRASCONNSTATUSW* = ptr RASCONNSTATUSW
  RASCONNSTATUSA* {.final, pure.} = object
    dwSize*: DWORD
    rasconnstate*: RASCONNSTATE
    dwError*: DWORD
    szDeviceType*: array[RAS_MaxDeviceType + 1, CHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, CHAR]
    szPhoneNumber*: array[RAS_MaxPhoneNumber + 1, CHAR]
  LPRASCONNSTATUSA* = ptr RASCONNSTATUSA
  RASDIALPARAMSW* {.final, pure.} = object
    dwSize*: DWORD
    szEntryName*: array[RAS_MaxEntryName + 1, WCHAR]
    szPhoneNumber*: array[RAS_MaxPhoneNumber + 1, WCHAR]
    szCallbackNumber*: array[RAS_MaxCallbackNumber + 1, WCHAR]
    szUserName*: array[UNLEN + 1, WCHAR]
    szPassword*: array[PWLEN + 1, WCHAR]
    szDomain*: array[DNLEN + 1, WCHAR]
    dwSubEntry*: DWORD
    dwCallbackId*: ULONG_PTR
  LPRASDIALPARAMSW* = ptr RASDIALPARAMSW
  RASDIALPARAMSA* {.final, pure.} = object
    dwSize*: DWORD
    szEntryName*: array[RAS_MaxEntryName + 1, CHAR]
    szPhoneNumber*: array[RAS_MaxPhoneNumber + 1, CHAR]
    szCallbackNumber*: array[RAS_MaxCallbackNumber + 1, CHAR]
    szUserName*: array[UNLEN + 1, CHAR]
    szPassword*: array[PWLEN + 1, CHAR]
    szDomain*: array[DNLEN + 1, CHAR]
    dwSubEntry*: DWORD
    dwCallbackId*: ULONG_PTR
  LPRASDIALPARAMSA* = ptr RASDIALPARAMSA
  RASEAPINFO* {.final, pure.} = object
    dwSizeofEapInfo*: DWORD
    pbEapInfo*: ptr BYTE
  RASDIALEXTENSIONS* {.final, pure.} = object
    dwSize*: DWORD
    dwfOptions*: DWORD
    hwndParent*: HWND
    reserved*: ULONG_PTR
    reserved1*: ULONG_PTR
    RasEapInfo*: RASEAPINFO
  LPRASDIALEXTENSIONS* = ptr RASDIALEXTENSIONS
  RASENTRYNAMEW* {.final, pure.} = object
    dwSize*: DWORD
    szEntryName*: array[RAS_MaxEntryName + 1, WCHAR]
    dwFlags*: DWORD
    szPhonebookPath*: array[MAX_PATH + 1, WCHAR]
  LPRASENTRYNAMEW* = ptr RASENTRYNAMEW
  RASENTRYNAMEA* {.final, pure.} = object
    dwSize*: DWORD
    szEntryName*: array[RAS_MaxEntryName + 1, CHAR]
    dwFlags*: DWORD
    szPhonebookPath*: array[MAX_PATH + 1, CHAR]
  LPRASENTRYNAMEA* = ptr RASENTRYNAMEA
  RASAMBW* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    szNetBiosError*: array[NETBIOS_NAME_LEN + 1, WCHAR]
    bLana*: BYTE
  LPRASAMBW* = ptr RASAMBW
  RASAMBA* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    szNetBiosError*: array[NETBIOS_NAME_LEN + 1, CHAR]
    bLana*: BYTE
  LPRASAMBA* = ptr RASAMBA
  RASPPPNBFW* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    dwNetBiosError*: DWORD
    szNetBiosError*: array[NETBIOS_NAME_LEN + 1, WCHAR]
    szWorkstationName*: array[NETBIOS_NAME_LEN + 1, WCHAR]
    bLana*: BYTE
  LPRASPPPNBFW* = ptr RASPPPNBFW
  RASPPPNBFA* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    dwNetBiosError*: DWORD
    szNetBiosError*: array[NETBIOS_NAME_LEN + 1, CHAR]
    szWorkstationName*: array[NETBIOS_NAME_LEN + 1, CHAR]
    bLana*: BYTE
  LPRASPPPNBFA* = ptr RASPPPNBFA
  RASPPPIPXW* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    szIpxAddress*: array[RAS_MaxIpxAddress + 1, WCHAR]
  LPRASPPPIPXW* = ptr RASPPPIPXW
  RASPPPIPXA* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    szIpxAddress*: array[RAS_MaxIpxAddress + 1, CHAR]
  LPRASPPPIPXA* = ptr RASPPPIPXA
  RASPPPIPW* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    szIpAddress*: array[RAS_MaxIpAddress + 1, WCHAR]
    szServerIpAddress*: array[RAS_MaxIpAddress + 1, WCHAR]
    dwOptions*: DWORD
    dwServerOptions*: DWORD
  LPRASPPPIPW* = ptr RASPPPIPW
  RASPPPIPA* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    szIpAddress*: array[RAS_MaxIpAddress + 1, CHAR]
    szServerIpAddress*: array[RAS_MaxIpAddress + 1, CHAR]
    dwOptions*: DWORD
    dwServerOptions*: DWORD
  LPRASPPPIPA* = ptr RASPPPIPA
  RASPPPLCPW* {.final, pure.} = object
    dwSize*: DWORD
    fBundled*: BOOL
    dwError*: DWORD
    dwAuthenticationProtocol*: DWORD
    dwAuthenticationData*: DWORD
    dwEapTypeId*: DWORD
    dwServerAuthenticationProtocol*: DWORD
    dwServerAuthenticationData*: DWORD
    dwServerEapTypeId*: DWORD
    fMultilink*: BOOL
    dwTerminateReason*: DWORD
    dwServerTerminateReason*: DWORD
    szReplyMessage*: array[RAS_MaxReplyMessage, WCHAR]
    dwOptions*: DWORD
    dwServerOptions*: DWORD
  LPRASPPPLCPW* = ptr RASPPPLCPW
  RASPPPLCPA* {.final, pure.} = object
    dwSize*: DWORD
    fBundled*: BOOL
    dwError*: DWORD
    dwAuthenticationProtocol*: DWORD
    dwAuthenticationData*: DWORD
    dwEapTypeId*: DWORD
    dwServerAuthenticationProtocol*: DWORD
    dwServerAuthenticationData*: DWORD
    dwServerEapTypeId*: DWORD
    fMultilink*: BOOL
    dwTerminateReason*: DWORD
    dwServerTerminateReason*: DWORD
    szReplyMessage*: array[RAS_MaxReplyMessage, CHAR]
    dwOptions*: DWORD
    dwServerOptions*: DWORD
  LPRASPPPLCPA* = ptr RASPPPLCPA
  RASSLIPW* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    szIpAddress*: array[RAS_MaxIpAddress + 1, WCHAR]
  LPRASSLIPW* = ptr RASSLIPW
  RASSLIPA* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    szIpAddress*: array[RAS_MaxIpAddress + 1, CHAR]
  LPRASSLIPA* = ptr RASSLIPA
  RASDEVINFOW* {.final, pure.} = object
    dwSize*: DWORD
    szDeviceType*: array[RAS_MaxDeviceType + 1, WCHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, WCHAR]
  LPRASDEVINFOW* = ptr RASDEVINFOW
  RASDEVINFOA* {.final, pure.} = object
    dwSize*: DWORD
    szDeviceType*: array[RAS_MaxDeviceType + 1, CHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, CHAR]
  LPRASDEVINFOA* = ptr RASDEVINFOA
  RASCTRYINFO* {.final, pure.} = object
    dwSize*: DWORD
    dwCountryID*: DWORD
    dwNextCountryID*: DWORD
    dwCountryCode*: DWORD
    dwCountryNameOffset*: DWORD
  LPRASCTRYINFO* = ptr RASCTRYINFO
  RASCTRYINFOW* = RASCTRYINFO
  RASCTRYINFOA* = RASCTRYINFO
  LPRASCTRYINFOW* = ptr RASCTRYINFOW
  LPRASCTRYINFOA* = ptr RASCTRYINFOA
  RASIPADDR* {.final, pure.} = object
    a*: BYTE
    b*: BYTE
    c*: BYTE
    d*: BYTE
  RASENTRYW* {.final, pure.} = object
    dwSize*: DWORD
    dwfOptions*: DWORD
    dwCountryID*: DWORD
    dwCountryCode*: DWORD
    szAreaCode*: array[RAS_MaxAreaCode + 1, WCHAR]
    szLocalPhoneNumber*: array[RAS_MaxPhoneNumber + 1, WCHAR]
    dwAlternateOffset*: DWORD
    ipaddr*: RASIPADDR
    ipaddrDns*: RASIPADDR
    ipaddrDnsAlt*: RASIPADDR
    ipaddrWins*: RASIPADDR
    ipaddrWinsAlt*: RASIPADDR
    dwFrameSize*: DWORD
    dwfNetProtocols*: DWORD
    dwFramingProtocol*: DWORD
    szScript*: array[MAX_PATH, WCHAR]
    szAutodialDll*: array[MAX_PATH, WCHAR]
    szAutodialFunc*: array[MAX_PATH, WCHAR]
    szDeviceType*: array[RAS_MaxDeviceType + 1, WCHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, WCHAR]
    szX25PadType*: array[RAS_MaxPadType + 1, WCHAR]
    szX25Address*: array[RAS_MaxX25Address + 1, WCHAR]
    szX25Facilities*: array[RAS_MaxFacilities + 1, WCHAR]
    szX25UserData*: array[RAS_MaxUserData + 1, WCHAR]
    dwChannels*: DWORD
    dwReserved1*: DWORD
    dwReserved2*: DWORD
    dwSubEntries*: DWORD
    dwDialMode*: DWORD
    dwDialExtraPercent*: DWORD
    dwDialExtraSampleSeconds*: DWORD
    dwHangUpExtraPercent*: DWORD
    dwHangUpExtraSampleSeconds*: DWORD
    dwIdleDisconnectSeconds*: DWORD
    dwType*: DWORD
    dwEncryptionType*: DWORD
    dwCustomAuthKey*: DWORD
    guidId*: GUID
    szCustomDialDll*: array[MAX_PATH, WCHAR]
    dwVpnStrategy*: DWORD
  LPRASENTRYW* = ptr RASENTRYW
  RASENTRYA* {.final, pure.} = object
    dwSize*: DWORD
    dwfOptions*: DWORD
    dwCountryID*: DWORD
    dwCountryCode*: DWORD
    szAreaCode*: array[RAS_MaxAreaCode + 1, CHAR]
    szLocalPhoneNumber*: array[RAS_MaxPhoneNumber + 1, CHAR]
    dwAlternateOffset*: DWORD
    ipaddr*: RASIPADDR
    ipaddrDns*: RASIPADDR
    ipaddrDnsAlt*: RASIPADDR
    ipaddrWins*: RASIPADDR
    ipaddrWinsAlt*: RASIPADDR
    dwFrameSize*: DWORD
    dwfNetProtocols*: DWORD
    dwFramingProtocol*: DWORD
    szScript*: array[MAX_PATH, CHAR]
    szAutodialDll*: array[MAX_PATH, CHAR]
    szAutodialFunc*: array[MAX_PATH, CHAR]
    szDeviceType*: array[RAS_MaxDeviceType + 1, CHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, CHAR]
    szX25PadType*: array[RAS_MaxPadType + 1, CHAR]
    szX25Address*: array[RAS_MaxX25Address + 1, CHAR]
    szX25Facilities*: array[RAS_MaxFacilities + 1, CHAR]
    szX25UserData*: array[RAS_MaxUserData + 1, CHAR]
    dwChannels*: DWORD
    dwReserved1*: DWORD
    dwReserved2*: DWORD
    dwSubEntries*: DWORD
    dwDialMode*: DWORD
    dwDialExtraPercent*: DWORD
    dwDialExtraSampleSeconds*: DWORD
    dwHangUpExtraPercent*: DWORD
    dwHangUpExtraSampleSeconds*: DWORD
    dwIdleDisconnectSeconds*: DWORD
    dwType*: DWORD
    dwEncryptionType*: DWORD
    dwCustomAuthKey*: DWORD
    guidId*: GUID
    szCustomDialDll*: array[MAX_PATH, CHAR]
    dwVpnStrategy*: DWORD
  LPRASENTRYA* = ptr RASENTRYA
  RASADPARAMS* {.final, pure.} = object
    dwSize*: DWORD
    hwndOwner*: HWND
    dwFlags*: DWORD
    xDlg*: LONG
    yDlg*: LONG
  LPRASADPARAMS* = ptr RASADPARAMS
  RASSUBENTRYW* {.final, pure.} = object
    dwSize*: DWORD
    dwfFlags*: DWORD
    szDeviceType*: array[RAS_MaxDeviceType + 1, WCHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, WCHAR]
    szLocalPhoneNumber*: array[RAS_MaxPhoneNumber + 1, WCHAR]
    dwAlternateOffset*: DWORD
  LPRASSUBENTRYW* = ptr RASSUBENTRYW
  RASSUBENTRYA* {.final, pure.} = object
    dwSize*: DWORD
    dwfFlags*: DWORD
    szDeviceType*: array[RAS_MaxDeviceType + 1, CHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, CHAR]
    szLocalPhoneNumber*: array[RAS_MaxPhoneNumber + 1, CHAR]
    dwAlternateOffset*: DWORD
  LPRASSUBENTRYA* = ptr RASSUBENTRYA
  RASCREDENTIALSW* {.final, pure.} = object
    dwSize*: DWORD
    dwMask*: DWORD
    szUserName*: array[UNLEN + 1, WCHAR]
    szPassword*: array[PWLEN + 1, WCHAR]
    szDomain*: array[DNLEN + 1, WCHAR]
  LPRASCREDENTIALSW* = ptr RASCREDENTIALSW
  RASCREDENTIALSA* {.final, pure.} = object
    dwSize*: DWORD
    dwMask*: DWORD
    szUserName*: array[UNLEN + 1, CHAR]
    szPassword*: array[PWLEN + 1, CHAR]
    szDomain*: array[DNLEN + 1, CHAR]
  LPRASCREDENTIALSA* = ptr RASCREDENTIALSA
  RASAUTODIALENTRYW* {.final, pure.} = object
    dwSize*: DWORD
    dwFlags*: DWORD
    dwDialingLocation*: DWORD
    szEntry*: array[RAS_MaxEntryName + 1, WCHAR]
  LPRASAUTODIALENTRYW* = ptr RASAUTODIALENTRYW
  RASAUTODIALENTRYA* {.final, pure.} = object
    dwSize*: DWORD
    dwFlags*: DWORD
    dwDialingLocation*: DWORD
    szEntry*: array[RAS_MaxEntryName + 1, CHAR]
  LPRASAUTODIALENTRYA* = ptr RASAUTODIALENTRYA
  RASPPPCCP* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    dwCompressionAlgorithm*: DWORD
    dwOptions*: DWORD
    dwServerCompressionAlgorithm*: DWORD
    dwServerOptions*: DWORD
  LPRASPPPCCP* = ptr RASPPPCCP
  RASEAPUSERIDENTITYW* {.final, pure.} = object
    szUserName*: array[UNLEN + 1, WCHAR]
    dwSizeofEapInfo*: DWORD
    pbEapInfo*: array[1, BYTE]
  LPRASEAPUSERIDENTITYW* = ptr RASEAPUSERIDENTITYW
  RASEAPUSERIDENTITYA* {.final, pure.} = object
    szUserName*: array[UNLEN + 1, CHAR]
    dwSizeofEapInfo*: DWORD
    pbEapInfo*: array[1, BYTE]
  LPRASEAPUSERIDENTITYA* = ptr RASEAPUSERIDENTITYA
  RAS_STATS* {.final, pure.} = object
    dwSize*: DWORD
    dwBytesXmited*: DWORD
    dwBytesRcved*: DWORD
    dwFramesXmited*: DWORD
    dwFramesRcved*: DWORD
    dwCrcErr*: DWORD
    dwTimeoutErr*: DWORD
    dwAlignmentErr*: DWORD
    dwHardwareOverrunErr*: DWORD
    dwFramingErr*: DWORD
    dwBufferOverrunErr*: DWORD
    dwCompressionRatioIn*: DWORD
    dwCompressionRatioOut*: DWORD
    dwBps*: DWORD
    dwConnectDuration*: DWORD
  PRAS_STATS* = ptr RAS_STATS

when not defined(winansi):
  type
    RASCONN* = RASCONNW
    RASENTRY* = RASENTRYW
    RASCONNSTATUS* = RASCONNSTATUSW
    RASDIALPARAMS* = RASDIALPARAMSW
    RASAMB* = RASAMBW
    RASPPPNBF* = RASPPPNBFW
    RASPPPIPX* = RASPPPIPXW
    RASPPPIP* = RASPPPIPW
    RASPPPLCP* = RASPPPLCPW
    RASSLIP* = RASSLIPW
    RASDEVINFO* = RASDEVINFOW
    RASENTRYNAME* = RASENTRYNAMEW
    RASSUBENTRY* = RASSUBENTRYW
    RASCREDENTIALS* = RASCREDENTIALSW
    RASAUTODIALENTRY* = RASAUTODIALENTRYW
    RASEAPUSERIDENTITY* = RASEAPUSERIDENTITYW

else:
  type
    RASCONN* = RASCONNA
    RASENTRY* = RASENTRYA
    RASCONNSTATUS* = RASCONNSTATUSA
    RASDIALPARAMS* = RASDIALPARAMSA
    RASAMB* = RASAMBA
    RASPPPNBF* = RASPPPNBFA
    RASPPPIPX* = RASPPPIPXA
    RASPPPIP* = RASPPPIPA
    RASPPPLCP* = RASPPPLCPA
    RASSLIP* = RASSLIPA
    RASDEVINFO* = RASDEVINFOA
    RASENTRYNAME* = RASENTRYNAMEA
    RASSUBENTRY* = RASSUBENTRYA
    RASCREDENTIALS* = RASCREDENTIALSA
    RASAUTODIALENTRY* = RASAUTODIALENTRYA
    RASEAPUSERIDENTITY* = RASEAPUSERIDENTITYA

type
  LPRASCONN* = ptr RASCONN
  LPRASENTRY* = ptr RASENTRY
  LPRASCONNSTATUS* = ptr RASCONNSTATUS
  LPRASDIALPARAMS* = ptr RASDIALPARAMS
  LPRASAM* = ptr RASAMB
  LPRASPPPNBF* = ptr RASPPPNBF
  LPRASPPPIPX* = ptr RASPPPIPX
  LPRASPPPIP* = ptr RASPPPIP
  LPRASPPPLCP* = ptr RASPPPLCP
  LPRASSLIP* = ptr RASSLIP
  LPRASDEVINFO* = ptr RASDEVINFO
  LPRASENTRYNAME* = ptr RASENTRYNAME
  LPRASSUBENTRY* = ptr RASSUBENTRY
  LPRASCREDENTIALS* = ptr RASCREDENTIALS
  LPRASAUTODIALENTRY* = ptr RASAUTODIALENTRY
  LPRASEAPUSERIDENTITY* = ptr RASEAPUSERIDENTITY
  ORASADFUNC* = proc (P1: HWND, P2: LPSTR, P3: DWORD, P4: LPDWORD): BOOL {.cdecl.}
  RASDIALFUNC* = proc (P1: UINT, P2: RASCONNSTATE, P3: DWORD): void {.cdecl.}
  RASDIALFUNC1* = proc (P1: HRASCONN, P2: UINT, P3: RASCONNSTATE, P4: DWORD, P5: DWORD): void {.cdecl.}
  RASDIALFUNC2* = proc (P1: ULONG_PTR, P2: DWORD, P3: HRASCONN, P4: UINT, P5: RASCONNSTATE, P6: DWORD, P7: DWORD): DWORD {.cdecl.}

proc RasDialA*(P1: LPRASDIALEXTENSIONS, P2: LPCSTR, P3: LPRASDIALPARAMSA, P4: DWORD, P5: LPVOID, P6: LPHRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasDialW*(P1: LPRASDIALEXTENSIONS, P2: LPCWSTR, P3: LPRASDIALPARAMSW, P4: DWORD, P5: LPVOID, P6: LPHRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEnumConnectionsA*(P1: LPRASCONNA, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEnumConnectionsW*(P1: LPRASCONNW, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEnumEntriesA*(P1: LPCSTR, P2: LPCSTR, P3: LPRASENTRYNAMEA, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEnumEntriesW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASENTRYNAMEW, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetConnectStatusA*(P1: HRASCONN, P2: LPRASCONNSTATUSA): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetConnectStatusW*(P1: HRASCONN, P2: LPRASCONNSTATUSW): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetErrorStringA*(P1: UINT, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetErrorStringW*(P1: UINT, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasHangUpA*(P1: HRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasHangUpW*(P1: HRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetProjectionInfoA*(P1: HRASCONN, P2: RASPROJECTION, P3: LPVOID, P4: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetProjectionInfoW*(P1: HRASCONN, P2: RASPROJECTION, P3: LPVOID, P4: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasCreatePhonebookEntryA*(P1: HWND, P2: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasCreatePhonebookEntryW*(P1: HWND, P2: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEditPhonebookEntryA*(P1: HWND, P2: LPCSTR, P3: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEditPhonebookEntryW*(P1: HWND, P2: LPCWSTR, P3: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetEntryDialParamsA*(P1: LPCSTR, P2: LPRASDIALPARAMSA, P3: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetEntryDialParamsW*(P1: LPCWSTR, P2: LPRASDIALPARAMSW, P3: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetEntryDialParamsA*(P1: LPCSTR, P2: LPRASDIALPARAMSA, P3: LPBOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetEntryDialParamsW*(P1: LPCWSTR, P2: LPRASDIALPARAMSW, P3: LPBOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEnumDevicesA*(P1: LPRASDEVINFOA, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEnumDevicesW*(P1: LPRASDEVINFOW, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetCountryInfoA*(P1: LPRASCTRYINFOA, P2: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetCountryInfoW*(P1: LPRASCTRYINFOW, P2: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetEntryPropertiesA*(P1: LPCSTR, P2: LPCSTR, P3: LPRASENTRYA, P4: LPDWORD, P5: LPBYTE, P6: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetEntryPropertiesW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASENTRYW, P4: LPDWORD, P5: LPBYTE, P6: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetEntryPropertiesA*(P1: LPCSTR, P2: LPCSTR, P3: LPRASENTRYA, P4: DWORD, P5: LPBYTE, P6: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetEntryPropertiesW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASENTRYW, P4: DWORD, P5: LPBYTE, P6: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasRenameEntryA*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasRenameEntryW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasDeleteEntryA*(P1: LPCSTR, P2: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasDeleteEntryW*(P1: LPCWSTR, P2: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasValidateEntryNameA*(P1: LPCSTR, P2: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasValidateEntryNameW*(P1: LPCWSTR, P2: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}

type
  RASADFUNCA* = proc (P1: LPSTR, P2: LPSTR, P3: LPRASADPARAMS, P4: LPDWORD): BOOL {.cdecl.}
  RASADFUNCW* = proc (P1: LPWSTR, P2: LPWSTR, P3: LPRASADPARAMS, P4: LPDWORD): BOOL {.cdecl.}

proc RasGetSubEntryHandleA*(P1: HRASCONN, P2: DWORD, P3: LPHRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetSubEntryHandleW*(P1: HRASCONN, P2: DWORD, P3: LPHRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetCredentialsA*(P1: LPCSTR, P2: LPCSTR, P3: LPRASCREDENTIALSA): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetCredentialsW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASCREDENTIALSW): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetCredentialsA*(P1: LPCSTR, P2: LPCSTR, P3: LPRASCREDENTIALSA, P4: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetCredentialsW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASCREDENTIALSW, P4: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasConnectionNotificationA*(P1: HRASCONN, P2: HANDLE, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasConnectionNotificationW*(P1: HRASCONN, P2: HANDLE, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetSubEntryPropertiesA*(P1: LPCSTR, P2: LPCSTR, P3: DWORD, P4: LPRASSUBENTRYA, P5: LPDWORD, P6: LPBYTE, P7: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetSubEntryPropertiesW*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: LPRASSUBENTRYW, P5: LPDWORD, P6: LPBYTE, P7: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetSubEntryPropertiesA*(P1: LPCSTR, P2: LPCSTR, P3: DWORD, P4: LPRASSUBENTRYA, P5: DWORD, P6: LPBYTE, P7: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetSubEntryPropertiesW*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: LPRASSUBENTRYW, P5: DWORD, P6: LPBYTE, P7: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetAutodialAddressA*(P1: LPCSTR, P2: LPDWORD, P3: LPRASAUTODIALENTRYA, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetAutodialAddressW*(P1: LPCWSTR, P2: LPDWORD, P3: LPRASAUTODIALENTRYW, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetAutodialAddressA*(P1: LPCSTR, P2: DWORD, P3: LPRASAUTODIALENTRYA, P4: DWORD, P5: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetAutodialAddressW*(P1: LPCWSTR, P2: DWORD, P3: LPRASAUTODIALENTRYW, P4: DWORD, P5: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEnumAutodialAddressesA*(P1: ptr LPSTR, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEnumAutodialAddressesW*(P1: ptr LPWSTR, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetAutodialEnableA*(P1: DWORD, P2: LPBOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetAutodialEnableW*(P1: DWORD, P2: LPBOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetAutodialEnableA*(P1: DWORD, P2: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetAutodialEnableW*(P1: DWORD, P2: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetAutodialParamA*(P1: DWORD, P2: LPVOID, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetAutodialParamW*(P1: DWORD, P2: LPVOID, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetAutodialParamA*(P1: DWORD, P2: LPVOID, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetAutodialParamW*(P1: DWORD, P2: LPVOID, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}

type
  RasCustomHangUpFn* = proc (P1: HRASCONN): DWORD {.cdecl.}
  RasCustomDeleteEntryNotifyFn* = proc (P1: LPCTSTR, P2: LPCTSTR, P3: DWORD): DWORD {.cdecl.}
  RasCustomDialFn* = proc (P1: HINSTANCE, P2: LPRASDIALEXTENSIONS, P3: LPCTSTR, P4: LPRASDIALPARAMS, P5: DWORD, P6: LPVOID, P7: LPHRASCONN, P8: DWORD): DWORD {.cdecl.}

proc RasInvokeEapUI*(P1: HRASCONN, P2: DWORD, P3: LPRASDIALEXTENSIONS, P4: HWND): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetLinkStatistics*(P1: HRASCONN, P2: DWORD, P3: ptr RAS_STATS): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetConnectionStatistics*(P1: HRASCONN, P2: ptr RAS_STATS): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasClearLinkStatistics*(P1: HRASCONN, P2: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasClearConnectionStatistics*(P1: HRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetEapUserDataA*(P1: HANDLE, P2: LPCSTR, P3: LPCSTR, P4: ptr BYTE, P5: ptr DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetEapUserDataW*(P1: HANDLE, P2: LPCWSTR, P3: LPCWSTR, P4: ptr BYTE, P5: ptr DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetEapUserDataA*(P1: HANDLE, P2: LPCSTR, P3: LPCSTR, P4: ptr BYTE, P5: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetEapUserDataW*(P1: HANDLE, P2: LPCWSTR, P3: LPCWSTR, P4: ptr BYTE, P5: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetCustomAuthDataA*(P1: LPCSTR, P2: LPCSTR, P3: ptr BYTE, P4: ptr DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetCustomAuthDataW*(P1: LPCWSTR, P2: LPCWSTR, P3: ptr BYTE, P4: ptr DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetCustomAuthDataA*(P1: LPCSTR, P2: LPCSTR, P3: ptr BYTE, P4: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetCustomAuthDataW*(P1: LPCWSTR, P2: LPCWSTR, P3: ptr BYTE, P4: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetEapUserIdentityW*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: HWND, P5: ptr LPRASEAPUSERIDENTITYW): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetEapUserIdentityA*(P1: LPCSTR, P2: LPCSTR, P3: DWORD, P4: HWND, P5: ptr LPRASEAPUSERIDENTITYA): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasFreeEapUserIdentityW*(P1: LPRASEAPUSERIDENTITYW): void {.winapi, dynlib: "rasapi32", importc.}
proc RasFreeEapUserIdentityA*(P1: LPRASEAPUSERIDENTITYA): void {.winapi, dynlib: "rasapi32", importc.}

when not defined(winansi):
  proc RasDial*(P1: LPRASDIALEXTENSIONS, P2: LPCWSTR, P3: LPRASDIALPARAMSW, P4: DWORD, P5: LPVOID, P6: LPHRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc: "RasDialW".}
  proc RasEnumConnections*(P1: LPRASCONNW, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEnumConnectionsW".}
  proc RasEnumEntries*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASENTRYNAMEW, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEnumEntriesW".}
  proc RasGetConnectStatus*(P1: HRASCONN, P2: LPRASCONNSTATUSW): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetConnectStatusW".}
  proc RasGetErrorString*(P1: UINT, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetErrorStringW".}
  proc RasHangUp*(P1: HRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc: "RasHangUpW".}
  proc RasGetProjectionInfo*(P1: HRASCONN, P2: RASPROJECTION, P3: LPVOID, P4: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetProjectionInfoW".}
  proc RasCreatePhonebookEntry*(P1: HWND, P2: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasCreatePhonebookEntryW".}
  proc RasEditPhonebookEntry*(P1: HWND, P2: LPCWSTR, P3: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEditPhonebookEntryW".}
  proc RasSetEntryDialParams*(P1: LPCWSTR, P2: LPRASDIALPARAMSW, P3: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetEntryDialParamsW".}
  proc RasGetEntryDialParams*(P1: LPCWSTR, P2: LPRASDIALPARAMSW, P3: LPBOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetEntryDialParamsW".}
  proc RasEnumDevices*(P1: LPRASDEVINFOW, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEnumDevicesW".}
  proc RasGetCountryInfo*(P1: LPRASCTRYINFOW, P2: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetCountryInfoW".}
  proc RasGetEntryProperties*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASENTRYW, P4: LPDWORD, P5: LPBYTE, P6: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetEntryPropertiesW".}
  proc RasSetEntryProperties*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASENTRYW, P4: DWORD, P5: LPBYTE, P6: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetEntryPropertiesW".}
  proc RasRenameEntry*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasRenameEntryW".}
  proc RasDeleteEntry*(P1: LPCWSTR, P2: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasDeleteEntryW".}
  proc RasValidateEntryName*(P1: LPCWSTR, P2: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasValidateEntryNameW".}

  type
    RASADFUNC* = RASADFUNCW

  proc RasGetSubEntryHandle*(P1: HRASCONN, P2: DWORD, P3: LPHRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetSubEntryHandleW".}
  proc RasConnectionNotification*(P1: HRASCONN, P2: HANDLE, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasConnectionNotificationW".}
  proc RasGetSubEntryProperties*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: LPRASSUBENTRYW, P5: LPDWORD, P6: LPBYTE, P7: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetSubEntryPropertiesW".}
  proc RasSetSubEntryProperties*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: LPRASSUBENTRYW, P5: DWORD, P6: LPBYTE, P7: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetSubEntryPropertiesW".}
  proc RasGetCredentials*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASCREDENTIALSW): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetCredentialsW".}
  proc RasSetCredentials*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASCREDENTIALSW, P4: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetCredentialsW".}
  proc RasGetAutodialAddress*(P1: LPCWSTR, P2: LPDWORD, P3: LPRASAUTODIALENTRYW, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetAutodialAddressW".}
  proc RasSetAutodialAddress*(P1: LPCWSTR, P2: DWORD, P3: LPRASAUTODIALENTRYW, P4: DWORD, P5: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetAutodialAddressW".}
  proc RasEnumAutodialAddresses*(P1: ptr LPWSTR, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEnumAutodialAddressesW".}
  proc RasGetAutodialEnable*(P1: DWORD, P2: LPBOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetAutodialEnableW".}
  proc RasSetAutodialEnable*(P1: DWORD, P2: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetAutodialEnableW".}
  proc RasGetAutodialParam*(P1: DWORD, P2: LPVOID, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetAutodialParamW".}
  proc RasSetAutodialParam*(P1: DWORD, P2: LPVOID, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetAutodialParamW".}
  proc RasGetEapUserData*(P1: HANDLE, P2: LPCWSTR, P3: LPCWSTR, P4: ptr BYTE, P5: ptr DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetEapUserDataW".}
  proc RasSetEapUserData*(P1: HANDLE, P2: LPCWSTR, P3: LPCWSTR, P4: ptr BYTE, P5: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetEapUserDataW".}
  proc RasGetCustomAuthData*(P1: LPCWSTR, P2: LPCWSTR, P3: ptr BYTE, P4: ptr DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetCustomAuthDataW".}
  proc RasSetCustomAuthData*(P1: LPCWSTR, P2: LPCWSTR, P3: ptr BYTE, P4: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetCustomAuthDataW".}
  proc RasGetEapUserIdentity*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: HWND, P5: ptr LPRASEAPUSERIDENTITYW): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetEapUserIdentityW".}
  proc RasFreeEapUserIdentity*(P1: LPRASEAPUSERIDENTITYW): void {.winapi, dynlib: "rasapi32", importc: "RasFreeEapUserIdentityW".}

else:
  proc RasDial*(P1: LPRASDIALEXTENSIONS, P2: LPCSTR, P3: LPRASDIALPARAMSA, P4: DWORD, P5: LPVOID, P6: LPHRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc: "RasDialA".}
  proc RasEnumConnections*(P1: LPRASCONNA, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEnumConnectionsA".}
  proc RasEnumEntries*(P1: LPCSTR, P2: LPCSTR, P3: LPRASENTRYNAMEA, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEnumEntriesA".}
  proc RasGetConnectStatus*(P1: HRASCONN, P2: LPRASCONNSTATUSA): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetConnectStatusA".}
  proc RasGetErrorString*(P1: UINT, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetErrorStringA".}
  proc RasHangUp*(P1: HRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc: "RasHangUpA".}
  proc RasGetProjectionInfo*(P1: HRASCONN, P2: RASPROJECTION, P3: LPVOID, P4: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetProjectionInfoA".}
  proc RasCreatePhonebookEntry*(P1: HWND, P2: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasCreatePhonebookEntryA".}
  proc RasEditPhonebookEntry*(P1: HWND, P2: LPCSTR, P3: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEditPhonebookEntryA".}
  proc RasSetEntryDialParams*(P1: LPCSTR, P2: LPRASDIALPARAMSA, P3: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetEntryDialParamsA".}
  proc RasGetEntryDialParams*(P1: LPCSTR, P2: LPRASDIALPARAMSA, P3: LPBOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetEntryDialParamsA".}
  proc RasEnumDevices*(P1: LPRASDEVINFOA, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEnumDevicesA".}
  proc RasGetCountryInfo*(P1: LPRASCTRYINFOA, P2: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetCountryInfoA".}
  proc RasGetEntryProperties*(P1: LPCSTR, P2: LPCSTR, P3: LPRASENTRYA, P4: LPDWORD, P5: LPBYTE, P6: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetEntryPropertiesA".}
  proc RasSetEntryProperties*(P1: LPCSTR, P2: LPCSTR, P3: LPRASENTRYA, P4: DWORD, P5: LPBYTE, P6: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetEntryPropertiesA".}
  proc RasRenameEntry*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasRenameEntryA".}
  proc RasDeleteEntry*(P1: LPCSTR, P2: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasDeleteEntryA".}
  proc RasValidateEntryName*(P1: LPCSTR, P2: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasValidateEntryNameA".}

  type
    RASADFUNC* = RASADFUNCA

  proc RasGetSubEntryHandle*(P1: HRASCONN, P2: DWORD, P3: LPHRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetSubEntryHandleA".}
  proc RasConnectionNotification*(P1: HRASCONN, P2: HANDLE, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasConnectionNotificationA".}
  proc RasGetSubEntryProperties*(P1: LPCSTR, P2: LPCSTR, P3: DWORD, P4: LPRASSUBENTRYA, P5: LPDWORD, P6: LPBYTE, P7: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetSubEntryPropertiesA".}
  proc RasSetSubEntryProperties*(P1: LPCSTR, P2: LPCSTR, P3: DWORD, P4: LPRASSUBENTRYA, P5: DWORD, P6: LPBYTE, P7: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetSubEntryPropertiesA".}
  proc RasGetCredentials*(P1: LPCSTR, P2: LPCSTR, P3: LPRASCREDENTIALSA): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetCredentialsA".}
  proc RasSetCredentials*(P1: LPCSTR, P2: LPCSTR, P3: LPRASCREDENTIALSA, P4: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetCredentialsA".}
  proc RasGetAutodialAddress*(P1: LPCSTR, P2: LPDWORD, P3: LPRASAUTODIALENTRYA, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetAutodialAddressA".}
  proc RasSetAutodialAddress*(P1: LPCSTR, P2: DWORD, P3: LPRASAUTODIALENTRYA, P4: DWORD, P5: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetAutodialAddressA".}
  proc RasEnumAutodialAddresses*(P1: ptr LPSTR, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEnumAutodialAddressesA".}
  proc RasGetAutodialEnable*(P1: DWORD, P2: LPBOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetAutodialEnableA".}
  proc RasSetAutodialEnable*(P1: DWORD, P2: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetAutodialEnableA".}
  proc RasGetAutodialParam*(P1: DWORD, P2: LPVOID, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetAutodialParamA".}
  proc RasSetAutodialParam*(P1: DWORD, P2: LPVOID, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetAutodialParamA".}
  proc RasGetEapUserData*(P1: HANDLE, P2: LPCSTR, P3: LPCSTR, P4: ptr BYTE, P5: ptr DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetEapUserDataA".}
  proc RasSetEapUserData*(P1: HANDLE, P2: LPCSTR, P3: LPCSTR, P4: ptr BYTE, P5: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetEapUserDataA".}
  proc RasGetCustomAuthData*(P1: LPCSTR, P2: LPCSTR, P3: ptr BYTE, P4: ptr DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetCustomAuthDataA".}
  proc RasSetCustomAuthData*(P1: LPCSTR, P2: LPCSTR, P3: ptr BYTE, P4: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetCustomAuthDataA".}
  proc RasGetEapUserIdentity*(P1: LPCSTR, P2: LPCSTR, P3: DWORD, P4: HWND, P5: ptr LPRASEAPUSERIDENTITYA): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetEapUserIdentityA".}
  proc RasFreeEapUserIdentity*(P1: LPRASEAPUSERIDENTITYA): void {.winapi, dynlib: "rasapi32", importc: "RasFreeEapUserIdentityA".}

# net/rasdlg.nim

const
  RASPBDEVENT_AddEntry* = 1
  RASPBDEVENT_EditEntry* = 2
  RASPBDEVENT_RemoveEntry* = 3
  RASPBDEVENT_DialEntry* = 4
  RASPBDEVENT_EditGlobals* = 5
  RASPBDEVENT_NoUser* = 6
  RASPBDEVENT_NoUserEdit* = 7
  RASPBDFLAG_PositionDlg* = 1
  RASPBDFLAG_ForceCloseOnDial* = 2
  RASPBDFLAG_NoUser* = 16
  RASEDFLAG_PositionDlg* = 1
  RASEDFLAG_NewEntry* = 2
  RASEDFLAG_CloneEntry* = 4
  RASDDFLAG_PositionDlg* = 1

type
  TRASENTRYDLGA* {.final, pure.} = object # renamed from RASENTRYDLGA
    dwSize*: DWORD
    hwndOwner*: HWND
    dwFlags*: DWORD
    xDlg*: LONG
    yDlg*: LONG
    szEntry*: array[RAS_MaxEntryName + 1, CHAR]
    dwError*: DWORD
    reserved*: ULONG_PTR
    reserved2*: ULONG_PTR
  LPRASENTRYDLGA* = ptr TRASENTRYDLGA
  TRASENTRYDLGW* {.final, pure.} = object # renamed from RASENTRYDLGW
    dwSize*: DWORD
    hwndOwner*: HWND
    dwFlags*: DWORD
    xDlg*: LONG
    yDlg*: LONG
    szEntry*: array[RAS_MaxEntryName + 1, WCHAR]
    dwError*: DWORD
    reserved*: ULONG_PTR
    reserved2*: ULONG_PTR
  LPRASENTRYDLGW* = ptr TRASENTRYDLGA
  TRASDIALDLG* {.final, pure.} = object # renamed from RASDIALDLG
    dwSize*: DWORD
    hwndOwner*: HWND
    dwFlags*: DWORD
    xDlg*: LONG
    yDlg*: LONG
    dwSubEntry*: DWORD
    dwError*: DWORD
    reserved*: ULONG_PTR
    reserved2*: ULONG_PTR
  LPRASDIALDLG* = ptr TRASDIALDLG
  RASPBDLGFUNCW* = proc (P1: DWORD, P2: DWORD, P3: LPWSTR, P4: LPVOID): VOID {.stdcall.}
  RASPBDLGFUNCA* = proc (P1: DWORD, P2: DWORD, P3: LPSTR, P4: LPVOID): VOID {.stdcall.}
  RASPBDLGA* {.final, pure.} = object
    dwSize*: DWORD
    hwndOwner*: HWND
    dwFlags*: DWORD
    xDlg*: LONG
    yDlg*: LONG
    dwCallbackId*: ULONG_PTR
    pCallback*: RASPBDLGFUNCA
    dwError*: DWORD
    reserved*: ULONG_PTR
    reserved2*: ULONG_PTR
  LPRASPBDLGA* = ptr RASPBDLGA
  RASPBDLGW* {.final, pure.} = object
    dwSize*: DWORD
    hwndOwner*: HWND
    dwFlags*: DWORD
    xDlg*: LONG
    yDlg*: LONG
    dwCallbackId*: ULONG_PTR
    pCallback*: RASPBDLGFUNCW
    dwError*: DWORD
    reserved*: ULONG_PTR
    reserved2*: ULONG_PTR
  LPRASPBDLGW* = ptr RASPBDLGW
  RASNOUSERA* {.final, pure.} = object
    dwSize*: DWORD
    dwFlags*: DWORD
    dwTimeoutMs*: DWORD
    szUserName*: array[UNLEN + 1, CHAR]
    szPassword*: array[PWLEN + 1, CHAR]
    szDomain*: array[DNLEN + 1, CHAR]
  LPRASNOUSERA* = ptr RASNOUSERA
  RASNOUSERW* {.final, pure.} = object
    dwSize*: DWORD
    dwFlags*: DWORD
    dwTimeoutMs*: DWORD
    szUserName*: array[UNLEN + 1, WCHAR]
    szPassword*: array[PWLEN + 1, WCHAR]
    szDomain*: array[DNLEN + 1, WCHAR]
  LPRASNOUSERW* = ptr RASNOUSERW

proc RasDialDlgA*(P1: LPSTR, P2: LPSTR, P3: LPSTR, P4: LPRASDIALDLG): BOOL {.winapi, dynlib: "rasdlg", importc.}
proc RasDialDlgW*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR, P4: LPRASDIALDLG): BOOL {.winapi, dynlib: "rasdlg", importc.}
proc RasEntryDlgA*(P1: LPSTR, P2: LPSTR, P3: LPRASENTRYDLGA): BOOL {.winapi, dynlib: "rasdlg", importc.}
proc RasEntryDlgW*(P1: LPWSTR, P2: LPWSTR, P3: LPRASENTRYDLGW): BOOL {.winapi, dynlib: "rasdlg", importc.}
proc RasPhonebookDlgA*(P1: LPSTR, P2: LPSTR, P3: LPRASPBDLGA): BOOL {.winapi, dynlib: "rasdlg", importc.}
proc RasPhonebookDlgW*(P1: LPWSTR, P2: LPWSTR, P3: LPRASPBDLGW): BOOL {.winapi, dynlib: "rasdlg", importc.}

when not defined(winansi):
  type
    TRASENTRYDLG* = TRASENTRYDLGW # renamed from RASENTRYDLG
    RASPBDLG* = RASPBDLGW
    RASNOUSER* = RASNOUSERW

  proc RasDialDlg*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR, P4: LPRASDIALDLG): BOOL {.winapi, dynlib: "rasdlg", importc: "RasDialDlgW".}
  proc RasEntryDlg*(P1: LPWSTR, P2: LPWSTR, P3: LPRASENTRYDLGW): BOOL {.winapi, dynlib: "rasdlg", importc: "RasEntryDlgW".}
  proc RasPhonebookDlg*(P1: LPWSTR, P2: LPWSTR, P3: LPRASPBDLGW): BOOL {.winapi, dynlib: "rasdlg", importc: "RasPhonebookDlgW".}

else:
  type
    TRASENTRYDLG* = TRASENTRYDLGA # renamed from RASENTRYDLG
    RASPBDLG* = RASPBDLGA
    RASNOUSER* = RASNOUSERA

  proc RasDialDlg*(P1: LPSTR, P2: LPSTR, P3: LPSTR, P4: LPRASDIALDLG): BOOL {.winapi, dynlib: "rasdlg", importc: "RasDialDlgA".}
  proc RasEntryDlg*(P1: LPSTR, P2: LPSTR, P3: LPRASENTRYDLGA): BOOL {.winapi, dynlib: "rasdlg", importc: "RasEntryDlgA".}
  proc RasPhonebookDlg*(P1: LPSTR, P2: LPSTR, P3: LPRASPBDLGA): BOOL {.winapi, dynlib: "rasdlg", importc: "RasPhonebookDlgA".}

type
  LPRASENTRYDLG* = ptr TRASENTRYDLG
  LPRASPBDLG* = ptr RASPBDLG
  LPRASNOUSER* = ptr RASNOUSER

# net/raserror.nim

const
  SUCCESS* = 0
  RASBASE* = 600
  PENDING* = RASBASE
  ERROR_INVALID_PORT_HANDLE* = RASBASE + 1
  ERROR_PORT_ALREADY_OPEN* = RASBASE + 2
  ERROR_BUFFER_TOO_SMALL* = RASBASE + 3
  ERROR_WRONG_INFO_SPECIFIED* = RASBASE + 4
  ERROR_CANNOT_SET_PORT_INFO* = RASBASE + 5
  ERROR_PORT_NOT_CONNECTED* = RASBASE + 6
  ERROR_EVENT_INVALID* = RASBASE + 7
  ERROR_DEVICE_DOES_NOT_EXIST* = RASBASE + 8
  ERROR_DEVICETYPE_DOES_NOT_EXIST* = RASBASE + 9
  ERROR_BUFFER_INVALID* = RASBASE + 10
  ERROR_ROUTE_NOT_AVAILABLE* = RASBASE + 11
  ERROR_ROUTE_NOT_ALLOCATED* = RASBASE + 12
  ERROR_INVALID_COMPRESSION_SPECIFIED* = RASBASE + 13
  ERROR_OUT_OF_BUFFERS* = RASBASE + 14
  ERROR_PORT_NOT_FOUND* = RASBASE + 15
  ERROR_ASYNC_REQUEST_PENDING* = RASBASE + 16
  ERROR_ALREADY_DISCONNECTING* = RASBASE + 17
  ERROR_PORT_NOT_OPEN* = RASBASE + 18
  ERROR_PORT_DISCONNECTED* = RASBASE + 19
  ERROR_NO_ENDPOINTS* = RASBASE + 20
  ERROR_CANNOT_OPEN_PHONEBOOK* = RASBASE + 21
  ERROR_CANNOT_LOAD_PHONEBOOK* = RASBASE + 22
  ERROR_CANNOT_FIND_PHONEBOOK_ENTRY* = RASBASE + 23
  ERROR_CANNOT_WRITE_PHONEBOOK* = RASBASE + 24
  ERROR_CORRUPT_PHONEBOOK* = RASBASE + 25
  ERROR_CANNOT_LOAD_STRING* = RASBASE + 26
  ERROR_KEY_NOT_FOUND* = RASBASE + 27
  ERROR_DISCONNECTION* = RASBASE + 28
  ERROR_REMOTE_DISCONNECTION* = RASBASE + 29
  ERROR_HARDWARE_FAILURE* = RASBASE + 30
  ERROR_USER_DISCONNECTION* = RASBASE + 31
  ERROR_INVALID_SIZE* = RASBASE + 32
  ERROR_PORT_NOT_AVAILABLE* = RASBASE + 33
  ERROR_CANNOT_PROJECT_CLIENT* = RASBASE + 34
  ERROR_UNKNOWN* = RASBASE + 35
  ERROR_WRONG_DEVICE_ATTACHED* = RASBASE + 36
  ERROR_BAD_STRING* = RASBASE + 37
  ERROR_REQUEST_TIMEOUT* = RASBASE + 38
  ERROR_CANNOT_GET_LANA* = RASBASE + 39
  ERROR_NETBIOS_ERROR* = RASBASE + 40
  ERROR_SERVER_OUT_OF_RESOURCES* = RASBASE + 41
  ERROR_NAME_EXISTS_ON_NET* = RASBASE + 42
  ERROR_SERVER_GENERAL_NET_FAILURE* = RASBASE + 43
  WARNING_MSG_ALIAS_NOT_ADDED* = RASBASE + 44
  ERROR_AUTH_INTERNAL* = RASBASE + 45
  ERROR_RESTRICTED_LOGON_HOURS* = RASBASE + 46
  ERROR_ACCT_DISABLED* = RASBASE + 47
  ERROR_PASSWD_EXPIRED* = RASBASE + 48
  ERROR_NO_DIALIN_PERMISSION* = RASBASE + 49
  ERROR_SERVER_NOT_RESPONDING* = RASBASE + 50
  ERROR_FROM_DEVICE* = RASBASE + 51
  ERROR_UNRECOGNIZED_RESPONSE* = RASBASE + 52
  ERROR_MACRO_NOT_FOUND* = RASBASE + 53
  ERROR_MACRO_NOT_DEFINED* = RASBASE + 54
  ERROR_MESSAGE_MACRO_NOT_FOUND* = RASBASE + 55
  ERROR_DEFAULTOFF_MACRO_NOT_FOUND* = RASBASE + 56
  ERROR_FILE_COULD_NOT_BE_OPENED* = RASBASE + 57
  ERROR_DEVICENAME_TOO_LONG* = RASBASE + 58
  ERROR_DEVICENAME_NOT_FOUND* = RASBASE + 59
  ERROR_NO_RESPONSES* = RASBASE + 60
  ERROR_NO_COMMAND_FOUND* = RASBASE + 61
  ERROR_WRONG_KEY_SPECIFIED* = RASBASE + 62
  ERROR_UNKNOWN_DEVICE_TYPE* = RASBASE + 63
  ERROR_ALLOCATING_MEMORY* = RASBASE + 64
  ERROR_PORT_NOT_CONFIGURED* = RASBASE + 65
  ERROR_DEVICE_NOT_READY* = RASBASE + 66
  ERROR_READING_INI_FILE* = RASBASE + 67
  ERROR_NO_CONNECTION* = RASBASE + 68
  ERROR_BAD_USAGE_IN_INI_FILE* = RASBASE + 69
  ERROR_READING_SECTIONNAME* = RASBASE + 70
  ERROR_READING_DEVICETYPE* = RASBASE + 71
  ERROR_READING_DEVICENAME* = RASBASE + 72
  ERROR_READING_USAGE* = RASBASE + 73
  ERROR_READING_MAXCONNECTBPS* = RASBASE + 74
  ERROR_READING_MAXCARRIERBPS* = RASBASE + 75
  ERROR_LINE_BUSY* = RASBASE + 76
  ERROR_VOICE_ANSWER* = RASBASE + 77
  ERROR_NO_ANSWER* = RASBASE + 78
  ERROR_NO_CARRIER* = RASBASE + 79
  ERROR_NO_DIALTONE* = RASBASE + 80
  ERROR_IN_COMMAND* = RASBASE + 81
  ERROR_WRITING_SECTIONNAME* = RASBASE + 82
  ERROR_WRITING_DEVICETYPE* = RASBASE + 83
  ERROR_WRITING_DEVICENAME* = RASBASE + 84
  ERROR_WRITING_MAXCONNECTBPS* = RASBASE + 85
  ERROR_WRITING_MAXCARRIERBPS* = RASBASE + 86
  ERROR_WRITING_USAGE* = RASBASE + 87
  ERROR_WRITING_DEFAULTOFF* = RASBASE + 88
  ERROR_READING_DEFAULTOFF* = RASBASE + 89
  ERROR_EMPTY_INI_FILE* = RASBASE + 90
  ERROR_AUTHENTICATION_FAILURE* = RASBASE + 91
  ERROR_PORT_OR_DEVICE* = RASBASE + 92
  ERROR_NOT_BINARY_MACRO* = RASBASE + 93
  ERROR_DCB_NOT_FOUND* = RASBASE + 94
  ERROR_STATE_MACHINES_NOT_STARTED* = RASBASE + 95
  ERROR_STATE_MACHINES_ALREADY_STARTED* = RASBASE + 96
  ERROR_PARTIAL_RESPONSE_LOOPING* = RASBASE + 97
  ERROR_UNKNOWN_RESPONSE_KEY* = RASBASE + 98
  ERROR_RECV_BUF_FULL* = RASBASE + 99
  ERROR_CMD_TOO_LONG* = RASBASE + 100
  ERROR_UNSUPPORTED_BPS* = RASBASE + 101
  ERROR_UNEXPECTED_RESPONSE* = RASBASE + 102
  ERROR_INTERACTIVE_MODE* = RASBASE + 103
  ERROR_BAD_CALLBACK_NUMBER* = RASBASE + 104
  ERROR_INVALID_AUTH_STATE* = RASBASE + 105
  ERROR_WRITING_INITBPS* = RASBASE + 106
  ERROR_X25_DIAGNOSTIC* = RASBASE + 107
  ERROR_ACCT_EXPIRED* = RASBASE + 108
  ERROR_CHANGING_PASSWORD* = RASBASE + 109
  ERROR_OVERRUN* = RASBASE + 110
  ERROR_RASMAN_CANNOT_INITIALIZE* = RASBASE + 111
  ERROR_BIPLEX_PORT_NOT_AVAILABLE* = RASBASE + 112
  ERROR_NO_ACTIVE_ISDN_LINES* = RASBASE + 113
  ERROR_NO_ISDN_CHANNELS_AVAILABLE* = RASBASE + 114
  ERROR_TOO_MANY_LINE_ERRORS* = RASBASE + 115
  ERROR_IP_CONFIGURATION* = RASBASE + 116
  ERROR_NO_IP_ADDRESSES* = RASBASE + 117
  ERROR_PPP_TIMEOUT* = RASBASE + 118
  ERROR_PPP_REMOTE_TERMINATED* = RASBASE + 119
  ERROR_PPP_NO_PROTOCOLS_CONFIGURED* = RASBASE + 120
  ERROR_PPP_NO_RESPONSE* = RASBASE + 121
  ERROR_PPP_INVALID_PACKET* = RASBASE + 122
  ERROR_PHONE_NUMBER_TOO_LONG* = RASBASE + 123
  ERROR_IPXCP_NO_DIALOUT_CONFIGURED* = RASBASE + 124
  ERROR_IPXCP_NO_DIALIN_CONFIGURED* = RASBASE + 125
  ERROR_IPXCP_DIALOUT_ALREADY_ACTIVE* = RASBASE + 126
  ERROR_ACCESSING_TCPCFGDLL* = RASBASE + 127
  ERROR_NO_IP_RAS_ADAPTER* = RASBASE + 128
  ERROR_SLIP_REQUIRES_IP* = RASBASE + 129
  ERROR_PROJECTION_NOT_COMPLETE* = RASBASE + 130
  ERROR_PROTOCOL_NOT_CONFIGURED* = RASBASE + 131
  ERROR_PPP_NOT_CONVERGING* = RASBASE + 132
  ERROR_PPP_CP_REJECTED* = RASBASE + 133
  ERROR_PPP_LCP_TERMINATED* = RASBASE + 134
  ERROR_PPP_REQUIRED_ADDRESS_REJECTED* = RASBASE + 135
  ERROR_PPP_NCP_TERMINATED* = RASBASE + 136
  ERROR_PPP_LOOPBACK_DETECTED* = RASBASE + 137
  ERROR_PPP_NO_ADDRESS_ASSIGNED* = RASBASE + 138
  ERROR_CANNOT_USE_LOGON_CREDENTIALS* = RASBASE + 139
  ERROR_TAPI_CONFIGURATION* = RASBASE + 140
  ERROR_NO_LOCAL_ENCRYPTION* = RASBASE + 141
  ERROR_NO_REMOTE_ENCRYPTION* = RASBASE + 142
  ERROR_REMOTE_REQUIRES_ENCRYPTION* = RASBASE + 143
  ERROR_IPXCP_NET_NUMBER_CONFLICT* = RASBASE + 144
  ERROR_INVALID_SMM* = RASBASE + 145
  ERROR_SMM_UNINITIALIZED* = RASBASE + 146
  ERROR_NO_MAC_FOR_PORT* = RASBASE + 147
  ERROR_SMM_TIMEOUT* = RASBASE + 148
  ERROR_BAD_PHONE_NUMBER* = RASBASE + 149
  ERROR_WRONG_MODULE* = RASBASE + 150
  ERROR_INVALID_CALLBACK_NUMBER* = RASBASE + 151
  ERROR_SCRIPT_SYNTAX* = RASBASE + 152
  ERROR_HANGUP_FAILED* = RASBASE + 153
  ERROR_BUNDLE_NOT_FOUND* = RASBASE + 154
  ERROR_CANNOT_DO_CUSTOMDIAL* = RASBASE + 155
  ERROR_DIAL_ALREADY_IN_PROGRESS* = RASBASE + 156
  ERROR_RASAUTO_CANNOT_INITIALIZE* = RASBASE + 157
  ERROR_CONNECTION_ALREADY_SHARED* = RASBASE + 158
  ERROR_SHARING_CHANGE_FAILED* = RASBASE + 159
  ERROR_SHARING_ROUTER_INSTALL* = RASBASE + 160
  ERROR_SHARE_CONNECTION_FAILED* = RASBASE + 161
  ERROR_SHARING_PRIVATE_INSTALL* = RASBASE + 162
  ERROR_CANNOT_SHARE_CONNECTION* = RASBASE + 163
  ERROR_NO_SMART_CARD_READER* = RASBASE + 164
  ERROR_SHARING_ADDRESS_EXISTS* = RASBASE + 165
  ERROR_NO_CERTIFICATE* = RASBASE + 166
  ERROR_SHARING_MULTIPLE_ADDRESSES* = RASBASE + 167
  ERROR_FAILED_TO_ENCRYPT* = RASBASE + 168
  ERROR_BAD_ADDRESS_SPECIFIED* = RASBASE + 169
  ERROR_CONNECTION_REJECT* = RASBASE + 170
  ERROR_CONGESTION* = RASBASE + 171
  ERROR_INCOMPATIBLE* = RASBASE + 172
  ERROR_NUMBERCHANGED* = RASBASE + 173
  ERROR_TEMPFAILURE* = RASBASE + 174
  ERROR_BLOCKED* = RASBASE + 175
  ERROR_DONOTDISTURB* = RASBASE + 176
  ERROR_OUTOFORDER* = RASBASE + 177
  ERROR_UNABLE_TO_AUTHENTICATE_SERVER* = RASBASE + 178
  ERROR_SMART_CARD_REQUIRED* = RASBASE + 179
  ERROR_INVALID_FUNCTION_FOR_ENTRY* = RASBASE + 180
  ERROR_CERT_FOR_ENCRYPTION_NOT_FOUND* = RASBASE + 181
  ERROR_SHARING_RRAS_CONFLICT* = RASBASE + 182
  ERROR_SHARING_NO_PRIVATE_LAN* = RASBASE + 183
  ERROR_NO_DIFF_USER_AT_LOGON* = RASBASE + 184
  ERROR_NO_REG_CERT_AT_LOGON* = RASBASE + 185
  ERROR_OAKLEY_NO_CERT* = RASBASE + 186
  ERROR_OAKLEY_AUTH_FAIL* = RASBASE + 187
  ERROR_OAKLEY_ATTRIB_FAIL* = RASBASE + 188
  ERROR_OAKLEY_GENERAL_PROCESSING* = RASBASE + 189
  ERROR_OAKLEY_NO_PEER_CERT* = RASBASE + 190
  ERROR_OAKLEY_NO_POLICY* = RASBASE + 191
  ERROR_OAKLEY_TIMED_OUT* = RASBASE + 192
  ERROR_OAKLEY_ERROR* = RASBASE + 193
  ERROR_UNKNOWN_FRAMED_PROTOCOL* = RASBASE + 194
  ERROR_WRONG_TUNNEL_TYPE* = RASBASE + 195
  ERROR_UNKNOWN_SERVICE_TYPE* = RASBASE + 196
  ERROR_CONNECTING_DEVICE_NOT_FOUND* = RASBASE + 197
  ERROR_NO_EAPTLS_CERTIFICATE* = RASBASE + 198
  RASBASEEND* = ERROR_NO_EAPTLS_CERTIFICATE

# net/rassapi.nim
const
  # RAS_PARAMS_FORMAT* = enum
  ParamNumber* = 0
  ParamString* = 1

const
  RASSAPI_MAX_PHONENUMBER_SIZE* = 128
  RASSAPI_MAX_MEDIA_NAME* = 16
  RASSAPI_MAX_PORT_NAME* = 16
  RASSAPI_MAX_DEVICE_NAME* = 128
  RASSAPI_MAX_DEVICETYPE_NAME* = 16
  RASSAPI_MAX_PARAM_KEY_SIZE* = 32
  RASPRIV_NoCallback* = 0x01
  RASPRIV_AdminSetCallback* = 0x02
  RASPRIV_CallerSetCallback* = 0x04
  RASPRIV_DialinPrivilege* = 0x08
  RASPRIV_CallbackType* = 0x07
  RAS_MODEM_OPERATIONAL* = 1
  RAS_MODEM_NOT_RESPONDING* = 2
  RAS_MODEM_HARDWARE_FAILURE* = 3
  RAS_MODEM_INCORRECT_RESPONSE* = 4
  RAS_MODEM_UNKNOWN* = 5
  RAS_PORT_NON_OPERATIONAL* = 1
  RAS_PORT_DISCONNECTED* = 2
  RAS_PORT_CALLING_BACK* = 3
  RAS_PORT_LISTENING* = 4
  RAS_PORT_AUTHENTICATING* = 5
  RAS_PORT_AUTHENTICATED* = 6
  RAS_PORT_INITIALIZING* = 7
  MEDIA_UNKNOWN* = 0
  MEDIA_SERIAL* = 1
  MEDIA_RAS10_SERIAL* = 2
  MEDIA_X25* = 3
  MEDIA_ISDN* = 4
  USER_AUTHENTICATED* = 0x0001
  MESSENGER_PRESENT* = 0x0002
  PPP_CLIENT* = 0x0004
  GATEWAY_ACTIVE* = 0x0008
  REMOTE_LISTEN* = 0x0010
  PORT_MULTILINKED* = 0x0020
  RAS_IPADDRESSLEN* = 15
  RAS_IPXADDRESSLEN* = 22
  RAS_ATADDRESSLEN* = 32
  RASDOWNLEVEL* = 10
  RASADMIN_35* = 35
  RASADMIN_CURRENT* = 40

type
  IPADDR* = ULONG
  RAS_PARAMS_FORMAT* = int32
  RAS_PARAMS_VALUE_String* {.final, pure.} = object
    Length*: DWORD
    Data*: PCHAR
  RAS_PARAMS_VALUE* {.final, union, pure.} = object
    Number*: DWORD
  RAS_PARAMETERS* {.final, pure.} = object
    P_Key*: array[RASSAPI_MAX_PARAM_KEY_SIZE, CHAR]
    P_Type*: RAS_PARAMS_FORMAT
    P_Attributes*: BYTE
    P_Value*: RAS_PARAMS_VALUE
  RAS_USER_0* {.final, pure.} = object
    bfPrivilege*: BYTE
    szPhoneNumber*: array[RASSAPI_MAX_PHONENUMBER_SIZE + 1, WCHAR]
  PRAS_USER_0* = ptr RAS_USER_0
  RAS_PORT_0* {.final, pure.} = object
    wszPortName*: array[RASSAPI_MAX_PORT_NAME, WCHAR]
    wszDeviceType*: array[RASSAPI_MAX_DEVICETYPE_NAME, WCHAR]
    wszDeviceName*: array[RASSAPI_MAX_DEVICE_NAME, WCHAR]
    wszMediaName*: array[RASSAPI_MAX_MEDIA_NAME, WCHAR]
    reserved*: DWORD
    Flags*: DWORD
    wszUserName*: array[UNLEN + 1, WCHAR]
    wszComputer*: array[NETBIOS_NAME_LEN, WCHAR]
    dwStartSessionTime*: DWORD
    wszLogonDomain*: array[DNLEN + 1, WCHAR]
    fAdvancedServer*: BOOL
  PRAS_PORT_0* = ptr RAS_PORT_0
  RAS_PPP_NBFCP_RESULT* {.final, pure.} = object
    dwError*: DWORD
    dwNetBiosError*: DWORD
    szName*: array[NETBIOS_NAME_LEN + 1, CHAR]
    wszWksta*: array[NETBIOS_NAME_LEN + 1, WCHAR]
  RAS_PPP_IPCP_RESULT* {.final, pure.} = object
    dwError*: DWORD
    wszAddress*: array[RAS_IPADDRESSLEN + 1, WCHAR]
  RAS_PPP_IPXCP_RESULT* {.final, pure.} = object
    dwError*: DWORD
    wszAddress*: array[RAS_IPXADDRESSLEN + 1, WCHAR]
  RAS_PPP_ATCP_RESULT* {.final, pure.} = object
    dwError*: DWORD
    wszAddress*: array[RAS_ATADDRESSLEN + 1, WCHAR]
  RAS_PPP_PROJECTION_RESULT* {.final, pure.} = object
    nbf*: RAS_PPP_NBFCP_RESULT
    ip*: RAS_PPP_IPCP_RESULT
    ipx*: RAS_PPP_IPXCP_RESULT
    at*: RAS_PPP_ATCP_RESULT
  RAS_PORT_1* {.final, pure.} = object
    rasport0*: RAS_PORT_0
    LineCondition*: DWORD
    HardwareCondition*: DWORD
    LineSpeed*: DWORD
    NumStatistics*: WORD
    NumMediaParms*: WORD
    SizeMediaParms*: DWORD
    ProjResult*: RAS_PPP_PROJECTION_RESULT
  PRAS_PORT_1* = ptr RAS_PORT_1
  RAS_PORT_STATISTICS* {.final, pure.} = object
    dwBytesXmited*: DWORD
    dwBytesRcved*: DWORD
    dwFramesXmited*: DWORD
    dwFramesRcved*: DWORD
    dwCrcErr*: DWORD
    dwTimeoutErr*: DWORD
    dwAlignmentErr*: DWORD
    dwHardwareOverrunErr*: DWORD
    dwFramingErr*: DWORD
    dwBufferOverrunErr*: DWORD
    dwBytesXmitedUncompressed*: DWORD
    dwBytesRcvedUncompressed*: DWORD
    dwBytesXmitedCompressed*: DWORD
    dwBytesRcvedCompressed*: DWORD
    dwPortBytesXmited*: DWORD
    dwPortBytesRcved*: DWORD
    dwPortFramesXmited*: DWORD
    dwPortFramesRcved*: DWORD
    dwPortCrcErr*: DWORD
    dwPortTimeoutErr*: DWORD
    dwPortAlignmentErr*: DWORD
    dwPortHardwareOverrunErr*: DWORD
    dwPortFramingErr*: DWORD
    dwPortBufferOverrunErr*: DWORD
    dwPortBytesXmitedUncompressed*: DWORD
    dwPortBytesRcvedUncompressed*: DWORD
    dwPortBytesXmitedCompressed*: DWORD
    dwPortBytesRcvedCompressed*: DWORD
  PRAS_PORT_STATISTICS* = ptr RAS_PORT_STATISTICS
  RAS_SERVER_0* {.final, pure.} = object
    TotalPorts*: WORD
    PortsInUse*: WORD
    RasVersion*: DWORD
  PRAS_SERVER_0* = ptr RAS_SERVER_0

proc RasAdminServerGetInfo*(P1: ptr WCHAR, P2: PRAS_SERVER_0): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminGetUserAccountServer*(P1: ptr WCHAR, P2: ptr WCHAR, P3: LPWSTR): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminUserGetInfo*(P1: ptr WCHAR, P2: ptr WCHAR, P3: PRAS_USER_0): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminUserSetInfo*(P1: ptr WCHAR, P2: ptr WCHAR, P3: PRAS_USER_0): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminPortEnum*(P1: ptr WCHAR, P2: ptr PRAS_PORT_0, P3: ptr WORD): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminPortGetInfo*(P1: ptr WCHAR, P2: ptr WCHAR, P3: ptr RAS_PORT_1, P4: ptr RAS_PORT_STATISTICS, P5: ptr ptr RAS_PARAMETERS): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminPortClearStatistics*(P1: ptr WCHAR, P2: ptr WCHAR): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminPortDisconnect*(P1: ptr WCHAR, P2: ptr WCHAR): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminFreeBuffer*(P1: PVOID): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminGetErrorString*(P1: UINT, P2: ptr WCHAR, P3: DWORD): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminAcceptNewConnection*(P1: ptr RAS_PORT_1, P2: ptr RAS_PORT_STATISTICS, P3: ptr RAS_PARAMETERS): BOOL {.winapi, dynlib: "rassapi", importc.}
proc RasAdminConnectionHangupNotification*(P1: ptr RAS_PORT_1, P2: ptr RAS_PORT_STATISTICS, P3: ptr RAS_PARAMETERS): VOID {.winapi, dynlib: "rassapi", importc.}
proc RasAdminGetIpAddressForUser*(P1: ptr WCHAR, P2: ptr WCHAR, P3: ptr IPADDR, P4: ptr BOOL): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminReleaseIpAddress*(P1: ptr WCHAR, P2: ptr WCHAR, P3: ptr IPADDR): VOID {.winapi, dynlib: "rassapi", importc.}
proc RasAdminGetUserParms*(P1: ptr WCHAR, P2: PRAS_USER_0): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminSetUserParms*(P1: ptr WCHAR, P2: DWORD, P3: PRAS_USER_0): DWORD {.winapi, dynlib: "rassapi", importc.}

# net/winber.nim

type
  BerElement* {.final, pure.} = object
  ber_int_t* = int32
  ber_slen_t* = int32
  ber_uint_t* = uint32
  ber_len_t* = uint32
  ber_tag_t* = uint32
  BerValue* {.final, pure.} = object
    bv_len*: ber_len_t
    bv_val*: cstring
  LDAP_BERVAL* = BerValue
  BERVAL* = BerValue
  PLDAP_BERVAL* = ptr BerValue
  PBERVAL* = ptr BerValue

const
  LBER_ERROR* = 0xFFFFFFFF'u32
  LBER_DEFAULT* = 0xFFFFFFFF'u32
  LBER_USE_DER* = 1

proc ber_init*(P1: ptr BerValue): ptr BerElement {.winapi, dynlib: "wldap32", importc.}
proc ber_printf*(P1: ptr BerElement, P2: cstring): int32 {.winapi, dynlib: "wldap32", varargs, importc.}
proc ber_flatten*(P1: ptr BerElement, P2: ptr ptr BerValue): int32 {.winapi, dynlib: "wldap32", importc.}
proc ber_scanf*(P1: ptr BerElement, P2: cstring): ber_tag_t {.winapi, dynlib: "wldap32", varargs, importc.}
proc ber_peek_tag*(P1: ptr BerElement, P2: ptr ber_len_t): ber_tag_t {.winapi, dynlib: "wldap32", importc.}
proc ber_skip_tag*(P1: ptr BerElement, P2: ptr ber_len_t): ber_tag_t {.winapi, dynlib: "wldap32", importc.}
proc ber_first_element*(P1: ptr BerElement, P2: ptr ber_len_t, P3: ptr cstring): ber_tag_t {.winapi, dynlib: "wldap32", importc.}
proc ber_next_element*(P1: ptr BerElement, P2: ptr ber_len_t, P3: cstring): ber_tag_t {.winapi, dynlib: "wldap32", importc.}
proc ber_bvfree*(P1: ptr BerValue): void {.winapi, dynlib: "wldap32", importc.}
proc ber_bvecfree*(P1: ptr ptr BerValue): void {.winapi, dynlib: "wldap32", importc.}
proc ber_free*(P1: ptr BerElement, P2: int32): void {.winapi, dynlib: "wldap32", importc.}
proc ber_bvdup*(P1: ptr BerValue): ptr BerValue {.winapi, dynlib: "wldap32", importc.}
proc ber_alloc_t*(P1: int32): ptr BerElement {.winapi, dynlib: "wldap32", importc.}

# net/winldap.nim

const
  LDAP_VERSION1* = 1
  LDAP_VERSION2* = 2
  LDAP_VERSION3* = 3
  LDAP_VERSION* = LDAP_VERSION2
  LDAP_VERSION_MIN* = LDAP_VERSION2
  LDAP_VERSION_MAX* = LDAP_VERSION3
  LDAP_VENDOR_NAME* = "Microsoft Corporation."
  LDAP_API_VERSION* = 2004
  LDAP_VENDOR_VERSION* = 510
  LDAP_API_INFO_VERSION* = 1
  LDAP_FEATURE_INFO_VERSION* = 1
  LDAP_SUCCESS* = 0x00
  LDAP_OPT_SUCCESS* = LDAP_SUCCESS
  LDAP_OPERATIONS_ERROR* = LDAP_SUCCESS + 1
  LDAP_PROTOCOL_ERROR* = LDAP_SUCCESS + 2
  LDAP_TIMELIMIT_EXCEEDED* = LDAP_SUCCESS + 3
  LDAP_SIZELIMIT_EXCEEDED* = LDAP_SUCCESS + 4
  LDAP_COMPARE_FALSE* = LDAP_SUCCESS + 5
  LDAP_COMPARE_TRUE* = LDAP_SUCCESS + 6
  LDAP_STRONG_AUTH_NOT_SUPPORTED* = LDAP_SUCCESS + 7
  LDAP_AUTH_METHOD_NOT_SUPPORTED* = LDAP_STRONG_AUTH_NOT_SUPPORTED
  LDAP_STRONG_AUTH_REQUIRED* = LDAP_STRONG_AUTH_NOT_SUPPORTED + 1
  LDAP_REFERRAL_V2* = LDAP_STRONG_AUTH_NOT_SUPPORTED + 2
  LDAP_PARTIAL_RESULTS* = LDAP_REFERRAL_V2
  LDAP_REFERRAL* = LDAP_REFERRAL_V2 + 1
  LDAP_ADMIN_LIMIT_EXCEEDED* = LDAP_REFERRAL_V2 + 2
  LDAP_UNAVAILABLE_CRIT_EXTENSION* = LDAP_REFERRAL_V2 + 3
  LDAP_CONFIDENTIALITY_REQUIRED* = LDAP_REFERRAL_V2 + 4
  LDAP_SASL_BIND_IN_PROGRESS* = LDAP_REFERRAL_V2 + 5
  LDAP_NO_SUCH_ATTRIBUTE* = 0x10
  LDAP_UNDEFINED_TYPE* = 0x11
  LDAP_INAPPROPRIATE_MATCHING* = 0x12
  LDAP_CONSTRAINT_VIOLATION* = 0x13
  LDAP_TYPE_OR_VALUE_EXISTS* = 0x14
  LDAP_ATTRIBUTE_OR_VALUE_EXISTS* = LDAP_TYPE_OR_VALUE_EXISTS
  LDAP_INVALID_SYNTAX* = LDAP_TYPE_OR_VALUE_EXISTS + 1
  LDAP_NO_SUCH_OBJECT* = 0x20
  LDAP_ALIAS_PROBLEM* = 0x21
  LDAP_INVALID_DN_SYNTAX* = 0x22
  LDAP_IS_LEAF* = 0x23
  LDAP_ALIAS_DEREF_PROBLEM* = 0x24
  LDAP_INAPPROPRIATE_AUTH* = 0x30
  LDAP_INVALID_CREDENTIALS* = 0x31
  LDAP_INSUFFICIENT_ACCESS* = 0x32
  LDAP_INSUFFICIENT_RIGHTS* = LDAP_INSUFFICIENT_ACCESS
  LDAP_BUSY* = LDAP_INSUFFICIENT_ACCESS + 1
  LDAP_UNAVAILABLE* = LDAP_INSUFFICIENT_ACCESS + 2
  LDAP_UNWILLING_TO_PERFORM* = LDAP_INSUFFICIENT_ACCESS + 3
  LDAP_LOOP_DETECT* = LDAP_INSUFFICIENT_ACCESS + 4
  LDAP_NAMING_VIOLATION* = 0x40
  LDAP_OBJECT_CLASS_VIOLATION* = 0x41
  LDAP_NOT_ALLOWED_ON_NONLEAF* = 0x42
  LDAP_NOT_ALLOWED_ON_RDN* = 0x43
  LDAP_ALREADY_EXISTS* = 0x44
  LDAP_NO_OBJECT_CLASS_MODS* = 0x45
  LDAP_RESULTS_TOO_LARGE* = 0x46
  LDAP_AFFECTS_MULTIPLE_DSAS* = 0x47
  LDAP_OTHER* = 0x50
  LDAP_SERVER_DOWN* = 0x51
  LDAP_LOCAL_ERROR* = 0x52
  LDAP_ENCODING_ERROR* = 0x53
  LDAP_DECODING_ERROR* = 0x54
  LDAP_TIMEOUT* = 0x55
  LDAP_AUTH_UNKNOWN* = 0x56
  LDAP_FILTER_ERROR* = 0x57
  LDAP_USER_CANCELLED* = 0x58
  LDAP_PARAM_ERROR* = 0x59
  LDAP_NO_MEMORY* = 0x5A
  LDAP_CONNECT_ERROR* = 0x5B
  LDAP_NOT_SUPPORTED* = 0x5C
  LDAP_CONTROL_NOT_FOUND* = 0x5D
  LDAP_NO_RESULTS_RETURNED* = 0x5E
  LDAP_MORE_RESULTS_TO_RETURN* = 0x5F
  LDAP_CLIENT_LOOP* = 0x60
  LDAP_REFERRAL_LIMIT_EXCEEDED* = 0x61
  LDAP_PORT* = 389
  LDAP_SSL_PORT* = 636
  LDAP_GC_PORT* = 3268
  LDAP_SSL_GC_PORT* = 3269
  LDAP_OPT_OFF* = nil
  LDAP_OPT_ON* = cast[pointer](1)
  LDAP_OPT_API_INFO* = 0x00
  LDAP_OPT_DESC* = 0x1
  LDAP_OPT_DEREF* = 0x2
  LDAP_OPT_SIZELIMIT* = 0x3
  LDAP_OPT_TIMELIMIT* = 0x4
  LDAP_OPT_THREAD_FN_PTRS* = 0x5
  LDAP_OPT_REBIND_FN* = 0x6
  LDAP_OPT_REBIND_ARG* = 0x7
  LDAP_OPT_REFERRALS* = 0x8
  LDAP_OPT_RESTART* = 0x9
  LDAP_OPT_SSL* = 0xA
  LDAP_OPT_TLS* = LDAP_OPT_SSL
  LDAP_OPT_IO_FN_PTRS* = LDAP_OPT_SSL + 1
  LDAP_OPT_CACHE_FN_PTRS* = 0x0d
  LDAP_OPT_CACHE_STRATEGY* = 0xE
  LDAP_OPT_CACHE_ENABLE* = 0xF
  LDAP_OPT_REFERRAL_HOP_LIMIT* = 0x10
  LDAP_OPT_PROTOCOL_VERSION* = 0x11
  LDAP_OPT_VERSION* = LDAP_OPT_PROTOCOL_VERSION
  LDAP_OPT_SERVER_CONTROLS* = LDAP_OPT_PROTOCOL_VERSION + 1
  LDAP_OPT_CLIENT_CONTROLS* = LDAP_OPT_PROTOCOL_VERSION + 2
  LDAP_OPT_API_FEATURE_INFO* = 0x15
  LDAP_OPT_HOST_NAME* = 0x30
  LDAP_OPT_ERROR_NUMBER* = 0x31
  LDAP_OPT_ERROR_STRING* = 0x32
  LDAP_OPT_SERVER_ERROR* = 0x33
  LDAP_OPT_SERVER_EXT_ERROR* = 0x34
  LDAP_OPT_PING_KEEP_ALIVE* = 0x36
  LDAP_OPT_PING_WAIT_TIME* = 0x37
  LDAP_OPT_PING_LIMIT* = 0x38
  LDAP_OPT_DNSDOMAIN_NAME* = 0x3b
  LDAP_OPT_GETDSNAME_FLAGS* = 0x3d
  LDAP_OPT_HOST_REACHABLE* = 0x3E
  LDAP_OPT_PROMPT_CREDENTIALS* = 0x3F
  LDAP_OPT_TCP_KEEPALIVE* = 0x40
  LDAP_OPT_REFERRAL_CALLBACK* = 0x70
  LDAP_OPT_CLIENT_CERTIFICATE* = 0x80
  LDAP_OPT_SERVER_CERTIFICATE* = 0x81
  LDAP_OPT_AUTO_RECONNECT* = 0x91
  LDAP_OPT_SSPI_FLAGS* = 0x92
  LDAP_OPT_SSL_INFO* = 0x93
  LDAP_OPT_TLS_INFO* = LDAP_OPT_SSL_INFO
  LDAP_OPT_REF_DEREF_CONN_PER_MSG* = LDAP_OPT_SSL_INFO + 1
  LDAP_OPT_SIGN* = LDAP_OPT_SSL_INFO + 2
  LDAP_OPT_ENCRYPT* = LDAP_OPT_SSL_INFO + 3
  LDAP_OPT_SASL_METHOD* = LDAP_OPT_SSL_INFO + 4
  LDAP_OPT_AREC_EXCLUSIVE* = LDAP_OPT_SSL_INFO + 5
  LDAP_OPT_SECURITY_CONTEXT* = LDAP_OPT_SSL_INFO + 6
  LDAP_OPT_ROOTDSE_CACHE* = LDAP_OPT_SSL_INFO + 7
  LDAP_DEREF_NEVER* = 0
  LDAP_DEREF_SEARCHING* = 1
  LDAP_DEREF_FINDING* = 2
  LDAP_DEREF_ALWAYS* = 3
  LDAP_NO_LIMIT* = 0
  LDAP_CONTROL_REFERRALS* = "1.2.840.113556.1.4.616"
  LDAP_CHASE_SUBORDINATE_REFERRALS* = 0x20
  LDAP_CHASE_EXTERNAL_REFERRALS* = 0x40
  LDAP_SCOPE_DEFAULT* = -1
  LDAP_SCOPE_BASE* = 0
  LDAP_SCOPE_ONELEVEL* = 1
  LDAP_SCOPE_SUBTREE* = 2
  LDAP_MOD_ADD* = 0
  LDAP_MOD_DELETE* = 1
  LDAP_MOD_REPLACE* = 2
  LDAP_MOD_BVALUES* = 0x80
  LDAP_RES_BIND* = 0x61
  LDAP_RES_SEARCH_ENTRY* = 0x64
  LDAP_RES_SEARCH_RESULT* = 0x65
  LDAP_RES_MODIFY* = 0x67
  LDAP_RES_ADD* = 0x69
  LDAP_RES_DELETE* = 0x6b
  LDAP_RES_MODRDN* = 0x6d
  LDAP_RES_COMPARE* = 0x6f
  LDAP_RES_SEARCH_REFERENCE* = 0x73
  LDAP_RES_EXTENDED* = 0x78
  LDAP_RES_ANY* = -1
  LDAP_MSG_ONE* = 0
  LDAP_MSG_ALL* = 1
  LDAP_MSG_RECEIVED* = 2
  LDAP_SERVER_SORT_OID* = "1.2.840.113556.1.4.473"
  LDAP_SERVER_RESP_SORT_OID* = "1.2.840.113556.1.4.474"
  LDAP_PAGED_RESULT_OID_STRING* = "1.2.840.113556.1.4.319"
  LDAP_CONTROL_VLVREQUEST* = "2.16.840.1.113730.3.4.9"
  LDAP_CONTROL_VLVRESPONSE* = "2.16.840.1.113730.3.4.10"
  LDAP_START_TLS_OID* = "1.3.6.1.4.1.1466.20037"
  LDAP_TTL_EXTENDED_OP_OID* = "1.3.6.1.4.1.1466.101.119.1"
  LDAP_AUTH_NONE* = 0x00
  LDAP_AUTH_SIMPLE* = 0x80
  LDAP_AUTH_SASL* = 0x83
  LDAP_AUTH_OTHERKIND* = 0x86
  LDAP_AUTH_EXTERNAL* = LDAP_AUTH_OTHERKIND or 0x0020
  LDAP_AUTH_SICILY* = LDAP_AUTH_OTHERKIND or 0x0200
  LDAP_AUTH_NEGOTIATE* = LDAP_AUTH_OTHERKIND or 0x0400
  LDAP_AUTH_MSN* = LDAP_AUTH_OTHERKIND or 0x0800
  LDAP_AUTH_NTLM* = LDAP_AUTH_OTHERKIND or 0x1000
  LDAP_AUTH_DIGEST* = LDAP_AUTH_OTHERKIND or 0x4000
  LDAP_AUTH_DPA* = LDAP_AUTH_OTHERKIND or 0x2000
  LDAP_AUTH_SSPI* = LDAP_AUTH_NEGOTIATE
  LDAP_FILTER_AND* = 0xa0
  LDAP_FILTER_OR* = 0xA1
  LDAP_FILTER_NOT* = 0xA2
  LDAP_FILTER_EQUALITY* = 0xA3
  LDAP_FILTER_SUBSTRINGS* = 0xA4
  LDAP_FILTER_GE* = 0xA5
  LDAP_FILTER_LE* = 0xA6
  LDAP_FILTER_APPROX* = 0xa8
  LDAP_FILTER_EXTENSIBLE* = 0xA9
  LDAP_FILTER_PRESENT* = 0x87
  LDAP_SUBSTRING_INITIAL* = 0x80
  LDAP_SUBSTRING_ANY* = 0x81
  LDAP_SUBSTRING_FINAL* = 0x82

type
  LDAP* {.final, pure.} = object
    Reserved*: array[76, char]
    ld_host*: PCHAR
    ld_version*: ULONG
    ld_lberoptions*: UCHAR
    ld_deref*: int32
    ld_timelimit*: int32
    ld_sizelimit*: int32
    ld_errno*: int32
    ld_matched*: PCHAR
    ld_error*: PCHAR
  PLDAP* = ptr LDAP
  LDAPMessage* {.final, pure.} = object
    lm_msgid*: ULONG
    lm_msgtype*: ULONG
    lm_ber*: ptr BerElement
    lm_chain*: ptr LDAPMessage
    lm_next*: ptr LDAPMessage
    lm_time*: ULONG
  PLDAPMessage* = ptr LDAPMessage
  LDAP_TIMEVAL* {.final, pure.} = object
    tv_sec*: LONG
    tv_usec*: LONG
  PLDAP_TIMEVAL* = ptr LDAP_TIMEVAL
  LDAPAPIInfoA* {.final, pure.} = object
    ldapai_info_version*: int32
    ldapai_api_version*: int32
    ldapai_protocol_version*: int32
    ldapai_extensions*: ptr cstring
    ldapai_vendor_name*: cstring
    ldapai_vendor_version*: int32
  PLDAPAPIInfoA* = ptr LDAPAPIInfoA
  LDAPAPIInfoW* {.final, pure.} = object
    ldapai_info_version*: int32
    ldapai_api_version*: int32
    ldapai_protocol_version*: int32
    ldapai_extensions*: ptr PWCHAR
    ldapai_vendor_name*: PWCHAR
    ldapai_vendor_version*: int32
  PLDAPAPIInfoW* = ptr LDAPAPIInfoW
  LDAPAPIFeatureInfoA* {.final, pure.} = object
    ldapaif_info_version*: int32
    ldapaif_name*: cstring
    ldapaif_version*: int32
  PLDAPAPIFeatureInfoA* = ptr LDAPAPIFeatureInfoA
  LDAPAPIFeatureInfoW* {.final, pure.} = object
    ldapaif_info_version*: int32
    ldapaif_name*: PWCHAR
    ldapaif_version*: int32
  PLDAPAPIFeatureInfoW* = ptr LDAPAPIFeatureInfoW
  LDAPControlA* {.final, pure.} = object
    ldctl_oid*: PCHAR
    ldctl_value*: BerValue
    ldctl_iscritical*: BOOLEAN
  PLDAPControlA* = ptr LDAPControlA
  LDAPControlW* {.final, pure.} = object
    ldctl_oid*: PWCHAR
    ldctl_value*: BerValue
    ldctl_iscritical*: BOOLEAN
  PLDAPControlW* = ptr LDAPControlW
  mod_vals_u_tA* {.final, union, pure.} = object
    modv_strvals*: ptr PCHAR
    modv_bvals*: ptr ptr BerValue
  mod_vals_u_tW* {.final, union, pure.} = object
    modv_strvals*: ptr PWCHAR
    modv_bvals*: ptr ptr BerValue
  LDAPModA_UNION1* {.final, union, pure.} = object
    mod_vals*: mod_vals_u_tA
    mod_values*: ptr PCHAR
    mod_bvalues*: ptr ptr BerValue
  LDAPModA* {.final, pure.} = object
    mod_op*: ULONG
    mod_type*: PCHAR
    u1*: LDAPModA_UNION1
  PLDAPModA* = ptr LDAPModA
  LDAPModW_UNION1* {.final, union, pure.} = object
    mod_vals*: mod_vals_u_tW
    mod_values*: ptr PWCHAR
    mod_bvalues*: ptr ptr BerValue
  LDAPModW* {.final, pure.} = object
    mod_op*: ULONG
    mod_type*: PWCHAR
    u1*: LDAPModW_UNION1
  PLDAPModW* = ptr LDAPModW
  LDAPSearch* {.final, pure.} = object
  PLDAPSearch* = ptr LDAPSearch
  LDAPSortKeyA* {.final, pure.} = object
    sk_attrtype*: PCHAR
    sk_matchruleoid*: PCHAR
    sk_reverseorder*: BOOLEAN
  PLDAPSortKeyA* = ptr LDAPSortKeyA
  LDAPSortKeyW* {.final, pure.} = object
    sk_attrtype*: PWCHAR
    sk_matchruleoid*: PWCHAR
    sk_reverseorder*: BOOLEAN
  PLDAPSortKeyW* = ptr LDAPSortKeyW
  QUERYFORCONNECTION* = proc (P1: PLDAP, P2: PLDAP, P3: PWCHAR, P4: PCHAR, P5: ULONG, P6: PVOID, P7: PVOID, P8: ptr PLDAP): ULONG {.cdecl.}
  NOTIFYOFNEWCONNECTION* = proc (P1: PLDAP, P2: PLDAP, P3: PWCHAR, P4: PCHAR, P5: PLDAP, P6: ULONG, P7: PVOID, P8: PVOID, P9: ULONG): BOOLEAN {.cdecl.}
  DEREFERENCECONNECTION* = proc (P1: PLDAP, P2: PLDAP): ULONG {.cdecl.}
  QUERYCLIENTCERT* = proc (P1: PLDAP, P2: PSecPkgContext_IssuerListInfoEx, P3: ptr PCCERT_CONTEXT): BOOLEAN {.cdecl.}
  LDAP_REFERRAL_CALLBACK* {.final, pure.} = object
    SizeOfCallbacks*: ULONG
    QueryForConnection*: ptr QUERYFORCONNECTION
    NotifyRoutine*: ptr NOTIFYOFNEWCONNECTION
    DereferenceRoutine*: ptr DEREFERENCECONNECTION
  PLDAP_REFERRAL_CALLBACK* = ptr LDAP_REFERRAL_CALLBACK
  LDAPVLVInfo* {.final, pure.} = object
    ldvlv_version*: int32
    ldvlv_before_count*: uint32
    ldvlv_after_count*: uint32
    ldvlv_offset*: uint32
    ldvlv_count*: uint32
    ldvlv_attrvalue*: ptr BerValue
    ldvlv_context*: ptr BerValue
    ldvlv_extradata*: pointer

proc ldap_perror*(handle: ptr LDAP, message: cstring): int32 =
  echo message, ": ", handle.ld_error

proc ldap_initA*(P1: PCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc.}
proc ldap_initW*(P1: PWCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc.}
proc ldap_openA*(P1: PCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc.}
proc ldap_openW*(P1: PWCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc.}
proc cldap_openA*(P1: PCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc.}
proc cldap_openW*(P1: PWCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc.}
proc ldap_connect*(P1: ptr LDAP, P2: ptr LDAP_TIMEVAL): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_sslinitA*(P1: PCHAR, P2: ULONG, P3: int32): PLDAP {.winapi, dynlib: "wldap32", importc.}
proc ldap_sslinitW*(P1: PWCHAR, P2: ULONG, P3: int32): PLDAP {.winapi, dynlib: "wldap32", importc.}
proc ldap_start_tls_sA*(P1: ptr LDAP, P2: ptr PLDAPControlA, P3: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_start_tls_sW*(P1: ptr LDAP, P2: ptr PLDAPControlW, P3: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_stop_tls_s*(P1: ptr LDAP): BOOLEAN {.winapi, dynlib: "wldap32", importc.}
proc ldap_get_optionA*(P1: ptr LDAP, P2: int32, P3: pointer): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_get_optionW*(P1: ptr LDAP, P2: int32, P3: pointer): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_set_optionA*(P1: ptr LDAP, P2: int32, P3: pointer): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_set_optionW*(P1: ptr LDAP, P2: int32, P3: pointer): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_control_freeA*(P1: ptr LDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_control_freeW*(P1: ptr LDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_controls_freeA*(P1: ptr ptr LDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_controls_freeW*(P1: ptr ptr LDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_free_controlsA*(P1: ptr ptr LDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_free_controlsW*(P1: ptr ptr LDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_sasl_bindA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: ptr BERVAL, P5: ptr PLDAPControlA, P6: ptr PLDAPControlA, P7: ptr int32): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_sasl_bindW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: ptr BERVAL, P5: ptr PLDAPControlW, P6: ptr PLDAPControlW, P7: ptr int32): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_sasl_bind_sA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: ptr BERVAL, P5: ptr PLDAPControlA, P6: ptr PLDAPControlA, P7: ptr PBERVAL): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_sasl_bind_sW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: ptr BERVAL, P5: ptr PLDAPControlW, P6: ptr PLDAPControlW, P7: ptr PBERVAL): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_simple_bindA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_simple_bindW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_simple_bind_sA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_simple_bind_sW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_unbind*(P1: ptr LDAP): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_unbind_s*(P1: ptr LDAP): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_extA*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr PLDAPControlW, P8: ptr PLDAPControlW, P9: ULONG, P10: ULONG, P11: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_extW*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr PLDAPControlW, P8: ptr PLDAPControlW, P9: ULONG, P10: ULONG, P11: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_ext_sA*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr PLDAPControlA, P8: ptr PLDAPControlA, P9: ptr LDAP_TIMEVAL, P10: ULONG, P11: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_ext_sW*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr PLDAPControlW, P8: ptr PLDAPControlW, P9: ptr LDAP_TIMEVAL, P10: ULONG, P11: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_searchA*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_searchW*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_sA*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_sW*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_stA*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr LDAP_TIMEVAL, P8: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_stW*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr LDAP_TIMEVAL, P8: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_compare_extA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: ptr BerValue, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_compare_extW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: ptr BerValue, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_compare_ext_sA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: ptr BerValue, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_compare_ext_sW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: ptr BerValue, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_compareA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_compareW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_compare_sA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_compare_sW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modify_extA*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modify_extW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modify_ext_sA*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modify_ext_sW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modifyA*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modifyW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modify_sA*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modify_sW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_rename_extA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: INT, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_rename_extW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: INT, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_rename_ext_sA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: INT, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_rename_ext_sW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: INT, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_add_extA*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_add_extW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_add_ext_sA*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_add_ext_sW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_addA*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_addW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_add_sA*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_add_sW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_delete_extA*(P1: ptr LDAP, P2: PCHAR, P3: ptr PLDAPControlA, P4: ptr PLDAPControlA, P5: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_delete_extW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr PLDAPControlW, P4: ptr PLDAPControlW, P5: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_delete_ext_sA*(P1: ptr LDAP, P2: PCHAR, P3: ptr PLDAPControlA, P4: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_delete_ext_sW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr PLDAPControlW, P4: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_deleteA*(P1: ptr LDAP, P2: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_deleteW*(P1: ptr LDAP, P2: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_delete_sA*(P1: ptr LDAP, P2: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_delete_sW*(P1: ptr LDAP, P2: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_extended_operationA*(P1: ptr LDAP, P2: PCHAR, P3: ptr BerValue, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_extended_operationW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr BerValue, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_extended_operation_sA*(P1: ptr LDAP, P2: PCHAR, P3: ptr BerValue, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA, P6: ptr PCHAR, P7: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_extended_operation_sW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr BerValue, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW, P6: ptr PWCHAR, P7: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_close_extended_op*(P1: ptr LDAP, P2: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_abandon*(P1: ptr LDAP, P2: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_result*(P1: ptr LDAP, P2: ULONG, P3: ULONG, P4: ptr LDAP_TIMEVAL, P5: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_msgfree*(P1: ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_resultA*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ULONG, P4: ptr PCHAR, P5: ptr PCHAR, P6: ptr ptr PCHAR, P7: ptr ptr PLDAPControlA, P8: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_resultW*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ULONG, P4: ptr PWCHAR, P5: ptr PWCHAR, P6: ptr ptr PWCHAR, P7: ptr ptr PLDAPControlW, P8: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_extended_resultA*(P1: LDAP, P2: ptr LDAPMessage, P3: ptr PCHAR, P4: ptr ptr BerValue, P5: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_extended_resultW*(P1: LDAP, P2: ptr LDAPMessage, P3: ptr PWCHAR, P4: ptr ptr BerValue, P5: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_err2stringA*(P1: ULONG): PCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_err2stringW*(P1: ULONG): PWCHAR {.winapi, dynlib: "wldap32", importc.}
proc LdapGetLastError*(): ULONG {.winapi, dynlib: "wldap32", importc.}
proc LdapMapErrorToWin32*(P1: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_result2error*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_first_entry*(P1: ptr LDAP, P2: ptr LDAPMessage): PLDAPMessage {.winapi, dynlib: "wldap32", importc.}
proc ldap_next_entry*(P1: ptr LDAP, P2: ptr LDAPMessage): PLDAPMessage {.winapi, dynlib: "wldap32", importc.}
proc ldap_first_reference*(P1: ptr LDAP, P2: ptr LDAPMessage): PLDAPMessage {.winapi, dynlib: "wldap32", importc.}
proc ldap_next_reference*(P1: ptr LDAP, P2: ptr LDAPMessage): PLDAPMessage {.winapi, dynlib: "wldap32", importc.}
proc ldap_count_entries*(P1: ptr LDAP, P2: ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_count_references*(P1: ptr LDAP, P2: ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_first_attributeA*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ptr BerElement): PCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_first_attributeW*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ptr BerElement): PWCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_next_attributeA*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr BerElement): PCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_next_attributeW*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr BerElement): PWCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_memfreeA*(P1: PCHAR): VOID {.winapi, dynlib: "wldap32", importc.}
proc ldap_memfreeW*(P1: PWCHAR): VOID {.winapi, dynlib: "wldap32", importc.}
proc ldap_get_valuesA*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: PCHAR): ptr PCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_get_valuesW*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: PWCHAR): ptr PWCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_count_valuesA*(P1: ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_count_valuesW*(P1: ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_count_values_len*(P1: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_value_freeA*(P1: ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_value_freeW*(P1: ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_value_free_len*(P1: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_get_dnA*(P1: ptr LDAP, P2: ptr LDAPMessage): PCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_get_dnW*(P1: ptr LDAP, P2: ptr LDAPMessage): PWCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_explode_dnA*(P1: PCHAR, P2: ULONG): PCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_explode_dnW*(P1: PWCHAR, P2: ULONG): PWCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_dn2ufnA*(P1: PCHAR): PCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_dn2ufnW*(P1: PWCHAR): PWCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_ufn2dnA*(P1: PCHAR, P2: ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_ufn2dnW*(P1: PWCHAR, P2: ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_referenceA*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_referenceW*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_check_filterA*(P1: ptr LDAP, P2: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_check_filterW*(P1: ptr LDAP, P2: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_create_page_controlA*(P1: PLDAP, P2: ULONG, P3: ptr BerValue, P4: UCHAR, P5: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_create_page_controlW*(P1: PLDAP, P2: ULONG, P3: ptr BerValue, P4: UCHAR, P5: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_create_sort_controlA*(P1: PLDAP, P2: ptr PLDAPSortKeyA, P3: UCHAR, P4: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_create_sort_controlW*(P1: PLDAP, P2: ptr PLDAPSortKeyW, P3: UCHAR, P4: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_create_vlv_controlA*(P1: ptr LDAP, P2: ptr LDAPVLVInfo, P3: UCHAR, P4: ptr ptr LDAPControlA): INT {.winapi, dynlib: "wldap32", importc.}
proc ldap_create_vlv_controlW*(P1: ptr LDAP, P2: ptr LDAPVLVInfo, P3: UCHAR, P4: ptr ptr LDAPControlW): INT {.winapi, dynlib: "wldap32", importc.}
proc ldap_encode_sort_controlA*(P1: PLDAP, P2: ptr PLDAPSortKeyA, P3: PLDAPControlA, P4: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_encode_sort_controlW*(P1: PLDAP, P2: ptr PLDAPSortKeyW, P3: PLDAPControlW, P4: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_escape_filter_elementA*(P1: PCHAR, P2: ULONG, P3: PCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_escape_filter_elementW*(P1: PWCHAR, P2: ULONG, P3: PWCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_get_next_page*(P1: PLDAP, P2: PLDAPSearch, P3: ULONG, P4: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_get_next_page_s*(P1: PLDAP, P2: PLDAPSearch, P3: ptr LDAP_TIMEVAL, P4: ULONG, P5: ptr ULONG, P6: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_get_paged_count*(P1: PLDAP, P2: PLDAPSearch, P3: ptr ULONG, P4: PLDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_page_controlA*(P1: PLDAP, P2: ptr PLDAPControlA, P3: ptr ULONG, P4: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_page_controlW*(P1: PLDAP, P2: ptr PLDAPControlW, P3: ptr ULONG, P4: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_sort_controlA*(P1: PLDAP, P2: ptr PLDAPControlA, P3: ptr ULONG, P4: ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_sort_controlW*(P1: PLDAP, P2: ptr PLDAPControlW, P3: ptr ULONG, P4: ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_vlv_controlA*(P1: ptr LDAP, P2: ptr ptr LDAPControlA, P3: ptr uint32, P4: ptr uint32, P5: ptr ptr BerValue, P6: ptr int32): INT {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_vlv_controlW*(P1: ptr LDAP, P2: ptr ptr LDAPControlW, P3: ptr uint32, P4: ptr uint32, P5: ptr ptr BerValue, P6: ptr int32): INT {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_init_pageA*(P1: PLDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr PLDAPControlA, P8: ptr PLDAPControlA, P9: ULONG, P10: ULONG, P11: ptr PLDAPSortKeyA): PLDAPSearch {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_init_pageW*(P1: PLDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr PLDAPControlW, P8: ptr PLDAPControlW, P9: ULONG, P10: ULONG, P11: ptr PLDAPSortKeyW): PLDAPSearch {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_abandon_page*(P1: PLDAP, P2: PLDAPSearch): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_conn_from_msg*(P1: ptr LDAP, P2: ptr LDAPMessage): LDAP {.winapi, dynlib: "wldap32", importc.}
proc LdapUnicodeToUTF8*(P1: LPCWSTR, P2: int32, P3: LPSTR, P4: int32): INT {.winapi, dynlib: "wldap32", importc.}
proc LdapUTF8ToUnicode*(P1: LPCSTR, P2: int32, P3: LPWSTR, P4: int32): INT {.winapi, dynlib: "wldap32", importc.}
proc ldap_bindA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_bindW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_bind_sA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_bind_sW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modrdnA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modrdnW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modrdn_sA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modrdn_sW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modrdn2A*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: INT): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modrdn2W*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: INT): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modrdn2_sA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: INT): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modrdn2_sW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: INT): ULONG {.winapi, dynlib: "wldap32", importc.}

when not defined(winansi):
  type
    LDAPControl* = LDAPControlW
    PLDAPControl* = PLDAPControlW
    LDAPMod* = LDAPModW
    PLDAPMod* = LDAPModW
    LDAPSortKey* = LDAPSortKeyW
    PLDAPSortKey* = PLDAPSortKeyW
    LDAPAPIInfo* = LDAPAPIInfoW
    PLDAPAPIInfo* = PLDAPAPIInfoW
    LDAPAPIFeatureInfo* = LDAPAPIFeatureInfoW
    PLDAPAPIFeatureInfo* = PLDAPAPIFeatureInfoW

  proc cldap_open*(P1: PWCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc: "cldap_openW".}
  proc ldap_open*(P1: PWCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc: "ldap_openW".}
  proc ldap_simple_bind*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_simple_bindW".}
  proc ldap_simple_bind_s*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_simple_bind_sW".}
  proc ldap_sasl_bind*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: ptr BERVAL, P5: ptr PLDAPControlW, P6: ptr PLDAPControlW, P7: ptr int32): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_sasl_bindW".}
  proc ldap_sasl_bind_s*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: ptr BERVAL, P5: ptr PLDAPControlW, P6: ptr PLDAPControlW, P7: ptr PBERVAL): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_sasl_bind_sW".}
  proc ldap_init*(P1: PWCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc: "ldap_initW".}
  proc ldap_sslinit*(P1: PWCHAR, P2: ULONG, P3: int32): PLDAP {.winapi, dynlib: "wldap32", importc: "ldap_sslinitW".}
  proc ldap_get_option*(P1: ptr LDAP, P2: int32, P3: pointer): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_get_optionW".}
  proc ldap_set_option*(P1: ptr LDAP, P2: int32, P3: pointer): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_set_optionW".}
  proc ldap_start_tls_s*(P1: ptr LDAP, P2: ptr PLDAPControlW, P3: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_start_tls_sW".}
  proc ldap_add*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_addW".}
  proc ldap_add_ext*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_add_extW".}
  proc ldap_add_s*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_add_sW".}
  proc ldap_add_ext_s*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_add_ext_sW".}
  proc ldap_compare*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_compareW".}
  proc ldap_compare_ext*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: ptr BerValue, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_compare_extW".}
  proc ldap_compare_s*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_compare_sW".}
  proc ldap_compare_ext_s*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: ptr BerValue, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_compare_ext_sW".}
  proc ldap_delete*(P1: ptr LDAP, P2: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_deleteW".}
  proc ldap_delete_ext*(P1: ptr LDAP, P2: PWCHAR, P3: ptr PLDAPControlW, P4: ptr PLDAPControlW, P5: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_delete_extW".}
  proc ldap_delete_s*(P1: ptr LDAP, P2: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_delete_sW".}
  proc ldap_delete_ext_s*(P1: ptr LDAP, P2: PWCHAR, P3: ptr PLDAPControlW, P4: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_delete_ext_sW".}
  proc ldap_extended_operation_s*(P1: ptr LDAP, P2: PWCHAR, P3: ptr BerValue, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW, P6: ptr PWCHAR, P7: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_extended_operation_sW".}
  proc ldap_extended_operation*(P1: ptr LDAP, P2: PWCHAR, P3: ptr BerValue, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_extended_operationW".}
  proc ldap_modify*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modifyW".}
  proc ldap_modify_ext*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modify_extW".}
  proc ldap_modify_s*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modify_sW".}
  proc ldap_modify_ext_s*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modify_ext_sW".}
  proc ldap_check_filter*(P1: ptr LDAP, P2: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_check_filterW".}
  proc ldap_count_values*(P1: ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_count_valuesW".}
  proc ldap_create_page_control*(P1: PLDAP, P2: ULONG, P3: ptr BerValue, P4: UCHAR, P5: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_create_page_controlW".}
  proc ldap_create_sort_control*(P1: PLDAP, P2: ptr PLDAPSortKeyW, P3: UCHAR, P4: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_create_sort_controlW".}
  proc ldap_create_vlv_control*(P1: ptr LDAP, P2: ptr LDAPVLVInfo, P3: UCHAR, P4: ptr ptr LDAPControlW): INT {.winapi, dynlib: "wldap32", importc: "ldap_create_vlv_controlW".}
  proc ldap_encode_sort_control*(P1: PLDAP, P2: ptr PLDAPSortKeyW, P3: PLDAPControlW, P4: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_encode_sort_controlW".}
  proc ldap_escape_filter_element*(P1: PWCHAR, P2: ULONG, P3: PWCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_escape_filter_elementW".}
  proc ldap_first_attribute*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ptr BerElement): PWCHAR {.winapi, dynlib: "wldap32", importc: "ldap_first_attributeW".}
  proc ldap_next_attribute*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr BerElement): PWCHAR {.winapi, dynlib: "wldap32", importc: "ldap_next_attributeW".}
  proc ldap_get_values*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: PWCHAR): ptr PWCHAR {.winapi, dynlib: "wldap32", importc: "ldap_get_valuesW".}
  proc ldap_parse_extended_result*(P1: LDAP, P2: ptr LDAPMessage, P3: ptr PWCHAR, P4: ptr ptr BerValue, P5: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_extended_resultW".}
  proc ldap_parse_page_control*(P1: PLDAP, P2: ptr PLDAPControlW, P3: ptr ULONG, P4: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_page_controlW".}
  proc ldap_parse_reference*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_referenceW".}
  proc ldap_parse_result*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ULONG, P4: ptr PWCHAR, P5: ptr PWCHAR, P6: ptr ptr PWCHAR, P7: ptr ptr PLDAPControlW, P8: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_resultW".}
  proc ldap_parse_sort_control*(P1: PLDAP, P2: ptr PLDAPControlW, P3: ptr ULONG, P4: ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_sort_controlW".}
  proc ldap_parse_vlv_control*(P1: ptr LDAP, P2: ptr ptr LDAPControlW, P3: ptr uint32, P4: ptr uint32, P5: ptr ptr BerValue, P6: ptr int32): INT {.winapi, dynlib: "wldap32", importc: "ldap_parse_vlv_controlW".}
  proc ldap_search*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_searchW".}
  proc ldap_search_s*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_search_sW".}
  proc ldap_search_st*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr LDAP_TIMEVAL, P8: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_search_stW".}
  proc ldap_search_ext*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr PLDAPControlW, P8: ptr PLDAPControlW, P9: ULONG, P10: ULONG, P11: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_search_extW".}
  proc ldap_search_ext_s*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr PLDAPControlW, P8: ptr PLDAPControlW, P9: ptr LDAP_TIMEVAL, P10: ULONG, P11: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_search_ext_sW".}
  proc ldap_search_init_page*(P1: PLDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr PLDAPControlW, P8: ptr PLDAPControlW, P9: ULONG, P10: ULONG, P11: ptr PLDAPSortKeyW): PLDAPSearch {.winapi, dynlib: "wldap32", importc: "ldap_search_init_pageW".}
  proc ldap_err2string*(P1: ULONG): PWCHAR {.winapi, dynlib: "wldap32", importc: "ldap_err2stringW".}
  proc ldap_control_free*(P1: ptr LDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_control_freeW".}
  proc ldap_controls_free*(P1: ptr ptr LDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_controls_freeW".}
  proc ldap_free_controls*(P1: ptr ptr LDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_free_controlsW".}
  proc ldap_memfree*(P1: PWCHAR): VOID {.winapi, dynlib: "wldap32", importc: "ldap_memfreeW".}
  proc ldap_value_free*(P1: ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_value_freeW".}
  proc ldap_dn2ufn*(P1: PWCHAR): PWCHAR {.winapi, dynlib: "wldap32", importc: "ldap_dn2ufnW".}
  proc ldap_ufn2dn*(P1: PWCHAR, P2: ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_ufn2dnW".}
  proc ldap_explode_dn*(P1: PWCHAR, P2: ULONG): PWCHAR {.winapi, dynlib: "wldap32", importc: "ldap_explode_dnW".}
  proc ldap_get_dn*(P1: ptr LDAP, P2: ptr LDAPMessage): PWCHAR {.winapi, dynlib: "wldap32", importc: "ldap_get_dnW".}
  proc ldap_rename*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: INT, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_rename_extW".}
  proc ldap_rename_s*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: INT, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_rename_ext_sW".}
  proc ldap_rename_ext*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: INT, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_rename_extW".}
  proc ldap_rename_ext_s*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: INT, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_rename_ext_sW".}
  proc ldap_bind*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_bindW".}
  proc ldap_bind_s*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_bind_sW".}
  proc ldap_modrdn*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modrdnW".}
  proc ldap_modrdn_s*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modrdn_sW".}
  proc ldap_modrdn2*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: INT): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modrdn2W".}
  proc ldap_modrdn2_s*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: INT): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modrdn2_sW".}

else:
  type
    LDAPControl* = LDAPControlA
    PLDAPControl* = PLDAPControlA
    LDAPMod* = LDAPModA
    PLDAPMod* = LDAPModA
    LDAPSortKey* = LDAPSortKeyA
    PLDAPSortKey* = PLDAPSortKeyA
    LDAPAPIInfo* = LDAPAPIInfoA
    PLDAPAPIInfo* = PLDAPAPIInfoA
    LDAPAPIFeatureInfo* = LDAPAPIFeatureInfoA
    PLDAPAPIFeatureInfo* = PLDAPAPIFeatureInfoA

  proc cldap_open*(P1: PCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc: "cldap_openA".}
  proc ldap_open*(P1: PCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc: "ldap_openA".}
  proc ldap_simple_bind*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_simple_bindA".}
  proc ldap_simple_bind_s*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_simple_bind_sA".}
  proc ldap_sasl_bind*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: ptr BERVAL, P5: ptr PLDAPControlA, P6: ptr PLDAPControlA, P7: ptr int32): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_sasl_bindA".}
  proc ldap_sasl_bind_s*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: ptr BERVAL, P5: ptr PLDAPControlA, P6: ptr PLDAPControlA, P7: ptr PBERVAL): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_sasl_bind_sA".}
  proc ldap_init*(P1: PCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc: "ldap_initA".}
  proc ldap_sslinit*(P1: PCHAR, P2: ULONG, P3: int32): PLDAP {.winapi, dynlib: "wldap32", importc: "ldap_sslinitA".}
  proc ldap_get_option*(P1: ptr LDAP, P2: int32, P3: pointer): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_get_optionA".}
  proc ldap_set_option*(P1: ptr LDAP, P2: int32, P3: pointer): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_set_optionA".}
  proc ldap_start_tls_s*(P1: ptr LDAP, P2: ptr PLDAPControlA, P3: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_start_tls_sA".}
  proc ldap_add*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_addA".}
  proc ldap_add_ext*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_add_extA".}
  proc ldap_add_s*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_add_sA".}
  proc ldap_add_ext_s*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_add_ext_sA".}
  proc ldap_compare*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_compareA".}
  proc ldap_compare_ext*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: ptr BerValue, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_compare_extA".}
  proc ldap_compare_s*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_compare_sA".}
  proc ldap_compare_ext_s*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: ptr BerValue, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_compare_ext_sA".}
  proc ldap_delete*(P1: ptr LDAP, P2: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_deleteA".}
  proc ldap_delete_ext*(P1: ptr LDAP, P2: PCHAR, P3: ptr PLDAPControlA, P4: ptr PLDAPControlA, P5: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_delete_extA".}
  proc ldap_delete_s*(P1: ptr LDAP, P2: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_delete_sA".}
  proc ldap_delete_ext_s*(P1: ptr LDAP, P2: PCHAR, P3: ptr PLDAPControlA, P4: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_delete_ext_sA".}
  proc ldap_extended_operation_s*(P1: ptr LDAP, P2: PCHAR, P3: ptr BerValue, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA, P6: ptr PCHAR, P7: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_extended_operation_sA".}
  proc ldap_extended_operation*(P1: ptr LDAP, P2: PCHAR, P3: ptr BerValue, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_extended_operationA".}
  proc ldap_modify*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modifyA".}
  proc ldap_modify_ext*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modify_extA".}
  proc ldap_modify_s*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modify_sA".}
  proc ldap_modify_ext_s*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modify_ext_sA".}
  proc ldap_check_filter*(P1: ptr LDAP, P2: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_check_filterA".}
  proc ldap_count_values*(P1: ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_count_valuesA".}
  proc ldap_create_page_control*(P1: PLDAP, P2: ULONG, P3: ptr BerValue, P4: UCHAR, P5: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_create_page_controlA".}
  proc ldap_create_sort_control*(P1: PLDAP, P2: ptr PLDAPSortKeyA, P3: UCHAR, P4: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_create_sort_controlA".}
  proc ldap_create_vlv_control*(P1: ptr LDAP, P2: ptr LDAPVLVInfo, P3: UCHAR, P4: ptr ptr LDAPControlA): INT {.winapi, dynlib: "wldap32", importc: "ldap_create_vlv_controlA".}
  proc ldap_encode_sort_control*(P1: PLDAP, P2: ptr PLDAPSortKeyA, P3: PLDAPControlA, P4: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_encode_sort_controlA".}
  proc ldap_escape_filter_element*(P1: PCHAR, P2: ULONG, P3: PCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_escape_filter_elementA".}
  proc ldap_first_attribute*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ptr BerElement): PCHAR {.winapi, dynlib: "wldap32", importc: "ldap_first_attributeA".}
  proc ldap_next_attribute*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr BerElement): PCHAR {.winapi, dynlib: "wldap32", importc: "ldap_next_attributeA".}
  proc ldap_get_values*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: PCHAR): ptr PCHAR {.winapi, dynlib: "wldap32", importc: "ldap_get_valuesA".}
  proc ldap_parse_extended_result*(P1: LDAP, P2: ptr LDAPMessage, P3: ptr PCHAR, P4: ptr ptr BerValue, P5: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_extended_resultA".}
  proc ldap_parse_page_control*(P1: PLDAP, P2: ptr PLDAPControlA, P3: ptr ULONG, P4: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_page_controlA".}
  proc ldap_parse_reference*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_referenceA".}
  proc ldap_parse_result*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ULONG, P4: ptr PCHAR, P5: ptr PCHAR, P6: ptr ptr PCHAR, P7: ptr ptr PLDAPControlA, P8: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_resultA".}
  proc ldap_parse_sort_control*(P1: PLDAP, P2: ptr PLDAPControlA, P3: ptr ULONG, P4: ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_sort_controlA".}
  proc ldap_parse_vlv_control*(P1: ptr LDAP, P2: ptr ptr LDAPControlA, P3: ptr uint32, P4: ptr uint32, P5: ptr ptr BerValue, P6: ptr int32): INT {.winapi, dynlib: "wldap32", importc: "ldap_parse_vlv_controlA".}
  proc ldap_search*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_searchA".}
  proc ldap_search_s*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_search_sA".}
  proc ldap_search_st*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr LDAP_TIMEVAL, P8: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_search_stA".}
  proc ldap_search_ext*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr PLDAPControlW, P8: ptr PLDAPControlW, P9: ULONG, P10: ULONG, P11: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_search_extA".}
  proc ldap_search_ext_s*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr PLDAPControlA, P8: ptr PLDAPControlA, P9: ptr LDAP_TIMEVAL, P10: ULONG, P11: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_search_ext_sA".}
  proc ldap_search_init_page*(P1: PLDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr PLDAPControlA, P8: ptr PLDAPControlA, P9: ULONG, P10: ULONG, P11: ptr PLDAPSortKeyA): PLDAPSearch {.winapi, dynlib: "wldap32", importc: "ldap_search_init_pageA".}
  proc ldap_err2string*(P1: ULONG): PCHAR {.winapi, dynlib: "wldap32", importc: "ldap_err2stringA".}
  proc ldap_control_free*(P1: ptr LDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_control_freeA".}
  proc ldap_controls_free*(P1: ptr ptr LDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_controls_freeA".}
  proc ldap_free_controls*(P1: ptr ptr LDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_free_controlsA".}
  proc ldap_memfree*(P1: PCHAR): VOID {.winapi, dynlib: "wldap32", importc: "ldap_memfreeA".}
  proc ldap_value_free*(P1: ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_value_freeA".}
  proc ldap_dn2ufn*(P1: PCHAR): PCHAR {.winapi, dynlib: "wldap32", importc: "ldap_dn2ufnA".}
  proc ldap_ufn2dn*(P1: PCHAR, P2: ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_ufn2dnA".}
  proc ldap_explode_dn*(P1: PCHAR, P2: ULONG): PCHAR {.winapi, dynlib: "wldap32", importc: "ldap_explode_dnA".}
  proc ldap_get_dn*(P1: ptr LDAP, P2: ptr LDAPMessage): PCHAR {.winapi, dynlib: "wldap32", importc: "ldap_get_dnA".}
  proc ldap_rename*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: INT, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_rename_extA".}
  proc ldap_rename_s*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: INT, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_rename_ext_sA".}
  proc ldap_rename_ext*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: INT, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_rename_extA".}
  proc ldap_rename_ext_s*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: INT, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_rename_ext_sA".}
  proc ldap_bind*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_bindA".}
  proc ldap_bind_s*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_bind_sA".}
  proc ldap_modrdn*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modrdnA".}
  proc ldap_modrdn_s*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modrdn_sA".}
  proc ldap_modrdn2*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: INT): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modrdn2A".}
  proc ldap_modrdn2_s*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: INT): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modrdn2_sA".}

proc `mod_vals=`*(self: var LDAPModA, x: mod_vals_u_tA) = self.u1.mod_vals = x
proc mod_vals*(self: LDAPModA): mod_vals_u_tA = self.u1.mod_vals
proc `mod_values=`*(self: var LDAPModA, x: ptr PCHAR) = self.u1.mod_values = x
proc mod_values*(self: LDAPModA): ptr PCHAR = self.u1.mod_values
proc `mod_bvalues=`*(self: var LDAPModA, x: ptr ptr BerValue) = self.u1.mod_bvalues = x
proc mod_bvalues*(self: LDAPModA): ptr ptr BerValue = self.u1.mod_bvalues
proc `mod_vals=`*(self: var LDAPModW, x: mod_vals_u_tW) = self.u1.mod_vals = x
proc mod_vals*(self: LDAPModW): mod_vals_u_tW = self.u1.mod_vals
proc `mod_values=`*(self: var LDAPModW, x: ptr PWCHAR) = self.u1.mod_values = x
proc mod_values*(self: LDAPModW): ptr PWCHAR = self.u1.mod_values
proc `mod_bvalues=`*(self: var LDAPModW, x: ptr ptr BerValue) = self.u1.mod_bvalues = x
proc mod_bvalues*(self: LDAPModW): ptr ptr BerValue = self.u1.mod_bvalues

# net/ws2tcpip.nim

const
  # IP_OPTIONS* = 1
  IP_HDRINCL* = 2
  IP_TOS* = 3
  IP_TTL* = 4
  IP_MULTICAST_IF* = 9
  IP_MULTICAST_TTL* = 10
  IP_MULTICAST_LOOP* = 11
  IP_ADD_MEMBERSHIP* = 12
  IP_DROP_MEMBERSHIP* = 13
  IP_DONTFRAGMENT* = 14
  IP_ADD_SOURCE_MEMBERSHIP* = 15
  IP_DROP_SOURCE_MEMBERSHIP* = 16
  IP_BLOCK_SOURCE* = 17
  IP_UNBLOCK_SOURCE* = 18
  IP_PKTINFO* = 19
  IPV6_UNICAST_HOPS* = 4
  IPV6_MULTICAST_IF* = 9
  IPV6_MULTICAST_HOPS* = 10
  IPV6_MULTICAST_LOOP* = 11
  IPV6_ADD_MEMBERSHIP* = 12
  IPV6_DROP_MEMBERSHIP* = 13
  IPV6_JOIN_GROUP* = IPV6_ADD_MEMBERSHIP
  IPV6_LEAVE_GROUP* = IPV6_DROP_MEMBERSHIP
  IPV6_PKTINFO* = 19
  IP_DEFAULT_MULTICAST_TTL* = 1
  IP_DEFAULT_MULTICAST_LOOP* = 1
  IP_MAX_MEMBERSHIPS* = 20
  TCP_EXPEDITED_1122* = 2
  UDP_NOCHECKSUM* = 1
  IFF_UP* = 1
  IFF_BROADCAST* = 2
  IFF_LOOPBACK* = 4
  IFF_POINTTOPOINT* = 8
  IFF_MULTICAST* = 16
  SIO_GET_INTERFACE_LIST* = IOR('t', 127, u_long)
  INET_ADDRSTRLEN* = 16
  INET6_ADDRSTRLEN* = 46
  NI_MAXHOST* = 1025
  NI_MAXSERV* = 32
  NI_NOFQDN* = 0x01
  NI_NUMERICHOST* = 0x02
  NI_NAMEREQD* = 0x04
  NI_NUMERICSERV* = 0x08
  NI_DGRAM* = 0x10
  AI_PASSIVE* = 1
  AI_CANONNAME* = 2
  AI_NUMERICHOST* = 4
  EAI_AGAIN* = WSATRY_AGAIN
  EAI_BADFLAGS* = WSAEINVAL
  EAI_FAIL* = WSANO_RECOVERY
  EAI_FAMILY* = WSAEAFNOSUPPORT
  EAI_MEMORY* = WSA_NOT_ENOUGH_MEMORY
  EAI_NODATA* = WSANO_DATA
  EAI_NONAME* = WSAHOST_NOT_FOUND
  EAI_SERVICE* = WSATYPE_NOT_FOUND
  EAI_SOCKTYPE* = WSAESOCKTNOSUPPORT

type
  ip_mreq* {.final, pure.} = object
    imr_multiaddr*: IN_ADDR
    imr_interface*: IN_ADDR
  ip_mreq_source* {.final, pure.} = object
    imr_multiaddr*: IN_ADDR
    imr_sourceaddr*: IN_ADDR
    imr_interface*: IN_ADDR
  ip_msfilter* {.final, pure.} = object
    imsf_multiaddr*: IN_ADDR
    imsf_interface*: IN_ADDR
    imsf_fmode*: u_long
    imsf_numsrc*: u_long
    imsf_slist*: array[1, IN_ADDR]

template IP_MSFILTER_SIZE*(numsrc: ULONG): DWORD =
  ip_msfilter.sizeof - IN_ADDR.sizeof + numsrc * IN_ADDR.sizeof

type
  IN_PKTINFO* {.final, pure.} = object
    ipi_addr*: IN_ADDR
    ipi_ifindex*: UINT
  IN6_ADDR_UNION1* {.final, union, pure.} = object
    S6_u8*: array[16, u_char]
    S6_u16*: array[8, u_short]
    S6_u32*: array[4, u_long]
  IN6_ADDR* {.final, pure.} = object
    u1*: IN6_ADDR_UNION1
  PIN6_ADDR* = ptr IN6_ADDR
  LPIN6_ADDR* = ptr IN6_ADDR
  SOCKADDR_IN6* {.final, pure.} = object
    sin6_family*: int16
    sin6_port*: u_short
    sin6_flowinfo*: u_long
    sin6_addr*: IN6_ADDR
    sin6_scope_id*: u_long
  PSOCKADDR_IN6* = ptr SOCKADDR_IN6
  LPSOCKADDR_IN6* = ptr SOCKADDR_IN6
  socklen_t* = int32
  IPV6_MREG* {.final, pure.} = object
    ipv6mr_multiaddr*: IN6_ADDR
    ipv6mr_interface*: uint32
  IN6_PKTINFO* {.final, pure.} = object
    ipi6_addr*: IN6_ADDR
    ipi6_ifindex*: UINT
  addrinfo* {.final, pure.} = object
    ai_flags*: int32
    ai_family*: int32
    ai_socktype*: int32
    ai_protocol*: int32
    ai_addrlen*: SIZE_T
    ai_canonname*: cstring
    ai_addr*: ptr SOCKADDR
    ai_next*: ptr addrinfo

proc freeaddrinfo*(P1: ptr addrinfo): void {.winapi, dynlib: "ws2_32", importc.}
proc getaddrinfo*(P1: cstring, P2: cstring, P3: ptr addrinfo, P4: ptr ptr addrinfo): int32 {.winapi, dynlib: "ws2_32", importc.}
proc getnameinfo*(P1: ptr SOCKADDR, P2: socklen_t, P3: cstring, P4: DWORD, P5: cstring, P6: DWORD, P7: int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc getnameinfo*(pSockaddr: ptr SOCKADDR, SockaddrLength: socklen_t, pNodeBuffer: PCHAR, NodeBufferSize: DWORD, pServiceBuffer: PCHAR, ServiceBufferSize: DWORD, Flags: INT): INT {.winapi, dynlib: "ws2_32", importc.}
proc GetNameInfoW*(pSockaddr: ptr SOCKADDR, SockaddrLength: socklen_t, pNodeBuffer: PWCHAR, NodeBufferSize: DWORD, pServiceBuffer: PWCHAR, ServiceBufferSize: DWORD, Flags: INT): INT {.winapi, dynlib: "ws2_32", importc.}
proc GetNameInfoA*(pSockaddr: ptr SOCKADDR, SockaddrLength: socklen_t, pNodeBuffer: PCHAR, NodeBufferSize: DWORD, pServiceBuffer: PCHAR, ServiceBufferSize: DWORD, Flags: INT): INT {.winapi, dynlib: "ws2_32", importc: "getnameinfo".}

when not defined(winansi):
  proc GetNameInfo*(pSockaddr: ptr SOCKADDR, SockaddrLength: socklen_t, pNodeBuffer: PWCHAR, NodeBufferSize: DWORD, pServiceBuffer: PWCHAR, ServiceBufferSize: DWORD, Flags: INT): INT {.winapi, dynlib: "ws2_32", importc: "GetNameInfoW".}

else:
  proc GetNameInfo*(pSockaddr: ptr SOCKADDR, SockaddrLength: socklen_t, pNodeBuffer: PWCHAR, NodeBufferSize: DWORD, pServiceBuffer: PWCHAR, ServiceBufferSize: DWORD, Flags: INT): INT {.winapi, dynlib: "ws2_32", importc: "GetNameInfoA".}

proc `S6_u8=`*(self: var IN6_ADDR, x: array[16, u_char]) = self.u1.S6_u8 = x
proc S6_u8*(self: IN6_ADDR): array[16, u_char] = self.u1.S6_u8
proc `S6_u16=`*(self: var IN6_ADDR, x: array[8, u_short]) = self.u1.S6_u16 = x
proc S6_u16*(self: IN6_ADDR): array[8, u_short] = self.u1.S6_u16
proc `S6_u32=`*(self: var IN6_ADDR, x: array[4, u_long]) = self.u1.S6_u32 = x
proc S6_u32*(self: IN6_ADDR): array[4, u_long] = self.u1.S6_u32


# misc/accctrl.nim
const
  # ACCESS_MODE* = enum
  NOT_USED_ACCESS* = 0
  GRANT_ACCESS* = 1
  SET_ACCESS* = 2
  DENY_ACCESS* = 3
  REVOKE_ACCESS* = 4
  SET_AUDIT_SUCCESS* = 5
  SET_AUDIT_FAILURE* = 6
  # SE_OBJECT_TYPE* = enum
  SE_UNKNOWN_OBJECT_TYPE* = 0
  SE_FILE_OBJECT* = 1
  SE_SERVICE* = 2
  SE_PRINTER* = 3
  SE_REGISTRY_KEY* = 4
  SE_LMSHARE* = 5
  SE_KERNEL_OBJECT* = 6
  SE_WINDOW_OBJECT* = 7
  SE_DS_OBJECT* = 8
  SE_DS_OBJECT_ALL* = 9
  SE_PROVIDER_DEFINED_OBJECT* = 10
  SE_WMIGUID_OBJECT* = 11
  SE_REGISTRY_WOW64_32KEY* = 12
  # TRUSTEE_TYPE* = enum
  TRUSTEE_IS_UNKNOWN* = 0
  TRUSTEE_IS_USER* = 1
  TRUSTEE_IS_GROUP* = 2
  TRUSTEE_IS_DOMAIN* = 3
  TRUSTEE_IS_ALIAS* = 4
  TRUSTEE_IS_WELL_KNOWN_GROUP* = 5
  TRUSTEE_IS_DELETED* = 6
  TRUSTEE_IS_INVALID* = 7
  TRUSTEE_IS_COMPUTER* = 8
  # TRUSTEE_FORM* = enum
  TRUSTEE_IS_SID* = 0
  TRUSTEE_IS_NAME* = 1
  TRUSTEE_BAD_FORM* = 2
  TRUSTEE_IS_OBJECTS_AND_SID* = 3
  TRUSTEE_IS_OBJECTS_AND_NAME* = 4
  # MULTIPLE_TRUSTEE_OPERATION* = enum
  NO_MULTIPLE_TRUSTEE* = 0
  TRUSTEE_IS_IMPERSONATE* = 1

const
  ACTRL_RESERVED* = 0x00000000
  ACTRL_ACCESS_PROTECTED* = 0x00000001
  ACTRL_ACCESS_ALLOWED* = 0x00000001
  ACTRL_ACCESS_DENIED* = 0x00000002
  ACTRL_AUDIT_SUCCESS* = 0x00000004
  ACTRL_AUDIT_FAILURE* = 0x00000008
  ACTRL_SYSTEM_ACCESS* = 0x04000000
  ACTRL_DELETE* = 0x08000000
  ACTRL_READ_CONTROL* = 0x10000000
  ACTRL_CHANGE_ACCESS* = 0x20000000
  ACTRL_CHANGE_OWNER* = 0x40000000
  ACTRL_SYNCHRONIZE* = 0x80000000'u32
  ACTRL_STD_RIGHTS_ALL* = 0xf8000000'u32
  ACTRL_FILE_READ* = 0x00000001
  ACTRL_FILE_WRITE* = 0x00000002
  ACTRL_FILE_APPEND* = 0x00000004
  ACTRL_FILE_READ_PROP* = 0x00000008
  ACTRL_FILE_WRITE_PROP* = 0x00000010
  ACTRL_FILE_EXECUTE* = 0x00000020
  ACTRL_FILE_READ_ATTRIB* = 0x00000080
  ACTRL_FILE_WRITE_ATTRIB* = 0x00000100
  ACTRL_FILE_CREATE_PIPE* = 0x00000200
  ACTRL_DIR_LIST* = 0x00000001
  ACTRL_DIR_CREATE_OBJECT* = 0x00000002
  ACTRL_DIR_CREATE_CHILD* = 0x00000004
  ACTRL_DIR_DELETE_CHILD* = 0x00000040
  ACTRL_DIR_TRAVERSE* = 0x00000020
  ACTRL_KERNEL_TERMINATE* = 0x00000001
  ACTRL_KERNEL_THREAD* = 0x00000002
  ACTRL_KERNEL_VM* = 0x00000004
  ACTRL_KERNEL_VM_READ* = 0x00000008
  ACTRL_KERNEL_VM_WRITE* = 0x00000010
  ACTRL_KERNEL_DUP_HANDLE* = 0x00000020
  ACTRL_KERNEL_PROCESS* = 0x00000040
  ACTRL_KERNEL_SET_INFO* = 0x00000080
  ACTRL_KERNEL_GET_INFO* = 0x00000100
  ACTRL_KERNEL_CONTROL* = 0x00000200
  ACTRL_KERNEL_ALERT* = 0x00000400
  ACTRL_KERNEL_GET_CONTEXT* = 0x00000800
  ACTRL_KERNEL_SET_CONTEXT* = 0x00001000
  ACTRL_KERNEL_TOKEN* = 0x00002000
  ACTRL_KERNEL_IMPERSONATE* = 0x00004000
  ACTRL_KERNEL_DIMPERSONATE* = 0x00008000
  ACTRL_PRINT_SADMIN* = 0x00000001
  ACTRL_PRINT_SLIST* = 0x00000002
  ACTRL_PRINT_PADMIN* = 0x00000004
  ACTRL_PRINT_PUSE* = 0x00000008
  ACTRL_PRINT_JADMIN* = 0x00000010
  ACTRL_SVC_GET_INFO* = 0x00000001
  ACTRL_SVC_SET_INFO* = 0x00000002
  ACTRL_SVC_STATUS* = 0x00000004
  ACTRL_SVC_LIST* = 0x00000008
  ACTRL_SVC_START* = 0x00000010
  ACTRL_SVC_STOP* = 0x00000020
  ACTRL_SVC_PAUSE* = 0x00000040
  ACTRL_SVC_INTERROGATE* = 0x00000080
  ACTRL_SVC_UCONTROL* = 0x00000100
  ACTRL_REG_QUERY* = 0x00000001
  ACTRL_REG_SET* = 0x00000002
  ACTRL_REG_CREATE_CHILD* = 0x00000004
  ACTRL_REG_LIST* = 0x00000008
  ACTRL_REG_NOTIFY* = 0x00000010
  ACTRL_REG_LINK* = 0x00000020
  ACTRL_WIN_CLIPBRD* = 0x00000001
  ACTRL_WIN_GLOBAL_ATOMS* = 0x00000002
  ACTRL_WIN_CREATE* = 0x00000004
  ACTRL_WIN_LIST_DESK* = 0x00000008
  ACTRL_WIN_LIST* = 0x00000010
  ACTRL_WIN_READ_ATTRIBS* = 0x00000020
  ACTRL_WIN_WRITE_ATTRIBS* = 0x00000040
  ACTRL_WIN_SCREEN* = 0x00000080
  ACTRL_WIN_EXIT* = 0x00000100
  ACTRL_ACCESS_NO_OPTIONS* = 0x00000000
  ACTRL_ACCESS_SUPPORTS_OBJECT_ENTRIES* = 0x00000001
  ACCCTRL_DEFAULT_PROVIDER* = "Windows NT Access Provider"
  TRUSTEE_ACCESS_ALLOWED* = 0x00000001
  TRUSTEE_ACCESS_READ* = 0x00000002
  TRUSTEE_ACCESS_WRITE* = 0x00000004
  TRUSTEE_ACCESS_EXPLICIT* = 0x00000001
  TRUSTEE_ACCESS_READ_WRITE* = 0x00000006
  TRUSTEE_ACCESS_ALL* = 0xFFFFFFFF'u32
  NO_INHERITANCE* = 0x0
  SUB_OBJECTS_ONLY_INHERIT* = 0x1
  SUB_CONTAINERS_ONLY_INHERIT* = 0x2
  SUB_CONTAINERS_AND_OBJECTS_INHERIT* = 0x3
  INHERIT_NO_PROPAGATE* = 0x4
  INHERIT_ONLY* = 0x8
  INHERITED_ACCESS_ENTRY* = 0x10
  INHERITED_PARENT* = 0x10000000
  INHERITED_GRANDPARENT* = 0x20000000

type
  INHERIT_FLAGS* = ULONG
  ACCESS_RIGHTS* = ULONG
  PINHERIT_FLAGS* = ptr ULONG
  PACCESS_RIGHTS* = ptr ULONG
  ACCESS_MODE* = int32
  SE_OBJECT_TYPE* = int32
  TRUSTEE_TYPE* = int32
  TRUSTEE_FORM* = int32
  MULTIPLE_TRUSTEE_OPERATION* = int32
  TRUSTEE_A* {.final, pure.} = object
    pMultipleTrustee*: ptr TRUSTEE_A
    MultipleTrusteeOperation*: MULTIPLE_TRUSTEE_OPERATION
    TrusteeForm*: TRUSTEE_FORM
    TrusteeType*: TRUSTEE_TYPE
    ptstrName*: LPSTR
  PTRUSTEE_A* = ptr TRUSTEE_A
  TRUSTEE_W* {.final, pure.} = object
    pMultipleTrustee*: ptr TRUSTEE_W
    MultipleTrusteeOperation*: MULTIPLE_TRUSTEE_OPERATION
    TrusteeForm*: TRUSTEE_FORM
    TrusteeType*: TRUSTEE_TYPE
    ptstrName*: LPWSTR
  PTRUSTEE_W* = ptr TRUSTEEW
  ACTRL_ACCESS_ENTRYA* {.final, pure.} = object
    Trustee*: TRUSTEE_A
    fAccessFlags*: ULONG
    Access*: ACCESS_RIGHTS
    ProvSpecificAccess*: ACCESS_RIGHTS
    Inheritance*: INHERIT_FLAGS
    lpInheritProperty*: LPCSTR
  PACTRL_ACCESS_ENTRYA* = ptr ACTRL_ACCESS_ENTRYA
  ACTRL_ACCESS_ENTRYW* {.final, pure.} = object
    Trustee*: TRUSTEE_W
    fAccessFlags*: ULONG
    Access*: ACCESS_RIGHTS
    ProvSpecificAccess*: ACCESS_RIGHTS
    Inheritance*: INHERIT_FLAGS
    lpInheritProperty*: LPCWSTR
  PACTRL_ACCESS_ENTRYW* = ptr ACTRL_ACCESS_ENTRYW
  ACTRL_ACCESS_ENTRY_LISTA* {.final, pure.} = object
    cEntries*: ULONG
    pAccessList*: ptr ACTRL_ACCESS_ENTRYA
  PACTRL_ACCESS_ENTRY_LISTA* = ptr ACTRL_ACCESS_ENTRY_LISTA
  ACTRL_ACCESS_ENTRY_LISTW* {.final, pure.} = object
    cEntries*: ULONG
    pAccessList*: ptr ACTRL_ACCESS_ENTRYW
  PACTRL_ACCESS_ENTRY_LISTW* = ptr ACTRL_ACCESS_ENTRY_LISTW
  ACTRL_PROPERTY_ENTRYA* {.final, pure.} = object
    lpProperty*: LPCSTR
    pAccessEntryList*: PACTRL_ACCESS_ENTRY_LISTA
    fListFlags*: ULONG
  PACTRL_PROPERTY_ENTRYA* = ptr ACTRL_PROPERTY_ENTRYA
  ACTRL_PROPERTY_ENTRYW* {.final, pure.} = object
    lpProperty*: LPCWSTR
    pAccessEntryList*: PACTRL_ACCESS_ENTRY_LISTW
    fListFlags*: ULONG
  PACTRL_PROPERTY_ENTRYW* = ptr ACTRL_PROPERTY_ENTRYW
  ACTRL_ACCESSA* {.final, pure.} = object
    cEntries*: ULONG
    pPropertyAccessList*: PACTRL_PROPERTY_ENTRYA
  ACTRL_AUDITA* = ACTRL_ACCESSA
  PACTRL_ACCESSA* = ptr ACTRL_ACCESSA
  PACTRL_AUDITA* = ptr ACTRL_ACCESSA
  ACTRL_ACCESSW* {.final, pure.} = object
    cEntries*: ULONG
    pPropertyAccessList*: PACTRL_PROPERTY_ENTRYW
  ACTRL_AUDITW* = ACTRL_ACCESSW
  PACTRL_ACCESSW* = ptr ACTRL_ACCESSW
  PACTRL_AUDITW* = ptr ACTRL_ACCESSW
  TRUSTEE_ACCESSA* {.final, pure.} = object
    lpProperty*: LPSTR
    Access*: ACCESS_RIGHTS
    fAccessFlags*: ULONG
    fReturnedAccess*: ULONG
  PTRUSTEE_ACCESSA* = ptr TRUSTEE_ACCESSA
  TRUSTEE_ACCESSW* {.final, pure.} = object
    lpProperty*: LPWSTR
    Access*: ACCESS_RIGHTS
    fAccessFlags*: ULONG
    fReturnedAccess*: ULONG
  PTRUSTEE_ACCESSW* = ptr TRUSTEE_ACCESSW
  ACTRL_OVERLAPPED_UNION1* {.final, union, pure.} = object
    Provider*: PVOID
    Reserved1*: ULONG
  ACTRL_OVERLAPPED* {.final, pure.} = object
    u1*: ACTRL_OVERLAPPED_UNION1
    Reserved2*: ULONG
    hEvent*: HANDLE
  PACTRL_OVERLAPPED* = ptr ACTRL_OVERLAPPED
  ACTRL_ACCESS_INFOA* {.final, pure.} = object
    fAccessPermission*: ULONG
    lpAccessPermissionName*: LPSTR
  PACTRL_ACCESS_INFOA* = ptr ACTRL_ACCESS_INFOA
  ACTRL_ACCESS_INFOW* {.final, pure.} = object
    fAccessPermission*: ULONG
    lpAccessPermissionName*: LPWSTR
  PACTRL_ACCESS_INFOW* = ptr ACTRL_ACCESS_INFOW
  ACTRL_CONTROL_INFOA* {.final, pure.} = object
    lpControlId*: LPSTR
    lpControlName*: LPSTR
  PACTRL_CONTROL_INFOA* = ptr ACTRL_CONTROL_INFOA
  ACTRL_CONTROL_INFOW* {.final, pure.} = object
    lpControlId*: LPWSTR
    lpControlName*: LPWSTR
  PACTRL_CONTROL_INFOW* = ptr ACTRL_CONTROL_INFOW
  EXPLICIT_ACCESS_A* {.final, pure.} = object
    grfAccessPermissions*: DWORD
    grfAccessMode*: ACCESS_MODE
    grfInheritance*: DWORD
    Trustee*: TRUSTEE_A
  PEXPLICIT_ACCESS_A* = ptr EXPLICIT_ACCESS_A
  EXPLICIT_ACCESS_W* {.final, pure.} = object
    grfAccessPermissions*: DWORD
    grfAccessMode*: ACCESS_MODE
    grfInheritance*: DWORD
    Trustee*: TRUSTEE_W
  PEXPLICIT_ACCESS_W* = ptr EXPLICIT_ACCESS_W
  OBJECTS_AND_SID* {.final, pure.} = object
    ObjectsPresent*: DWORD
    ObjectTypeGuid*: GUID
    InheritedObjectTypeGuid*: GUID
    pSid*: ptr SID
  POBJECTS_AND_SID* = ptr OBJECTS_AND_SID
  OBJECTS_AND_NAME_A* {.final, pure.} = object
    ObjectsPresent*: DWORD
    ObjectType*: SE_OBJECT_TYPE
    ObjectTypeName*: LPSTR
    InheritedObjectTypeName*: LPSTR
    ptstrName*: LPSTR
  POBJECTS_AND_NAME_A* = ptr OBJECTS_AND_NAME_A
  OBJECTS_AND_NAME_W* {.final, pure.} = object
    ObjectsPresent*: DWORD
    ObjectType*: SE_OBJECT_TYPE
    ObjectTypeName*: LPWSTR
    InheritedObjectTypeName*: LPWSTR
    ptstrName*: LPWSTR
  POBJECTS_AND_NAME_W* = ptr OBJECTS_AND_NAME_W
  INHERITED_FROMA* {.final, pure.} = object
    GenerationGap*: LONG
    AncestorName*: LPSTR
  PINHERITED_FROMA* = ptr INHERITED_FROMA
  INHERITED_FROMW* {.final, pure.} = object
    GenerationGap*: LONG
    AncestorName*: LPWSTR
  PINHERITED_FROMW* = ptr INHERITED_FROMW

when not defined(winansi):
  type
    TRUSTEE* = TRUSTEEW
    ACTRL_ACCESS* = ACTRL_ACCESSW
    ACTRL_ACCESS_ENTRY_LIST* = ACTRL_ACCESS_ENTRY_LISTW
    ACTRL_ACCESS_INFO* = ACTRL_ACCESS_INFOW
    ACTRL_ACCESS_ENTRY* = ACTRL_ACCESS_ENTRYW
    ACTRL_AUDIT* = ACTRL_AUDITW
    ACTRL_CONTROL_INFO* = ACTRL_CONTROL_INFOW
    EXPLICIT_ACCESS* = EXPLICIT_ACCESSW
    TRUSTEE_ACCESS* = TRUSTEE_ACCESSW
    OBJECTS_AND_NAME* = OBJECTS_AND_NAME_W
    INHERITED_FROM* = INHERITED_FROMW

else:
  type
    TRUSTEE* = TRUSTEEA
    ACTRL_ACCESS* = ACTRL_ACCESSA
    ACTRL_ACCESS_ENTRY_LIST* = ACTRL_ACCESS_ENTRY_LISTA
    ACTRL_ACCESS_INFO* = ACTRL_ACCESS_INFOA
    ACTRL_ACCESS_ENTRY* = ACTRL_ACCESS_ENTRYA
    ACTRL_AUDIT* = ACTRL_AUDITA
    ACTRL_CONTROL_INFO* = ACTRL_CONTROL_INFOA
    EXPLICIT_ACCESS* = EXPLICIT_ACCESSA
    TRUSTEE_ACCESS* = TRUSTEE_ACCESSA
    OBJECTS_AND_NAME* = OBJECTS_AND_NAME_A
    INHERITED_FROM* = INHERITED_FROMA

type
  PTRUSTEE* = ptr TRUSTEE
  PACTRL_ACCESS* = ptr ACTRL_ACCESS
  PACTRL_ACCESS_ENTRY_LIST* = ptr ACTRL_ACCESS_ENTRY_LIST
  PACTRL_ACCESS_INFO* = ptr ACTRL_ACCESS_INFO
  PACTRL_ACCESS_ENTRY* = ptr ACTRL_ACCESS_ENTRY
  PACTRL_AUDIT* = ptr ACTRL_AUDIT
  PACTRL_CONTROL_INFO* = ptr ACTRL_CONTROL_INFO
  PEXPLICIT_ACCESS* = ptr EXPLICIT_ACCESS
  PTRUSTEE_ACCESS* = ptr TRUSTEE_ACCESS
  PINHERITED_FROM* = ptr INHERITED_FROM

proc `Provider=`*(self: var ACTRL_OVERLAPPED, x: PVOID) = self.u1.Provider = x
proc Provider*(self: ACTRL_OVERLAPPED): PVOID = self.u1.Provider
proc `Reserved1=`*(self: var ACTRL_OVERLAPPED, x: ULONG) = self.u1.Reserved1 = x
proc Reserved1*(self: ACTRL_OVERLAPPED): ULONG = self.u1.Reserved1

# misc/aclapi.nim

proc BuildExplicitAccessWithNameA*(P1: PEXPLICIT_ACCESS_A, P2: LPSTR, P3: DWORD, P4: ACCESS_MODE, P5: DWORD): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildExplicitAccessWithNameW*(P1: PEXPLICIT_ACCESS_W, P2: LPWSTR, P3: DWORD, P4: ACCESS_MODE, P5: DWORD): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildSecurityDescriptorA*(P1: PTRUSTEE_A, P2: PTRUSTEE_A, P3: ULONG, P4: PEXPLICIT_ACCESS_A, P5: ULONG, P6: PEXPLICIT_ACCESS_A, P7: PSECURITY_DESCRIPTOR, P8: PULONG, P9: ptr PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc.}
proc BuildSecurityDescriptorW*(P1: PTRUSTEE_W, P2: PTRUSTEE_W, P3: ULONG, P4: PEXPLICIT_ACCESS_W, P5: ULONG, P6: PEXPLICIT_ACCESS_W, P7: PSECURITY_DESCRIPTOR, P8: PULONG, P9: ptr PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc.}
proc BuildTrusteeWithNameA*(P1: PTRUSTEE_A, P2: LPSTR): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildTrusteeWithNameW*(P1: PTRUSTEE_W, P2: LPWSTR): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildTrusteeWithObjectsAndNameA*(P1: PTRUSTEE_A, P2: POBJECTS_AND_NAME_A, P3: SE_OBJECT_TYPE, P4: LPSTR, P5: LPSTR, P6: LPSTR): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildTrusteeWithObjectsAndNameW*(P1: PTRUSTEE_W, P2: POBJECTS_AND_NAME_W, P3: SE_OBJECT_TYPE, P4: LPWSTR, P5: LPWSTR, P6: LPWSTR): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildTrusteeWithObjectsAndSidA*(P1: PTRUSTEE_A, P2: POBJECTS_AND_SID, P3: ptr GUID, P4: ptr GUID, P5: PSID): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildTrusteeWithObjectsAndSidW*(P1: PTRUSTEE_W, P2: POBJECTS_AND_SID, P3: ptr GUID, P4: ptr GUID, P5: PSID): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildTrusteeWithSidA*(P1: PTRUSTEE_A, P2: PSID): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildTrusteeWithSidW*(P1: PTRUSTEE_W, P2: PSID): VOID {.winapi, dynlib: "advapi32", importc.}
proc GetAuditedPermissionsFromAclA*(P1: PACL, P2: PTRUSTEE_A, P3: PACCESS_MASK, P4: PACCESS_MASK): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetAuditedPermissionsFromAclW*(P1: PACL, P2: PTRUSTEE_W, P3: PACCESS_MASK, P4: PACCESS_MASK): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetEffectiveRightsFromAclA*(P1: PACL, P2: PTRUSTEE_A, P3: PACCESS_MASK): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetEffectiveRightsFromAclW*(P1: PACL, P2: PTRUSTEE_W, P3: PACCESS_MASK): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetExplicitEntriesFromAclA*(P1: PACL, P2: PULONG, P3: ptr PEXPLICIT_ACCESS_A): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetExplicitEntriesFromAclW*(P1: PACL, P2: PULONG, P3: ptr PEXPLICIT_ACCESS_W): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetInheritanceSourceA*(P1: LPSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: BOOL, P5: ptr ptr GUID, P6: DWORD, P7: PACL, P8: pointer, P9: PGENERIC_MAPPING, P10: PINHERITED_FROMA): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetInheritanceSourceW*(P1: LPWSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: BOOL, P5: ptr ptr GUID, P6: DWORD, P7: PACL, P8: pointer, P9: PGENERIC_MAPPING, P10: PINHERITED_FROMW): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetNamedSecurityInfoA*(P1: LPSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: ptr PSID, P5: ptr PSID, P6: ptr PACL, P7: ptr PACL, P8: ptr PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetNamedSecurityInfoW*(P1: LPWSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: ptr PSID, P5: ptr PSID, P6: ptr PACL, P7: ptr PACL, P8: ptr PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetSecurityInfo*(P1: HANDLE, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: ptr PSID, P5: ptr PSID, P6: ptr PACL, P7: ptr PACL, P8: ptr PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetTrusteeFormA*(P1: PTRUSTEE_A): TRUSTEE_FORM {.winapi, dynlib: "advapi32", importc.}
proc GetTrusteeFormW*(P1: PTRUSTEE_W): TRUSTEE_FORM {.winapi, dynlib: "advapi32", importc.}
proc GetTrusteeNameA*(P1: PTRUSTEE_A): LPSTR {.winapi, dynlib: "advapi32", importc.}
proc GetTrusteeNameW*(P1: PTRUSTEE_W): LPWSTR {.winapi, dynlib: "advapi32", importc.}
proc GetTrusteeTypeA*(P1: PTRUSTEE_A): TRUSTEE_TYPE {.winapi, dynlib: "advapi32", importc.}
proc GetTrusteeTypeW*(P1: PTRUSTEE_W): TRUSTEE_TYPE {.winapi, dynlib: "advapi32", importc.}
proc LookupSecurityDescriptorPartsA*(P1: ptr PTRUSTEE_A, P2: ptr PTRUSTEE_A, P3: PULONG, P4: ptr PEXPLICIT_ACCESS_A, P5: PULONG, P6: ptr PEXPLICIT_ACCESS_A, P7: PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc.}
proc LookupSecurityDescriptorPartsW*(P1: ptr PTRUSTEE_W, P2: ptr PTRUSTEE_W, P3: PULONG, P4: ptr PEXPLICIT_ACCESS_W, P5: PULONG, P6: ptr PEXPLICIT_ACCESS_W, P7: PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc.}
proc SetEntriesInAclA*(P1: ULONG, P2: PEXPLICIT_ACCESS_A, P3: PACL, P4: ptr PACL): DWORD {.winapi, dynlib: "advapi32", importc.}
proc SetEntriesInAclW*(P1: ULONG, P2: PEXPLICIT_ACCESS_W, P3: PACL, P4: ptr PACL): DWORD {.winapi, dynlib: "advapi32", importc.}
proc SetNamedSecurityInfoA*(P1: LPSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: PSID, P5: PSID, P6: PACL, P7: PACL): DWORD {.winapi, dynlib: "advapi32", importc.}
proc SetNamedSecurityInfoW*(P1: LPWSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: PSID, P5: PSID, P6: PACL, P7: PACL): DWORD {.winapi, dynlib: "advapi32", importc.}
proc SetSecurityInfo*(P1: HANDLE, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: PSID, P5: PSID, P6: PACL, P7: PACL): DWORD {.winapi, dynlib: "advapi32", importc.}
proc BuildImpersonateExplicitAccessWithNameA*(P1: PEXPLICIT_ACCESS_A, P2: LPSTR, P3: PTRUSTEE_A, P4: DWORD, P5: ACCESS_MODE, P6: DWORD): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildImpersonateExplicitAccessWithNameW*(P1: PEXPLICIT_ACCESS_W, P2: LPWSTR, P3: PTRUSTEE_W, P4: DWORD, P5: ACCESS_MODE, P6: DWORD): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildImpersonateTrusteeA*(P1: PTRUSTEE_A, P2: PTRUSTEE_A): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildImpersonateTrusteeW*(P1: PTRUSTEE_W, P2: PTRUSTEE_W): VOID {.winapi, dynlib: "advapi32", importc.}
proc GetMultipleTrusteeA*(P1: PTRUSTEE_A): PTRUSTEE_A {.winapi, dynlib: "advapi32", importc.}
proc GetMultipleTrusteeW*(P1: PTRUSTEE_W): PTRUSTEE_W {.winapi, dynlib: "advapi32", importc.}
proc GetMultipleTrusteeOperationA*(P1: PTRUSTEE_A): MULTIPLE_TRUSTEE_OPERATION {.winapi, dynlib: "advapi32", importc.}
proc GetMultipleTrusteeOperationW*(P1: PTRUSTEE_W): MULTIPLE_TRUSTEE_OPERATION {.winapi, dynlib: "advapi32", importc.}

when not defined(winansi):
  proc BuildExplicitAccessWithName*(P1: PEXPLICIT_ACCESS_W, P2: LPWSTR, P3: DWORD, P4: ACCESS_MODE, P5: DWORD): VOID {.winapi, dynlib: "advapi32", importc: "BuildExplicitAccessWithNameW".}
  proc BuildSecurityDescriptor*(P1: PTRUSTEE_W, P2: PTRUSTEE_W, P3: ULONG, P4: PEXPLICIT_ACCESS_W, P5: ULONG, P6: PEXPLICIT_ACCESS_W, P7: PSECURITY_DESCRIPTOR, P8: PULONG, P9: ptr PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc: "BuildSecurityDescriptorW".}
  proc BuildTrusteeWithName*(P1: PTRUSTEE_W, P2: LPWSTR): VOID {.winapi, dynlib: "advapi32", importc: "BuildTrusteeWithNameW".}
  proc BuildTrusteeWithObjectsAndName*(P1: PTRUSTEE_W, P2: POBJECTS_AND_NAME_W, P3: SE_OBJECT_TYPE, P4: LPWSTR, P5: LPWSTR, P6: LPWSTR): VOID {.winapi, dynlib: "advapi32", importc: "BuildTrusteeWithObjectsAndNameW".}
  proc BuildTrusteeWithObjectsAndSid*(P1: PTRUSTEE_W, P2: POBJECTS_AND_SID, P3: ptr GUID, P4: ptr GUID, P5: PSID): VOID {.winapi, dynlib: "advapi32", importc: "BuildTrusteeWithObjectsAndSidW".}
  proc BuildTrusteeWithSid*(P1: PTRUSTEE_W, P2: PSID): VOID {.winapi, dynlib: "advapi32", importc: "BuildTrusteeWithSidW".}
  proc GetAuditedPermissionsFromAcl*(P1: PACL, P2: PTRUSTEE_W, P3: PACCESS_MASK, P4: PACCESS_MASK): DWORD {.winapi, dynlib: "advapi32", importc: "GetAuditedPermissionsFromAclW".}
  proc GetEffectiveRightsFromAcl*(P1: PACL, P2: PTRUSTEE_W, P3: PACCESS_MASK): DWORD {.winapi, dynlib: "advapi32", importc: "GetEffectiveRightsFromAclW".}
  proc GetExplicitEntriesFromAcl*(P1: PACL, P2: PULONG, P3: ptr PEXPLICIT_ACCESS_W): DWORD {.winapi, dynlib: "advapi32", importc: "GetExplicitEntriesFromAclW".}
  proc GetNamedSecurityInfo*(P1: LPWSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: ptr PSID, P5: ptr PSID, P6: ptr PACL, P7: ptr PACL, P8: ptr PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc: "GetNamedSecurityInfoW".}
  proc GetTrusteeForm*(P1: PTRUSTEE_W): TRUSTEE_FORM {.winapi, dynlib: "advapi32", importc: "GetTrusteeFormW".}
  proc GetTrusteeName*(P1: PTRUSTEE_W): LPWSTR {.winapi, dynlib: "advapi32", importc: "GetTrusteeNameW".}
  proc GetTrusteeType*(P1: PTRUSTEE_W): TRUSTEE_TYPE {.winapi, dynlib: "advapi32", importc: "GetTrusteeTypeW".}
  proc LookupSecurityDescriptorParts*(P1: ptr PTRUSTEE_W, P2: ptr PTRUSTEE_W, P3: PULONG, P4: ptr PEXPLICIT_ACCESS_W, P5: PULONG, P6: ptr PEXPLICIT_ACCESS_W, P7: PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc: "LookupSecurityDescriptorPartsW".}
  proc SetEntriesInAcl*(P1: ULONG, P2: PEXPLICIT_ACCESS_W, P3: PACL, P4: ptr PACL): DWORD {.winapi, dynlib: "advapi32", importc: "SetEntriesInAclW".}
  proc SetNamedSecurityInfo*(P1: LPWSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: PSID, P5: PSID, P6: PACL, P7: PACL): DWORD {.winapi, dynlib: "advapi32", importc: "SetNamedSecurityInfoW".}
  proc BuildImpersonateExplicitAccessWithName*(P1: PEXPLICIT_ACCESS_W, P2: LPWSTR, P3: PTRUSTEE_W, P4: DWORD, P5: ACCESS_MODE, P6: DWORD): VOID {.winapi, dynlib: "advapi32", importc: "BuildImpersonateExplicitAccessWithNameW".}
  proc BuildImpersonateTrustee*(P1: PTRUSTEE_W, P2: PTRUSTEE_W): VOID {.winapi, dynlib: "advapi32", importc: "BuildImpersonateTrusteeW".}
  proc GetMultipleTrustee*(P1: PTRUSTEE_W): PTRUSTEE_W {.winapi, dynlib: "advapi32", importc: "GetMultipleTrusteeW".}
  proc GetMultipleTrusteeOperation*(P1: PTRUSTEE_W): MULTIPLE_TRUSTEE_OPERATION {.winapi, dynlib: "advapi32", importc: "GetMultipleTrusteeOperationW".}

else:
  proc BuildExplicitAccessWithName*(P1: PEXPLICIT_ACCESS_A, P2: LPSTR, P3: DWORD, P4: ACCESS_MODE, P5: DWORD): VOID {.winapi, dynlib: "advapi32", importc: "BuildExplicitAccessWithNameA".}
  proc BuildSecurityDescriptor*(P1: PTRUSTEE_A, P2: PTRUSTEE_A, P3: ULONG, P4: PEXPLICIT_ACCESS_A, P5: ULONG, P6: PEXPLICIT_ACCESS_A, P7: PSECURITY_DESCRIPTOR, P8: PULONG, P9: ptr PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc: "BuildSecurityDescriptorA".}
  proc BuildTrusteeWithName*(P1: PTRUSTEE_A, P2: LPSTR): VOID {.winapi, dynlib: "advapi32", importc: "BuildTrusteeWithNameA".}
  proc BuildTrusteeWithObjectsAndName*(P1: PTRUSTEE_A, P2: POBJECTS_AND_NAME_A, P3: SE_OBJECT_TYPE, P4: LPSTR, P5: LPSTR, P6: LPSTR): VOID {.winapi, dynlib: "advapi32", importc: "BuildTrusteeWithObjectsAndNameA".}
  proc BuildTrusteeWithObjectsAndSid*(P1: PTRUSTEE_A, P2: POBJECTS_AND_SID, P3: ptr GUID, P4: ptr GUID, P5: PSID): VOID {.winapi, dynlib: "advapi32", importc: "BuildTrusteeWithObjectsAndSidA".}
  proc BuildTrusteeWithSid*(P1: PTRUSTEE_A, P2: PSID): VOID {.winapi, dynlib: "advapi32", importc: "BuildTrusteeWithSidA".}
  proc GetAuditedPermissionsFromAcl*(P1: PACL, P2: PTRUSTEE_A, P3: PACCESS_MASK, P4: PACCESS_MASK): DWORD {.winapi, dynlib: "advapi32", importc: "GetAuditedPermissionsFromAclA".}
  proc GetEffectiveRightsFromAcl*(P1: PACL, P2: PTRUSTEE_A, P3: PACCESS_MASK): DWORD {.winapi, dynlib: "advapi32", importc: "GetEffectiveRightsFromAclA".}
  proc GetExplicitEntriesFromAcl*(P1: PACL, P2: PULONG, P3: ptr PEXPLICIT_ACCESS_A): DWORD {.winapi, dynlib: "advapi32", importc: "GetExplicitEntriesFromAclA".}
  proc GetNamedSecurityInfo*(P1: LPSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: ptr PSID, P5: ptr PSID, P6: ptr PACL, P7: ptr PACL, P8: ptr PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc: "GetNamedSecurityInfoA".}
  proc GetTrusteeForm*(P1: PTRUSTEE_A): TRUSTEE_FORM {.winapi, dynlib: "advapi32", importc: "GetTrusteeFormA".}
  proc GetTrusteeName*(P1: PTRUSTEE_A): LPSTR {.winapi, dynlib: "advapi32", importc: "GetTrusteeNameA".}
  proc GetTrusteeType*(P1: PTRUSTEE_A): TRUSTEE_TYPE {.winapi, dynlib: "advapi32", importc: "GetTrusteeTypeA".}
  proc LookupSecurityDescriptorParts*(P1: ptr PTRUSTEE_A, P2: ptr PTRUSTEE_A, P3: PULONG, P4: ptr PEXPLICIT_ACCESS_A, P5: PULONG, P6: ptr PEXPLICIT_ACCESS_A, P7: PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc: "LookupSecurityDescriptorPartsA".}
  proc SetEntriesInAcl*(P1: ULONG, P2: PEXPLICIT_ACCESS_A, P3: PACL, P4: ptr PACL): DWORD {.winapi, dynlib: "advapi32", importc: "SetEntriesInAclA".}
  proc SetNamedSecurityInfo*(P1: LPSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: PSID, P5: PSID, P6: PACL, P7: PACL): DWORD {.winapi, dynlib: "advapi32", importc: "SetNamedSecurityInfoA".}
  proc BuildImpersonateExplicitAccessWithName*(P1: PEXPLICIT_ACCESS_A, P2: LPSTR, P3: PTRUSTEE_A, P4: DWORD, P5: ACCESS_MODE, P6: DWORD): VOID {.winapi, dynlib: "advapi32", importc: "BuildImpersonateExplicitAccessWithNameA".}
  proc BuildImpersonateTrustee*(P1: PTRUSTEE_A, P2: PTRUSTEE_A): VOID {.winapi, dynlib: "advapi32", importc: "BuildImpersonateTrusteeA".}
  proc GetMultipleTrustee*(P1: PTRUSTEE_A): PTRUSTEE_A {.winapi, dynlib: "advapi32", importc: "GetMultipleTrusteeA".}
  proc GetMultipleTrusteeOperation*(P1: PTRUSTEE_A): MULTIPLE_TRUSTEE_OPERATION {.winapi, dynlib: "advapi32", importc: "GetMultipleTrusteeOperationA".}

# misc/aclui.nim
const
  # SI_PAGE_TYPE* = enum
  SI_PAGE_PERM* = 0
  SI_PAGE_ADVPERM* = 1
  SI_PAGE_AUDIT* = 2
  SI_PAGE_OWNER* = 3

type
  SI_OBJECT_INFO* {.final, pure.} = object
    dwFlags*: DWORD
    hInstance*: HINSTANCE
    pszServerName*: LPWSTR
    pszObjectName*: LPWSTR
    pszPageTitle*: LPWSTR
    guidObjectType*: GUID
  PSI_OBJECT_INFO* = ptr SI_OBJECT_INFO

const
  SI_EDIT_PERMS* = 0x00000000
  SI_EDIT_OWNER* = 0x00000001
  SI_EDIT_AUDITS* = 0x00000002
  SI_CONTAINER* = 0x00000004
  SI_READONLY* = 0x00000008
  SI_ADVANCED* = 0x00000010
  SI_RESET* = 0x00000020
  SI_OWNER_READONLY* = 0x00000040
  SI_EDIT_PROPERTIES* = 0x00000080
  SI_OWNER_RECURSE* = 0x00000100
  SI_NO_ACL_PROTECT* = 0x00000200
  SI_NO_TREE_APPLY* = 0x00000400
  SI_PAGE_TITLE* = 0x00000800
  SI_SERVER_IS_DC* = 0x00001000
  SI_RESET_DACL_TREE* = 0x00004000
  SI_RESET_SACL_TREE* = 0x00008000
  SI_OBJECT_GUID* = 0x00010000
  SI_EDIT_EFFECTIVE* = 0x00020000
  SI_RESET_DACL* = 0x00040000
  SI_RESET_SACL* = 0x00080000
  SI_RESET_OWNER* = 0x00100000
  SI_NO_ADDITIONAL_PERMISSION* = 0x00200000
  SI_MAY_WRITE* = 0x10000000
  SI_EDIT_ALL* = (SI_EDIT_PERMS or SI_EDIT_OWNER or SI_EDIT_AUDITS).DWORD

type
  SI_ACCESS* {.final, pure.} = object
    pguid*: ptr GUID
    mask*: ACCESS_MASK
    pszName*: LPCWSTR
    dwFlags*: DWORD
  PSI_ACCESS* = ptr SI_ACCESS

const
  SI_ACCESS_SPECIFIC* = 0x00010000
  SI_ACCESS_GENERAL* = 0x00020000
  SI_ACCESS_CONTAINER* = 0x00040000
  SI_ACCESS_PROPERTY* = 0x00080000

type
  SI_INHERIT_TYPE* {.final, pure.} = object
    pguid*: ptr GUID
    dwFlags*: ULONG
    pszName*: LPCWSTR
  PSI_INHERIT_TYPE* = ptr SI_INHERIT_TYPE
  SI_PAGE_TYPE* = int32

const
  PSPCB_SI_INITDIALOG* = (WM_USER + 1)

type
  ISecurityInformation* {.pure.} = object
    lpVtbl*: ptr ISecurityInformationVtbl
  ISecurityInformationVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetObjectInformation*: proc(self: ptr ISecurityInformation, P1: PSI_OBJECT_INFO): HRESULT {.stdcall.}
    GetSecurity*: proc(self: ptr ISecurityInformation, P1: SECURITY_INFORMATION, P2: ptr PSECURITY_DESCRIPTOR, P3: BOOL): HRESULT {.stdcall.}
    SetSecurity*: proc(self: ptr ISecurityInformation, P1: SECURITY_INFORMATION, P2: PSECURITY_DESCRIPTOR): HRESULT {.stdcall.}
    GetAccessRights*: proc(self: ptr ISecurityInformation, P1: ptr GUID, P2: DWORD, P3: ptr PSI_ACCESS, P4: ptr ULONG, P5: ptr ULONG): HRESULT {.stdcall.}
    MapGeneric*: proc(self: ptr ISecurityInformation, P1: ptr GUID, P2: ptr UCHAR, P3: ptr ACCESS_MASK): HRESULT {.stdcall.}
    GetInheritTypes*: proc(self: ptr ISecurityInformation, P1: ptr PSI_INHERIT_TYPE, P2: ptr ULONG): HRESULT {.stdcall.}
    PropertySheetPageCallback*: proc(self: ptr ISecurityInformation, P1: HWND, P2: UINT, P3: SI_PAGE_TYPE): HRESULT {.stdcall.}
  LPSECURITYINFO* = ptr ISecurityInformation

proc CreateSecurityPage*(psi: LPSECURITYINFO): HPROPSHEETPAGE {.winapi, dynlib: "aclui", importc.}
proc EditSecurity*(hwndOwner: HWND, psi: LPSECURITYINFO): BOOL {.winapi, dynlib: "aclui", importc.}

converter winim_converter_ISecurityInformation*(x: ptr ISecurityInformation): ptr IUnknown = cast[ptr IUnknown](x)
proc GetObjectInformation*(self: ptr ISecurityInformation, P1: PSI_OBJECT_INFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetObjectInformation(self, P1)
proc GetSecurity*(self: ptr ISecurityInformation, P1: SECURITY_INFORMATION, P2: ptr PSECURITY_DESCRIPTOR, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetSecurity(self, P1, P2, P3)
proc SetSecurity*(self: ptr ISecurityInformation, P1: SECURITY_INFORMATION, P2: PSECURITY_DESCRIPTOR): HRESULT {.inline, discardable.} = self.lpVtbl.SetSecurity(self, P1, P2)
proc GetAccessRights*(self: ptr ISecurityInformation, P1: ptr GUID, P2: DWORD, P3: ptr PSI_ACCESS, P4: ptr ULONG, P5: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetAccessRights(self, P1, P2, P3, P4, P5)
proc MapGeneric*(self: ptr ISecurityInformation, P1: ptr GUID, P2: ptr UCHAR, P3: ptr ACCESS_MASK): HRESULT {.inline, discardable.} = self.lpVtbl.MapGeneric(self, P1, P2, P3)
proc GetInheritTypes*(self: ptr ISecurityInformation, P1: ptr PSI_INHERIT_TYPE, P2: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetInheritTypes(self, P1, P2)
proc PropertySheetPageCallback*(self: ptr ISecurityInformation, P1: HWND, P2: UINT, P3: SI_PAGE_TYPE): HRESULT {.inline, discardable.} = self.lpVtbl.PropertySheetPageCallback(self, P1, P2, P3)

# misc/cderr.nim

const
  CDERR_DIALOGFAILURE* = 0xFFFF
  CDERR_GENERALCODES* = 0x0000
  CDERR_STRUCTSIZE* = 0x1
  CDERR_INITIALIZATION* = 0x2
  CDERR_NOTEMPLATE* = 0x3
  CDERR_NOHINSTANCE* = 0x4
  CDERR_LOADSTRFAILURE* = 0x5
  CDERR_FINDRESFAILURE* = 0x6
  CDERR_LOADRESFAILURE* = 0x7
  CDERR_LOCKRESFAILURE* = 0x8
  CDERR_MEMALLOCFAILURE* = 0x9
  CDERR_MEMLOCKFAILURE* = 0xA
  CDERR_NOHOOK* = 0xB
  CDERR_REGISTERMSGFAIL* = 0xC
  PDERR_PRINTERCODES* = 0x1000
  PDERR_SETUPFAILURE* = 0x1001
  PDERR_PARSEFAILURE* = 0x1002
  PDERR_RETDEFFAILURE* = 0x1003
  PDERR_LOADDRVFAILURE* = 0x1004
  PDERR_GETDEVMODEFAIL* = 0x1005
  PDERR_INITFAILURE* = 0x1006
  PDERR_NODEVICES* = 0x1007
  PDERR_NODEFAULTPRN* = 0x1008
  PDERR_DNDMMISMATCH* = 0x1009
  PDERR_CREATEICFAILURE* = 0x100A
  PDERR_PRINTERNOTFOUND* = 0x100B
  PDERR_DEFAULTDIFFERENT* = 0x100C
  CFERR_CHOOSEFONTCODES* = 0x2000
  CFERR_NOFONTS* = 0x2001
  CFERR_MAXLESSTHANMIN* = 0x2002
  FNERR_FILENAMECODES* = 0x3000
  FNERR_SUBCLASSFAILURE* = 0x3001
  FNERR_INVALIDFILENAME* = 0x3002
  FNERR_BUFFERTOOSMALL* = 0x3003
  FRERR_FINDREPLACECODES* = 0x4000
  FRERR_BUFFERLENGTHZERO* = 0x4001
  CCERR_CHOOSECOLORCODES* = 0x5000

# misc/cpl.nim

const
  WM_CPL_LAUNCH* = (WM_USER + 1000)
  WM_CPL_LAUNCHED* = ((WM_USER + 1000) + 1)
  CPL_DYNAMIC_RES* = 0
  CPL_INIT* = 1
  CPL_GETCOUNT* = 2
  CPL_INQUIRE* = 3
  CPL_SELECT* = 4
  CPL_DBLCLK* = 5
  CPL_STOP* = 6
  CPL_EXIT* = 7
  CPL_NEWINQUIRE* = 8
  CPL_STARTWPARMSA* = 9
  CPL_STARTWPARMSW* = 10
  CPL_SETUP* = 200

type
  APPLET_PROC* = proc (P1: HWND, P2: UINT, P3: LONG, P4: LONG): LONG {.stdcall.}
  CPLINFO* {.final, pure.} = object
    idIcon*: int32
    idName*: int32
    idInfo*: int32
    lData*: LONG
  LPCPLINFO* = ptr CPLINFO
  NEWCPLINFOA* {.final, pure.} = object
    dwSize*: DWORD
    dwFlags*: DWORD
    dwHelpContext*: DWORD
    lData*: LONG
    hIcon*: HICON
    szName*: array[32, CHAR]
    szInfo*: array[64, CHAR]
    szHelpFile*: array[128, CHAR]
  LPNEWCPLINFOA* = ptr NEWCPLINFOA
  NEWCPLINFOW* {.final, pure.} = object
    dwSize*: DWORD
    dwFlags*: DWORD
    dwHelpContext*: DWORD
    lData*: LONG
    hIcon*: HICON
    szName*: array[32, WCHAR]
    szInfo*: array[64, WCHAR]
    szHelpFile*: array[128, WCHAR]
  LPNEWCPLINFOW* = ptr NEWCPLINFOW

when not defined(winansi):
  const
    CPL_STARTWPARMS* = CPL_STARTWPARMSW

  type
    NEWCPLINFO* = NEWCPLINFOW

else:
  const
    CPL_STARTWPARMS* = CPL_STARTWPARMSA

  type
    NEWCPLINFO* = NEWCPLINFOA

type
  LPNEWCPLINFO* = ptr NEWCPLINFO

# misc/cplext.nim

const
  CPLPAGE_MOUSE_BUTTONS* = 1
  CPLPAGE_MOUSE_PTRMOTION* = 2
  CPLPAGE_MOUSE_WHEEL* = 3
  CPLPAGE_KEYBOARD_SPEED* = 1
  CPLPAGE_DISPLAY_BACKGROUND* = 1

# misc/custcntl.nim

const
  CCF_NOTEXT* = 1
  CCHCCCLASS* = 32
  CCHCCDESC* = 32
  CCHCCTEXT* = 256

type
  CCSTYLEA* {.final, pure.} = object
    flStyle*: DWORD
    flExtStyle*: DWORD
    szText*: array[CCHCCTEXT, CHAR]
    lgid*: LANGID
    wReserved1*: WORD
  LPCCSTYLEA* = ptr CCSTYLEA
  CCSTYLEW* {.final, pure.} = object
    flStyle*: DWORD
    flExtStyle*: DWORD
    szText*: array[CCHCCTEXT, WCHAR]
    lgid*: LANGID
    wReserved1*: WORD
  LPCCSTYLEW* = ptr CCSTYLEW
  CCSTYLEFLAGA* {.final, pure.} = object
    flStyle*: DWORD
    flStyleMask*: DWORD
    pszStyle*: LPSTR
  LPCCSTYLEFLAGA* = ptr CCSTYLEFLAGA
  CCSTYLEFLAGW* {.final, pure.} = object
    flStyle*: DWORD
    flStyleMask*: DWORD
    pszStyle*: LPWSTR
  LPCCSTYLEFLAGW* = ptr CCSTYLEFLAGW
  CCINFOA* {.final, pure.} = object
    szClass*: array[CCHCCCLASS, CHAR]
    flOptions*: DWORD
    szDesc*: array[CCHCCDESC, CHAR]
    cxDefault*: UINT
    cyDefault*: UINT
    flStyleDefault*: DWORD
    flExtStyleDefault*: DWORD
    flCtrlTypeMask*: DWORD
    szTextDefault*: array[CCHCCTEXT, CHAR]
    cStyleFlags*: INT
    aStyleFlags*: LPCCSTYLEFLAGA
    lpfnStyle*: LPFNCCSTYLEA
    lpfnSizeToText*: LPFNCCSIZETOTEXTA
    dwReserved1*: DWORD
    dwReserved2*: DWORD
  LPCCINFOA* = ptr CCINFOA
  CCINFOW* {.final, pure.} = object
    szClass*: array[CCHCCCLASS, WCHAR]
    flOptions*: DWORD
    szDesc*: array[CCHCCDESC, WCHAR]
    cxDefault*: UINT
    cyDefault*: UINT
    flStyleDefault*: DWORD
    flExtStyleDefault*: DWORD
    flCtrlTypeMask*: DWORD
    szTextDefault*: array[CCHCCTEXT, WCHAR]
    cStyleFlags*: INT
    aStyleFlags*: LPCCSTYLEFLAGW
    lpfnStyle*: LPFNCCSTYLEW
    lpfnSizeToText*: LPFNCCSIZETOTEXTW
    dwReserved1*: DWORD
    dwReserved2*: DWORD
  LPCCINFOW* = ptr CCINFOW
  LPFNCCSTYLEA* = proc (P1: HWND, P2: LPCCSTYLEA): BOOL {.stdcall.}
  LPFNCCSTYLEW* = proc (P1: HWND, P2: LPCCSTYLEW): BOOL {.stdcall.}
  LPFNCCSIZETOTEXTA* = proc (P1: DWORD, P2: DWORD, P3: HFONT, P4: LPSTR): INT {.stdcall.}
  LPFNCCSIZETOTEXTW* = proc (P1: DWORD, P2: DWORD, P3: HFONT, P4: LPWSTR): INT {.stdcall.}
  LPFNCCINFOA* = proc (P1: LPCCINFOA): UINT {.stdcall.}
  LPFNCCINFOW* = proc (P1: LPCCINFOW): UINT {.stdcall.}

proc CustomControlInfoA*(acci: LPCCINFOA): UINT {.winapi, dynlib: "clb", importc.}
proc CustomControlInfoW*(acci: LPCCINFOW): UINT {.winapi, dynlib: "clb", importc.}

when not defined(winansi):
  type
    CCSTYLE* = CCSTYLEW
    CCSTYLEFLAG* = CCSTYLEFLAGW
    CCINFO* = CCINFOW
    LPFNCCSTYLE* = LPFNCCSTYLEW
    LPFNCCSIZETOTEXT* = LPFNCCSIZETOTEXTW
    LPFNCCINFO* = LPFNCCINFOW

else:
  type
    CCSTYLE* = CCSTYLEA
    CCSTYLEFLAG* = CCSTYLEFLAGA
    CCINFO* = CCINFOA
    LPFNCCSTYLE* = LPFNCCSTYLEA
    LPFNCCSIZETOTEXT* = LPFNCCSIZETOTEXTA
    LPFNCCINFO* = LPFNCCINFOA

type
  LPCCSTYLE* = ptr CCSTYLE
  LPCCSTYLEFLAG* = ptr CCSTYLEFLAG
  LPCCINFO* = ptr CCINFO

# misc/dbt.nim

const
  DBT_NO_DISK_SPACE* = 0x47
  DBT_CONFIGMGPRIVATE* = 0x7FFF
  DBT_DEVICEARRIVAL* = 0x8000
  DBT_DEVICEQUERYREMOVE* = 0x8001
  DBT_DEVICEQUERYREMOVEFAILED* = 0x8002
  DBT_DEVICEREMOVEPENDING* = 0x8003
  DBT_DEVICEREMOVECOMPLETE* = 0x8004
  DBT_DEVICETYPESPECIFIC* = 0x8005
  DBT_DEVTYP_OEM* = 0
  DBT_DEVTYP_DEVNODE* = 1
  DBT_DEVTYP_VOLUME* = 2
  DBT_DEVTYP_PORT* = 3
  DBT_DEVTYP_NET* = 4
  DBT_DEVTYP_DEVICEINTERFACE* = 5
  DBT_DEVTYP_HANDLE* = 6
  DBT_APPYBEGIN* = 0
  DBT_APPYEND* = 1
  DBT_DEVNODES_CHANGED* = 7
  DBT_QUERYCHANGECONFIG* = 0x17
  DBT_CONFIGCHANGED* = 0x18
  DBT_CONFIGCHANGECANCELED* = 0x19
  DBT_MONITORCHANGE* = 0x1B
  DBT_SHELLLOGGEDON* = 32
  DBT_CONFIGMGAPI32* = 34
  DBT_VXDINITCOMPLETE* = 35
  DBT_VOLLOCKQUERYLOCK* = 0x8041
  DBT_VOLLOCKLOCKTAKEN* = 0x8042
  DBT_VOLLOCKLOCKFAILED* = 0x8043
  DBT_VOLLOCKQUERYUNLOCK* = 0x8044
  DBT_VOLLOCKLOCKRELEASED* = 0x8045
  DBT_VOLLOCKUNLOCKFAILED* = 0x8046
  DBT_USERDEFINED* = 0xFFFF
  DBTF_MEDIA* = 1
  DBTF_NET* = 2
  # BSM_ALLCOMPONENTS* = 0.DWORD
  # BSM_APPLICATIONS* = 8.DWORD
  # BSM_ALLDESKTOPS* = 16.DWORD
  # BSM_INSTALLABLEDRIVERS* = 4.DWORD
  # BSM_NETDRIVER* = 2.DWORD
  # BSM_VXDS* = 1.DWORD
  # BSF_FLUSHDISK* = 0x00000004.DWORD
  # BSF_FORCEIFHUNG* = 0x00000020.DWORD
  # BSF_IGNORECURRENTTASK* = 0x00000002.DWORD
  # BSF_NOHANG* = 0x00000008.DWORD
  # BSF_NOTIMEOUTIFNOTHUNG* = 0x00000040.DWORD
  # BSF_POSTMESSAGE* = 0x00000010.DWORD
  # BSF_QUERY* = 0x00000001.DWORD
  BSF_MSGSRV32ISOK_BIT* = 31
  BSF_MSGSRV32ISOK* = 0x80000000'u32
  # BSF_ALLOWSFW* = 0x00000080.DWORD
  # BSF_SENDNOTIFYMESSAGE* = 0x00000100.DWORD
  # BSF_LUID* = 0x00000400.DWORD
  # BSF_RETURNHDESK* = 0x00000200.DWORD

type
  DEV_BROADCAST_HDR* {.final, pure.} = object
    dbch_size*: DWORD
    dbch_devicetype*: DWORD
    dbch_reserved*: DWORD
  PDEV_BROADCAST_HDR* = ptr DEV_BROADCAST_HDR
  DEV_BROADCAST_OEM* {.final, pure.} = object
    dbco_size*: DWORD
    dbco_devicetype*: DWORD
    dbco_reserved*: DWORD
    dbco_identifier*: DWORD
    dbco_suppfunc*: DWORD
  PDEV_BROADCAST_OEM* = ptr DEV_BROADCAST_OEM
  DEV_BROADCAST_PORT_A* {.final, pure.} = object
    dbcp_size*: DWORD
    dbcp_devicetype*: DWORD
    dbcp_reserved*: DWORD
    dbcp_name*: array[1, char]
  PDEV_BROADCAST_PORT_A* = ptr DEV_BROADCAST_PORT_A
  DEV_BROADCAST_PORT_W* {.final, pure.} = object
    dbcp_size*: DWORD
    dbcp_devicetype*: DWORD
    dbcp_reserved*: DWORD
    dbcp_name*: array[1, WCHAR]
  PDEV_BROADCAST_PORT_W* = ptr DEV_BROADCAST_PORT_W
  DEV_BROADCAST_USERDEFINED* {.final, pure.} = object
    dbud_dbh*: DEV_BROADCAST_HDR
    dbud_szName*: array[1, char]
  DEV_BROADCAST_VOLUME* {.final, pure.} = object
    dbcv_size*: DWORD
    dbcv_devicetype*: DWORD
    dbcv_reserved*: DWORD
    dbcv_unitmask*: DWORD
    dbcv_flags*: WORD
  PDEV_BROADCAST_VOLUME* = ptr DEV_BROADCAST_VOLUME

when not defined(winansi):
  type
    DEV_BROADCAST_PORT* = DEV_BROADCAST_PORT_W

else:
  type
    DEV_BROADCAST_PORT* = DEV_BROADCAST_PORT_A

type
  PDEV_BROADCAST_PORT* = ptr DEV_BROADCAST_PORT
  DEV_BROADCAST_DEVICEINTERFACE_A* {.final, pure.} = object
    dbcc_size*: DWORD
    dbcc_devicetype*: DWORD
    dbcc_reserved*: DWORD
    dbcc_classguid*: GUID
    dbcc_name*: array[1, char]
  PDEV_BROADCAST_DEVICEINTERFACE_A* = ptr DEV_BROADCAST_DEVICEINTERFACE_A
  DEV_BROADCAST_DEVICEINTERFACE_W* {.final, pure.} = object
    dbcc_size*: DWORD
    dbcc_devicetype*: DWORD
    dbcc_reserved*: DWORD
    dbcc_classguid*: GUID
    dbcc_name*: array[1, WCHAR]
  PDEV_BROADCAST_DEVICEINTERFACE_W* = ptr DEV_BROADCAST_DEVICEINTERFACE_W

when not defined(winansi):
  type
    DEV_BROADCAST_DEVICEINTERFACE* = DEV_BROADCAST_DEVICEINTERFACE_W

else:
  type
    DEV_BROADCAST_DEVICEINTERFACE* = DEV_BROADCAST_DEVICEINTERFACE_A

type
  PDEV_BROADCAST_DEVICEINTERFACE* = ptr DEV_BROADCAST_DEVICEINTERFACE
  DEV_BROADCAST_HANDLE* {.final, pure.} = object
    dbch_size*: DWORD
    dbch_devicetype*: DWORD
    dbch_reserved*: DWORD
    dbch_handle*: HANDLE
    dbch_hdevnotify*: DWORD
    dbch_eventguid*: GUID
    dbch_nameoffset*: LONG
    dbch_data*: array[1, BYTE]
  PDEV_BROADCAST_HANDLE* = ptr DEV_BROADCAST_HANDLE

# misc/dde.nim

const
  WM_DDE_FIRST* = 0x03E0
  WM_DDE_INITIATE* = WM_DDE_FIRST
  WM_DDE_TERMINATE* = (WM_DDE_FIRST + 1)
  WM_DDE_ADVISE* = (WM_DDE_FIRST + 2)
  WM_DDE_UNADVISE* = (WM_DDE_FIRST + 3)
  WM_DDE_ACK* = (WM_DDE_FIRST + 4)
  WM_DDE_DATA* = (WM_DDE_FIRST + 5)
  WM_DDE_REQUEST* = (WM_DDE_FIRST + 6)
  WM_DDE_POKE* = (WM_DDE_FIRST + 7)
  WM_DDE_EXECUTE* = (WM_DDE_FIRST + 8)
  WM_DDE_LAST* = WM_DDE_EXECUTE

type
  DDEACK* {.final, pure.} = object
    bAppReturnCode*: uint8
    reserved* {.bitsize: 6.}: uint8
    fBusy* {.bitsize: 1.}: uint8
    fAck* {.bitsize: 1.}: uint8
  DDEADVISE* {.final, pure.} = object
    reserved* {.bitsize: 14.}: uint16
    fDeferUpd* {.bitsize: 1.}: uint16
    fAckReq* {.bitsize: 1.}: uint16
    cfFormat*: int16
  DDEDATA* {.final, pure.} = object
    unused* {.bitsize: 12.}: uint16
    fResponse* {.bitsize: 1.}: uint16
    fRelease* {.bitsize: 1.}: uint16
    reserved* {.bitsize: 1.}: uint16
    fAckReq* {.bitsize: 1.}: uint16
    cfFormat*: int16
    Value*: array[1, BYTE]
  DDEPOKE* {.final, pure.} = object
    unused* {.bitsize: 13.}: uint16
    fRelease* {.bitsize: 1.}: uint16
    fReserved* {.bitsize: 2.}: uint16
    cfFormat*: int16
    Value*: array[1, BYTE]
  DDELN* {.final, pure.} = object
    unused* {.bitsize: 13.}: uint16
    fRelease* {.bitsize: 1.}: uint16
    fDeferUpd* {.bitsize: 1.}: uint16
    fAckReq* {.bitsize: 1.}: uint16
    cfFormat*: int16
  DDEUP* {.final, pure.} = object
    unused* {.bitsize: 12.}: uint16
    fAck* {.bitsize: 1.}: uint16
    fRelease* {.bitsize: 1.}: uint16
    fReserved* {.bitsize: 1.}: uint16
    fAckReq* {.bitsize: 1.}: uint16
    cfFormat*: int16
    rgb*: array[1, BYTE]

proc DdeSetQualityOfService*(P1: HWND, P2: ptr SECURITY_QUALITY_OF_SERVICE, P3: PSECURITY_QUALITY_OF_SERVICE): BOOL {.winapi, dynlib: "user32", importc.}
proc ImpersonateDdeClientWindow*(P1: HWND, P2: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc PackDDElParam*(P1: UINT, P2: UINT_PTR, P3: UINT_PTR): LPARAM {.winapi, dynlib: "user32", importc.}
proc UnpackDDElParam*(P1: UINT, P2: LPARAM, P3: PUINT_PTR, P4: PUINT_PTR): BOOL {.winapi, dynlib: "user32", importc.}
proc FreeDDElParam*(P1: UINT, P2: LPARAM): BOOL {.winapi, dynlib: "user32", importc.}
proc ReuseDDElParam*(P1: LPARAM, P2: UINT, P3: UINT, P4: UINT_PTR, P5: UINT_PTR): LPARAM {.winapi, dynlib: "user32", importc.}

# misc/ddeml.nim

const
  CP_WINANSI* = 1004
  CP_WINUNICODE* = 1200
  XTYPF_NOBLOCK* = 2
  XTYPF_NODATA* = 4
  XTYPF_ACKREQ* = 8
  XCLASS_MASK* = 0xFC00
  XCLASS_BOOL* = 0x1000
  XCLASS_DATA* = 0x2000
  XCLASS_FLAGS* = 0x4000
  XCLASS_NOTIFICATION* = 0x8000
  XST_NULL* = 0
  XST_INCOMPLETE* = 1
  XST_CONNECTED* = 2
  XST_INIT1* = 3
  XST_INIT2* = 4
  XST_REQSENT* = 5
  XST_DATARCVD* = 6
  XST_POKESENT* = 7
  XST_POKEACKRCVD* = 8
  XST_EXECSENT* = 9
  XST_EXECACKRCVD* = 10
  XST_ADVSENT* = 11
  XST_UNADVSENT* = 12
  XST_ADVACKRCVD* = 13
  XST_UNADVACKRCVD* = 14
  XST_ADVDATASENT* = 15
  XST_ADVDATAACKRCVD* = 16
  XTYP_ERROR* = (XCLASS_NOTIFICATION or XTYPF_NOBLOCK)
  XTYP_ADVDATA* = (0x0010 or XCLASS_FLAGS)
  XTYP_ADVREQ* = (0x0020 or XCLASS_DATA or XTYPF_NOBLOCK)
  XTYP_ADVSTART* = (0x0030 or XCLASS_BOOL)
  XTYP_ADVSTOP* = (0x0040 or XCLASS_NOTIFICATION)
  XTYP_EXECUTE* = (0x0050 or XCLASS_FLAGS)
  XTYP_CONNECT* = (0x0060 or XCLASS_BOOL or XTYPF_NOBLOCK)
  XTYP_CONNECT_CONFIRM* = (0x0070 or XCLASS_NOTIFICATION or XTYPF_NOBLOCK)
  XTYP_XACT_COMPLETE* = (0x0080 or XCLASS_NOTIFICATION)
  XTYP_POKE* = (0x0090 or XCLASS_FLAGS)
  XTYP_REGISTER* = (0x00A0 or XCLASS_NOTIFICATION or XTYPF_NOBLOCK)
  XTYP_REQUEST* = (0x00B0 or XCLASS_DATA)
  XTYP_DISCONNECT* = (0x00C0 or XCLASS_NOTIFICATION or XTYPF_NOBLOCK)
  XTYP_UNREGISTER* = (0x00D0 or XCLASS_NOTIFICATION or XTYPF_NOBLOCK)
  XTYP_WILDCONNECT* = (0x00E0 or XCLASS_DATA or XTYPF_NOBLOCK)
  XTYP_MONITOR* = (0x00F0 or XCLASS_NOTIFICATION or XTYPF_NOBLOCK)
  XTYP_MASK* = 0x00F0
  XTYP_SHIFT* = 4
  ST_CONNECTED* = 1
  ST_ADVISE* = 2
  ST_ISLOCAL* = 4
  ST_BLOCKED* = 8
  ST_CLIENT* = 16
  ST_TERMINATED* = 32
  ST_INLIST* = 64
  ST_BLOCKNEXT* = 128
  ST_ISSELF* = 256
  DMLERR_NO_ERROR* = 0
  DMLERR_FIRST* = 0x4000
  DMLERR_ADVACKTIMEOUT* = DMLERR_FIRST
  DMLERR_BUSY* = (DMLERR_FIRST + 1)
  DMLERR_DATAACKTIMEOUT* = (DMLERR_FIRST + 2)
  DMLERR_DLL_NOT_INITIALIZED* = (DMLERR_FIRST + 3)
  DMLERR_DLL_USAGE* = (DMLERR_FIRST + 4)
  DMLERR_EXECACKTIMEOUT* = (DMLERR_FIRST + 5)
  DMLERR_INVALIDPARAMETER* = (DMLERR_FIRST + 6)
  DMLERR_LOW_MEMORY* = (DMLERR_FIRST + 7)
  DMLERR_MEMORY_ERROR* = (DMLERR_FIRST + 8)
  DMLERR_NOTPROCESSED* = (DMLERR_FIRST + 9)
  DMLERR_NO_CONV_ESTABLISHED* = (DMLERR_FIRST + 10)
  DMLERR_POKEACKTIMEOUT* = (DMLERR_FIRST + 11)
  DMLERR_POSTMSG_FAILED* = (DMLERR_FIRST + 12)
  DMLERR_REENTRANCY* = (DMLERR_FIRST + 13)
  DMLERR_SERVER_DIED* = (DMLERR_FIRST + 14)
  DMLERR_SYS_ERROR* = (DMLERR_FIRST + 15)
  DMLERR_UNADVACKTIMEOUT* = (DMLERR_FIRST + 16)
  DMLERR_UNFOUND_QUEUE_ID* = (DMLERR_FIRST + 17)
  DMLERR_LAST* = DMLERR_UNFOUND_QUEUE_ID
  APPCLASS_STANDARD* = 0
  APPCLASS_MONITOR* = 0x00000001
  APPCLASS_MASK* = 0x0000000F
  APPCMD_CLIENTONLY* = 0x00000010
  APPCMD_FILTERINITS* = 0x00000020
  APPCMD_MASK* = 0x00000FF0
  CBF_FAIL_SELFCONNECTIONS* = 0x00001000
  CBF_FAIL_CONNECTIONS* = 0x00002000
  CBF_FAIL_ADVISES* = 0x00004000
  CBF_FAIL_EXECUTES* = 0x00008000
  CBF_FAIL_POKES* = 0x00010000
  CBF_FAIL_REQUESTS* = 0x00020000
  CBF_FAIL_ALLSVRXACTIONS* = 0x0003f000
  CBF_SKIP_CONNECT_CONFIRMS* = 0x00040000
  CBF_SKIP_REGISTRATIONS* = 0x00080000
  CBF_SKIP_UNREGISTRATIONS* = 0x00100000
  CBF_SKIP_DISCONNECTS* = 0x00200000
  CBF_SKIP_ALLNOTIFICATIONS* = 0x003c0000
  MF_HSZ_INFO* = 0x01000000
  MF_SENDMSGS* = 0x02000000
  MF_POSTMSGS* = 0x04000000
  MF_CALLBACKS* = 0x08000000
  MF_ERRORS* = 0x10000000
  MF_LINKS* = 0x20000000
  MF_CONV* = 0x40000000
  MF_MASK* = 0xFF000000'u32
  EC_ENABLEALL* = 0
  EC_ENABLEONE* = ST_BLOCKNEXT
  EC_DISABLE* = ST_BLOCKED
  EC_QUERYWAITING* = 2
  DNS_REGISTER* = 1
  DNS_UNREGISTER* = 2
  DNS_FILTERON* = 4
  DNS_FILTEROFF* = 8
  MH_CREATE* = 1
  MH_KEEP* = 2
  MH_DELETE* = 3
  MH_CLEANUP* = 4

type
  HCONVLIST* = HANDLE
  HCONV* = HANDLE
  HSZ* = HANDLE
  HDDEDATA* = HANDLE
  PFNCALLBACK* = proc (P1: UINT, P2: UINT, P3: HCONV, P4: HSZ, P5: HSZ, P6: HDDEDATA, P7: DWORD, P8: DWORD): HDDEDATA {.stdcall.}
  HSZPAIR* {.final, pure.} = object
    hszSvc*: HSZ
    hszTopic*: HSZ
  PHSZPAIR* = ptr HSZPAIR
  CONVCONTEXT* {.final, pure.} = object
    cb*: UINT
    wFlags*: UINT
    wCountryID*: UINT
    iCodePage*: int32
    dwLangID*: DWORD
    dwSecurity*: DWORD
    qos*: SECURITY_QUALITY_OF_SERVICE
  PCONVCONTEXT* = ptr CONVCONTEXT
  CONVINFO* {.final, pure.} = object
    cb*: DWORD
    hUser*: DWORD
    hConvPartner*: HCONV
    hszSvcPartner*: HSZ
    hszServiceReq*: HSZ
    hszTopic*: HSZ
    hszItem*: HSZ
    wFmt*: UINT
    wType*: UINT
    wStatus*: UINT
    wConvst*: UINT
    wLastError*: UINT
    hConvList*: HCONVLIST
    ConvCtxt*: CONVCONTEXT
    hwnd*: HWND
    hwndPartner*: HWND
  PCONVINFO* = ptr CONVINFO
  DDEML_MSG_HOOK_DATA* {.final, pure.} = object
    uiLo*: UINT
    uiHi*: UINT
    cbData*: DWORD
    Data*: array[8, DWORD]
  MONHSZSTRUCT* {.final, pure.} = object
    cb*: UINT
    fsAction*: int32
    dwTime*: DWORD
    hsz*: HSZ
    hTask*: HANDLE
    str*: array[1, TCHAR]
  PMONHSZSTRUCT* = ptr MONHSZSTRUCT
  MONLINKSTRUCT* {.final, pure.} = object
    cb*: UINT
    dwTime*: DWORD
    hTask*: HANDLE
    fEstablished*: BOOL
    fNoData*: BOOL
    hszSvc*: HSZ
    hszTopic*: HSZ
    hszItem*: HSZ
    wFmt*: UINT
    fServer*: BOOL
    hConvServer*: HCONV
    hConvClient*: HCONV
  PMONLINKSTRUCT* = ptr MONLINKSTRUCT
  MONCONVSTRUCT* {.final, pure.} = object
    cb*: UINT
    fConnect*: BOOL
    dwTime*: DWORD
    hTask*: HANDLE
    hszSvc*: HSZ
    hszTopic*: HSZ
    hConvClient*: HCONV
    hConvServer*: HCONV
  PMONCONVSTRUCT* = ptr MONCONVSTRUCT
  MONCBSTRUCT* {.final, pure.} = object
    cb*: UINT
    dwTime*: DWORD
    hTask*: HANDLE
    dwRet*: DWORD
    wType*: UINT
    wFmt*: UINT
    hConv*: HCONV
    hsz1*: HSZ
    hsz2*: HSZ
    hData*: HDDEDATA
    dwData1*: ULONG_PTR
    dwData2*: ULONG_PTR
    cc*: CONVCONTEXT
    cbData*: DWORD
    Data*: array[8, DWORD]
  PMONCBSTRUCT* = ptr MONCBSTRUCT
  MONERRSTRUCT* {.final, pure.} = object
    cb*: UINT
    wLastError*: UINT
    dwTime*: DWORD
    hTask*: HANDLE
  PMONERRSTRUCT* = ptr MONERRSTRUCT
  MONMSGSTRUCT* {.final, pure.} = object
    cb*: UINT
    hwndTo*: HWND
    dwTime*: DWORD
    hTask*: HANDLE
    wMsg*: UINT
    wParam*: WPARAM
    lParam*: LPARAM
    dmhd*: DDEML_MSG_HOOK_DATA
  PMONMSGSTRUCT* = ptr MONMSGSTRUCT

proc DdeAbandonTransaction*(P1: DWORD, P2: HCONV, P3: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeAccessData*(P1: HDDEDATA, P2: PDWORD): PBYTE {.winapi, dynlib: "user32", importc.}
proc DdeAddData*(P1: HDDEDATA, P2: PBYTE, P3: DWORD, P4: DWORD): HDDEDATA {.winapi, dynlib: "user32", importc.}
proc DdeClientTransaction*(P1: PBYTE, P2: DWORD, P3: HCONV, P4: HSZ, P5: UINT, P6: UINT, P7: DWORD, P8: PDWORD): HDDEDATA {.winapi, dynlib: "user32", importc.}
proc DdeCmpStringHandles*(P1: HSZ, P2: HSZ): int32 {.winapi, dynlib: "user32", importc.}
proc DdeConnect*(P1: DWORD, P2: HSZ, P3: HSZ, P4: PCONVCONTEXT): HCONV {.winapi, dynlib: "user32", importc.}
proc DdeConnectList*(P1: DWORD, P2: HSZ, P3: HSZ, P4: HCONVLIST, P5: PCONVCONTEXT): HCONVLIST {.winapi, dynlib: "user32", importc.}
proc DdeCreateDataHandle*(P1: DWORD, P2: PBYTE, P3: DWORD, P4: DWORD, P5: HSZ, P6: UINT, P7: UINT): HDDEDATA {.winapi, dynlib: "user32", importc.}
proc DdeCreateStringHandleA*(P1: DWORD, P2: LPSTR, P3: int32): HSZ {.winapi, dynlib: "user32", importc.}
proc DdeCreateStringHandleW*(P1: DWORD, P2: LPWSTR, P3: int32): HSZ {.winapi, dynlib: "user32", importc.}
proc DdeDisconnect*(P1: HCONV): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeDisconnectList*(P1: HCONVLIST): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeEnableCallback*(P1: DWORD, P2: HCONV, P3: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeFreeDataHandle*(P1: HDDEDATA): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeFreeStringHandle*(P1: DWORD, P2: HSZ): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeGetData*(P1: HDDEDATA, P2: PBYTE, P3: DWORD, P4: DWORD): DWORD {.winapi, dynlib: "user32", importc.}
proc DdeGetLastError*(P1: DWORD): UINT {.winapi, dynlib: "user32", importc.}
proc DdeImpersonateClient*(P1: HCONV): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeInitializeA*(P1: PDWORD, P2: PFNCALLBACK, P3: DWORD, P4: DWORD): UINT {.winapi, dynlib: "user32", importc.}
proc DdeInitializeW*(P1: PDWORD, P2: PFNCALLBACK, P3: DWORD, P4: DWORD): UINT {.winapi, dynlib: "user32", importc.}
proc DdeKeepStringHandle*(P1: DWORD, P2: HSZ): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeNameService*(P1: DWORD, P2: HSZ, P3: HSZ, P4: UINT): HDDEDATA {.winapi, dynlib: "user32", importc.}
proc DdePostAdvise*(P1: DWORD, P2: HSZ, P3: HSZ): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeQueryConvInfo*(P1: HCONV, P2: DWORD, P3: PCONVINFO): UINT {.winapi, dynlib: "user32", importc.}
proc DdeQueryNextServer*(P1: HCONVLIST, P2: HCONV): HCONV {.winapi, dynlib: "user32", importc.}
proc DdeQueryStringA*(P1: DWORD, P2: HSZ, P3: LPSTR, P4: DWORD, P5: int32): DWORD {.winapi, dynlib: "user32", importc.}
proc DdeQueryStringW*(P1: DWORD, P2: HSZ, P3: LPWSTR, P4: DWORD, P5: int32): DWORD {.winapi, dynlib: "user32", importc.}
proc DdeReconnect*(P1: HCONV): HCONV {.winapi, dynlib: "user32", importc.}
proc DdeSetUserHandle*(P1: HCONV, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeUnaccessData*(P1: HDDEDATA): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeUninitialize*(P1: DWORD): BOOL {.winapi, dynlib: "user32", importc.}

const
  SZDDESYS_TOPIC* = "System"
  SZDDESYS_ITEM_TOPICS* = "Topics"
  SZDDESYS_ITEM_SYSITEMS* = "SysItems"
  SZDDESYS_ITEM_RTNMSG* = "ReturnMessage"
  SZDDESYS_ITEM_STATUS* = "Status"
  SZDDESYS_ITEM_FORMATS* = "Formats"
  SZDDESYS_ITEM_HELP* = "Help"
  SZDDE_ITEM_ITEMLIST* = "TopicItemList"

when not defined(winansi):
  proc DdeCreateStringHandle*(P1: DWORD, P2: LPWSTR, P3: int32): HSZ {.winapi, dynlib: "user32", importc: "DdeCreateStringHandleW".}
  proc DdeInitialize*(P1: PDWORD, P2: PFNCALLBACK, P3: DWORD, P4: DWORD): UINT {.winapi, dynlib: "user32", importc: "DdeInitializeW".}
  proc DdeQueryString*(P1: DWORD, P2: HSZ, P3: LPWSTR, P4: DWORD, P5: int32): DWORD {.winapi, dynlib: "user32", importc: "DdeQueryStringW".}

else:
  proc DdeCreateStringHandle*(P1: DWORD, P2: LPSTR, P3: int32): HSZ {.winapi, dynlib: "user32", importc: "DdeCreateStringHandleA".}
  proc DdeInitialize*(P1: PDWORD, P2: PFNCALLBACK, P3: DWORD, P4: DWORD): UINT {.winapi, dynlib: "user32", importc: "DdeInitializeA".}
  proc DdeQueryString*(P1: DWORD, P2: HSZ, P3: LPSTR, P4: DWORD, P5: int32): DWORD {.winapi, dynlib: "user32", importc: "DdeQueryStringA".}

# misc/dhcpcsdk.nim

const
  DHCPCAPI_REGISTER_HANDLE_EVENT* = 1
  DHCPCAPI_REQUEST_PERSISTENT* = 1
  DHCPCAPI_REQUEST_SYNCHRONOUS* = 2

type
  DHCPCAPI_CLASSID* {.final, pure.} = object
    Flags*: ULONG
    Data*: LPBYTE
    nBytesData*: ULONG
  PDHCPCAPI_CLASSID* = ptr DHCPCAPI_CLASSID
  LPDHCPCAPI_CLASSID* = ptr DHCPCAPI_CLASSID
  DHCPAPI_PARAMS* {.final, pure.} = object
    Flags*: ULONG
    OptionId*: ULONG
    IsVendor*: BOOL
    Data*: LPBYTE
    nBytesData*: DWORD
  PDHCPAPI_PARAMS* = ptr DHCPAPI_PARAMS
  LPDHCPAPI_PARAMS* = ptr DHCPAPI_PARAMS
  DHCPCAPI_PARAMS_ARRAY* {.final, pure.} = object
    nParams*: ULONG
    Params*: LPDHCPAPI_PARAMS
  PDHCPCAPI_PARAMS_ARRAY* = ptr DHCPCAPI_PARAMS_ARRAY
  LPDHCPCAPI_PARAMS_ARRAY* = ptr DHCPCAPI_PARAMS_ARRAY

proc DhcpCApiCleanup*(): void {.winapi, dynlib: "dhcpcsvc", importc.}
proc DhcpCApiInitialize*(P1: LPDWORD): DWORD {.winapi, dynlib: "dhcpcsvc", importc.}
proc DhcpDeRegisterParamChange*(P1: DWORD, P2: LPVOID, P3: LPVOID): DWORD {.winapi, dynlib: "dhcpcsvc", importc.}
proc DhcpRegisterParamChange*(P1: DWORD, P2: LPVOID, P3: PWSTR, P4: LPDHCPCAPI_CLASSID, P5: DHCPCAPI_PARAMS_ARRAY, P6: LPVOID): DWORD {.winapi, dynlib: "dhcpcsvc", importc.}
proc DhcpRemoveDNSRegistrations*(): DWORD {.winapi, dynlib: "dhcpcsvc", importc.}
proc DhcpUndoRequestParams*(P1: DWORD, P2: LPVOID, P3: LPWSTR, P4: LPWSTR): DWORD {.winapi, dynlib: "dhcpcsvc", importc.}

# misc/dlgs.nim

const
  FILEOPENORD* = 1536
  MULTIFILEOPENORD* = 1537
  PRINTDLGORD* = 1538
  PRNSETUPDLGORD* = 1539
  FINDDLGORD* = 1540
  REPLACEDLGORD* = 1541
  FONTDLGORD* = 1542
  FORMATDLGORD31* = 1543
  FORMATDLGORD30* = 1544
  PAGESETUPDLGORD* = 1546
  ctlFirst* = 0x400
  ctlLast* = 0x4ff
  chx1* = 0x410
  chx2* = 0x411
  chx3* = 0x412
  chx4* = 0x413
  chx5* = 0x414
  chx6* = 0x415
  chx7* = 0x416
  chx8* = 0x417
  chx9* = 0x418
  chx10* = 0x419
  chx11* = 0x41a
  chx12* = 0x41b
  chx13* = 0x41c
  chx14* = 0x41d
  chx15* = 0x41e
  chx16* = 0x41f
  cmb1* = 0x470
  cmb2* = 0x471
  cmb3* = 0x472
  cmb4* = 0x473
  cmb5* = 0x474
  cmb6* = 0x475
  cmb7* = 0x476
  cmb8* = 0x477
  cmb9* = 0x478
  cmb10* = 0x479
  cmb11* = 0x47a
  cmb12* = 0x47b
  cmb13* = 0x47c
  cmb14* = 0x47d
  cmb15* = 0x47e
  cmb16* = 0x47f
  edt1* = 0x480
  edt2* = 0x481
  edt3* = 0x482
  edt4* = 0x483
  edt5* = 0x484
  edt6* = 0x485
  edt7* = 0x486
  edt8* = 0x487
  edt9* = 0x488
  edt10* = 0x489
  edt11* = 0x48a
  edt12* = 0x48b
  edt13* = 0x48c
  edt14* = 0x48d
  edt15* = 0x48e
  edt16* = 0x48f
  frm1* = 0x434
  frm2* = 0x435
  frm3* = 0x436
  frm4* = 0x437
  grp1* = 0x430
  grp2* = 0x431
  grp3* = 0x432
  grp4* = 0x433
  ico1* = 0x43c
  ico2* = 0x43d
  ico3* = 0x43e
  ico4* = 0x43f
  lst1* = 0x460
  lst2* = 0x461
  lst3* = 0x462
  lst4* = 0x463
  lst5* = 0x464
  lst6* = 0x465
  lst7* = 0x466
  lst8* = 0x467
  lst9* = 0x468
  lst10* = 0x469
  lst11* = 0x46a
  lst12* = 0x46b
  lst13* = 0x46c
  lst14* = 0x46d
  lst15* = 0x46e
  lst16* = 0x46f
  psh1* = 0x400
  psh2* = 0x401
  psh3* = 0x402
  psh4* = 0x403
  psh5* = 0x404
  psh6* = 0x405
  psh7* = 0x406
  psh8* = 0x407
  psh9* = 0x408
  psh10* = 0x409
  psh11* = 0x40a
  psh12* = 0x40b
  psh13* = 0x40c
  psh14* = 0x40d
  psh15* = 0x40e
  pshHelp* = 0x40e
  psh16* = 0x40f
  rad1* = 0x420
  rad2* = 0x421
  rad3* = 0x422
  rad4* = 0x423
  rad5* = 0x424
  rad6* = 0x425
  rad7* = 0x426
  rad8* = 0x427
  rad9* = 0x428
  rad10* = 0x429
  rad11* = 0x42a
  rad12* = 0x42b
  rad13* = 0x42c
  rad14* = 0x42d
  rad15* = 0x42e
  rad16* = 0x42f
  rct1* = 0x438
  rct2* = 0x439
  rct3* = 0x43a
  rct4* = 0x43b
  scr1* = 0x490
  scr2* = 0x491
  scr3* = 0x492
  scr4* = 0x493
  scr5* = 0x494
  scr6* = 0x495
  scr7* = 0x496
  scr8* = 0x497
  stc1* = 0x440
  stc2* = 0x441
  stc3* = 0x442
  stc4* = 0x443
  stc5* = 0x444
  stc6* = 0x445
  stc7* = 0x446
  stc8* = 0x447
  stc9* = 0x448
  stc10* = 0x449
  stc11* = 0x44a
  stc12* = 0x44b
  stc13* = 0x44c
  stc14* = 0x44d
  stc15* = 0x44e
  stc16* = 0x44f
  stc17* = 0x450
  stc18* = 0x451
  stc19* = 0x452
  stc20* = 0x453
  stc21* = 0x454
  stc22* = 0x455
  stc23* = 0x456
  stc24* = 0x457
  stc25* = 0x458
  stc26* = 0x459
  stc27* = 0x45a
  stc28* = 0x45b
  stc29* = 0x45c
  stc30* = 0x45d
  stc31* = 0x45e
  stc32* = 0x45f

type
  CRGB* {.final, pure.} = object
    bRed*: uint8
    bGreen*: uint8
    bBlue*: uint8
    bExtra*: uint8

# misc/errorrep.nim

const
  # EFaultRepRetVal* = enum
  frrvOk* = 0
  frrvOkManifest* = 1
  frrvOkQueued* = 2
  frrvErr* = 3
  frrvErrNoDW* = 4
  frrvErrTimeout* = 5
  frrvLaunchDebugger* = 6
  frrvOkHeadless* = 7

type
  EFaultRepRetVal* = int32

proc AddERExcludedApplicationA*(P1: LPCSTR): BOOL {.winapi, dynlib: "faultrep", importc.}
proc AddERExcludedApplicationW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "faultrep", importc.}
proc ReportFault*(P1: LPEXCEPTION_POINTERS, P2: DWORD): EFaultRepRetVal {.winapi, dynlib: "faultrep", importc.}

when not defined(winansi):
  proc AddERExcludedApplication*(P1: LPCWSTR): BOOL {.winapi, dynlib: "faultrep", importc: "AddERExcludedApplicationW".}
else:
  proc AddERExcludedApplication*(P1: LPCSTR): BOOL {.winapi, dynlib: "faultrep", importc: "AddERExcludedApplicationA".}

# misc/exdispid.nim

const
  DISPID_STATUSTEXTCHANGE* = 102
  DISPID_PROGRESSCHANGE* = 108
  DISPID_TITLECHANGE* = 113
  DISPID_BEFORENAVIGATE2* = 250
  DISPID_NEWWINDOW2* = 251
  DISPID_DOCUMENTCOMPLETE* = 259

# misc/httpext.nim

const
  HSE_VERSION_MAJOR* = 2
  HSE_VERSION_MINOR* = 0
  HSE_LOG_BUFFER_LEN* = 80
  HSE_MAX_EXT_DLL_NAME_LEN* = 256
  HSE_STATUS_SUCCESS* = 1
  HSE_STATUS_SUCCESS_AND_KEEP_CONN* = 2
  HSE_STATUS_PENDING* = 3
  HSE_STATUS_ERROR* = 4
  HSE_REQ_BASE* = 0
  HSE_REQ_SEND_URL_REDIRECT_RESP* = 1
  HSE_REQ_SEND_URL* = 2
  HSE_REQ_SEND_RESPONSE_HEADER* = 3
  HSE_REQ_DONE_WITH_SESSION* = 4
  HSE_REQ_SEND_RESPONSE_HEADER_EX* = 1016
  HSE_REQ_END_RESERVED* = 1000
  HSE_TERM_ADVISORY_UNLOAD* = 0x00000001
  HSE_TERM_MUST_UNLOAD* = 0x2
  HSE_IO_SYNC* = 0x00000001
  HSE_IO_ASYNC* = 0x2
  HSE_IO_DISCONNECT_AFTER_SEND* = 0x00000004
  HSE_IO_SEND_HEADERS* = 0x00000008

type
  HCONN* = HANDLE
  HSE_VERSION_INFO* {.final, pure.} = object
    dwExtensionVersion*: DWORD
    lpszExtensionDesc*: array[HSE_MAX_EXT_DLL_NAME_LEN, CHAR]
  LPHSE_VERSION_INFO* = ptr HSE_VERSION_INFO
  EXTENSION_CONTROL_BLOCK* {.final, pure.} = object
    cbSize*: DWORD
    dwVersion*: DWORD
    ConnID*: HCONN
    dwHttpStatusCode*: DWORD
    lpszLogData*: array[HSE_LOG_BUFFER_LEN, CHAR]
    lpszMethod*: LPSTR
    lpszQueryString*: LPSTR
    lpszPathInfo*: LPSTR
    lpszPathTranslated*: LPSTR
    cbTotalBytes*: DWORD
    cbAvailable*: DWORD
    lpbData*: LPBYTE
    lpszContentType*: LPSTR
    GetServerVariable*: proc (P1: HCONN, P2: LPSTR, P3: LPVOID, P4: LPDWORD): BOOL {.stdcall.}
    WriteClient*: proc (P1: HCONN, P2: LPVOID, P3: LPDWORD, P4: DWORD): BOOL {.stdcall.}
    ReadClient*: proc (P1: HCONN, P2: LPVOID, P3: LPDWORD): BOOL {.stdcall.}
    ServerSupportFunction*: proc (P1: HCONN, P2: DWORD, P3: LPVOID, P4: LPDWORD, P5: LPDWORD): BOOL {.stdcall.}
  PFN_GETEXTENSIONVERSION* = proc (P1: ptr HSE_VERSION_INFO): BOOL {.stdcall.}
  PFN_HTTPEXTENSIONPROC* = proc (P1: ptr EXTENSION_CONTROL_BLOCK): DWORD {.stdcall.}
  PFN_TERMINATEEXTENSION* = proc (P1: DWORD): BOOL {.stdcall.}
  PFN_HSE_IO_COMPLETION* = proc (P1: ptr EXTENSION_CONTROL_BLOCK, P2: PVOID, P3: DWORD, P4: DWORD): VOID {.stdcall.}
  LPEXTENSION_CONTROL_BLOCK* = ptr EXTENSION_CONTROL_BLOCK
  HSE_TF_INFO* {.final, pure.} = object
    pfnHseIO*: PFN_HSE_IO_COMPLETION
    pContext*: PVOID
    hFile*: HANDLE
    pszStatusCode*: LPCSTR
    BytesToWrite*: DWORD
    Offset*: DWORD
    pHead*: PVOID
    HeadLength*: DWORD
    pTail*: PVOID
    TailLength*: DWORD
    dwFlags*: DWORD
  LPHSE_TF_INFO* = ptr HSE_TF_INFO
  HSE_SEND_HEADER_EX_INFO* {.final, pure.} = object
    pszStatus*: LPCSTR
    pszHeader*: LPCSTR
    cchStatus*: DWORD
    cchHeader*: DWORD
    fKeepConn*: BOOL
  LPHSE_SEND_HEADER_EX_INF* = ptr HSE_SEND_HEADER_EX_INFO

# misc/idispids.nim

const
  DISPID_AMBIENT_OFFLINEIFNOTCONNECTED* = -5501
  DISPID_AMBIENT_SILENT* = -5502

# misc/intshcut.nim

const
  # IURL_SETURL_FLAGS* = enum
  IURL_SETURL_FL_GUESS_PROTOCOL* = 1
  IURL_SETURL_FL_USE_DEFAULT_PROTOCOL* = 2
  ALL_IURL_SETURL_FLAGS* = 3
  # IURL_INVOKECOMMAND_FLAGS* = enum
  IURL_INVOKECOMMAND_FL_ALLOW_UI* = 1
  IURL_INVOKECOMMAND_FL_USE_DEFAULT_VERB* = 2
  ALL_IURL_INVOKECOMMAND_FLAGS* = 3
  # TRANSLATEURL_IN_FLAGS* = enum
  TRANSLATEURL_FL_GUESS_PROTOCOL* = 1
  TRANSLATEURL_FL_USE_DEFAULT_PROTOCOL* = 2
  ALL_TRANSLATEURL_FLAGS* = 3
  # URLASSOCIATIONDIALOG_IN_FLAGS* = enum
  URLASSOCDLG_FL_USE_DEFAULT_NAME* = 1
  URLASSOCDLG_FL_REGISTER_ASSOC* = 2
  ALL_URLASSOCDLG_FLAGS* = 3
  # MIMEASSOCIATIONDIALOG_IN_FLAGS* = enum
  MIMEASSOCDLG_FL_REGISTER_ASSOC* = 1

const
  E_FLAGS* = -2147217408
  URL_E_INVALID_SYNTAX* = -2147217407
  URL_E_UNREGISTERED_PROTOCOL* = -2147217406
  IS_E_EXEC_FAILED* = -2147213310

type
  IURL_SETURL_FLAGS* = int32
  IURL_INVOKECOMMAND_FLAGS* = int32
  TRANSLATEURL_IN_FLAGS* = int32
  URLASSOCIATIONDIALOG_IN_FLAGS* = int32
  MIMEASSOCIATIONDIALOG_IN_FLAGS* = int32
  URLINVOKECOMMANDINFO* {.final, pure.} = object
    dwcbSize*: DWORD
    dwFlags*: DWORD
    hwndParent*: HWND
    pcszVerb*: PCSTR
  CURLINVOKECOMMANDINFO* = URLINVOKECOMMANDINFO
  PURLINVOKECOMMANDINFO* = ptr URLINVOKECOMMANDINFO
  PCURLINVOKECOMMANDINFO* = ptr URLINVOKECOMMANDINFO
  IUniformResourceLocator* {.pure.} = object
    lpVtbl*: ptr IUniformResourceLocatorVtbl
  IUniformResourceLocatorVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetURL*: proc(self: ptr IUniformResourceLocator, P1: PCSTR, P2: DWORD): HRESULT {.stdcall.}
    GetURL*: proc(self: ptr IUniformResourceLocator, P1: ptr PSTR): HRESULT {.stdcall.}
    InvokeCommand*: proc(self: ptr IUniformResourceLocator, P1: PURLINVOKECOMMANDINFO): HRESULT {.stdcall.}
  CIUniformResourceLocator* = ptr IUniformResourceLocator
  PIUniformResourceLocator* = ptr IUniformResourceLocator
  PCIUniformResourceLocator* = ptr IUniformResourceLocator

proc InetIsOffline*(P1: DWORD): BOOL {.winapi, dynlib: "url", importc.}
proc MIMEAssociationDialogA*(P1: HWND, P2: DWORD, P3: PCSTR, P4: PCSTR, P5: PSTR, P6: UINT): HRESULT {.winapi, dynlib: "url", importc.}
proc MIMEAssociationDialogW*(P1: HWND, P2: DWORD, P3: PCWSTR, P4: PCWSTR, P5: PWSTR, P6: UINT): HRESULT {.winapi, dynlib: "url", importc.}
proc TranslateURLA*(P1: PCSTR, P2: DWORD, P3: ptr PSTR): HRESULT {.winapi, dynlib: "url", importc.}
proc TranslateURLW*(P1: PCWSTR, P2: DWORD, P3: ptr PWSTR): HRESULT {.winapi, dynlib: "url", importc.}
proc URLAssociationDialogA*(P1: HWND, P2: DWORD, P3: PCSTR, P4: PCSTR, P5: PSTR, P6: UINT): HRESULT {.winapi, dynlib: "url", importc.}
proc URLAssociationDialogW*(P1: HWND, P2: DWORD, P3: PCWSTR, P4: PCWSTR, P5: PWSTR, P6: UINT): HRESULT {.winapi, dynlib: "url", importc.}

when not defined(winansi):
  proc TranslateURL*(P1: PCWSTR, P2: DWORD, P3: ptr PWSTR): HRESULT {.winapi, dynlib: "url", importc: "TranslateURLW".}
  proc MIMEAssociationDialog*(P1: HWND, P2: DWORD, P3: PCWSTR, P4: PCWSTR, P5: PWSTR, P6: UINT): HRESULT {.winapi, dynlib: "url", importc: "MIMEAssociationDialogW".}
  proc URLAssociationDialog*(P1: HWND, P2: DWORD, P3: PCWSTR, P4: PCWSTR, P5: PWSTR, P6: UINT): HRESULT {.winapi, dynlib: "url", importc: "URLAssociationDialogW".}

else:
  proc TranslateURL*(P1: PCSTR, P2: DWORD, P3: ptr PSTR): HRESULT {.winapi, dynlib: "url", importc: "TranslateURLA".}
  proc MIMEAssociationDialog*(P1: HWND, P2: DWORD, P3: PCSTR, P4: PCSTR, P5: PSTR, P6: UINT): HRESULT {.winapi, dynlib: "url", importc: "MIMEAssociationDialogA".}
  proc URLAssociationDialog*(P1: HWND, P2: DWORD, P3: PCSTR, P4: PCSTR, P5: PSTR, P6: UINT): HRESULT {.winapi, dynlib: "url", importc: "URLAssociationDialogA".}

converter winim_converter_IUniformResourceLocator*(x: ptr IUniformResourceLocator): ptr IUnknown = cast[ptr IUnknown](x)
proc SetURL*(self: ptr IUniformResourceLocator, P1: PCSTR, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetURL(self, P1, P2)
proc GetURL*(self: ptr IUniformResourceLocator, P1: ptr PSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetURL(self, P1)
proc InvokeCommand*(self: ptr IUniformResourceLocator, P1: PURLINVOKECOMMANDINFO): HRESULT {.inline, discardable.} = self.lpVtbl.InvokeCommand(self, P1)

# misc/ipexport.nim

type
  IP_STATUS* = uint32

const
  MAX_ADAPTER_NAME* = 128
  IP_SUCCESS* = 0
  IP_STATUS_BASE* = 11000
  IP_BUF_TOO_SMALL* = 11001
  IP_DEST_NET_UNREACHABLE* = 11002
  IP_DEST_HOST_UNREACHABLE* = 11003
  IP_DEST_PROT_UNREACHABLE* = 11004
  IP_DEST_PORT_UNREACHABLE* = 11005
  IP_NO_RESOURCES* = 11006
  IP_BAD_OPTION* = 11007
  IP_HW_ERROR* = 11008
  IP_PACKET_TOO_BIG* = 11009
  IP_REQ_TIMED_OUT* = 11010
  IP_BAD_REQ* = 11011
  IP_BAD_ROUTE* = 11012
  IP_TTL_EXPIRED_TRANSIT* = 11013
  IP_TTL_EXPIRED_REASSEM* = 11014
  IP_PARAM_PROBLEM* = 11015
  IP_SOURCE_QUENCH* = 11016
  IP_OPTION_TOO_BIG* = 11017
  IP_BAD_DESTINATION* = 11018
  IP_ADDR_DELETED* = 11019
  IP_SPEC_MTU_CHANGE* = 11020
  IP_MTU_CHANGE* = 11021
  IP_UNLOAD* = 11022
  IP_GENERAL_FAILURE* = (IP_STATUS_BASE + 50).IP_STATUS
  MAX_IP_STATUS* = IP_GENERAL_FAILURE.IP_STATUS
  IP_PENDING* = (IP_STATUS_BASE + 255).IP_STATUS
  IP_FLAG_DF* = 2
  IP_OPT_EOL* = 0
  IP_OPT_NOP* = 0x01
  IP_OPT_RR* = 0x07
  IP_OPT_SECURITY* = 0x82
  IP_OPT_LSRR* = 0x83
  IP_OPT_SSRR* = 0x89
  IP_OPT_TS* = 0x44
  IP_OPT_SID* = 0x88
  IP_OPT_ROUTER_ALERT* = 0x94
  MAX_OPT_SIZE* = 40

type
  # IPAddr* = uint32
  IPMask* = uint32
  IP_OPTION_INFORMATION* {.final, pure.} = object
    Ttl*: uint8
    Tos*: uint8
    Flags*: uint8
    OptionsSize*: uint8
    OptionsData*: ptr uint8
  PIP_OPTION_INFORMATION* = ptr IP_OPTION_INFORMATION
  ICMP_ECHO_REPLY* {.final, pure.} = object
    Address*: IPAddr
    Status*: uint32
    RoundTripTime*: uint32
    DataSize*: uint16
    Reserved*: uint16
    Data*: pointer
    Options*: IP_OPTION_INFORMATION
  PICMP_ECHO_REPLY* = ptr ICMP_ECHO_REPLY
  IP_ADAPTER_INDEX_MAP* {.final, pure.} = object
    Index*: ULONG
    Name*: array[MAX_ADAPTER_NAME, WCHAR]
  PIP_ADAPTER_INDEX_MAP* = ptr IP_ADAPTER_INDEX_MAP
  IP_INTERFACE_INFO* {.final, pure.} = object
    NumAdapters*: LONG
    Adapter*: array[1, IP_ADAPTER_INDEX_MAP]
  PIP_INTERFACE_INFO* = ptr IP_INTERFACE_INFO
  IP_UNIDIRECTIONAL_ADAPTER_ADDRESS* {.final, pure.} = object
    NumAdapters*: ULONG
    Address*: array[1, IPAddr]
  PIP_UNIDIRECTIONAL_ADAPTER_ADDRESS* = ptr IP_UNIDIRECTIONAL_ADAPTER_ADDRESS

# misc/ipifcons.nim

const
  MIB_IF_ADMIN_STATUS_UP* = 1
  MIB_IF_ADMIN_STATUS_DOWN* = 2
  MIB_IF_ADMIN_STATUS_TESTING* = 3
  MIB_IF_OPER_STATUS_NON_OPERATIONAL* = 0
  MIB_IF_OPER_STATUS_UNREACHABLE* = 1
  MIB_IF_OPER_STATUS_DISCONNECTED* = 2
  MIB_IF_OPER_STATUS_CONNECTING* = 3
  MIB_IF_OPER_STATUS_CONNECTED* = 4
  MIB_IF_OPER_STATUS_OPERATIONAL* = 5
  MIB_IF_TYPE_OTHER* = 1
  MIB_IF_TYPE_ETHERNET* = 6
  MIB_IF_TYPE_TOKENRING* = 9
  MIB_IF_TYPE_FDDI* = 15
  MIB_IF_TYPE_PPP* = 23
  MIB_IF_TYPE_LOOPBACK* = 24
  MIB_IF_TYPE_SLIP* = 28

# misc/iprtrmib.nim

const
  MAXLEN_PHYSADDR* = 8
  MAXLEN_IFDESCR* = 256
  MAX_INTERFACE_NAME_LEN* = 256
  MIB_IPNET_TYPE_OTHER* = 1
  MIB_IPNET_TYPE_INVALID* = 2
  MIB_IPNET_TYPE_DYNAMIC* = 3
  MIB_IPNET_TYPE_STATIC* = 4
  MIB_TCP_RTO_OTHER* = 1
  MIB_TCP_RTO_CONSTANT* = 2
  MIB_TCP_RTO_RSRE* = 3
  MIB_TCP_RTO_VANJ* = 4
  MIB_TCP_STATE_CLOSED* = 1
  MIB_TCP_STATE_LISTEN* = 2
  MIB_TCP_STATE_SYN_SENT* = 3
  MIB_TCP_STATE_SYN_RCVD* = 4
  MIB_TCP_STATE_ESTAB* = 5
  MIB_TCP_STATE_FIN_WAIT1* = 6
  MIB_TCP_STATE_FIN_WAIT2* = 7
  MIB_TCP_STATE_CLOSE_WAIT* = 8
  MIB_TCP_STATE_CLOSING* = 9
  MIB_TCP_STATE_LAST_ACK* = 10
  MIB_TCP_STATE_TIME_WAIT* = 11
  MIB_TCP_STATE_DELETE_TCB* = 12
  MIB_USE_CURRENT_TTL* = 0xFFFFFFFF'u32
  MIB_USE_CURRENT_FORWARDING* = 0xFFFFFFFF'u32
  MIB_TCP_MAXCONN_DYNAMIC* = 0xFFFFFFFF'u32

type
  MIB_IPADDRROW* {.final, pure.} = object
    dwAddr*: DWORD
    dwIndex*: DWORD
    dwMask*: DWORD
    dwBCastAddr*: DWORD
    dwReasmSize*: DWORD
    unused1*: uint16
    unused2*: uint16
  PMIB_IPADDRROW* = ptr MIB_IPADDRROW
  MIB_IPADDRTABLE* {.final, pure.} = object
    dwNumEntries*: DWORD
    table*: array[1, MIB_IPADDRROW]
  PMIB_IPADDRTABLE* = ptr MIB_IPADDRTABLE
  MIB_IPFORWARDROW* {.final, pure.} = object
    dwForwardDest*: DWORD
    dwForwardMask*: DWORD
    dwForwardPolicy*: DWORD
    dwForwardNextHop*: DWORD
    dwForwardIfIndex*: DWORD
    dwForwardType*: DWORD
    dwForwardProto*: DWORD
    dwForwardAge*: DWORD
    dwForwardNextHopAS*: DWORD
    dwForwardMetric1*: DWORD
    dwForwardMetric2*: DWORD
    dwForwardMetric3*: DWORD
    dwForwardMetric4*: DWORD
    dwForwardMetric5*: DWORD
  PMIB_IPFORWARDROW* = ptr MIB_IPFORWARDROW
  MIB_IPFORWARDTABLE* {.final, pure.} = object
    dwNumEntries*: DWORD
    table*: array[1, MIB_IPFORWARDROW]
  PMIB_IPFORWARDTABLE* = ptr MIB_IPFORWARDTABLE
  MIB_IPNETROW* {.final, pure.} = object
    dwIndex*: DWORD
    dwPhysAddrLen*: DWORD
    bPhysAddr*: array[MAXLEN_PHYSADDR, BYTE]
    dwAddr*: DWORD
    dwType*: DWORD
  PMIB_IPNETROW* = ptr MIB_IPNETROW
  MIB_IPNETTABLE* {.final, pure.} = object
    dwNumEntries*: DWORD
    table*: array[1, MIB_IPNETROW]
  PMIB_IPNETTABLE* = ptr MIB_IPNETTABLE
  MIBICMPSTATS* {.final, pure.} = object
    dwMsgs*: DWORD
    dwErrors*: DWORD
    dwDestUnreachs*: DWORD
    dwTimeExcds*: DWORD
    dwParmProbs*: DWORD
    dwSrcQuenchs*: DWORD
    dwRedirects*: DWORD
    dwEchos*: DWORD
    dwEchoReps*: DWORD
    dwTimestamps*: DWORD
    dwTimestampReps*: DWORD
    dwAddrMasks*: DWORD
    dwAddrMaskReps*: DWORD
  PMIBICMPSTATS* = ptr MIBICMPSTATS
  MIBICMPINFO* {.final, pure.} = object
    icmpInStats*: MIBICMPSTATS
    icmpOutStats*: MIBICMPSTATS
  PMIBICMPINFO* = ptr MIBICMPINFO
  MIB_ICMP* {.final, pure.} = object
    stats*: MIBICMPINFO
  PMIB_ICMP* = ptr MIB_ICMP
  MIB_IFROW* {.final, pure.} = object
    wszName*: array[MAX_INTERFACE_NAME_LEN, WCHAR]
    dwIndex*: DWORD
    dwType*: DWORD
    dwMtu*: DWORD
    dwSpeed*: DWORD
    dwPhysAddrLen*: DWORD
    bPhysAddr*: array[MAXLEN_PHYSADDR, BYTE]
    dwAdminStatus*: DWORD
    dwOperStatus*: DWORD
    dwLastChange*: DWORD
    dwInOctets*: DWORD
    dwInUcastPkts*: DWORD
    dwInNUcastPkts*: DWORD
    dwInDiscards*: DWORD
    dwInErrors*: DWORD
    dwInUnknownProtos*: DWORD
    dwOutOctets*: DWORD
    dwOutUcastPkts*: DWORD
    dwOutNUcastPkts*: DWORD
    dwOutDiscards*: DWORD
    dwOutErrors*: DWORD
    dwOutQLen*: DWORD
    dwDescrLen*: DWORD
    bDescr*: array[MAXLEN_IFDESCR, BYTE]
  PMIB_IFROW* = ptr MIB_IFROW
  MIB_IFTABLE* {.final, pure.} = object
    dwNumEntries*: DWORD
    table*: array[1, MIB_IFROW]
  PMIB_IFTABLE* = ptr MIB_IFTABLE
  MIB_IPSTATS* {.final, pure.} = object
    dwForwarding*: DWORD
    dwDefaultTTL*: DWORD
    dwInReceives*: DWORD
    dwInHdrErrors*: DWORD
    dwInAddrErrors*: DWORD
    dwForwDatagrams*: DWORD
    dwInUnknownProtos*: DWORD
    dwInDiscards*: DWORD
    dwInDelivers*: DWORD
    dwOutRequests*: DWORD
    dwRoutingDiscards*: DWORD
    dwOutDiscards*: DWORD
    dwOutNoRoutes*: DWORD
    dwReasmTimeout*: DWORD
    dwReasmReqds*: DWORD
    dwReasmOks*: DWORD
    dwReasmFails*: DWORD
    dwFragOks*: DWORD
    dwFragFails*: DWORD
    dwFragCreates*: DWORD
    dwNumIf*: DWORD
    dwNumAddr*: DWORD
    dwNumRoutes*: DWORD
  PMIB_IPSTATS* = ptr MIB_IPSTATS
  MIB_TCPSTATS* {.final, pure.} = object
    dwRtoAlgorithm*: DWORD
    dwRtoMin*: DWORD
    dwRtoMax*: DWORD
    dwMaxConn*: DWORD
    dwActiveOpens*: DWORD
    dwPassiveOpens*: DWORD
    dwAttemptFails*: DWORD
    dwEstabResets*: DWORD
    dwCurrEstab*: DWORD
    dwInSegs*: DWORD
    dwOutSegs*: DWORD
    dwRetransSegs*: DWORD
    dwInErrs*: DWORD
    dwOutRsts*: DWORD
    dwNumConns*: DWORD
  PMIB_TCPSTATS* = ptr MIB_TCPSTATS
  MIB_TCPROW* {.final, pure.} = object
    dwState*: DWORD
    dwLocalAddr*: DWORD
    dwLocalPort*: DWORD
    dwRemoteAddr*: DWORD
    dwRemotePort*: DWORD
  PMIB_TCPROW* = ptr MIB_TCPROW
  MIB_TCPTABLE* {.final, pure.} = object
    dwNumEntries*: DWORD
    table*: array[1, MIB_TCPROW]
  PMIB_TCPTABLE* = ptr MIB_TCPTABLE
  MIB_UDPSTATS* {.final, pure.} = object
    dwInDatagrams*: DWORD
    dwNoPorts*: DWORD
    dwInErrors*: DWORD
    dwOutDatagrams*: DWORD
    dwNumAddrs*: DWORD
  PMIB_UDPSTATS* = ptr MIB_UDPSTATS
  MIB_UDPROW* {.final, pure.} = object
    dwLocalAddr*: DWORD
    dwLocalPort*: DWORD
  PMIB_UDPROW* = ptr MIB_UDPROW
  MIB_UDPTABLE* {.final, pure.} = object
    dwNumEntries*: DWORD
    table*: array[1, MIB_UDPROW]
  PMIB_UDPTABLE* = ptr MIB_UDPTABLE

# misc/iptypes.nim

const
  DEFAULT_MINIMUM_ENTITIES* = 32
  MAX_ADAPTER_ADDRESS_LENGTH* = 8
  MAX_ADAPTER_DESCRIPTION_LENGTH* = 128
  MAX_ADAPTER_NAME_LENGTH* = 256
  MAX_DOMAIN_NAME_LEN* = 128
  MAX_HOSTNAME_LEN* = 128
  MAX_SCOPE_ID_LEN* = 256
  BROADCAST_NODETYPE* = 1
  PEER_TO_PEER_NODETYPE* = 2
  MIXED_NODETYPE* = 4
  HYBRID_NODETYPE* = 8
  IF_OTHER_ADAPTERTYPE* = 0
  IF_ETHERNET_ADAPTERTYPE* = 1
  IF_TOKEN_RING_ADAPTERTYPE* = 2
  IF_FDDI_ADAPTERTYPE* = 3
  IF_PPP_ADAPTERTYPE* = 4
  IF_LOOPBACK_ADAPTERTYPE* = 5

type
  IP_ADDRESS_STRING* {.final, pure.} = object
    String*: array[16, char]
  IP_MASK_STRING* = IP_ADDRESS_STRING
  PIP_ADDRESS_STRING* = ptr IP_ADDRESS_STRING
  PIP_MASK_STRING* = ptr IP_ADDRESS_STRING
  IP_ADDR_STRING* {.final, pure.} = object
    Next*: ptr IP_ADDR_STRING
    IpAddress*: IP_ADDRESS_STRING
    IpMask*: IP_MASK_STRING
    Context*: DWORD
  PIP_ADDR_STRING* = ptr IP_ADDR_STRING
  IP_ADAPTER_INFO* {.final, pure.} = object
    Next*: ptr IP_ADAPTER_INFO
    ComboIndex*: DWORD
    AdapterName*: array[MAX_ADAPTER_NAME_LENGTH+4, char]
    Description*: array[MAX_ADAPTER_DESCRIPTION_LENGTH+4, char]
    AddressLength*: UINT
    Address*: array[MAX_ADAPTER_ADDRESS_LENGTH, BYTE]
    Index*: DWORD
    Type*: UINT
    DhcpEnabled*: UINT
    CurrentIpAddress*: PIP_ADDR_STRING
    IpAddressList*: IP_ADDR_STRING
    GatewayList*: IP_ADDR_STRING
    DhcpServer*: IP_ADDR_STRING
    HaveWins*: BOOL
    PrimaryWinsServer*: IP_ADDR_STRING
    SecondaryWinsServer*: IP_ADDR_STRING
    LeaseObtained*: int32
    LeaseExpires*: int32
  PIP_ADAPTER_INFO* = ptr IP_ADAPTER_INFO
  IP_PER_ADAPTER_INFO* {.final, pure.} = object
    AutoconfigEnabled*: UINT
    AutoconfigActive*: UINT
    CurrentDnsServer*: PIP_ADDR_STRING
    DnsServerList*: IP_ADDR_STRING
  PIP_PER_ADAPTER_INFO* = ptr IP_PER_ADAPTER_INFO
  FIXED_INFO* {.final, pure.} = object
    HostName*: array[MAX_HOSTNAME_LEN+4, char]
    DomainName*: array[MAX_DOMAIN_NAME_LEN+4, char]
    CurrentDnsServer*: PIP_ADDR_STRING
    DnsServerList*: IP_ADDR_STRING
    NodeType*: UINT
    ScopeId*: array[MAX_SCOPE_ID_LEN+4, char]
    EnableRouting*: UINT
    EnableProxy*: UINT
    EnableDns*: UINT
  PFIXED_INFO* = ptr FIXED_INFO

# misc/iphlpapi.nim

proc AddIPAddress*(P1: IPAddr, P2: IPMask, P3: DWORD, P4: PULONG, P5: PULONG): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc CreateIpForwardEntry*(P1: PMIB_IPFORWARDROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc CreateIpNetEntry*(P1: PMIB_IPNETROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc CreateProxyArpEntry*(P1: DWORD, P2: DWORD, P3: DWORD): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc DeleteIPAddress*(P1: ULONG): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc DeleteIpForwardEntry*(P1: PMIB_IPFORWARDROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc DeleteIpNetEntry*(P1: PMIB_IPNETROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc DeleteProxyArpEntry*(P1: DWORD, P2: DWORD, P3: DWORD): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc EnableRouter*(P1: ptr HANDLE, P2: ptr OVERLAPPED): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc FlushIpNetTable*(P1: DWORD): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetAdapterIndex*(P1: LPWSTR, P2: PULONG): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetAdaptersInfo*(P1: PIP_ADAPTER_INFO, P2: PULONG): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetBestInterface*(P1: IPAddr, P2: PDWORD): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetBestRoute*(P1: DWORD, P2: DWORD, P3: PMIB_IPFORWARDROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetFriendlyIfIndex*(P1: DWORD): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetIcmpStatistics*(P1: PMIB_ICMP): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetIfEntry*(P1: PMIB_IFROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetIfTable*(P1: PMIB_IFTABLE, P2: PULONG, P3: BOOL): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetInterfaceInfo*(P1: PIP_INTERFACE_INFO, P2: PULONG): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetIpAddrTable*(P1: PMIB_IPADDRTABLE, P2: PULONG, P3: BOOL): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetIpForwardTable*(P1: PMIB_IPFORWARDTABLE, P2: PULONG, P3: BOOL): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetIpNetTable*(P1: PMIB_IPNETTABLE, P2: PULONG, P3: BOOL): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetIpStatistics*(P1: PMIB_IPSTATS): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetNetworkParams*(P1: PFIXED_INFO, P2: PULONG): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetNumberOfInterfaces*(P1: PDWORD): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetPerAdapterInfo*(P1: ULONG, P2: PIP_PER_ADAPTER_INFO, P3: PULONG): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetRTTAndHopCount*(P1: IPAddr, P2: PULONG, P3: ULONG, P4: PULONG): BOOL {.winapi, dynlib: "iphlpapi", importc.}
proc GetTcpStatistics*(P1: PMIB_TCPSTATS): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetTcpTable*(P1: PMIB_TCPTABLE, P2: PDWORD, P3: BOOL): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetUniDirectionalAdapterInfo*(P1: PIP_UNIDIRECTIONAL_ADAPTER_ADDRESS, P2: PULONG): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetUdpStatistics*(P1: PMIB_UDPSTATS): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetUdpTable*(P1: PMIB_UDPTABLE, P2: PDWORD, P3: BOOL): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc IpReleaseAddress*(P1: PIP_ADAPTER_INDEX_MAP): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc IpRenewAddress*(P1: PIP_ADAPTER_INDEX_MAP): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc NotifyAddrChange*(P1: PHANDLE, P2: LPOVERLAPPED): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc NotifyRouteChange*(P1: PHANDLE, P2: LPOVERLAPPED): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc SendARP*(P1: IPAddr, P2: IPAddr, P3: PULONG, P4: PULONG): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc SetIfEntry*(P1: PMIB_IFROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc SetIpForwardEntry*(P1: PMIB_IPFORWARDROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc SetIpNetEntry*(P1: PMIB_IPNETROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc SetIpStatistics*(P1: PMIB_IPSTATS): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc SetIpTTL*(P1: UINT): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc SetTcpEntry*(P1: PMIB_TCPROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc UnenableRouter*(P1: ptr OVERLAPPED, P2: LPDWORD): DWORD {.winapi, dynlib: "iphlpapi", importc.}

# misc/lzexpand.nim

const
  LZERROR_BADINHANDLE* = -1
  LZERROR_BADOUTHANDLE* = -2
  LZERROR_READ* = -3
  LZERROR_WRITE* = -4
  LZERROR_GLOBALLOC* = -5
  LZERROR_GLOBLOCK* = -6
  LZERROR_BADVALUE* = -7
  LZERROR_UNKNOWNALG* = -8

proc CopyLZFile*(P1: INT, P2: INT): LONG {.winapi, dynlib: "lz32", importc.}
proc LZDone*(): void {.winapi, dynlib: "lz32", importc.}
proc LZStart*(): INT {.winapi, dynlib: "lz32", importc.}
proc GetExpandedNameA*(P1: LPSTR, P2: LPSTR): INT {.winapi, dynlib: "lz32", importc.}
proc GetExpandedNameW*(P1: LPWSTR, P2: LPWSTR): INT {.winapi, dynlib: "lz32", importc.}
proc LZClose*(P1: INT): void {.winapi, dynlib: "lz32", importc.}
proc LZCopy*(P1: INT, P2: INT): LONG {.winapi, dynlib: "lz32", importc.}
proc LZInit*(P1: INT): INT {.winapi, dynlib: "lz32", importc.}
proc LZOpenFileA*(P1: LPSTR, P2: LPOFSTRUCT, P3: WORD): INT {.winapi, dynlib: "lz32", importc.}
proc LZOpenFileW*(P1: LPWSTR, P2: LPOFSTRUCT, P3: WORD): INT {.winapi, dynlib: "lz32", importc.}
proc LZRead*(P1: INT, P2: LPSTR, P3: INT): INT {.winapi, dynlib: "lz32", importc.}
proc LZSeek*(P1: INT, P2: LONG, P3: INT): LONG {.winapi, dynlib: "lz32", importc.}

when not defined(winansi):
  proc GetExpandedName*(P1: LPWSTR, P2: LPWSTR): INT {.winapi, dynlib: "lz32", importc: "GetExpandedNameW".}
  proc LZOpenFile*(P1: LPWSTR, P2: LPOFSTRUCT, P3: WORD): INT {.winapi, dynlib: "lz32", importc: "LZOpenFileW".}

else:
  proc GetExpandedName*(P1: LPSTR, P2: LPSTR): INT {.winapi, dynlib: "lz32", importc: "GetExpandedNameA".}
  proc LZOpenFile*(P1: LPSTR, P2: LPOFSTRUCT, P3: WORD): INT {.winapi, dynlib: "lz32", importc: "LZOpenFileA".}

# misc/mapi.nim

const
  SUCCESS_SUCCESS* = 0
  MAPI_USER_ABORT* = 1
  MAPI_E_USER_ABORT* = MAPI_USER_ABORT
  MAPI_E_FAILURE* = MAPI_USER_ABORT + 1
  MAPI_E_LOGIN_FAILURE* = MAPI_USER_ABORT + 2
  MAPI_E_LOGON_FAILURE* = MAPI_E_LOGIN_FAILURE
  MAPI_E_DISK_FULL* = 4
  MAPI_E_INSUFFICIENT_MEMORY* = 5
  MAPI_E_ACCESS_DENIED* = 6
  MAPI_E_BLK_TOO_SMALL* = MAPI_E_ACCESS_DENIED
  MAPI_E_TOO_MANY_SESSIONS* = 8
  MAPI_E_TOO_MANY_FILES* = 9
  MAPI_E_TOO_MANY_RECIPIENTS* = 10
  MAPI_E_ATTACHMENT_NOT_FOUND* = 11
  MAPI_E_ATTACHMENT_OPEN_FAILURE* = 12
  MAPI_E_ATTACHMENT_WRITE_FAILURE* = 13
  MAPI_E_UNKNOWN_RECIPIENT* = 14
  MAPI_E_BAD_RECIPTYPE* = 15
  MAPI_E_NO_MESSAGES* = 16
  MAPI_E_INVALID_MESSAGE* = 17
  MAPI_E_TEXT_TOO_LARGE* = 18
  MAPI_E_INVALID_SESSION* = 19
  MAPI_E_TYPE_NOT_SUPPORTED* = 20
  MAPI_E_AMBIGUOUS_RECIPIENT* = 21
  MAPI_E_AMBIGUOUS_RECIP* = MAPI_E_AMBIGUOUS_RECIPIENT
  MAPI_E_MESSAGE_IN_USE* = MAPI_E_AMBIGUOUS_RECIPIENT + 1
  MAPI_E_NETWORK_FAILURE* = MAPI_E_AMBIGUOUS_RECIPIENT + 2
  MAPI_E_INVALID_EDITFIELDS* = MAPI_E_AMBIGUOUS_RECIPIENT + 3
  MAPI_E_INVALID_RECIPS* = MAPI_E_AMBIGUOUS_RECIPIENT + 4
  MAPI_E_NOT_SUPPORTED* = MAPI_E_AMBIGUOUS_RECIPIENT + 5
  MAPI_ORIG* = 0
  MAPI_TO* = 1
  MAPI_CC* = 2
  MAPI_BCC* = 3
  MAPI_LOGON_UI* = 0x0001
  MAPI_NEW_SESSION* = 0x0002
  MAPI_FORCE_DOWNLOAD* = 0x1000
  MAPI_LOGOFF_SHARED* = 0x0001
  MAPI_LOGOFF_UI* = 0x0002
  MAPI_DIALOG* = 0x0008
  MAPI_UNREAD_ONLY* = 0x0020
  MAPI_LONG_MSGID* = 0x4000
  MAPI_GUARANTEE_FIFO* = 0x0100
  MAPI_ENVELOPE_ONLY* = 0x0040
  MAPI_PEEK* = 0x0080
  MAPI_BODY_AS_FILE* = 0x0200
  MAPI_SUPPRESS_ATTACH* = 0x0800
  MAPI_AB_NOMODIFY* = 0x0400
  MAPI_OLE* = 0x0001
  MAPI_OLE_STATIC* = 0x0002
  MAPI_UNREAD* = 0x0001
  MAPI_RECEIPT_REQUESTED* = 0x0002
  MAPI_SENT* = 0x0004

type
  FLAGS* = uint32
  LHANDLE* = uint32
  LPLHANDLE* = ptr uint32
  LPULONG* = ptr uint32
  MapiRecipDesc* {.final, pure.} = object
    ulReserved*: ULONG
    ulRecipClass*: ULONG
    lpszName*: LPSTR
    lpszAddress*: LPSTR
    ulEIDSize*: ULONG
    lpEntryID*: LPVOID
  lpMapiRecipDesc* = ptr MapiRecipDesc
  MapiFileDesc* {.final, pure.} = object
    ulReserved*: ULONG
    flFlags*: ULONG
    nPosition*: ULONG
    lpszPathName*: LPSTR
    lpszFileName*: LPSTR
    lpFileType*: LPVOID
  lpMapiFileDesc* = ptr MapiFileDesc
  MapiFileTagExt* {.final, pure.} = object
    ulReserved*: ULONG
    cbTag*: ULONG
    lpTag*: LPBYTE
    cbEncoding*: ULONG
    lpEncoding*: LPBYTE
  lpMapiFileTagExt* = ptr MapiFileTagExt
  MapiMessage* {.final, pure.} = object
    ulReserved*: ULONG
    lpszSubject*: LPSTR
    lpszNoteText*: LPSTR
    lpszMessageType*: LPSTR
    lpszDateReceived*: LPSTR
    lpszConversationID*: LPSTR
    flFlags*: FLAGS
    lpOriginator*: lpMapiRecipDesc
    nRecipCount*: ULONG
    lpRecips*: lpMapiRecipDesc
    nFileCount*: ULONG
    lpFiles*: lpMapiFileDesc
  lpMapiMessage* = ptr MapiMessage

# misc/mciavi.nim

const
  MCI_MCIAVI_PLAY_WINDOW* = 0x01000000
  MCI_MCIAVI_PLAY_FULLSCREEN* = 0x02000000
  MCI_MCIAVI_PLAY_FULLBY2* = 0x04000000
  MCI_AVI_STATUS_FRAMES_SKIPPED* = 0x00008001
  MCI_AVI_STATUS_LAST_PLAY_SPEED* = 0x00008002
  MCI_AVI_STATUS_AUDIO_BREAKS* = 0x00008003
  MCI_AVI_SETVIDEO_DRAW_PROCEDURE* = 0x00008000
  MCI_AVI_SETVIDEO_PALETTE_COLOR* = 0x00008100
  MCI_AVI_SETVIDEO_PALETTE_HALFTONE* = 0x0000FFFF
  MCIERR_AVI_OLDAVIFORMAT* = MCIERR_CUSTOM_DRIVER_BASE + 100
  MCIERR_AVI_NOTINTERLEAVED* = (MCIERR_CUSTOM_DRIVER_BASE + 100) + 1
  MCIERR_AVI_NODISPDIB* = (MCIERR_CUSTOM_DRIVER_BASE + 100) + 2
  MCIERR_AVI_CANTPLAYFULLSCREEN* = (MCIERR_CUSTOM_DRIVER_BASE + 100) + 3
  MCIERR_AVI_TOOBIGFORVGA* = (MCIERR_CUSTOM_DRIVER_BASE + 100) + 4
  MCIERR_AVI_NOCOMPRESSOR* = (MCIERR_CUSTOM_DRIVER_BASE + 100) + 5
  MCIERR_AVI_DISPLAYERROR* = (MCIERR_CUSTOM_DRIVER_BASE + 100) + 6
  MCIERR_AVI_AUDIOERROR* = (MCIERR_CUSTOM_DRIVER_BASE + 100) + 7
  MCIERR_AVI_BADPALETTE* = (MCIERR_CUSTOM_DRIVER_BASE + 100) + 8

# misc/mcx.nim

const
  DIALOPTION_BILLING* = 64
  DIALOPTION_QUIET* = 128
  DIALOPTION_DIALTONE* = 256
  MDMVOLFLAG_LOW* = 1
  MDMVOLFLAG_MEDIUM* = 2
  MDMVOLFLAG_HIGH* = 4
  MDMVOL_LOW* = 0
  MDMVOL_MEDIUM* = 1
  MDMVOL_HIGH* = 2
  MDMSPKRFLAG_OFF* = 1
  MDMSPKRFLAG_DIAL* = 2
  MDMSPKRFLAG_ON* = 4
  MDMSPKRFLAG_CALLSETUP* = 8
  MDMSPKR_OFF* = 0
  MDMSPKR_DIAL* = 1
  MDMSPKR_ON* = 2
  MDMSPKR_CALLSETUP* = 3
  MDM_COMPRESSION* = 0x0001
  MDM_ERROR_CONTROL* = 0x0002
  MDM_FORCED_EC* = 0x0004
  MDM_CELLULAR* = 0x0008
  MDM_FLOWCONTROL_HARD* = 0x0010
  MDM_FLOWCONTROL_SOFT* = 0x0020
  MDM_CCITT_OVERRIDE* = 0x0040
  MDM_SPEED_ADJUST* = 0x0080
  MDM_TONE_DIAL* = 0x0100
  MDM_BLIND_DIAL* = 0x0200
  MDM_V23_OVERRIDE* = 0x0400

type
  MODEMDEVCAPS* {.final, pure.} = object
    dwActualSize*: DWORD
    dwRequiredSize*: DWORD
    dwDevSpecificOffset*: DWORD
    dwDevSpecificSize*: DWORD
    dwModemProviderVersion*: DWORD
    dwModemManufacturerOffset*: DWORD
    dwModemManufacturerSize*: DWORD
    dwModemModelOffset*: DWORD
    dwModemModelSize*: DWORD
    dwModemVersionOffset*: DWORD
    dwModemVersionSize*: DWORD
    dwDialOptions*: DWORD
    dwCallSetupFailTimer*: DWORD
    dwInactivityTimeout*: DWORD
    dwSpeakerVolume*: DWORD
    dwSpeakerMode*: DWORD
    dwModemOptions*: DWORD
    dwMaxDTERate*: DWORD
    dwMaxDCERate*: DWORD
    abVariablePortion*: array[1, BYTE]
  PMODEMDEVCAPS* = ptr MODEMDEVCAPS
  LPMODEMDEVCAPS* = ptr MODEMDEVCAPS
  MODEMSETTINGS* {.final, pure.} = object
    dwActualSize*: DWORD
    dwRequiredSize*: DWORD
    dwDevSpecificOffset*: DWORD
    dwDevSpecificSize*: DWORD
    dwCallSetupFailTimer*: DWORD
    dwInactivityTimeout*: DWORD
    dwSpeakerVolume*: DWORD
    dwSpeakerMode*: DWORD
    dwPreferredModemOptions*: DWORD
    dwNegotiatedModemOptions*: DWORD
    dwNegotiatedDCERate*: DWORD
    abVariablePortion*: array[1, BYTE]
  PMODEMSETTINGS* = ptr MODEMSETTINGS
  LPMODEMSETTINGS* = ptr MODEMSETTINGS

# misc/msacm.nim

type
  HACMDRIVERID* = HANDLE
  HACMDRIVER* = HANDLE
  LPHACMDRIVER* = ptr HANDLE

const
  ACMDRIVERDETAILS_SHORTNAME_CHARS* = 32
  ACMDRIVERDETAILS_LONGNAME_CHARS* = 128
  ACMDRIVERDETAILS_COPYRIGHT_CHARS* = 80
  ACMDRIVERDETAILS_LICENSING_CHARS* = 128
  ACMFORMATDETAILS_FORMAT_CHARS* = 256
  ACMFORMATTAGDETAILS_FORMATTAG_CHARS* = 256
  ACMDRIVERDETAILS_FEATURES_CHARS* = 256

type
  ACMFORMATDETAILSA* {.final, pure.} = object
    cbStruct*: DWORD
    dwFormatIndex*: DWORD
    dwFormatTag*: DWORD
    fdwSupport*: DWORD
    pwfx*: LPWAVEFORMATEX
    cbwfx*: DWORD
    szFormat*: array[ACMFORMATDETAILS_FORMAT_CHARS, char]
  LPACMFORMATDETAILSA* = ptr ACMFORMATDETAILSA
  ACMFORMATDETAILSW* {.final, pure.} = object
    cbStruct*: DWORD
    dwFormatIndex*: DWORD
    dwFormatTag*: DWORD
    fdwSupport*: DWORD
    pwfx*: LPWAVEFORMATEX
    cbwfx*: DWORD
    szFormat*: array[ACMFORMATDETAILS_FORMAT_CHARS, WCHAR]
  LPACMFORMATDETAILSW* = ptr ACMFORMATDETAILSW
  ACMFORMATTAGDETAILSA* {.final, pure.} = object
    cbStruct*: DWORD
    dwFormatTagIndex*: DWORD
    dwFormatTag*: DWORD
    cbFormatSize*: DWORD
    fdwSupport*: DWORD
    cStandardFormats*: DWORD
    szFormatTag*: array[ACMFORMATTAGDETAILS_FORMATTAG_CHARS, char]
  LPACMFORMATTAGDETAILSA* = ptr ACMFORMATTAGDETAILSA
  ACMFORMATTAGDETAILSW* {.final, pure.} = object
    cbStruct*: DWORD
    dwFormatTagIndex*: DWORD
    dwFormatTag*: DWORD
    cbFormatSize*: DWORD
    fdwSupport*: DWORD
    cStandardFormats*: DWORD
    szFormatTag*: array[ACMFORMATTAGDETAILS_FORMATTAG_CHARS, WCHAR]
  LPACMFORMATTAGDETAILSW* = ptr ACMFORMATTAGDETAILSW
  ACMDRIVERDETAILSA* {.final, pure.} = object
    cbStruct*: DWORD
    fccType*: FOURCC
    fccComp*: FOURCC
    wMid*: WORD
    wPid*: WORD
    vdwACM*: DWORD
    vdwDriver*: DWORD
    fdwSupport*: DWORD
    cFormatTags*: DWORD
    cFilterTags*: DWORD
    hicon*: HICON
    szShortName*: array[ACMDRIVERDETAILS_SHORTNAME_CHARS, char]
    szLongName*: array[ACMDRIVERDETAILS_LONGNAME_CHARS, char]
    szCopyright*: array[ACMDRIVERDETAILS_COPYRIGHT_CHARS, char]
    szLicensing*: array[ACMDRIVERDETAILS_LICENSING_CHARS, char]
    szFeatures*: array[ACMDRIVERDETAILS_FEATURES_CHARS, char]
  LPACMDRIVERDETAILSA* = ptr ACMDRIVERDETAILSA
  ACMDRIVERDETAILSW* {.final, pure.} = object
    cbStruct*: DWORD
    fccType*: FOURCC
    fccComp*: FOURCC
    wMid*: WORD
    wPid*: WORD
    vdwACM*: DWORD
    vdwDriver*: DWORD
    fdwSupport*: DWORD
    cFormatTags*: DWORD
    cFilterTags*: DWORD
    hicon*: HICON
    szShortName*: array[ACMDRIVERDETAILS_SHORTNAME_CHARS, WCHAR]
    szLongName*: array[ACMDRIVERDETAILS_LONGNAME_CHARS, WCHAR]
    szCopyright*: array[ACMDRIVERDETAILS_COPYRIGHT_CHARS, WCHAR]
    szLicensing*: array[ACMDRIVERDETAILS_LICENSING_CHARS, WCHAR]
    szFeatures*: array[ACMDRIVERDETAILS_FEATURES_CHARS, WCHAR]
  LPACMDRIVERDETAILSW* = ptr ACMDRIVERDETAILSW
  ACMFORMATENUMCBA* = proc (hadid: HACMDRIVERID, pafd: LPACMFORMATDETAILSA, dwInstance: DWORD_PTR, fdwSupport: DWORD): BOOL {.stdcall.}
  ACMFORMATENUMCBW* = proc (hadid: HACMDRIVERID, pafd: LPACMFORMATDETAILSW, dwInstance: DWORD_PTR, fdwSupport: DWORD): BOOL {.stdcall.}
  ACMFORMATTAGENUMCBA* = proc (hadid: HACMDRIVERID, paftd: LPACMFORMATTAGDETAILSA, dwInstance: DWORD_PTR, fdwSupport: DWORD): BOOL {.stdcall.}
  ACMFORMATTAGENUMCBW* = proc (hadid: HACMDRIVERID, paftd: LPACMFORMATTAGDETAILSW, dwInstance: DWORD_PTR, fdwSupport: DWORD): BOOL {.stdcall.}
  ACMDRIVERENUMCB* = proc (hadid: HACMDRIVERID, dwInstance: DWORD_PTR, fdwSupport: DWORD): BOOL {.stdcall.}

proc acmDriverOpen*(phad: LPHACMDRIVER, hadid: HACMDRIVERID, fdwOpen: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc.}
proc acmDriverEnum*(fnCallback: ACMDRIVERENUMCB, dwInstance: DWORD_PTR, fdwEnum: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc.}
proc acmFormatEnumA*(had: HACMDRIVER, pafd: LPACMFORMATDETAILSA, fnCallback: ACMFORMATENUMCBA, dwInstance: DWORD_PTR, fdwEnum: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc.}
proc acmFormatEnumW*(had: HACMDRIVER, pafd: LPACMFORMATDETAILSW, fnCallback: ACMFORMATENUMCBW, dwInstance: DWORD_PTR, fdwEnum: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc.}
proc acmDriverClose*(had: HACMDRIVER, fdwClose: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc.}
proc acmDriverDetailsA*(hadid: HACMDRIVERID, padd: LPACMDRIVERDETAILSA, fdwDetails: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc.}
proc acmDriverDetailsW*(hadid: HACMDRIVERID, padd: LPACMDRIVERDETAILSW, fdwDetails: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc.}
proc acmFormatTagEnumA*(had: HACMDRIVER, paftd: LPACMFORMATTAGDETAILSA, fnCallback: ACMFORMATTAGENUMCBA, dwInstance: DWORD_PTR, fdwEnum: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc.}
proc acmFormatTagEnumW*(had: HACMDRIVER, paftd: LPACMFORMATTAGDETAILSW, fnCallback: ACMFORMATTAGENUMCBW, dwInstance: DWORD_PTR, fdwEnum: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc.}

when not defined(winansi):
  type
    ACMFORMATDETAILS* = ACMFORMATDETAILSW
    ACMFORMATTAGDETAILS* = ACMFORMATTAGDETAILSW
    ACMDRIVERDETAILS* = ACMDRIVERDETAILSW
    ACMFORMATENUMCB* = ACMFORMATENUMCBW
    ACMFORMATTAGENUMCB* = ACMFORMATTAGENUMCBW

  proc acmFormatEnum*(had: HACMDRIVER, pafd: LPACMFORMATDETAILSW, fnCallback: ACMFORMATENUMCBW, dwInstance: DWORD_PTR, fdwEnum: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc: "acmFormatEnumW".}
  proc acmDriverDetails*(hadid: HACMDRIVERID, padd: LPACMDRIVERDETAILSW, fdwDetails: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc: "acmDriverDetailsW".}
  proc acmFormatTagEnum*(had: HACMDRIVER, paftd: LPACMFORMATTAGDETAILSW, fnCallback: ACMFORMATTAGENUMCBW, dwInstance: DWORD_PTR, fdwEnum: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc: "acmFormatTagEnumW".}

else:
  type
    ACMFORMATDETAILS* = ACMFORMATDETAILSA
    ACMFORMATTAGDETAILS* = ACMFORMATTAGDETAILSA
    ACMDRIVERDETAILS* = ACMDRIVERDETAILSA
    ACMFORMATENUMCB* = ACMFORMATENUMCBA
    ACMFORMATTAGENUMCB* = ACMFORMATTAGENUMCBA

  proc acmFormatEnum*(had: HACMDRIVER, pafd: LPACMFORMATDETAILSA, fnCallback: ACMFORMATENUMCBA, dwInstance: DWORD_PTR, fdwEnum: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc: "acmFormatEnumA".}
  proc acmDriverDetails*(hadid: HACMDRIVERID, padd: LPACMDRIVERDETAILSA, fdwDetails: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc: "acmDriverDetailsA".}
  proc acmFormatTagEnum*(had: HACMDRIVER, paftd: LPACMFORMATTAGDETAILSA, fnCallback: ACMFORMATTAGENUMCBA, dwInstance: DWORD_PTR, fdwEnum: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc: "acmFormatTagEnumA".}

type
  LPACMFORMATDETAILS* = ptr ACMFORMATDETAILS
  LPACMFORMATTAGDETAILS* = ptr ACMFORMATTAGDETAILS
  LPACMDRIVERDETAILS* = ptr ACMDRIVERDETAILS

# misc/nb30.nim

const
  NCBNAMSZ* = 16
  MAX_LANA* = 254
  REGISTERING* = 0
  REGISTERED* = 4
  DEREGISTERED* = 5
  DUPLICATE* = 6
  DUPLICATE_DEREG* = 7
  UNIQUE_NAME* = 0
  GROUP_NAME* = 0x80
  NAME_FLAGS_MASK* = 0x87
  LISTEN_OUTSTANDING* = 1
  CALL_PENDING* = 2
  SESSION_ESTABLISHED* = 3
  HANGUP_PENDING* = 4
  HANGUP_COMPLETE* = 5
  SESSION_ABORTED* = 6
  ALL_TRANSPORTS* = "M\0\0\0"
  MS_NBF* = "MNBF"
  NCBCALL* = 0x10
  NCBLISTEN* = 0x11
  NCBHANGUP* = 0x12
  NCBSEND* = 0x14
  NCBRECV* = 0x15
  NCBRECVANY* = 0x16
  NCBCHAINSEND* = 0x17
  NCBDGSEND* = 0x20
  NCBDGRECV* = 0x21
  NCBDGSENDBC* = 0x22
  NCBDGRECVBC* = 0x23
  NCBADDNAME* = 0x30
  NCBDELNAME* = 0x31
  NCBRESET* = 0x32
  NCBASTAT* = 0x33
  NCBSSTAT* = 0x34
  NCBCANCEL* = 0x35
  NCBADDGRNAME* = 0x36
  NCBENUM* = 0x37
  NCBUNLINK* = 0x70
  NCBSENDNA* = 0x71
  NCBCHAINSENDNA* = 0x72
  NCBLANSTALERT* = 0x73
  NCBACTION* = 0x77
  NCBFINDNAME* = 0x78
  NCBTRACE* = 0x79
  ASYNCH* = 0x80
  NRC_GOODRET* = 0x00
  NRC_BUFLEN* = 0x01
  NRC_ILLCMD* = 0x03
  NRC_CMDTMO* = 0x05
  NRC_INCOMP* = 0x6
  NRC_BADDR* = 0x7
  NRC_SNUMOUT* = 0x8
  NRC_NORES* = 0x9
  NRC_SCLOSED* = 0xA
  NRC_CMDCAN* = 0xB
  NRC_DUPNAME* = 0x0d
  NRC_NAMTFUL* = 0xE
  NRC_ACTSES* = 0xF
  NRC_LOCTFUL* = 0x11
  NRC_REMTFUL* = 0x12
  NRC_ILLNN* = 0x13
  NRC_NOCALL* = 0x14
  NRC_NOWILD* = 0x15
  NRC_INUSE* = 0x16
  NRC_NAMERR* = 0x17
  NRC_SABORT* = 0x18
  NRC_NAMCONF* = 0x19
  NRC_IFBUSY* = 0x21
  NRC_TOOMANY* = 0x22
  NRC_BRIDGE* = 0x23
  NRC_CANOCCR* = 0x24
  NRC_CANCEL* = 0x26
  NRC_DUPENV* = 0x30
  NRC_ENVNOTDEF* = 0x34
  NRC_OSRESNOTAV* = 0x35
  NRC_MAXAPPS* = 0x36
  NRC_NOSAPS* = 0x37
  NRC_NORESOURCES* = 0x38
  NRC_INVADDRESS* = 0x39
  NRC_INVDDID* = 0x3B
  NRC_LOCKFAIL* = 0x3C
  NRC_OPENERR* = 0x3f
  NRC_SYSTEM* = 0x40
  NRC_PENDING* = 0xff

type
  ACTION_HEADER_UNION1* {.final, union, pure.} = object
    transport_id*: ULONG
    c_transport_id*: array[4, char]
  ACTION_HEADER* {.final, pure.} = object
    u1*: ACTION_HEADER_UNION1
    action_code*: USHORT
    reserved*: USHORT
  PACTION_HEADER* = ptr ACTION_HEADER
  ADAPTER_STATUS* {.final, pure.} = object
    adapter_address*: array[6, UCHAR]
    rev_major*: UCHAR
    reserved0*: UCHAR
    adapter_type*: UCHAR
    rev_minor*: UCHAR
    duration*: WORD
    frmr_recv*: WORD
    frmr_xmit*: WORD
    iframe_recv_err*: WORD
    xmit_aborts*: WORD
    xmit_success*: DWORD
    recv_success*: DWORD
    iframe_xmit_err*: WORD
    recv_buff_unavail*: WORD
    t1_timeouts*: WORD
    ti_timeouts*: WORD
    reserved1*: DWORD
    free_ncbs*: WORD
    max_cfg_ncbs*: WORD
    max_ncbs*: WORD
    xmit_buf_unavail*: WORD
    max_dgram_size*: WORD
    pending_sess*: WORD
    max_cfg_sess*: WORD
    max_sess*: WORD
    max_sess_pkt_size*: WORD
    name_count*: WORD
  PADAPTER_STATUS* = ptr ADAPTER_STATUS
  FIND_NAME_BUFFER* {.final, pure.} = object
    length*: UCHAR
    access_control*: UCHAR
    frame_control*: UCHAR
    destination_addr*: array[6, UCHAR]
    source_addr*: array[6, UCHAR]
    routing_info*: array[18, UCHAR]
  PFIND_NAME_BUFFER* = ptr FIND_NAME_BUFFER
  FIND_NAME_HEADER* {.final, pure.} = object
    node_count*: WORD
    reserved*: UCHAR
    unique_group*: UCHAR
  PFIND_NAME_HEADER* = ptr FIND_NAME_HEADER
  LANA_ENUM* {.final, pure.} = object
    length*: UCHAR
    lana*: array[MAX_LANA+1, UCHAR]
  PLANA_ENUM* = ptr LANA_ENUM
  NAME_BUFFER* {.final, pure.} = object
    name*: array[NCBNAMSZ, UCHAR]
    name_num*: UCHAR
    name_flags*: UCHAR
  PNAME_BUFFER* = ptr NAME_BUFFER
  NCB* {.final, pure.} = object
    ncb_command*: UCHAR
    ncb_retcode*: UCHAR
    ncb_lsn*: UCHAR
    ncb_num*: UCHAR
    ncb_buffer*: PUCHAR
    ncb_length*: WORD
    ncb_callname*: array[NCBNAMSZ, UCHAR]
    ncb_name*: array[NCBNAMSZ, UCHAR]
    ncb_rto*: UCHAR
    ncb_sto*: UCHAR
    ncb_post*: proc (P1: ptr NCB): void {.stdcall.}
    ncb_lana_num*: UCHAR
    ncb_cmd_cplt*: UCHAR
    ncb_reserve*: array[10, UCHAR]
    ncb_event*: HANDLE
  PNCB* = ptr NCB
  SESSION_BUFFER* {.final, pure.} = object
    lsn*: UCHAR
    state*: UCHAR
    local_name*: array[NCBNAMSZ, UCHAR]
    remote_name*: array[NCBNAMSZ, UCHAR]
    rcvs_outstanding*: UCHAR
    sends_outstanding*: UCHAR
  PSESSION_BUFFER* = ptr SESSION_BUFFER
  SESSION_HEADER* {.final, pure.} = object
    sess_name*: UCHAR
    num_sess*: UCHAR
    rcv_dg_outstanding*: UCHAR
    rcv_any_outstanding*: UCHAR
  PSESSION_HEADER* = ptr SESSION_HEADER

proc Netbios*(P1: PNCB): UCHAR {.winapi, dynlib: "netapi32", importc.}

proc `transport_id=`*(self: var ACTION_HEADER, x: ULONG) = self.u1.transport_id = x
proc transport_id*(self: ACTION_HEADER): ULONG = self.u1.transport_id
proc `c_transport_id=`*(self: var ACTION_HEADER, x: array[4, char]) = self.u1.c_transport_id = x
proc c_transport_id*(self: ACTION_HEADER): array[4, char] = self.u1.c_transport_id

# misc/nddeapi.nim

const
  SEP_CHAR* = ','.char
  BAR_CHAR* = "|"
  SEP_WCHAR* = ','.WCHAR
  BAR_WCHAR* = "|"
  NDDE_NO_ERROR* = 0
  NDDE_ACCESS_DENIED* = 1
  NDDE_BUF_TOO_SMALL* = 2
  NDDE_ERROR_MORE_DATA* = 3
  NDDE_INVALID_SERVER* = 4
  NDDE_INVALID_SHARE* = 5
  NDDE_INVALID_PARAMETER* = 6
  NDDE_INVALID_LEVEL* = 7
  NDDE_INVALID_PASSWORD* = 8
  NDDE_INVALID_ITEMNAME* = 9
  NDDE_INVALID_TOPIC* = 10
  NDDE_INTERNAL_ERROR* = 11
  NDDE_OUT_OF_MEMORY* = 12
  NDDE_INVALID_APPNAME* = 13
  NDDE_NOT_IMPLEMENTED* = 14
  NDDE_SHARE_ALREADY_EXIST* = 15
  NDDE_SHARE_NOT_EXIST* = 16
  NDDE_INVALID_FILENAME* = 17
  NDDE_NOT_RUNNING* = 18
  NDDE_INVALID_WINDOW* = 19
  NDDE_INVALID_SESSION* = 20
  NDDE_INVALID_ITEM_LIST* = 21
  NDDE_SHARE_DATA_CORRUPTED* = 22
  NDDE_REGISTRY_ERROR* = 23
  NDDE_CANT_ACCESS_SERVER* = 24
  NDDE_INVALID_SPECIAL_COMMAND* = 25
  NDDE_INVALID_SECURITY_DESC* = 26
  NDDE_TRUST_SHARE_FAIL* = 27
  MAX_NDDESHARENAME* = 256
  MAX_DOMAINNAME* = 15
  MAX_USERNAME* = 15
  MAX_APPNAME* = 255
  MAX_TOPICNAME* = 255
  MAX_ITEMNAME* = 255
  NDDEF_NOPASSWORDPROMPT* = 1
  NDDEF_NOCACHELOOKUP* = 2
  NDDEF_STRIP_NDDE* = 4
  SHARE_TYPE_OLD* = 1
  SHARE_TYPE_NEW* = 2
  SHARE_TYPE_STATIC* = 4
  NDDE_CMD_SHOW_MASK* = 0x0000FFFF
  NDDE_TRUST_CMD_SHOW* = 0x10000000
  NDDE_TRUST_SHARE_DEL* = 0x20000000
  NDDE_TRUST_SHARE_INIT* = 0x40000000
  NDDE_TRUST_SHARE_START* = 0x80000000'u32

type
  NDdeShareInfo_tag* {.final, pure.} = object
    lRevision*: LONG
    lpszShareName*: LPTSTR
    lShareType*: LONG
    lpszAppTopicList*: LPTSTR
    fSharedFlag*: LONG
    fService*: LONG
    fStartAppFlag*: LONG
    nCmdShow*: LONG
    qModifyId*: array[2, LONG]
    cNumItems*: LONG
    lpszItemList*: LPTSTR

proc NDdeGetErrorStringA*(P1: UINT, P2: LPSTR, P3: DWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeGetErrorStringW*(P1: UINT, P2: LPWSTR, P3: DWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeGetShareSecurityA*(P1: LPSTR, P2: LPSTR, P3: SECURITY_INFORMATION, P4: PSECURITY_DESCRIPTOR, P5: DWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeGetShareSecurityW*(P1: LPWSTR, P2: LPWSTR, P3: SECURITY_INFORMATION, P4: PSECURITY_DESCRIPTOR, P5: DWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeGetTrustedShareA*(P1: LPSTR, P2: LPSTR, P3: PDWORD, P4: PDWORD, P5: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeGetTrustedShareW*(P1: LPWSTR, P2: LPWSTR, P3: PDWORD, P4: PDWORD, P5: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeIsValidShareNameA*(P1: LPSTR): BOOL {.winapi, dynlib: "nddeapi", importc.}
proc NDdeIsValidShareNameW*(P1: LPWSTR): BOOL {.winapi, dynlib: "nddeapi", importc.}
proc NDdeIsValidAppTopicListA*(P1: LPSTR): BOOL {.winapi, dynlib: "nddeapi", importc.}
proc NDdeIsValidAppTopicListW*(P1: LPWSTR): BOOL {.winapi, dynlib: "nddeapi", importc.}
proc NDdeSetShareSecurityA*(P1: LPSTR, P2: LPSTR, P3: SECURITY_INFORMATION, P4: PSECURITY_DESCRIPTOR): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeSetShareSecurityW*(P1: LPWSTR, P2: LPWSTR, P3: SECURITY_INFORMATION, P4: PSECURITY_DESCRIPTOR): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeSetTrustedShareA*(P1: LPSTR, P2: LPSTR, P3: DWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeSetTrustedShareW*(P1: LPWSTR, P2: LPWSTR, P3: DWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareAddA*(P1: LPSTR, P2: UINT, P3: PSECURITY_DESCRIPTOR, P4: PBYTE, P5: DWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareAddW*(P1: LPWSTR, P2: UINT, P3: PSECURITY_DESCRIPTOR, P4: PBYTE, P5: DWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareDelA*(P1: LPSTR, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareDelW*(P1: LPWSTR, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareEnumA*(P1: LPSTR, P2: UINT, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareEnumW*(P1: LPWSTR, P2: UINT, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareGetInfoA*(P1: LPSTR, P2: LPSTR, P3: UINT, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareGetInfoW*(P1: LPWSTR, P2: LPWSTR, P3: UINT, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareSetInfoA*(P1: LPSTR, P2: LPSTR, P3: UINT, P4: PBYTE, P5: DWORD, P6: WORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareSetInfoW*(P1: LPWSTR, P2: LPWSTR, P3: UINT, P4: PBYTE, P5: DWORD, P6: WORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeTrustedShareEnumA*(P1: LPSTR, P2: UINT, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeTrustedShareEnumW*(P1: LPWSTR, P2: UINT, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc.}

when not defined(winansi):
  proc NDdeShareAdd*(P1: LPWSTR, P2: UINT, P3: PSECURITY_DESCRIPTOR, P4: PBYTE, P5: DWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareAddW".}
  proc NDdeShareDel*(P1: LPWSTR, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareDelW".}
  proc NDdeSetShareSecurity*(P1: LPWSTR, P2: LPWSTR, P3: SECURITY_INFORMATION, P4: PSECURITY_DESCRIPTOR): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeSetShareSecurityW".}
  proc NDdeGetShareSecurity*(P1: LPWSTR, P2: LPWSTR, P3: SECURITY_INFORMATION, P4: PSECURITY_DESCRIPTOR, P5: DWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeGetShareSecurityW".}
  proc NDdeShareEnum*(P1: LPWSTR, P2: UINT, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareEnumW".}
  proc NDdeShareGetInfo*(P1: LPWSTR, P2: LPWSTR, P3: UINT, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareGetInfoW".}
  proc NDdeShareSetInfo*(P1: LPWSTR, P2: LPWSTR, P3: UINT, P4: PBYTE, P5: DWORD, P6: WORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareSetInfoW".}
  proc NDdeGetErrorString*(P1: UINT, P2: LPWSTR, P3: DWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeGetErrorStringW".}
  proc NDdeIsValidShareName*(P1: LPWSTR): BOOL {.winapi, dynlib: "nddeapi", importc: "NDdeIsValidShareNameW".}
  proc NDdeIsValidAppTopicList*(P1: LPWSTR): BOOL {.winapi, dynlib: "nddeapi", importc: "NDdeIsValidAppTopicListW".}
  proc NDdeSetTrustedShare*(P1: LPWSTR, P2: LPWSTR, P3: DWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeSetTrustedShareW".}
  proc NDdeGetTrustedShare*(P1: LPWSTR, P2: LPWSTR, P3: PDWORD, P4: PDWORD, P5: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeGetTrustedShareW".}
  proc NDdeTrustedShareEnum*(P1: LPWSTR, P2: UINT, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeTrustedShareEnumW".}

else:
  proc NDdeShareAdd*(P1: LPSTR, P2: UINT, P3: PSECURITY_DESCRIPTOR, P4: PBYTE, P5: DWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareAddA".}
  proc NDdeShareDel*(P1: LPSTR, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareDelA".}
  proc NDdeSetShareSecurity*(P1: LPSTR, P2: LPSTR, P3: SECURITY_INFORMATION, P4: PSECURITY_DESCRIPTOR): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeSetShareSecurityA".}
  proc NDdeGetShareSecurity*(P1: LPSTR, P2: LPSTR, P3: SECURITY_INFORMATION, P4: PSECURITY_DESCRIPTOR, P5: DWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeGetShareSecurityA".}
  proc NDdeShareEnum*(P1: LPSTR, P2: UINT, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareEnumA".}
  proc NDdeShareGetInfo*(P1: LPSTR, P2: LPSTR, P3: UINT, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareGetInfoA".}
  proc NDdeShareSetInfo*(P1: LPSTR, P2: LPSTR, P3: UINT, P4: PBYTE, P5: DWORD, P6: WORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareSetInfoA".}
  proc NDdeGetErrorString*(P1: UINT, P2: LPSTR, P3: DWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeGetErrorStringA".}
  proc NDdeIsValidShareName*(P1: LPSTR): BOOL {.winapi, dynlib: "nddeapi", importc: "NDdeIsValidShareNameA".}
  proc NDdeIsValidAppTopicList*(P1: LPSTR): BOOL {.winapi, dynlib: "nddeapi", importc: "NDdeIsValidAppTopicListA".}
  proc NDdeSetTrustedShare*(P1: LPSTR, P2: LPSTR, P3: DWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeSetTrustedShareA".}
  proc NDdeGetTrustedShare*(P1: LPSTR, P2: LPSTR, P3: PDWORD, P4: PDWORD, P5: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeGetTrustedShareA".}
  proc NDdeTrustedShareEnum*(P1: LPSTR, P2: UINT, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeTrustedShareEnumA".}

# misc/nspapi.nim

const
  NS_ALL* = 0
  NS_SAP* = 1
  NS_NDS* = 2
  NS_PEER_BROWSE* = 3
  NS_TCPIP_LOCAL* = 10
  NS_TCPIP_HOSTS* = 11
  NS_DNS* = 12
  NS_NETBT* = 13
  NS_WINS* = 14
  NS_NBP* = 20
  NS_MS* = 30
  NS_STDA* = 31
  NS_NTDS* = 32
  NS_X500* = 40
  NS_NIS* = 41
  NS_NISPLUS* = 42
  NS_WRQ* = 50
  SERVICE_REGISTER* = 1
  SERVICE_DEREGISTER* = 2
  SERVICE_FLUSH* = 3
  SERVICE_FLAG_HARD* = 2

type
  # SOCKET_ADDRESS* {.final, pure.} = object
  #   lpSockaddr*: LPSOCKADDR
  #   iSockaddrLength*: INT
  # PSOCKET_ADDRESS* = ptr SOCKET_ADDRESS
  # LPSOCKET_ADDRESS* = ptr SOCKET_ADDRESS
  # CSADDR_INFO* {.final, pure.} = object
  #   LocalAddr*: SOCKET_ADDRESS
  #   RemoteAddr*: SOCKET_ADDRESS
  #   iSocketType*: INT
  #   iProtocol*: INT
  # PCSADDR_INFO* = ptr CSADDR_INFO
  # LPCSADDR_INFO* = ptr CSADDR_INFO
  # BLOB* {.final, pure.} = object
  #   cbSize*: ULONG
  #   pBlobData*: ptr BYTE
  # PBLOB* = ptr BLOB
  # LPBLOB* = ptr BLOB
  SERVICE_ADDRESS* {.final, pure.} = object
    dwAddressType*: DWORD
    dwAddressFlags*: DWORD
    dwAddressLength*: DWORD
    dwPrincipalLength*: DWORD
    lpAddress*: ptr BYTE
    lpPrincipal*: ptr BYTE
  SERVICE_ADDRESSES* {.final, pure.} = object
    dwAddressCount*: DWORD
    Addresses*: array[1, SERVICE_ADDRESS]
  PSERVICE_ADDRESSES* = ptr SERVICE_ADDRESSES
  LPSERVICE_ADDRESSES* = ptr SERVICE_ADDRESSES
  SERVICE_INFOA* {.final, pure.} = object
    lpServiceType*: LPGUID
    lpServiceName*: LPSTR
    lpComment*: LPSTR
    lpLocale*: LPSTR
    dwDisplayHint*: DWORD
    dwVersion*: DWORD
    dwTime*: DWORD
    lpMachineName*: LPSTR
    lpServiceAddress*: LPSERVICE_ADDRESSES
    ServiceSpecificInfo*: BLOB
  LPSERVICE_INFOA* = ptr SERVICE_INFOA
  SERVICE_INFOW* {.final, pure.} = object
    lpServiceType*: LPGUID
    lpServiceName*: LPWSTR
    lpComment*: LPWSTR
    lpLocale*: LPWSTR
    dwDisplayHint*: DWORD
    dwVersion*: DWORD
    dwTime*: DWORD
    lpMachineName*: LPWSTR
    lpServiceAddress*: LPSERVICE_ADDRESSES
    ServiceSpecificInfo*: BLOB
  LPSERVICE_INFOW* = ptr SERVICE_INFOW
  LPSERVICE_ASYNC_INFO* = pointer

proc SetServiceA*(P1: DWORD, P2: DWORD, P3: DWORD, P4: LPSERVICE_INFOA, P5: LPSERVICE_ASYNC_INFO, P6: LPDWORD): INT {.winapi, dynlib: "mswsock", importc.}
proc SetServiceW*(P1: DWORD, P2: DWORD, P3: DWORD, P4: LPSERVICE_INFOW, P5: LPSERVICE_ASYNC_INFO, P6: LPDWORD): INT {.winapi, dynlib: "mswsock", importc.}
proc GetAddressByNameA*(P1: DWORD, P2: LPGUID, P3: LPSTR, P4: LPINT, P5: DWORD, P6: LPSERVICE_ASYNC_INFO, P7: LPVOID, P8: LPDWORD, P9: LPSTR, P10: LPDWORD): INT {.winapi, dynlib: "mswsock", importc.}
proc GetAddressByNameW*(P1: DWORD, P2: LPGUID, P3: LPWSTR, P4: LPINT, P5: DWORD, P6: LPSERVICE_ASYNC_INFO, P7: LPVOID, P8: LPDWORD, P9: LPWSTR, P10: LPDWORD): INT {.winapi, dynlib: "mswsock", importc.}

when not defined(winansi):
  type
    SERVICE_INFO* = SERVICE_INFOW

  proc SetService*(P1: DWORD, P2: DWORD, P3: DWORD, P4: LPSERVICE_INFOW, P5: LPSERVICE_ASYNC_INFO, P6: LPDWORD): INT {.winapi, dynlib: "mswsock", importc: "SetServiceW".}
  proc GetAddressByName*(P1: DWORD, P2: LPGUID, P3: LPWSTR, P4: LPINT, P5: DWORD, P6: LPSERVICE_ASYNC_INFO, P7: LPVOID, P8: LPDWORD, P9: LPWSTR, P10: LPDWORD): INT {.winapi, dynlib: "mswsock", importc: "GetAddressByNameW".}

else:
  type
    SERVICE_INFO* = SERVICE_INFOA

  proc SetService*(P1: DWORD, P2: DWORD, P3: DWORD, P4: LPSERVICE_INFOA, P5: LPSERVICE_ASYNC_INFO, P6: LPDWORD): INT {.winapi, dynlib: "mswsock", importc: "SetServiceA".}
  proc GetAddressByName*(P1: DWORD, P2: LPGUID, P3: LPSTR, P4: LPINT, P5: DWORD, P6: LPSERVICE_ASYNC_INFO, P7: LPVOID, P8: LPDWORD, P9: LPSTR, P10: LPDWORD): INT {.winapi, dynlib: "mswsock", importc: "GetAddressByNameA".}

type
  # _SERVICE_INFO* = SERVICE_INFO
  LPSERVICE_INFO* = ptr SERVICE_INFO

# misc/ntdll.nim
const
  # SHUTDOWN_ACTION* = enum
  ShutdownNoReboot* = 0
  ShutdownReboot* = 1
  ShutdownPowerOff* = 2

type
  SHUTDOWN_ACTION* = int32

proc NtShutdownSystem*(Action: SHUTDOWN_ACTION): uint32 {.winapi, dynlib: "ntdll", importc.}

# misc/ntldap.nim

const
  LDAP_SERVER_ASQ_OID* = "1.2.840.113556.1.4.1504"
  LDAP_SERVER_DIRSYNC_OID* = "1.2.840.113556.1.4.841"
  LDAP_SERVER_SD_FLAGS_OID* = "1.2.840.113556.1.4.801"
  LDAP_SERVER_FAST_BIND_OID* = "1.2.840.113556.1.4.1781"
  LDAP_MATCHING_RULE_BIT_OR* = "1.2.840.113556.1.4.804"
  LDAP_MATCHING_RULE_BIT_AND* = "1.2.840.113556.1.4.803"
  LDAP_SERVER_EXTENDED_DN_OID* = "1.2.840.113556.1.4.529"
  LDAP_SERVER_LAZY_COMMIT_OID* = "1.2.840.113556.1.4.619"
  LDAP_SERVER_TREE_DELETE_OID* = "1.2.840.113556.1.4.805"
  LDAP_SERVER_VERIFY_NAME_OID* = "1.2.840.113556.1.4.1338"
  LDAP_SERVER_SHOW_DELETED_OID* = "1.2.840.113556.1.4.417"
  LDAP_SERVER_NOTIFICATION_OID* = "1.2.840.113556.1.4.528"
  LDAP_SERVER_DOMAIN_SCOPE_OID* = "1.2.840.113556.1.4.1339"
  LDAP_CAP_ACTIVE_DIRECTORY_OID* = "1.2.840.113556.1.4.800"
  LDAP_SERVER_SEARCH_OPTIONS_OID* = "1.2.840.113556.1.4.1340"
  LDAP_CAP_ACTIVE_DIRECTORY_V51_OID* = "1.2.840.113556.1.4.1670"
  LDAP_SERVER_PERMISSIVE_MODIFY_OID* = "1.2.840.113556.1.4.1413"
  LDAP_SERVER_CROSSDOM_MOVE_TARGET_OID* = "1.2.840.113556.1.4.521"
  LDAP_SERVER_ASQ_OID_W* = "1.2.840.113556.1.4.1504"
  LDAP_SERVER_DIRSYNC_OID_W* = "1.2.840.113556.1.4.841"
  LDAP_SERVER_SD_FLAGS_OID_W* = "1.2.840.113556.1.4.801"
  LDAP_SERVER_FAST_BIND_OID_W* = "1.2.840.113556.1.4.1781"
  LDAP_MATCHING_RULE_BIT_OR_W* = "1.2.840.113556.1.4.804"
  LDAP_MATCHING_RULE_BIT_AND_W* = "1.2.840.113556.1.4.803"
  LDAP_SERVER_EXTENDED_DN_OID_W* = "1.2.840.113556.1.4.529"
  LDAP_SERVER_LAZY_COMMIT_OID_W* = "1.2.840.113556.1.4.619"
  LDAP_SERVER_TREE_DELETE_OID_W* = "1.2.840.113556.1.4.805"
  LDAP_SERVER_VERIFY_NAME_OID_W* = "1.2.840.113556.1.4.1338"
  LDAP_SERVER_SHOW_DELETED_OID_W* = "1.2.840.113556.1.4.417"
  LDAP_SERVER_NOTIFICATION_OID_W* = "1.2.840.113556.1.4.528"
  LDAP_SERVER_DOMAIN_SCOPE_OID_W* = "1.2.840.113556.1.4.1339"
  LDAP_CAP_ACTIVE_DIRECTORY_OID_W* = "1.2.840.113556.1.4.800"
  LDAP_SERVER_SEARCH_OPTIONS_OID_W* = "1.2.840.113556.1.4.1340"
  LDAP_CAP_ACTIVE_DIRECTORY_V51_OID_W* = "1.2.840.113556.1.4.1670"
  LDAP_SERVER_PERMISSIVE_MODIFY_OID_W* = "1.2.840.113556.1.4.1413"
  LDAP_SERVER_CROSSDOM_MOVE_TARGET_OID_W* = "1.2.840.113556.1.4.521"
  SERVER_SEARCH_FLAG_DOMAIN_SCOPE* = 1
  SERVER_SEARCH_FLAG_PHANTOM_ROOT* = 2

# misc/snmp.nim

type
  SNMPAPI* = INT
  AsnInteger32* = LONG
  AsnUnsigned32* = ULONG
  AsnCounter32* = ULONG
  AsnGauge32* = ULONG
  AsnInteger* = AsnInteger32
  AsnCounter* = AsnCounter32
  AsnGauge* = AsnGauge32
  AsnTimeticks* = ULONG
  AsnCounter64* = ULARGE_INTEGER

const
  DEFAULT_SNMP_PORT_UDP* = 161
  DEFAULT_SNMP_PORT_IPX* = 36879
  DEFAULT_SNMPTRAP_PORT_UDP* = 162
  DEFAULT_SNMPTRAP_PORT_IPX* = 36880
  ASN_UNIVERSAL* = 0x00
  ASN_PRIMITIVE* = 0x00
  ASN_CONSTRUCTOR* = 0x20
  ASN_APPLICATION* = 0x40
  ASN_CONTEXT* = 0x80
  ASN_PRIVATE* = 0xC0
  SNMP_PDU_GET* = (ASN_CONTEXT or ASN_CONSTRUCTOR)
  SNMP_PDU_GETNEXT* = ((ASN_CONTEXT or ASN_CONSTRUCTOR) + 1)
  SNMP_PDU_RESPONSE* = ((ASN_CONTEXT or ASN_CONSTRUCTOR) + 2)
  SNMP_PDU_SET* = ((ASN_CONTEXT or ASN_CONSTRUCTOR) + 3)
  SNMP_PDU_GETBULK* = ((ASN_CONTEXT or ASN_CONSTRUCTOR) + 4)
  SNMP_PDU_V1TRAP* = (ASN_CONTEXT or ASN_CONSTRUCTOR or 4)
  SNMP_PDU_INFORM* = (ASN_CONTEXT or ASN_CONSTRUCTOR or 6)
  SNMP_PDU_TRAP* = ((ASN_CONTEXT or ASN_CONSTRUCTOR or 6) + 1)
  SNMP_PDU_REPORT* = ((ASN_CONTEXT or ASN_CONSTRUCTOR or 6) + 2)
  aSN_INTEGER* = (ASN_UNIVERSAL or ASN_PRIMITIVE or 2)
  aSN_BITS* = ((ASN_UNIVERSAL or ASN_PRIMITIVE or 2) + 1)
  aSN_OCTETSTRING* = ((ASN_UNIVERSAL or ASN_PRIMITIVE or 2) + 2)
  aSN_NULL* = ((ASN_UNIVERSAL or ASN_PRIMITIVE or 2) + 3)
  aSN_OBJECTIDENTIFIER* = ((ASN_UNIVERSAL or ASN_PRIMITIVE or 2) + 4)
  aSN_INTEGER32* = aSN_INTEGER
  aSN_SEQUENCE* = (ASN_UNIVERSAL or ASN_CONSTRUCTOR or 0x10)
  aSN_SEQUENCEOF* = aSN_SEQUENCE
  aSN_IPADDRESS* = (ASN_APPLICATION or ASN_PRIMITIVE)
  aSN_COUNTER32* = ((ASN_APPLICATION or ASN_PRIMITIVE) + 1)
  aSN_GAUGE32* = ((ASN_APPLICATION or ASN_PRIMITIVE) + 2)
  aSN_TIMETICKS* = ((ASN_APPLICATION or ASN_PRIMITIVE) + 3)
  aSN_OPAQUE* = ((ASN_APPLICATION or ASN_PRIMITIVE) + 4)
  aSN_COUNTER64* = (ASN_APPLICATION or ASN_PRIMITIVE or 6)
  aSN_UNSIGNED32* = ((ASN_APPLICATION or ASN_PRIMITIVE or 6) + 1)
  SNMP_EXCEPTION_NOSUCHOBJECT* = (ASN_CONTEXT or ASN_PRIMITIVE)
  SNMP_EXCEPTION_NOSUCHINSTANCE* = ((ASN_CONTEXT or ASN_PRIMITIVE) + 1)
  SNMP_EXCEPTION_ENDOFMIBVIEW* = ((ASN_CONTEXT or ASN_PRIMITIVE) + 2)
  SNMP_EXTENSION_GET* = SNMP_PDU_GET
  SNMP_EXTENSION_GET_NEXT* = SNMP_PDU_GETNEXT
  SNMP_EXTENSION_GET_BULK* = SNMP_PDU_GETBULK
  SNMP_EXTENSION_SET_TEST* = (ASN_PRIVATE or ASN_CONSTRUCTOR)
  SNMP_EXTENSION_SET_COMMIT* = SNMP_PDU_SET
  SNMP_EXTENSION_SET_UNDO* = (ASN_PRIVATE or ASN_CONSTRUCTOR or 1)
  SNMP_EXTENSION_SET_CLEANUP* = ((ASN_PRIVATE or ASN_CONSTRUCTOR or 1) + 1)
  SNMP_ERRORSTATUS_NOERROR* = 0
  SNMP_ERRORSTATUS_TOOBIG* = 1
  SNMP_ERRORSTATUS_NOSUCHNAME* = 2
  SNMP_ERRORSTATUS_BADVALUE* = 3
  SNMP_ERRORSTATUS_READONLY* = 4
  SNMP_ERRORSTATUS_GENERR* = 5
  SNMP_ERRORSTATUS_NOACCESS* = 6
  SNMP_ERRORSTATUS_WRONGTYPE* = 7
  SNMP_ERRORSTATUS_WRONGLENGTH* = 8
  SNMP_ERRORSTATUS_WRONGENCODING* = 9
  SNMP_ERRORSTATUS_WRONGVALUE* = 10
  SNMP_ERRORSTATUS_NOCREATION* = 11
  SNMP_ERRORSTATUS_INCONSISTENTVALUE* = 12
  SNMP_ERRORSTATUS_RESOURCEUNAVAILABLE* = 13
  SNMP_ERRORSTATUS_COMMITFAILED* = 14
  SNMP_ERRORSTATUS_UNDOFAILED* = 15
  SNMP_ERRORSTATUS_AUTHORIZATIONERROR* = 16
  SNMP_ERRORSTATUS_NOTWRITABLE* = 17
  SNMP_ERRORSTATUS_INCONSISTENTNAME* = 18
  SNMP_GENERICTRAP_COLDSTART* = 0
  SNMP_GENERICTRAP_WARMSTART* = 1
  SNMP_GENERICTRAP_LINKDOWN* = 2
  SNMP_GENERICTRAP_LINKUP* = 3
  SNMP_GENERICTRAP_AUTHFAILURE* = 4
  SNMP_GENERICTRAP_EGPNEIGHLOSS* = 5
  SNMP_GENERICTRAP_ENTERSPECIFIC* = 6
  SNMP_ACCESS_NONE* = 0
  SNMP_ACCESS_NOTIFY* = 1
  SNMP_ACCESS_READ_ONLY* = 2
  SNMP_ACCESS_READ_WRITE* = 3
  SNMP_ACCESS_READ_CREATE* = 4
  SNMPAPI_ERROR* = 0
  SNMPAPI_NOERROR* = 1
  SNMP_LOG_SILENT* = 0
  SNMP_LOG_FATAL* = 1
  SNMP_LOG_ERROR* = 2
  SNMP_LOG_WARNING* = 3
  SNMP_LOG_TRACE* = 4
  SNMP_LOG_VERBOSE* = 5
  SNMP_OUTPUT_TO_CONSOLE* = 1
  SNMP_OUTPUT_TO_LOGFILE* = 2
  SNMP_OUTPUT_TO_EVENTLOG* = 4
  SNMP_OUTPUT_TO_DEBUGGER* = 8
  SNMP_MAX_OID_LEN* = 128
  SNMP_MEM_ALLOC_ERROR* = 1
  SNMP_BERAPI_INVALID_LENGTH* = 10
  SNMP_BERAPI_INVALID_TAG* = 11
  SNMP_BERAPI_OVERFLOW* = 12
  SNMP_BERAPI_SHORT_BUFFER* = 13
  SNMP_BERAPI_INVALID_OBJELEM* = 14
  SNMP_PDUAPI_UNRECOGNIZED_PDU* = 20
  SNMP_PDUAPI_INVALID_ES* = 21
  SNMP_PDUAPI_INVALID_GT* = 22
  SNMP_AUTHAPI_INVALID_VERSION* = 30
  SNMP_AUTHAPI_INVALID_MSG_TYPE* = 31
  SNMP_AUTHAPI_TRIV_AUTH_FAILED* = 32

type
  AsnOctetString* {.final, pure.} = object
    stream*: ptr BYTE
    length*: UINT
    dynamic*: BOOL
  AsnBits* = AsnOctetString
  AsnSequence* = AsnOctetString
  AsnImplicitSequence* = AsnOctetString
  AsnIPAddress* = AsnOctetString
  AsnNetworkAddress* = AsnOctetString
  AsnDisplayString* = AsnOctetString
  AsnOpaque* = AsnOctetString
  AsnObjectIdentifier* {.final, pure.} = object
    idLength*: UINT
    ids*: ptr UINT
  AsnObjectName* = AsnObjectIdentifier
  AsnAny_asnValue* {.final, union, pure.} = object
    number*: AsnInteger32
    unsigned32*: AsnUnsigned32
    counter64*: AsnCounter64
    string*: AsnOctetString
    bits*: AsnBits
    obj*: AsnObjectIdentifier
    sequence*: AsnSequence
    address*: AsnIPAddress
    counter*: AsnCounter32
    gauge*: AsnGauge32
    ticks*: AsnTimeticks
    arbitrary*: AsnOpaque
  AsnAny* {.final, pure.} = object
    asnType*: BYTE
  AsnObjectSyntax* = AsnAny
  SnmpVarBind* {.final, pure.} = object
    name*: AsnObjectName
    value*: AsnObjectSyntax
  SnmpVarBindList* {.final, pure.} = object
    list*: ptr SnmpVarBind
    len*: UINT

proc SnmpExtensionClose*(): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpExtensionInit*(P1: DWORD, P2: ptr HANDLE, P3: ptr AsnObjectIdentifier): BOOL {.winapi, dynlib: "snmpapi", importc.}
proc SnmpExtensionInitEx*(P1: ptr AsnObjectIdentifier): BOOL {.winapi, dynlib: "snmpapi", importc.}
proc SnmpExtensionMonitor*(P1: LPVOID): BOOL {.winapi, dynlib: "snmpapi", importc.}
proc SnmpExtensionQuery*(P1: BYTE, P2: ptr SnmpVarBindList, P3: ptr AsnInteger32, P4: ptr AsnInteger32): BOOL {.winapi, dynlib: "snmpapi", importc.}
proc SnmpExtensionQueryEx*(P1: DWORD, P2: DWORD, P3: ptr SnmpVarBindList, P4: ptr AsnOctetString, P5: ptr AsnInteger32, P6: ptr AsnInteger32): BOOL {.winapi, dynlib: "snmpapi", importc.}
proc SnmpExtensionTrap*(P1: ptr AsnObjectIdentifier, P2: ptr AsnInteger32, P3: ptr AsnInteger32, P4: ptr AsnTimeticks, P5: ptr SnmpVarBindList): BOOL {.winapi, dynlib: "snmpapi", importc.}
proc SnmpSvcGetUptime*(): DWORD {.winapi, dynlib: "snmpapi", importc.}
proc SnmpSvcSetLogLevel*(P1: INT): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpSvcSetLogType*(P1: INT): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilAsnAnyCpy*(P1: ptr AsnAny, P2: ptr AsnAny): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilAsnAnyFree*(P1: ptr AsnAny): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilDbgPrint*(P1: INT, P2: LPSTR): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilIdsToA*(P1: ptr UINT, P2: UINT): LPSTR {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilMemAlloc*(P1: UINT): LPVOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilMemFree*(P1: LPVOID): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilMemReAlloc*(P1: LPVOID, P2: UINT): LPVOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOctetsCmp*(P1: ptr AsnOctetString, P2: ptr AsnOctetString): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOctetsCpy*(P1: ptr AsnOctetString, P2: ptr AsnOctetString): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOctetsFree*(P1: ptr AsnOctetString): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOctetsNCmp*(P1: ptr AsnOctetString, P2: ptr AsnOctetString, P3: UINT): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOidAppend*(P1: ptr AsnObjectIdentifier, P2: ptr AsnObjectIdentifier): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOidCmp*(P1: ptr AsnObjectIdentifier, P2: ptr AsnObjectIdentifier): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOidCpy*(P1: ptr AsnObjectIdentifier, P2: ptr AsnObjectIdentifier): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOidFree*(P1: ptr AsnObjectIdentifier): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOidNCmp*(P1: ptr AsnObjectIdentifier, P2: ptr AsnObjectIdentifier, P3: UINT): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOidToA*(P1: ptr AsnObjectIdentifier): LPSTR {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilPrintAsnAny*(P1: ptr AsnAny): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilPrintOid*(P1: ptr AsnObjectIdentifier): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilVarBindCpy*(P1: ptr SnmpVarBind, P2: ptr SnmpVarBind): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilVarBindListCpy*(P1: ptr SnmpVarBindList, P2: ptr SnmpVarBindList): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilVarBindFree*(P1: ptr SnmpVarBind): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilVarBindListFree*(P1: ptr SnmpVarBindList): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SNMP_malloc*(P1: UINT): LPVOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilMemAlloc".}
proc SNMP_free*(P1: LPVOID): VOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilMemFree".}
proc SNMP_realloc*(P1: LPVOID, P2: UINT): LPVOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilMemReAlloc".}
proc SNMP_DBG_malloc*(P1: UINT): LPVOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilMemAlloc".}
proc SNMP_DBG_free*(P1: LPVOID): VOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilMemFree".}
proc SNMP_DBG_realloc*(P1: LPVOID, P2: UINT): LPVOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilMemReAlloc".}
proc SNMP_oidappend*(P1: ptr AsnObjectIdentifier, P2: ptr AsnObjectIdentifier): SNMPAPI {.winapi, dynlib: "snmpapi", importc: "SnmpUtilOidAppend".}
proc SNMP_oidcmp*(P1: ptr AsnObjectIdentifier, P2: ptr AsnObjectIdentifier): SNMPAPI {.winapi, dynlib: "snmpapi", importc: "SnmpUtilOidCmp".}
proc SNMP_oidcpy*(P1: ptr AsnObjectIdentifier, P2: ptr AsnObjectIdentifier): SNMPAPI {.winapi, dynlib: "snmpapi", importc: "SnmpUtilOidCpy".}
proc SNMP_oidfree*(P1: ptr AsnObjectIdentifier): VOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilOidFree".}
proc SNMP_oidncmp*(P1: ptr AsnObjectIdentifier, P2: ptr AsnObjectIdentifier, P3: UINT): SNMPAPI {.winapi, dynlib: "snmpapi", importc: "SnmpUtilOidNCmp".}
proc SNMP_printany*(P1: ptr AsnAny): VOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilPrintAsnAny".}
proc SNMP_CopyVarBind*(P1: ptr SnmpVarBind, P2: ptr SnmpVarBind): SNMPAPI {.winapi, dynlib: "snmpapi", importc: "SnmpUtilVarBindCpy".}
proc SNMP_CopyVarBindList*(P1: ptr SnmpVarBindList, P2: ptr SnmpVarBindList): SNMPAPI {.winapi, dynlib: "snmpapi", importc: "SnmpUtilVarBindListCpy".}
proc SNMP_FreeVarBind*(P1: ptr SnmpVarBind): VOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilVarBindFree".}
proc SNMP_FreeVarBindList*(P1: ptr SnmpVarBindList): VOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilVarBindListFree".}

type
  ASN_RFC1155_IPADDRESS* = ASN_IPADDRESS
  ASN_RFC1155_COUNTER* = ASN_COUNTER32
  ASN_RFC1155_GAUGE* = ASN_GAUGE32
  ASN_RFC1155_TIMETICKS* = ASN_TIMETICKS
  ASN_RFC1155_OPAQUE* = ASN_OPAQUE
  ASN_RFC1213_DISPSTRING* = ASN_OCTETSTRING
  RFC1157VarBindList* = SnmpVarBindList
  RFC1157VarBind* = SnmpVarBind

const
  ASN_RFC1157_GETREQUEST* = SNMP_PDU_GET
  ASN_RFC1157_GETNEXTREQUEST* = SNMP_PDU_GETNEXT
  ASN_RFC1157_GETRESPONSE* = SNMP_PDU_RESPONSE
  ASN_RFC1157_SETREQUEST* = SNMP_PDU_SET
  ASN_RFC1157_TRAP* = SNMP_PDU_V1TRAP
  ASN_CONTEXTSPECIFIC* = ASN_CONTEXT
  ASN_PRIMATIVE* = ASN_PRIMITIVE

# misc/mgmtapi.nim

const
  SNMP_MGMTAPI_TIMEOUT* = 40
  SNMP_MGMTAPI_SELECT_FDERRORS* = 41
  SNMP_MGMTAPI_TRAP_ERRORS* = 42
  SNMP_MGMTAPI_TRAP_DUPINIT* = 43
  SNMP_MGMTAPI_NOTRAPS* = 44
  SNMP_MGMTAPI_AGAIN* = 45
  SNMP_MGMTAPI_INVALID_CTL* = 46
  SNMP_MGMTAPI_INVALID_SESSION* = 47
  SNMP_MGMTAPI_INVALID_BUFFER* = 48
  MGMCTL_SETAGENTPORT* = 1

type
  LPSNMP_MGR_SESSION* = PVOID

proc SnmpMgrClose*(P1: LPSNMP_MGR_SESSION): BOOL {.winapi, dynlib: "mgmtapi", importc.}
proc SnmpMgrCtl*(P1: LPSNMP_MGR_SESSION, P2: DWORD, P3: LPVOID, P4: DWORD, P5: LPVOID, P6: DWORD, P7: LPDWORD): BOOL {.winapi, dynlib: "mgmtapi", importc.}
proc SnmpMgrGetTrap*(P1: ptr AsnObjectIdentifier, P2: ptr AsnNetworkAddress, P3: ptr AsnInteger, P4: ptr AsnInteger, P5: ptr AsnTimeticks, P6: ptr SnmpVarBindList): BOOL {.winapi, dynlib: "mgmtapi", importc.}
proc SnmpMgrGetTrapEx*(P1: ptr AsnObjectIdentifier, P2: ptr AsnNetworkAddress, P3: ptr AsnNetworkAddress, P4: ptr AsnInteger, P5: ptr AsnInteger, P6: ptr AsnOctetString, P7: ptr AsnTimeticks, P8: ptr SnmpVarBindList): BOOL {.winapi, dynlib: "mgmtapi", importc.}
proc SnmpMgrOidToStr*(P1: ptr AsnObjectIdentifier, P2: ptr LPSTR): BOOL {.winapi, dynlib: "mgmtapi", importc.}
proc SnmpMgrOpen*(P1: LPSTR, P2: LPSTR, P3: INT, P4: INT): LPSNMP_MGR_SESSION {.winapi, dynlib: "mgmtapi", importc.}
proc SnmpMgrRequest*(P1: LPSNMP_MGR_SESSION, P2: BYTE, P3: ptr SnmpVarBindList, P4: ptr AsnInteger, P5: ptr AsnInteger): INT {.winapi, dynlib: "mgmtapi", importc.}
proc SnmpMgrStrToOid*(P1: LPSTR, P2: ptr AsnObjectIdentifier): BOOL {.winapi, dynlib: "mgmtapi", importc.}
proc SnmpMgrTrapListen*(P1: ptr HANDLE): BOOL {.winapi, dynlib: "mgmtapi", importc.}

# misc/subauth.nim
const
  # NETLOGON_LOGON_INFO_CLASS* = enum
  NetlogonInteractiveInformation* = 1
  NetlogonNetworkInformation* = 2
  NetlogonServiceInformation* = 3
  NetlogonGenericInformation* = 4
  NetlogonInteractiveTransitiveInformation* = 5
  NetlogonNetworkTransitiveInformation* = 6
  NetlogonServiceTransitiveInformation* = 7

const
  MSV1_0_PASSTHRU* = 1
  MSV1_0_GUEST_LOGON* = 2
  MSV1_0_VALIDATION_LOGOFF_TIME* = 1
  MSV1_0_VALIDATION_KICKOFF_TIME* = 2
  MSV1_0_VALIDATION_LOGON_SERVER* = 4
  MSV1_0_VALIDATION_LOGON_DOMAIN* = 8
  MSV1_0_VALIDATION_SESSION_KEY* = 16
  MSV1_0_VALIDATION_USER_FLAGS* = 32
  MSV1_0_VALIDATION_USER_ID* = 64
  MSV1_0_SUBAUTH_ACCOUNT_DISABLED* = 1
  MSV1_0_SUBAUTH_PASSWORD* = 2
  MSV1_0_SUBAUTH_WORKSTATIONS* = 4
  MSV1_0_SUBAUTH_LOGON_HOURS* = 8
  MSV1_0_SUBAUTH_ACCOUNT_EXPIRY* = 16
  MSV1_0_SUBAUTH_PASSWORD_EXPIRY* = 32
  MSV1_0_SUBAUTH_ACCOUNT_TYPE* = 64
  MSV1_0_SUBAUTH_LOCKOUT* = 128
  NEXT_FREE_ACCOUNT_CONTROL_BIT* = 131072
  SAM_DAYS_PER_WEEK* = 7
  SAM_HOURS_PER_WEEK* = 168
  SAM_MINUTES_PER_WEEK* = 10080
  STATUS_SUCCESS* = 0
  STATUS_INVALID_INFO_CLASS* = -1073741821
  STATUS_NO_SUCH_USER* = -1073741724
  STATUS_WRONG_PASSWORD* = -1073741718
  STATUS_PASSWORD_RESTRICTION* = -1073741716
  STATUS_LOGON_FAILURE* = -1073741715
  STATUS_ACCOUNT_RESTRICTION* = -1073741714
  STATUS_INVALID_LOGON_HOURS* = -1073741713
  STATUS_INVALID_WORKSTATION* = -1073741712
  STATUS_PASSWORD_EXPIRED* = -1073741711
  STATUS_ACCOUNT_DISABLED* = -1073741710
  STATUS_INSUFFICIENT_RESOURCES* = -1073741670
  STATUS_ACCOUNT_EXPIRED* = -1073741421
  STATUS_PASSWORD_MUST_CHANGE* = -1073741276
  STATUS_ACCOUNT_LOCKED_OUT* = -1073741260
  USER_ACCOUNT_DISABLED* = 1
  USER_HOME_DIRECTORY_REQUIRED* = 2
  USER_PASSWORD_NOT_REQUIRED* = 4
  USER_TEMP_DUPLICATE_ACCOUNT* = 8
  USER_NORMAL_ACCOUNT* = 16
  USER_MNS_LOGON_ACCOUNT* = 32
  USER_INTERDOMAIN_TRUST_ACCOUNT* = 64
  USER_WORKSTATION_TRUST_ACCOUNT* = 128
  USER_SERVER_TRUST_ACCOUNT* = 256
  USER_DONT_EXPIRE_PASSWORD* = 512
  USER_ACCOUNT_AUTO_LOCKED* = 1024
  USER_ENCRYPTED_TEXT_PASSWORD_ALLOWED* = 2048
  USER_SMARTCARD_REQUIRED* = 4096
  USER_TRUSTED_FOR_DELEGATION* = 8192
  USER_NOT_DELEGATED* = 16384
  USER_USE_DES_KEY_ONLY* = 32768
  USER_DONT_REQUIRE_PREAUTH* = 65536
  USER_MACHINE_ACCOUNT_MASK* = 448
  USER_ACCOUNT_TYPE_MASK* = 472
  USER_ALL_PARAMETERS* = 2097152

type
  SAM_HANDLE* = HANDLE
  PSAM_HANDLE* = ptr HANDLE
  OLD_LARGE_INTEGER* {.final, pure.} = object
    LowPart*: ULONG
    HighPart*: LONG
  POLD_LARGE_INTEGER* = ptr OLD_LARGE_INTEGER
  NETLOGON_LOGON_INFO_CLASS* = int32

const
  CYPHER_BLOCK_LENGTH* = 8
  USER_SESSION_KEY_LENGTH* = CYPHER_BLOCK_LENGTH * 2
  CLEAR_BLOCK_LENGTH* = 8

type
  CYPHER_BLOCK* {.final, pure.} = object
    data*: array[CYPHER_BLOCK_LENGTH, CHAR]
  PCYPHER_BLOCK* = ptr CYPHER_BLOCK
  CLEAR_BLOCK* {.final, pure.} = object
    data*: array[CLEAR_BLOCK_LENGTH, CHAR]
  PCLEAR_BLOCK* = ptr CLEAR_BLOCK
  LM_OWF_PASSWORD* {.final, pure.} = object
    data*: array[2, CYPHER_BLOCK]
  PLM_OWF_PASSWORD* = ptr LM_OWF_PASSWORD
  USER_SESSION_KEY* {.final, pure.} = object
    data*: array[2, CYPHER_BLOCK]
  PUSER_SESSION_KEY* = ptr USER_SESSION_KEY
  LM_CHALLENGE* = CLEAR_BLOCK
  PLM_CHALLENGE* = ptr LM_CHALLENGE
  NT_OWF_PASSWORD* = LM_OWF_PASSWORD
  PNT_OWF_PASSWORD* = ptr NT_OWF_PASSWORD
  NT_CHALLENGE* = LM_CHALLENGE
  PNT_CHALLENGE* = ptr NT_CHALLENGE
  LOGON_HOURS* {.final, pure.} = object
    UnitsPerWeek*: USHORT
    LogonHours*: PUCHAR
  PLOGON_HOURS* = ptr LOGON_HOURS
  SR_SECURITY_DESCRIPTOR* {.final, pure.} = object
    Length*: ULONG
    SecurityDescriptor*: PUCHAR
  PSR_SECURITY_DESCRIPTOR* = ptr SR_SECURITY_DESCRIPTOR
  USER_ALL_INFORMATION* {.final, pure.} = object
    LastLogon*: LARGE_INTEGER

    LastLogoff*: LARGE_INTEGER
    PasswordLastSet*: LARGE_INTEGER
    AccountExpires*: LARGE_INTEGER
    PasswordCanChange*: LARGE_INTEGER
    PasswordMustChange*: LARGE_INTEGER
    UserName*: UNICODE_STRING
    FullName*: UNICODE_STRING
    HomeDirectory*: UNICODE_STRING
    HomeDirectoryDrive*: UNICODE_STRING
    ScriptPath*: UNICODE_STRING
    ProfilePath*: UNICODE_STRING
    AdminComment*: UNICODE_STRING
    WorkStations*: UNICODE_STRING
    UserComment*: UNICODE_STRING
    Parameters*: UNICODE_STRING
    LmPassword*: UNICODE_STRING
    NtPassword*: UNICODE_STRING
    PrivateData*: UNICODE_STRING
    SecurityDescriptor*: SR_SECURITY_DESCRIPTOR
    UserId*: ULONG
    PrimaryGroupId*: ULONG
    UserAccountControl*: ULONG
    WhichFields*: ULONG
    LogonHours*: LOGON_HOURS
    BadPasswordCount*: USHORT
    LogonCount*: USHORT
    CountryCode*: USHORT
    CodePage*: USHORT
    LmPasswordPresent*: BOOLEAN
    NtPasswordPresent*: BOOLEAN
    PasswordExpired*: BOOLEAN
    PrivateDataSensitive*: BOOLEAN
  PUSER_ALL_INFORMATION* = ptr USER_ALL_INFORMATION
  MSV1_0_VALIDATION_INFO* {.final, pure.} = object
    LogoffTime*: LARGE_INTEGER
    KickoffTime*: LARGE_INTEGER
    LogonServer*: UNICODE_STRING
    LogonDomainName*: UNICODE_STRING
    SessionKey*: USER_SESSION_KEY
    Authoritative*: BOOLEAN
    UserFlags*: ULONG
    WhichFields*: ULONG
    UserId*: ULONG
  PMSV1_0_VALIDATION_INFO* = ptr MSV1_0_VALIDATION_INFO
  NETLOGON_LOGON_IDENTITY_INFO* {.final, pure.} = object
    LogonDomainName*: UNICODE_STRING
    ParameterControl*: ULONG
    LogonId*: OLD_LARGE_INTEGER
    UserName*: UNICODE_STRING
    Workstation*: UNICODE_STRING
  PNETLOGON_LOGON_IDENTITY_INFO* = ptr NETLOGON_LOGON_IDENTITY_INFO
  NETLOGON_INTERACTIVE_INFO* {.final, pure.} = object
    Identity*: NETLOGON_LOGON_IDENTITY_INFO
    LmOwfPassword*: LM_OWF_PASSWORD
    NtOwfPassword*: NT_OWF_PASSWORD
  PNETLOGON_INTERACTIVE_INFO* = ptr NETLOGON_INTERACTIVE_INFO
  NETLOGON_GENERIC_INFO* {.final, pure.} = object
    Identity*: NETLOGON_LOGON_IDENTITY_INFO
    PackageName*: UNICODE_STRING
    DataLength*: ULONG
    LogonData*: PUCHAR
  PNETLOGON_GENERIC_INFO* = ptr NETLOGON_GENERIC_INFO
  NETLOGON_NETWORK_INFO* {.final, pure.} = object
    Identity*: NETLOGON_LOGON_IDENTITY_INFO
    LmChallenge*: LM_CHALLENGE
    NtChallengeResponse*: STRING
    LmChallengeResponse*: STRING
  PNETLOGON_NETWORK_INFO* = ptr NETLOGON_NETWORK_INFO
  NETLOGON_SERVICE_INFO* {.final, pure.} = object
    Identity*: NETLOGON_LOGON_IDENTITY_INFO
    LmOwfPassword*: LM_OWF_PASSWORD
    NtOwfPassword*: NT_OWF_PASSWORD
  PNETLOGON_SERVICE_INFO* = ptr NETLOGON_SERVICE_INFO

type
  Msv1_0SubAuthenticationRoutine* = proc(P1: NETLOGON_LOGON_INFO_CLASS, P2: PVOID, P3: ULONG, P4: PUSER_ALL_INFORMATION, P5: PULONG, P6: PULONG, P7: PBOOLEAN, P8: PLARGE_INTEGER, P9: PLARGE_INTEGER): NTSTATUS {.stdcall.}
  Msv1_0SubAuthenticationFilter* = proc(P1: NETLOGON_LOGON_INFO_CLASS, P2: PVOID, P3: ULONG, P4: PUSER_ALL_INFORMATION, P5: PULONG, P6: PULONG, P7: PBOOLEAN, P8: PLARGE_INTEGER, P9: PLARGE_INTEGER): NTSTATUS {.stdcall.}
  Msv1_0SubAuthenticationRoutineGeneric* = proc(P1: PVOID, P2: ULONG, P3: PULONG, P4: ptr PVOID): NTSTATUS {.stdcall.}
  Msv1_0SubAuthenticationRoutineEx* = proc(P1: NETLOGON_LOGON_INFO_CLASS, P2: PVOID, P3: ULONG, P4: PUSER_ALL_INFORMATION, P5: SAM_HANDLE, P6: PMSV1_0_VALIDATION_INFO, P7: PULONG): NTSTATUS {.stdcall.}

# misc/regstr.nim

const
  REGSTR_MAX_VALUE_LENGTH* = 256
  IT_COMPACT* = 0
  IT_TYPICAL* = 1
  IT_PORTABLE* = 2
  IT_CUSTOM* = 3
  DOSOPTGF_DEFCLEAN* = 1
  DOSOPTF_DEFAULT* = 0x01
  DOSOPTF_SUPPORTED* = 0x02
  DOSOPTF_ALWAYSUSE* = 0x04
  DOSOPTF_USESPMODE* = 0x08
  DOSOPTF_PROVIDESUMB* = 0x10
  DOSOPTF_NEEDSETUP* = 0x20
  DOSOPTF_INDOSSTART* = 0x40
  DOSOPTF_MULTIPLE* = 0x80
  SUF_FIRSTTIME* = 0x0001
  SUF_EXPRESS* = 0x0002
  SUF_BATCHINF* = 0x0004
  SUF_CLEAN* = 0x0008
  SUF_INSETUP* = 0x0010
  SUF_NETSETUP* = 0x0020
  SUF_NETHDBOOT* = 0x0040
  SUF_NETRPLBOOT* = 0x0080
  SUF_SBSCOPYOK* = 0x0100
  VPDF_DISABLEPWRMGMT* = 1
  VPDF_FORCEAPM10MODE* = 2
  VPDF_SKIPINTELSLCHECK* = 4
  VPDF_DISABLEPWRSTATUSPOLL* = 8
  PCMCIA_OPT_HAVE_SOCKET* = 0x01
  PCMCIA_OPT_AUTOMEM* = 0x04
  PCMCIA_OPT_NO_SOUND* = 0x08
  PCMCIA_OPT_NO_AUDIO* = 0x10
  PCMCIA_OPT_NO_APMREMOVE* = 0x20
  PCMCIA_DEF_MEMBEGIN* = 0x0C0000
  PCMCIA_DEF_MEMEND* = 0xFFFFFF
  PCMCIA_DEF_MEMLEN* = 0x001000
  PCMCIA_DEF_MIN_REGION* = 0x010000
  PCI_OPTIONS_USE_BIOS* = 1
  PCI_OPTIONS_USE_IRQ_STEERING* = 2
  PCI_FLAG_NO_VIDEO_IRQ* = 0x0001
  PCI_FLAG_PCMCIA_WANT_IRQ* = 0x0002
  PCI_FLAG_DUAL_IDE* = 0x0004
  PCI_FLAG_NO_ENUM_AT_ALL* = 0x0008
  PCI_FLAG_ENUM_NO_RESOURCE* = 0x0010
  PCI_FLAG_NEED_DWORD_ACCESS* = 0x0020
  PCI_FLAG_SINGLE_FUNCTION* = 0x0040
  PCI_FLAG_ALWAYS_ENABLED* = 0x0080
  PCI_FLAG_IS_IDE* = 0x0100
  PCI_FLAG_IS_VIDEO* = 0x0200
  PCI_FLAG_FAIL_START* = 0x0400
  REGSTR_VAL_MAX_HCID_LEN* = 1024
  REGDF_NOTDETIO* = 0x00000001
  REGDF_NOTDETMEM* = 0x00000002
  REGDF_NOTDETIRQ* = 0x00000004
  REGDF_NOTDETDMA* = 0x00000008
  REGDF_NOTDETALL* = REGDF_NOTDETIO or REGDF_NOTDETMEM or REGDF_NOTDETIRQ or REGDF_NOTDETDMA
  REGDF_NEEDFULLCONFIG* = 0x00000010
  REGDF_GENFORCEDCONFIG* = 0x00000020
  REGDF_NODETCONFIG* = 0x00008000
  REGDF_CONFLICTIO* = 0x00010000
  REGDF_CONFLICTMEM* = 0x00020000
  REGDF_CONFLICTIRQ* = 0x00040000
  REGDF_CONFLICTDMA* = 0x00080000
  REGDF_CONFLICTALL* = REGDF_CONFLICTIO or REGDF_CONFLICTMEM or REGDF_CONFLICTIRQ or REGDF_CONFLICTDMA
  REGDF_MAPIRQ2TO9* = 0x00100000
  REGDF_NOTVERIFIED* = 0x80000000'i32
  CONFIGFLAG_DISABLED* = 0x0001
  CONFIGFLAG_REMOVED* = 0x0002
  CONFIGFLAG_MANUAL_INSTALL* = 0x0004
  CONFIGFLAG_IGNORE_BOOT_LC* = 0x0008
  CONFIGFLAG_NET_BOOT* = 0x0010
  CONFIGFLAG_REINSTALL* = 0x0020
  CONFIGFLAG_FAILEDINSTALL* = 0x0040
  CONFIGFLAG_CANTSTOPACHILD* = 0x0080
  CONFIGFLAG_OKREMOVEROM* = 0x0100
  CONFIGFLAG_NOREMOVEEXIT* = 0x0200
  CSCONFIGFLAG_DISABLED* = 1
  CSCONFIGFLAG_DO_NOT_CREATE* = 2
  CSCONFIGFLAG_DO_NOT_START* = 4
  CSCONFIGFLAG_BITS* = 7
  DMSTATEFLAG_APPLYTOALL* = 1
  NUM_RESOURCE_MAP* = 256
  MF_FLAGS_EVEN_IF_NO_RESOURCE* = 1
  MF_FLAGS_NO_CREATE_IF_NO_RESOURCE* = 2
  MF_FLAGS_FILL_IN_UNKNOWN_RESOURCE* = 4
  MF_FLAGS_CREATE_BUT_NO_SHOW_DISABLED* = 8
  EISAFLAG_NO_IO_MERGE* = 1
  EISAFLAG_SLOT_IO_FIRST* = 2
  EISA_NO_MAX_FUNCTION* = 0xFF
  NUM_EISA_RANGES* = 4
  APMMENUSUSPEND_DISABLED* = 0
  APMMENUSUSPEND_ENABLED* = 1
  APMMENUSUSPEND_UNDOCKED* = 2
  APMMENUSUSPEND_NOCHANGE* = 128
  REGSTR_KEY_ISAENUM* = "ISAPnP"
  REGSTR_KEY_EISAENUM* = "EISA"
  REGSTR_VAL_EISA_RANGES* = "EISARanges"
  REGSTR_VAL_EISA_FUNCTIONS* = "EISAFunctions"
  REGSTR_VAL_EISA_FUNCTIONS_MASK* = "EISAFunctionsMask"
  REGSTR_VAL_EISA_FLAGS* = "EISAFlags"
  REGSTR_VAL_EISA_SIMULATE_INT15* = "EISASimulateInt15"
  REGSTR_KEY_CLASS* = r"Class"
  REGSTR_KEY_CONFIG* = r"Config"
  REGSTR_KEY_ENUM* = r"Enum"
  REGSTR_KEY_ROOTENUM* = r"Root"
  REGSTR_KEY_BIOSENUM* = r"BIOS"
  REGSTR_KEY_PCMCIAENUM* = r"PCMCIA"
  REGSTR_KEY_PCIENUM* = r"PCI"
  REGSTR_KEY_LOGCONFIG* = r"LogConfig"
  REGSTR_KEY_SYSTEMBOARD* = r" * PNP0C01"
  REGSTR_KEY_APM* = r" * PNP0C05"
  REGSTR_KEY_INIUPDATE* = r"IniUpdate"
  REG_KEY_INSTDEV* = r"Installed"
  REGSTR_KEY_DOSOPTCDROM* = r"CD-ROM"
  REGSTR_KEY_DOSOPTMOUSE* = r"MOUSE"
  REGSTR_DEFAULT_INSTANCE* = r"0000"
  REGSTR_PATH_MOTHERBOARD* = REGSTR_KEY_SYSTEMBOARD & r"\" & REGSTR_DEFAULT_INSTANCE
  REGSTR_PATH_SETUP* = r"Software\Microsoft\Windows\CurrentVersion"
  REGSTR_PATH_PIFCONVERT* = r"Software\Microsoft\Windows\CurrentVersion\PIFConvert"
  REGSTR_PATH_MSDOSOPTS* = r"Software\Microsoft\Windows\CurrentVersion\MS-DOSOptions"
  REGSTR_PATH_MSDOSEMU* = r"Software\Microsoft\Windows\CurrentVersion\MS-DOS Emulation"
  REGSTR_PATH_NEWDOSBOX* = r"Software\Microsoft\Windows\CurrentVersion\MS-DOS Emulation\AppCompat"
  REGSTR_PATH_RUNONCE* = r"Software\Microsoft\Windows\CurrentVersion\RunOnce"
  REGSTR_PATH_RUN* = r"Software\Microsoft\Windows\CurrentVersion\Run"
  REGSTR_PATH_RUNSERVICESONCE* = r"Software\Microsoft\Windows\CurrentVersion\RunServicesOnce"
  REGSTR_PATH_RUNSERVICES* = r"Software\Microsoft\Windows\CurrentVersion\RunServices"
  REGSTR_PATH_EXPLORER* = r"Software\Microsoft\Windows\CurrentVersion\Explorer"
  REGSTR_PATH_DETECT* = r"Software\Microsoft\Windows\CurrentVersion\Detect"
  REGSTR_PATH_APPPATHS* = r"Software\Microsoft\Windows\CurrentVersion\App Paths"
  REGSTR_PATH_UNINSTALL* = r"Software\Microsoft\Windows\CurrentVersion\Uninstall"
  REGSTR_PATH_REALMODENET* = r"Software\Microsoft\Windows\CurrentVersion\Network\Real Mode Net"
  REGSTR_PATH_NETEQUIV* = r"Software\Microsoft\Windows\CurrentVersion\Network\Equivalent"
  REGSTR_PATH_CVNETWORK* = r"Software\Microsoft\Windows\CurrentVersion\Network"
  REGSTR_PATH_IDCONFIGDB* = r"System\CurrentControlSet\Control\IDConfigDB"
  REGSTR_PATH_CLASS* = r"System\CurrentControlSet\Services\Class"
  REGSTR_PATH_DISPLAYSETTINGS* = r"Display\Settings"
  REGSTR_PATH_FONTS* = r"Display\Fonts"
  REGSTR_PATH_ENUM* = r"Enum"
  REGSTR_PATH_ROOT* = r"Enum\Root"
  REGSTR_PATH_SERVICES* = r"System\CurrentControlSet\Services"
  REGSTR_PATH_VXD* = r"System\CurrentControlSet\Services\VxD"
  REGSTR_PATH_IOS* = r"System\CurrentControlSet\Services\VxD\IOS"
  REGSTR_PATH_VMM* = r"System\CurrentControlSet\Services\VxD\VMM"
  REGSTR_PATH_VPOWERD* = r"System\CurrentControlSet\Services\VxD\VPOWERD"
  REGSTR_PATH_VNETSUP* = r"System\CurrentControlSet\Services\VxD\VNETSUP"
  REGSTR_PATH_NWREDIR* = r"System\CurrentControlSet\Services\VxD\NWREDIR"
  REGSTR_PATH_NCPSERVER* = r"System\CurrentControlSet\Services\NcpServer\Parameters"
  REGSTR_PATH_IOARB* = r"System\CurrentControlSet\Services\Arbitrators\IOArb"
  REGSTR_PATH_ADDRARB* = r"System\CurrentControlSet\Services\Arbitrators\AddrArb"
  REGSTR_PATH_DMAARB* = r"System\CurrentControlSet\Services\Arbitrators\DMAArb"
  REGSTR_PATH_IRQARB* = r"System\CurrentControlSet\Services\Arbitrators\IRQArb"
  REGSTR_PATH_CODEPAGE* = r"System\CurrentControlSet\Control\Nls\Codepage"
  REGSTR_PATH_FILESYSTEM* = r"System\CurrentControlSet\Control\FileSystem"
  REGSTR_PATH_FILESYSTEM_NOVOLTRACK* = r"System\CurrentControlSet\Control\FileSystem\NoVolTrack"
  REGSTR_PATH_CDFS* = r"System\CurrentControlSet\Control\FileSystem\CDFS"
  REGSTR_PATH_WINBOOT* = r"System\CurrentControlSet\Control\WinBoot"
  REGSTR_PATH_INSTALLEDFILES* = r"System\CurrentControlSet\Control\InstalledFiles"
  REGSTR_PATH_VMM32FILES* = r"System\CurrentControlSet\Control\VMM32Files"
  REGSTR_VAL_BITSPERPIXEL* = r"BitsPerPixel"
  REGSTR_VAL_RESOLUTION* = r"Resolution"
  REGSTR_VAL_DPILOGICALX* = r"DPILogicalX"
  REGSTR_VAL_DPILOGICALY* = r"DPILogicalY"
  REGSTR_VAL_DPIPHYSICALX* = r"DPIPhysicalX"
  REGSTR_VAL_DPIPHYSICALY* = r"DPIPhysicalY"
  REGSTR_VAL_REFRESHRATE* = r"RefreshRate"
  REGSTR_VAL_DISPLAYFLAGS* = r"DisplayFlags"
  REGSTR_PATH_CONTROLPANEL* = r"Control Panel"
  REGSTR_PATH_CONTROLSFOLDER* = r"Software\Microsoft\Windows\CurrentVersion\Controls Folder"
  REGSTR_VAL_DOSCP* = r"OEMCP"
  REGSTR_VAL_WINCP* = r"ACP"
  REGSTR_PATH_DYNA_ENUM* = r"Config Manager\Enum"
  REGSTR_VAL_HARDWARE_KEY* = r"HardWareKey"
  REGSTR_VAL_ALLOCATION* = r"Allocation"
  REGSTR_VAL_PROBLEM* = r"Problem"
  REGSTR_VAL_STATUS* = r"Status"
  REGSTR_VAL_DONTUSEMEM* = r"DontAllocLastMem"
  REGSTR_VAL_SYSTEMROOT* = r"SystemRoot"
  REGSTR_VAL_BOOTCOUNT* = r"BootCount"
  REGSTR_VAL_REALNETSTART* = r"RealNetStart"
  REGSTR_VAL_MEDIA* = r"MediaPath"
  REGSTR_VAL_CONFIG* = r"ConfigPath"
  REGSTR_VAL_DEVICEPATH* = r"DevicePath"
  REGSTR_VAL_SRCPATH* = r"SourcePath"
  REGSTR_VAL_OLDWINDIR* = r"OldWinDir"
  REGSTR_VAL_SETUPFLAGS* = r"SetupFlags"
  REGSTR_VAL_REGOWNER* = r"RegisteredOwner"
  REGSTR_VAL_REGORGANIZATION* = r"RegisteredOrganization"
  REGSTR_VAL_LICENSINGINFO* = r"LicensingInfo"
  REGSTR_VAL_OLDMSDOSVER* = r"OldMSDOSVer"
  REGSTR_VAL_FIRSTINSTALLDATETIME* = r"FirstInstallDateTime"
  REGSTR_VAL_INSTALLTYPE* = r"InstallType"
  REGSTR_VAL_WRAPPER* = r"Wrapper"
  REGSTR_KEY_SETUP* = r"\Setup"
  REGSTR_VAL_BOOTDIR* = r"BootDir"
  REGSTR_VAL_WINBOOTDIR* = r"WinbootDir"
  REGSTR_VAL_WINDIR* = r"WinDir"
  REGSTR_VAL_APPINSTPATH* = r"AppInstallPath"
  REGSTR_PATH_EBD* = REGSTR_PATH_SETUP & REGSTR_KEY_SETUP & r"\EBD"
  REGSTR_KEY_EBDFILESLOCAL* = r"EBDFilesLocale"
  REGSTR_KEY_EBDFILESKEYBOARD* = r"EBDFilesKeyboard"
  REGSTR_KEY_EBDAUTOEXECBATLOCAL* = r"EBDAutoexecBatLocale"
  REGSTR_KEY_EBDAUTOEXECBATKEYBOARD* = r"EBDAutoexecBatKeyboard"
  REGSTR_KEY_EBDCONFIGSYSLOCAL* = r"EBDConfigSysLocale"
  REGSTR_KEY_EBDCONFIGSYSKEYBOARD* = r"EBDConfigSysKeyboard"
  REGSTR_VAL_MSDOSMODE* = r"MSDOSMode"
  REGSTR_VAL_MSDOSMODEDISCARD* = r"Discard"
  REGSTR_VAL_DOSOPTGLOBALFLAGS* = r"GlobalFlags"
  REGSTR_VAL_DOSOPTFLAGS* = r"Flags"
  REGSTR_VAL_OPTORDER* = r"Order"
  REGSTR_VAL_CONFIGSYS* = r"Config.Sys"
  REGSTR_VAL_AUTOEXEC* = r"Autoexec.Bat"
  REGSTR_VAL_STDDOSOPTION* = r"StdOption"
  REGSTR_VAL_DOSOPTTIP* = r"TipText"
  REGSTR_VAL_DOSPAGER* = r"DOSPager"
  REGSTR_VAL_VXDGROUPS* = r"VXDGroups"
  REGSTR_VAL_VPOWERDFLAGS* = r"Flags"
  REGSTR_VAL_WORKGROUP* = r"Workgroup"
  REGSTR_VAL_DIRECTHOST* = r"DirectHost"
  REGSTR_VAL_FILESHARING* = r"FileSharing"
  REGSTR_VAL_PRINTSHARING* = r"PrintSharing"
  REGSTR_VAL_FIRSTNETDRIVE* = r"FirstNetworkDrive"
  REGSTR_VAL_MAXCONNECTIONS* = r"MaxConnections"
  REGSTR_VAL_APISUPPORT* = r"APISupport"
  REGSTR_VAL_MAXRETRY* = r"MaxRetry"
  REGSTR_VAL_MINRETRY* = r"MinRetry"
  REGSTR_VAL_SUPPORTLFN* = r"SupportLFN"
  REGSTR_VAL_SUPPORTBURST* = r"SupportBurst"
  REGSTR_VAL_SUPPORTTUNNELLING* = r"SupportTunnelling"
  REGSTR_VAL_FULLTRACE* = r"FullTrace"
  REGSTR_VAL_READCACHING* = r"ReadCaching"
  REGSTR_VAL_SHOWDOTS* = r"ShowDots"
  REGSTR_VAL_GAPTIME* = r"GapTime"
  REGSTR_VAL_SEARCHMODE* = r"SearchMode"
  REGSTR_VAL_SHELLVERSION* = r"ShellVersion"
  REGSTR_VAL_MAXLIP* = r"MaxLIP"
  REGSTR_VAL_PRESERVECASE* = r"PreserveCase"
  REGSTR_VAL_OPTIMIZESFN* = r"OptimizeSFN"
  REGSTR_VAL_NCP_BROWSEMASTER* = r"BrowseMaster"
  REGSTR_VAL_NCP_USEPEERBROWSING* = r"Use_PeerBrowsing"
  REGSTR_VAL_NCP_USESAP* = r"Use_Sap"
  REGSTR_VAL_WIN31FILESYSTEM* = r"Win31FileSystem"
  REGSTR_VAL_PRESERVELONGNAMES* = r"PreserveLongNames"
  REGSTR_VAL_DRIVEWRITEBEHIND* = r"DriveWriteBehind"
  REGSTR_VAL_ASYNCFILECOMMIT* = r"AsyncFileCommit"
  REGSTR_VAL_PATHCACHECOUNT* = r"PathCache"
  REGSTR_VAL_NAMECACHECOUNT* = r"NameCache"
  REGSTR_VAL_CONTIGFILEALLOC* = r"ContigFileAllocSize"
  REGSTR_VAL_VOLIDLETIMEOUT* = r"VolumeIdleTimeout"
  REGSTR_VAL_BUFFIDLETIMEOUT* = r"BufferIdleTimeout"
  REGSTR_VAL_BUFFAGETIMEOUT* = r"BufferAgeTimeout"
  REGSTR_VAL_NAMENUMERICTAIL* = r"NameNumericTail"
  REGSTR_VAL_READAHEADTHRESHOLD* = r"ReadAheadThreshold"
  REGSTR_VAL_DOUBLEBUFFER* = r"DoubleBuffer"
  REGSTR_VAL_SOFTCOMPATMODE* = r"SoftCompatMode"
  REGSTR_VAL_DRIVESPINDOWN* = r"DriveSpinDown"
  REGSTR_VAL_FORCEPMIO* = r"ForcePMIO"
  REGSTR_VAL_FORCERMIO* = r"ForceRMIO"
  REGSTR_VAL_LASTBOOTPMDRVS* = r"LastBootPMDrvs"
  REGSTR_VAL_VIRTUALHDIRQ* = r"VirtualHDIRQ"
  REGSTR_VAL_SRVNAMECACHECOUNT* = r"ServerNameCacheMax"
  REGSTR_VAL_SRVNAMECACHE* = r"ServerNameCache"
  REGSTR_VAL_SRVNAMECACHENETPROV* = r"ServerNameCacheNumNets"
  REGSTR_VAL_AUTOMOUNT* = r"AutoMountDrives"
  REGSTR_VAL_COMPRESSIONMETHOD* = r"CompressionAlgorithm"
  REGSTR_VAL_COMPRESSIONTHRESHOLD* = r"CompressionThreshold"
  REGSTR_VAL_CDCACHESIZE* = r"CacheSize"
  REGSTR_VAL_CDPREFETCH* = r"Prefetch"
  REGSTR_VAL_CDPREFETCHTAIL* = r"PrefetchTail"
  REGSTR_VAL_CDRAWCACHE* = r"RawCache"
  REGSTR_VAL_CDEXTERRORS* = r"ExtendedErrors"
  REGSTR_VAL_CDSVDSENSE* = r"SVDSense"
  REGSTR_VAL_CDSHOWVERSIONS* = r"ShowVersions"
  REGSTR_VAL_CDCOMPATNAMES* = r"MSCDEXCompatNames"
  REGSTR_VAL_CDNOREADAHEAD* = r"NoReadAhead"
  REGSTR_VAL_SCSI* = r"SCSI\"
  REGSTR_VAL_ESDI* = r"ESDI\"
  REGSTR_VAL_FLOP* = r"FLOP\"
  REGSTR_VAL_DISK* = r"GenDisk"
  REGSTR_VAL_CDROM* = r"GenCD"
  REGSTR_VAL_TAPE* = r"TAPE"
  REGSTR_VAL_SCANNER* = r"SCANNER"
  REGSTR_VAL_FLOPPY* = r"FLOPPY"
  REGSTR_VAL_SCSITID* = r"SCSITargetID"
  REGSTR_VAL_SCSILUN* = r"SCSILUN"
  REGSTR_VAL_REVLEVEL* = r"RevisionLevel"
  REGSTR_VAL_PRODUCTID* = r"ProductId"
  REGSTR_VAL_PRODUCTTYPE* = r"ProductType"
  REGSTR_VAL_DEVTYPE* = r"DeviceType"
  REGSTR_VAL_REMOVABLE* = r"Removable"
  REGSTR_VAL_CURDRVLET* = r"CurrentDriveLetterAssignment"
  REGSTR_VAL_USRDRVLET* = r"UserDriveLetterAssignment"
  REGSTR_VAL_SYNCDATAXFER* = r"SyncDataXfer"
  REGSTR_VAL_AUTOINSNOTE* = r"AutoInsertNotification"
  REGSTR_VAL_DISCONNECT* = r"Disconnect"
  REGSTR_VAL_INT13* = r"Int13"
  REGSTR_VAL_PMODE_INT13* = r"PModeInt13"
  REGSTR_VAL_USERSETTINGS* = r"AdapterSettings"
  REGSTR_VAL_NOIDE* = r"NoIDE"
  REGSTR_VAL_DISKCLASSNAME* = r"DiskDrive"
  REGSTR_VAL_CDROMCLASSNAME* = r"CDROM"
  REGSTR_VAL_FORCELOAD* = r"ForceLoadPD"
  REGSTR_VAL_FORCEFIFO* = r"ForceFIFO"
  REGSTR_VAL_FORCECL* = r"ForceChangeLine"
  REGSTR_VAL_NOUSECLASS* = r"NoUseClass"
  REGSTR_VAL_NOINSTALLCLASS* = r"NoInstallClass"
  REGSTR_VAL_NODISPLAYCLASS* = r"NoDisplayClass"
  REGSTR_VAL_SILENTINSTALL* = r"SilentInstall"
  REGSTR_KEY_PCMCIA_CLASS* = r"PCMCIA"
  REGSTR_KEY_SCSI_CLASS* = r"SCSIAdapter"
  REGSTR_KEY_PORTS_CLASS* = r"ports"
  REGSTR_KEY_MEDIA_CLASS* = r"MEDIA"
  REGSTR_KEY_DISPLAY_CLASS* = r"Display"
  REGSTR_KEY_KEYBOARD_CLASS* = r"Keyboard"
  REGSTR_KEY_MOUSE_CLASS* = r"Mouse"
  REGSTR_KEY_MONITOR_CLASS* = r"Monitor"
  REGSTR_VAL_PCMCIA_OPT* = r"Options"
  REGSTR_VAL_PCMCIA_MEM* = r"Memory"
  REGSTR_VAL_PCMCIA_ALLOC* = r"AllocMemWin"
  REGSTR_VAL_PCMCIA_ATAD* = r"ATADelay"
  REGSTR_VAL_PCMCIA_SIZ* = r"MinRegionSize"
  REGSTR_VAL_P1284MDL* = r"Model"
  REGSTR_VAL_P1284MFG* = r"Manufacturer"
  REGSTR_VAL_ISAPNP* = r"ISAPNP"
  REGSTR_VAL_ISAPNP_RDP_OVERRIDE* = r"RDPOverRide"
  REGSTR_VAL_PCI* = r"PCI"
  REGSTR_PCI_OPTIONS* = r"Options"
  REGSTR_PCI_DUAL_IDE* = r"PCIDualIDE"
  REGSTR_KEY_CRASHES* = r"Crashes"
  REGSTR_KEY_DANGERS* = r"Dangers"
  REGSTR_KEY_DETMODVARS* = r"DetModVars"
  REGSTR_KEY_NDISINFO* = r"NDISInfo"
  REGSTR_VAL_PROTINIPATH* = r"ProtIniPath"
  REGSTR_VAL_RESOURCES* = r"Resources"
  REGSTR_VAL_CRASHFUNCS* = r"CrashFuncs"
  REGSTR_VAL_CLASS* = r"Class"
  REGSTR_VAL_DEVDESC* = r"DeviceDesc"
  REGSTR_VAL_BOOTCONFIG* = r"BootConfig"
  REGSTR_VAL_DETFUNC* = r"DetFunc"
  REGSTR_VAL_DETFLAGS* = r"DetFlags"
  REGSTR_VAL_COMPATIBLEIDS* = r"CompatibleIDs"
  REGSTR_VAL_DETCONFIG* = r"DetConfig"
  REGSTR_VAL_VERIFYKEY* = r"VerifyKey"
  REGSTR_VAL_COMINFO* = r"ComInfo"
  REGSTR_VAL_INFNAME* = r"InfName"
  REGSTR_VAL_CARDSPECIFIC* = r"CardSpecific"
  REGSTR_VAL_NETOSTYPE* = r"NetOSType"
  REGSTR_DATA_NETOS_NDIS* = r"NDIS"
  REGSTR_DATA_NETOS_ODI* = r"ODI"
  REGSTR_DATA_NETOS_IPX* = r"IPX"
  REGSTR_VAL_MFG* = r"Mfg"
  REGSTR_VAL_SCAN_ONLY_FIRST* = r"ScanOnlyFirstDrive"
  REGSTR_VAL_SHARE_IRQ* = r"ForceIRQSharing"
  REGSTR_VAL_NONSTANDARD_ATAPI* = r"NonStandardATAPI"
  REGSTR_VAL_IDE_FORCE_SERIALIZE* = r"ForceSerialization"
  REGSTR_VAL_HWREV* = r"HWRevision"
  REGSTR_VAL_ENABLEINTS* = r"EnableInts"
  REGSTR_VAL_APMBIOSVER* = r"APMBiosVer"
  REGSTR_VAL_APMFLAGS* = r"APMFlags"
  REGSTR_VAL_SLSUPPORT* = r"SLSupport"
  REGSTR_VAL_MACHINETYPE* = r"MachineType"
  REGSTR_VAL_SETUPMACHINETYPE* = r"SetupMachineType"
  REGSTR_MACHTYPE_UNKNOWN* = r"Unknown"
  REGSTR_MACHTYPE_IBMPC* = r"IBM PC"
  REGSTR_MACHTYPE_IBMPCJR* = r"IBM PCjr"
  REGSTR_MACHTYPE_IBMPCCONV* = r"IBM PC Convertible"
  REGSTR_MACHTYPE_IBMPCXT* = r"IBM PC/XT"
  REGSTR_MACHTYPE_IBMPCXT_286* = r"IBM PC/XT 286"
  REGSTR_MACHTYPE_IBMPCAT* = r"IBM PC/AT"
  REGSTR_MACHTYPE_IBMPS2_25* = r"IBM PS/2-25"
  REGSTR_MACHTYPE_IBMPS2_30_286* = r"IBM PS/2-30 286"
  REGSTR_MACHTYPE_IBMPS2_30* = r"IBM PS/2-30"
  REGSTR_MACHTYPE_IBMPS2_50* = r"IBM PS/2-50"
  REGSTR_MACHTYPE_IBMPS2_50Z* = r"IBM PS/2-50Z"
  REGSTR_MACHTYPE_IBMPS2_55SX* = r"IBM PS/2-55SX"
  REGSTR_MACHTYPE_IBMPS2_60* = r"IBM PS/2-60"
  REGSTR_MACHTYPE_IBMPS2_65SX* = r"IBM PS/2-65SX"
  REGSTR_MACHTYPE_IBMPS2_70* = r"IBM PS/2-70"
  REGSTR_MACHTYPE_IBMPS2_P70* = r"IBM PS/2-P70"
  REGSTR_MACHTYPE_IBMPS2_70_80* = r"IBM PS/2-70/80"
  REGSTR_MACHTYPE_IBMPS2_80* = r"IBM PS/2-80"
  REGSTR_MACHTYPE_IBMPS2_90* = r"IBM PS/2-90"
  REGSTR_MACHTYPE_IBMPS1* = r"IBM PS/1"
  REGSTR_MACHTYPE_PHOENIX_PCAT* = r"Phoenix PC/AT Compatible"
  REGSTR_MACHTYPE_HP_VECTRA* = r"HP Vectra"
  REGSTR_MACHTYPE_ATT_PC* = r"AT&T PC"
  REGSTR_MACHTYPE_ZENITH_PC* = r"Zenith PC"
  REGSTR_VAL_APMMENUSUSPEND* = r"APMMenuSuspend"
  REGSTR_VAL_BUSTYPE* = r"BusType"
  REGSTR_VAL_CPU* = r"CPU"
  REGSTR_VAL_NDP* = r"NDP"
  REGSTR_VAL_PNPBIOSVER* = r"PnPBIOSVer"
  REGSTR_VAL_PNPSTRUCOFFSET* = r"PnPStrucOffset"
  REGSTR_VAL_PCIBIOSVER* = r"PCIBIOSVer"
  REGSTR_VAL_HWMECHANISM* = r"HWMechanism"
  REGSTR_VAL_LASTPCIBUSNUM* = r"LastPCIBusNum"
  REGSTR_VAL_CONVMEM* = r"ConvMem"
  REGSTR_VAL_EXTMEM* = r"ExtMem"
  REGSTR_VAL_COMPUTERNAME* = r"ComputerName"
  REGSTR_VAL_BIOSNAME* = r"BIOSName"
  REGSTR_VAL_BIOSVERSION* = r"BIOSVersion"
  REGSTR_VAL_BIOSDATE* = r"BIOSDate"
  REGSTR_VAL_MODEL* = r"Model"
  REGSTR_VAL_SUBMODEL* = r"Submodel"
  REGSTR_VAL_REVISION* = r"Revision"
  REGSTR_VAL_FIFODEPTH* = r"FIFODepth"
  REGSTR_VAL_RDINTTHRESHOLD* = r"RDIntThreshold"
  REGSTR_VAL_WRINTTHRESHOLD* = r"WRIntThreshold"
  REGSTR_VAL_PRIORITY* = r"Priority"
  REGSTR_VAL_DRIVER* = r"Driver"
  REGSTR_VAL_FUNCDESC* = r"FunctionDesc"
  REGSTR_VAL_FORCEDCONFIG* = r"ForcedConfig"
  REGSTR_VAL_CONFIGFLAGS* = r"ConfigFlags"
  REGSTR_VAL_CSCONFIGFLAGS* = r"CSConfigFlags"
  REGSTR_VAL_ROOT_DEVNODE* = r"HTREE\ROOT\0"
  REGSTR_VAL_RESERVED_DEVNODE* = r"HTREE\RESERVED\0"
  REGSTR_PATH_READDATAPORT* = REGSTR_KEY_ISAENUM & r"\ReadDataPort\0"
  REGSTR_PATH_MULTI_FUNCTION* = r"MF"
  REGSTR_VAL_RESOURCE_MAP* = r"ResourceMap"
  REGSTR_PATH_CHILD_PREFIX* = r"Child"
  REGSTR_VAL_MF_FLAGS* = r"MFFlags"
  REGSTR_VAL_DRVDESC* = r"DriverDesc"
  REGSTR_VAL_DEVLOADER* = r"DevLoader"
  REGSTR_VAL_STATICVXD* = r"StaticVxD"
  REGSTR_VAL_PROPERTIES* = r"Properties"
  REGSTR_VAL_MANUFACTURER* = r"Manufacturer"
  REGSTR_VAL_EXISTS* = r"Exists"
  REGSTR_VAL_CMENUMFLAGS* = r"CMEnumFlags"
  REGSTR_VAL_CMDRIVFLAGS* = r"CMDrivFlags"
  REGSTR_VAL_ENUMERATOR* = r"Enumerator"
  REGSTR_VAL_DEVICEDRIVER* = r"DeviceDriver"
  REGSTR_VAL_PORTNAME* = r"PortName"
  REGSTR_VAL_INFPATH* = r"InfPath"
  REGSTR_VAL_INFSECTION* = r"InfSection"
  REGSTR_VAL_POLLING* = r"Polling"
  REGSTR_VAL_DONTLOADIFCONFLICT* = r"DontLoadIfConflict"
  REGSTR_VAL_PORTSUBCLASS* = r"PortSubClass"
  REGSTR_VAL_NETCLEAN* = r"NetClean"
  REGSTR_VAL_IDE_NO_SERIALIZE* = r"IDENoSerialize"
  REGSTR_VAL_NOCMOSORFDPT* = r"NoCMOSorFDPT"
  REGSTR_VAL_COMVERIFYBASE* = r"COMVerifyBase"
  REGSTR_KEY_OVERRIDE* = r"Override"
  REGSTR_VAL_CONFIGMG* = r"CONFIGMG"
  REGSTR_VAL_SYSDM* = r"SysDM"
  REGSTR_VAL_SYSDMFUNC* = r"SysDMFunc"
  REGSTR_VAL_PRIVATE* = r"Private"
  REGSTR_VAL_PRIVATEFUNC* = r"PrivateFunc"
  REGSTR_VAL_DETECT* = r"Detect"
  REGSTR_VAL_DETECTFUNC* = r"DetectFunc"
  REGSTR_VAL_ASKFORCONFIG* = r"AskForConfig"
  REGSTR_VAL_ASKFORCONFIGFUNC* = r"AskForConfigFunc"
  REGSTR_VAL_WAITFORUNDOCK* = r"WaitForUndock"
  REGSTR_VAL_WAITFORUNDOCKFUNC* = r"WaitForUndockFunc"
  REGSTR_VAL_REMOVEROMOKAY* = r"RemoveRomOkay"
  REGSTR_VAL_REMOVEROMOKAYFUNC* = r"RemoveRomOkayFunc"
  REGSTR_VAL_CURCONFIG* = r"CurrentConfig"
  REGSTR_VAL_FRIENDLYNAME* = r"FriendlyName"
  REGSTR_VAL_CURRENTCONFIG* = r"CurrentConfig"
  REGSTR_VAL_MAP* = r"Map"
  REGSTR_VAL_ID* = r"CurrentID"
  REGSTR_VAL_DOCKED* = r"CurrentDockedState"
  REGSTR_VAL_CHECKSUM* = r"CurrentChecksum"
  REGSTR_VAL_HWDETECT* = r"HardwareDetect"
  REGSTR_VAL_INHIBITRESULTS* = r"InhibitResults"
  REGSTR_VAL_PROFILEFLAGS* = r"ProfileFlags"
  REGSTR_KEY_PCMCIA* = r"PCMCIA\"
  REGSTR_KEY_PCUNKNOWN* = r"UNKNOWN_MANUFACTURER"
  REGSTR_VAL_PCSSDRIVER* = r"Driver"
  REGSTR_KEY_PCMTD* = r"MTD-"
  REGSTR_VAL_PCMTDRIVER* = r"MTD"
  REGSTR_VAL_HARDWAREID* = r"HardwareID"
  REGSTR_VAL_INSTALLER* = r"Installer"
  REGSTR_VAL_INSICON* = r"Icon"
  REGSTR_VAL_ENUMPROPPAGES* = r"EnumPropPages"
  REGSTR_VAL_BASICPROPERTIES* = r"BasicProperties"
  REGSTR_VAL_PRIVATEPROBLEM* = r"PrivateProblem"
  REGSTR_KEY_CURRENT* = r"Current"
  REGSTR_KEY_DEFAULT* = r"Default"
  REGSTR_KEY_MODES* = r"Modes"
  REGSTR_VAL_MODE* = r"Mode"
  REGSTR_VAL_BPP* = r"BPP"
  REGSTR_VAL_HRES* = r"HRes"
  REGSTR_VAL_VRES* = r"VRes"
  REGSTR_VAL_FONTSIZE* = r"FontSize"
  REGSTR_VAL_DRV* = r"drv"
  REGSTR_VAL_GRB* = r"grb"
  REGSTR_VAL_VDD* = r"vdd"
  REGSTR_VAL_VER* = r"Ver"
  REGSTR_VAL_MAXRES* = r"MaxResolution"
  REGSTR_VAL_DPMS* = r"DPMS"
  REGSTR_VAL_RESUMERESET* = r"ResumeReset"
  REGSTR_VAL_DESCRIPTION* = r"Description"
  REGSTR_KEY_SYSTEM* = r"System"
  REGSTR_KEY_USER* = r"User"
  REGSTR_VAL_DPI* = r"dpi"
  REGSTR_VAL_PCICOPTIONS* = r"PCICOptions"
  REGSTR_VAL_PCICIRQMAP* = r"PCICIRQMap"
  REGSTR_PATH_APPEARANCE* = r"Control Panel\Appearance"
  REGSTR_PATH_LOOKSCHEMES* = r"Control Panel\Appearance\Schemes"
  REGSTR_VAL_CUSTOMCOLORS* = r"CustomColors"
  REGSTR_PATH_SCREENSAVE* = r"Control Panel\Desktop"
  REGSTR_VALUE_USESCRPASSWORD* = r"ScreenSaveUsePassword"
  REGSTR_VALUE_SCRPASSWORD* = r"ScreenSave_Data"
  REGSTR_VALUE_LOWPOWERTIMEOUT* = r"ScreenSaveLowPowerTimeout"
  REGSTR_VALUE_POWEROFFTIMEOUT* = r"ScreenSavePowerOffTimeout"
  REGSTR_VALUE_LOWPOWERACTIVE* = r"ScreenSaveLowPowerActive"
  REGSTR_VALUE_POWEROFFACTIVE* = r"ScreenSavePowerOffActive"
  REGSTR_PATH_WINDOWSAPPLETS* = r"Software\Microsoft\Windows\CurrentVersion\Applets"
  REGSTR_PATH_SYSTRAY* = r"Software\Microsoft\Windows\CurrentVersion\Applets\SysTray"
  REGSTR_VAL_SYSTRAYSVCS* = r"Services"
  REGSTR_VAL_SYSTRAYBATFLAGS* = r"PowerFlags"
  REGSTR_VAL_SYSTRAYPCCARDFLAGS* = r"PCMCIAFlags"
  REGSTR_PATH_NETWORK_USERSETTINGS* = r"Network"
  REGSTR_KEY_NETWORK_PERSISTENT* = r"\Persistent"
  REGSTR_KEY_NETWORK_RECENT* = r"\Recent"
  REGSTR_VAL_REMOTE_PATH* = r"RemotePath"
  REGSTR_VAL_USER_NAME* = r"UserName"
  REGSTR_VAL_PROVIDER_NAME* = r"ProviderName"
  REGSTR_VAL_CONNECTION_TYPE* = r"ConnectionType"
  REGSTR_VAL_UPGRADE* = r"Upgrade"
  REGSTR_KEY_LOGON* = r"\Logon"
  REGSTR_VAL_MUSTBEVALIDATED* = r"MustBeValidated"
  REGSTR_VAL_RUNLOGINSCRIPT* = r"ProcessLoginScript"
  REGSTR_KEY_NETWORKPROVIDER* = r"\NetworkProvider"
  REGSTR_PATH_NW32NETPROVIDER* = REGSTR_PATH_SERVICES & r"\NWNP32" & REGSTR_KEY_NETWORKPROVIDER
  REGSTR_PATH_MS32NETPROVIDER* = REGSTR_PATH_SERVICES & r"\MSNP32" & REGSTR_KEY_NETWORKPROVIDER
  REGSTR_VAL_AUTHENT_AGENT* = r"AuthenticatingAgent"
  REGSTR_VAL_PREFREDIR* = r"PreferredRedir"
  REGSTR_VAL_AUTOSTART* = r"AutoStart"
  REGSTR_VAL_AUTOLOGON* = r"AutoLogon"
  REGSTR_VAL_NETCARD* = r"Netcard"
  REGSTR_VAL_TRANSPORT* = r"Transport"
  REGSTR_VAL_DYNAMIC* = r"Dynamic"
  REGSTR_VAL_TRANSITION* = r"Transition"
  REGSTR_VAL_STATICDRIVE* = r"StaticDrive"
  REGSTR_VAL_LOADHI* = r"LoadHi"
  REGSTR_VAL_LOADRMDRIVERS* = r"LoadRMDrivers"
  REGSTR_VAL_SETUPN* = r"SetupN"
  REGSTR_VAL_SETUPNPATH* = r"SetupNPath"
  REGSTR_VAL_WRKGRP_FORCEMAPPING* = r"WrkgrpForceMapping"
  REGSTR_VAL_WRKGRP_REQUIRED* = r"WrkgrpRequired"
  REGSTR_PATH_CURRENT_CONTROL_SET* = r"System\CurrentControlSet\Control"
  REGSTR_VAL_CURRENT_USER* = r"Current User"
  REGSTR_PATH_PWDPROVIDER* = r"System\CurrentControlSet\Control\PwdProvider"
  REGSTR_VAL_PWDPROVIDER_PATH* = r"ProviderPath"
  REGSTR_VAL_PWDPROVIDER_DESC* = r"Description"
  REGSTR_VAL_PWDPROVIDER_CHANGEPWD* = r"ChangePassword"
  REGSTR_VAL_PWDPROVIDER_CHANGEPWDHWND* = r"ChangePasswordHwnd"
  REGSTR_VAL_PWDPROVIDER_GETPWDSTATUS* = r"GetPasswordStatus"
  REGSTR_VAL_PWDPROVIDER_ISNP* = r"NetworkProvider"
  REGSTR_VAL_PWDPROVIDER_CHANGEORDER* = r"ChangeOrder"
  REGSTR_PATH_POLICIES* = r"Software\Microsoft\Windows\CurrentVersion\Policies"
  REGSTR_PATH_UPDATE* = r"System\CurrentControlSet\Control\Update"
  REGSTR_VALUE_ENABLE* = r"Enable"
  REGSTR_VALUE_VERBOSE* = r"Verbose"
  REGSTR_VALUE_NETPATH* = r"NetworkPath"
  REGSTR_VALUE_DEFAULTLOC* = r"UseDefaultNetLocation"
  REGSTR_KEY_NETWORK* = r"Network"
  REGSTR_KEY_PRINTERS* = r"Printers"
  REGSTR_KEY_WINOLDAPP* = r"WinOldApp"
  REGSTR_VAL_NOFILESHARING* = r"NoFileSharing"
  REGSTR_VAL_NOPRINTSHARING* = r"NoPrintSharing"
  REGSTR_VAL_NOFILESHARINGCTRL* = r"NoFileSharingControl"
  REGSTR_VAL_NOPRINTSHARINGCTRL* = r"NoPrintSharingControl"
  REGSTR_VAL_HIDESHAREPWDS* = r"HideSharePwds"
  REGSTR_VAL_DISABLEPWDCACHING* = r"DisablePwdCaching"
  REGSTR_VAL_ALPHANUMPWDS* = r"AlphanumPwds"
  REGSTR_VAL_NETSETUP_DISABLE* = r"NoNetSetup"
  REGSTR_VAL_NETSETUP_NOCONFIGPAGE* = r"NoNetSetupConfigPage"
  REGSTR_VAL_NETSETUP_NOIDPAGE* = r"NoNetSetupIDPage"
  REGSTR_VAL_NETSETUP_NOSECURITYPAGE* = r"NoNetSetupSecurityPage"
  REGSTR_VAL_SYSTEMCPL_NOVIRTMEMPAGE* = r"NoVirtMemPage"
  REGSTR_VAL_SYSTEMCPL_NODEVMGRPAGE* = r"NoDevMgrPage"
  REGSTR_VAL_SYSTEMCPL_NOCONFIGPAGE* = r"NoConfigPage"
  REGSTR_VAL_SYSTEMCPL_NOFILESYSPAGE* = r"NoFileSysPage"
  REGSTR_VAL_DISPCPL_NODISPCPL* = r"NoDispCPL"
  REGSTR_VAL_DISPCPL_NOBACKGROUNDPAGE* = r"NoDispBackgroundPage"
  REGSTR_VAL_DISPCPL_NOSCRSAVPAGE* = r"NoDispScrSavPage"
  REGSTR_VAL_DISPCPL_NOAPPEARANCEPAGE* = r"NoDispAppearancePage"
  REGSTR_VAL_DISPCPL_NOSETTINGSPAGE* = r"NoDispSettingsPage"
  REGSTR_VAL_SECCPL_NOSECCPL* = r"NoSecCPL"
  REGSTR_VAL_SECCPL_NOPWDPAGE* = r"NoPwdPage"
  REGSTR_VAL_SECCPL_NOADMINPAGE* = r"NoAdminPage"
  REGSTR_VAL_SECCPL_NOPROFILEPAGE* = r"NoProfilePage"
  REGSTR_VAL_PRINTERS_HIDETABS* = r"NoPrinterTabs"
  REGSTR_VAL_PRINTERS_NODELETE* = r"NoDeletePrinter"
  REGSTR_VAL_PRINTERS_NOADD* = r"NoAddPrinter"
  REGSTR_VAL_WINOLDAPP_DISABLED* = r"Disabled"
  REGSTR_VAL_WINOLDAPP_NOREALMODE* = r"NoRealMode"
  REGSTR_VAL_NOENTIRENETWORK* = r"NoEntireNetwork"
  REGSTR_VAL_NOWORKGROUPCONTENTS* = r"NoWorkgroupContents"
  REGSTR_VAL_MINPWDLEN* = r"MinPwdLen"
  REGSTR_VAL_PWDEXPIRATION* = r"PwdExpiration"
  REGSTR_VAL_WIN31PROVIDER* = r"Win31Provider"
  REGSTR_VAL_DISABLEREGTOOLS* = r"DisableRegistryTools"
  REGSTR_PATH_WINLOGON* = r"Software\Microsoft\Windows\CurrentVersion\Winlogon"
  REGSTR_VAL_LEGALNOTICECAPTION* = r"LegalNoticeCaption"
  REGSTR_VAL_LEGALNOTICETEXT* = r"LegalNoticeText"
  REGSTR_VAL_RESTRICTRUN* = r"RestrictRun"
  REGSTR_KEY_POL_USERS* = r"Users"
  REGSTR_KEY_POL_COMPUTERS* = r"Computers"
  REGSTR_KEY_POL_USERGROUPS* = r"UserGroups"
  REGSTR_KEY_POL_DEFAULT* = r".default"
  REGSTR_KEY_POL_USERGROUPDATA* = r"GroupData\UserGroups\Priority"
  REGSTR_PATH_TIMEZONE* = r"System\CurrentControlSet\Control\TimeZoneInformation"
  REGSTR_VAL_TZBIAS* = r"Bias"
  REGSTR_VAL_TZDLTBIAS* = r"DaylightBias"
  REGSTR_VAL_TZSTDBIAS* = r"StandardBias"
  REGSTR_VAL_TZACTBIAS* = r"ActiveTimeBias"
  REGSTR_VAL_TZDLTFLAG* = r"DaylightFlag"
  REGSTR_VAL_TZSTDSTART* = r"StandardStart"
  REGSTR_VAL_TZDLTSTART* = r"DaylightStart"
  REGSTR_VAL_TZDLTNAME* = r"DaylightName"
  REGSTR_VAL_TZSTDNAME* = r"StandardName"
  REGSTR_VAL_TZNOCHANGESTART* = r"NoChangeStart"
  REGSTR_VAL_TZNOCHANGEEND* = r"NoChangeEnd"
  REGSTR_VAL_TZNOAUTOTIME* = r"DisableAutoDaylightTimeSet"
  REGSTR_PATH_FLOATINGPOINTPROCESSOR* = r"HARDWARE\DESCRIPTION\System\FloatingPointProcessor"
  REGSTR_PATH_FLOATINGPOINTPROCESSOR0* = r"HARDWARE\DESCRIPTION\System\FloatingPointProcessor\0"
  REGSTR_PATH_COMPUTRNAME* = r"System\CurrentControlSet\Control\ComputerName\ComputerName"
  REGSTR_VAL_COMPUTRNAME* = r"ComputerName"
  REGSTR_PATH_SHUTDOWN* = r"System\CurrentControlSet\Control\Shutdown"
  REGSTR_VAL_FORCEREBOOT* = r"ForceReboot"
  REGSTR_VAL_SETUPPROGRAMRAN* = r"SetupProgramRan"
  REGSTR_VAL_DOES_POLLING* = r"PollingSupportNeeded"
  REGSTR_PATH_KNOWNDLLS* = r"System\CurrentControlSet\Control\SessionManager\KnownDLLs"
  REGSTR_PATH_KNOWN16DLLS* = r"System\CurrentControlSet\Control\SessionManager\Known16DLLs"
  REGSTR_PATH_CHECKVERDLLS* = r"System\CurrentControlSet\Control\SessionManager\CheckVerDLLs"
  REGSTR_PATH_WARNVERDLLS* = r"System\CurrentControlSet\Control\SessionManager\WarnVerDLLs"
  REGSTR_PATH_HACKINIFILE* = r"System\CurrentControlSet\Control\SessionManager\HackIniFiles"
  REGSTR_PATH_CHECKBADAPPS* = r"System\CurrentControlSet\Control\SessionManager\CheckBadApps"
  REGSTR_PATH_APPPATCH* = r"System\CurrentControlSet\Control\SessionManager\AppPatches"
  REGSTR_PATH_KNOWNVXDS* = r"System\CurrentControlSet\Control\SessionManager\KnownVxDs"
  REGSTR_VAL_UNINSTALLER_DISPLAYNAME* = r"DisplayName"
  REGSTR_VAL_UNINSTALLER_COMMANDLINE* = r"UninstallString"
  REGSTR_PATH_DESKTOP* = REGSTR_PATH_SCREENSAVE
  REGSTR_PATH_MOUSE* = r"Control Panel\Mouse"
  REGSTR_PATH_KEYBOARD* = r"Control Panel\Keyboard"
  REGSTR_PATH_COLORS* = r"Control Panel\Colors"
  REGSTR_PATH_SOUND* = r"Control Panel\Sound"
  REGSTR_PATH_METRICS* = r"Control Panel\Desktop\WindowMetrics"
  REGSTR_PATH_ICONS* = r"Control Panel\Icons"
  REGSTR_PATH_CURSORS* = r"Control Panel\Cursors"
  REGSTR_PATH_CHECKDISK* = r"Software\Microsoft\Windows\CurrentVersion\Applets\Check Drive"
  REGSTR_PATH_CHECKDISKSET* = r"Settings"
  REGSTR_PATH_CHECKDISKUDRVS* = r"NoUnknownDDErrDrvs"
  REGSTR_PATH_FAULT* = r"Software\Microsoft\Windows\CurrentVersion\Fault"
  REGSTR_VAL_FAULT_LOGFILE* = r"LogFile"
  REGSTR_PATH_AEDEBUG* = r"Software\Microsoft\Windows NT\CurrentVersion\AeDebug"
  REGSTR_VAL_AEDEBUG_DEBUGGER* = r"Debugger"
  REGSTR_VAL_AEDEBUG_AUTO* = r"Auto"
  REGSTR_PATH_GRPCONV* = r"Software\Microsoft\Windows\CurrentVersion\GrpConv"
  REGSTR_VAL_REGITEMDELETEMESSAGE* = r"Removal Message"
  REGSTR_PATH_LASTCHECK* = r"Software\Microsoft\Windows\CurrentVersion\Explorer\LastCheck"
  REGSTR_PATH_LASTOPTIMIZE* = r"Software\Microsoft\Windows\CurrentVersion\Explorer\LastOptimize"
  REGSTR_PATH_LASTBACKUP* = r"Software\Microsoft\Windows\CurrentVersion\Explorer\LastBackup"
  REGSTR_PATH_CHKLASTCHECK* = r"Software\Microsoft\Windows\CurrentVersion\Applets\Check Drive\LastCheck"
  REGSTR_PATH_CHKLASTSURFAN* = r"Software\Microsoft\Windows\CurrentVersion\Applets\Check Drive\LastSurfaceAnalysis"
  REGSTR_KEY_SHARES* = r"Software\Microsoft\Windows\CurrentVersion\Network\LanMan"
  REGSTR_VAL_SHARES_FLAGS* = r"Flags"
  REGSTR_VAL_SHARES_TYPE* = r"Type"
  REGSTR_VAL_SHARES_PATH* = r"Path"
  REGSTR_VAL_SHARES_REMARK* = r"Remark"
  REGSTR_VAL_SHARES_RW_PASS* = r"Parm1"
  REGSTR_VAL_SHARES_RO_PASS* = r"Parm2"
  REGSTR_PATH_PRINT* = r"System\CurrentControlSet\Control\Print"
  REGSTR_PATH_PRINTERS* = r"System\CurrentControlSet\Control\Print\Printers"
  REGSTR_PATH_PROVIDERS* = r"System\CurrentControlSet\Control\Print\Providers"
  REGSTR_PATH_MONITORS* = r"System\CurrentControlSet\Control\Print\Monitors"
  REGSTR_PATH_ENVIRONMENTS* = r"System\CurrentControlSet\Control\Print\Environments"
  REGSTR_VAL_START_ON_BOOT* = r"StartOnBoot"
  REGSTR_VAL_PRINTERS_MASK* = r"PrintersMask"
  REGSTR_VAL_DOS_SPOOL_MASK* = r"DOSSpoolMask"
  REGSTR_KEY_CURRENT_ENV* = r"\Windows 4.0"
  REGSTR_KEY_DRIVERS* = r"\Drivers"
  REGSTR_KEY_PRINT_PROC* = r"\Print Processors"
  REGSTR_PATH_EVENTLABELS* = r"AppEvents\EventLabels"
  REGSTR_PATH_SCHEMES* = r"AppEvents\Schemes"
  REGSTR_PATH_APPS* = REGSTR_PATH_SCHEMES & r"\Apps"
  REGSTR_PATH_APPS_DEFAULT* = REGSTR_PATH_SCHEMES & r"\Apps\.Default"
  REGSTR_PATH_NAMES* = REGSTR_PATH_SCHEMES & r"\Names"
  REGSTR_PATH_MULTIMEDIA* = REGSTR_PATH_SETUP & r"\Multimedia"
  REGSTR_PATH_MULTIMEDIA_AUDIO* = r"Software\Microsoft\Multimedia\Audio"
  REGSTR_PATH_MEDIARESOURCES* = REGSTR_PATH_CURRENT_CONTROL_SET & r"\MediaResources"
  REGSTR_PATH_MEDIAPROPERTIES* = REGSTR_PATH_CURRENT_CONTROL_SET & r"\MediaProperties"
  REGSTR_PATH_PRIVATEPROPERTIES* = REGSTR_PATH_MEDIAPROPERTIES & r"\PrivateProperties"
  REGSTR_PATH_PUBLICPROPERTIES* = REGSTR_PATH_MEDIAPROPERTIES & r"\PublicProperties"
  REGSTR_PATH_JOYOEM* = REGSTR_PATH_PRIVATEPROPERTIES & r"\Joystick\OEM"
  REGSTR_PATH_JOYCONFIG* = REGSTR_PATH_MEDIARESOURCES & r"\Joystick"
  REGSTR_KEY_JOYCURR* = r"CurrentJoystickSettings"
  REGSTR_KEY_JOYSETTINGS* = r"JoystickSettings"
  REGSTR_VAL_JOYUSERVALUES* = r"JoystickUserValues"
  REGSTR_VAL_JOYCALLOUT* = r"JoystickCallout"
  REGSTR_VAL_JOYNCONFIG* = r"Joystick%dConfiguration"
  REGSTR_VAL_JOYNOEMNAME* = r"Joystick%dOEMName"
  REGSTR_VAL_JOYNOEMCALLOUT* = r"Joystick%dOEMCallout"
  REGSTR_VAL_JOYOEMCALLOUT* = r"OEMCallout"
  REGSTR_VAL_JOYOEMNAME* = r"OEMName"
  REGSTR_VAL_JOYOEMDATA* = r"OEMData"
  REGSTR_VAL_JOYOEMXYLABEL* = r"OEMXYLabel"
  REGSTR_VAL_JOYOEMZLABEL* = r"OEMZLabel"
  REGSTR_VAL_JOYOEMRLABEL* = r"OEMRLabel"
  REGSTR_VAL_JOYOEMPOVLABEL* = r"OEMPOVLabel"
  REGSTR_VAL_JOYOEMULABEL* = r"OEMULabel"
  REGSTR_VAL_JOYOEMVLABEL* = r"OEMVLabel"
  REGSTR_VAL_JOYOEMTESTMOVEDESC* = r"OEMTestMoveDesc"
  REGSTR_VAL_JOYOEMTESTBUTTONDESC* = r"OEMTestButtonDesc"
  REGSTR_VAL_JOYOEMTESTMOVECAP* = r"OEMTestMoveCap"
  REGSTR_VAL_JOYOEMTESTBUTTONCAP* = r"OEMTestButtonCap"
  REGSTR_VAL_JOYOEMTESTWINCAP* = r"OEMTestWinCap"
  REGSTR_VAL_JOYOEMCALCAP* = r"OEMCalCap"
  REGSTR_VAL_JOYOEMCALWINCAP* = r"OEMCalWinCap"
  REGSTR_VAL_JOYOEMCAL1* = r"OEMCal1"
  REGSTR_VAL_JOYOEMCAL2* = r"OEMCal2"
  REGSTR_VAL_JOYOEMCAL3* = r"OEMCal3"
  REGSTR_VAL_JOYOEMCAL4* = r"OEMCal4"
  REGSTR_VAL_JOYOEMCAL5* = r"OEMCal5"
  REGSTR_VAL_JOYOEMCAL6* = r"OEMCal6"
  REGSTR_VAL_JOYOEMCAL7* = r"OEMCal7"
  REGSTR_VAL_JOYOEMCAL8* = r"OEMCal8"
  REGSTR_VAL_JOYOEMCAL9* = r"OEMCal9"
  REGSTR_VAL_JOYOEMCAL10* = r"OEMCal10"
  REGSTR_VAL_JOYOEMCAL11* = r"OEMCal11"
  REGSTR_VAL_JOYOEMCAL12* = r"OEMCal12"
  DTRESULTOK* = 0
  DTRESULTFIX* = 1
  DTRESULTPROB* = 2
  DTRESULTPART* = 3
  PCIC_DEFAULT_IRQMASK* = 0x4EB8
  PCIC_DEFAULT_NUMSOCKETS* = 0

type
  DSKTLSYSTEMTIME* {.final, pure.} = object
    wYear*: WORD
    wMonth*: WORD
    wDayOfWeek*: WORD
    wDay*: WORD
    wHour*: WORD
    wMinute*: WORD
    wSecond*: WORD
    wMilliseconds*: WORD
    wResult*: WORD
  PDSKTLSYSTEMTIME* = ptr DSKTLSYSTEMTIME
  LPDSKTLSYSTEMTIME* = ptr DSKTLSYSTEMTIME

# misc/pbt.nim

const
  PBT_APMQUERYSUSPEND* = 0
  PBT_APMQUERYSTANDBY* = 1
  PBT_APMQUERYSUSPENDFAILED* = 2
  PBT_APMQUERYSTANDBYFAILED* = 3
  PBT_APMSUSPEND* = 4
  PBT_APMSTANDBY* = 5
  PBT_APMRESUMECRITICAL* = 6
  PBT_APMRESUMESUSPEND* = 7
  PBT_APMRESUMESTANDBY* = 8
  PBT_APMBATTERYLOW* = 9
  PBT_APMPOWERSTATUSCHANGE* = 10
  PBT_APMOEMEVENT* = 11
  PBTF_APMRESUMEFROMFAILURE* = 1

# misc/rapi.nim
const
  # RAPISTREAMFLAG* = enum
  STREAM_TIMEOUT_READ* = 0

type
  IRAPIStream* {.final, pure.} = object
    lpVtbl*: ptr IRAPIStreamVtbl
  RAPISTREAMFLAG* = int32
  SetRapiStat* = proc (P1: ptr IRAPIStream, P2: RAPISTREAMFLAG, P3: DWORD): HRESULT {.stdcall.}
  GetRapiStat* = proc (P1: ptr IRAPIStream, P2: RAPISTREAMFLAG, P3: ptr DWORD): HRESULT {.stdcall.}
  IRAPIStreamVtbl* {.final, pure.} = object
    SetRapiStat*: SetRapiStat
    GetRapiStat*: GetRapiStat
  RAPIINIT* {.final, pure.} = object
    cbSize*: DWORD
    heRapiInit*: HANDLE
    hrRapiInit*: HRESULT

proc CeRapiInit*(): HRESULT {.winapi, dynlib: "rapi", importc.}
proc CeRapiInitEx*(P1: ptr RAPIINIT): HRESULT {.winapi, dynlib: "rapi", importc.}
proc CeCreateProcess*(P1: LPCWSTR, P2: LPCWSTR, P3: LPSECURITY_ATTRIBUTES, P4: LPSECURITY_ATTRIBUTES, P5: BOOL, P6: DWORD, P7: LPVOID, P8: LPWSTR, P9: LPSTARTUPINFO, P10: LPPROCESS_INFORMATION): BOOL {.winapi, dynlib: "rapi", importc.}
proc CeRapiUninit*(): HRESULT {.winapi, dynlib: "rapi", importc.}
proc CeWriteFile*(P1: HANDLE, P2: LPCVOID, P3: DWORD, P4: LPDWORD, P5: LPOVERLAPPED): BOOL {.winapi, dynlib: "rapi", importc.}
proc CeCreateFile*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: LPSECURITY_ATTRIBUTES, P5: DWORD, P6: DWORD, P7: HANDLE): HANDLE {.winapi, dynlib: "rapi", importc.}
proc CeCreateDirectory*(P1: LPCWSTR, P2: LPSECURITY_ATTRIBUTES): BOOL {.winapi, dynlib: "rapi", importc.}
proc CeGetLastError*(): DWORD {.winapi, dynlib: "rapi", importc.}
proc CeGetFileTime*(P1: HANDLE, P2: LPFILETIME, P3: LPFILETIME, P4: LPFILETIME): BOOL {.winapi, dynlib: "rapi", importc.}
proc CeCloseHandle*(P1: HANDLE): BOOL {.winapi, dynlib: "rapi", importc.}

# misc/reason.nim

const
  SHTDN_REASON_MAJOR_OTHER* = 0x00000000
  SHTDN_REASON_MAJOR_HARDWARE* = 0x00010000
  SHTDN_REASON_MAJOR_OPERATINGSYSTEM* = 0x00020000
  SHTDN_REASON_MAJOR_SOFTWARE* = 0x00030000
  SHTDN_REASON_MAJOR_APPLICATION* = 0x00040000
  SHTDN_REASON_MAJOR_SYSTEM* = 0x00050000
  SHTDN_REASON_MAJOR_POWER* = 0x00060000
  SHTDN_REASON_MAJOR_LEGACY_API* = 0x00070000
  SHTDN_REASON_MINOR_OTHER* = 0
  SHTDN_REASON_MINOR_MAINTENANCE* = 1
  SHTDN_REASON_MINOR_INSTALLATION* = 2
  SHTDN_REASON_MINOR_UPGRADE* = 3
  SHTDN_REASON_MINOR_RECONFIG* = 4
  SHTDN_REASON_MINOR_HUNG* = 5
  SHTDN_REASON_MINOR_UNSTABLE* = 6
  SHTDN_REASON_MINOR_DISK* = 7
  SHTDN_REASON_MINOR_PROCESSOR* = 8
  SHTDN_REASON_MINOR_NETWORKCARD* = 9
  SHTDN_REASON_MINOR_POWER_SUPPLY* = 10
  SHTDN_REASON_MINOR_CORDUNPLUGGED* = 11
  SHTDN_REASON_MINOR_ENVIRONMENT* = 12
  SHTDN_REASON_MINOR_HARDWARE_DRIVER* = 13
  SHTDN_REASON_MINOR_OTHERDRIVER* = 14
  SHTDN_REASON_MINOR_BLUESCREEN* = 15
  SHTDN_REASON_MINOR_SERVICEPACK* = 16
  SHTDN_REASON_MINOR_HOTFIX* = 17
  SHTDN_REASON_MINOR_SECURITYFIX* = 18
  SHTDN_REASON_MINOR_SECURITY* = 19
  SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY* = 20
  SHTDN_REASON_MINOR_WMI* = 21
  SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL* = 22
  SHTDN_REASON_MINOR_HOTFIX_UNINSTALL* = 23
  SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL* = 24
  SHTDN_REASON_MINOR_MMC* = 25
  SHTDN_REASON_MINOR_TERMSRV* = 0x00000020
  SHTDN_REASON_FLAG_USER_DEFINED* = 0x40000000
  SHTDN_REASON_FLAG_PLANNED* = 0x80000000'u32

# misc/rpcdcep.nim

type
  I_RPC_HANDLE* = HANDLE
  RPC_STATUS* = int64

const
  RPC_NCA_FLAGS_DEFAULT* = 0
  RPC_NCA_FLAGS_IDEMPOTENT* = 1
  RPC_NCA_FLAGS_BROADCAST* = 2
  RPC_NCA_FLAGS_MAYBE* = 4
  RPCFLG_ASYNCHRONOUS* = 0x40000000
  RPCFLG_INPUT_SYNCHRONOUS* = 0x20000000
  RPC_FLAGS_VALID_BIT* = 0x8000
  TRANSPORT_TYPE_CN* = 1
  TRANSPORT_TYPE_DG* = 2
  TRANSPORT_TYPE_LPC* = 4
  TRANSPORT_TYPE_WMSG* = 8

type
  RPC_VERSION* {.final, pure.} = object
    MajorVersion*: uint16
    MinorVersion*: uint16
  RPC_SYNTAX_IDENTIFIER* {.final, pure.} = object
    SyntaxGUID*: GUID
    SyntaxVersion*: RPC_VERSION
  PRPC_SYNTAX_IDENTIFIER* = ptr RPC_SYNTAX_IDENTIFIER
  RPC_MESSAGE* {.final, pure.} = object
    Handle*: HANDLE
    DataRepresentation*: uint32
    Buffer*: pointer
    BufferLength*: uint32
    ProcNum*: uint32
    TransferSyntax*: PRPC_SYNTAX_IDENTIFIER
    RpcInterfaceInformation*: pointer
    ReservedForRuntime*: pointer
    ManagerEpv*: pointer
    ImportContext*: pointer
    RpcFlags*: uint32
  PRPC_MESSAGE* = ptr RPC_MESSAGE
  RPC_DISPATCH_FUNCTION* = proc (Message: PRPC_MESSAGE): void {.stdcall.}
  RPC_DISPATCH_TABLE* {.final, pure.} = object
    DispatchTableCount*: uint32
    DispatchTable*: ptr RPC_DISPATCH_FUNCTION
    Reserved*: int32
  PRPC_DISPATCH_TABLE* = ptr RPC_DISPATCH_TABLE
  RPC_PROTSEQ_ENDPOINT* {.final, pure.} = object
    RpcProtocolSequence*: ptr uint8
    Endpoint*: ptr uint8
  PRPC_PROTSEQ_ENDPOINT* = ptr RPC_PROTSEQ_ENDPOINT
  RPC_SERVER_INTERFACE* {.final, pure.} = object
    Length*: uint32
    InterfaceId*: RPC_SYNTAX_IDENTIFIER
    TransferSyntax*: RPC_SYNTAX_IDENTIFIER
    DispatchTable*: PRPC_DISPATCH_TABLE
    RpcProtseqEndpointCount*: uint32
    RpcProtseqEndpoint*: PRPC_PROTSEQ_ENDPOINT
    DefaultManagerEpv*: pointer
    InterpreterInfo*: pointer
  PRPC_SERVER_INTERFACE* = ptr RPC_SERVER_INTERFACE
  RPC_CLIENT_INTERFACE* {.final, pure.} = object
    Length*: uint32
    InterfaceId*: RPC_SYNTAX_IDENTIFIER
    TransferSyntax*: RPC_SYNTAX_IDENTIFIER
    DispatchTable*: PRPC_DISPATCH_TABLE
    RpcProtseqEndpointCount*: uint32
    RpcProtseqEndpoint*: PRPC_PROTSEQ_ENDPOINT
    Reserved*: uint32
    InterpreterInfo*: pointer
  PRPC_CLIENT_INTERFACE* = ptr RPC_CLIENT_INTERFACE
  I_RPC_MUTEX* = pointer
  RPC_TRANSFER_SYNTAX* {.final, pure.} = object
    Uuid*: GUID
    VersMajor*: uint16
    VersMinor*: uint16
  RPC_BLOCKING_FN* = proc (P1: pointer, P2: pointer, P3: pointer): RPC_STATUS {.cdecl.}
  PRPC_RUNDOWN* = proc (P1: pointer): void {.stdcall.}

proc I_RpcGetBuffer*(P1: ptr RPC_MESSAGE): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcSendReceive*(P1: ptr RPC_MESSAGE): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcSend*(P1: ptr RPC_MESSAGE): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcFreeBuffer*(P1: ptr RPC_MESSAGE): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcRequestMutex*(P1: ptr I_RPC_MUTEX): void {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcClearMutex*(P1: I_RPC_MUTEX): void {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcDeleteMutex*(P1: I_RPC_MUTEX): void {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcAllocate*(P1: uint32): pointer {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcFree*(P1: pointer): void {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcPauseExecution*(P1: uint32): void {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcMonitorAssociation*(P1: HANDLE, P2: PRPC_RUNDOWN, P3: pointer): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcStopMonitorAssociation*(P1: HANDLE): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcGetCurrentCallHandle*(): HANDLE {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcGetAssociationContext*(P1: ptr pointer): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcSetAssociationContext*(P1: pointer): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcNsBindingSetEntryName*(P1: HANDLE, P2: uint32, P3: ptr uint16): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcBindingInqDynamicEndpoint*(P1: HANDLE, P2: ptr ptr uint16): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcBindingInqTransportType*(P1: HANDLE, P2: ptr uint32): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcIfInqTransferSyntaxes*(P1: HANDLE, P2: ptr RPC_TRANSFER_SYNTAX, P3: uint32, P4: ptr uint32): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_UuidCreate*(P1: ptr GUID): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcBindingCopy*(P1: HANDLE, P2: ptr HANDLE): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcBindingIsClientLocal*(P1: HANDLE, P2: ptr uint32): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcSsDontSerializeContext*(): void {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcServerRegisterForwardFunction*(P1: proc(P1: ptr GUID, P2: ptr RPC_VERSION, P3: ptr GUID, P4: ptr uint8, P5: ptr pointer): int32):int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcConnectionInqSockBuffSize*(P1: ptr uint32, P2: ptr uint32): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcConnectionSetSockBuffSize*(P1: uint32, P2: uint32): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcBindingSetAsync*(P1: HANDLE, P2: RPC_BLOCKING_FN): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcAsyncSendReceive*(P1: ptr RPC_MESSAGE, P2: pointer): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcGetThreadWindowHandle*(P1: ptr pointer): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcServerThreadPauseListening*(): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcServerThreadContinueListening*(): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcServerUnregisterEndpointA*(P1: ptr uint8, P2: ptr uint8): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcServerUnregisterEndpointW*(P1: ptr uint16, P2: ptr uint16): int32 {.winapi, dynlib: "rpcrt4", importc.}

when not defined(winansi):
  proc I_RpcServerUnregisterEndpoint*(P1: ptr uint16, P2: ptr uint16): int32 {.winapi, dynlib: "rpcrt4", importc: "I_RpcServerUnregisterEndpointW".}

else:
  proc I_RpcServerUnregisterEndpoint*(P1: ptr uint8, P2: ptr uint8): int32 {.winapi, dynlib: "rpcrt4", importc: "I_RpcServerUnregisterEndpointA".}

# misc/rpc.nim

type
  midl_user_allocate* = MIDL_user_allocate
  midl_user_free* = MIDL_user_free

proc I_RpcMapWin32Status*(P1: RPC_STATUS): int32 {.winapi, dynlib: "rpcrt4", importc.}

# misc/rpcdce.nim

const
  RPC_C_BINDING_MIN_TIMEOUT* = 0
  RPC_C_BINDING_DEFAULT_TIMEOUT* = 5
  RPC_C_BINDING_MAX_TIMEOUT* = 9
  RPC_C_BINDING_INFINITE_TIMEOUT* = 10
  RPC_C_CANCEL_INFINITE_TIMEOUT* = -1
  RPC_C_LISTEN_MAX_CALLS_DEFAULT* = 1234
  RPC_C_PROTSEQ_MAX_REQS_DEFAULT* = 10
  RPC_C_BIND_TO_ALL_NICS* = 1
  RPC_C_USE_INTERNET_PORT* = 1
  RPC_C_USE_INTRANET_PORT* = 2
  RPC_C_STATS_CALLS_IN* = 0
  RPC_C_STATS_CALLS_OUT* = 1
  RPC_C_STATS_PKTS_IN* = 2
  RPC_C_STATS_PKTS_OUT* = 3
  RPC_IF_AUTOLISTEN* = 0x0001
  RPC_IF_OLE* = 2
  RPC_C_MGMT_INQ_IF_IDS* = 0
  RPC_C_MGMT_INQ_PRINC_NAME* = 1
  RPC_C_MGMT_INQ_STATS* = 2
  RPC_C_MGMT_IS_SERVER_LISTEN* = 3
  RPC_C_MGMT_STOP_SERVER_LISTEN* = 4
  RPC_C_EP_ALL_ELTS* = 0
  RPC_C_EP_MATCH_BY_IF* = 1
  RPC_C_EP_MATCH_BY_OBJ* = 2
  RPC_C_EP_MATCH_BY_BOTH* = 3
  RPC_C_VERS_ALL* = 1
  RPC_C_VERS_COMPATIBLE* = 2
  RPC_C_VERS_EXACT* = 3
  RPC_C_VERS_MAJOR_ONLY* = 4
  RPC_C_VERS_UPTO* = 5
  DCE_C_ERROR_STRING_LEN* = 256
  RPC_C_PARM_MAX_PACKET_LENGTH* = 1
  RPC_C_PARM_BUFFER_LENGTH* = 2
  RPC_C_AUTHN_LEVEL_DEFAULT* = 0
  RPC_C_AUTHN_LEVEL_NONE* = 1
  RPC_C_AUTHN_LEVEL_CONNECT* = 2
  RPC_C_AUTHN_LEVEL_CALL* = 3
  RPC_C_AUTHN_LEVEL_PKT* = 4
  RPC_C_AUTHN_LEVEL_PKT_INTEGRITY* = 5
  RPC_C_AUTHN_LEVEL_PKT_PRIVACY* = 6
  RPC_C_IMP_LEVEL_ANONYMOUS* = 1
  RPC_C_IMP_LEVEL_IDENTIFY* = 2
  RPC_C_IMP_LEVEL_IMPERSONATE* = 3
  RPC_C_IMP_LEVEL_DELEGATE* = 4
  RPC_C_QOS_IDENTITY_STATIC* = 0
  RPC_C_QOS_IDENTITY_DYNAMIC* = 1
  RPC_C_QOS_CAPABILITIES_DEFAULT* = 0
  RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH* = 1
  RPC_C_PROTECT_LEVEL_DEFAULT* = RPC_C_AUTHN_LEVEL_DEFAULT
  RPC_C_PROTECT_LEVEL_NONE* = RPC_C_AUTHN_LEVEL_NONE
  RPC_C_PROTECT_LEVEL_CONNECT* = RPC_C_AUTHN_LEVEL_CONNECT
  RPC_C_PROTECT_LEVEL_CALL* = RPC_C_AUTHN_LEVEL_CALL
  RPC_C_PROTECT_LEVEL_PKT* = RPC_C_AUTHN_LEVEL_PKT
  RPC_C_PROTECT_LEVEL_PKT_INTEGRITY* = RPC_C_AUTHN_LEVEL_PKT_INTEGRITY
  RPC_C_PROTECT_LEVEL_PKT_PRIVACY* = RPC_C_AUTHN_LEVEL_PKT_PRIVACY
  RPC_C_AUTHN_NONE* = 0
  RPC_C_AUTHN_DCE_PRIVATE* = 1
  RPC_C_AUTHN_DCE_PUBLIC* = 2
  RPC_C_AUTHN_DEC_PUBLIC* = 4
  RPC_C_AUTHN_WINNT* = 10
  RPC_C_AUTHN_DEFAULT* = -1
  SEC_WINNT_AUTH_IDENTITY_ANSI* = 0x1
  SEC_WINNT_AUTH_IDENTITY_UNICODE* = 0x2
  RPC_C_AUTHZ_NONE* = 0
  RPC_C_AUTHZ_NAME* = 1
  RPC_C_AUTHZ_DCE* = 2
  RPC_C_AUTHZ_DEFAULT* = -1

type
  # uuid_t* = UUID
  uuid_vector_t* = UUID_VECTOR
  RPC_MGR_EPV* = void
  RPC_BINDING_HANDLE* = I_RPC_HANDLE
  handle_t* = RPC_BINDING_HANDLE
  RPC_BINDING_VECTOR* {.final, pure.} = object
    Count*: uint32
    BindingH*: array[1, RPC_BINDING_HANDLE]
  rpc_binding_handle_t* = RPC_BINDING_HANDLE
  rpc_binding_vector_t* = RPC_BINDING_VECTOR
  UUID_VECTOR* {.final, pure.} = object
    Count*: uint32
    Uuid*: array[1, ptr UUID]
  RPC_IF_HANDLE* = pointer
  RPC_IF_ID* {.final, pure.} = object
    Uuid*: UUID
    VersMajor*: uint16
    VersMinor*: uint16
  RPC_POLICY* {.final, pure.} = object
    Length*: uint32
    EndpointFlags*: uint32
    NICFlags*: uint32
  PRPC_POLICY* = ptr RPC_POLICY
  RPC_OBJECT_INQ_FN* = proc (P1: ptr UUID, P2: ptr UUID, P3: ptr RPC_STATUS): void {.stdcall.}
  RPC_IF_CALLBACK_FN* = proc (P1: RPC_IF_HANDLE, P2: pointer): RPC_STATUS {.stdcall.}
  RPC_STATS_VECTOR* {.final, pure.} = object
    Count*: uint32
    Stats*: array[1, uint32]
  RPC_IF_ID_VECTOR* {.final, pure.} = object
    Count*: uint32
    IfId*: array[1, ptr RPC_IF_ID]
  # RPC_AUTH_IDENTITY_HANDLE* = HANDLE
  # RPC_AUTHZ_HANDLE* = HANDLE
  RPC_SECURITY_QOS* {.final, pure.} = object
    Version*: uint32
    Capabilities*: uint32
    IdentityTracking*: uint32
    ImpersonationType*: uint32
  PRPC_SECURITY_QOS* = ptr RPC_SECURITY_QOS
  SEC_WINNT_AUTH_IDENTITY_W* {.final, pure.} = object
    User*: ptr uint16
    UserLength*: uint32
    Domain*: ptr uint16
    DomainLength*: uint32
    Password*: ptr uint16
    PasswordLength*: uint32
    Flags*: uint32
  PSEC_WINNT_AUTH_IDENTITY_W* = ptr SEC_WINNT_AUTH_IDENTITY_W
  SEC_WINNT_AUTH_IDENTITY_A* {.final, pure.} = object
    User*: ptr uint8
    UserLength*: uint32
    Domain*: ptr uint8
    DomainLength*: uint32
    Password*: ptr uint8
    PasswordLength*: uint32
    Flags*: uint32
  PSEC_WINNT_AUTH_IDENTITY_A* = ptr SEC_WINNT_AUTH_IDENTITY_A
  RPC_CLIENT_INFORMATION1* {.final, pure.} = object
    UserName*: ptr uint8
    ComputerName*: ptr uint8
    Privilege*: uint16
    AuthFlags*: uint32
  PRPC_CLIENT_INFORMATION1* = ptr RPC_CLIENT_INFORMATION1
  RPC_EP_INQ_HANDLE* = ptr I_RPC_HANDLE
  RPC_MGMT_AUTHORIZATION_FN* = proc (P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr RPC_STATUS): int32 {.stdcall.}
  RPC_PROTSEQ_VECTORA* {.final, pure.} = object
    Count*: uint32
    Protseq*: array[1, ptr CHAR]
  RPC_PROTSEQ_VECTORW* {.final, pure.} = object
    Count*: uint32
    Protseq*: array[1, ptr WCHAR]

proc RpcBindingFromStringBindingA*(P1: cstring, P2: ptr RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingFromStringBindingW*(P1: ptr uint16, P2: ptr RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingToStringBindingA*(P1: RPC_BINDING_HANDLE, P2: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingToStringBindingW*(P1: RPC_BINDING_HANDLE, P2: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcStringBindingComposeA*(P1: cstring, P2: cstring, P3: cstring, P4: cstring, P5: cstring, P6: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcStringBindingComposeW*(P1: ptr uint16, P2: ptr uint16, P3: ptr uint16, P4: ptr uint16, P5: ptr uint16, P6: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcStringBindingParseA*(P1: cstring, P2: ptr cstring, P3: ptr cstring, P4: ptr cstring, P5: ptr cstring, P6: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcStringBindingParseW*(P1: ptr uint16, P2: ptr ptr uint16, P3: ptr ptr uint16, P4: ptr ptr uint16, P5: ptr ptr uint16, P6: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcStringFreeA*(P1: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcStringFreeW*(P1: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcNetworkIsProtseqValidA*(P1: cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcNetworkIsProtseqValidW*(P1: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcNetworkInqProtseqsA*(P1: ptr ptr RPC_PROTSEQ_VECTORA): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcNetworkInqProtseqsW*(P1: ptr ptr RPC_PROTSEQ_VECTORW): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcProtseqVectorFreeA*(P1: ptr ptr RPC_PROTSEQ_VECTORA): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcProtseqVectorFreeW*(P1: ptr ptr RPC_PROTSEQ_VECTORW): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqA*(P1: cstring, P2: uint32, P3: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqW*(P1: ptr uint16, P2: uint32, P3: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqExA*(P1: cstring, MaxCalls: uint32, P3: pointer, P4: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqExW*(P1: ptr uint16, P2: uint32, P3: pointer, P4: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqEpA*(P1: cstring, P2: uint32, P3: cstring, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqEpExA*(P1: cstring, P2: uint32, P3: cstring, P4: pointer, P5: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqEpW*(P1: ptr uint16, P2: uint32, P3: ptr uint16, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqEpExW*(P1: ptr uint16, P2: uint32, P3: ptr uint16, P4: pointer, P5: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqIfA*(P1: cstring, P2: uint32, P3: RPC_IF_HANDLE, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqIfExA*(P1: cstring, P2: uint32, P3: RPC_IF_HANDLE, P4: pointer, P5: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqIfW*(P1: ptr uint16, P2: uint32, P3: RPC_IF_HANDLE, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqIfExW*(P1: ptr uint16, P2: uint32, P3: RPC_IF_HANDLE, P4: pointer, P5: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtInqServerPrincNameA*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtInqServerPrincNameW*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerInqDefaultPrincNameA*(P1: uint32, P2: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerInqDefaultPrincNameW*(P1: uint32, P2: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcNsBindingInqEntryNameA*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcNsBindingInqEntryNameW*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingInqAuthClientA*(P1: RPC_BINDING_HANDLE, P2: ptr RPC_AUTHZ_HANDLE, P3: ptr cstring, P4: ptr uint32, P5: ptr uint32, P6: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingInqAuthClientW*(P1: RPC_BINDING_HANDLE, P2: ptr RPC_AUTHZ_HANDLE, P3: ptr ptr uint16, P4: ptr uint32, P5: ptr uint32, P6: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingInqAuthInfoA*(P1: RPC_BINDING_HANDLE, P2: ptr cstring, P3: ptr uint32, P4: ptr uint32, P5: ptr RPC_AUTH_IDENTITY_HANDLE, P6: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingInqAuthInfoW*(P1: RPC_BINDING_HANDLE, P2: ptr ptr uint16, P3: ptr uint32, P4: ptr uint32, P5: ptr RPC_AUTH_IDENTITY_HANDLE, P6: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingSetAuthInfoA*(P1: RPC_BINDING_HANDLE, P2: cstring, P3: uint32, P4: uint32, P5: RPC_AUTH_IDENTITY_HANDLE, P6: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingSetAuthInfoExA*(P1: RPC_BINDING_HANDLE, P2: cstring, P3: uint32, P4: uint32, P5: RPC_AUTH_IDENTITY_HANDLE, P6: uint32, P7: ptr RPC_SECURITY_QOS): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingSetAuthInfoW*(P1: RPC_BINDING_HANDLE, P2: ptr uint16, P3: uint32, P4: uint32, P5: RPC_AUTH_IDENTITY_HANDLE, P6: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingSetAuthInfoExW*(P1: RPC_BINDING_HANDLE, P2: ptr uint16, P3: uint32, P4: uint32, P5: RPC_AUTH_IDENTITY_HANDLE, P6: uint32, P7: ptr RPC_SECURITY_QOS): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingInqAuthInfoExA*(P1: RPC_BINDING_HANDLE, P2: ptr cstring, P3: ptr uint32, P4: ptr uint32, P5: ptr RPC_AUTH_IDENTITY_HANDLE, P6: ptr uint32, P7: uint32, P8: ptr RPC_SECURITY_QOS): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingInqAuthInfoExW*(P1: RPC_BINDING_HANDLE, P2: ptr ptr uint16, P3: ptr uint32, P4: ptr uint32, P5: ptr RPC_AUTH_IDENTITY_HANDLE, P6: ptr uint32, P7: uint32, P8: ptr RPC_SECURITY_QOS): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}

type
  RPC_AUTH_KEY_RETRIEVAL_FN* = proc (P1: pointer, P2: ptr uint16, P3: uint32, P4: ptr pointer, P5: ptr RPC_STATUS): void {.stdcall.}

proc RpcServerRegisterAuthInfoA*(P1: cstring, P2: uint32, P3: RPC_AUTH_KEY_RETRIEVAL_FN, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerRegisterAuthInfoW*(P1: ptr uint16, P2: uint32, P3: RPC_AUTH_KEY_RETRIEVAL_FN, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc UuidToStringA*(P1: ptr UUID, P2: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc UuidFromStringA*(P1: cstring, P2: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc UuidToStringW*(P1: ptr UUID, P2: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc UuidFromStringW*(P1: ptr uint16, P2: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcEpRegisterNoReplaceA*(P1: RPC_IF_HANDLE, P2: ptr RPC_BINDING_VECTOR, P3: ptr UUID_VECTOR, P4: cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcEpRegisterNoReplaceW*(P1: RPC_IF_HANDLE, P2: ptr RPC_BINDING_VECTOR, P3: ptr UUID_VECTOR, P4: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcEpRegisterA*(P1: RPC_IF_HANDLE, P2: ptr RPC_BINDING_VECTOR, P3: ptr UUID_VECTOR, P4: cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcEpRegisterW*(P1: RPC_IF_HANDLE, P2: ptr RPC_BINDING_VECTOR, P3: ptr UUID_VECTOR, P4: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc DceErrorInqTextA*(P1: RPC_STATUS, P2: cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc DceErrorInqTextW*(P1: RPC_STATUS, P2: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtEpEltInqNextA*(P1: RPC_EP_INQ_HANDLE, P2: ptr RPC_IF_ID, P3: ptr RPC_BINDING_HANDLE, P4: ptr UUID, P5: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtEpEltInqNextW*(P1: RPC_EP_INQ_HANDLE, P2: ptr RPC_IF_ID, P3: ptr RPC_BINDING_HANDLE, P4: ptr UUID, P5: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcImpersonateClient*(P1: RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcRevertToSelf*(): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}

when not defined(winansi):
  type
    RPC_PROTSEQ_VECTOR* = RPC_PROTSEQ_VECTORW
    SEC_WINNT_AUTH_IDENTITY* = SEC_WINNT_AUTH_IDENTITY_W
    PSEC_WINNT_AUTH_IDENTITY* = PSEC_WINNT_AUTH_IDENTITY_W

  proc RpcMgmtEpEltInqNext*(P1: RPC_EP_INQ_HANDLE, P2: ptr RPC_IF_ID, P3: ptr RPC_BINDING_HANDLE, P4: ptr UUID, P5: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcMgmtEpEltInqNextW".}
  proc RpcBindingFromStringBinding*(P1: ptr uint16, P2: ptr RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingFromStringBindingW".}
  proc RpcBindingToStringBinding*(P1: RPC_BINDING_HANDLE, P2: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingToStringBindingW".}
  proc RpcStringBindingCompose*(P1: ptr uint16, P2: ptr uint16, P3: ptr uint16, P4: ptr uint16, P5: ptr uint16, P6: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcStringBindingComposeW".}
  proc RpcStringBindingParse*(P1: ptr uint16, P2: ptr ptr uint16, P3: ptr ptr uint16, P4: ptr ptr uint16, P5: ptr ptr uint16, P6: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcStringBindingParseW".}
  proc RpcStringFree*(P1: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcStringFreeW".}
  proc RpcNetworkIsProtseqValid*(P1: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcNetworkIsProtseqValidW".}
  proc RpcNetworkInqProtseqs*(P1: ptr ptr RPC_PROTSEQ_VECTORW): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcNetworkInqProtseqsW".}
  proc RpcProtseqVectorFree*(P1: ptr ptr RPC_PROTSEQ_VECTORW): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcProtseqVectorFreeW".}
  proc RpcServerUseProtseq*(P1: ptr uint16, P2: uint32, P3: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqW".}
  proc RpcServerUseProtseqEx*(P1: ptr uint16, P2: uint32, P3: pointer, P4: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqExW".}
  proc RpcServerUseProtseqEp*(P1: ptr uint16, P2: uint32, P3: ptr uint16, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqEpW".}
  proc RpcServerUseProtseqEpEx*(P1: ptr uint16, P2: uint32, P3: ptr uint16, P4: pointer, P5: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqEpExW".}
  proc RpcServerUseProtseqIf*(P1: ptr uint16, P2: uint32, P3: RPC_IF_HANDLE, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqIfW".}
  proc RpcServerUseProtseqIfEx*(P1: ptr uint16, P2: uint32, P3: RPC_IF_HANDLE, P4: pointer, P5: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqIfExW".}
  proc RpcMgmtInqServerPrincName*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcMgmtInqServerPrincNameW".}
  proc RpcServerInqDefaultPrincName*(P1: uint32, P2: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerInqDefaultPrincNameW".}
  proc RpcNsBindingInqEntryName*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcNsBindingInqEntryNameW".}
  proc RpcBindingInqAuthClient*(P1: RPC_BINDING_HANDLE, P2: ptr RPC_AUTHZ_HANDLE, P3: ptr ptr uint16, P4: ptr uint32, P5: ptr uint32, P6: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingInqAuthClientW".}
  proc RpcBindingInqAuthInfo*(P1: RPC_BINDING_HANDLE, P2: ptr ptr uint16, P3: ptr uint32, P4: ptr uint32, P5: ptr RPC_AUTH_IDENTITY_HANDLE, P6: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingInqAuthInfoW".}
  proc RpcBindingSetAuthInfo*(P1: RPC_BINDING_HANDLE, P2: ptr uint16, P3: uint32, P4: uint32, P5: RPC_AUTH_IDENTITY_HANDLE, P6: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingSetAuthInfoW".}
  proc RpcServerRegisterAuthInfo*(P1: ptr uint16, P2: uint32, P3: RPC_AUTH_KEY_RETRIEVAL_FN, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerRegisterAuthInfoW".}
  proc RpcBindingInqAuthInfoEx*(P1: RPC_BINDING_HANDLE, P2: ptr ptr uint16, P3: ptr uint32, P4: ptr uint32, P5: ptr RPC_AUTH_IDENTITY_HANDLE, P6: ptr uint32, P7: uint32, P8: ptr RPC_SECURITY_QOS): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingInqAuthInfoExW".}
  proc RpcBindingSetAuthInfoEx*(P1: RPC_BINDING_HANDLE, P2: ptr uint16, P3: uint32, P4: uint32, P5: RPC_AUTH_IDENTITY_HANDLE, P6: uint32, P7: ptr RPC_SECURITY_QOS): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingSetAuthInfoExW".}
  proc UuidFromString*(P1: ptr uint16, P2: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "UuidFromStringW".}
  proc UuidToString*(P1: ptr UUID, P2: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "UuidToStringW".}
  proc RpcEpRegisterNoReplace*(P1: RPC_IF_HANDLE, P2: ptr RPC_BINDING_VECTOR, P3: ptr UUID_VECTOR, P4: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcEpRegisterNoReplaceW".}
  proc RpcEpRegister*(P1: RPC_IF_HANDLE, P2: ptr RPC_BINDING_VECTOR, P3: ptr UUID_VECTOR, P4: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcEpRegisterW".}
  proc DceErrorInqText*(P1: RPC_STATUS, P2: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "DceErrorInqTextW".}

else:
  type
    RPC_PROTSEQ_VECTOR* = RPC_PROTSEQ_VECTORA
    SEC_WINNT_AUTH_IDENTITY* = SEC_WINNT_AUTH_IDENTITY_A
    PSEC_WINNT_AUTH_IDENTITY* = PSEC_WINNT_AUTH_IDENTITY_A

  proc RpcMgmtEpEltInqNext*(P1: RPC_EP_INQ_HANDLE, P2: ptr RPC_IF_ID, P3: ptr RPC_BINDING_HANDLE, P4: ptr UUID, P5: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcMgmtEpEltInqNextA".}
  proc RpcBindingFromStringBinding*(P1: cstring, P2: ptr RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingFromStringBindingA".}
  proc RpcBindingToStringBinding*(P1: RPC_BINDING_HANDLE, P2: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingToStringBindingA".}
  proc RpcStringBindingCompose*(P1: cstring, P2: cstring, P3: cstring, P4: cstring, P5: cstring, P6: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcStringBindingComposeA".}
  proc RpcStringBindingParse*(P1: cstring, P2: ptr cstring, P3: ptr cstring, P4: ptr cstring, P5: ptr cstring, P6: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcStringBindingParseA".}
  proc RpcStringFree*(P1: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcStringFreeA".}
  proc RpcNetworkIsProtseqValid*(P1: cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcNetworkIsProtseqValidA".}
  proc RpcNetworkInqProtseqs*(P1: ptr ptr RPC_PROTSEQ_VECTORA): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcNetworkInqProtseqsA".}
  proc RpcProtseqVectorFree*(P1: ptr ptr RPC_PROTSEQ_VECTORA): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcProtseqVectorFreeA".}
  proc RpcServerUseProtseq*(P1: cstring, P2: uint32, P3: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqA".}
  proc RpcServerUseProtseqEx*(P1: cstring, MaxCalls: uint32, P3: pointer, P4: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqExA".}
  proc RpcServerUseProtseqEp*(P1: cstring, P2: uint32, P3: cstring, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqEpA".}
  proc RpcServerUseProtseqEpEx*(P1: cstring, P2: uint32, P3: cstring, P4: pointer, P5: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqEpExA".}
  proc RpcServerUseProtseqIf*(P1: cstring, P2: uint32, P3: RPC_IF_HANDLE, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqIfA".}
  proc RpcServerUseProtseqIfEx*(P1: cstring, P2: uint32, P3: RPC_IF_HANDLE, P4: pointer, P5: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqIfExA".}
  proc RpcMgmtInqServerPrincName*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcMgmtInqServerPrincNameA".}
  proc RpcServerInqDefaultPrincName*(P1: uint32, P2: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerInqDefaultPrincNameA".}
  proc RpcNsBindingInqEntryName*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcNsBindingInqEntryNameA".}
  proc RpcBindingInqAuthClient*(P1: RPC_BINDING_HANDLE, P2: ptr RPC_AUTHZ_HANDLE, P3: ptr cstring, P4: ptr uint32, P5: ptr uint32, P6: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingInqAuthClientA".}
  proc RpcBindingInqAuthInfo*(P1: RPC_BINDING_HANDLE, P2: ptr cstring, P3: ptr uint32, P4: ptr uint32, P5: ptr RPC_AUTH_IDENTITY_HANDLE, P6: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingInqAuthInfoA".}
  proc RpcBindingSetAuthInfo*(P1: RPC_BINDING_HANDLE, P2: cstring, P3: uint32, P4: uint32, P5: RPC_AUTH_IDENTITY_HANDLE, P6: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingSetAuthInfoA".}
  proc RpcServerRegisterAuthInfo*(P1: cstring, P2: uint32, P3: RPC_AUTH_KEY_RETRIEVAL_FN, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerRegisterAuthInfoA".}
  proc RpcBindingInqAuthInfoEx*(P1: RPC_BINDING_HANDLE, P2: ptr cstring, P3: ptr uint32, P4: ptr uint32, P5: ptr RPC_AUTH_IDENTITY_HANDLE, P6: ptr uint32, P7: uint32, P8: ptr RPC_SECURITY_QOS): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingInqAuthInfoExA".}
  proc RpcBindingSetAuthInfoEx*(P1: RPC_BINDING_HANDLE, P2: cstring, P3: uint32, P4: uint32, P5: RPC_AUTH_IDENTITY_HANDLE, P6: uint32, P7: ptr RPC_SECURITY_QOS): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingSetAuthInfoExA".}
  proc UuidFromString*(P1: cstring, P2: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "UuidFromStringA".}
  proc UuidToString*(P1: ptr UUID, P2: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "UuidToStringA".}
  proc RpcEpRegisterNoReplace*(P1: RPC_IF_HANDLE, P2: ptr RPC_BINDING_VECTOR, P3: ptr UUID_VECTOR, P4: cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcEpRegisterNoReplaceA".}
  proc RpcEpRegister*(P1: RPC_IF_HANDLE, P2: ptr RPC_BINDING_VECTOR, P3: ptr UUID_VECTOR, P4: cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcEpRegisterA".}
  proc DceErrorInqText*(P1: RPC_STATUS, P2: cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "DceErrorInqTextA".}

proc RpcBindingCopy*(P1: RPC_BINDING_HANDLE, P2: ptr RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingFree*(P1: ptr RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingInqObject*(P1: RPC_BINDING_HANDLE, P2: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingReset*(P1: RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingSetObject*(P1: RPC_BINDING_HANDLE, P2: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtInqDefaultProtectLevel*(P1: uint32, P2: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingVectorFree*(P1: ptr ptr RPC_BINDING_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcIfInqId*(P1: RPC_IF_HANDLE, P2: ptr RPC_IF_ID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtInqComTimeout*(P1: RPC_BINDING_HANDLE, P2: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtSetComTimeout*(P1: RPC_BINDING_HANDLE, P2: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtSetCancelTimeout*(Timeout: int32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcObjectInqType*(P1: ptr UUID, P2: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcObjectSetInqFn*(P1: ptr RPC_OBJECT_INQ_FN): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcObjectSetType*(P1: ptr UUID, P2: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
# proc RpcProtseqVectorFree*(P1: ptr ptr RPC_PROTSEQ_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerInqIf*(P1: RPC_IF_HANDLE, P2: ptr UUID, P3: ptr ptr RPC_MGR_EPV): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerListen*(P1: uint32, P2: uint32, P3: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerRegisterIf*(P1: RPC_IF_HANDLE, P2: ptr UUID, P3: ptr RPC_MGR_EPV): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerRegisterIfEx*(P1: RPC_IF_HANDLE, P2: ptr UUID, P3: ptr RPC_MGR_EPV, P4: uint32, P5: uint32, P6: ptr RPC_IF_CALLBACK_FN): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerRegisterIf2*(P1: RPC_IF_HANDLE, P2: ptr UUID, P3: ptr RPC_MGR_EPV, P4: uint32, P5: uint32, P6: uint32, P7: ptr RPC_IF_CALLBACK_FN): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUnregisterIf*(P1: RPC_IF_HANDLE, P2: ptr UUID, P3: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseAllProtseqs*(P1: uint32, P2: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseAllProtseqsEx*(P1: uint32, P2: pointer, P3: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseAllProtseqsIf*(P1: uint32, P2: RPC_IF_HANDLE, P3: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseAllProtseqsIfEx*(P1: uint32, P2: RPC_IF_HANDLE, P3: pointer, P4: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtStatsVectorFree*(P1: ptr ptr RPC_STATS_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtInqStats*(P1: RPC_BINDING_HANDLE, P2: ptr ptr RPC_STATS_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtIsServerListening*(P1: RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtStopServerListening*(P1: RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtWaitServerListen*(): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtSetServerStackSize*(P1: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSsDontSerializeContext*(): void {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtEnableIdleCleanup*(): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtInqIfIds*(P1: RPC_BINDING_HANDLE, P2: ptr ptr RPC_IF_ID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcIfIdVectorFree*(P1: ptr ptr RPC_IF_ID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcEpResolveBinding*(P1: RPC_BINDING_HANDLE, P2: RPC_IF_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingServerFromClient*(P1: RPC_BINDING_HANDLE, P2: ptr RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcRaiseException*(P1: RPC_STATUS): void {.winapi, dynlib: "rpcrt4", importc.}
proc RpcTestCancel*(): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcCancelThread*(P1: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc UuidCreate*(P1: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc UuidCompare*(P1: ptr UUID, P2: ptr UUID, P3: ptr RPC_STATUS): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc UuidCreateNil*(P1: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc UuidEqual*(P1: ptr UUID, P2: ptr UUID, P3: ptr RPC_STATUS): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc UuidHash*(P1: ptr UUID, P2: ptr RPC_STATUS): uint16 {.winapi, dynlib: "rpcrt4", importc.}
proc UuidIsNil*(P1: ptr UUID, P2: ptr RPC_STATUS): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc RpcEpUnregister*(P1: RPC_IF_HANDLE, P2: ptr RPC_BINDING_VECTOR, P3: ptr UUID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtEpEltInqBegin*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr RPC_IF_ID, P4: uint32, P5: ptr UUID, P6: ptr RPC_EP_INQ_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtEpEltInqDone*(P1: ptr RPC_EP_INQ_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtEpUnregister*(P1: RPC_BINDING_HANDLE, P2: ptr RPC_IF_ID, P3: RPC_BINDING_HANDLE, P4: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtSetAuthorizationFn*(P1: RPC_MGMT_AUTHORIZATION_FN): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtInqParameter*(P1: uint32, P2: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtSetParameter*(P1: uint32, P2: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtBindingInqParameter*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtBindingSetParameter*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc UuidCreateSequential*(P1: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}

# misc/rpcndr.nim
const
  # IDL_CS_CONVERT* = enum
  IDL_CS_NO_CONVERT* = 0
  IDL_CS_IN_PLACE_CONVERT* = 1
  IDL_CS_NEW_BUFFER_CONVERT* = 2
  # XLAT_SIDE* = enum
  XLAT_SERVER* = 1
  XLAT_CLIENT* = 2
  # STUB_PHASE* = enum
  STUB_UNMARSHAL* = 0
  STUB_CALL_SERVER* = 1
  STUB_MARSHAL* = 2
  STUB_CALL_SERVER_NO_HRESULT* = 3
  # PROXY_PHASE* = enum
  PROXY_CALCSIZE* = 0
  PROXY_GETBUFFER* = 1
  PROXY_MARSHAL* = 2
  PROXY_SENDRECEIVE* = 3
  PROXY_UNMARSHAL* = 4

const
  RPCNDR_H_VERSION* = 450

const
  NDR_CHAR_REP_MASK* = 0xF
  NDR_INT_REP_MASK* = 0xF0
  NDR_FLOAT_REP_MASK* = 0xFF00
  NDR_LITTLE_ENDIAN* = 0x10
  NDR_BIG_ENDIAN* = 0
  NDR_IEEE_FLOAT* = 0
  NDR_VAX_FLOAT* = 0x100
  NDR_ASCII_CHAR* = 0
  NDR_EBCDIC_CHAR* = 1
  NDR_LOCAL_DATA_REPRESENTATION* = 0x10
  NDR_LOCAL_ENDIAN* = NDR_LITTLE_ENDIAN

type
  # midl_user_allocate* = MIDL_user_allocate
  # midl_user_free* = MIDL_user_free
  # hyper* = int64
  MIDL_uhyper* = uint64
  small* = char
  NDR_RUNDOWN* = proc (P1: pointer): void {.stdcall.}

const
  cbNDRContext* = 20

type
  NDR_CCONTEXT* = pointer
  tagNDR_SCONTEXT* {.final, pure.} = object
    pad*: array[2, pointer]
    userContext*: pointer
  NDR_SCONTEXT* = ptr tagNDR_SCONTEXT
  SCONTEXT_QUEUE* {.final, pure.} = object
    NumberOfObjects*: uint32
    ArrayOfObjects*: ptr NDR_SCONTEXT
  PSCONTEXT_QUEUE* = ptr SCONTEXT_QUEUE
  # MIDL_STUB_MESSAGE* {.final, pure.} = object
  # MIDL_STUB_DESC* {.final, pure.} = object
  # FULL_PTR_XLAT_TABLES* {.final, pure.} = object
  RPC_BUFPTR* = ptr uint8
  RPC_LENGTH* = uint32
  PFORMAT_STRING* = cstring
  ARRAY_INFO* {.final, pure.} = object
    Dimension*: int32
    BufferConformanceMark*: ptr uint32
    BufferVarianceMark*: ptr uint32
    MaxCountArray*: ptr uint32
    OffsetArray*: ptr uint32
    ActualCountArray*: ptr uint32
  PARRAY_INFO* = ptr ARRAY_INFO

proc NDRCContextBinding*(P1: NDR_CCONTEXT): RPC_BINDING_HANDLE {.winapi, dynlib: "rpcrt4", importc.}
proc NDRCContextMarshall*(P1: NDR_CCONTEXT, P2: pointer): void {.winapi, dynlib: "rpcrt4", importc.}
proc NDRCContextUnmarshall*(P1: ptr NDR_CCONTEXT, P2: RPC_BINDING_HANDLE, P3: pointer, P4: uint32): void {.winapi, dynlib: "rpcrt4", importc.}
proc NDRSContextMarshall*(P1: NDR_SCONTEXT, P2: pointer, P3: NDR_RUNDOWN): void {.winapi, dynlib: "rpcrt4", importc.}
proc NDRSContextUnmarshall*(pBuff: pointer, P2: uint32): NDR_SCONTEXT {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSsDestroyClientContext*(P1: ptr pointer): void {.winapi, dynlib: "rpcrt4", importc.}
proc NDRcopy*(P1: pointer, P2: pointer, P3: uint32): void {.winapi, dynlib: "rpcrt4", importc.}
proc MIDL_wchar_strlen*(P1: ptr uint16): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc MIDL_wchar_strcpy*(P1: pointer, P2: ptr uint16): void {.winapi, dynlib: "rpcrt4", importc.}
proc char_from_ndr*(P1: PRPC_MESSAGE, P2: ptr uint8): void {.winapi, dynlib: "rpcrt4", importc.}
proc char_array_from_ndr*(P1: PRPC_MESSAGE, P2: uint32, P3: uint32, P4: ptr uint8): void {.winapi, dynlib: "rpcrt4", importc.}
proc short_from_ndr*(P1: PRPC_MESSAGE, P2: ptr uint16): void {.winapi, dynlib: "rpcrt4", importc.}
proc short_array_from_ndr*(P1: PRPC_MESSAGE, P2: uint32, P3: uint32, P4: ptr uint16): void {.winapi, dynlib: "rpcrt4", importc.}
proc short_from_ndr_temp*(P1: ptr ptr uint8, P2: ptr uint16, P3: uint32): void {.winapi, dynlib: "rpcrt4", importc.}
proc int_from_ndr*(P1: PRPC_MESSAGE, P2: ptr uint32): void {.winapi, dynlib: "rpcrt4", importc.}
proc int_array_from_ndr*(P1: PRPC_MESSAGE, P2: uint32, P3: uint32, P4: ptr uint32): void {.winapi, dynlib: "rpcrt4", importc.}
proc int_from_ndr_temp*(P1: ptr ptr uint8, P2: ptr uint32, P3: uint32): void {.winapi, dynlib: "rpcrt4", importc.}
proc enum_from_ndr*(P1: PRPC_MESSAGE, P2: ptr uint32): void {.winapi, dynlib: "rpcrt4", importc.}
proc float_from_ndr*(P1: PRPC_MESSAGE, P2: pointer): void {.winapi, dynlib: "rpcrt4", importc.}
proc float_array_from_ndr*(P1: PRPC_MESSAGE, P2: uint32, P3: uint32, P4: pointer): void {.winapi, dynlib: "rpcrt4", importc.}
proc double_from_ndr*(P1: PRPC_MESSAGE, P2: pointer): void {.winapi, dynlib: "rpcrt4", importc.}
proc double_array_from_ndr*(P1: PRPC_MESSAGE, P2: uint32, P3: uint32, P4: pointer): void {.winapi, dynlib: "rpcrt4", importc.}
proc hyper_from_ndr*(P1: PRPC_MESSAGE, P2: ptr hyper): void {.winapi, dynlib: "rpcrt4", importc.}
proc hyper_array_from_ndr*(P1: PRPC_MESSAGE, P2: uint32, P3: uint32, P4: ptr hyper): void {.winapi, dynlib: "rpcrt4", importc.}
proc hyper_from_ndr_temp*(P1: ptr ptr uint8, P2: ptr hyper, P3: uint32): void {.winapi, dynlib: "rpcrt4", importc.}
proc data_from_ndr*(P1: PRPC_MESSAGE, P2: pointer, P3: cstring, P4: uint8): void {.winapi, dynlib: "rpcrt4", importc.}
proc data_into_ndr*(P1: pointer, P2: PRPC_MESSAGE, P3: cstring, P4: uint8): void {.winapi, dynlib: "rpcrt4", importc.}
proc tree_into_ndr*(P1: pointer, P2: PRPC_MESSAGE, P3: cstring, P4: uint8): void {.winapi, dynlib: "rpcrt4", importc.}
proc data_size_ndr*(P1: pointer, P2: PRPC_MESSAGE, P3: cstring, P4: uint8): void {.winapi, dynlib: "rpcrt4", importc.}
proc tree_size_ndr*(P1: pointer, P2: PRPC_MESSAGE, P3: cstring, P4: uint8): void {.winapi, dynlib: "rpcrt4", importc.}
proc tree_peek_ndr*(P1: PRPC_MESSAGE, P2: ptr ptr uint8, P3: cstring, P4: uint8): void {.winapi, dynlib: "rpcrt4", importc.}
proc midl_allocate*(P1: int32): pointer {.winapi, dynlib: "rpcrt4", importc.}

type
  MIDL_STUB_MESSAGE* {.final, pure.} = object
    RpcMsg*: PRPC_MESSAGE
    Buffer*: ptr uint8
    BufferStart*: ptr uint8
    BufferEnd*: ptr uint8
    BufferMark*: ptr uint8
    BufferLength*: uint32
    MemorySize*: uint32
    Memory*: ptr uint8
    IsClient*: int32
    ReuseBuffer*: int32
    AllocAllNodesMemory*: ptr uint8
    AllocAllNodesMemoryEnd*: ptr uint8
    IgnoreEmbeddedPointers*: int32
    PointerBufferMark*: ptr uint8
    fBufferValid*: uint8
    Unused*: uint8
    MaxCount*: uint32
    Offset*: uint32
    ActualCount*: uint32
    pfnAllocate*: proc(P1: uint32): pointer
    pfnFree*: proc(P1: pointer): void
    StackTop*: ptr uint8
    pPresentedType*: ptr uint8
    pTransmitType*: ptr uint8
    SavedHandle*: handle_t
    StubDesc*: ptr MIDL_STUB_DESC
    FullPtrXlatTables*: ptr FULL_PTR_XLAT_TABLES
    FullPtrRefId*: uint32
    fCheckBounds*: int32
    bit_fields_for_D*: int8
    dwDestContext*: uint32
    pvDestContext*: pointer
    SavedContextHandles*: ptr NDR_SCONTEXT
    ParamNumber*: int32
    pRpcChannelBuffer*: ptr IRpcChannelBuffer
    pArrayInfo*: PARRAY_INFO
    SizePtrCountArray*: ptr uint32
    SizePtrOffsetArray*: ptr uint32
    SizePtrLengthArray*: ptr uint32
    pArgQueue*: pointer
    dwStubPhase*: uint32
    w2kReserved*: array[5, uint32]
  PMIDL_STUB_MESSAGE* = ptr MIDL_STUB_MESSAGE
  GENERIC_BINDING_ROUTINE* = proc (P1: pointer): pointer {.stdcall.}
  GENERIC_UNBIND_ROUTINE* = proc (P1: pointer, P2: ptr uint8): void {.stdcall.}
  USER_MARSHAL_SIZING_ROUTINE* = proc (P1: ptr uint32, P2: uint32, P3: pointer): uint32 {.stdcall.}
  USER_MARSHAL_MARSHALLING_ROUTINE* = proc (P1: ptr uint32, P2: ptr uint8, P3: pointer): ptr uint8 {.stdcall.}
  USER_MARSHAL_UNMARSHALLING_ROUTINE* = proc (P1: ptr uint32, P2: ptr uint8, P3: pointer): ptr uint8 {.stdcall.}
  USER_MARSHAL_FREEING_ROUTINE* = proc (P1: ptr uint32, P2: pointer): void {.stdcall.}
  NDR_NOTIFY_ROUTINE* = proc (): void {.stdcall.}
  GENERIC_BINDING_ROUTINE_PAIR* {.final, pure.} = object
    pfnBind*: GENERIC_BINDING_ROUTINE
    pfnUnbind*: GENERIC_UNBIND_ROUTINE
  PGENERIC_BINDING_ROUTINE_PAIR* = ptr GENERIC_BINDING_ROUTINE_PAIR
  GENERIC_BINDING_INFO* {.final, pure.} = object
    pObj*: pointer
    Size*: uint32
    pfnBind*: GENERIC_BINDING_ROUTINE
    pfnUnbind*: GENERIC_UNBIND_ROUTINE
  PGENERIC_BINDING_INFO* = ptr GENERIC_BINDING_INFO
  XMIT_ROUTINE_QUINTUPLE* {.final, pure.} = object
    pfnTranslateToXmit*: XMIT_HELPER_ROUTINE
    pfnTranslateFromXmit*: XMIT_HELPER_ROUTINE
    pfnFreeXmit*: XMIT_HELPER_ROUTINE
    pfnFreeInst*: XMIT_HELPER_ROUTINE
  PXMIT_ROUTINE_QUINTUPLE* = ptr XMIT_ROUTINE_QUINTUPLE
  MALLOC_FREE_STRUCT* {.final, pure.} = object
    pfnAllocate*: proc(P1: uint32): pointer
    pfnFree*: proc(P1: pointer): void
  COMM_FAULT_OFFSETS* {.final, pure.} = object
    CommOffset*: int16
    FaultOffset*: int16
  USER_MARSHAL_ROUTINE_QUADRUPLE* {.final, pure.} = object
    pfnBufferSize*: USER_MARSHAL_SIZING_ROUTINE
    pfnMarshall*: USER_MARSHAL_MARSHALLING_ROUTINE
    pfnUnmarshall*: USER_MARSHAL_UNMARSHALLING_ROUTINE
    pfnFree*: USER_MARSHAL_FREEING_ROUTINE
  IDL_CS_CONVERT* = int32
  NDR_CS_SIZE_CONVERT_ROUTINES* {.final, pure.} = object
    pfnNetSize*: CS_TYPE_NET_SIZE_ROUTINE
    pfnToNetCs*: CS_TYPE_TO_NETCS_ROUTINE
    pfnLocalSize*: CS_TYPE_LOCAL_SIZE_ROUTINE
    pfnFromNetCs*: CS_TYPE_FROM_NETCS_ROUTINE
  NDR_CS_ROUTINES* {.final, pure.} = object
    pSizeConvertRoutines*: ptr NDR_CS_SIZE_CONVERT_ROUTINES
    pTagGettingRoutines*: ptr CS_TAG_GETTING_ROUTINE
  MIDL_STUB_DESC_IMPLICIT_HANDLE_INFO* {.final, union, pure.} = object
    pAutoHandle*: ptr handle_t
    pPrimitiveHandle*: ptr handle_t
    pGenericBindingInfo*: PGENERIC_BINDING_INFO
  MIDL_STUB_DESC* {.final, pure.} = object
    RpcInterfaceInformation*: pointer
    pfnAllocate*: proc(P1: uint32): pointer
    pfnFree*: proc(P1: pointer): void
    apfnNdrRundownRoutines*: ptr NDR_RUNDOWN
    aGenericBindingRoutinePairs*: ptr GENERIC_BINDING_ROUTINE_PAIR
    apfnExprEval*: ptr EXPR_EVAL
    aXmitQuintuple*: ptr XMIT_ROUTINE_QUINTUPLE
    pFormatTypes*: ptr cstring
    fCheckBounds*: int32
    Version*: uint32
    pMallocFreeStruct*: ptr MALLOC_FREE_STRUCT
    MIDLVersion*: int32
    CommFaultOffsets*: ptr COMM_FAULT_OFFSETS
    aUserMarshalQuadruple*: ptr USER_MARSHAL_ROUTINE_QUADRUPLE
    NotifyRoutineTable*: ptr NDR_NOTIFY_ROUTINE
    mFlags*: ULONG_PTR
    CsRoutineTables*: ptr NDR_CS_ROUTINES
    Reserved4*: pointer
    Reserved5*: ULONG_PTR
  PMIDL_STUB_DESC* = ptr MIDL_STUB_DESC
  PMIDL_XMIT_TYPE* = pointer
  MIDL_FORMAT_STRING* {.final, pure.} = object
    Pad*: int16
    Format*: array[1, uint8]
  MIDL_SERVER_INFO* {.final, pure.} = object
    pStubDesc*: PMIDL_STUB_DESC
    DispatchTable*: ptr SERVER_ROUTINE
    ProcString*: PFORMAT_STRING
    FmtStringOffset*: ptr uint16
    ThunkTable*: ptr STUB_THUNK
  PMIDL_SERVER_INFO* = ptr MIDL_SERVER_INFO
  MIDL_STUBLESS_PROXY_INFO* {.final, pure.} = object
    pStubDesc*: PMIDL_STUB_DESC
    ProcFormatString*: PFORMAT_STRING
    FormatStringOffset*: ptr uint16
  PMIDL_STUBLESS_PROXY_INFO* = ptr MIDL_STUBLESS_PROXY_INFO
  CLIENT_CALL_RETURN* {.final, union, pure.} = object
    Pointer*: pointer
    Simple*: int32
  XLAT_SIDE* = int32
  FULL_PTR_TO_REFID_ELEMENT* {.final, pure.} = object
    Next*: ptr FULL_PTR_TO_REFID_ELEMENT
    Pointer*: pointer
    RefId*: uint32
    State*: uint8
  PFULL_PTR_TO_REFID_ELEMENT* = ptr FULL_PTR_TO_REFID_ELEMENT
  FULL_PTR_XLAT_TABLES_PointerToRefId* {.final, pure.} = object
    XlatTable*: ptr PFULL_PTR_TO_REFID_ELEMENT
    NumberOfBuckets*: uint32
    HashMask*: uint32
  FULL_PTR_XLAT_TABLES_RefIdToPointer* {.final, pure.} = object
    XlatTable*: ptr pointer
    StateTable*: ptr uint8
    NumberOfEntries*: uint32
  FULL_PTR_XLAT_TABLES* {.final, pure.} = object
    RefIdToPointer*: FULL_PTR_XLAT_TABLES_RefIdToPointer
    PointerToRefId*: FULL_PTR_XLAT_TABLES_PointerToRefId
    NextRefId*: uint32
    XlatSide*: XLAT_SIDE
  PFULL_PTR_XLAT_TABLES* = ptr FULL_PTR_XLAT_TABLES
  STUB_PHASE* = int32
  PROXY_PHASE* = int32
  RPC_SS_THREAD_HANDLE* = pointer
  EXPR_EVAL* = proc (P1: ptr MIDL_STUB_MESSAGE): void {.stdcall.}
  XMIT_HELPER_ROUTINE* = proc (P1: PMIDL_STUB_MESSAGE): void {.stdcall.}
  CS_TYPE_NET_SIZE_ROUTINE* = proc (P1: RPC_BINDING_HANDLE, P2: uint32, P3: uint32, P4: ptr IDL_CS_CONVERT, P5: ptr uint32, P6: ptr error_status_t): void {.stdcall.}
  CS_TYPE_LOCAL_SIZE_ROUTINE* = proc (P1: RPC_BINDING_HANDLE, P2: uint32, P3: uint32, P4: ptr IDL_CS_CONVERT, P5: ptr uint32, P6: ptr error_status_t): void {.stdcall.}
  CS_TYPE_TO_NETCS_ROUTINE* = proc (P1: RPC_BINDING_HANDLE, P2: uint32, P3: pointer, P4: uint32, P5: ptr int8, P6: ptr uint32, P7: ptr error_status_t): void {.stdcall.}
  CS_TYPE_FROM_NETCS_ROUTINE* = proc (P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr int8, P4: uint32, P5: uint32, P6: pointer, P7: ptr uint32, P8: ptr error_status_t): void {.stdcall.}
  CS_TAG_GETTING_ROUTINE* = proc (P1: RPC_BINDING_HANDLE, P2: int32, P3: ptr uint32, P4: ptr uint32, P5: ptr uint32, P6: ptr error_status_t): void {.stdcall.}
  PRPC_CLIENT_ALLOC* = proc (P1: uint32): pointer {.stdcall.}
  PRPC_CLIENT_FREE* = proc (P1: pointer): void {.stdcall.}
  STUB_THUNK* = proc (P1: PMIDL_STUB_MESSAGE): void {.stdcall.}
  SERVER_ROUTINE* = proc (): int32 {.stdcall.}

proc NdrSimpleTypeMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: uint8): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrPointerMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, pFormat: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSimpleStructMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantStructMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantVaryingStructMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrHardStructMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrComplexStructMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrFixedArrayMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantArrayMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantVaryingArrayMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrVaryingArrayMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrComplexArrayMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrNonConformantStringMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantStringMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrEncapsulatedUnionMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrNonEncapsulatedUnionMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrByteCountPointerMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrXmitOrRepAsMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrInterfacePointerMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrClientContextMarshall*(P1: PMIDL_STUB_MESSAGE, P2: NDR_CCONTEXT, P3: int32): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrServerContextMarshall*(P1: PMIDL_STUB_MESSAGE, P2: NDR_SCONTEXT, P3: NDR_RUNDOWN): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSimpleTypeUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: uint8): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrPointerUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSimpleStructUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantStructUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantVaryingStructUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrHardStructUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrComplexStructUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrFixedArrayUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantArrayUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantVaryingArrayUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrVaryingArrayUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrComplexArrayUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrNonConformantStringUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantStringUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrEncapsulatedUnionUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrNonEncapsulatedUnionUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrByteCountPointerUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrXmitOrRepAsUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrInterfacePointerUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrClientContextUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr NDR_CCONTEXT, P3: RPC_BINDING_HANDLE): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrServerContextUnmarshall*(P1: PMIDL_STUB_MESSAGE): NDR_SCONTEXT {.winapi, dynlib: "rpcrt4", importc.}
proc NdrPointerBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSimpleStructBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantStructBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantVaryingStructBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrHardStructBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrComplexStructBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrFixedArrayBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantArrayBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantVaryingArrayBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrVaryingArrayBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrComplexArrayBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantStringBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrNonConformantStringBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrEncapsulatedUnionBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrNonEncapsulatedUnionBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrByteCountPointerBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrXmitOrRepAsBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrInterfacePointerBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrContextHandleSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrPointerMemorySize*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSimpleStructMemorySize*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantStructMemorySize*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantVaryingStructMemorySize*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrHardStructMemorySize*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrComplexStructMemorySize*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrFixedArrayMemorySize*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantArrayMemorySize*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantVaryingArrayMemorySize*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrVaryingArrayMemorySize*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrComplexArrayMemorySize*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantStringMemorySize*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrNonConformantStringMemorySize*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrEncapsulatedUnionMemorySize*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrNonEncapsulatedUnionMemorySize*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrXmitOrRepAsMemorySize*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrInterfacePointerMemorySize*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrPointerFree*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSimpleStructFree*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantStructFree*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantVaryingStructFree*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrHardStructFree*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrComplexStructFree*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrFixedArrayFree*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantArrayFree*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConformantVaryingArrayFree*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrVaryingArrayFree*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrComplexArrayFree*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrEncapsulatedUnionFree*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrNonEncapsulatedUnionFree*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrByteCountPointerFree*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrXmitOrRepAsFree*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrInterfacePointerFree*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrConvert*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrClientInitializeNew*(P1: PRPC_MESSAGE, P2: PMIDL_STUB_MESSAGE, P3: PMIDL_STUB_DESC, P4: uint32): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrServerInitializeNew*(P1: PRPC_MESSAGE, P2: PMIDL_STUB_MESSAGE, P3: PMIDL_STUB_DESC): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrClientInitialize*(P1: PRPC_MESSAGE, P2: PMIDL_STUB_MESSAGE, P3: PMIDL_STUB_DESC, P4: uint32): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrServerInitialize*(P1: PRPC_MESSAGE, P2: PMIDL_STUB_MESSAGE, P3: PMIDL_STUB_DESC): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrServerInitializeUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: PMIDL_STUB_DESC, P3: PRPC_MESSAGE): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrServerInitializeMarshall*(P1: PRPC_MESSAGE, P2: PMIDL_STUB_MESSAGE): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrGetBuffer*(P1: PMIDL_STUB_MESSAGE, P2: uint32, P3: RPC_BINDING_HANDLE): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrNsGetBuffer*(P1: PMIDL_STUB_MESSAGE, P2: uint32, P3: RPC_BINDING_HANDLE): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSendReceive*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrNsSendReceive*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: ptr RPC_BINDING_HANDLE): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrFreeBuffer*(P1: PMIDL_STUB_MESSAGE): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrClientCall*(P1: PMIDL_STUB_DESC, P2: PFORMAT_STRING): CLIENT_CALL_RETURN {.winapi, dynlib: "rpcrt4", varargs, importc.}
proc NdrStubCall*(P1: ptr IRpcStubBuffer, P2: ptr IRpcChannelBuffer, P3: PRPC_MESSAGE, P4: ptr uint32): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrServerCall*(P1: PRPC_MESSAGE): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrServerUnmarshall*(P1: ptr IRpcChannelBuffer, P2: PRPC_MESSAGE, P3: PMIDL_STUB_MESSAGE, P4: PMIDL_STUB_DESC, P5: PFORMAT_STRING, P6: pointer): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrServerMarshall*(P1: ptr IRpcStubBuffer, P2: ptr IRpcChannelBuffer, P3: PMIDL_STUB_MESSAGE, P4: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrMapCommAndFaultStatus*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint32, P3: ptr uint32, P4: RPC_STATUS): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSH_UPDecision*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: RPC_BUFPTR): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSH_TLUPDecision*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSH_TLUPDecisionBuffer*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSH_IfAlloc*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: uint32): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSH_IfAllocRef*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: uint32): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSH_IfAllocSet*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: uint32): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSH_IfCopy*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: uint32): RPC_BUFPTR {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSH_IfAllocCopy*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: uint32): RPC_BUFPTR {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSH_Copy*(P1: ptr uint8, P2: ptr uint8, P3: uint32): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSH_IfFree*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSH_StringMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: uint32, P4: int32): RPC_BUFPTR {.winapi, dynlib: "rpcrt4", importc.}
proc NdrSH_StringUnMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: int32): RPC_BUFPTR {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSsAllocate*(P1: uint32): pointer {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSsDisableAllocate*(): void {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSsEnableAllocate*(): void {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSsFree*(P1: pointer): void {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSsGetThreadHandle*(): RPC_SS_THREAD_HANDLE {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSsSetClientAllocFree*(P1: PRPC_CLIENT_ALLOC, P2: PRPC_CLIENT_FREE): void {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSsSetThreadHandle*(P1: RPC_SS_THREAD_HANDLE): void {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSsSwapClientAllocFree*(P1: PRPC_CLIENT_ALLOC, P2: PRPC_CLIENT_FREE, P3: ptr PRPC_CLIENT_ALLOC, P4: ptr PRPC_CLIENT_FREE): void {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSmAllocate*(P1: uint32, P2: ptr RPC_STATUS): pointer {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSmClientFree*(P1: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSmDestroyClientContext*(P1: ptr pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSmDisableAllocate*(): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSmEnableAllocate*(): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSmFree*(P1: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSmGetThreadHandle*(P1: ptr RPC_STATUS): RPC_SS_THREAD_HANDLE {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSmSetClientAllocFree*(P1: PRPC_CLIENT_ALLOC, P2: PRPC_CLIENT_FREE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSmSetThreadHandle*(P1: RPC_SS_THREAD_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSmSwapClientAllocFree*(P1: PRPC_CLIENT_ALLOC, P2: PRPC_CLIENT_FREE, P3: ptr PRPC_CLIENT_ALLOC, P4: ptr PRPC_CLIENT_FREE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc NdrRpcSsEnableAllocate*(P1: PMIDL_STUB_MESSAGE): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrRpcSsDisableAllocate*(P1: PMIDL_STUB_MESSAGE): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrRpcSmSetClientToOsf*(P1: PMIDL_STUB_MESSAGE): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrRpcSmClientAllocate*(P1: uint32): pointer {.winapi, dynlib: "rpcrt4", importc.}
proc NdrRpcSmClientFree*(P1: pointer): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrRpcSsDefaultAllocate*(P1: uint32): pointer {.winapi, dynlib: "rpcrt4", importc.}
proc NdrRpcSsDefaultFree*(P1: pointer): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrFullPointerXlatInit*(P1: uint32, P2: XLAT_SIDE): PFULL_PTR_XLAT_TABLES {.winapi, dynlib: "rpcrt4", importc.}
proc NdrFullPointerXlatFree*(P1: PFULL_PTR_XLAT_TABLES): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrFullPointerQueryPointer*(P1: PFULL_PTR_XLAT_TABLES, P2: pointer, P3: uint8, P4: ptr uint32): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrFullPointerQueryRefId*(P1: PFULL_PTR_XLAT_TABLES, P2: uint32, P3: uint8, P4: ptr pointer): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrFullPointerInsertRefId*(P1: PFULL_PTR_XLAT_TABLES, P2: uint32, P3: pointer): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrFullPointerFree*(P1: PFULL_PTR_XLAT_TABLES, P2: pointer): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrAllocate*(P1: PMIDL_STUB_MESSAGE, P2: uint32): pointer {.winapi, dynlib: "rpcrt4", importc.}
proc NdrClearOutParameters*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING, P3: pointer): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrOleAllocate*(P1: uint32): pointer {.winapi, dynlib: "rpcrt4", importc.}
proc NdrOleFree*(P1: pointer): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrUserMarshalMarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrUserMarshalUnmarshall*(P1: PMIDL_STUB_MESSAGE, P2: ptr ptr uint8, P3: PFORMAT_STRING, P4: uint8): ptr uint8 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrUserMarshalBufferSize*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}
proc NdrUserMarshalMemorySize*(P1: PMIDL_STUB_MESSAGE, P2: PFORMAT_STRING): uint32 {.winapi, dynlib: "rpcrt4", importc.}
proc NdrUserMarshalFree*(P1: PMIDL_STUB_MESSAGE, P2: ptr uint8, P3: PFORMAT_STRING): void {.winapi, dynlib: "rpcrt4", importc.}

# misc/rpcnsi.nim

type
  RPC_NS_HANDLE* = HANDLE

const
  RPC_C_NS_SYNTAX_DEFAULT* = 0
  RPC_C_NS_SYNTAX_DCE* = 3
  RPC_C_PROFILE_DEFAULT_ELT* = 0
  RPC_C_PROFILE_ALL_ELT* = 1
  RPC_C_PROFILE_MATCH_BY_IF* = 2
  RPC_C_PROFILE_MATCH_BY_MBR* = 3
  RPC_C_PROFILE_MATCH_BY_BOTH* = 4
  RPC_C_NS_DEFAULT_EXP_AGE* = -1

proc RpcNsBindingExportA*(P1: uint32, P2: ptr uint8, P3: RPC_IF_HANDLE, P4: ptr RPC_BINDING_VECTOR, P5: ptr UUID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsBindingUnexportA*(P1: uint32, P2: ptr uint8, P3: RPC_IF_HANDLE, P4: ptr UUID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsBindingLookupBeginA*(P1: uint32, P2: ptr uint8, P3: RPC_IF_HANDLE, P4: ptr UUID, P5: uint32, P6: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsBindingLookupNext*(P1: RPC_NS_HANDLE, P2: ptr ptr RPC_BINDING_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsBindingLookupDone*(P1: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsGroupDeleteA*(P1: uint32, P2: ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsGroupMbrAddA*(P1: uint32, P2: ptr uint8, P3: uint32, P4: ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsGroupMbrRemoveA*(P1: uint32, P2: ptr uint8, P3: uint32, P4: ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsGroupMbrInqBeginA*(P1: uint32, P2: ptr uint8, P3: uint32, P4: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsGroupMbrInqNextA*(P1: RPC_NS_HANDLE, P2: ptr ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsGroupMbrInqDone*(P1: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsProfileDeleteA*(P1: uint32, P2: ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsProfileEltAddA*(P1: uint32, P2: ptr uint8, P3: ptr RPC_IF_ID, P4: uint32, P5: ptr uint8, P6: uint32, P7: ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsProfileEltRemoveA*(P1: uint32, P2: ptr uint8, P3: ptr RPC_IF_ID, P4: uint32, P5: ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsProfileEltInqBeginA*(P1: uint32, P2: ptr uint8, P3: uint32, P4: ptr RPC_IF_ID, P5: uint32, P6: uint32, P7: ptr uint8, P8: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsProfileEltInqNextA*(P1: RPC_NS_HANDLE, P2: ptr RPC_IF_ID, P3: ptr ptr uint8, P4: ptr uint32, P5: ptr ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsProfileEltInqDone*(P1: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsEntryObjectInqNext*(P1: RPC_NS_HANDLE, P2: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsEntryObjectInqDone*(P1: var ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsEntryExpandNameA*(P1: uint32, P2: ptr uint8, P3: ptr ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsMgmtBindingUnexportA*(P1: uint32, P2: ptr uint8, P3: ptr RPC_IF_ID, P4: uint32, P5: ptr UUID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsMgmtEntryCreateA*(P1: uint32, P2: ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsMgmtEntryDeleteA*(P1: uint32, P2: ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsMgmtEntryInqIfIdsA*(P1: uint32, P2: ptr uint8, P3: ptr ptr RPC_IF_ID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsMgmtHandleSetExpAge*(P1: RPC_NS_HANDLE, P2: uint32): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsMgmtInqExpAge*(P1: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsMgmtSetExpAge*(P1: uint32): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsBindingImportNext*(P1: RPC_NS_HANDLE, P2: ptr RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsBindingImportDone*(P1: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsBindingSelect*(P1: ptr RPC_BINDING_VECTOR, P2: ptr RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsEntryObjectInqBeginA*(P1: uint32, P2: ptr uint8, P3: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsBindingImportBeginA*(P1: uint32, P2: ptr uint8, P3: RPC_IF_HANDLE, P4: ptr UUID, P5: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsBindingExportW*(P1: uint32, P2: ptr uint16, P3: RPC_IF_HANDLE, P4: ptr RPC_BINDING_VECTOR, P5: ptr UUID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsBindingUnexportW*(P1: uint32, P2: ptr uint16, P3: RPC_IF_HANDLE, P4: ptr UUID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsBindingLookupBeginW*(P1: uint32, P2: ptr uint16, P3: RPC_IF_HANDLE, P4: ptr UUID, P5: uint32, P6: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsGroupDeleteW*(P1: uint32, P2: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsGroupMbrAddW*(P1: uint32, P2: ptr uint16, P3: uint32, P4: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsGroupMbrRemoveW*(P1: uint32, P2: ptr uint16, P3: uint32, P4: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsGroupMbrInqBeginW*(P1: uint32, P2: ptr uint16, P3: uint32, P4: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsGroupMbrInqNextW*(P1: RPC_NS_HANDLE, P2: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsProfileDeleteW*(P1: uint32, P2: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsProfileEltAddW*(P1: uint32, P2: ptr uint16, P3: ptr RPC_IF_ID, P4: uint32, P5: ptr uint16, P6: uint32, P7: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsProfileEltRemoveW*(P1: uint32, P2: ptr uint16, P3: ptr RPC_IF_ID, P4: uint32, P5: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsProfileEltInqBeginW*(P1: uint32, P2: ptr uint16, P3: uint32, P4: ptr RPC_IF_ID, P5: uint32, P6: uint32, P7: ptr uint16, P8: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsProfileEltInqNextW*(P1: RPC_NS_HANDLE, P2: ptr RPC_IF_ID, P3: ptr ptr uint16, P4: ptr uint32, P5: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsEntryObjectInqBeginW*(P1: uint32, P2: ptr uint16, P3: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsEntryExpandNameW*(P1: uint32, P2: ptr uint16, P3: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsMgmtBindingUnexportW*(P1: uint32, P2: ptr uint16, P3: ptr RPC_IF_ID, P4: uint32, P5: ptr UUID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsMgmtEntryCreateW*(P1: uint32, P2: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsMgmtEntryDeleteW*(P1: uint32, P2: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsMgmtEntryInqIfIdsW*(P1: uint32, P2: uint16, P3: ptr ptr RPC_IF_ID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc RpcNsBindingImportBeginW*(P1: uint32, P2: ptr uint16, P3: RPC_IF_HANDLE, P4: ptr UUID, P5: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}

when not defined(winansi):
  proc RpcNsBindingLookupBegin*(P1: uint32, P2: ptr uint16, P3: RPC_IF_HANDLE, P4: ptr UUID, P5: uint32, P6: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsBindingLookupBeginW".}
  proc RpcNsBindingImportBegin*(P1: uint32, P2: ptr uint16, P3: RPC_IF_HANDLE, P4: ptr UUID, P5: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsBindingImportBeginW".}
  proc RpcNsBindingExport*(P1: uint32, P2: ptr uint16, P3: RPC_IF_HANDLE, P4: ptr RPC_BINDING_VECTOR, P5: ptr UUID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsBindingExportW".}
  proc RpcNsBindingUnexport*(P1: uint32, P2: ptr uint16, P3: RPC_IF_HANDLE, P4: ptr UUID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsBindingUnexportW".}
  proc RpcNsGroupDelete*(P1: uint32, P2: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsGroupDeleteW".}
  proc RpcNsGroupMbrAdd*(P1: uint32, P2: ptr uint16, P3: uint32, P4: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsGroupMbrAddW".}
  proc RpcNsGroupMbrRemove*(P1: uint32, P2: ptr uint16, P3: uint32, P4: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsGroupMbrRemoveW".}
  proc RpcNsGroupMbrInqBegin*(P1: uint32, P2: ptr uint16, P3: uint32, P4: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsGroupMbrInqBeginW".}
  proc RpcNsGroupMbrInqNext*(P1: RPC_NS_HANDLE, P2: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsGroupMbrInqNextW".}
  proc RpcNsEntryExpandName*(P1: uint32, P2: ptr uint16, P3: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsEntryExpandNameW".}
  proc RpcNsEntryObjectInqBegin*(P1: uint32, P2: ptr uint16, P3: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsEntryObjectInqBeginW".}
  proc RpcNsMgmtBindingUnexport*(P1: uint32, P2: ptr uint16, P3: ptr RPC_IF_ID, P4: uint32, P5: ptr UUID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsMgmtBindingUnexportW".}
  proc RpcNsMgmtEntryCreate*(P1: uint32, P2: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsMgmtEntryCreateW".}
  proc RpcNsMgmtEntryDelete*(P1: uint32, P2: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsMgmtEntryDeleteW".}
  proc RpcNsMgmtEntryInqIfIds*(P1: uint32, P2: uint16, P3: ptr ptr RPC_IF_ID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsMgmtEntryInqIfIdsW".}
  proc RpcNsProfileDelete*(P1: uint32, P2: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsProfileDeleteW".}
  proc RpcNsProfileEltAdd*(P1: uint32, P2: ptr uint16, P3: ptr RPC_IF_ID, P4: uint32, P5: ptr uint16, P6: uint32, P7: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsProfileEltAddW".}
  proc RpcNsProfileEltRemove*(P1: uint32, P2: ptr uint16, P3: ptr RPC_IF_ID, P4: uint32, P5: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsProfileEltRemoveW".}
  proc RpcNsProfileEltInqBegin*(P1: uint32, P2: ptr uint16, P3: uint32, P4: ptr RPC_IF_ID, P5: uint32, P6: uint32, P7: ptr uint16, P8: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsProfileEltInqBeginW".}
  proc RpcNsProfileEltInqNext*(P1: RPC_NS_HANDLE, P2: ptr RPC_IF_ID, P3: ptr ptr uint16, P4: ptr uint32, P5: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsProfileEltInqNextW".}
else:
  proc RpcNsBindingLookupBegin*(P1: uint32, P2: ptr uint8, P3: RPC_IF_HANDLE, P4: ptr UUID, P5: uint32, P6: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsBindingLookupBeginA".}
  proc RpcNsBindingImportBegin*(P1: uint32, P2: ptr uint8, P3: RPC_IF_HANDLE, P4: ptr UUID, P5: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsBindingImportBeginA".}
  proc RpcNsBindingExport*(P1: uint32, P2: ptr uint8, P3: RPC_IF_HANDLE, P4: ptr RPC_BINDING_VECTOR, P5: ptr UUID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsBindingExportA".}
  proc RpcNsBindingUnexport*(P1: uint32, P2: ptr uint8, P3: RPC_IF_HANDLE, P4: ptr UUID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsBindingUnexportA".}
  proc RpcNsGroupDelete*(P1: uint32, P2: ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsGroupDeleteA".}
  proc RpcNsGroupMbrAdd*(P1: uint32, P2: ptr uint8, P3: uint32, P4: ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsGroupMbrAddA".}
  proc RpcNsGroupMbrRemove*(P1: uint32, P2: ptr uint8, P3: uint32, P4: ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsGroupMbrRemoveA".}
  proc RpcNsGroupMbrInqBegin*(P1: uint32, P2: ptr uint8, P3: uint32, P4: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsGroupMbrInqBeginA".}
  proc RpcNsGroupMbrInqNext*(P1: RPC_NS_HANDLE, P2: ptr ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsGroupMbrInqNextA".}
  proc RpcNsEntryExpandName*(P1: uint32, P2: ptr uint8, P3: ptr ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsEntryExpandNameA".}
  proc RpcNsEntryObjectInqBegin*(P1: uint32, P2: ptr uint8, P3: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsEntryObjectInqBeginA".}
  proc RpcNsMgmtBindingUnexport*(P1: uint32, P2: ptr uint8, P3: ptr RPC_IF_ID, P4: uint32, P5: ptr UUID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsMgmtBindingUnexportA".}
  proc RpcNsMgmtEntryCreate*(P1: uint32, P2: ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsMgmtEntryCreateA".}
  proc RpcNsMgmtEntryDelete*(P1: uint32, P2: ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsMgmtEntryDeleteA".}
  proc RpcNsMgmtEntryInqIfIds*(P1: uint32, P2: ptr uint8, P3: ptr ptr RPC_IF_ID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsMgmtEntryInqIfIdsA".}
  proc RpcNsProfileDelete*(P1: uint32, P2: ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsProfileDeleteA".}
  proc RpcNsProfileEltAdd*(P1: uint32, P2: ptr uint8, P3: ptr RPC_IF_ID, P4: uint32, P5: ptr uint8, P6: uint32, P7: ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsProfileEltAddA".}
  proc RpcNsProfileEltRemove*(P1: uint32, P2: ptr uint8, P3: ptr RPC_IF_ID, P4: uint32, P5: ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsProfileEltRemoveA".}
  proc RpcNsProfileEltInqBegin*(P1: uint32, P2: ptr uint8, P3: uint32, P4: ptr RPC_IF_ID, P5: uint32, P6: uint32, P7: ptr uint8, P8: ptr RPC_NS_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsProfileEltInqBeginA".}
  proc RpcNsProfileEltInqNext*(P1: RPC_NS_HANDLE, P2: ptr RPC_IF_ID, P3: ptr ptr uint8, P4: ptr uint32, P5: ptr ptr uint8): RPC_STATUS {.winapi, dynlib: "rpcns4", importc: "RpcNsProfileEltInqNextA".}

# misc/rpcnsip.nim

type
  RPC_IMPORT_CONTEXT_P* {.final, pure.} = object
    LookupContext*: RPC_NS_HANDLE
    ProposedHandle*: RPC_BINDING_HANDLE
    Bindings*: ptr RPC_BINDING_VECTOR
  PRPC_IMPORT_CONTEXT_P* = ptr RPC_IMPORT_CONTEXT_P

proc I_RpcNsGetBuffer*(P1: PRPC_MESSAGE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc I_RpcNsSendReceive*(P1: PRPC_MESSAGE, P2: ptr RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc I_RpcNsRaiseException*(P1: PRPC_MESSAGE, P2: RPC_STATUS): void {.winapi, dynlib: "rpcns4", importc.}
proc I_RpcReBindBuffer*(P1: PRPC_MESSAGE): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc I_NsServerBindSearch*(): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc I_NsClientBindSearch*(): RPC_STATUS {.winapi, dynlib: "rpcns4", importc.}
proc I_NsClientBindDone*(): void {.winapi, dynlib: "rpcns4", importc.}

# misc/rpcnterr.nim

const
  RPC_S_OK* = ERROR_SUCCESS
  RPC_S_INVALID_ARG* = ERROR_INVALID_PARAMETER
  RPC_S_OUT_OF_MEMORY* = ERROR_OUTOFMEMORY
  RPC_S_OUT_OF_THREADS* = ERROR_MAX_THRDS_REACHED
  RPC_S_INVALID_LEVEL* = ERROR_INVALID_PARAMETER
  RPC_S_BUFFER_TOO_SMALL* = ERROR_INSUFFICIENT_BUFFER
  RPC_S_INVALID_SECURITY_DESC* = ERROR_INVALID_SECURITY_DESCR
  RPC_S_ACCESS_DENIED* = ERROR_ACCESS_DENIED
  RPC_S_SERVER_OUT_OF_MEMORY* = ERROR_NOT_ENOUGH_SERVER_MEMORY
  RPC_X_NO_MEMORY* = RPC_S_OUT_OF_MEMORY
  RPC_X_INVALID_BOUND* = RPC_S_INVALID_BOUND
  RPC_X_INVALID_TAG* = RPC_S_INVALID_TAG
  RPC_X_ENUM_VALUE_TOO_LARGE* = RPC_X_ENUM_VALUE_OUT_OF_RANGE
  RPC_X_SS_CONTEXT_MISMATCH* = ERROR_INVALID_HANDLE
  RPC_X_INVALID_BUFFER* = ERROR_INVALID_USER_BUFFER
  RPC_X_INVALID_PIPE_OPERATION* = RPC_X_WRONG_PIPE_ORDER

# misc/secext.nim
const
  # EXTENDED_NAME_FORMAT* = enum
  NameUnknown* = 0
  NameFullyQualifiedDN* = 1
  NameSamCompatible* = 2
  NameDisplay* = 3
  NameUniqueId* = 6
  NameCanonical* = 7
  NameUserPrincipal* = 8
  NameCanonicalEx* = 9
  NameServicePrincipal* = 10
  NameDnsDomain* = 12

type
  EXTENDED_NAME_FORMAT* = int32
  PEXTENDED_NAME_FORMAT* = ptr EXTENDED_NAME_FORMAT

proc GetComputerObjectNameA*(P1: EXTENDED_NAME_FORMAT, P2: LPSTR, P3: PULONG): BOOLEAN {.winapi, dynlib: "secur32", importc.}
proc GetComputerObjectNameW*(P1: EXTENDED_NAME_FORMAT, P2: LPWSTR, P3: PULONG): BOOLEAN {.winapi, dynlib: "secur32", importc.}
proc GetUserNameExA*(P1: EXTENDED_NAME_FORMAT, P2: LPSTR, P3: PULONG): BOOLEAN {.winapi, dynlib: "secur32", importc.}
proc GetUserNameExW*(P1: EXTENDED_NAME_FORMAT, P2: LPWSTR, P3: PULONG): BOOLEAN {.winapi, dynlib: "secur32", importc.}
proc TranslateNameA*(P1: LPCSTR, P2: EXTENDED_NAME_FORMAT, P3: EXTENDED_NAME_FORMAT, P4: LPSTR, P5: PULONG): BOOLEAN {.winapi, dynlib: "secur32", importc.}
proc TranslateNameW*(P1: LPCWSTR, P2: EXTENDED_NAME_FORMAT, P3: EXTENDED_NAME_FORMAT, P4: LPWSTR, P5: PULONG): BOOLEAN {.winapi, dynlib: "secur32", importc.}

when not defined(winansi):
  proc GetComputerObjectName*(P1: EXTENDED_NAME_FORMAT, P2: LPWSTR, P3: PULONG): BOOLEAN {.winapi, dynlib: "secur32", importc: "GetComputerObjectNameW".}
  proc GetUserNameEx*(P1: EXTENDED_NAME_FORMAT, P2: LPWSTR, P3: PULONG): BOOLEAN {.winapi, dynlib: "secur32", importc: "GetUserNameExW".}
  proc TranslateName*(P1: LPCWSTR, P2: EXTENDED_NAME_FORMAT, P3: EXTENDED_NAME_FORMAT, P4: LPWSTR, P5: PULONG): BOOLEAN {.winapi, dynlib: "secur32", importc: "TranslateNameW".}

else:
  proc GetComputerObjectName*(P1: EXTENDED_NAME_FORMAT, P2: LPSTR, P3: PULONG): BOOLEAN {.winapi, dynlib: "secur32", importc: "GetComputerObjectNameA".}
  proc GetUserNameEx*(P1: EXTENDED_NAME_FORMAT, P2: LPSTR, P3: PULONG): BOOLEAN {.winapi, dynlib: "secur32", importc: "GetUserNameExA".}
  proc TranslateName*(P1: LPCSTR, P2: EXTENDED_NAME_FORMAT, P3: EXTENDED_NAME_FORMAT, P4: LPSTR, P5: PULONG): BOOLEAN {.winapi, dynlib: "secur32", importc: "TranslateNameA".}

# misc/usp10.nim
const
  # SCRIPT_JUSTIFY* = enum
  SCRIPT_JUSTIFY_NONE* = 0
  SCRIPT_JUSTIFY_ARABIC_BLANK* = 1
  SCRIPT_JUSTIFY_CHARACTER* = 2
  SCRIPT_JUSTIFY_RESERVED1* = 3
  SCRIPT_JUSTIFY_BLANK* = 4
  SCRIPT_JUSTIFY_RESERVED2* = 5
  SCRIPT_JUSTIFY_RESERVED3* = 6
  SCRIPT_JUSTIFY_ARABIC_NORMAL* = 7
  SCRIPT_JUSTIFY_ARABIC_KASHIDA* = 8
  SCRIPT_JUSTIFY_ARABIC_ALEF* = 9
  SCRIPT_JUSTIFY_ARABIC_HA* = 10
  SCRIPT_JUSTIFY_ARABIC_RA* = 11
  SCRIPT_JUSTIFY_ARABIC_BA* = 12
  SCRIPT_JUSTIFY_ARABIC_BARA* = 13
  SCRIPT_JUSTIFY_ARABIC_SEEN* = 14
  SCRIPT_JUSTIFY_ARABIC_SEEN_M* = 15

const
  SCRIPT_UNDEFINED* = 0
  SGCM_RTL* = 0x00000001
  SSA_PASSWORD* = 0x00000001
  SSA_TAB* = 0x00000002
  SSA_CLIP* = 0x00000004
  SSA_FIT* = 0x00000008
  SSA_DZWG* = 0x00000010
  SSA_FALLBACK* = 0x00000020
  SSA_BREAK* = 0x00000040
  SSA_GLYPHS* = 0x00000080
  SSA_RTL* = 0x00000100
  SSA_GCP* = 0x00000200
  SSA_HOTKEY* = 0x00000400
  SSA_METAFILE* = 0x00000800
  SSA_LINK* = 0x00001000
  SSA_HIDEHOTKEY* = 0x00002000
  SSA_HOTKEYONLY* = 0x00002400
  SSA_FULLMEASURE* = 0x04000000
  SSA_LPKANSIFALLBACK* = 0x08000000
  SSA_PIDX* = 0x10000000
  SSA_LAYOUTRTL* = 0x20000000
  SSA_DONTGLYPH* = 0x40000000
  SSA_NOKASHIDA* = 0x80000000'u32
  SIC_COMPLEX* = 1
  SIC_ASCIIDIGIT* = 2
  SIC_NEUTRAL* = 4
  SCRIPT_DIGITSUBSTITUTE_CONTEXT* = 0
  SCRIPT_DIGITSUBSTITUTE_NONE* = 1
  SCRIPT_DIGITSUBSTITUTE_NATIONAL* = 2
  SCRIPT_DIGITSUBSTITUTE_TRADITIONAL* = 3

type
  # SCRIPT_JUSTIFY* = int32
  SCRIPT_CACHE* = pointer
  SCRIPT_STRING_ANALYSIS* = pointer

type
  SCRIPT_CONTROL* {.final, pure.} = object
    uDefaultLanguage* {.bitsize: 16.}: DWORD
    fContextDigits* {.bitsize: 1.}: DWORD
    fInvertPreBoundDir* {.bitsize: 1.}: DWORD
    fInvertPostBoundDir* {.bitsize: 1.}: DWORD
    fLinkStringBefore* {.bitsize: 1.}: DWORD
    fLinkStringAfter* {.bitsize: 1.}: DWORD
    fNeutralOverride* {.bitsize: 1.}: DWORD
    fNumericOverride* {.bitsize: 1.}: DWORD
    fLegacyBidiClass* {.bitsize: 1.}: DWORD
    fMergeNeutralItems* {.bitsize: 1.}: DWORD
    fUseStandardBidi* {.bitsize: 1.}: DWORD
    fReserved* {.bitsize: 6.}: DWORD
  SCRIPT_STATE* {.final, pure.} = object
    uBidiLevel* {.bitsize: 5.}: WORD
    fOverrideDirection* {.bitsize: 1.}: WORD
    fInhibitSymSwap* {.bitsize: 1.}: WORD
    fCharShape* {.bitsize: 1.}: WORD
    fDigitSubstitute* {.bitsize: 1.}: WORD
    fInhibitLigate* {.bitsize: 1.}: WORD
    fDisplayZWG* {.bitsize: 1.}: WORD
    fArabicNumContext* {.bitsize: 1.}: WORD
    fGcpClusters* {.bitsize: 1.}: WORD
    fReserved* {.bitsize: 1.}: WORD
    fEngineReserved* {.bitsize: 2.}: WORD
  SCRIPT_ANALYSIS* {.final, pure.} = object
    eScript* {.bitsize: 10.}: WORD
    fRTL* {.bitsize: 1.}: WORD
    fLayoutRTL* {.bitsize: 1.}: WORD
    fLinkBefore* {.bitsize: 1.}: WORD
    fLinkAfter* {.bitsize: 1.}: WORD
    fLogicalOrder* {.bitsize: 1.}: WORD
    fNoGlyphIndex* {.bitsize: 1.}: WORD
    s*: SCRIPT_STATE
  SCRIPT_ITEM* {.final, pure.} = object
    iCharPos*: int32
    a*: SCRIPT_ANALYSIS
  SCRIPT_VISATTR* {.final, pure.} = object
    uJustification* {.bitsize: 4.}: WORD
    fClusterStart* {.bitsize: 1.}: WORD
    fDiacritic* {.bitsize: 1.}: WORD
    fZeroWidth* {.bitsize: 1.}: WORD
    fReserved* {.bitsize: 1.}: WORD
    fShapeReserved* {.bitsize: 8.}: WORD
  GOFFSET* {.final, pure.} = object
    du*: LONG
    dv*: LONG
  SCRIPT_LOGATTR* {.final, pure.} = object
    fSoftBreak* {.bitsize: 1.}: BYTE
    fWhiteSpace* {.bitsize: 1.}: BYTE
    fCharStop* {.bitsize: 1.}: BYTE
    fWordStop* {.bitsize: 1.}: BYTE
    fInvalid* {.bitsize: 1.}: BYTE
    fReserved* {.bitsize: 3.}: BYTE
  SCRIPT_PROPERTIES* {.final, pure.} = object
    langid* {.bitsize: 16.}: DWORD
    fNumeric* {.bitsize: 1.}: DWORD
    fComplex* {.bitsize: 1.}: DWORD
    fNeedsWordBreaking* {.bitsize: 1.}: DWORD
    fNeedsCaretInfo* {.bitsize: 1.}: DWORD
    bCharSet* {.bitsize: 8.}: DWORD
    fControl* {.bitsize: 1.}: DWORD
    fPrivateUseArea* {.bitsize: 1.}: DWORD
    fNeedsCharacterJustify* {.bitsize: 1.}: DWORD
    fInvalidGlyph* {.bitsize: 1.}: DWORD
    fInvalidLogAttr* {.bitsize: 1.}: DWORD
    fCDM* {.bitsize: 1.}: DWORD
    fAmbiguousCharSet* {.bitsize: 1.}: DWORD
    fClusterSizeVaries* {.bitsize: 1.}: DWORD
    fRejectInvalid* {.bitsize: 1.}: DWORD
  SCRIPT_FONTPROPERTIES* {.final, pure.} = object
    cBytes*: int32
    wgBlank*: WORD
    wgDefault*: WORD
    wgInvalid*: WORD
    wgKashida*: WORD
    iKashidaWidth*: int32
  SCRIPT_TABDEF* {.final, pure.} = object
    cTabStops*: int32
    iScale*: int32
    pTabStops*: ptr int32
    iTabOrigin*: int32
  SCRIPT_DIGITSUBSTITUTE* {.final, pure.} = object
    NationalDigitLanguage* {.bitsize: 16.}: DWORD
    TraditionalDigitLanguage* {.bitsize: 16.}: DWORD
    DigitSubstitute* {.bitsize: 8.}: DWORD
    dwReserved*: DWORD

proc ScriptFreeCache*(P1: ptr SCRIPT_CACHE): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptItemize*(P1: ptr WCHAR, P2: int32, P3: int32, P4: ptr SCRIPT_CONTROL, P5: ptr SCRIPT_STATE, P6: ptr SCRIPT_ITEM, P7: ptr int32): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptLayout*(P1: int32, P2: ptr BYTE, P3: ptr int32, P4: ptr int32): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptShape*(P1: HDC, P2: ptr SCRIPT_CACHE, P3: ptr WCHAR, P4: int32, P5: int32, P6: ptr SCRIPT_ANALYSIS, P7: ptr WORD, P8: ptr WORD, P9: ptr SCRIPT_VISATTR, P10: ptr int32): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptPlace*(P1: HDC, P2: ptr SCRIPT_CACHE, P3: ptr WORD, P4: int32, P5: ptr SCRIPT_VISATTR, P6: ptr SCRIPT_ANALYSIS, P7: ptr int32, P8: ptr GOFFSET, P9: ptr ABC): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptTextOut*(P1: HDC, P2: ptr SCRIPT_CACHE, P3: int32, P4: int32, P5: UINT, P6: ptr RECT, P7: ptr SCRIPT_ANALYSIS, P8: ptr WCHAR, P9: int32, P10: ptr WORD, P11: int32, P12: ptr int32, P13: ptr int32, P14: ptr GOFFSET): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptJustify*(P1: ptr SCRIPT_VISATTR, P2: ptr int32, P3: int32, P4: int32, P5: int32, P6: ptr int32): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptBreak*(P1: ptr WCHAR, P2: int32, P3: ptr SCRIPT_ANALYSIS, P4: ptr SCRIPT_LOGATTR): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptCPtoX*(P1: int32, P2: BOOL, P3: int32, P4: int32, P5: ptr WORD, P6: ptr SCRIPT_VISATTR, P7: ptr int32, P8: ptr SCRIPT_ANALYSIS, P9: ptr int32): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptXtoCP*(P1: int32, P2: int32, P3: int32, P4: ptr WORD, P5: ptr SCRIPT_VISATTR, P6: ptr int32, P7: ptr SCRIPT_ANALYSIS, P8: ptr int32, P9: ptr int32): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptGetLogicalWidths*(P1: ptr SCRIPT_ANALYSIS, P2: int32, P3: int32, P4: ptr int32, P5: ptr WORD, P6: ptr SCRIPT_VISATTR, P7: ptr int32): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptApplyLogicalWidth*(P1: ptr int32, P2: int32, P3: int32, P4: ptr WORD, P5: ptr SCRIPT_VISATTR, P6: ptr int32, P7: ptr SCRIPT_ANALYSIS, P8: ptr ABC, P9: ptr int32): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptGetCMap*(P1: HDC, P2: ptr SCRIPT_CACHE, P3: ptr WCHAR, P4: int32, P5: DWORD, P6: ptr WORD): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptGetGlyphABCWidth*(P1: HDC, P2: ptr SCRIPT_CACHE, P3: WORD, P4: ptr ABC): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptGetProperties*(P1: ptr ptr SCRIPT_PROPERTIES): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptGetFontProperties*(P1: HDC, P2: ptr SCRIPT_CACHE, P3: ptr SCRIPT_FONTPROPERTIES): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptCacheGetHeight*(P1: HDC, P2: ptr SCRIPT_CACHE, P3: ptr int32): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptIsComplex*(P1: ptr WCHAR, P2: int32, P3: DWORD): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptRecordDigitSubstitution*(P1: LCID, P2: ptr SCRIPT_DIGITSUBSTITUTE): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptApplyDigitSubstitution*(P1: ptr SCRIPT_DIGITSUBSTITUTE, P2: ptr SCRIPT_CONTROL, P3: ptr SCRIPT_STATE): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptStringAnalyse*(P1: HDC, P2: pointer, P3: int32, P4: int32, P5: int32, P6: DWORD, P7: int32, P8: ptr SCRIPT_CONTROL, P9: ptr SCRIPT_STATE, P10: ptr int32, P11: ptr SCRIPT_TABDEF, P12: ptr BYTE, P13: ptr SCRIPT_STRING_ANALYSIS): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptStringFree*(P1: ptr SCRIPT_STRING_ANALYSIS): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptStringGetOrder*(P1: SCRIPT_STRING_ANALYSIS, P2: ptr UINT): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptStringCPtoX*(P1: SCRIPT_STRING_ANALYSIS, P2: int32, P3: BOOL, P4: ptr int32): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptStringXtoCP*(P1: SCRIPT_STRING_ANALYSIS, P2: int32, P3: ptr int32, P4: ptr int32): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptStringGetLogicalWidths*(P1: SCRIPT_STRING_ANALYSIS, P2: ptr int32): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptStringValidate*(P1: SCRIPT_STRING_ANALYSIS): HRESULT {.winapi, dynlib: "usp10", importc.}
proc ScriptStringOut*(P1: SCRIPT_STRING_ANALYSIS, P2: int32, P3: int32, P4: UINT, P5: ptr RECT, P6: int32, P7: int32, P8: BOOL): HRESULT {.winapi, dynlib: "usp10", importc.}

# misc/winperf.nim

const
  PERF_DATA_VERSION* = 1
  PERF_DATA_REVISION* = 1
  PERF_NO_INSTANCES* = -1
  PERF_SIZE_DWORD* = 0
  PERF_SIZE_LARGE* = 256
  PERF_SIZE_ZERO* = 512
  PERF_SIZE_VARIABLE_LEN* = 768
  PERF_TYPE_NUMBER* = 0
  PERF_TYPE_COUNTER* = 1024
  PERF_TYPE_TEXT* = 2048
  PERF_TYPE_ZERO* = 0xC00
  PERF_NUMBER_HEX* = 0
  PERF_NUMBER_DECIMAL* = 0x10000
  PERF_NUMBER_DEC_1000* = 0x20000
  PERF_COUNTER_VALUE* = 0
  PERF_COUNTER_RATE* = 0x10000
  PERF_COUNTER_FRACTION* = 0x20000
  PERF_COUNTER_BASE* = 0x30000
  PERF_COUNTER_ELAPSED* = 0x40000
  PERF_COUNTER_QUEUELEN* = 0x50000
  PERF_COUNTER_HISTOGRAM* = 0x60000
  PERF_TEXT_UNICODE* = 0
  PERF_TEXT_ASCII* = 0x10000
  PERF_TIMER_TICK* = 0
  PERF_TIMER_100NS* = 0x100000
  PERF_OBJECT_TIMER* = 0x200000
  PERF_DELTA_COUNTER* = 0x400000
  PERF_DELTA_BASE* = 0x800000
  PERF_INVERSE_COUNTER* = 0x1000000
  PERF_MULTI_COUNTER* = 0x2000000
  PERF_DISPLAY_NO_SUFFIX* = 0
  PERF_DISPLAY_PER_SEC* = 0x10000000
  PERF_DISPLAY_PERCENT* = 0x20000000
  PERF_DISPLAY_SECONDS* = 0x30000000
  PERF_DISPLAY_NOSHOW* = 0x40000000
  PERF_COUNTER_HISTOGRAM_TYPE* = 0x80000000'i32
  PERF_NO_UNIQUE_ID* = ( -1 )
  PERF_DETAIL_NOVICE* = 100
  PERF_DETAIL_ADVANCED* = 200
  PERF_DETAIL_EXPERT* = 300
  PERF_DETAIL_WIZARD* = 400
  PERF_COUNTER_COUNTER* = ( PERF_SIZE_DWORD or PERF_TYPE_COUNTER or PERF_COUNTER_RATE or PERF_TIMER_TICK or PERF_DELTA_COUNTER or PERF_DISPLAY_PER_SEC )
  PERF_COUNTER_TIMER* = ( PERF_SIZE_LARGE or PERF_TYPE_COUNTER or PERF_COUNTER_RATE or PERF_TIMER_TICK or PERF_DELTA_COUNTER or PERF_DISPLAY_PERCENT )
  PERF_COUNTER_QUEUELEN_TYPE* = ( PERF_SIZE_DWORD or PERF_TYPE_COUNTER or PERF_COUNTER_QUEUELEN or PERF_TIMER_TICK or PERF_DELTA_COUNTER or PERF_DISPLAY_NO_SUFFIX )
  PERF_COUNTER_BULK_COUNT* = ( PERF_SIZE_LARGE or PERF_TYPE_COUNTER or PERF_COUNTER_RATE or PERF_TIMER_TICK or PERF_DELTA_COUNTER or PERF_DISPLAY_PER_SEC )
  PERF_COUNTER_TEXT* = ( PERF_SIZE_VARIABLE_LEN or PERF_TYPE_TEXT or PERF_TEXT_UNICODE or PERF_DISPLAY_NO_SUFFIX )
  PERF_COUNTER_RAWCOUNT* = ( PERF_SIZE_DWORD or PERF_TYPE_NUMBER or PERF_NUMBER_DECIMAL or PERF_DISPLAY_NO_SUFFIX )
  PERF_COUNTER_LARGE_RAWCOUNT* = ( PERF_SIZE_LARGE or PERF_TYPE_NUMBER or PERF_NUMBER_DECIMAL or PERF_DISPLAY_NO_SUFFIX )
  PERF_COUNTER_RAWCOUNT_HEX* = ( PERF_SIZE_DWORD or PERF_TYPE_NUMBER or PERF_NUMBER_HEX or PERF_DISPLAY_NO_SUFFIX )
  PERF_COUNTER_LARGE_RAWCOUNT_HEX* = ( PERF_SIZE_LARGE or PERF_TYPE_NUMBER or PERF_NUMBER_HEX or PERF_DISPLAY_NO_SUFFIX )
  PERF_SAMPLE_FRACTION* = ( PERF_SIZE_DWORD or PERF_TYPE_COUNTER or PERF_COUNTER_FRACTION or PERF_DELTA_COUNTER or PERF_DELTA_BASE or PERF_DISPLAY_PERCENT )
  PERF_SAMPLE_COUNTER* = ( PERF_SIZE_DWORD or PERF_TYPE_COUNTER or PERF_COUNTER_RATE or PERF_TIMER_TICK or PERF_DELTA_COUNTER or PERF_DISPLAY_NO_SUFFIX )
  PERF_COUNTER_NODATA* = ( PERF_SIZE_ZERO or PERF_DISPLAY_NOSHOW )
  PERF_COUNTER_TIMER_INV* = ( PERF_SIZE_LARGE or PERF_TYPE_COUNTER or PERF_COUNTER_RATE or PERF_TIMER_TICK or PERF_DELTA_COUNTER or PERF_INVERSE_COUNTER or PERF_DISPLAY_PERCENT )
  PERF_SAMPLE_BASE* = ( PERF_SIZE_DWORD or PERF_TYPE_COUNTER or PERF_COUNTER_BASE or PERF_DISPLAY_NOSHOW or 1 )
  PERF_AVERAGE_TIMER* = ( PERF_SIZE_DWORD or PERF_TYPE_COUNTER or PERF_COUNTER_FRACTION or PERF_DISPLAY_SECONDS )
  PERF_AVERAGE_BASE* = ( PERF_SIZE_DWORD or PERF_TYPE_COUNTER or PERF_COUNTER_BASE or PERF_DISPLAY_NOSHOW or 2 )
  PERF_AVERAGE_BULK* = ( PERF_SIZE_LARGE or PERF_TYPE_COUNTER or PERF_COUNTER_FRACTION or PERF_DISPLAY_NOSHOW )
  PERF_100NSEC_TIMER* = ( PERF_SIZE_LARGE or PERF_TYPE_COUNTER or PERF_COUNTER_RATE or PERF_TIMER_100NS or PERF_DELTA_COUNTER or PERF_DISPLAY_PERCENT )
  PERF_100NSEC_TIMER_INV* = ( PERF_SIZE_LARGE or PERF_TYPE_COUNTER or PERF_COUNTER_RATE or PERF_TIMER_100NS or PERF_DELTA_COUNTER or PERF_INVERSE_COUNTER or PERF_DISPLAY_PERCENT )
  PERF_COUNTER_MULTI_TIMER* = ( PERF_SIZE_LARGE or PERF_TYPE_COUNTER or PERF_COUNTER_RATE or PERF_DELTA_COUNTER or PERF_TIMER_TICK or PERF_MULTI_COUNTER or PERF_DISPLAY_PERCENT )
  PERF_COUNTER_MULTI_TIMER_INV* = ( PERF_SIZE_LARGE or PERF_TYPE_COUNTER or PERF_COUNTER_RATE or PERF_DELTA_COUNTER or PERF_MULTI_COUNTER or PERF_TIMER_TICK or PERF_INVERSE_COUNTER or PERF_DISPLAY_PERCENT )
  PERF_COUNTER_MULTI_BASE* = ( PERF_SIZE_LARGE or PERF_TYPE_COUNTER or PERF_COUNTER_BASE or PERF_MULTI_COUNTER or PERF_DISPLAY_NOSHOW )
  PERF_100NSEC_MULTI_TIMER* = ( PERF_SIZE_LARGE or PERF_TYPE_COUNTER or PERF_DELTA_COUNTER or PERF_COUNTER_RATE or PERF_TIMER_100NS or PERF_MULTI_COUNTER or PERF_DISPLAY_PERCENT )
  PERF_100NSEC_MULTI_TIMER_INV* = ( PERF_SIZE_LARGE or PERF_TYPE_COUNTER or PERF_DELTA_COUNTER or PERF_COUNTER_RATE or PERF_TIMER_100NS or PERF_MULTI_COUNTER or PERF_INVERSE_COUNTER or PERF_DISPLAY_PERCENT )
  PERF_RAW_FRACTION* = ( PERF_SIZE_DWORD or PERF_TYPE_COUNTER or PERF_COUNTER_FRACTION or PERF_DISPLAY_PERCENT )
  PERF_RAW_BASE* = ( PERF_SIZE_DWORD or PERF_TYPE_COUNTER or PERF_COUNTER_BASE or PERF_DISPLAY_NOSHOW or 3 )
  PERF_ELAPSED_TIME* = ( PERF_SIZE_LARGE or PERF_TYPE_COUNTER or PERF_COUNTER_ELAPSED or PERF_OBJECT_TIMER or PERF_DISPLAY_SECONDS )

type
  PERF_DATA_BLOCK* {.final, pure.} = object
    Signature*: array[4, WCHAR]
    LittleEndian*: DWORD
    Version*: DWORD
    Revision*: DWORD
    TotalByteLength*: DWORD
    HeaderLength*: DWORD
    NumObjectTypes*: DWORD
    DefaultObject*: LONG
    SystemTime*: SYSTEMTIME
    PerfTime*: LARGE_INTEGER
    PerfFreq*: LARGE_INTEGER
    PerfTime100nSec*: LARGE_INTEGER
    SystemNameLength*: DWORD
    SystemNameOffset*: DWORD
  PPERF_DATA_BLOCK* = ptr PERF_DATA_BLOCK
  PERF_OBJECT_TYPE* {.final, pure.} = object
    TotalByteLength*: DWORD
    DefinitionLength*: DWORD
    HeaderLength*: DWORD
    ObjectNameTitleIndex*: DWORD
    ObjectNameTitle*: LPWSTR
    ObjectHelpTitleIndex*: DWORD
    ObjectHelpTitle*: LPWSTR
    DetailLevel*: DWORD
    NumCounters*: DWORD
    DefaultCounter*: LONG
    NumInstances*: LONG
    CodePage*: DWORD
    PerfTime*: LARGE_INTEGER
    PerfFreq*: LARGE_INTEGER
  PPERF_OBJECT_TYPE* = ptr PERF_OBJECT_TYPE
  PERF_COUNTER_DEFINITION* {.final, pure.} = object
    ByteLength*: DWORD
    CounterNameTitleIndex*: DWORD
    CounterNameTitle*: LPWSTR
    CounterHelpTitleIndex*: DWORD
    CounterHelpTitle*: LPWSTR
    DefaultScale*: LONG
    DetailLevel*: DWORD
    CounterType*: DWORD
    CounterSize*: DWORD
    CounterOffset*: DWORD
  PPERF_COUNTER_DEFINITION* = ptr PERF_COUNTER_DEFINITION
  PERF_INSTANCE_DEFINITION* {.final, pure.} = object
    ByteLength*: DWORD
    ParentObjectTitleIndex*: DWORD
    ParentObjectInstance*: DWORD
    UniqueID*: LONG
    NameOffset*: DWORD
    NameLength*: DWORD
  PPERF_INSTANCE_DEFINITION* = ptr PERF_INSTANCE_DEFINITION
  PERF_COUNTER_BLOCK* {.final, pure.} = object
    ByteLength*: DWORD
  PPERF_COUNTER_BLOCK* = ptr PERF_COUNTER_BLOCK
  PM_OPEN_PROC* = proc (P1: LPWSTR): DWORD {.stdcall.}
  PM_COLLECT_PROC* = proc (P1: LPWSTR, P2: ptr PVOID, P3: PDWORD, P4: PDWORD): DWORD {.cdecl.}
  PM_CLOSE_PROC* = proc (): DWORD {.cdecl.}

